<?xml version='1.0' encoding='UTF-8' standalone='yes' ?>
<tagfile>
  <compound kind="file">
    <name>juce_AAX_Modifier_Injector.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_audio_plugin_client/AAX/</path>
    <filename>juce__AAX__Modifier__Injector_8h</filename>
    <class kind="struct">ModifierKeyProvider</class>
    <class kind="struct">ModifierKeyReceiver</class>
  </compound>
  <compound kind="file">
    <name>juce_AbstractFifo.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_core/containers/</path>
    <filename>juce__AbstractFifo_8h</filename>
    <class kind="class">AbstractFifo</class>
  </compound>
  <compound kind="file">
    <name>juce_ActionBroadcaster.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_events/broadcasters/</path>
    <filename>juce__ActionBroadcaster_8h</filename>
    <class kind="class">ActionBroadcaster</class>
  </compound>
  <compound kind="file">
    <name>juce_ActionListener.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_events/broadcasters/</path>
    <filename>juce__ActionListener_8h</filename>
    <class kind="class">ActionListener</class>
  </compound>
  <compound kind="file">
    <name>juce_ActiveXControlComponent.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_gui_extra/embedding/</path>
    <filename>juce__ActiveXControlComponent_8h</filename>
    <class kind="class">ActiveXControlComponent</class>
  </compound>
  <compound kind="file">
    <name>juce_AffineTransform.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_graphics/geometry/</path>
    <filename>juce__AffineTransform_8h</filename>
    <class kind="class">AffineTransform</class>
  </compound>
  <compound kind="file">
    <name>juce_AiffAudioFormat.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_audio_formats/codecs/</path>
    <filename>juce__AiffAudioFormat_8h</filename>
    <class kind="class">AiffAudioFormat</class>
  </compound>
  <compound kind="file">
    <name>juce_AlertWindow.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_gui_basics/windows/</path>
    <filename>juce__AlertWindow_8h</filename>
    <class kind="class">AlertWindow</class>
    <class kind="struct">AlertWindow::LookAndFeelMethods</class>
  </compound>
  <compound kind="file">
    <name>juce_AnimatedAppComponent.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_gui_extra/misc/</path>
    <filename>juce__AnimatedAppComponent_8h</filename>
    <class kind="class">AnimatedAppComponent</class>
  </compound>
  <compound kind="file">
    <name>juce_AnimatedPosition.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_gui_basics/layout/</path>
    <filename>juce__AnimatedPosition_8h</filename>
    <class kind="class">AnimatedPosition</class>
    <class kind="class">AnimatedPosition::Listener</class>
  </compound>
  <compound kind="file">
    <name>juce_AnimatedPositionBehaviours.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_gui_basics/layout/</path>
    <filename>juce__AnimatedPositionBehaviours_8h</filename>
    <class kind="struct">AnimatedPositionBehaviours::ContinuousWithMomentum</class>
    <class kind="struct">AnimatedPositionBehaviours::SnapToPageBoundaries</class>
    <namespace>AnimatedPositionBehaviours</namespace>
  </compound>
  <compound kind="file">
    <name>juce_AppleRemote.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_gui_extra/misc/</path>
    <filename>juce__AppleRemote_8h</filename>
    <class kind="class">AppleRemoteDevice</class>
  </compound>
  <compound kind="file">
    <name>juce_Application.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_gui_basics/application/</path>
    <filename>juce__Application_8h</filename>
    <class kind="class">JUCEApplication</class>
  </compound>
  <compound kind="file">
    <name>juce_ApplicationBase.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_events/messages/</path>
    <filename>juce__ApplicationBase_8h</filename>
    <class kind="class">JUCEApplicationBase</class>
    <member kind="define">
      <type>#define</type>
      <name>JUCE_TRY</name>
      <anchorfile>juce__ApplicationBase_8h.html</anchorfile>
      <anchor>a267fd4f83073fb084b389df70243c52e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>JUCE_CATCH_EXCEPTION</name>
      <anchorfile>juce__ApplicationBase_8h.html</anchorfile>
      <anchor>a76b33d944e52097017e10dbc10de503b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>juce_ApplicationCommandID.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_gui_basics/commands/</path>
    <filename>juce__ApplicationCommandID_8h</filename>
    <namespace>StandardApplicationCommandIDs</namespace>
    <member kind="typedef">
      <type>int</type>
      <name>CommandID</name>
      <anchorfile>juce__ApplicationCommandID_8h.html</anchorfile>
      <anchor>afd69b5d28aad07b587b693925e09308b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>quit</name>
      <anchorfile>namespaceStandardApplicationCommandIDs.html</anchorfile>
      <anchor>ad348cc9beaaea88093769e2da468320aa0e06bba45d6039ddc74f0b437d982fba</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>del</name>
      <anchorfile>namespaceStandardApplicationCommandIDs.html</anchorfile>
      <anchor>ad348cc9beaaea88093769e2da468320aa3519307963b37e47b3c0935a553c8a13</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>cut</name>
      <anchorfile>namespaceStandardApplicationCommandIDs.html</anchorfile>
      <anchor>ad348cc9beaaea88093769e2da468320aac0037bfec469a888d3a7ab1c0c222765</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>copy</name>
      <anchorfile>namespaceStandardApplicationCommandIDs.html</anchorfile>
      <anchor>ad348cc9beaaea88093769e2da468320aa3584c202667823072c928fd699725466</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>paste</name>
      <anchorfile>namespaceStandardApplicationCommandIDs.html</anchorfile>
      <anchor>ad348cc9beaaea88093769e2da468320aae98071537aab261471df0788ab5405de</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>selectAll</name>
      <anchorfile>namespaceStandardApplicationCommandIDs.html</anchorfile>
      <anchor>ad348cc9beaaea88093769e2da468320aa651985a70b21b1d0b7a89007fc8793df</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>deselectAll</name>
      <anchorfile>namespaceStandardApplicationCommandIDs.html</anchorfile>
      <anchor>ad348cc9beaaea88093769e2da468320aacdd0c589b2b1904cde27f75185f65e4a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>undo</name>
      <anchorfile>namespaceStandardApplicationCommandIDs.html</anchorfile>
      <anchor>ad348cc9beaaea88093769e2da468320aa5b866e822eb795f30f0c77ebecc84f7f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>redo</name>
      <anchorfile>namespaceStandardApplicationCommandIDs.html</anchorfile>
      <anchor>ad348cc9beaaea88093769e2da468320aaa2a9602bedb21d34ea2b7cb620d5be1f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>juce_ApplicationCommandInfo.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_gui_basics/commands/</path>
    <filename>juce__ApplicationCommandInfo_8h</filename>
    <class kind="struct">ApplicationCommandInfo</class>
  </compound>
  <compound kind="file">
    <name>juce_ApplicationCommandManager.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_gui_basics/commands/</path>
    <filename>juce__ApplicationCommandManager_8h</filename>
    <class kind="class">ApplicationCommandManager</class>
    <class kind="class">ApplicationCommandManagerListener</class>
  </compound>
  <compound kind="file">
    <name>juce_ApplicationCommandTarget.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_gui_basics/commands/</path>
    <filename>juce__ApplicationCommandTarget_8h</filename>
    <class kind="class">ApplicationCommandTarget</class>
    <class kind="struct">ApplicationCommandTarget::InvocationInfo</class>
  </compound>
  <compound kind="file">
    <name>juce_ApplicationProperties.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_data_structures/app_properties/</path>
    <filename>juce__ApplicationProperties_8h</filename>
    <class kind="class">ApplicationProperties</class>
  </compound>
  <compound kind="file">
    <name>juce_Array.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_core/containers/</path>
    <filename>juce__Array_8h</filename>
    <class kind="class">Array</class>
  </compound>
  <compound kind="file">
    <name>juce_ArrayAllocationBase.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_core/containers/</path>
    <filename>juce__ArrayAllocationBase_8h</filename>
    <class kind="class">ArrayAllocationBase</class>
  </compound>
  <compound kind="file">
    <name>juce_ArrowButton.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_gui_basics/buttons/</path>
    <filename>juce__ArrowButton_8h</filename>
    <class kind="class">ArrowButton</class>
  </compound>
  <compound kind="file">
    <name>juce_AsyncUpdater.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_events/broadcasters/</path>
    <filename>juce__AsyncUpdater_8h</filename>
    <class kind="class">AsyncUpdater</class>
  </compound>
  <compound kind="file">
    <name>juce_Atomic.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_core/memory/</path>
    <filename>juce__Atomic_8h</filename>
    <class kind="class">Atomic</class>
    <member kind="define">
      <type>#define</type>
      <name>JUCE_ATOMICS_MAC_LEGACY</name>
      <anchorfile>juce__Atomic_8h.html</anchorfile>
      <anchor>af8e994784b4febc6f040e4d8d68a4e72</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>juce_AttributedString.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_graphics/fonts/</path>
    <filename>juce__AttributedString_8h</filename>
    <class kind="class">AttributedString</class>
    <class kind="class">AttributedString::Attribute</class>
  </compound>
  <compound kind="file">
    <name>juce_AU_Shared.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_audio_processors/format_types/</path>
    <filename>juce__AU__Shared_8h</filename>
    <class kind="struct">AudioUnitHelpers</class>
    <class kind="struct">AudioUnitHelpers::AUChannelStreamOrder</class>
    <class kind="struct">AudioUnitHelpers::StreamOrder</class>
    <class kind="class">AudioUnitHelpers::ChannelRemapper</class>
    <class kind="class">AudioUnitHelpers::CoreAudioBufferList</class>
    <member kind="define">
      <type>#define</type>
      <name>JUCE_STATE_DICTIONARY_KEY</name>
      <anchorfile>juce__AU__Shared_8h.html</anchorfile>
      <anchor>ac7db797621c267348ba0dae6c874e4c5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>juce_AudioAppComponent.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_audio_utils/gui/</path>
    <filename>juce__AudioAppComponent_8h</filename>
    <class kind="class">AudioAppComponent</class>
  </compound>
  <compound kind="file">
    <name>juce_AudioCDBurner.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_audio_utils/audio_cd/</path>
    <filename>juce__AudioCDBurner_8h</filename>
    <class kind="class">AudioCDBurner</class>
    <class kind="class">AudioCDBurner::BurnProgressListener</class>
  </compound>
  <compound kind="file">
    <name>juce_AudioCDReader.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_audio_utils/audio_cd/</path>
    <filename>juce__AudioCDReader_8h</filename>
    <class kind="class">AudioCDReader</class>
  </compound>
  <compound kind="file">
    <name>juce_AudioChannelSet.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_audio_basics/buffers/</path>
    <filename>juce__AudioChannelSet_8h</filename>
    <class kind="class">AudioChannelSet</class>
  </compound>
  <compound kind="file">
    <name>juce_AudioDataConverters.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_audio_basics/buffers/</path>
    <filename>juce__AudioDataConverters_8h</filename>
    <class kind="class">AudioData</class>
    <class kind="class">AudioData::Pointer</class>
    <class kind="class">AudioData::Converter</class>
    <class kind="class">AudioData::ConverterInstance</class>
    <class kind="class">AudioDataConverters</class>
  </compound>
  <compound kind="file">
    <name>juce_AudioDeviceManager.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_audio_devices/audio_io/</path>
    <filename>juce__AudioDeviceManager_8h</filename>
    <class kind="class">AudioDeviceManager</class>
    <class kind="struct">AudioDeviceManager::AudioDeviceSetup</class>
  </compound>
  <compound kind="file">
    <name>juce_AudioDeviceSelectorComponent.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_audio_utils/gui/</path>
    <filename>juce__AudioDeviceSelectorComponent_8h</filename>
    <class kind="class">AudioDeviceSelectorComponent</class>
  </compound>
  <compound kind="file">
    <name>juce_AudioFormat.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_audio_formats/format/</path>
    <filename>juce__AudioFormat_8h</filename>
    <class kind="class">AudioFormat</class>
  </compound>
  <compound kind="file">
    <name>juce_AudioFormatManager.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_audio_formats/format/</path>
    <filename>juce__AudioFormatManager_8h</filename>
    <class kind="class">AudioFormatManager</class>
  </compound>
  <compound kind="file">
    <name>juce_AudioFormatReader.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_audio_formats/format/</path>
    <filename>juce__AudioFormatReader_8h</filename>
    <class kind="class">AudioFormatReader</class>
    <class kind="struct">AudioFormatReader::ReadHelper</class>
  </compound>
  <compound kind="file">
    <name>juce_AudioFormatReaderSource.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_audio_formats/format/</path>
    <filename>juce__AudioFormatReaderSource_8h</filename>
    <class kind="class">AudioFormatReaderSource</class>
  </compound>
  <compound kind="file">
    <name>juce_AudioFormatWriter.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_audio_formats/format/</path>
    <filename>juce__AudioFormatWriter_8h</filename>
    <class kind="class">AudioFormatWriter</class>
    <class kind="class">AudioFormatWriter::ThreadedWriter</class>
    <class kind="class">AudioFormatWriter::ThreadedWriter::IncomingDataReceiver</class>
    <class kind="struct">AudioFormatWriter::WriteHelper</class>
  </compound>
  <compound kind="file">
    <name>juce_AudioIODevice.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_audio_devices/audio_io/</path>
    <filename>juce__AudioIODevice_8h</filename>
    <class kind="class">AudioIODeviceCallback</class>
    <class kind="class">AudioIODevice</class>
  </compound>
  <compound kind="file">
    <name>juce_AudioIODeviceType.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_audio_devices/audio_io/</path>
    <filename>juce__AudioIODeviceType_8h</filename>
    <class kind="class">AudioIODeviceType</class>
    <class kind="class">AudioIODeviceType::Listener</class>
  </compound>
  <compound kind="file">
    <name>juce_AudioParameterBool.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_audio_processors/utilities/</path>
    <filename>juce__AudioParameterBool_8h</filename>
    <class kind="class">AudioParameterBool</class>
  </compound>
  <compound kind="file">
    <name>juce_AudioParameterChoice.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_audio_processors/utilities/</path>
    <filename>juce__AudioParameterChoice_8h</filename>
    <class kind="class">AudioParameterChoice</class>
  </compound>
  <compound kind="file">
    <name>juce_AudioParameterFloat.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_audio_processors/utilities/</path>
    <filename>juce__AudioParameterFloat_8h</filename>
    <class kind="class">AudioParameterFloat</class>
  </compound>
  <compound kind="file">
    <name>juce_AudioParameterInt.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_audio_processors/utilities/</path>
    <filename>juce__AudioParameterInt_8h</filename>
    <class kind="class">AudioParameterInt</class>
  </compound>
  <compound kind="file">
    <name>juce_AudioPlayHead.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_audio_processors/processors/</path>
    <filename>juce__AudioPlayHead_8h</filename>
    <class kind="class">AudioPlayHead</class>
    <class kind="struct">AudioPlayHead::CurrentPositionInfo</class>
  </compound>
  <compound kind="file">
    <name>juce_AudioPluginFormat.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_audio_processors/format/</path>
    <filename>juce__AudioPluginFormat_8h</filename>
    <class kind="class">AudioPluginFormat</class>
    <class kind="struct">AudioPluginFormat::InstantiationCompletionCallback</class>
  </compound>
  <compound kind="file">
    <name>juce_AudioPluginFormatManager.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_audio_processors/format/</path>
    <filename>juce__AudioPluginFormatManager_8h</filename>
    <class kind="class">AudioPluginFormatManager</class>
  </compound>
  <compound kind="file">
    <name>juce_AudioPluginInstance.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_audio_processors/processors/</path>
    <filename>juce__AudioPluginInstance_8h</filename>
    <class kind="class">AudioPluginInstance</class>
  </compound>
  <compound kind="file">
    <name>juce_AudioProcessor.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_audio_processors/processors/</path>
    <filename>juce__AudioProcessor_8h</filename>
    <class kind="class">AudioProcessor</class>
    <class kind="struct">AudioProcessor::BusesLayout</class>
    <class kind="class">AudioProcessor::Bus</class>
    <class kind="struct">AudioProcessor::BusProperties</class>
    <class kind="struct">AudioProcessor::BusesProperties</class>
  </compound>
  <compound kind="file">
    <name>juce_AudioProcessorEditor.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_audio_processors/processors/</path>
    <filename>juce__AudioProcessorEditor_8h</filename>
    <class kind="class">AudioProcessorEditor</class>
    <class kind="struct">AudioProcessorEditor::ParameterControlHighlightInfo</class>
  </compound>
  <compound kind="file">
    <name>juce_AudioProcessorGraph.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_audio_processors/processors/</path>
    <filename>juce__AudioProcessorGraph_8h</filename>
    <class kind="class">AudioProcessorGraph</class>
    <class kind="class">AudioProcessorGraph::Node</class>
    <class kind="struct">AudioProcessorGraph::Connection</class>
    <class kind="class">AudioProcessorGraph::AudioGraphIOProcessor</class>
  </compound>
  <compound kind="file">
    <name>juce_AudioProcessorListener.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_audio_processors/processors/</path>
    <filename>juce__AudioProcessorListener_8h</filename>
    <class kind="class">AudioProcessorListener</class>
  </compound>
  <compound kind="file">
    <name>juce_AudioProcessorParameter.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_audio_processors/processors/</path>
    <filename>juce__AudioProcessorParameter_8h</filename>
    <class kind="class">AudioProcessorParameter</class>
  </compound>
  <compound kind="file">
    <name>juce_AudioProcessorParameterWithID.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_audio_processors/utilities/</path>
    <filename>juce__AudioProcessorParameterWithID_8h</filename>
    <class kind="class">AudioProcessorParameterWithID</class>
  </compound>
  <compound kind="file">
    <name>juce_AudioProcessorPlayer.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_audio_utils/players/</path>
    <filename>juce__AudioProcessorPlayer_8h</filename>
    <class kind="class">AudioProcessorPlayer</class>
  </compound>
  <compound kind="file">
    <name>juce_AudioProcessorValueTreeState.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_audio_processors/utilities/</path>
    <filename>juce__AudioProcessorValueTreeState_8h</filename>
    <class kind="class">AudioProcessorValueTreeState</class>
    <class kind="struct">AudioProcessorValueTreeState::Listener</class>
    <class kind="class">AudioProcessorValueTreeState::SliderAttachment</class>
    <class kind="class">AudioProcessorValueTreeState::ComboBoxAttachment</class>
    <class kind="class">AudioProcessorValueTreeState::ButtonAttachment</class>
  </compound>
  <compound kind="file">
    <name>juce_AudioSampleBuffer.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_audio_basics/buffers/</path>
    <filename>juce__AudioSampleBuffer_8h</filename>
    <class kind="class">AudioBuffer</class>
    <member kind="typedef">
      <type>AudioBuffer&lt; float &gt;</type>
      <name>AudioSampleBuffer</name>
      <anchorfile>juce__AudioSampleBuffer_8h.html</anchorfile>
      <anchor>a97a2916214efbd76c6b870f9c48efba0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>juce_AudioSource.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_audio_basics/sources/</path>
    <filename>juce__AudioSource_8h</filename>
    <class kind="struct">AudioSourceChannelInfo</class>
    <class kind="class">AudioSource</class>
  </compound>
  <compound kind="file">
    <name>juce_AudioSourcePlayer.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_audio_devices/sources/</path>
    <filename>juce__AudioSourcePlayer_8h</filename>
    <class kind="class">AudioSourcePlayer</class>
  </compound>
  <compound kind="file">
    <name>juce_AudioSubsectionReader.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_audio_formats/format/</path>
    <filename>juce__AudioSubsectionReader_8h</filename>
    <class kind="class">AudioSubsectionReader</class>
  </compound>
  <compound kind="file">
    <name>juce_AudioThumbnail.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_audio_utils/gui/</path>
    <filename>juce__AudioThumbnail_8h</filename>
    <class kind="class">AudioThumbnail</class>
  </compound>
  <compound kind="file">
    <name>juce_AudioThumbnailBase.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_audio_utils/gui/</path>
    <filename>juce__AudioThumbnailBase_8h</filename>
    <class kind="class">AudioThumbnailBase</class>
  </compound>
  <compound kind="file">
    <name>juce_AudioThumbnailCache.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_audio_utils/gui/</path>
    <filename>juce__AudioThumbnailCache_8h</filename>
    <class kind="class">AudioThumbnailCache</class>
  </compound>
  <compound kind="file">
    <name>juce_AudioTransportSource.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_audio_devices/sources/</path>
    <filename>juce__AudioTransportSource_8h</filename>
    <class kind="class">AudioTransportSource</class>
  </compound>
  <compound kind="file">
    <name>juce_AudioUnitPluginFormat.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_audio_processors/format_types/</path>
    <filename>juce__AudioUnitPluginFormat_8h</filename>
    <class kind="class">AudioUnitPluginFormat</class>
    <member kind="enumvalue">
      <type>@</type>
      <name>kAudioUnitProperty_SupportsMPE</name>
      <anchorfile>juce__AudioUnitPluginFormat_8h.html</anchorfile>
      <anchor>adc29c2ff13d900c2f185ee95427fb06ca3d9d3125ae195114257428b622aebb52</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>juce_AudioVisualiserComponent.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_audio_utils/gui/</path>
    <filename>juce__AudioVisualiserComponent_8h</filename>
    <class kind="class">AudioVisualiserComponent</class>
  </compound>
  <compound kind="file">
    <name>juce_Base64.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_core/text/</path>
    <filename>juce__Base64_8h</filename>
    <class kind="struct">Base64</class>
  </compound>
  <compound kind="file">
    <name>juce_BigInteger.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_core/maths/</path>
    <filename>juce__BigInteger_8h</filename>
    <class kind="class">BigInteger</class>
    <member kind="function">
      <type>OutputStream &amp;JUCE_CALLTYPE</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>juce__BigInteger_8h.html</anchorfile>
      <anchor>aad1d3fbf4eac3f0aaf3ca7d741e6faad</anchor>
      <arglist>(OutputStream &amp;stream, const BigInteger &amp;value)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>juce_BitmapLEDProgram.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_blocks_basics/visualisers/</path>
    <filename>juce__BitmapLEDProgram_8h</filename>
    <class kind="struct">BitmapLEDProgram</class>
  </compound>
  <compound kind="file">
    <name>juce_BitPackingUtilities.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_blocks_basics/protocol/</path>
    <filename>juce__BitPackingUtilities_8h</filename>
    <class kind="struct">IntegerWithBitSize</class>
    <class kind="struct">Packed7BitArrayBuilder</class>
    <class kind="struct">Packed7BitArrayBuilder::State</class>
    <class kind="struct">Packed7BitArrayReader</class>
  </compound>
  <compound kind="file">
    <name>juce_Block.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_blocks_basics/blocks/</path>
    <filename>juce__Block_8h</filename>
    <class kind="class">Block</class>
    <class kind="struct">Block::ConnectionPort</class>
    <class kind="struct">Block::DataInputPortListener</class>
  </compound>
  <compound kind="file">
    <name>juce_BlockModels.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_blocks_basics/protocol/</path>
    <filename>juce__BlockModels_8h</filename>
    <class kind="struct">BlockDataSheet</class>
    <class kind="struct">BlockDataSheet::ButtonInfo</class>
    <class kind="struct">BlockDataSheet::StatusLEDInfo</class>
  </compound>
  <compound kind="file">
    <name>juce_blocks_basics.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_blocks_basics/</path>
    <filename>juce__blocks__basics_8h</filename>
    <class kind="class">juce::Block</class>
    <class kind="struct">juce::Block::ConnectionPort</class>
    <class kind="struct">juce::Block::DataInputPortListener</class>
    <class kind="class">juce::TouchSurface</class>
    <class kind="struct">juce::TouchSurface::Touch</class>
    <class kind="struct">juce::TouchSurface::Listener</class>
    <class kind="struct">juce::LEDColour</class>
    <class kind="class">juce::LEDGrid</class>
    <class kind="struct">juce::LEDGrid::Program</class>
    <class kind="struct">juce::LEDGrid::ProgramEventMessage</class>
    <class kind="struct">juce::LEDGrid::Renderer</class>
    <class kind="class">juce::LEDRow</class>
    <class kind="class">juce::ControlButton</class>
    <class kind="struct">juce::ControlButton::Listener</class>
    <class kind="class">juce::TouchList</class>
    <class kind="struct">juce::TouchList::TouchEntry</class>
    <class kind="class">juce::StatusLight</class>
    <class kind="struct">juce::BlockDeviceConnection</class>
    <class kind="struct">juce::BlockTopology</class>
    <class kind="class">juce::TopologySource</class>
    <class kind="struct">juce::TopologySource::Listener</class>
    <class kind="class">juce::PhysicalTopologySource</class>
    <class kind="struct">juce::PhysicalTopologySource::DeviceConnection</class>
    <class kind="struct">juce::PhysicalTopologySource::DeviceDetector</class>
    <class kind="class">juce::RuleBasedTopologySource</class>
    <class kind="struct">juce::RuleBasedTopologySource::Rule</class>
    <class kind="struct">juce::littlefoot::NativeFunction</class>
    <class kind="struct">juce::littlefoot::Program</class>
    <class kind="struct">juce::littlefoot::Runner</class>
    <class kind="struct">juce::littlefoot::Runner::FunctionExecutionContext</class>
    <class kind="struct">juce::littlefoot::Compiler</class>
    <class kind="struct">juce::littlefoot::Compiler::CodeGenerator::Marker</class>
    <class kind="struct">juce::littlefoot::Compiler::CodeGenerator::MarkerAndAddress</class>
    <class kind="struct">juce::littlefoot::Compiler::Statement::Visitor</class>
    <class kind="struct">juce::littlefoot::Compiler::FunctionCall::BuiltInFunction</class>
    <class kind="struct">juce::littlefoot::LittleFootRemoteHeap</class>
    <class kind="struct">juce::DrumPadGridProgram</class>
    <class kind="struct">juce::DrumPadGridProgram::GridFill</class>
    <class kind="struct">juce::BitmapLEDProgram</class>
    <namespace>juce</namespace>
    <namespace>juce::littlefoot</namespace>
    <member kind="typedef">
      <type>char</type>
      <name>int8</name>
      <anchorfile>namespacejuce_1_1littlefoot.html</anchorfile>
      <anchor>a1925c497cab90d639873261ac38181ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned char</type>
      <name>uint8</name>
      <anchorfile>namespacejuce_1_1littlefoot.html</anchorfile>
      <anchor>ac151ec550bdd1d11a90219badc68998d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>short</type>
      <name>int16</name>
      <anchorfile>namespacejuce_1_1littlefoot.html</anchorfile>
      <anchor>a93d8168ea7c301b733768ff7017b76c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned short</type>
      <name>uint16</name>
      <anchorfile>namespacejuce_1_1littlefoot.html</anchorfile>
      <anchor>a8e49a863d4330f68e822ff827c244005</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>int</type>
      <name>int32</name>
      <anchorfile>namespacejuce_1_1littlefoot.html</anchorfile>
      <anchor>af357d20994b45cbbdc1bfdcccb24e171</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned int</type>
      <name>uint32</name>
      <anchorfile>namespacejuce_1_1littlefoot.html</anchorfile>
      <anchor>a6a19808b76c5ad46952071fe0246cd67</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>int16</type>
      <name>FunctionID</name>
      <anchorfile>namespacejuce_1_1littlefoot.html</anchorfile>
      <anchor>afcba142243bbec868407a7c3db0bab73</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>OpCode</name>
      <anchorfile>namespacejuce_1_1littlefoot.html</anchorfile>
      <anchor>a99011f0653cd75bd2e1cd71410250fc9</anchor>
      <arglist></arglist>
      <enumvalue file="namespacejuce_1_1littlefoot.html" anchor="a99011f0653cd75bd2e1cd71410250fc9a3b9f57296fe8c4f516cf9986ad5442ae">LITTLEFOOT_OP</enumvalue>
      <enumvalue file="namespacejuce_1_1littlefoot.html" anchor="a99011f0653cd75bd2e1cd71410250fc9a99a126a28a372030399847823348fed8">endOfOpcodes</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>Type</name>
      <anchorfile>namespacejuce_1_1littlefoot.html</anchorfile>
      <anchor>aaff5d0af0320619fa775b5e3826ddc94</anchor>
      <arglist></arglist>
      <enumvalue file="namespacejuce_1_1littlefoot.html" anchor="aaff5d0af0320619fa775b5e3826ddc94ada11add8aadb6bd651f74d36402f4d66">void_</enumvalue>
      <enumvalue file="namespacejuce_1_1littlefoot.html" anchor="aaff5d0af0320619fa775b5e3826ddc94ad7488204e92ed01986284bef5650eb53">int_</enumvalue>
      <enumvalue file="namespacejuce_1_1littlefoot.html" anchor="aaff5d0af0320619fa775b5e3826ddc94a467afb5838aa377d55cce81f84c5512b">bool_</enumvalue>
      <enumvalue file="namespacejuce_1_1littlefoot.html" anchor="aaff5d0af0320619fa775b5e3826ddc94aefe6d5085c67bc38cd3746f2dc8013e1">float_</enumvalue>
    </member>
  </compound>
  <compound kind="file">
    <name>juce_BlocksProtocolDefinitions.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_blocks_basics/protocol/</path>
    <filename>juce__BlocksProtocolDefinitions_8h</filename>
    <class kind="struct">BlockSerialNumber</class>
    <class kind="struct">DeviceStatus</class>
    <class kind="struct">DeviceConnection</class>
    <class kind="struct">TouchPosition</class>
    <class kind="struct">TouchVelocity</class>
    <member kind="typedef">
      <type>IntegerWithBitSize&lt; 8 &gt;</type>
      <name>ProtocolVersion</name>
      <anchorfile>juce__BlocksProtocolDefinitions_8h.html</anchorfile>
      <anchor>ae33b545bb1a3b1dad7a0cd7051b43c9a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IntegerWithBitSize&lt; 32 &gt;</type>
      <name>PacketTimestamp</name>
      <anchorfile>juce__BlocksProtocolDefinitions_8h.html</anchorfile>
      <anchor>ae5e54646a38a0b24af61fd4a829d84fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IntegerWithBitSize&lt; 5 &gt;</type>
      <name>PacketTimestampOffset</name>
      <anchorfile>juce__BlocksProtocolDefinitions_8h.html</anchorfile>
      <anchor>a358b26fd1cf0631398efc34501fd3d52</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IntegerWithBitSize&lt; 7 &gt;</type>
      <name>MessageType</name>
      <anchorfile>juce__BlocksProtocolDefinitions_8h.html</anchorfile>
      <anchor>a4b9bf701bd6dc97cd4405f46a331cfbd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>uint8</type>
      <name>TopologyIndex</name>
      <anchorfile>juce__BlocksProtocolDefinitions_8h.html</anchorfile>
      <anchor>a14b6e13f3164f7e2484972511373fad0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IntegerWithBitSize&lt; 7 &gt;</type>
      <name>DeviceCount</name>
      <anchorfile>juce__BlocksProtocolDefinitions_8h.html</anchorfile>
      <anchor>a1f5eccf49d1cfc7cab8e58480e38ecbe</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IntegerWithBitSize&lt; 8 &gt;</type>
      <name>ConnectionCount</name>
      <anchorfile>juce__BlocksProtocolDefinitions_8h.html</anchorfile>
      <anchor>aa6e54c8927fa209478df66084a47645a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IntegerWithBitSize&lt; 5 &gt;</type>
      <name>BatteryLevel</name>
      <anchorfile>juce__BlocksProtocolDefinitions_8h.html</anchorfile>
      <anchor>a22dbd515320f27dfae21cc0fd692eabd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IntegerWithBitSize&lt; 1 &gt;</type>
      <name>BatteryCharging</name>
      <anchorfile>juce__BlocksProtocolDefinitions_8h.html</anchorfile>
      <anchor>ad7a96ffed718959d59ce5c199fd9d4c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IntegerWithBitSize&lt; 5 &gt;</type>
      <name>ConnectorPort</name>
      <anchorfile>juce__BlocksProtocolDefinitions_8h.html</anchorfile>
      <anchor>afbd923a3399a826c42a0074bc76c7f5e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IntegerWithBitSize&lt; 5 &gt;</type>
      <name>TouchIndex</name>
      <anchorfile>juce__BlocksProtocolDefinitions_8h.html</anchorfile>
      <anchor>ae335b1c237d9d5698934ca26c93d53d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IntegerWithBitSize&lt; 10 &gt;</type>
      <name>PacketCounter</name>
      <anchorfile>juce__BlocksProtocolDefinitions_8h.html</anchorfile>
      <anchor>a69b6622d96af486d38d829329a1bf08e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IntegerWithBitSize&lt; 9 &gt;</type>
      <name>DeviceCommand</name>
      <anchorfile>juce__BlocksProtocolDefinitions_8h.html</anchorfile>
      <anchor>a88c5caacae1f43b96c1fb0f284dee81d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IntegerWithBitSize&lt; 12 &gt;</type>
      <name>ControlButtonID</name>
      <anchorfile>juce__BlocksProtocolDefinitions_8h.html</anchorfile>
      <anchor>abcbb30c582bb1d4c6575307e43f6def1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IntegerWithBitSize&lt; 7 &gt;</type>
      <name>RotaryDialIndex</name>
      <anchorfile>juce__BlocksProtocolDefinitions_8h.html</anchorfile>
      <anchor>a81eb3a146853c46c8c3b325d2cfb5157</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IntegerWithBitSize&lt; 14 &gt;</type>
      <name>RotaryDialAngle</name>
      <anchorfile>juce__BlocksProtocolDefinitions_8h.html</anchorfile>
      <anchor>a7e6c8fe9fcc3bbe979e0b2de3c626ebf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IntegerWithBitSize&lt; 14 &gt;</type>
      <name>RotaryDialDelta</name>
      <anchorfile>juce__BlocksProtocolDefinitions_8h.html</anchorfile>
      <anchor>af04ad684283da6e0bb2633c0e21f9c3b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IntegerWithBitSize&lt; 16 &gt;</type>
      <name>PacketIndex</name>
      <anchorfile>juce__BlocksProtocolDefinitions_8h.html</anchorfile>
      <anchor>a6c3da9c09c875b1bd5d7ccd4edba7c07</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IntegerWithBitSize&lt; 3 &gt;</type>
      <name>DataChangeCommand</name>
      <anchorfile>juce__BlocksProtocolDefinitions_8h.html</anchorfile>
      <anchor>af3b1f72eb8e691fd11607816f896911d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IntegerWithBitSize&lt; 4 &gt;</type>
      <name>ByteCountFew</name>
      <anchorfile>juce__BlocksProtocolDefinitions_8h.html</anchorfile>
      <anchor>ae3bd27dbd0d48889911377b92c59ce9e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IntegerWithBitSize&lt; 8 &gt;</type>
      <name>ByteCountMany</name>
      <anchorfile>juce__BlocksProtocolDefinitions_8h.html</anchorfile>
      <anchor>a19ad78513e0ddc725eb70b76474c7dd9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IntegerWithBitSize&lt; 8 &gt;</type>
      <name>ByteValue</name>
      <anchorfile>juce__BlocksProtocolDefinitions_8h.html</anchorfile>
      <anchor>a57e1703c70d620e50395f12fa84d7952</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IntegerWithBitSize&lt; 1 &gt;</type>
      <name>ByteSequenceContinues</name>
      <anchorfile>juce__BlocksProtocolDefinitions_8h.html</anchorfile>
      <anchor>abe0b996e200f440873df4a8e29c961c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>MessageFromDevice</name>
      <anchorfile>juce__BlocksProtocolDefinitions_8h.html</anchorfile>
      <anchor>a1513500452861490fb3bf17ea8e8deb7</anchor>
      <arglist></arglist>
      <enumvalue file="juce__BlocksProtocolDefinitions_8h.html" anchor="a1513500452861490fb3bf17ea8e8deb7a8c9e8c9c9b42aacde92c009d1f9fcf1d">deviceTopology</enumvalue>
      <enumvalue file="juce__BlocksProtocolDefinitions_8h.html" anchor="a4bafdbd4d494258c67ba3ca5b9fd55e1ac3b437dd7850dd77e5723bf042832c3d">packetACK</enumvalue>
      <enumvalue file="juce__BlocksProtocolDefinitions_8h.html" anchor="a1513500452861490fb3bf17ea8e8deb7ac01ecf8f98c29d1b5bef2899eb0f4033">touchStart</enumvalue>
      <enumvalue file="juce__BlocksProtocolDefinitions_8h.html" anchor="a1513500452861490fb3bf17ea8e8deb7a570ce4f8772ec08dc667ba8356543773">touchMove</enumvalue>
      <enumvalue file="juce__BlocksProtocolDefinitions_8h.html" anchor="a1513500452861490fb3bf17ea8e8deb7a89d8d02bbf9974414643a62a91ed93f4">touchEnd</enumvalue>
      <enumvalue file="juce__BlocksProtocolDefinitions_8h.html" anchor="a1513500452861490fb3bf17ea8e8deb7adcf26c89c7d0f92ed8f9d6f47376535f">touchStartWithVelocity</enumvalue>
      <enumvalue file="juce__BlocksProtocolDefinitions_8h.html" anchor="a1513500452861490fb3bf17ea8e8deb7a96c51d6b9de54f271195f7c6a045bf1e">touchMoveWithVelocity</enumvalue>
      <enumvalue file="juce__BlocksProtocolDefinitions_8h.html" anchor="a1513500452861490fb3bf17ea8e8deb7ada9920d1552829a6edd57187d44a12fe">touchEndWithVelocity</enumvalue>
      <enumvalue file="juce__BlocksProtocolDefinitions_8h.html" anchor="a1513500452861490fb3bf17ea8e8deb7ae7cdfc666d66322628cb46fb3a4b32ef">controlButtonDown</enumvalue>
      <enumvalue file="juce__BlocksProtocolDefinitions_8h.html" anchor="a1513500452861490fb3bf17ea8e8deb7a43e54c3b903be170a143c954e11ecc92">controlButtonUp</enumvalue>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>packetACK</name>
      <anchorfile>juce__BlocksProtocolDefinitions_8h.html</anchorfile>
      <anchor>a4bafdbd4d494258c67ba3ca5b9fd55e1ac3b437dd7850dd77e5723bf042832c3d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>MessageFromHost</name>
      <anchorfile>juce__BlocksProtocolDefinitions_8h.html</anchorfile>
      <anchor>ab8c5a206ff37bc45a372d4ab02c956cb</anchor>
      <arglist></arglist>
      <enumvalue file="juce__BlocksProtocolDefinitions_8h.html" anchor="ab8c5a206ff37bc45a372d4ab02c956cbabbbbfdecd3eaf2ad82b2f33786a67687">deviceCommandMessage</enumvalue>
      <enumvalue file="juce__BlocksProtocolDefinitions_8h.html" anchor="ab8c5a206ff37bc45a372d4ab02c956cba24dd14178f112a548f94ac8a9252f854">sharedDataChange</enumvalue>
      <enumvalue file="juce__BlocksProtocolDefinitions_8h.html" anchor="a4bafdbd4d494258c67ba3ca5b9fd55e1a5c2c992fda89945d916a0bcef7e24d4c">programEventMessage</enumvalue>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>programEventMessage</name>
      <anchorfile>juce__BlocksProtocolDefinitions_8h.html</anchorfile>
      <anchor>a4bafdbd4d494258c67ba3ca5b9fd55e1a5c2c992fda89945d916a0bcef7e24d4c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>DeviceCommands</name>
      <anchorfile>juce__BlocksProtocolDefinitions_8h.html</anchorfile>
      <anchor>a43b1837fd2667d8513becbb6a7060a9d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>beginAPIMode</name>
      <anchorfile>juce__BlocksProtocolDefinitions_8h.html</anchorfile>
      <anchor>a43b1837fd2667d8513becbb6a7060a9da5d56a582a8c9e8f7be54f87b9a9fbf5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>requestTopologyMessage</name>
      <anchorfile>juce__BlocksProtocolDefinitions_8h.html</anchorfile>
      <anchor>a43b1837fd2667d8513becbb6a7060a9dac74ea907c0e1f7b6a67ace2fa1f3b841</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>endAPIMode</name>
      <anchorfile>juce__BlocksProtocolDefinitions_8h.html</anchorfile>
      <anchor>a43b1837fd2667d8513becbb6a7060a9da13bd9b40a1b9d30a0b4ef0f69e0c259b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>ping</name>
      <anchorfile>juce__BlocksProtocolDefinitions_8h.html</anchorfile>
      <anchor>a43b1837fd2667d8513becbb6a7060a9daad2de303cb1ea37f4a3bd91f5ef4c29f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>debugMode</name>
      <anchorfile>juce__BlocksProtocolDefinitions_8h.html</anchorfile>
      <anchor>a43b1837fd2667d8513becbb6a7060a9da7c69daf30c09e98f789122bf75ca0a36</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>saveProgramAsDefault</name>
      <anchorfile>juce__BlocksProtocolDefinitions_8h.html</anchorfile>
      <anchor>a43b1837fd2667d8513becbb6a7060a9dacf43dc3b77f199062ee683b90f54ba0c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>DataChangeCommands</name>
      <anchorfile>juce__BlocksProtocolDefinitions_8h.html</anchorfile>
      <anchor>a0ad1962e0df7ab8b2b6062dbb3b2f632</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>endOfPacket</name>
      <anchorfile>juce__BlocksProtocolDefinitions_8h.html</anchorfile>
      <anchor>a0ad1962e0df7ab8b2b6062dbb3b2f632a8a756f931b5858f3e7db3f0c1828f92a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>endOfChanges</name>
      <anchorfile>juce__BlocksProtocolDefinitions_8h.html</anchorfile>
      <anchor>a0ad1962e0df7ab8b2b6062dbb3b2f632a5c8de79f1a00eda23746786117065cbf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>skipBytesFew</name>
      <anchorfile>juce__BlocksProtocolDefinitions_8h.html</anchorfile>
      <anchor>a0ad1962e0df7ab8b2b6062dbb3b2f632a5bf49d73c13bc14062b522508554e429</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>skipBytesMany</name>
      <anchorfile>juce__BlocksProtocolDefinitions_8h.html</anchorfile>
      <anchor>a0ad1962e0df7ab8b2b6062dbb3b2f632ab3336f83131ee80e60ee8242ba43f2d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>setSequenceOfBytes</name>
      <anchorfile>juce__BlocksProtocolDefinitions_8h.html</anchorfile>
      <anchor>a0ad1962e0df7ab8b2b6062dbb3b2f632a4df943aa5b96fa30191ae05f7124063e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>setFewBytesWithValue</name>
      <anchorfile>juce__BlocksProtocolDefinitions_8h.html</anchorfile>
      <anchor>a0ad1962e0df7ab8b2b6062dbb3b2f632a10c33d3c741d58616b2384ec2eef9c08</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>setFewBytesWithLastValue</name>
      <anchorfile>juce__BlocksProtocolDefinitions_8h.html</anchorfile>
      <anchor>a0ad1962e0df7ab8b2b6062dbb3b2f632a67dad7b4eff53c4725b2423d16c00700</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>setManyBytesWithValue</name>
      <anchorfile>juce__BlocksProtocolDefinitions_8h.html</anchorfile>
      <anchor>a0ad1962e0df7ab8b2b6062dbb3b2f632af3b7e4c7977b7bb56ee5d180543f349d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>BitSizes</name>
      <anchorfile>juce__BlocksProtocolDefinitions_8h.html</anchorfile>
      <anchor>a4bafdbd4d494258c67ba3ca5b9fd55e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>topologyMessageHeader</name>
      <anchorfile>juce__BlocksProtocolDefinitions_8h.html</anchorfile>
      <anchor>a4bafdbd4d494258c67ba3ca5b9fd55e1a7c277620596c746a2c928217be91fe9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>topologyDeviceInfo</name>
      <anchorfile>juce__BlocksProtocolDefinitions_8h.html</anchorfile>
      <anchor>a4bafdbd4d494258c67ba3ca5b9fd55e1a2f102d1e29983f0d9e0e75772482d846</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>topologyConnectionInfo</name>
      <anchorfile>juce__BlocksProtocolDefinitions_8h.html</anchorfile>
      <anchor>a4bafdbd4d494258c67ba3ca5b9fd55e1a707127053a540f41536d7c1d60944d13</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>typeDeviceAndTime</name>
      <anchorfile>juce__BlocksProtocolDefinitions_8h.html</anchorfile>
      <anchor>a4bafdbd4d494258c67ba3ca5b9fd55e1a3e248e1578017629642370b1a8c7b4b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>touchMessage</name>
      <anchorfile>juce__BlocksProtocolDefinitions_8h.html</anchorfile>
      <anchor>a4bafdbd4d494258c67ba3ca5b9fd55e1ad201d3e6bdf742a8510f0ee15b43c164</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>touchMessageWithVelocity</name>
      <anchorfile>juce__BlocksProtocolDefinitions_8h.html</anchorfile>
      <anchor>a4bafdbd4d494258c67ba3ca5b9fd55e1a7e4cb2289fe70949a3b8e14195b2b83f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>programEventMessage</name>
      <anchorfile>juce__BlocksProtocolDefinitions_8h.html</anchorfile>
      <anchor>a4bafdbd4d494258c67ba3ca5b9fd55e1a2c17076f692e60a1b7f19328757ffaa5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>packetACK</name>
      <anchorfile>juce__BlocksProtocolDefinitions_8h.html</anchorfile>
      <anchor>a4bafdbd4d494258c67ba3ca5b9fd55e1ab160915e283a508f01b6c4fac415669a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>controlButtonMessage</name>
      <anchorfile>juce__BlocksProtocolDefinitions_8h.html</anchorfile>
      <anchor>a4bafdbd4d494258c67ba3ca5b9fd55e1aad24fa0e1db39ea051f3384f30d05085</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>juce_BlowFish.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_cryptography/encryption/</path>
    <filename>juce__BlowFish_8h</filename>
    <class kind="class">BlowFish</class>
  </compound>
  <compound kind="file">
    <name>juce_BluetoothMidiDevicePairingDialogue.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_audio_utils/gui/</path>
    <filename>juce__BluetoothMidiDevicePairingDialogue_8h</filename>
    <class kind="class">BluetoothMidiDevicePairingDialogue</class>
  </compound>
  <compound kind="file">
    <name>juce_BooleanPropertyComponent.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_gui_basics/properties/</path>
    <filename>juce__BooleanPropertyComponent_8h</filename>
    <class kind="class">BooleanPropertyComponent</class>
  </compound>
  <compound kind="file">
    <name>juce_BorderSize.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_graphics/geometry/</path>
    <filename>juce__BorderSize_8h</filename>
    <class kind="class">BorderSize</class>
  </compound>
  <compound kind="file">
    <name>juce_box2d.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_box2d/</path>
    <filename>juce__box2d_8h</filename>
  </compound>
  <compound kind="file">
    <name>juce_Box2DRenderer.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_box2d/utils/</path>
    <filename>juce__Box2DRenderer_8h</filename>
    <class kind="class">Box2DRenderer</class>
  </compound>
  <compound kind="file">
    <name>juce_BubbleComponent.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_gui_basics/misc/</path>
    <filename>juce__BubbleComponent_8h</filename>
    <class kind="class">BubbleComponent</class>
    <class kind="struct">BubbleComponent::LookAndFeelMethods</class>
  </compound>
  <compound kind="file">
    <name>juce_BubbleMessageComponent.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_gui_extra/misc/</path>
    <filename>juce__BubbleMessageComponent_8h</filename>
    <class kind="class">BubbleMessageComponent</class>
  </compound>
  <compound kind="file">
    <name>juce_BufferedInputStream.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_core/streams/</path>
    <filename>juce__BufferedInputStream_8h</filename>
    <class kind="class">BufferedInputStream</class>
  </compound>
  <compound kind="file">
    <name>juce_BufferingAudioFormatReader.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_audio_formats/format/</path>
    <filename>juce__BufferingAudioFormatReader_8h</filename>
    <class kind="class">BufferingAudioReader</class>
  </compound>
  <compound kind="file">
    <name>juce_BufferingAudioSource.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_audio_basics/sources/</path>
    <filename>juce__BufferingAudioSource_8h</filename>
    <class kind="class">BufferingAudioSource</class>
  </compound>
  <compound kind="file">
    <name>juce_Button.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_gui_basics/buttons/</path>
    <filename>juce__Button_8h</filename>
    <class kind="class">Button</class>
    <class kind="class">Button::Listener</class>
    <class kind="struct">Button::LookAndFeelMethods</class>
  </compound>
  <compound kind="file">
    <name>juce_ButtonPropertyComponent.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_gui_basics/properties/</path>
    <filename>juce__ButtonPropertyComponent_8h</filename>
    <class kind="class">ButtonPropertyComponent</class>
  </compound>
  <compound kind="file">
    <name>juce_ByteOrder.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_core/memory/</path>
    <filename>juce__ByteOrder_8h</filename>
    <class kind="class">ByteOrder</class>
  </compound>
  <compound kind="file">
    <name>juce_CachedComponentImage.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_gui_basics/components/</path>
    <filename>juce__CachedComponentImage_8h</filename>
    <class kind="class">CachedComponentImage</class>
  </compound>
  <compound kind="file">
    <name>juce_CachedValue.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_data_structures/values/</path>
    <filename>juce__CachedValue_8h</filename>
    <class kind="class">CachedValue</class>
  </compound>
  <compound kind="file">
    <name>juce_CallbackMessage.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_events/messages/</path>
    <filename>juce__CallbackMessage_8h</filename>
    <class kind="class">CallbackMessage</class>
  </compound>
  <compound kind="file">
    <name>juce_CallOutBox.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_gui_basics/windows/</path>
    <filename>juce__CallOutBox_8h</filename>
    <class kind="class">CallOutBox</class>
    <class kind="struct">CallOutBox::LookAndFeelMethods</class>
  </compound>
  <compound kind="file">
    <name>juce_CameraDevice.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_video/capture/</path>
    <filename>juce__CameraDevice_8h</filename>
    <class kind="class">CameraDevice</class>
    <class kind="class">CameraDevice::Listener</class>
  </compound>
  <compound kind="file">
    <name>juce_CarbonVisibility.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_audio_plugin_client/utility/</path>
    <filename>juce__CarbonVisibility_8h</filename>
    <member kind="function">
      <type>void</type>
      <name>attachWindowHidingHooks</name>
      <anchorfile>juce__CarbonVisibility_8h.html</anchorfile>
      <anchor>a8d16109df1a628b3502ce09f8d4e4119</anchor>
      <arglist>(void *, void *, void *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeWindowHidingHooks</name>
      <anchorfile>juce__CarbonVisibility_8h.html</anchorfile>
      <anchor>a4042d75f5f08bd0d034c543433c0c20b</anchor>
      <arglist>(void *)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>juce_CaretComponent.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_gui_basics/keyboard/</path>
    <filename>juce__CaretComponent_8h</filename>
    <class kind="class">CaretComponent</class>
  </compound>
  <compound kind="file">
    <name>juce_CatmullRomInterpolator.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_audio_basics/effects/</path>
    <filename>juce__CatmullRomInterpolator_8h</filename>
    <class kind="class">CatmullRomInterpolator</class>
  </compound>
  <compound kind="file">
    <name>juce_ChangeBroadcaster.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_events/broadcasters/</path>
    <filename>juce__ChangeBroadcaster_8h</filename>
    <class kind="class">ChangeBroadcaster</class>
  </compound>
  <compound kind="file">
    <name>juce_ChangeListener.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_events/broadcasters/</path>
    <filename>juce__ChangeListener_8h</filename>
    <class kind="class">ChangeListener</class>
  </compound>
  <compound kind="file">
    <name>juce_ChannelRemappingAudioSource.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_audio_basics/sources/</path>
    <filename>juce__ChannelRemappingAudioSource_8h</filename>
    <class kind="class">ChannelRemappingAudioSource</class>
  </compound>
  <compound kind="file">
    <name>juce_CharacterFunctions.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_core/text/</path>
    <filename>juce__CharacterFunctions_8h</filename>
    <class kind="class">CharacterFunctions</class>
    <class kind="struct">CharacterFunctions::HexParser</class>
    <member kind="define">
      <type>#define</type>
      <name>JUCE_NATIVE_WCHAR_IS_UTF8</name>
      <anchorfile>juce__CharacterFunctions_8h.html</anchorfile>
      <anchor>adee5e9cf98ee0bd0a2e5a91fb479f640</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>JUCE_NATIVE_WCHAR_IS_UTF16</name>
      <anchorfile>juce__CharacterFunctions_8h.html</anchorfile>
      <anchor>a8472d1d49a6a5a7692e2ec94e17ce63c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>JUCE_NATIVE_WCHAR_IS_UTF32</name>
      <anchorfile>juce__CharacterFunctions_8h.html</anchorfile>
      <anchor>a32ffe19f7697fad5b1febdce3b5fab4d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>wchar_t</type>
      <name>juce_wchar</name>
      <anchorfile>juce__CharacterFunctions_8h.html</anchorfile>
      <anchor>a7d83261f3888884bbf04a58edc2672da</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>juce_CharPointer_ASCII.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_core/text/</path>
    <filename>juce__CharPointer__ASCII_8h</filename>
    <class kind="class">CharPointer_ASCII</class>
  </compound>
  <compound kind="file">
    <name>juce_CharPointer_UTF16.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_core/text/</path>
    <filename>juce__CharPointer__UTF16_8h</filename>
    <class kind="class">CharPointer_UTF16</class>
  </compound>
  <compound kind="file">
    <name>juce_CharPointer_UTF32.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_core/text/</path>
    <filename>juce__CharPointer__UTF32_8h</filename>
    <class kind="class">CharPointer_UTF32</class>
  </compound>
  <compound kind="file">
    <name>juce_CharPointer_UTF8.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_core/text/</path>
    <filename>juce__CharPointer__UTF8_8h</filename>
    <class kind="class">CharPointer_UTF8</class>
  </compound>
  <compound kind="file">
    <name>juce_CheckSettingMacros.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_audio_plugin_client/utility/</path>
    <filename>juce__CheckSettingMacros_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>JUCE_CHECKSETTINGMACROS_H</name>
      <anchorfile>juce__CheckSettingMacros_8h.html</anchorfile>
      <anchor>acdf46c2bef73873331a20a8992ea1401</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>JucePlugin_Build_VST3</name>
      <anchorfile>juce__CheckSettingMacros_8h.html</anchorfile>
      <anchor>aefca42b08df10a55158f182e4a468db9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>juce_ChildProcess.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_core/threads/</path>
    <filename>juce__ChildProcess_8h</filename>
    <class kind="class">ChildProcess</class>
  </compound>
  <compound kind="file">
    <name>juce_ChoicePropertyComponent.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_gui_basics/properties/</path>
    <filename>juce__ChoicePropertyComponent_8h</filename>
    <class kind="class">ChoicePropertyComponent</class>
  </compound>
  <compound kind="file">
    <name>juce_CodeDocument.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_gui_extra/code_editor/</path>
    <filename>juce__CodeDocument_8h</filename>
    <class kind="class">CodeDocument</class>
    <class kind="class">CodeDocument::Position</class>
    <class kind="class">CodeDocument::Listener</class>
    <class kind="class">CodeDocument::Iterator</class>
  </compound>
  <compound kind="file">
    <name>juce_CodeEditorComponent.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_gui_extra/code_editor/</path>
    <filename>juce__CodeEditorComponent_8h</filename>
    <class kind="class">CodeEditorComponent</class>
    <class kind="struct">CodeEditorComponent::State</class>
    <class kind="struct">CodeEditorComponent::ColourScheme</class>
    <class kind="struct">CodeEditorComponent::ColourScheme::TokenType</class>
  </compound>
  <compound kind="file">
    <name>juce_CodeTokeniser.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_gui_extra/code_editor/</path>
    <filename>juce__CodeTokeniser_8h</filename>
    <class kind="class">CodeTokeniser</class>
  </compound>
  <compound kind="file">
    <name>juce_Colour.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_graphics/colour/</path>
    <filename>juce__Colour_8h</filename>
    <class kind="class">Colour</class>
  </compound>
  <compound kind="file">
    <name>juce_ColourGradient.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_graphics/colour/</path>
    <filename>juce__ColourGradient_8h</filename>
    <class kind="class">ColourGradient</class>
  </compound>
  <compound kind="file">
    <name>juce_Colours.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_graphics/colour/</path>
    <filename>juce__Colours_8h</filename>
    <class kind="class">Colours</class>
  </compound>
  <compound kind="file">
    <name>juce_ColourSelector.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_gui_extra/misc/</path>
    <filename>juce__ColourSelector_8h</filename>
    <class kind="class">ColourSelector</class>
  </compound>
  <compound kind="file">
    <name>juce_ComboBox.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_gui_basics/widgets/</path>
    <filename>juce__ComboBox_8h</filename>
    <class kind="class">ComboBox</class>
    <class kind="class">ComboBox::Listener</class>
    <class kind="struct">ComboBox::LookAndFeelMethods</class>
    <member kind="typedef">
      <type>ComboBox::Listener</type>
      <name>ComboBoxListener</name>
      <anchorfile>juce__ComboBox_8h.html</anchorfile>
      <anchor>ab480afea56011a420dab466db0dac97e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>juce_CompilerSupport.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_core/system/</path>
    <filename>juce__CompilerSupport_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>JUCE_DELETED_FUNCTION</name>
      <anchorfile>juce__CompilerSupport_8h.html</anchorfile>
      <anchor>a1bd79588ea529f27e89c255c0ebd7be3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>juce_Component.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_gui_basics/components/</path>
    <filename>juce__Component_8h</filename>
    <class kind="class">Component</class>
    <class kind="class">Component::SafePointer</class>
    <class kind="class">Component::BailOutChecker</class>
    <class kind="class">Component::Positioner</class>
  </compound>
  <compound kind="file">
    <name>juce_ComponentAnimator.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_gui_basics/layout/</path>
    <filename>juce__ComponentAnimator_8h</filename>
    <class kind="class">ComponentAnimator</class>
  </compound>
  <compound kind="file">
    <name>juce_ComponentBoundsConstrainer.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_gui_basics/layout/</path>
    <filename>juce__ComponentBoundsConstrainer_8h</filename>
    <class kind="class">ComponentBoundsConstrainer</class>
  </compound>
  <compound kind="file">
    <name>juce_ComponentBuilder.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_gui_basics/layout/</path>
    <filename>juce__ComponentBuilder_8h</filename>
    <class kind="class">ComponentBuilder</class>
    <class kind="class">ComponentBuilder::TypeHandler</class>
    <class kind="class">ComponentBuilder::ImageProvider</class>
  </compound>
  <compound kind="file">
    <name>juce_ComponentDragger.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_gui_basics/mouse/</path>
    <filename>juce__ComponentDragger_8h</filename>
    <class kind="class">ComponentDragger</class>
  </compound>
  <compound kind="file">
    <name>juce_ComponentListener.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_gui_basics/components/</path>
    <filename>juce__ComponentListener_8h</filename>
    <class kind="class">ComponentListener</class>
  </compound>
  <compound kind="file">
    <name>juce_ComponentMovementWatcher.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_gui_basics/layout/</path>
    <filename>juce__ComponentMovementWatcher_8h</filename>
    <class kind="class">ComponentMovementWatcher</class>
  </compound>
  <compound kind="file">
    <name>juce_ComponentPeer.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_gui_basics/windows/</path>
    <filename>juce__ComponentPeer_8h</filename>
    <class kind="class">ComponentPeer</class>
    <class kind="struct">ComponentPeer::DragInfo</class>
  </compound>
  <compound kind="file">
    <name>juce_ConcertinaPanel.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_gui_basics/layout/</path>
    <filename>juce__ConcertinaPanel_8h</filename>
    <class kind="class">ConcertinaPanel</class>
    <class kind="struct">ConcertinaPanel::LookAndFeelMethods</class>
  </compound>
  <compound kind="file">
    <name>juce_ConnectedChildProcess.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_events/interprocess/</path>
    <filename>juce__ConnectedChildProcess_8h</filename>
    <class kind="class">ChildProcessSlave</class>
    <class kind="class">ChildProcessMaster</class>
  </compound>
  <compound kind="file">
    <name>juce_ContainerDeletePolicy.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_core/memory/</path>
    <filename>juce__ContainerDeletePolicy_8h</filename>
    <class kind="struct">ContainerDeletePolicy</class>
  </compound>
  <compound kind="file">
    <name>juce_ControlButton.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_blocks_basics/blocks/</path>
    <filename>juce__ControlButton_8h</filename>
    <class kind="class">ControlButton</class>
    <class kind="struct">ControlButton::Listener</class>
  </compound>
  <compound kind="file">
    <name>juce_CoreAudioFormat.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_audio_formats/codecs/</path>
    <filename>juce__CoreAudioFormat_8h</filename>
    <class kind="class">CoreAudioFormat</class>
  </compound>
  <compound kind="file">
    <name>juce_CPlusPlusCodeTokeniser.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_gui_extra/code_editor/</path>
    <filename>juce__CPlusPlusCodeTokeniser_8h</filename>
    <class kind="class">CPlusPlusCodeTokeniser</class>
  </compound>
  <compound kind="file">
    <name>juce_CPlusPlusCodeTokeniserFunctions.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_gui_extra/code_editor/</path>
    <filename>juce__CPlusPlusCodeTokeniserFunctions_8h</filename>
    <class kind="struct">CppTokeniserFunctions</class>
    <class kind="struct">CppTokeniserFunctions::StringIterator</class>
  </compound>
  <compound kind="file">
    <name>juce_CriticalSection.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_core/threads/</path>
    <filename>juce__CriticalSection_8h</filename>
    <class kind="class">CriticalSection</class>
    <class kind="class">DummyCriticalSection</class>
    <class kind="struct">DummyCriticalSection::ScopedLockType</class>
    <member kind="typedef">
      <type>CriticalSection::ScopedLockType</type>
      <name>ScopedLock</name>
      <anchorfile>juce__CriticalSection_8h.html</anchorfile>
      <anchor>acedaa6fb1373c96d2d15e7a617a5cec8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CriticalSection::ScopedUnlockType</type>
      <name>ScopedUnlock</name>
      <anchorfile>juce__CriticalSection_8h.html</anchorfile>
      <anchor>a4cc435f24ace2a8f59b488ed66d9cf2c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CriticalSection::ScopedTryLockType</type>
      <name>ScopedTryLock</name>
      <anchorfile>juce__CriticalSection_8h.html</anchorfile>
      <anchor>a5d3ed387d4c09d8fbfb8ad1f2db610df</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>juce_CustomTypeface.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_graphics/fonts/</path>
    <filename>juce__CustomTypeface_8h</filename>
    <class kind="class">CustomTypeface</class>
  </compound>
  <compound kind="file">
    <name>juce_Decibels.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_audio_basics/effects/</path>
    <filename>juce__Decibels_8h</filename>
    <class kind="class">Decibels</class>
  </compound>
  <compound kind="file">
    <name>juce_DeletedAtShutdown.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_events/messages/</path>
    <filename>juce__DeletedAtShutdown_8h</filename>
    <class kind="class">DeletedAtShutdown</class>
  </compound>
  <compound kind="file">
    <name>juce_Desktop.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_gui_basics/components/</path>
    <filename>juce__Desktop_8h</filename>
    <class kind="class">FocusChangeListener</class>
    <class kind="class">Desktop</class>
    <class kind="class">Desktop::Displays</class>
    <class kind="struct">Desktop::Displays::Display</class>
  </compound>
  <compound kind="file">
    <name>juce_DialogWindow.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_gui_basics/windows/</path>
    <filename>juce__DialogWindow_8h</filename>
    <class kind="class">DialogWindow</class>
    <class kind="struct">DialogWindow::LaunchOptions</class>
  </compound>
  <compound kind="file">
    <name>juce_DirectoryContentsDisplayComponent.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_gui_basics/filebrowser/</path>
    <filename>juce__DirectoryContentsDisplayComponent_8h</filename>
    <class kind="class">DirectoryContentsDisplayComponent</class>
  </compound>
  <compound kind="file">
    <name>juce_DirectoryContentsList.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_gui_basics/filebrowser/</path>
    <filename>juce__DirectoryContentsList_8h</filename>
    <class kind="class">DirectoryContentsList</class>
    <class kind="struct">DirectoryContentsList::FileInfo</class>
  </compound>
  <compound kind="file">
    <name>juce_DirectoryIterator.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_core/files/</path>
    <filename>juce__DirectoryIterator_8h</filename>
    <class kind="class">DirectoryIterator</class>
  </compound>
  <compound kind="file">
    <name>juce_DirectShowComponent.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_video/playback/</path>
    <filename>juce__DirectShowComponent_8h</filename>
    <class kind="class">DirectShowComponent</class>
  </compound>
  <compound kind="file">
    <name>juce_DocumentWindow.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_gui_basics/windows/</path>
    <filename>juce__DocumentWindow_8h</filename>
    <class kind="class">DocumentWindow</class>
    <class kind="struct">DocumentWindow::LookAndFeelMethods</class>
  </compound>
  <compound kind="file">
    <name>juce_DragAndDropContainer.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_gui_basics/mouse/</path>
    <filename>juce__DragAndDropContainer_8h</filename>
    <class kind="class">DragAndDropContainer</class>
  </compound>
  <compound kind="file">
    <name>juce_DragAndDropTarget.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_gui_basics/mouse/</path>
    <filename>juce__DragAndDropTarget_8h</filename>
    <class kind="class">DragAndDropTarget</class>
    <class kind="class">DragAndDropTarget::SourceDetails</class>
  </compound>
  <compound kind="file">
    <name>juce_Draggable3DOrientation.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_opengl/geometry/</path>
    <filename>juce__Draggable3DOrientation_8h</filename>
    <class kind="class">Draggable3DOrientation</class>
  </compound>
  <compound kind="file">
    <name>juce_Drawable.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_gui_basics/drawables/</path>
    <filename>juce__Drawable_8h</filename>
    <class kind="class">Drawable</class>
    <class kind="class">Drawable::ValueTreeWrapperBase</class>
  </compound>
  <compound kind="file">
    <name>juce_DrawableButton.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_gui_basics/buttons/</path>
    <filename>juce__DrawableButton_8h</filename>
    <class kind="class">DrawableButton</class>
  </compound>
  <compound kind="file">
    <name>juce_DrawableComposite.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_gui_basics/drawables/</path>
    <filename>juce__DrawableComposite_8h</filename>
    <class kind="class">DrawableComposite</class>
    <class kind="class">DrawableComposite::ValueTreeWrapper</class>
  </compound>
  <compound kind="file">
    <name>juce_DrawableImage.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_gui_basics/drawables/</path>
    <filename>juce__DrawableImage_8h</filename>
    <class kind="class">DrawableImage</class>
    <class kind="class">DrawableImage::ValueTreeWrapper</class>
  </compound>
  <compound kind="file">
    <name>juce_DrawablePath.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_gui_basics/drawables/</path>
    <filename>juce__DrawablePath_8h</filename>
    <class kind="class">DrawablePath</class>
    <class kind="class">DrawablePath::ValueTreeWrapper</class>
    <class kind="class">DrawablePath::ValueTreeWrapper::Element</class>
  </compound>
  <compound kind="file">
    <name>juce_DrawableRectangle.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_gui_basics/drawables/</path>
    <filename>juce__DrawableRectangle_8h</filename>
    <class kind="class">DrawableRectangle</class>
    <class kind="class">DrawableRectangle::ValueTreeWrapper</class>
  </compound>
  <compound kind="file">
    <name>juce_DrawableShape.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_gui_basics/drawables/</path>
    <filename>juce__DrawableShape_8h</filename>
    <class kind="class">DrawableShape</class>
    <class kind="class">DrawableShape::RelativeFillType</class>
    <class kind="class">DrawableShape::FillAndStrokeState</class>
  </compound>
  <compound kind="file">
    <name>juce_DrawableText.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_gui_basics/drawables/</path>
    <filename>juce__DrawableText_8h</filename>
    <class kind="class">DrawableText</class>
    <class kind="class">DrawableText::ValueTreeWrapper</class>
  </compound>
  <compound kind="file">
    <name>juce_DropShadowEffect.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_graphics/effects/</path>
    <filename>juce__DropShadowEffect_8h</filename>
    <class kind="struct">DropShadow</class>
    <class kind="class">DropShadowEffect</class>
  </compound>
  <compound kind="file">
    <name>juce_DropShadower.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_gui_basics/misc/</path>
    <filename>juce__DropShadower_8h</filename>
    <class kind="class">DropShadower</class>
  </compound>
  <compound kind="file">
    <name>juce_DrumPadLEDProgram.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_blocks_basics/visualisers/</path>
    <filename>juce__DrumPadLEDProgram_8h</filename>
    <class kind="struct">DrumPadGridProgram</class>
    <class kind="struct">DrumPadGridProgram::GridFill</class>
  </compound>
  <compound kind="file">
    <name>juce_DynamicLibrary.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_core/threads/</path>
    <filename>juce__DynamicLibrary_8h</filename>
    <class kind="class">DynamicLibrary</class>
  </compound>
  <compound kind="file">
    <name>juce_DynamicObject.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_core/containers/</path>
    <filename>juce__DynamicObject_8h</filename>
    <class kind="class">DynamicObject</class>
  </compound>
  <compound kind="file">
    <name>juce_EdgeTable.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_graphics/geometry/</path>
    <filename>juce__EdgeTable_8h</filename>
    <class kind="class">EdgeTable</class>
  </compound>
  <compound kind="file">
    <name>juce_ElementComparator.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_core/containers/</path>
    <filename>juce__ElementComparator_8h</filename>
    <class kind="class">DefaultElementComparator</class>
  </compound>
  <compound kind="file">
    <name>juce_Expression.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_core/maths/</path>
    <filename>juce__Expression_8h</filename>
    <class kind="class">Expression</class>
    <class kind="class">Expression::Scope</class>
    <class kind="class">Expression::Scope::Visitor</class>
    <class kind="struct">Expression::Symbol</class>
  </compound>
  <compound kind="file">
    <name>juce_FakeMouseMoveGenerator.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_audio_plugin_client/utility/</path>
    <filename>juce__FakeMouseMoveGenerator_8h</filename>
    <class kind="class">FakeMouseMoveGenerator</class>
  </compound>
  <compound kind="file">
    <name>juce_FFT.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_audio_basics/effects/</path>
    <filename>juce__FFT_8h</filename>
    <class kind="class">FFT</class>
    <class kind="struct">FFT::Complex</class>
  </compound>
  <compound kind="file">
    <name>juce_File.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_core/files/</path>
    <filename>juce__File_8h</filename>
    <class kind="class">File</class>
    <class kind="struct">File::NaturalFileComparator</class>
  </compound>
  <compound kind="file">
    <name>juce_FileBasedDocument.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_gui_extra/documents/</path>
    <filename>juce__FileBasedDocument_8h</filename>
    <class kind="class">FileBasedDocument</class>
  </compound>
  <compound kind="file">
    <name>juce_FileBrowserComponent.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_gui_basics/filebrowser/</path>
    <filename>juce__FileBrowserComponent_8h</filename>
    <class kind="class">FileBrowserComponent</class>
    <class kind="struct">FileBrowserComponent::LookAndFeelMethods</class>
  </compound>
  <compound kind="file">
    <name>juce_FileBrowserListener.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_gui_basics/filebrowser/</path>
    <filename>juce__FileBrowserListener_8h</filename>
    <class kind="class">FileBrowserListener</class>
  </compound>
  <compound kind="file">
    <name>juce_FileChooser.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_gui_basics/filebrowser/</path>
    <filename>juce__FileChooser_8h</filename>
    <class kind="class">FileChooser</class>
  </compound>
  <compound kind="file">
    <name>juce_FileChooserDialogBox.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_gui_basics/filebrowser/</path>
    <filename>juce__FileChooserDialogBox_8h</filename>
    <class kind="class">FileChooserDialogBox</class>
  </compound>
  <compound kind="file">
    <name>juce_FileDragAndDropTarget.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_gui_basics/mouse/</path>
    <filename>juce__FileDragAndDropTarget_8h</filename>
    <class kind="class">FileDragAndDropTarget</class>
  </compound>
  <compound kind="file">
    <name>juce_FileFilter.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_core/files/</path>
    <filename>juce__FileFilter_8h</filename>
    <class kind="class">FileFilter</class>
  </compound>
  <compound kind="file">
    <name>juce_FileInputSource.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_core/streams/</path>
    <filename>juce__FileInputSource_8h</filename>
    <class kind="class">FileInputSource</class>
  </compound>
  <compound kind="file">
    <name>juce_FileInputStream.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_core/files/</path>
    <filename>juce__FileInputStream_8h</filename>
    <class kind="class">FileInputStream</class>
  </compound>
  <compound kind="file">
    <name>juce_FileListComponent.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_gui_basics/filebrowser/</path>
    <filename>juce__FileListComponent_8h</filename>
    <class kind="class">FileListComponent</class>
  </compound>
  <compound kind="file">
    <name>juce_FileLogger.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_core/logging/</path>
    <filename>juce__FileLogger_8h</filename>
    <class kind="class">FileLogger</class>
  </compound>
  <compound kind="file">
    <name>juce_FilenameComponent.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_gui_basics/filebrowser/</path>
    <filename>juce__FilenameComponent_8h</filename>
    <class kind="class">FilenameComponentListener</class>
    <class kind="class">FilenameComponent</class>
    <class kind="struct">FilenameComponent::LookAndFeelMethods</class>
  </compound>
  <compound kind="file">
    <name>juce_FileOutputStream.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_core/files/</path>
    <filename>juce__FileOutputStream_8h</filename>
    <class kind="class">FileOutputStream</class>
  </compound>
  <compound kind="file">
    <name>juce_FilePreviewComponent.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_gui_basics/filebrowser/</path>
    <filename>juce__FilePreviewComponent_8h</filename>
    <class kind="class">FilePreviewComponent</class>
  </compound>
  <compound kind="file">
    <name>juce_FileSearchPath.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_core/files/</path>
    <filename>juce__FileSearchPath_8h</filename>
    <class kind="class">FileSearchPath</class>
  </compound>
  <compound kind="file">
    <name>juce_FileSearchPathListComponent.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_gui_basics/filebrowser/</path>
    <filename>juce__FileSearchPathListComponent_8h</filename>
    <class kind="class">FileSearchPathListComponent</class>
  </compound>
  <compound kind="file">
    <name>juce_FileTreeComponent.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_gui_basics/filebrowser/</path>
    <filename>juce__FileTreeComponent_8h</filename>
    <class kind="class">FileTreeComponent</class>
  </compound>
  <compound kind="file">
    <name>juce_FillType.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_graphics/colour/</path>
    <filename>juce__FillType_8h</filename>
    <class kind="class">FillType</class>
  </compound>
  <compound kind="file">
    <name>juce_FlacAudioFormat.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_audio_formats/codecs/</path>
    <filename>juce__FlacAudioFormat_8h</filename>
    <class kind="class">FlacAudioFormat</class>
  </compound>
  <compound kind="file">
    <name>juce_FlexBox.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_gui_basics/layout/</path>
    <filename>juce__FlexBox_8h</filename>
    <class kind="class">FlexBox</class>
  </compound>
  <compound kind="file">
    <name>juce_FlexItem.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_gui_basics/layout/</path>
    <filename>juce__FlexItem_8h</filename>
    <class kind="class">FlexItem</class>
    <class kind="struct">FlexItem::Margin</class>
  </compound>
  <compound kind="file">
    <name>juce_FloatVectorOperations.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_audio_basics/buffers/</path>
    <filename>juce__FloatVectorOperations_8h</filename>
    <class kind="class">FloatVectorOperations</class>
  </compound>
  <compound kind="file">
    <name>juce_Font.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_graphics/fonts/</path>
    <filename>juce__Font_8h</filename>
    <class kind="class">Font</class>
  </compound>
  <compound kind="file">
    <name>juce_GenericAudioProcessorEditor.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_audio_processors/processors/</path>
    <filename>juce__GenericAudioProcessorEditor_8h</filename>
    <class kind="class">GenericAudioProcessorEditor</class>
  </compound>
  <compound kind="file">
    <name>juce_GlowEffect.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_graphics/effects/</path>
    <filename>juce__GlowEffect_8h</filename>
    <class kind="class">GlowEffect</class>
  </compound>
  <compound kind="file">
    <name>juce_GlyphArrangement.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_graphics/fonts/</path>
    <filename>juce__GlyphArrangement_8h</filename>
    <class kind="class">PositionedGlyph</class>
    <class kind="class">GlyphArrangement</class>
  </compound>
  <compound kind="file">
    <name>juce_GraphicsContext.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_graphics/contexts/</path>
    <filename>juce__GraphicsContext_8h</filename>
    <class kind="class">Graphics</class>
    <class kind="class">Graphics::ScopedSaveState</class>
  </compound>
  <compound kind="file">
    <name>juce_GroupComponent.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_gui_basics/layout/</path>
    <filename>juce__GroupComponent_8h</filename>
    <class kind="class">GroupComponent</class>
    <class kind="struct">GroupComponent::LookAndFeelMethods</class>
  </compound>
  <compound kind="file">
    <name>juce_GZIPCompressorOutputStream.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_core/zip/</path>
    <filename>juce__GZIPCompressorOutputStream_8h</filename>
    <class kind="class">GZIPCompressorOutputStream</class>
  </compound>
  <compound kind="file">
    <name>juce_GZIPDecompressorInputStream.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_core/zip/</path>
    <filename>juce__GZIPDecompressorInputStream_8h</filename>
    <class kind="class">GZIPDecompressorInputStream</class>
  </compound>
  <compound kind="file">
    <name>juce_HashMap.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_core/containers/</path>
    <filename>juce__HashMap_8h</filename>
    <class kind="struct">DefaultHashFunctions</class>
    <class kind="class">HashMap</class>
    <class kind="struct">HashMap::Iterator</class>
  </compound>
  <compound kind="file">
    <name>juce_HeapBlock.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_core/memory/</path>
    <filename>juce__HeapBlock_8h</filename>
    <class kind="class">HeapBlock</class>
  </compound>
  <compound kind="file">
    <name>juce_HighResolutionTimer.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_core/threads/</path>
    <filename>juce__HighResolutionTimer_8h</filename>
    <class kind="class">HighResolutionTimer</class>
  </compound>
  <compound kind="file">
    <name>juce_HostPacketBuilder.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_blocks_basics/protocol/</path>
    <filename>juce__HostPacketBuilder_8h</filename>
    <class kind="struct">HostPacketBuilder</class>
  </compound>
  <compound kind="file">
    <name>juce_HostPacketDecoder.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_blocks_basics/protocol/</path>
    <filename>juce__HostPacketDecoder_8h</filename>
    <class kind="struct">HostPacketDecoder</class>
  </compound>
  <compound kind="file">
    <name>juce_HyperlinkButton.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_gui_basics/buttons/</path>
    <filename>juce__HyperlinkButton_8h</filename>
    <class kind="class">HyperlinkButton</class>
  </compound>
  <compound kind="file">
    <name>juce_Identifier.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_core/text/</path>
    <filename>juce__Identifier_8h</filename>
    <class kind="class">Identifier</class>
  </compound>
  <compound kind="file">
    <name>juce_IIRFilter.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_audio_basics/effects/</path>
    <filename>juce__IIRFilter_8h</filename>
    <class kind="class">IIRCoefficients</class>
    <class kind="class">IIRFilter</class>
  </compound>
  <compound kind="file">
    <name>juce_IIRFilterAudioSource.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_audio_basics/sources/</path>
    <filename>juce__IIRFilterAudioSource_8h</filename>
    <class kind="class">IIRFilterAudioSource</class>
  </compound>
  <compound kind="file">
    <name>juce_Image.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_graphics/images/</path>
    <filename>juce__Image_8h</filename>
    <class kind="class">Image</class>
    <class kind="class">Image::BitmapData</class>
    <class kind="class">Image::BitmapData::BitmapDataReleaser</class>
    <class kind="class">ImagePixelData</class>
    <class kind="struct">ImagePixelData::Listener</class>
    <class kind="class">ImageType</class>
    <class kind="class">SoftwareImageType</class>
    <class kind="class">NativeImageType</class>
  </compound>
  <compound kind="file">
    <name>juce_ImageButton.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_gui_basics/buttons/</path>
    <filename>juce__ImageButton_8h</filename>
    <class kind="class">ImageButton</class>
    <class kind="struct">ImageButton::LookAndFeelMethods</class>
  </compound>
  <compound kind="file">
    <name>juce_ImageCache.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_graphics/images/</path>
    <filename>juce__ImageCache_8h</filename>
    <class kind="class">ImageCache</class>
  </compound>
  <compound kind="file">
    <name>juce_ImageComponent.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_gui_basics/widgets/</path>
    <filename>juce__ImageComponent_8h</filename>
    <class kind="class">ImageComponent</class>
  </compound>
  <compound kind="file">
    <name>juce_ImageConvolutionKernel.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_graphics/images/</path>
    <filename>juce__ImageConvolutionKernel_8h</filename>
    <class kind="class">ImageConvolutionKernel</class>
  </compound>
  <compound kind="file">
    <name>juce_ImageEffectFilter.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_graphics/effects/</path>
    <filename>juce__ImageEffectFilter_8h</filename>
    <class kind="class">ImageEffectFilter</class>
  </compound>
  <compound kind="file">
    <name>juce_ImageFileFormat.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_graphics/images/</path>
    <filename>juce__ImageFileFormat_8h</filename>
    <class kind="class">ImageFileFormat</class>
    <class kind="class">PNGImageFormat</class>
    <class kind="class">JPEGImageFormat</class>
    <class kind="class">GIFImageFormat</class>
  </compound>
  <compound kind="file">
    <name>juce_ImagePreviewComponent.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_gui_basics/filebrowser/</path>
    <filename>juce__ImagePreviewComponent_8h</filename>
    <class kind="class">ImagePreviewComponent</class>
  </compound>
  <compound kind="file">
    <name>juce_IncludeModuleHeaders.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_audio_plugin_client/utility/</path>
    <filename>juce__IncludeModuleHeaders_8h</filename>
    <namespace>juce</namespace>
    <member kind="define">
      <type>#define</type>
      <name>Component</name>
      <anchorfile>juce__IncludeModuleHeaders_8h.html</anchorfile>
      <anchor>a43f72e6eba2a77ceba6172bb1a5e35bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>Point</name>
      <anchorfile>juce__IncludeModuleHeaders_8h.html</anchorfile>
      <anchor>a264185c815a47814791f68e7c6da85ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>repostCurrentNSEvent</name>
      <anchorfile>namespacejuce.html</anchorfile>
      <anchor>a0ff23bf31b8954b2b6d62f3bb543c048</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const PluginHostType &amp;</type>
      <name>getHostType</name>
      <anchorfile>namespacejuce.html</anchorfile>
      <anchor>aac8f4243feb65824717064a710249b8e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>AudioProcessor *JUCE_API JUCE_CALLTYPE</type>
      <name>createPluginFilterOfType</name>
      <anchorfile>juce__IncludeModuleHeaders_8h.html</anchorfile>
      <anchor>aa191c4cf12f6ca6f6fddc4d3c8cd6677</anchor>
      <arglist>(AudioProcessor::WrapperType)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>juce_IncludeSystemHeaders.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_audio_plugin_client/utility/</path>
    <filename>juce__IncludeSystemHeaders_8h</filename>
  </compound>
  <compound kind="file">
    <name>juce_Initialisation.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_events/messages/</path>
    <filename>juce__Initialisation_8h</filename>
    <class kind="class">ScopedJuceInitialiser_GUI</class>
    <member kind="define">
      <type>#define</type>
      <name>START_JUCE_APPLICATION</name>
      <anchorfile>juce__Initialisation_8h.html</anchorfile>
      <anchor>a10c79cf9cafd40244a741e5945878e79</anchor>
      <arglist>(AppClass)</arglist>
    </member>
    <member kind="function">
      <type>JUCE_API void JUCE_CALLTYPE</type>
      <name>initialiseJuce_GUI</name>
      <anchorfile>juce__Initialisation_8h.html</anchorfile>
      <anchor>aa648b242fe6ecc639ac53ec9c969822f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>JUCE_API void JUCE_CALLTYPE</type>
      <name>shutdownJuce_GUI</name>
      <anchorfile>juce__Initialisation_8h.html</anchorfile>
      <anchor>a1c949ca46c8ef9bcefbaf9256ab6ff80</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>juce_InputSource.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_core/streams/</path>
    <filename>juce__InputSource_8h</filename>
    <class kind="class">InputSource</class>
  </compound>
  <compound kind="file">
    <name>juce_InputStream.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_core/streams/</path>
    <filename>juce__InputStream_8h</filename>
    <class kind="class">InputStream</class>
  </compound>
  <compound kind="file">
    <name>juce_InterprocessConnection.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_events/interprocess/</path>
    <filename>juce__InterprocessConnection_8h</filename>
    <class kind="class">InterprocessConnection</class>
  </compound>
  <compound kind="file">
    <name>juce_InterprocessConnectionServer.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_events/interprocess/</path>
    <filename>juce__InterprocessConnectionServer_8h</filename>
    <class kind="class">InterprocessConnectionServer</class>
  </compound>
  <compound kind="file">
    <name>juce_InterProcessLock.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_core/threads/</path>
    <filename>juce__InterProcessLock_8h</filename>
    <class kind="class">InterProcessLock</class>
    <class kind="class">InterProcessLock::ScopedLockType</class>
  </compound>
  <compound kind="file">
    <name>juce_IPAddress.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_core/network/</path>
    <filename>juce__IPAddress_8h</filename>
    <class kind="class">IPAddress</class>
  </compound>
  <compound kind="file">
    <name>juce_Javascript.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_core/javascript/</path>
    <filename>juce__Javascript_8h</filename>
    <class kind="class">JavascriptEngine</class>
  </compound>
  <compound kind="file">
    <name>juce_JSON.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_core/javascript/</path>
    <filename>juce__JSON_8h</filename>
    <class kind="class">JSON</class>
  </compound>
  <compound kind="file">
    <name>juce_Justification.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_graphics/placement/</path>
    <filename>juce__Justification_8h</filename>
    <class kind="class">Justification</class>
  </compound>
  <compound kind="file">
    <name>juce_KeyboardFocusTraverser.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_gui_basics/keyboard/</path>
    <filename>juce__KeyboardFocusTraverser_8h</filename>
    <class kind="class">KeyboardFocusTraverser</class>
  </compound>
  <compound kind="file">
    <name>juce_KeyFileGeneration.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_tracktion_marketplace/marketplace/</path>
    <filename>juce__KeyFileGeneration_8h</filename>
    <class kind="class">KeyGeneration</class>
  </compound>
  <compound kind="file">
    <name>juce_KeyListener.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_gui_basics/keyboard/</path>
    <filename>juce__KeyListener_8h</filename>
    <class kind="class">KeyListener</class>
  </compound>
  <compound kind="file">
    <name>juce_KeyMappingEditorComponent.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_gui_extra/misc/</path>
    <filename>juce__KeyMappingEditorComponent_8h</filename>
    <class kind="class">KeyMappingEditorComponent</class>
  </compound>
  <compound kind="file">
    <name>juce_KeyPress.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_gui_basics/keyboard/</path>
    <filename>juce__KeyPress_8h</filename>
    <class kind="class">KeyPress</class>
  </compound>
  <compound kind="file">
    <name>juce_KeyPressMappingSet.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_gui_basics/commands/</path>
    <filename>juce__KeyPressMappingSet_8h</filename>
    <class kind="class">KeyPressMappingSet</class>
  </compound>
  <compound kind="file">
    <name>juce_KnownPluginList.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_audio_processors/scanning/</path>
    <filename>juce__KnownPluginList_8h</filename>
    <class kind="class">KnownPluginList</class>
    <class kind="struct">KnownPluginList::PluginTree</class>
    <class kind="class">KnownPluginList::CustomScanner</class>
  </compound>
  <compound kind="file">
    <name>juce_Label.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_gui_basics/widgets/</path>
    <filename>juce__Label_8h</filename>
    <class kind="class">Label</class>
    <class kind="class">Label::Listener</class>
    <class kind="struct">Label::LookAndFeelMethods</class>
    <member kind="typedef">
      <type>Label::Listener</type>
      <name>LabelListener</name>
      <anchorfile>juce__Label_8h.html</anchorfile>
      <anchor>ab9b5d624453111189a1343155b81218e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>juce_LADSPAPluginFormat.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_audio_processors/format_types/</path>
    <filename>juce__LADSPAPluginFormat_8h</filename>
    <class kind="class">LADSPAPluginFormat</class>
  </compound>
  <compound kind="file">
    <name>juce_LagrangeInterpolator.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_audio_basics/effects/</path>
    <filename>juce__LagrangeInterpolator_8h</filename>
    <class kind="class">LagrangeInterpolator</class>
  </compound>
  <compound kind="file">
    <name>juce_LAMEEncoderAudioFormat.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_audio_formats/codecs/</path>
    <filename>juce__LAMEEncoderAudioFormat_8h</filename>
    <class kind="class">LAMEEncoderAudioFormat</class>
  </compound>
  <compound kind="file">
    <name>juce_LassoComponent.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_gui_basics/mouse/</path>
    <filename>juce__LassoComponent_8h</filename>
    <class kind="class">LassoSource</class>
    <class kind="class">LassoComponent</class>
  </compound>
  <compound kind="file">
    <name>juce_LeakedObjectDetector.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_core/memory/</path>
    <filename>juce__LeakedObjectDetector_8h</filename>
    <class kind="class">LeakedObjectDetector</class>
    <member kind="define">
      <type>#define</type>
      <name>JUCE_LEAK_DETECTOR</name>
      <anchorfile>juce__LeakedObjectDetector_8h.html</anchorfile>
      <anchor>ab3639a79598b35f2116f4572af0d93f1</anchor>
      <arglist>(OwnerClass)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>juce_LEDGrid.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_blocks_basics/blocks/</path>
    <filename>juce__LEDGrid_8h</filename>
    <class kind="struct">LEDColour</class>
    <class kind="class">LEDGrid</class>
    <class kind="struct">LEDGrid::Program</class>
    <class kind="struct">LEDGrid::ProgramEventMessage</class>
    <class kind="struct">LEDGrid::Renderer</class>
  </compound>
  <compound kind="file">
    <name>juce_LEDRow.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_blocks_basics/blocks/</path>
    <filename>juce__LEDRow_8h</filename>
    <class kind="class">LEDRow</class>
  </compound>
  <compound kind="file">
    <name>juce_Line.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_graphics/geometry/</path>
    <filename>juce__Line_8h</filename>
    <class kind="class">Line</class>
  </compound>
  <compound kind="file">
    <name>juce_LinearSmoothedValue.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_audio_basics/effects/</path>
    <filename>juce__LinearSmoothedValue_8h</filename>
    <class kind="class">LinearSmoothedValue</class>
  </compound>
  <compound kind="file">
    <name>juce_LinkedListPointer.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_core/containers/</path>
    <filename>juce__LinkedListPointer_8h</filename>
    <class kind="class">LinkedListPointer</class>
    <class kind="class">LinkedListPointer::Appender</class>
  </compound>
  <compound kind="file">
    <name>juce_ListBox.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_gui_basics/widgets/</path>
    <filename>juce__ListBox_8h</filename>
    <class kind="class">ListBoxModel</class>
    <class kind="class">ListBox</class>
  </compound>
  <compound kind="file">
    <name>juce_ListenerList.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_core/containers/</path>
    <filename>juce__ListenerList_8h</filename>
    <class kind="class">ListenerList</class>
    <class kind="struct">ListenerList::DummyBailOutChecker</class>
    <class kind="class">ListenerList::Iterator</class>
  </compound>
  <compound kind="file">
    <name>juce_LittleFootCompiler.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_blocks_basics/littlefoot/</path>
    <filename>juce__LittleFootCompiler_8h</filename>
    <class kind="struct">littlefoot::Compiler</class>
    <class kind="struct">littlefoot::Compiler::CodeGenerator::Marker</class>
    <class kind="struct">littlefoot::Compiler::CodeGenerator::MarkerAndAddress</class>
    <class kind="struct">littlefoot::Compiler::Statement::Visitor</class>
    <class kind="struct">littlefoot::Compiler::FunctionCall::BuiltInFunction</class>
    <namespace>littlefoot</namespace>
    <member kind="define">
      <type>#define</type>
      <name>LITTLEFOOT_KEYWORDS</name>
      <anchorfile>juce__blocks__basics_8h.html</anchorfile>
      <anchor>a890ca09ed2bdf3ba0ab2337a5585eea1</anchor>
      <arglist>(X)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LITTLEFOOT_OPERATORS</name>
      <anchorfile>juce__blocks__basics_8h.html</anchorfile>
      <anchor>af710dc9fe4fc9d3b753cc01fd3de61c2</anchor>
      <arglist>(X)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECLARE_LITTLEFOOT_TOKEN</name>
      <anchorfile>juce__blocks__basics_8h.html</anchorfile>
      <anchor>a11581d3b51a682d72e9a53a3dd1b6490</anchor>
      <arglist>(name, str)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LITTLEFOOT_COMPARE_KEYWORD</name>
      <anchorfile>juce__blocks__basics_8h.html</anchorfile>
      <anchor>a2a387568ac88a066b75b135c204eb46f</anchor>
      <arglist>(name, str)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LITTLEFOOT_COMPARE_OPERATOR</name>
      <anchorfile>juce__blocks__basics_8h.html</anchorfile>
      <anchor>a8b7d52f0231724bdd45b49d61deac3d7</anchor>
      <arglist>(name, str)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LITTLEFOOT_KEYWORDS</name>
      <anchorfile>juce__LittleFootCompiler_8h.html</anchorfile>
      <anchor>a890ca09ed2bdf3ba0ab2337a5585eea1</anchor>
      <arglist>(X)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LITTLEFOOT_OPERATORS</name>
      <anchorfile>juce__LittleFootCompiler_8h.html</anchorfile>
      <anchor>af710dc9fe4fc9d3b753cc01fd3de61c2</anchor>
      <arglist>(X)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECLARE_LITTLEFOOT_TOKEN</name>
      <anchorfile>juce__LittleFootCompiler_8h.html</anchorfile>
      <anchor>a11581d3b51a682d72e9a53a3dd1b6490</anchor>
      <arglist>(name, str)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LITTLEFOOT_COMPARE_KEYWORD</name>
      <anchorfile>juce__LittleFootCompiler_8h.html</anchorfile>
      <anchor>a2a387568ac88a066b75b135c204eb46f</anchor>
      <arglist>(name, str)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LITTLEFOOT_COMPARE_OPERATOR</name>
      <anchorfile>juce__LittleFootCompiler_8h.html</anchorfile>
      <anchor>a8b7d52f0231724bdd45b49d61deac3d7</anchor>
      <arglist>(name, str)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>juce_LittleFootRemoteHeap.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_blocks_basics/littlefoot/</path>
    <filename>juce__LittleFootRemoteHeap_8h</filename>
    <class kind="struct">littlefoot::LittleFootRemoteHeap</class>
    <namespace>littlefoot</namespace>
  </compound>
  <compound kind="file">
    <name>juce_LittleFootRunner.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_blocks_basics/littlefoot/</path>
    <filename>juce__LittleFootRunner_8h</filename>
    <class kind="struct">littlefoot::NativeFunction</class>
    <class kind="struct">littlefoot::Program</class>
    <class kind="struct">littlefoot::Runner</class>
    <class kind="struct">littlefoot::Runner::FunctionExecutionContext</class>
    <namespace>littlefoot</namespace>
    <member kind="define">
      <type>#define</type>
      <name>LITTLEFOOT_DEBUG_TRACE</name>
      <anchorfile>juce__blocks__basics_8h.html</anchorfile>
      <anchor>a9fe26a06c4bc348cebb6833fe11babb9</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LITTLEFOOT_DUMP_PROGRAM</name>
      <anchorfile>juce__blocks__basics_8h.html</anchorfile>
      <anchor>a577070ae814877cba707a6d341667277</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LITTLEFOOT_OPCODES</name>
      <anchorfile>juce__blocks__basics_8h.html</anchorfile>
      <anchor>ae736ddd76d994424daf97e3bfb964037</anchor>
      <arglist>(OP, OP_INT8, OP_INT16, OP_INT32)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LITTLEFOOT_OP</name>
      <anchorfile>juce__blocks__basics_8h.html</anchorfile>
      <anchor>a1b3544c2056e3aca149ead659534b63a</anchor>
      <arglist>(name)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LITTLEFOOT_PERFORM_OP</name>
      <anchorfile>juce__blocks__basics_8h.html</anchorfile>
      <anchor>adf1a22a2a443f1731efa9a82a84cbc51</anchor>
      <arglist>(name)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LITTLEFOOT_PERFORM_OP_INT8</name>
      <anchorfile>juce__blocks__basics_8h.html</anchorfile>
      <anchor>a1175969d20fe0aba037f97ab237dcdf3</anchor>
      <arglist>(name)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LITTLEFOOT_PERFORM_OP_INT16</name>
      <anchorfile>juce__blocks__basics_8h.html</anchorfile>
      <anchor>a5b8f4e4d5f8d5fffd5a8776430d3111d</anchor>
      <arglist>(name)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LITTLEFOOT_PERFORM_OP_INT32</name>
      <anchorfile>juce__blocks__basics_8h.html</anchorfile>
      <anchor>a4ded1c58e61c8528ee74f27fb7da2177</anchor>
      <arglist>(name)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LITTLEFOOT_DEBUG_TRACE</name>
      <anchorfile>juce__LittleFootRunner_8h.html</anchorfile>
      <anchor>a9fe26a06c4bc348cebb6833fe11babb9</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LITTLEFOOT_DUMP_PROGRAM</name>
      <anchorfile>juce__LittleFootRunner_8h.html</anchorfile>
      <anchor>a577070ae814877cba707a6d341667277</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LITTLEFOOT_OPCODES</name>
      <anchorfile>juce__LittleFootRunner_8h.html</anchorfile>
      <anchor>ae736ddd76d994424daf97e3bfb964037</anchor>
      <arglist>(OP, OP_INT8, OP_INT16, OP_INT32)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LITTLEFOOT_OP</name>
      <anchorfile>juce__LittleFootRunner_8h.html</anchorfile>
      <anchor>a1b3544c2056e3aca149ead659534b63a</anchor>
      <arglist>(name)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LITTLEFOOT_PERFORM_OP</name>
      <anchorfile>juce__LittleFootRunner_8h.html</anchorfile>
      <anchor>adf1a22a2a443f1731efa9a82a84cbc51</anchor>
      <arglist>(name)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LITTLEFOOT_PERFORM_OP_INT8</name>
      <anchorfile>juce__LittleFootRunner_8h.html</anchorfile>
      <anchor>a1175969d20fe0aba037f97ab237dcdf3</anchor>
      <arglist>(name)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LITTLEFOOT_PERFORM_OP_INT16</name>
      <anchorfile>juce__LittleFootRunner_8h.html</anchorfile>
      <anchor>a5b8f4e4d5f8d5fffd5a8776430d3111d</anchor>
      <arglist>(name)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LITTLEFOOT_PERFORM_OP_INT32</name>
      <anchorfile>juce__LittleFootRunner_8h.html</anchorfile>
      <anchor>a4ded1c58e61c8528ee74f27fb7da2177</anchor>
      <arglist>(name)</arglist>
    </member>
    <member kind="typedef">
      <type>char</type>
      <name>int8</name>
      <anchorfile>namespacelittlefoot.html</anchorfile>
      <anchor>a4217b8b14e3a82c19d115879172369fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned char</type>
      <name>uint8</name>
      <anchorfile>namespacelittlefoot.html</anchorfile>
      <anchor>a911a40d805ef6667f7b9ea6842af3fe7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>short</type>
      <name>int16</name>
      <anchorfile>namespacelittlefoot.html</anchorfile>
      <anchor>af97fa4639b8f2ed268359ca056868ff4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned short</type>
      <name>uint16</name>
      <anchorfile>namespacelittlefoot.html</anchorfile>
      <anchor>aab688ac828c9bbf4cfc80f684f2d522b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>int</type>
      <name>int32</name>
      <anchorfile>namespacelittlefoot.html</anchorfile>
      <anchor>aec160adbd27451c33bc7b91dc94cfa20</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned int</type>
      <name>uint32</name>
      <anchorfile>namespacelittlefoot.html</anchorfile>
      <anchor>a417dab5137c6d4ff4e23303f84099aa9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>int16</type>
      <name>FunctionID</name>
      <anchorfile>namespacelittlefoot.html</anchorfile>
      <anchor>a5f139c5c9fd4fc79b8fd203ce4725338</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>OpCode</name>
      <anchorfile>namespacelittlefoot.html</anchorfile>
      <anchor>a7007a5eb28fcc103aeeca3fe069893aa</anchor>
      <arglist></arglist>
      <enumvalue file="namespacelittlefoot.html" anchor="a7007a5eb28fcc103aeeca3fe069893aaa3b9f57296fe8c4f516cf9986ad5442ae">LITTLEFOOT_OP</enumvalue>
      <enumvalue file="namespacelittlefoot.html" anchor="a7007a5eb28fcc103aeeca3fe069893aaa99a126a28a372030399847823348fed8">endOfOpcodes</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>Type</name>
      <anchorfile>namespacelittlefoot.html</anchorfile>
      <anchor>a4fb4051df81acdbcaa446ab5a02dd8e7</anchor>
      <arglist></arglist>
      <enumvalue file="namespacelittlefoot.html" anchor="a4fb4051df81acdbcaa446ab5a02dd8e7ada11add8aadb6bd651f74d36402f4d66">void_</enumvalue>
      <enumvalue file="namespacelittlefoot.html" anchor="a4fb4051df81acdbcaa446ab5a02dd8e7ad7488204e92ed01986284bef5650eb53">int_</enumvalue>
      <enumvalue file="namespacelittlefoot.html" anchor="a4fb4051df81acdbcaa446ab5a02dd8e7a467afb5838aa377d55cce81f84c5512b">bool_</enumvalue>
      <enumvalue file="namespacelittlefoot.html" anchor="a4fb4051df81acdbcaa446ab5a02dd8e7aefe6d5085c67bc38cd3746f2dc8013e1">float_</enumvalue>
    </member>
  </compound>
  <compound kind="file">
    <name>juce_LiveConstantEditor.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_gui_extra/misc/</path>
    <filename>juce__LiveConstantEditor_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>JUCE_LIVE_CONSTANT</name>
      <anchorfile>juce__LiveConstantEditor_8h.html</anchorfile>
      <anchor>ae2cc503e5069bf8510953e212317abaa</anchor>
      <arglist>(initialValue)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>juce_LocalisedStrings.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_core/text/</path>
    <filename>juce__LocalisedStrings_8h</filename>
    <class kind="class">LocalisedStrings</class>
    <member kind="define">
      <type>#define</type>
      <name>TRANS</name>
      <anchorfile>juce__LocalisedStrings_8h.html</anchorfile>
      <anchor>af3c28ad27b0d8fa2f615888701e32b07</anchor>
      <arglist>(stringLiteral)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>NEEDS_TRANS</name>
      <anchorfile>juce__LocalisedStrings_8h.html</anchorfile>
      <anchor>afeb9a504a09d3e5d1148fb0c40413ae2</anchor>
      <arglist>(stringLiteral)</arglist>
    </member>
    <member kind="function">
      <type>JUCE_API String</type>
      <name>translate</name>
      <anchorfile>juce__LocalisedStrings_8h.html</anchorfile>
      <anchor>ab3573b391b23be5f53f956f8e7d4f603</anchor>
      <arglist>(const String &amp;stringLiteral)</arglist>
    </member>
    <member kind="function">
      <type>JUCE_API String</type>
      <name>translate</name>
      <anchorfile>juce__LocalisedStrings_8h.html</anchorfile>
      <anchor>ac7654cbd79c93a8010ac6f6207693453</anchor>
      <arglist>(const char *stringLiteral)</arglist>
    </member>
    <member kind="function">
      <type>JUCE_API String</type>
      <name>translate</name>
      <anchorfile>juce__LocalisedStrings_8h.html</anchorfile>
      <anchor>aaccbad49b1742873f1a908e3491d5ed5</anchor>
      <arglist>(CharPointer_UTF8 stringLiteral)</arglist>
    </member>
    <member kind="function">
      <type>JUCE_API String</type>
      <name>translate</name>
      <anchorfile>juce__LocalisedStrings_8h.html</anchorfile>
      <anchor>a90a56e8c7641618facbecacbe2cbcdc1</anchor>
      <arglist>(const String &amp;stringLiteral, const String &amp;resultIfNotFound)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>juce_Logger.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_core/logging/</path>
    <filename>juce__Logger_8h</filename>
    <class kind="class">Logger</class>
  </compound>
  <compound kind="file">
    <name>juce_LookAndFeel.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_gui_basics/lookandfeel/</path>
    <filename>juce__LookAndFeel_8h</filename>
    <class kind="struct">ExtraLookAndFeelBaseClasses</class>
    <class kind="struct">ExtraLookAndFeelBaseClasses::LassoComponentMethods</class>
    <class kind="struct">ExtraLookAndFeelBaseClasses::KeyMappingEditorComponentMethods</class>
    <class kind="struct">ExtraLookAndFeelBaseClasses::AudioDeviceSelectorComponentMethods</class>
    <class kind="class">LookAndFeel</class>
  </compound>
  <compound kind="file">
    <name>juce_LookAndFeel_V1.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_gui_basics/lookandfeel/</path>
    <filename>juce__LookAndFeel__V1_8h</filename>
    <class kind="class">LookAndFeel_V1</class>
  </compound>
  <compound kind="file">
    <name>juce_LookAndFeel_V2.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_gui_basics/lookandfeel/</path>
    <filename>juce__LookAndFeel__V2_8h</filename>
    <class kind="class">LookAndFeel_V2</class>
  </compound>
  <compound kind="file">
    <name>juce_LookAndFeel_V3.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_gui_basics/lookandfeel/</path>
    <filename>juce__LookAndFeel__V3_8h</filename>
    <class kind="class">LookAndFeel_V3</class>
  </compound>
  <compound kind="file">
    <name>juce_LowLevelGraphicsContext.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_graphics/contexts/</path>
    <filename>juce__LowLevelGraphicsContext_8h</filename>
    <class kind="class">LowLevelGraphicsContext</class>
  </compound>
  <compound kind="file">
    <name>juce_LowLevelGraphicsPostScriptRenderer.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_graphics/contexts/</path>
    <filename>juce__LowLevelGraphicsPostScriptRenderer_8h</filename>
    <class kind="class">LowLevelGraphicsPostScriptRenderer</class>
    <class kind="struct">LowLevelGraphicsPostScriptRenderer::SavedState</class>
  </compound>
  <compound kind="file">
    <name>juce_LowLevelGraphicsSoftwareRenderer.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_graphics/contexts/</path>
    <filename>juce__LowLevelGraphicsSoftwareRenderer_8h</filename>
    <class kind="class">LowLevelGraphicsSoftwareRenderer</class>
  </compound>
  <compound kind="file">
    <name>juce_LuaCodeTokeniser.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_gui_extra/code_editor/</path>
    <filename>juce__LuaCodeTokeniser_8h</filename>
    <class kind="class">LuaTokeniser</class>
  </compound>
  <compound kind="file">
    <name>juce_MACAddress.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_core/network/</path>
    <filename>juce__MACAddress_8h</filename>
    <class kind="class">MACAddress</class>
  </compound>
  <compound kind="file">
    <name>juce_MarkerList.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_gui_basics/positioning/</path>
    <filename>juce__MarkerList_8h</filename>
    <class kind="class">MarkerList</class>
    <class kind="class">MarkerList::Marker</class>
    <class kind="class">MarkerList::Listener</class>
    <class kind="class">MarkerList::ValueTreeWrapper</class>
  </compound>
  <compound kind="file">
    <name>juce_MathsFunctions.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_core/maths/</path>
    <filename>juce__MathsFunctions_8h</filename>
    <class kind="struct">TypeHelpers::ParameterType</class>
    <class kind="struct">TypeHelpers::SmallestFloatType</class>
    <class kind="struct">TypeHelpers::SmallestFloatType&lt; double &gt;</class>
    <namespace>TypeHelpers</namespace>
    <member kind="define">
      <type>#define</type>
      <name>JUCE_UNDENORMALISE</name>
      <anchorfile>juce__MathsFunctions_8h.html</anchorfile>
      <anchor>a339666bd60cc6cb0831cb79c8f1b07b6</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PARAMETER_TYPE</name>
      <anchorfile>juce__MathsFunctions_8h.html</anchorfile>
      <anchor>ab17e68e410cbcdaf3074214aed490ec8</anchor>
      <arglist>(a)</arglist>
    </member>
    <member kind="typedef">
      <type>signed char</type>
      <name>int8</name>
      <anchorfile>juce__MathsFunctions_8h.html</anchorfile>
      <anchor>a1b956fe1df85f3c132b21edb4e116458</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned char</type>
      <name>uint8</name>
      <anchorfile>juce__MathsFunctions_8h.html</anchorfile>
      <anchor>adde6aaee8457bee49c2a92621fe22b79</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>signed short</type>
      <name>int16</name>
      <anchorfile>juce__MathsFunctions_8h.html</anchorfile>
      <anchor>a259fa4834387bd68627ddf37bb3ebdb9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned short</type>
      <name>uint16</name>
      <anchorfile>juce__MathsFunctions_8h.html</anchorfile>
      <anchor>a05f6b0ae8f6a6e135b0e290c25fe0e4e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>signed int</type>
      <name>int32</name>
      <anchorfile>juce__MathsFunctions_8h.html</anchorfile>
      <anchor>a43d43196463bde49cb067f5c20ab8481</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned int</type>
      <name>uint32</name>
      <anchorfile>juce__MathsFunctions_8h.html</anchorfile>
      <anchor>a1134b580f8da4de94ca6b1de4d37975e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>long long</type>
      <name>int64</name>
      <anchorfile>juce__MathsFunctions_8h.html</anchorfile>
      <anchor>aecfc3c54bd29ad5964e1c1c3ccbf89df</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned long long</type>
      <name>uint64</name>
      <anchorfile>juce__MathsFunctions_8h.html</anchorfile>
      <anchor>a29940ae63ec06c9998bba873e25407ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>int</type>
      <name>pointer_sized_int</name>
      <anchorfile>juce__MathsFunctions_8h.html</anchorfile>
      <anchor>a8d188377fe1977ca9d1a9b738019dd78</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned int</type>
      <name>pointer_sized_uint</name>
      <anchorfile>juce__MathsFunctions_8h.html</anchorfile>
      <anchor>a2d432c371b407ba6f36d34aa95229423</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Type</type>
      <name>jmax</name>
      <anchorfile>juce__MathsFunctions_8h.html</anchorfile>
      <anchor>aafa7f705c9f978725910c5956d04226c</anchor>
      <arglist>(const Type a, const Type b)</arglist>
    </member>
    <member kind="function">
      <type>Type</type>
      <name>jmax</name>
      <anchorfile>juce__MathsFunctions_8h.html</anchorfile>
      <anchor>afcbc3b08f54b224588dc59db245bbec9</anchor>
      <arglist>(const Type a, const Type b, const Type c)</arglist>
    </member>
    <member kind="function">
      <type>Type</type>
      <name>jmax</name>
      <anchorfile>juce__MathsFunctions_8h.html</anchorfile>
      <anchor>aba21bad1517dd8777ed53ca423f4f5d3</anchor>
      <arglist>(const Type a, const Type b, const Type c, const Type d)</arglist>
    </member>
    <member kind="function">
      <type>Type</type>
      <name>jmin</name>
      <anchorfile>juce__MathsFunctions_8h.html</anchorfile>
      <anchor>abc3ad3738e50ba0dadc7ac2e5535a09a</anchor>
      <arglist>(const Type a, const Type b)</arglist>
    </member>
    <member kind="function">
      <type>Type</type>
      <name>jmin</name>
      <anchorfile>juce__MathsFunctions_8h.html</anchorfile>
      <anchor>a391795999a08aa26e06aca6009199cf1</anchor>
      <arglist>(const Type a, const Type b, const Type c)</arglist>
    </member>
    <member kind="function">
      <type>Type</type>
      <name>jmin</name>
      <anchorfile>juce__MathsFunctions_8h.html</anchorfile>
      <anchor>a120320899f42c1e2aa87841159200e4e</anchor>
      <arglist>(const Type a, const Type b, const Type c, const Type d)</arglist>
    </member>
    <member kind="function">
      <type>Type</type>
      <name>jmap</name>
      <anchorfile>juce__MathsFunctions_8h.html</anchorfile>
      <anchor>a4c31870455f164b4e73a58a346518d5f</anchor>
      <arglist>(Type value0To1, Type targetRangeMin, Type targetRangeMax)</arglist>
    </member>
    <member kind="function">
      <type>Type</type>
      <name>jmap</name>
      <anchorfile>juce__MathsFunctions_8h.html</anchorfile>
      <anchor>a8acdd3d518517bd5e3c0bd1922218bf9</anchor>
      <arglist>(Type sourceValue, Type sourceRangeMin, Type sourceRangeMax, Type targetRangeMin, Type targetRangeMax)</arglist>
    </member>
    <member kind="function">
      <type>Type</type>
      <name>findMinimum</name>
      <anchorfile>juce__MathsFunctions_8h.html</anchorfile>
      <anchor>adad82a6921706f81da0d59b4f2fc3bed</anchor>
      <arglist>(const Type *data, int numValues)</arglist>
    </member>
    <member kind="function">
      <type>Type</type>
      <name>findMaximum</name>
      <anchorfile>juce__MathsFunctions_8h.html</anchorfile>
      <anchor>a5ec2266fcea47d3f307384f3d0a6ae18</anchor>
      <arglist>(const Type *values, int numValues)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>findMinAndMax</name>
      <anchorfile>juce__MathsFunctions_8h.html</anchorfile>
      <anchor>a8b2e19439406e1608c876bd8a44a7cb8</anchor>
      <arglist>(const Type *values, int numValues, Type &amp;lowest, Type &amp;highest)</arglist>
    </member>
    <member kind="function">
      <type>Type</type>
      <name>jlimit</name>
      <anchorfile>juce__MathsFunctions_8h.html</anchorfile>
      <anchor>a6efeed0752de995d3bc123123f199735</anchor>
      <arglist>(const Type lowerLimit, const Type upperLimit, const Type valueToConstrain) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isPositiveAndBelow</name>
      <anchorfile>juce__MathsFunctions_8h.html</anchorfile>
      <anchor>a73c8f4283f104ebb3b9e026e5f487f1d</anchor>
      <arglist>(Type valueToTest, Type upperLimit) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isPositiveAndBelow</name>
      <anchorfile>juce__MathsFunctions_8h.html</anchorfile>
      <anchor>a9e09fe6bca6583ce62dd0ba5eb2ec3fb</anchor>
      <arglist>(const int valueToTest, const int upperLimit) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isPositiveAndNotGreaterThan</name>
      <anchorfile>juce__MathsFunctions_8h.html</anchorfile>
      <anchor>afa66fb44e73cae43c71e86c2fff0f7c3</anchor>
      <arglist>(Type valueToTest, Type upperLimit) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isPositiveAndNotGreaterThan</name>
      <anchorfile>juce__MathsFunctions_8h.html</anchorfile>
      <anchor>ad08b1d778b33d8655218610d76616978</anchor>
      <arglist>(const int valueToTest, const int upperLimit) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swapVariables</name>
      <anchorfile>juce__MathsFunctions_8h.html</anchorfile>
      <anchor>aff5d0bdbb9ef4111ca1ced0cc59a5bed</anchor>
      <arglist>(Type &amp;variable1, Type &amp;variable2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ignoreUnused</name>
      <anchorfile>juce__MathsFunctions_8h.html</anchorfile>
      <anchor>a07a40f89c351c7e7a7f98a62beaa1e4a</anchor>
      <arglist>(const Type1 &amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ignoreUnused</name>
      <anchorfile>juce__MathsFunctions_8h.html</anchorfile>
      <anchor>abd4ce0580d9fba4911310dc1351ae33e</anchor>
      <arglist>(const Type1 &amp;, const Type2 &amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ignoreUnused</name>
      <anchorfile>juce__MathsFunctions_8h.html</anchorfile>
      <anchor>a65428b53cc4f68703d366a88ca5ce940</anchor>
      <arglist>(const Type1 &amp;, const Type2 &amp;, const Type3 &amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ignoreUnused</name>
      <anchorfile>juce__MathsFunctions_8h.html</anchorfile>
      <anchor>a01e3f6c4cad507c5eba5ebf768b5175b</anchor>
      <arglist>(const Type1 &amp;, const Type2 &amp;, const Type3 &amp;, const Type4 &amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>numElementsInArray</name>
      <anchorfile>juce__MathsFunctions_8h.html</anchorfile>
      <anchor>a53205e331c49a67a9a7af0710d44d65e</anchor>
      <arglist>(Type(&amp;array)[N])</arglist>
    </member>
    <member kind="function">
      <type>Type</type>
      <name>juce_hypot</name>
      <anchorfile>juce__MathsFunctions_8h.html</anchorfile>
      <anchor>a18cf7a25c960a8c2b10cd4ea914eae75</anchor>
      <arglist>(Type a, Type b) noexcept</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>abs64</name>
      <anchorfile>juce__MathsFunctions_8h.html</anchorfile>
      <anchor>aeb0dad8278fdd49dd101532e47852148</anchor>
      <arglist>(const int64 n) noexcept</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>degreesToRadians</name>
      <anchorfile>juce__MathsFunctions_8h.html</anchorfile>
      <anchor>a9ffaa273fe35fe8e06d55a0693410792</anchor>
      <arglist>(float degrees) noexcept</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>degreesToRadians</name>
      <anchorfile>juce__MathsFunctions_8h.html</anchorfile>
      <anchor>a568d77fac3eb78f7c809a7d8936a297b</anchor>
      <arglist>(double degrees) noexcept</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>radiansToDegrees</name>
      <anchorfile>juce__MathsFunctions_8h.html</anchorfile>
      <anchor>a7d37a76d5c3262f4f0698541defb4e8a</anchor>
      <arglist>(float radians) noexcept</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>radiansToDegrees</name>
      <anchorfile>juce__MathsFunctions_8h.html</anchorfile>
      <anchor>aa5ced9e1db36f9ec30826965dc2c6ebb</anchor>
      <arglist>(double radians) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>juce_isfinite</name>
      <anchorfile>juce__MathsFunctions_8h.html</anchorfile>
      <anchor>a715cf75caf01f50c8bdad7a8a919db3a</anchor>
      <arglist>(NumericType) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>juce_isfinite</name>
      <anchorfile>juce__MathsFunctions_8h.html</anchorfile>
      <anchor>a6e2771eca3bab30735064a25b5909d03</anchor>
      <arglist>(float value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>juce_isfinite</name>
      <anchorfile>juce__MathsFunctions_8h.html</anchorfile>
      <anchor>ab2876c74abd3981e46841e94a4b3ae67</anchor>
      <arglist>(double value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>roundToInt</name>
      <anchorfile>juce__MathsFunctions_8h.html</anchorfile>
      <anchor>afe8eb86381d389f4ba9f9931a38e1a44</anchor>
      <arglist>(const FloatType value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>roundToInt</name>
      <anchorfile>juce__MathsFunctions_8h.html</anchorfile>
      <anchor>ae02a3e54ffb64eaf971ff845d54c9b02</anchor>
      <arglist>(int value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>roundToIntAccurate</name>
      <anchorfile>juce__MathsFunctions_8h.html</anchorfile>
      <anchor>af462ba6662a564582b2f904677dad0f4</anchor>
      <arglist>(double value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>roundDoubleToInt</name>
      <anchorfile>juce__MathsFunctions_8h.html</anchorfile>
      <anchor>ab748fdc96dfb6423e7c1f43743015743</anchor>
      <arglist>(double value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>roundFloatToInt</name>
      <anchorfile>juce__MathsFunctions_8h.html</anchorfile>
      <anchor>a1c9a00d378e3a9f86a7ed5b0e3228972</anchor>
      <arglist>(float value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isPowerOfTwo</name>
      <anchorfile>juce__MathsFunctions_8h.html</anchorfile>
      <anchor>a6b41ad6a2ec0e7fd3c206ff794b26f49</anchor>
      <arglist>(IntegerType value)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>nextPowerOfTwo</name>
      <anchorfile>juce__MathsFunctions_8h.html</anchorfile>
      <anchor>a137419534afee570f5ff25d643c77176</anchor>
      <arglist>(int n) noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>findHighestSetBit</name>
      <anchorfile>juce__MathsFunctions_8h.html</anchorfile>
      <anchor>a3c92a997b158fd26c45bc4bf46fb36bf</anchor>
      <arglist>(uint32 n) noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>countNumberOfBits</name>
      <anchorfile>juce__MathsFunctions_8h.html</anchorfile>
      <anchor>afd3358fc8d07a10a7c621f9875cfb7b9</anchor>
      <arglist>(uint32 n) noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>countNumberOfBits</name>
      <anchorfile>juce__MathsFunctions_8h.html</anchorfile>
      <anchor>aa9b7a29be913ebfbc11e7e9839e19fb6</anchor>
      <arglist>(uint64 n) noexcept</arglist>
    </member>
    <member kind="function">
      <type>IntegerType</type>
      <name>negativeAwareModulo</name>
      <anchorfile>juce__MathsFunctions_8h.html</anchorfile>
      <anchor>a3cfa905495cba62bd9ad2b73d2dc3f1c</anchor>
      <arglist>(IntegerType dividend, const IntegerType divisor) noexcept</arglist>
    </member>
    <member kind="function">
      <type>NumericType</type>
      <name>square</name>
      <anchorfile>juce__MathsFunctions_8h.html</anchorfile>
      <anchor>a4cad7dd14894030b889d9247b254f6aa</anchor>
      <arglist>(NumericType n) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeLittleEndianBitsInBuffer</name>
      <anchorfile>juce__MathsFunctions_8h.html</anchorfile>
      <anchor>ad9a739a07f27b1d47343ceacdee1a0ca</anchor>
      <arglist>(void *targetBuffer, uint32 startBit, uint32 numBits, uint32 value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>uint32</type>
      <name>readLittleEndianBitsInBuffer</name>
      <anchorfile>juce__MathsFunctions_8h.html</anchorfile>
      <anchor>a0e647a41bfc48194af4cbc77213557b9</anchor>
      <arglist>(const void *sourceBuffer, uint32 startBit, uint32 numBits) noexcept</arglist>
    </member>
    <member kind="variable">
      <type>const double</type>
      <name>double_Pi</name>
      <anchorfile>juce__MathsFunctions_8h.html</anchorfile>
      <anchor>aa929b9e10eedb3b7a6bd8f6ba2d9ddaa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const float</type>
      <name>float_Pi</name>
      <anchorfile>juce__MathsFunctions_8h.html</anchorfile>
      <anchor>ac93fbc5e59d440cab26842b9c575d161</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>juce_Matrix3D.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_opengl/geometry/</path>
    <filename>juce__Matrix3D_8h</filename>
    <class kind="class">Matrix3D</class>
  </compound>
  <compound kind="file">
    <name>juce_MD5.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_cryptography/hashing/</path>
    <filename>juce__MD5_8h</filename>
    <class kind="class">MD5</class>
  </compound>
  <compound kind="file">
    <name>juce_Memory.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_core/memory/</path>
    <filename>juce__Memory_8h</filename>
    <class kind="class">ScopedAutoReleasePool</class>
    <member kind="define">
      <type>#define</type>
      <name>JUCE_AUTORELEASEPOOL</name>
      <anchorfile>juce__Memory_8h.html</anchorfile>
      <anchor>ad73fadcd76040b11a626d5bdf833ad49</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>juce_UseDebuggingNewOperator</name>
      <anchorfile>juce__Memory_8h.html</anchorfile>
      <anchor>a881926ad904a631336e5d4b15f05c548</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>zeromem</name>
      <anchorfile>juce__Memory_8h.html</anchorfile>
      <anchor>a48fb9b158a3767e6573d27a8160956ea</anchor>
      <arglist>(void *memory, size_t numBytes) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>zerostruct</name>
      <anchorfile>juce__Memory_8h.html</anchorfile>
      <anchor>a1f3dbe374ad9280ed9ba72f510d8e5b0</anchor>
      <arglist>(Type &amp;structure) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deleteAndZero</name>
      <anchorfile>juce__Memory_8h.html</anchorfile>
      <anchor>a4163b928fab6bebea5691e97c72fc4fa</anchor>
      <arglist>(Type &amp;pointer)</arglist>
    </member>
    <member kind="function">
      <type>Type *</type>
      <name>addBytesToPointer</name>
      <anchorfile>juce__Memory_8h.html</anchorfile>
      <anchor>aec283d962b8cbfef5e73f51129305913</anchor>
      <arglist>(Type *basePointer, IntegerType bytes) noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getAddressDifference</name>
      <anchorfile>juce__Memory_8h.html</anchorfile>
      <anchor>a667897ead2d6fd7f9f682bd8f75da26a</anchor>
      <arglist>(Type1 *pointer1, Type2 *pointer2) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Type *</type>
      <name>createCopyIfNotNull</name>
      <anchorfile>juce__Memory_8h.html</anchorfile>
      <anchor>ab622db353f778dfccede23f101ec86bb</anchor>
      <arglist>(const Type *objectToCopy)</arglist>
    </member>
    <member kind="function">
      <type>Type</type>
      <name>readUnaligned</name>
      <anchorfile>juce__Memory_8h.html</anchorfile>
      <anchor>ad4e1363d40774f5bb55f6324c4ab1414</anchor>
      <arglist>(const void *srcPtr) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeUnaligned</name>
      <anchorfile>juce__Memory_8h.html</anchorfile>
      <anchor>ab39db7640be10d1fab314769f20d1ee5</anchor>
      <arglist>(void *dstPtr, Type value) noexcept</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>juce_MemoryBlock.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_core/memory/</path>
    <filename>juce__MemoryBlock_8h</filename>
    <class kind="class">MemoryBlock</class>
  </compound>
  <compound kind="file">
    <name>juce_MemoryInputStream.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_core/streams/</path>
    <filename>juce__MemoryInputStream_8h</filename>
    <class kind="class">MemoryInputStream</class>
  </compound>
  <compound kind="file">
    <name>juce_MemoryMappedAudioFormatReader.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_audio_formats/format/</path>
    <filename>juce__MemoryMappedAudioFormatReader_8h</filename>
    <class kind="class">MemoryMappedAudioFormatReader</class>
  </compound>
  <compound kind="file">
    <name>juce_MemoryMappedFile.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_core/files/</path>
    <filename>juce__MemoryMappedFile_8h</filename>
    <class kind="class">MemoryMappedFile</class>
  </compound>
  <compound kind="file">
    <name>juce_MemoryOutputStream.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_core/streams/</path>
    <filename>juce__MemoryOutputStream_8h</filename>
    <class kind="class">MemoryOutputStream</class>
    <member kind="function">
      <type>OutputStream &amp;JUCE_CALLTYPE</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>juce__MemoryOutputStream_8h.html</anchorfile>
      <anchor>a17036cdcf5bf836c01e2ee847f01d3d0</anchor>
      <arglist>(OutputStream &amp;stream, const MemoryOutputStream &amp;streamToRead)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>juce_MenuBarComponent.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_gui_basics/menus/</path>
    <filename>juce__MenuBarComponent_8h</filename>
    <class kind="class">MenuBarComponent</class>
  </compound>
  <compound kind="file">
    <name>juce_MenuBarModel.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_gui_basics/menus/</path>
    <filename>juce__MenuBarModel_8h</filename>
    <class kind="class">MenuBarModel</class>
    <class kind="class">MenuBarModel::Listener</class>
    <member kind="typedef">
      <type>MenuBarModel::Listener</type>
      <name>MenuBarModelListener</name>
      <anchorfile>juce__MenuBarModel_8h.html</anchorfile>
      <anchor>a7657d02fc9f68fc56cb1d0e7902537dc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>juce_Message.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_events/messages/</path>
    <filename>juce__Message_8h</filename>
    <class kind="class">Message</class>
  </compound>
  <compound kind="file">
    <name>juce_MessageListener.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_events/messages/</path>
    <filename>juce__MessageListener_8h</filename>
    <class kind="class">MessageListener</class>
  </compound>
  <compound kind="file">
    <name>juce_MessageManager.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_events/messages/</path>
    <filename>juce__MessageManager_8h</filename>
    <class kind="class">MessageManager</class>
    <class kind="class">MessageManager::MessageBase</class>
    <class kind="class">MessageManagerLock</class>
    <member kind="typedef">
      <type>void *(</type>
      <name>MessageCallbackFunction</name>
      <anchorfile>juce__MessageManager_8h.html</anchorfile>
      <anchor>a107bb4f42cc6661a36a13b0fad22196d</anchor>
      <arglist>)(void *userData)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>juce_MidiBuffer.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_audio_basics/midi/</path>
    <filename>juce__MidiBuffer_8h</filename>
    <class kind="class">MidiBuffer</class>
    <class kind="class">MidiBuffer::Iterator</class>
  </compound>
  <compound kind="file">
    <name>juce_MidiFile.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_audio_basics/midi/</path>
    <filename>juce__MidiFile_8h</filename>
    <class kind="class">MidiFile</class>
  </compound>
  <compound kind="file">
    <name>juce_MidiInput.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_audio_devices/midi_io/</path>
    <filename>juce__MidiInput_8h</filename>
    <class kind="class">MidiInputCallback</class>
    <class kind="class">MidiInput</class>
  </compound>
  <compound kind="file">
    <name>juce_MidiKeyboardComponent.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_audio_utils/gui/</path>
    <filename>juce__MidiKeyboardComponent_8h</filename>
    <class kind="class">MidiKeyboardComponent</class>
  </compound>
  <compound kind="file">
    <name>juce_MidiKeyboardState.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_audio_basics/midi/</path>
    <filename>juce__MidiKeyboardState_8h</filename>
    <class kind="class">MidiKeyboardStateListener</class>
    <class kind="class">MidiKeyboardState</class>
  </compound>
  <compound kind="file">
    <name>juce_MidiMessage.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_audio_basics/midi/</path>
    <filename>juce__MidiMessage_8h</filename>
    <class kind="class">MidiMessage</class>
  </compound>
  <compound kind="file">
    <name>juce_MidiMessageCollector.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_audio_devices/midi_io/</path>
    <filename>juce__MidiMessageCollector_8h</filename>
    <class kind="class">MidiMessageCollector</class>
  </compound>
  <compound kind="file">
    <name>juce_MidiMessageSequence.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_audio_basics/midi/</path>
    <filename>juce__MidiMessageSequence_8h</filename>
    <class kind="class">MidiMessageSequence</class>
    <class kind="class">MidiMessageSequence::MidiEventHolder</class>
  </compound>
  <compound kind="file">
    <name>juce_MidiOutput.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_audio_devices/midi_io/</path>
    <filename>juce__MidiOutput_8h</filename>
    <class kind="class">MidiOutput</class>
  </compound>
  <compound kind="file">
    <name>juce_MidiRPN.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_audio_basics/midi/</path>
    <filename>juce__MidiRPN_8h</filename>
    <class kind="struct">MidiRPNMessage</class>
    <class kind="class">MidiRPNDetector</class>
    <class kind="class">MidiRPNGenerator</class>
  </compound>
  <compound kind="file">
    <name>juce_MixerAudioSource.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_audio_basics/sources/</path>
    <filename>juce__MixerAudioSource_8h</filename>
    <class kind="class">MixerAudioSource</class>
  </compound>
  <compound kind="file">
    <name>juce_ModalComponentManager.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_gui_basics/components/</path>
    <filename>juce__ModalComponentManager_8h</filename>
    <class kind="class">ModalComponentManager</class>
    <class kind="class">ModalComponentManager::Callback</class>
    <class kind="class">ModalCallbackFunction</class>
  </compound>
  <compound kind="file">
    <name>juce_ModifierKeys.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_gui_basics/keyboard/</path>
    <filename>juce__ModifierKeys_8h</filename>
    <class kind="class">ModifierKeys</class>
  </compound>
  <compound kind="file">
    <name>juce_MountedVolumeListChangeDetector.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_events/messages/</path>
    <filename>juce__MountedVolumeListChangeDetector_8h</filename>
    <class kind="class">MountedVolumeListChangeDetector</class>
  </compound>
  <compound kind="file">
    <name>juce_MouseCursor.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_gui_basics/mouse/</path>
    <filename>juce__MouseCursor_8h</filename>
    <class kind="class">MouseCursor</class>
  </compound>
  <compound kind="file">
    <name>juce_MouseEvent.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_gui_basics/mouse/</path>
    <filename>juce__MouseEvent_8h</filename>
    <class kind="class">MouseEvent</class>
    <class kind="struct">MouseWheelDetails</class>
  </compound>
  <compound kind="file">
    <name>juce_MouseInactivityDetector.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_gui_basics/mouse/</path>
    <filename>juce__MouseInactivityDetector_8h</filename>
    <class kind="class">MouseInactivityDetector</class>
    <class kind="class">MouseInactivityDetector::Listener</class>
  </compound>
  <compound kind="file">
    <name>juce_MouseInputSource.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_gui_basics/mouse/</path>
    <filename>juce__MouseInputSource_8h</filename>
    <class kind="class">MouseInputSource</class>
  </compound>
  <compound kind="file">
    <name>juce_MouseListener.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_gui_basics/mouse/</path>
    <filename>juce__MouseListener_8h</filename>
    <class kind="class">MouseListener</class>
  </compound>
  <compound kind="file">
    <name>juce_MovieComponent.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_video/playback/</path>
    <filename>juce__MovieComponent_8h</filename>
    <class kind="class">MovieComponent</class>
  </compound>
  <compound kind="file">
    <name>juce_MP3AudioFormat.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_audio_formats/codecs/</path>
    <filename>juce__MP3AudioFormat_8h</filename>
    <class kind="class">MP3AudioFormat</class>
  </compound>
  <compound kind="file">
    <name>juce_MPEInstrument.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_audio_basics/mpe/</path>
    <filename>juce__MPEInstrument_8h</filename>
    <class kind="class">MPEInstrument</class>
    <class kind="class">MPEInstrument::Listener</class>
  </compound>
  <compound kind="file">
    <name>juce_MPEMessages.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_audio_basics/mpe/</path>
    <filename>juce__MPEMessages_8h</filename>
    <class kind="class">MPEMessages</class>
  </compound>
  <compound kind="file">
    <name>juce_MPENote.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_audio_basics/mpe/</path>
    <filename>juce__MPENote_8h</filename>
    <class kind="struct">MPENote</class>
  </compound>
  <compound kind="file">
    <name>juce_MPESynthesiser.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_audio_basics/mpe/</path>
    <filename>juce__MPESynthesiser_8h</filename>
    <class kind="class">MPESynthesiser</class>
  </compound>
  <compound kind="file">
    <name>juce_MPESynthesiserBase.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_audio_basics/mpe/</path>
    <filename>juce__MPESynthesiserBase_8h</filename>
    <class kind="struct">MPESynthesiserBase</class>
  </compound>
  <compound kind="file">
    <name>juce_MPESynthesiserVoice.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_audio_basics/mpe/</path>
    <filename>juce__MPESynthesiserVoice_8h</filename>
    <class kind="class">MPESynthesiserVoice</class>
  </compound>
  <compound kind="file">
    <name>juce_MPEValue.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_audio_basics/mpe/</path>
    <filename>juce__MPEValue_8h</filename>
    <class kind="class">MPEValue</class>
  </compound>
  <compound kind="file">
    <name>juce_MPEZone.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_audio_basics/mpe/</path>
    <filename>juce__MPEZone_8h</filename>
    <class kind="struct">MPEZone</class>
  </compound>
  <compound kind="file">
    <name>juce_MPEZoneLayout.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_audio_basics/mpe/</path>
    <filename>juce__MPEZoneLayout_8h</filename>
    <class kind="class">MPEZoneLayout</class>
    <class kind="class">MPEZoneLayout::Listener</class>
  </compound>
  <compound kind="file">
    <name>juce_MultiDocumentPanel.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_gui_basics/layout/</path>
    <filename>juce__MultiDocumentPanel_8h</filename>
    <class kind="class">MultiDocumentPanelWindow</class>
    <class kind="class">MultiDocumentPanel</class>
  </compound>
  <compound kind="file">
    <name>juce_MultiTimer.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_events/timers/</path>
    <filename>juce__MultiTimer_8h</filename>
    <class kind="class">MultiTimer</class>
  </compound>
  <compound kind="file">
    <name>juce_NamedPipe.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_core/network/</path>
    <filename>juce__NamedPipe_8h</filename>
    <class kind="class">NamedPipe</class>
  </compound>
  <compound kind="file">
    <name>juce_NamedValueSet.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_core/containers/</path>
    <filename>juce__NamedValueSet_8h</filename>
    <class kind="class">NamedValueSet</class>
    <class kind="struct">NamedValueSet::NamedValue</class>
  </compound>
  <compound kind="file">
    <name>juce_NativeMessageBox.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_gui_basics/windows/</path>
    <filename>juce__NativeMessageBox_8h</filename>
    <class kind="class">NativeMessageBox</class>
  </compound>
  <compound kind="file">
    <name>juce_NewLine.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_core/text/</path>
    <filename>juce__NewLine_8h</filename>
    <class kind="class">NewLine</class>
    <member kind="function">
      <type>String &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>juce__NewLine_8h.html</anchorfile>
      <anchor>a65f8e0a45b8f41c28c3bae6fb7706684</anchor>
      <arglist>(String &amp;string1, const NewLine &amp;)</arglist>
    </member>
    <member kind="function">
      <type>String &amp;</type>
      <name>operator+=</name>
      <anchorfile>juce__NewLine_8h.html</anchorfile>
      <anchor>a6d460ba81bfa9206b0258b8af122bc64</anchor>
      <arglist>(String &amp;s1, const NewLine &amp;)</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>operator+</name>
      <anchorfile>juce__NewLine_8h.html</anchorfile>
      <anchor>acd06ce47123fa8580ab274881fbb57ae</anchor>
      <arglist>(const NewLine &amp;, const NewLine &amp;)</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>operator+</name>
      <anchorfile>juce__NewLine_8h.html</anchorfile>
      <anchor>a13dfbabe9954d194dcc6aaab79a3e969</anchor>
      <arglist>(String s1, const NewLine &amp;)</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>operator+</name>
      <anchorfile>juce__NewLine_8h.html</anchorfile>
      <anchor>ab4d161ac3aff31259c415876c2bbbac7</anchor>
      <arglist>(const NewLine &amp;, const char *s2)</arglist>
    </member>
    <member kind="variable">
      <type>NewLine</type>
      <name>newLine</name>
      <anchorfile>juce__NewLine_8h.html</anchorfile>
      <anchor>abd231b88341c3e2c328178d34f3ce8fb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>juce_NormalisableRange.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_core/maths/</path>
    <filename>juce__NormalisableRange_8h</filename>
    <class kind="class">NormalisableRange</class>
  </compound>
  <compound kind="file">
    <name>juce_NotificationType.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_events/messages/</path>
    <filename>juce__NotificationType_8h</filename>
    <member kind="enumeration">
      <type></type>
      <name>NotificationType</name>
      <anchorfile>juce__NotificationType_8h.html</anchorfile>
      <anchor>a25a31a4bdc02a0d0adb743e26dd14ba9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>dontSendNotification</name>
      <anchorfile>juce__NotificationType_8h.html</anchorfile>
      <anchor>a25a31a4bdc02a0d0adb743e26dd14ba9a057928146704d53dfee6f4ac33c92629</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>sendNotification</name>
      <anchorfile>juce__NotificationType_8h.html</anchorfile>
      <anchor>a25a31a4bdc02a0d0adb743e26dd14ba9ad9a3eff1d1ddebf33141da7cf581be4c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>sendNotificationSync</name>
      <anchorfile>juce__NotificationType_8h.html</anchorfile>
      <anchor>a25a31a4bdc02a0d0adb743e26dd14ba9a7d155564527e7a503eedb2be0e677e2c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>sendNotificationAsync</name>
      <anchorfile>juce__NotificationType_8h.html</anchorfile>
      <anchor>a25a31a4bdc02a0d0adb743e26dd14ba9aa70e4499b93d1738b0ee53de03f7a9c4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>juce_NSViewComponent.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_gui_extra/embedding/</path>
    <filename>juce__NSViewComponent_8h</filename>
    <class kind="class">NSViewComponent</class>
  </compound>
  <compound kind="file">
    <name>juce_OggVorbisAudioFormat.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_audio_formats/codecs/</path>
    <filename>juce__OggVorbisAudioFormat_8h</filename>
    <class kind="class">OggVorbisAudioFormat</class>
  </compound>
  <compound kind="file">
    <name>juce_OnlineUnlockForm.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_tracktion_marketplace/marketplace/</path>
    <filename>juce__OnlineUnlockForm_8h</filename>
    <class kind="class">OnlineUnlockForm</class>
  </compound>
  <compound kind="file">
    <name>juce_OnlineUnlockStatus.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_tracktion_marketplace/marketplace/</path>
    <filename>juce__OnlineUnlockStatus_8h</filename>
    <class kind="class">OnlineUnlockStatus</class>
    <class kind="struct">OnlineUnlockStatus::UnlockResult</class>
    <class kind="struct">OnlineUnlockStatus::MachineIDUtilities</class>
  </compound>
  <compound kind="file">
    <name>juce_OpenGLAppComponent.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_opengl/utils/</path>
    <filename>juce__OpenGLAppComponent_8h</filename>
    <class kind="class">OpenGLAppComponent</class>
  </compound>
  <compound kind="file">
    <name>juce_OpenGLContext.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_opengl/opengl/</path>
    <filename>juce__OpenGLContext_8h</filename>
    <class kind="class">OpenGLContext</class>
  </compound>
  <compound kind="file">
    <name>juce_OpenGLFrameBuffer.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_opengl/opengl/</path>
    <filename>juce__OpenGLFrameBuffer_8h</filename>
    <class kind="class">OpenGLFrameBuffer</class>
  </compound>
  <compound kind="file">
    <name>juce_OpenGLGraphicsContext.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_opengl/opengl/</path>
    <filename>juce__OpenGLGraphicsContext_8h</filename>
    <class kind="struct">OpenGLGraphicsContextCustomShader</class>
    <member kind="function">
      <type>LowLevelGraphicsContext *</type>
      <name>createOpenGLGraphicsContext</name>
      <anchorfile>juce__OpenGLGraphicsContext_8h.html</anchorfile>
      <anchor>a480891441c944c83407837ea7371f5e8</anchor>
      <arglist>(OpenGLContext &amp;target, int width, int height)</arglist>
    </member>
    <member kind="function">
      <type>LowLevelGraphicsContext *</type>
      <name>createOpenGLGraphicsContext</name>
      <anchorfile>juce__OpenGLGraphicsContext_8h.html</anchorfile>
      <anchor>adbc556b3cdfa0df072a4c681806fa836</anchor>
      <arglist>(OpenGLContext &amp;context, OpenGLFrameBuffer &amp;target)</arglist>
    </member>
    <member kind="function">
      <type>LowLevelGraphicsContext *</type>
      <name>createOpenGLGraphicsContext</name>
      <anchorfile>juce__OpenGLGraphicsContext_8h.html</anchorfile>
      <anchor>a1fa859ece4aed6ca32da77ffda2daebe</anchor>
      <arglist>(OpenGLContext &amp;context, unsigned int frameBufferID, int width, int height)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>juce_OpenGLHelpers.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_opengl/opengl/</path>
    <filename>juce__OpenGLHelpers_8h</filename>
    <class kind="class">OpenGLHelpers</class>
  </compound>
  <compound kind="file">
    <name>juce_OpenGLImage.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_opengl/opengl/</path>
    <filename>juce__OpenGLImage_8h</filename>
    <class kind="class">OpenGLImageType</class>
  </compound>
  <compound kind="file">
    <name>juce_OpenGLPixelFormat.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_opengl/opengl/</path>
    <filename>juce__OpenGLPixelFormat_8h</filename>
    <class kind="class">OpenGLPixelFormat</class>
  </compound>
  <compound kind="file">
    <name>juce_OpenGLRenderer.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_opengl/opengl/</path>
    <filename>juce__OpenGLRenderer_8h</filename>
    <class kind="class">OpenGLRenderer</class>
  </compound>
  <compound kind="file">
    <name>juce_OpenGLShaderProgram.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_opengl/opengl/</path>
    <filename>juce__OpenGLShaderProgram_8h</filename>
    <class kind="class">OpenGLShaderProgram</class>
    <class kind="struct">OpenGLShaderProgram::Uniform</class>
    <class kind="struct">OpenGLShaderProgram::Attribute</class>
  </compound>
  <compound kind="file">
    <name>juce_OpenGLTexture.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_opengl/opengl/</path>
    <filename>juce__OpenGLTexture_8h</filename>
    <class kind="class">OpenGLTexture</class>
  </compound>
  <compound kind="file">
    <name>juce_OptionalScopedPointer.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_core/memory/</path>
    <filename>juce__OptionalScopedPointer_8h</filename>
    <class kind="class">OptionalScopedPointer</class>
  </compound>
  <compound kind="file">
    <name>juce_osc.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_osc/</path>
    <filename>juce__osc_8h</filename>
    <class kind="class">juce::OSCTypes</class>
    <class kind="struct">juce::OSCException</class>
    <class kind="struct">juce::OSCFormatError</class>
    <class kind="struct">juce::OSCInternalError</class>
    <class kind="class">juce::OSCTimeTag</class>
    <class kind="class">juce::OSCArgument</class>
    <class kind="class">juce::OSCAddress</class>
    <class kind="class">juce::OSCAddressPattern</class>
    <class kind="class">juce::OSCMessage</class>
    <class kind="class">juce::OSCBundle</class>
    <class kind="class">juce::OSCBundle::Element</class>
    <class kind="class">juce::OSCReceiver</class>
    <class kind="struct">juce::OSCReceiver::MessageLoopCallback</class>
    <class kind="struct">juce::OSCReceiver::RealtimeCallback</class>
    <class kind="class">juce::OSCReceiver::Listener</class>
    <class kind="class">juce::OSCReceiver::ListenerWithOSCAddress</class>
    <class kind="class">juce::OSCSender</class>
    <namespace>juce</namespace>
    <member kind="typedef">
      <type>char</type>
      <name>OSCType</name>
      <anchorfile>namespacejuce.html</anchorfile>
      <anchor>a9badb0acd9b91a759d7f355e36f4ee6c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Array&lt; OSCType &gt;</type>
      <name>OSCTypeList</name>
      <anchorfile>namespacejuce.html</anchorfile>
      <anchor>a1e6393bb8a679e0a45c80ee34b534a1b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>juce_OSCAddress.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_osc/osc/</path>
    <filename>juce__OSCAddress_8h</filename>
    <class kind="class">OSCAddress</class>
    <class kind="class">OSCAddressPattern</class>
  </compound>
  <compound kind="file">
    <name>juce_OSCArgument.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_osc/osc/</path>
    <filename>juce__OSCArgument_8h</filename>
    <class kind="class">OSCArgument</class>
  </compound>
  <compound kind="file">
    <name>juce_OSCBundle.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_osc/osc/</path>
    <filename>juce__OSCBundle_8h</filename>
    <class kind="class">OSCBundle</class>
    <class kind="class">OSCBundle::Element</class>
  </compound>
  <compound kind="file">
    <name>juce_OSCMessage.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_osc/osc/</path>
    <filename>juce__OSCMessage_8h</filename>
    <class kind="class">OSCMessage</class>
  </compound>
  <compound kind="file">
    <name>juce_OSCReceiver.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_osc/osc/</path>
    <filename>juce__OSCReceiver_8h</filename>
    <class kind="class">OSCReceiver</class>
    <class kind="struct">OSCReceiver::MessageLoopCallback</class>
    <class kind="struct">OSCReceiver::RealtimeCallback</class>
    <class kind="class">OSCReceiver::Listener</class>
    <class kind="class">OSCReceiver::ListenerWithOSCAddress</class>
  </compound>
  <compound kind="file">
    <name>juce_OSCSender.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_osc/osc/</path>
    <filename>juce__OSCSender_8h</filename>
    <class kind="class">OSCSender</class>
  </compound>
  <compound kind="file">
    <name>juce_OSCTimeTag.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_osc/osc/</path>
    <filename>juce__OSCTimeTag_8h</filename>
    <class kind="class">OSCTimeTag</class>
  </compound>
  <compound kind="file">
    <name>juce_OSCTypes.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_osc/osc/</path>
    <filename>juce__OSCTypes_8h</filename>
    <class kind="class">OSCTypes</class>
    <class kind="struct">OSCException</class>
    <class kind="struct">OSCFormatError</class>
    <class kind="struct">OSCInternalError</class>
    <member kind="typedef">
      <type>char</type>
      <name>OSCType</name>
      <anchorfile>juce__OSCTypes_8h.html</anchorfile>
      <anchor>a5d660db6ad1f1d5f9a59438cc9109aea</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Array&lt; OSCType &gt;</type>
      <name>OSCTypeList</name>
      <anchorfile>juce__OSCTypes_8h.html</anchorfile>
      <anchor>a78ee134f1df32978ba1d7161262a8de5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>juce_OutputStream.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_core/streams/</path>
    <filename>juce__OutputStream_8h</filename>
    <class kind="class">OutputStream</class>
    <member kind="function">
      <type>JUCE_API OutputStream &amp;JUCE_CALLTYPE</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>juce__OutputStream_8h.html</anchorfile>
      <anchor>a8ed75a09f5e10cfa2f52b4417d7e0e94</anchor>
      <arglist>(OutputStream &amp;stream, int number)</arglist>
    </member>
    <member kind="function">
      <type>JUCE_API OutputStream &amp;JUCE_CALLTYPE</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>juce__OutputStream_8h.html</anchorfile>
      <anchor>a1b8ad6898762dd3d638731dc9099db00</anchor>
      <arglist>(OutputStream &amp;stream, int64 number)</arglist>
    </member>
    <member kind="function">
      <type>JUCE_API OutputStream &amp;JUCE_CALLTYPE</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>juce__OutputStream_8h.html</anchorfile>
      <anchor>a11b5439c2ecc497328c4c395e96c4880</anchor>
      <arglist>(OutputStream &amp;stream, double number)</arglist>
    </member>
    <member kind="function">
      <type>JUCE_API OutputStream &amp;JUCE_CALLTYPE</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>juce__OutputStream_8h.html</anchorfile>
      <anchor>aef2b2b3c15e955e3eef94f125261d4ad</anchor>
      <arglist>(OutputStream &amp;stream, char character)</arglist>
    </member>
    <member kind="function">
      <type>JUCE_API OutputStream &amp;JUCE_CALLTYPE</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>juce__OutputStream_8h.html</anchorfile>
      <anchor>a7c43049c525984ed1e21c917b79cedcf</anchor>
      <arglist>(OutputStream &amp;stream, const char *text)</arglist>
    </member>
    <member kind="function">
      <type>JUCE_API OutputStream &amp;JUCE_CALLTYPE</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>juce__OutputStream_8h.html</anchorfile>
      <anchor>a572aa38a19cde9a54cdc13348b3759d8</anchor>
      <arglist>(OutputStream &amp;stream, const MemoryBlock &amp;data)</arglist>
    </member>
    <member kind="function">
      <type>JUCE_API OutputStream &amp;JUCE_CALLTYPE</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>juce__OutputStream_8h.html</anchorfile>
      <anchor>a49574c67a7ca74e342849ea1d8da20c4</anchor>
      <arglist>(OutputStream &amp;stream, const File &amp;fileToRead)</arglist>
    </member>
    <member kind="function">
      <type>JUCE_API OutputStream &amp;JUCE_CALLTYPE</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>juce__OutputStream_8h.html</anchorfile>
      <anchor>a2b1591ae57bb334ba2e17c498baac0d0</anchor>
      <arglist>(OutputStream &amp;stream, InputStream &amp;streamToRead)</arglist>
    </member>
    <member kind="function">
      <type>JUCE_API OutputStream &amp;JUCE_CALLTYPE</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>juce__OutputStream_8h.html</anchorfile>
      <anchor>a97c7ec777ea768b987f21aa84fce7539</anchor>
      <arglist>(OutputStream &amp;stream, const NewLine &amp;)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>juce_OwnedArray.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_core/containers/</path>
    <filename>juce__OwnedArray_8h</filename>
    <class kind="class">OwnedArray</class>
  </compound>
  <compound kind="file">
    <name>juce_Path.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_graphics/geometry/</path>
    <filename>juce__Path_8h</filename>
    <class kind="class">Path</class>
    <class kind="class">Path::Iterator</class>
  </compound>
  <compound kind="file">
    <name>juce_PathIterator.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_graphics/geometry/</path>
    <filename>juce__PathIterator_8h</filename>
    <class kind="class">PathFlatteningIterator</class>
  </compound>
  <compound kind="file">
    <name>juce_PathStrokeType.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_graphics/geometry/</path>
    <filename>juce__PathStrokeType_8h</filename>
    <class kind="class">PathStrokeType</class>
  </compound>
  <compound kind="file">
    <name>juce_PerformanceCounter.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_core/time/</path>
    <filename>juce__PerformanceCounter_8h</filename>
    <class kind="class">PerformanceCounter</class>
    <class kind="struct">PerformanceCounter::Statistics</class>
  </compound>
  <compound kind="file">
    <name>juce_PhysicalTopologySource.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_blocks_basics/topology/</path>
    <filename>juce__PhysicalTopologySource_8h</filename>
    <class kind="class">PhysicalTopologySource</class>
    <class kind="struct">PhysicalTopologySource::DeviceConnection</class>
    <class kind="struct">PhysicalTopologySource::DeviceDetector</class>
  </compound>
  <compound kind="file">
    <name>juce_PixelFormats.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_graphics/colour/</path>
    <filename>juce__PixelFormats_8h</filename>
    <class kind="class">PixelARGB</class>
    <class kind="class">PixelRGB</class>
    <class kind="class">PixelAlpha</class>
    <member kind="function">
      <type>uint32</type>
      <name>maskPixelComponents</name>
      <anchorfile>juce__PixelFormats_8h.html</anchorfile>
      <anchor>abebe763f0ddf41420146d43d918a20fc</anchor>
      <arglist>(uint32 x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>uint32</type>
      <name>clampPixelComponents</name>
      <anchorfile>juce__PixelFormats_8h.html</anchorfile>
      <anchor>ae982b6f45d5bce9d1dde9376bef9ea78</anchor>
      <arglist>(uint32 x) noexcept</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>juce_PlatformDefs.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_core/system/</path>
    <filename>juce__PlatformDefs_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>JUCE_CALLTYPE</name>
      <anchorfile>juce__PlatformDefs_8h.html</anchorfile>
      <anchor>af0b3f78ca801d88a7912f4c6bbf50e58</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>JUCE_CDECL</name>
      <anchorfile>juce__PlatformDefs_8h.html</anchorfile>
      <anchor>af6815e7d8ca906bd8a6087d4d72d694c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>JUCE_LOG_CURRENT_ASSERTION</name>
      <anchorfile>juce__PlatformDefs_8h.html</anchorfile>
      <anchor>a5e6590da0ba1d0c109e96560289f5449</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>JUCE_BREAK_IN_DEBUGGER</name>
      <anchorfile>juce__PlatformDefs_8h.html</anchorfile>
      <anchor>a5d46c7712166bbecddff4aa62323556b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>JUCE_ANALYZER_NORETURN</name>
      <anchorfile>juce__PlatformDefs_8h.html</anchorfile>
      <anchor>a0a4e8406ebaae14eb87c14f02131602d</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>JUCE_BLOCK_WITH_FORCED_SEMICOLON</name>
      <anchorfile>juce__PlatformDefs_8h.html</anchorfile>
      <anchor>ab6af009a60142d8c0cbd2ea4c121dc69</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DBG</name>
      <anchorfile>juce__PlatformDefs_8h.html</anchorfile>
      <anchor>a679635952a5d2eb25f3b31398f0fcc25</anchor>
      <arglist>(textToWrite)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>jassertfalse</name>
      <anchorfile>juce__PlatformDefs_8h.html</anchorfile>
      <anchor>adc044ce5efecbecf2f5a44cd00db67b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>jassert</name>
      <anchorfile>juce__PlatformDefs_8h.html</anchorfile>
      <anchor>a1f96ab6751237979b907a54f52a7296a</anchor>
      <arglist>(expression)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>JUCE_JOIN_MACRO</name>
      <anchorfile>juce__PlatformDefs_8h.html</anchorfile>
      <anchor>a4dac24572cf8155c09d75f34c8297a47</anchor>
      <arglist>(item1, item2)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>JUCE_STRINGIFY</name>
      <anchorfile>juce__PlatformDefs_8h.html</anchorfile>
      <anchor>a7fab1bb48f05df367f0a57bc6cf3d12f</anchor>
      <arglist>(item)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>JUCE_DECLARE_NON_COPYABLE</name>
      <anchorfile>juce__PlatformDefs_8h.html</anchorfile>
      <anchor>a6ab7a603bf4435c7cb286b1744366eb2</anchor>
      <arglist>(className)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR</name>
      <anchorfile>juce__PlatformDefs_8h.html</anchorfile>
      <anchor>a851b02724a8158a7f746c66b5758b3dd</anchor>
      <arglist>(className)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>JUCE_PREVENT_HEAP_ALLOCATION</name>
      <anchorfile>juce__PlatformDefs_8h.html</anchorfile>
      <anchor>abe12fb8b712ed0602dd1678599a3167b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>JUCE_COMPILER_WARNING</name>
      <anchorfile>juce__PlatformDefs_8h.html</anchorfile>
      <anchor>a8cde62e24a0b5fd34e82402175587739</anchor>
      <arglist>(message)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>forcedinline</name>
      <anchorfile>juce__PlatformDefs_8h.html</anchorfile>
      <anchor>ac2535cb549b141b3a96b8a08014e46cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>JUCE_ALIGN</name>
      <anchorfile>juce__PlatformDefs_8h.html</anchorfile>
      <anchor>acd5d010d01e78e318786ab060742acd1</anchor>
      <arglist>(bytes)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>JUCE_DEPRECATED</name>
      <anchorfile>juce__PlatformDefs_8h.html</anchorfile>
      <anchor>af25d2cb3e6d1124146f7f1fcd8648016</anchor>
      <arglist>(functionDef)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>JUCE_DEPRECATED_WITH_BODY</name>
      <anchorfile>juce__PlatformDefs_8h.html</anchorfile>
      <anchor>ae6b75a90b7c83090e15a53b54555a078</anchor>
      <arglist>(functionDef, body)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>JUCE_NO_ASSOCIATIVE_MATH_OPTIMISATIONS</name>
      <anchorfile>juce__PlatformDefs_8h.html</anchorfile>
      <anchor>a909bde880b0a0a8cde591314de213c0a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>juce_PluginDescription.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_audio_processors/processors/</path>
    <filename>juce__PluginDescription_8h</filename>
    <class kind="class">PluginDescription</class>
  </compound>
  <compound kind="file">
    <name>juce_PluginDirectoryScanner.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_audio_processors/scanning/</path>
    <filename>juce__PluginDirectoryScanner_8h</filename>
    <class kind="class">PluginDirectoryScanner</class>
  </compound>
  <compound kind="file">
    <name>juce_PluginHostType.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_audio_plugin_client/utility/</path>
    <filename>juce__PluginHostType_8h</filename>
    <class kind="class">PluginHostType</class>
  </compound>
  <compound kind="file">
    <name>juce_PluginListComponent.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_audio_processors/scanning/</path>
    <filename>juce__PluginListComponent_8h</filename>
    <class kind="class">PluginListComponent</class>
  </compound>
  <compound kind="file">
    <name>juce_Point.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_graphics/geometry/</path>
    <filename>juce__Point_8h</filename>
    <class kind="class">Point</class>
    <member kind="function">
      <type>Point&lt; ValueType &gt;</type>
      <name>operator*</name>
      <anchorfile>juce__Point_8h.html</anchorfile>
      <anchor>a617ecf8f10cdf3c8131c4b88a1de488f</anchor>
      <arglist>(ValueType value, Point&lt; ValueType &gt; p) noexcept</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>juce_PopupMenu.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_gui_basics/menus/</path>
    <filename>juce__PopupMenu_8h</filename>
    <class kind="class">PopupMenu</class>
    <class kind="struct">PopupMenu::Item</class>
    <class kind="class">PopupMenu::Options</class>
    <class kind="class">PopupMenu::MenuItemIterator</class>
    <class kind="class">PopupMenu::CustomComponent</class>
    <class kind="class">PopupMenu::CustomCallback</class>
    <class kind="struct">PopupMenu::LookAndFeelMethods</class>
  </compound>
  <compound kind="file">
    <name>juce_PositionableAudioSource.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_audio_basics/sources/</path>
    <filename>juce__PositionableAudioSource_8h</filename>
    <class kind="class">PositionableAudioSource</class>
  </compound>
  <compound kind="file">
    <name>juce_PreferencesPanel.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_gui_extra/misc/</path>
    <filename>juce__PreferencesPanel_8h</filename>
    <class kind="class">PreferencesPanel</class>
  </compound>
  <compound kind="file">
    <name>juce_Primes.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_cryptography/encryption/</path>
    <filename>juce__Primes_8h</filename>
    <class kind="class">Primes</class>
  </compound>
  <compound kind="file">
    <name>juce_Process.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_core/threads/</path>
    <filename>juce__Process_8h</filename>
    <class kind="class">Process</class>
  </compound>
  <compound kind="file">
    <name>juce_ProgressBar.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_gui_basics/widgets/</path>
    <filename>juce__ProgressBar_8h</filename>
    <class kind="class">ProgressBar</class>
    <class kind="struct">ProgressBar::LookAndFeelMethods</class>
  </compound>
  <compound kind="file">
    <name>juce_PropertiesFile.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_data_structures/app_properties/</path>
    <filename>juce__PropertiesFile_8h</filename>
    <class kind="class">PropertiesFile</class>
    <class kind="struct">PropertiesFile::Options</class>
  </compound>
  <compound kind="file">
    <name>juce_PropertyComponent.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_gui_basics/properties/</path>
    <filename>juce__PropertyComponent_8h</filename>
    <class kind="class">PropertyComponent</class>
    <class kind="struct">PropertyComponent::LookAndFeelMethods</class>
  </compound>
  <compound kind="file">
    <name>juce_PropertyPanel.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_gui_basics/properties/</path>
    <filename>juce__PropertyPanel_8h</filename>
    <class kind="class">PropertyPanel</class>
  </compound>
  <compound kind="file">
    <name>juce_PropertySet.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_core/containers/</path>
    <filename>juce__PropertySet_8h</filename>
    <class kind="class">PropertySet</class>
  </compound>
  <compound kind="file">
    <name>juce_Quaternion.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_opengl/geometry/</path>
    <filename>juce__Quaternion_8h</filename>
    <class kind="class">Quaternion</class>
  </compound>
  <compound kind="file">
    <name>juce_QuickTimeAudioFormat.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_audio_formats/codecs/</path>
    <filename>juce__QuickTimeAudioFormat_8h</filename>
  </compound>
  <compound kind="file">
    <name>juce_Random.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_core/maths/</path>
    <filename>juce__Random_8h</filename>
    <class kind="class">Random</class>
  </compound>
  <compound kind="file">
    <name>juce_Range.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_core/maths/</path>
    <filename>juce__Range_8h</filename>
    <class kind="class">Range</class>
  </compound>
  <compound kind="file">
    <name>juce_ReadWriteLock.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_core/threads/</path>
    <filename>juce__ReadWriteLock_8h</filename>
    <class kind="class">ReadWriteLock</class>
  </compound>
  <compound kind="file">
    <name>juce_RecentlyOpenedFilesList.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_gui_extra/misc/</path>
    <filename>juce__RecentlyOpenedFilesList_8h</filename>
    <class kind="class">RecentlyOpenedFilesList</class>
  </compound>
  <compound kind="file">
    <name>juce_Rectangle.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_graphics/geometry/</path>
    <filename>juce__Rectangle_8h</filename>
    <class kind="class">Rectangle</class>
  </compound>
  <compound kind="file">
    <name>juce_RectangleList.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_graphics/geometry/</path>
    <filename>juce__RectangleList_8h</filename>
    <class kind="class">RectangleList</class>
  </compound>
  <compound kind="file">
    <name>juce_RectanglePlacement.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_graphics/placement/</path>
    <filename>juce__RectanglePlacement_8h</filename>
    <class kind="class">RectanglePlacement</class>
  </compound>
  <compound kind="file">
    <name>juce_ReferenceCountedArray.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_core/containers/</path>
    <filename>juce__ReferenceCountedArray_8h</filename>
    <class kind="class">ReferenceCountedArray</class>
  </compound>
  <compound kind="file">
    <name>juce_ReferenceCountedObject.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_core/memory/</path>
    <filename>juce__ReferenceCountedObject_8h</filename>
    <class kind="class">ReferenceCountedObject</class>
    <class kind="class">SingleThreadedReferenceCountedObject</class>
    <class kind="class">ReferenceCountedObjectPtr</class>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>juce__ReferenceCountedObject_8h.html</anchorfile>
      <anchor>a9fe3092d0a699f09ea15287dd040181a</anchor>
      <arglist>(const ReferenceCountedObjectPtr&lt; ReferenceCountedObjectClass &gt; &amp;object1, ReferenceCountedObjectClass *const object2) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>juce__ReferenceCountedObject_8h.html</anchorfile>
      <anchor>aa1955b9309ddae26fc9abb53ecbdbec0</anchor>
      <arglist>(const ReferenceCountedObjectPtr&lt; ReferenceCountedObjectClass &gt; &amp;object1, const ReferenceCountedObjectPtr&lt; ReferenceCountedObjectClass &gt; &amp;object2) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>juce__ReferenceCountedObject_8h.html</anchorfile>
      <anchor>a5e78dbcfa8a842e773fb030c2f3d9781</anchor>
      <arglist>(ReferenceCountedObjectClass *object1, const ReferenceCountedObjectPtr&lt; ReferenceCountedObjectClass &gt; &amp;object2) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>juce__ReferenceCountedObject_8h.html</anchorfile>
      <anchor>a98d9adee99bce84b370ccdbf0dda395b</anchor>
      <arglist>(const ReferenceCountedObjectPtr&lt; ReferenceCountedObjectClass &gt; &amp;object1, const ReferenceCountedObjectClass *object2) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>juce__ReferenceCountedObject_8h.html</anchorfile>
      <anchor>a4ccf60dc1326abbf6445b7ca8ff9bb53</anchor>
      <arglist>(const ReferenceCountedObjectPtr&lt; ReferenceCountedObjectClass &gt; &amp;object1, const ReferenceCountedObjectPtr&lt; ReferenceCountedObjectClass &gt; &amp;object2) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>juce__ReferenceCountedObject_8h.html</anchorfile>
      <anchor>a3def35798a4ee95b9863d175deaeadfc</anchor>
      <arglist>(ReferenceCountedObjectClass *object1, const ReferenceCountedObjectPtr&lt; ReferenceCountedObjectClass &gt; &amp;object2) noexcept</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>juce_RelativeCoordinate.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_gui_basics/positioning/</path>
    <filename>juce__RelativeCoordinate_8h</filename>
    <class kind="class">RelativeCoordinate</class>
    <class kind="struct">RelativeCoordinate::Strings</class>
    <class kind="struct">RelativeCoordinate::StandardStrings</class>
  </compound>
  <compound kind="file">
    <name>juce_RelativeCoordinatePositioner.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_gui_basics/positioning/</path>
    <filename>juce__RelativeCoordinatePositioner_8h</filename>
    <class kind="class">RelativeCoordinatePositionerBase</class>
    <class kind="class">RelativeCoordinatePositionerBase::ComponentScope</class>
  </compound>
  <compound kind="file">
    <name>juce_RelativeParallelogram.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_gui_basics/positioning/</path>
    <filename>juce__RelativeParallelogram_8h</filename>
    <class kind="class">RelativeParallelogram</class>
  </compound>
  <compound kind="file">
    <name>juce_RelativePoint.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_gui_basics/positioning/</path>
    <filename>juce__RelativePoint_8h</filename>
    <class kind="class">RelativePoint</class>
  </compound>
  <compound kind="file">
    <name>juce_RelativePointPath.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_gui_basics/positioning/</path>
    <filename>juce__RelativePointPath_8h</filename>
    <class kind="class">RelativePointPath</class>
    <class kind="class">RelativePointPath::ElementBase</class>
    <class kind="class">RelativePointPath::StartSubPath</class>
    <class kind="class">RelativePointPath::CloseSubPath</class>
    <class kind="class">RelativePointPath::LineTo</class>
    <class kind="class">RelativePointPath::QuadraticTo</class>
    <class kind="class">RelativePointPath::CubicTo</class>
  </compound>
  <compound kind="file">
    <name>juce_RelativeRectangle.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_gui_basics/positioning/</path>
    <filename>juce__RelativeRectangle_8h</filename>
    <class kind="class">RelativeRectangle</class>
  </compound>
  <compound kind="file">
    <name>juce_RelativeTime.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_core/time/</path>
    <filename>juce__RelativeTime_8h</filename>
    <class kind="class">RelativeTime</class>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>juce__RelativeTime_8h.html</anchorfile>
      <anchor>acd52d8802611055ef527ee2334be5c6b</anchor>
      <arglist>(RelativeTime t1, RelativeTime t2) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>juce__RelativeTime_8h.html</anchorfile>
      <anchor>a0c3cc26057571f8ba62f809fd9702fa8</anchor>
      <arglist>(RelativeTime t1, RelativeTime t2) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>juce__RelativeTime_8h.html</anchorfile>
      <anchor>a12da8d1499f8897fec708e5040b37cd9</anchor>
      <arglist>(RelativeTime t1, RelativeTime t2) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>juce__RelativeTime_8h.html</anchorfile>
      <anchor>a1a7c3d5861d0fa9ccabb88b308cc0c66</anchor>
      <arglist>(RelativeTime t1, RelativeTime t2) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>juce__RelativeTime_8h.html</anchorfile>
      <anchor>a720431c319a22825d6d52a5d7eda9612</anchor>
      <arglist>(RelativeTime t1, RelativeTime t2) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>juce__RelativeTime_8h.html</anchorfile>
      <anchor>a0bf2a0e4602a11166aff4e3fc7ad797d</anchor>
      <arglist>(RelativeTime t1, RelativeTime t2) noexcept</arglist>
    </member>
    <member kind="function">
      <type>RelativeTime</type>
      <name>operator+</name>
      <anchorfile>juce__RelativeTime_8h.html</anchorfile>
      <anchor>a162fe7f8da07d9f16ecd01c92d8d09b4</anchor>
      <arglist>(RelativeTime t1, RelativeTime t2) noexcept</arglist>
    </member>
    <member kind="function">
      <type>RelativeTime</type>
      <name>operator-</name>
      <anchorfile>juce__RelativeTime_8h.html</anchorfile>
      <anchor>a40727594edf1b67ce4a64e103527f7ac</anchor>
      <arglist>(RelativeTime t1, RelativeTime t2) noexcept</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>juce_ResamplingAudioSource.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_audio_basics/sources/</path>
    <filename>juce__ResamplingAudioSource_8h</filename>
    <class kind="class">ResamplingAudioSource</class>
  </compound>
  <compound kind="file">
    <name>juce_ResizableBorderComponent.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_gui_basics/layout/</path>
    <filename>juce__ResizableBorderComponent_8h</filename>
    <class kind="class">ResizableBorderComponent</class>
    <class kind="class">ResizableBorderComponent::Zone</class>
  </compound>
  <compound kind="file">
    <name>juce_ResizableCornerComponent.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_gui_basics/layout/</path>
    <filename>juce__ResizableCornerComponent_8h</filename>
    <class kind="class">ResizableCornerComponent</class>
  </compound>
  <compound kind="file">
    <name>juce_ResizableEdgeComponent.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_gui_basics/layout/</path>
    <filename>juce__ResizableEdgeComponent_8h</filename>
    <class kind="class">ResizableEdgeComponent</class>
  </compound>
  <compound kind="file">
    <name>juce_ResizableWindow.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_gui_basics/windows/</path>
    <filename>juce__ResizableWindow_8h</filename>
    <class kind="class">ResizableWindow</class>
    <class kind="struct">ResizableWindow::LookAndFeelMethods</class>
  </compound>
  <compound kind="file">
    <name>juce_Result.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_core/misc/</path>
    <filename>juce__Result_8h</filename>
    <class kind="class">Result</class>
  </compound>
  <compound kind="file">
    <name>juce_Reverb.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_audio_basics/effects/</path>
    <filename>juce__Reverb_8h</filename>
    <class kind="class">Reverb</class>
    <class kind="struct">Reverb::Parameters</class>
  </compound>
  <compound kind="file">
    <name>juce_ReverbAudioSource.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_audio_basics/sources/</path>
    <filename>juce__ReverbAudioSource_8h</filename>
    <class kind="class">ReverbAudioSource</class>
  </compound>
  <compound kind="file">
    <name>juce_RSAKey.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_cryptography/encryption/</path>
    <filename>juce__RSAKey_8h</filename>
    <class kind="class">RSAKey</class>
  </compound>
  <compound kind="file">
    <name>juce_RTAS_DigiCode_Header.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_audio_plugin_client/RTAS/</path>
    <filename>juce__RTAS__DigiCode__Header_8h</filename>
  </compound>
  <compound kind="file">
    <name>juce_RuleBasedTopologySource.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_blocks_basics/topology/</path>
    <filename>juce__RuleBasedTopologySource_8h</filename>
    <class kind="class">RuleBasedTopologySource</class>
    <class kind="struct">RuleBasedTopologySource::Rule</class>
  </compound>
  <compound kind="file">
    <name>juce_RuntimePermissions.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_core/misc/</path>
    <filename>juce__RuntimePermissions_8h</filename>
    <class kind="class">RuntimePermissions</class>
  </compound>
  <compound kind="file">
    <name>juce_Sampler.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_audio_formats/sampler/</path>
    <filename>juce__Sampler_8h</filename>
    <class kind="class">SamplerSound</class>
    <class kind="class">SamplerVoice</class>
  </compound>
  <compound kind="file">
    <name>juce_ScopedLock.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_core/threads/</path>
    <filename>juce__ScopedLock_8h</filename>
    <class kind="class">GenericScopedLock</class>
    <class kind="class">GenericScopedUnlock</class>
    <class kind="class">GenericScopedTryLock</class>
  </compound>
  <compound kind="file">
    <name>juce_ScopedPointer.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_core/memory/</path>
    <filename>juce__ScopedPointer_8h</filename>
    <class kind="class">ScopedPointer</class>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>juce__ScopedPointer_8h.html</anchorfile>
      <anchor>a44c6f65eba15909069b2ae838cbd96d1</anchor>
      <arglist>(const ScopedPointer&lt; ObjectType &gt; &amp;pointer1, ObjectType *const pointer2) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>juce__ScopedPointer_8h.html</anchorfile>
      <anchor>a08ebf907fd87957ebdc43e49eb5cfccd</anchor>
      <arglist>(const ScopedPointer&lt; ObjectType &gt; &amp;pointer1, ObjectType *const pointer2) noexcept</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>juce_ScopedReadLock.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_core/threads/</path>
    <filename>juce__ScopedReadLock_8h</filename>
    <class kind="class">ScopedReadLock</class>
  </compound>
  <compound kind="file">
    <name>juce_ScopedValueSetter.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_core/containers/</path>
    <filename>juce__ScopedValueSetter_8h</filename>
    <class kind="class">ScopedValueSetter</class>
  </compound>
  <compound kind="file">
    <name>juce_ScopedWriteLock.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_core/threads/</path>
    <filename>juce__ScopedWriteLock_8h</filename>
    <class kind="class">ScopedWriteLock</class>
  </compound>
  <compound kind="file">
    <name>juce_ScrollBar.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_gui_basics/layout/</path>
    <filename>juce__ScrollBar_8h</filename>
    <class kind="class">ScrollBar</class>
    <class kind="class">ScrollBar::Listener</class>
    <class kind="struct">ScrollBar::LookAndFeelMethods</class>
    <member kind="typedef">
      <type>ScrollBar::Listener</type>
      <name>ScrollBarListener</name>
      <anchorfile>juce__ScrollBar_8h.html</anchorfile>
      <anchor>aca2ee37ad48d18a710340db288ea80c3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>juce_SelectedItemSet.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_gui_basics/mouse/</path>
    <filename>juce__SelectedItemSet_8h</filename>
    <class kind="class">SelectedItemSet</class>
  </compound>
  <compound kind="file">
    <name>juce_SHA256.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_cryptography/hashing/</path>
    <filename>juce__SHA256_8h</filename>
    <class kind="class">SHA256</class>
  </compound>
  <compound kind="file">
    <name>juce_ShapeButton.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_gui_basics/buttons/</path>
    <filename>juce__ShapeButton_8h</filename>
    <class kind="class">ShapeButton</class>
  </compound>
  <compound kind="file">
    <name>juce_SharedResourcePointer.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_core/memory/</path>
    <filename>juce__SharedResourcePointer_8h</filename>
    <class kind="class">SharedResourcePointer</class>
  </compound>
  <compound kind="file">
    <name>juce_Singleton.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_core/memory/</path>
    <filename>juce__Singleton_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>juce_DeclareSingleton</name>
      <anchorfile>juce__Singleton_8h.html</anchorfile>
      <anchor>ac46b66c5d38d6bd3a937af241d152a44</anchor>
      <arglist>(classname, doNotRecreateAfterDeletion)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>juce_ImplementSingleton</name>
      <anchorfile>juce__Singleton_8h.html</anchorfile>
      <anchor>a514301c5c269b87e3a3e3da3a6640f8f</anchor>
      <arglist>(classname)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>juce_DeclareSingleton_SingleThreaded</name>
      <anchorfile>juce__Singleton_8h.html</anchorfile>
      <anchor>a253f51f3a9ac2b4795e2ce08b2a756d9</anchor>
      <arglist>(classname, doNotRecreateAfterDeletion)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>juce_DeclareSingleton_SingleThreaded_Minimal</name>
      <anchorfile>juce__Singleton_8h.html</anchorfile>
      <anchor>a354e37d287b39d02097f4f74be14af51</anchor>
      <arglist>(classname)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>juce_ImplementSingleton_SingleThreaded</name>
      <anchorfile>juce__Singleton_8h.html</anchorfile>
      <anchor>a4404ed444ce628bab43d7fb68f7f1884</anchor>
      <arglist>(classname)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>juce_Slider.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_gui_basics/widgets/</path>
    <filename>juce__Slider_8h</filename>
    <class kind="class">Slider</class>
    <class kind="struct">Slider::RotaryParameters</class>
    <class kind="class">Slider::Listener</class>
    <class kind="struct">Slider::SliderLayout</class>
    <class kind="struct">Slider::LookAndFeelMethods</class>
    <member kind="typedef">
      <type>Slider::Listener</type>
      <name>SliderListener</name>
      <anchorfile>juce__Slider_8h.html</anchorfile>
      <anchor>aef569434c5f0f6aca195bc50e4af0a0c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>juce_SliderPropertyComponent.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_gui_basics/properties/</path>
    <filename>juce__SliderPropertyComponent_8h</filename>
    <class kind="class">SliderPropertyComponent</class>
  </compound>
  <compound kind="file">
    <name>juce_Socket.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_core/network/</path>
    <filename>juce__Socket_8h</filename>
    <class kind="class">StreamingSocket</class>
    <class kind="class">DatagramSocket</class>
  </compound>
  <compound kind="file">
    <name>juce_SortedSet.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_core/containers/</path>
    <filename>juce__SortedSet_8h</filename>
    <class kind="class">SortedSet</class>
  </compound>
  <compound kind="file">
    <name>juce_SoundPlayer.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_audio_utils/players/</path>
    <filename>juce__SoundPlayer_8h</filename>
    <class kind="class">SoundPlayer</class>
  </compound>
  <compound kind="file">
    <name>juce_SparseSet.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_core/containers/</path>
    <filename>juce__SparseSet_8h</filename>
    <class kind="class">SparseSet</class>
  </compound>
  <compound kind="file">
    <name>juce_SpinLock.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_core/threads/</path>
    <filename>juce__SpinLock_8h</filename>
    <class kind="class">SpinLock</class>
  </compound>
  <compound kind="file">
    <name>juce_SplashScreen.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_gui_extra/misc/</path>
    <filename>juce__SplashScreen_8h</filename>
    <class kind="class">SplashScreen</class>
  </compound>
  <compound kind="file">
    <name>juce_StandaloneFilterWindow.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_audio_plugin_client/Standalone/</path>
    <filename>juce__StandaloneFilterWindow_8h</filename>
    <class kind="class">StandalonePluginHolder</class>
    <class kind="class">StandaloneFilterWindow</class>
  </compound>
  <compound kind="file">
    <name>juce_StandardHeader.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_core/system/</path>
    <filename>juce__StandardHeader_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>JUCE_MAJOR_VERSION</name>
      <anchorfile>juce__StandardHeader_8h.html</anchorfile>
      <anchor>ad39afa9c8302295c83a3c431c553bc8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>JUCE_MINOR_VERSION</name>
      <anchorfile>juce__StandardHeader_8h.html</anchorfile>
      <anchor>a2a583ff83063cc1e7f9abeb35a21dff1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>JUCE_BUILDNUMBER</name>
      <anchorfile>juce__StandardHeader_8h.html</anchorfile>
      <anchor>a9ac1dc104cd00f4cc2ff6dece8711f32</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>JUCE_VERSION</name>
      <anchorfile>juce__StandardHeader_8h.html</anchorfile>
      <anchor>a8e9e97736d05e318de09b9bedab1aaa0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>JUCE_API</name>
      <anchorfile>juce__StandardHeader_8h.html</anchorfile>
      <anchor>a65961b3bfbda0ffb83750d914cee38fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>JUCE_PUBLIC_IN_DLL_BUILD</name>
      <anchorfile>juce__StandardHeader_8h.html</anchorfile>
      <anchor>a8d339dd1e85e6fbefaf7638692d085c2</anchor>
      <arglist>(declaration)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>JUCE_PUBLIC_FUNCTION</name>
      <anchorfile>juce__StandardHeader_8h.html</anchorfile>
      <anchor>a96fbdc03e0c892905daef7b47337c84e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>juce_StatisticsAccumulator.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_core/maths/</path>
    <filename>juce__StatisticsAccumulator_8h</filename>
    <class kind="class">StatisticsAccumulator</class>
  </compound>
  <compound kind="file">
    <name>juce_StatusLight.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_blocks_basics/blocks/</path>
    <filename>juce__StatusLight_8h</filename>
    <class kind="class">StatusLight</class>
  </compound>
  <compound kind="file">
    <name>juce_StretchableLayoutManager.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_gui_basics/layout/</path>
    <filename>juce__StretchableLayoutManager_8h</filename>
    <class kind="class">StretchableLayoutManager</class>
  </compound>
  <compound kind="file">
    <name>juce_StretchableLayoutResizerBar.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_gui_basics/layout/</path>
    <filename>juce__StretchableLayoutResizerBar_8h</filename>
    <class kind="class">StretchableLayoutResizerBar</class>
    <class kind="struct">StretchableLayoutResizerBar::LookAndFeelMethods</class>
  </compound>
  <compound kind="file">
    <name>juce_StretchableObjectResizer.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_gui_basics/layout/</path>
    <filename>juce__StretchableObjectResizer_8h</filename>
    <class kind="class">StretchableObjectResizer</class>
  </compound>
  <compound kind="file">
    <name>juce_String.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_core/text/</path>
    <filename>juce__String_8h</filename>
    <class kind="class">String</class>
    <member kind="function">
      <type>JUCE_API String JUCE_CALLTYPE</type>
      <name>operator+</name>
      <anchorfile>juce__String_8h.html</anchorfile>
      <anchor>ae0f6b7a1acb4a2d3060666bf04b31f4e</anchor>
      <arglist>(const char *string1, const String &amp;string2)</arglist>
    </member>
    <member kind="function">
      <type>JUCE_API String JUCE_CALLTYPE</type>
      <name>operator+</name>
      <anchorfile>juce__String_8h.html</anchorfile>
      <anchor>a3a619def69edcfd73d70288d21656071</anchor>
      <arglist>(const wchar_t *string1, const String &amp;string2)</arglist>
    </member>
    <member kind="function">
      <type>JUCE_API String JUCE_CALLTYPE</type>
      <name>operator+</name>
      <anchorfile>juce__String_8h.html</anchorfile>
      <anchor>a96b597b42d55a8c5cb4db648fcdd4433</anchor>
      <arglist>(char string1, const String &amp;string2)</arglist>
    </member>
    <member kind="function">
      <type>JUCE_API String JUCE_CALLTYPE</type>
      <name>operator+</name>
      <anchorfile>juce__String_8h.html</anchorfile>
      <anchor>a289a7ddd2aa611007fdfd999bbb67984</anchor>
      <arglist>(wchar_t string1, const String &amp;string2)</arglist>
    </member>
    <member kind="function">
      <type>JUCE_API String JUCE_CALLTYPE</type>
      <name>operator+</name>
      <anchorfile>juce__String_8h.html</anchorfile>
      <anchor>a0ff1262628ab09e48213c4576b2699ef</anchor>
      <arglist>(String string1, const String &amp;string2)</arglist>
    </member>
    <member kind="function">
      <type>JUCE_API String JUCE_CALLTYPE</type>
      <name>operator+</name>
      <anchorfile>juce__String_8h.html</anchorfile>
      <anchor>a80408c62699a01f1253730ff924ad296</anchor>
      <arglist>(String string1, const char *string2)</arglist>
    </member>
    <member kind="function">
      <type>JUCE_API String JUCE_CALLTYPE</type>
      <name>operator+</name>
      <anchorfile>juce__String_8h.html</anchorfile>
      <anchor>a67a5325e801ca088aeb972ca92c0b70f</anchor>
      <arglist>(String string1, const wchar_t *string2)</arglist>
    </member>
    <member kind="function">
      <type>JUCE_API String JUCE_CALLTYPE</type>
      <name>operator+</name>
      <anchorfile>juce__String_8h.html</anchorfile>
      <anchor>a8f47c45d46a66a1fa9011ec742fc92ce</anchor>
      <arglist>(String string1, char characterToAppend)</arglist>
    </member>
    <member kind="function">
      <type>JUCE_API String JUCE_CALLTYPE</type>
      <name>operator+</name>
      <anchorfile>juce__String_8h.html</anchorfile>
      <anchor>a8f8db7bad3db2cec132fa4f7dc7981d6</anchor>
      <arglist>(String string1, wchar_t characterToAppend)</arglist>
    </member>
    <member kind="function">
      <type>JUCE_API String &amp;JUCE_CALLTYPE</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>juce__String_8h.html</anchorfile>
      <anchor>a2b2f2a59cf79a16bdb6ec4c209a0d476</anchor>
      <arglist>(String &amp;string1, char characterToAppend)</arglist>
    </member>
    <member kind="function">
      <type>JUCE_API String &amp;JUCE_CALLTYPE</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>juce__String_8h.html</anchorfile>
      <anchor>a01a50db2dcc001fa5714fef3a0858e70</anchor>
      <arglist>(String &amp;string1, wchar_t characterToAppend)</arglist>
    </member>
    <member kind="function">
      <type>JUCE_API String &amp;JUCE_CALLTYPE</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>juce__String_8h.html</anchorfile>
      <anchor>a245f8927b83129e9c37b09e264ae3607</anchor>
      <arglist>(String &amp;string1, const char *string2)</arglist>
    </member>
    <member kind="function">
      <type>JUCE_API String &amp;JUCE_CALLTYPE</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>juce__String_8h.html</anchorfile>
      <anchor>a05362992d3329fa260cb894957d814bd</anchor>
      <arglist>(String &amp;string1, const wchar_t *string2)</arglist>
    </member>
    <member kind="function">
      <type>JUCE_API String &amp;JUCE_CALLTYPE</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>juce__String_8h.html</anchorfile>
      <anchor>a0f0698c593294b72c1c3d1d0c18c9203</anchor>
      <arglist>(String &amp;string1, const String &amp;string2)</arglist>
    </member>
    <member kind="function">
      <type>JUCE_API String &amp;JUCE_CALLTYPE</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>juce__String_8h.html</anchorfile>
      <anchor>a58038c0028b9e258c3ed461559317b68</anchor>
      <arglist>(String &amp;string1, StringRef string2)</arglist>
    </member>
    <member kind="function">
      <type>JUCE_API String &amp;JUCE_CALLTYPE</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>juce__String_8h.html</anchorfile>
      <anchor>a6a1276f6108d092973905baf8d6265a8</anchor>
      <arglist>(String &amp;string1, short number)</arglist>
    </member>
    <member kind="function">
      <type>JUCE_API String &amp;JUCE_CALLTYPE</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>juce__String_8h.html</anchorfile>
      <anchor>aa15383b496d234f9d80edd441634fa90</anchor>
      <arglist>(String &amp;string1, int number)</arglist>
    </member>
    <member kind="function">
      <type>JUCE_API String &amp;JUCE_CALLTYPE</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>juce__String_8h.html</anchorfile>
      <anchor>adf6e4e4381e9443bd029d6c2fc6ec58b</anchor>
      <arglist>(String &amp;string1, long number)</arglist>
    </member>
    <member kind="function">
      <type>JUCE_API String &amp;JUCE_CALLTYPE</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>juce__String_8h.html</anchorfile>
      <anchor>aa63100aa19309480c9650073ace12a6b</anchor>
      <arglist>(String &amp;string1, int64 number)</arglist>
    </member>
    <member kind="function">
      <type>JUCE_API String &amp;JUCE_CALLTYPE</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>juce__String_8h.html</anchorfile>
      <anchor>a3ca7663a803aa62921453672addc61fd</anchor>
      <arglist>(String &amp;string1, uint64 number)</arglist>
    </member>
    <member kind="function">
      <type>JUCE_API String &amp;JUCE_CALLTYPE</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>juce__String_8h.html</anchorfile>
      <anchor>a595ca2aa67e574b0b35bcd58f86b88f0</anchor>
      <arglist>(String &amp;string1, float number)</arglist>
    </member>
    <member kind="function">
      <type>JUCE_API String &amp;JUCE_CALLTYPE</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>juce__String_8h.html</anchorfile>
      <anchor>a493d08281ed7696c36df9acb2bcae945</anchor>
      <arglist>(String &amp;string1, double number)</arglist>
    </member>
    <member kind="function">
      <type>JUCE_API bool JUCE_CALLTYPE</type>
      <name>operator==</name>
      <anchorfile>juce__String_8h.html</anchorfile>
      <anchor>ac63080f46c282d58b2cf9ad5c36ea1bd</anchor>
      <arglist>(const String &amp;string1, const String &amp;string2) noexcept</arglist>
    </member>
    <member kind="function">
      <type>JUCE_API bool JUCE_CALLTYPE</type>
      <name>operator==</name>
      <anchorfile>juce__String_8h.html</anchorfile>
      <anchor>a3b88a6404df2d63a88cf66b798b1d435</anchor>
      <arglist>(const String &amp;string1, const char *string2) noexcept</arglist>
    </member>
    <member kind="function">
      <type>JUCE_API bool JUCE_CALLTYPE</type>
      <name>operator==</name>
      <anchorfile>juce__String_8h.html</anchorfile>
      <anchor>a4a0596007eb54934fa2fc026afed40d8</anchor>
      <arglist>(const String &amp;string1, const wchar_t *string2) noexcept</arglist>
    </member>
    <member kind="function">
      <type>JUCE_API bool JUCE_CALLTYPE</type>
      <name>operator==</name>
      <anchorfile>juce__String_8h.html</anchorfile>
      <anchor>a1fbaba12ce1beba3a5a60774fe8917bd</anchor>
      <arglist>(const String &amp;string1, const CharPointer_UTF8 string2) noexcept</arglist>
    </member>
    <member kind="function">
      <type>JUCE_API bool JUCE_CALLTYPE</type>
      <name>operator==</name>
      <anchorfile>juce__String_8h.html</anchorfile>
      <anchor>a81f00cd553d532a7b2eaaf32f3ba5434</anchor>
      <arglist>(const String &amp;string1, const CharPointer_UTF16 string2) noexcept</arglist>
    </member>
    <member kind="function">
      <type>JUCE_API bool JUCE_CALLTYPE</type>
      <name>operator==</name>
      <anchorfile>juce__String_8h.html</anchorfile>
      <anchor>a230a4e6987b3f4304ae9022a1234069d</anchor>
      <arglist>(const String &amp;string1, const CharPointer_UTF32 string2) noexcept</arglist>
    </member>
    <member kind="function">
      <type>JUCE_API bool JUCE_CALLTYPE</type>
      <name>operator!=</name>
      <anchorfile>juce__String_8h.html</anchorfile>
      <anchor>a2b8ed7c3d382fe5764b0b2dd4d7885ad</anchor>
      <arglist>(const String &amp;string1, const String &amp;string2) noexcept</arglist>
    </member>
    <member kind="function">
      <type>JUCE_API bool JUCE_CALLTYPE</type>
      <name>operator!=</name>
      <anchorfile>juce__String_8h.html</anchorfile>
      <anchor>aab136b396cae71bb857706b0e7c33b90</anchor>
      <arglist>(const String &amp;string1, const char *string2) noexcept</arglist>
    </member>
    <member kind="function">
      <type>JUCE_API bool JUCE_CALLTYPE</type>
      <name>operator!=</name>
      <anchorfile>juce__String_8h.html</anchorfile>
      <anchor>a1bb9551991fb47687874b185834278c3</anchor>
      <arglist>(const String &amp;string1, const wchar_t *string2) noexcept</arglist>
    </member>
    <member kind="function">
      <type>JUCE_API bool JUCE_CALLTYPE</type>
      <name>operator!=</name>
      <anchorfile>juce__String_8h.html</anchorfile>
      <anchor>a90ffb91718d08a87f26014f70d85dd50</anchor>
      <arglist>(const String &amp;string1, const CharPointer_UTF8 string2) noexcept</arglist>
    </member>
    <member kind="function">
      <type>JUCE_API bool JUCE_CALLTYPE</type>
      <name>operator!=</name>
      <anchorfile>juce__String_8h.html</anchorfile>
      <anchor>a6c7db7c03a9c573d30080fc8fef31492</anchor>
      <arglist>(const String &amp;string1, const CharPointer_UTF16 string2) noexcept</arglist>
    </member>
    <member kind="function">
      <type>JUCE_API bool JUCE_CALLTYPE</type>
      <name>operator!=</name>
      <anchorfile>juce__String_8h.html</anchorfile>
      <anchor>a6683ba4b082f20adbe01bfd0aeb75c96</anchor>
      <arglist>(const String &amp;string1, const CharPointer_UTF32 string2) noexcept</arglist>
    </member>
    <member kind="function">
      <type>JUCE_API bool JUCE_CALLTYPE</type>
      <name>operator&gt;</name>
      <anchorfile>juce__String_8h.html</anchorfile>
      <anchor>a8f94b7fdb0c55c2a97b06c92bc7ee04c</anchor>
      <arglist>(const String &amp;string1, const String &amp;string2) noexcept</arglist>
    </member>
    <member kind="function">
      <type>JUCE_API bool JUCE_CALLTYPE</type>
      <name>operator&lt;</name>
      <anchorfile>juce__String_8h.html</anchorfile>
      <anchor>aeac6221ecc76986be02984494cce74f3</anchor>
      <arglist>(const String &amp;string1, const String &amp;string2) noexcept</arglist>
    </member>
    <member kind="function">
      <type>JUCE_API bool JUCE_CALLTYPE</type>
      <name>operator&gt;=</name>
      <anchorfile>juce__String_8h.html</anchorfile>
      <anchor>ade5ad81bc2e1403565b49086e81bc717</anchor>
      <arglist>(const String &amp;string1, const String &amp;string2) noexcept</arglist>
    </member>
    <member kind="function">
      <type>JUCE_API bool JUCE_CALLTYPE</type>
      <name>operator&lt;=</name>
      <anchorfile>juce__String_8h.html</anchorfile>
      <anchor>abfcf280ae0bbe84d3822b2d330e99d58</anchor>
      <arglist>(const String &amp;string1, const String &amp;string2) noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::basic_ostream&lt; char, traits &gt; &amp;JUCE_CALLTYPE</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>juce__String_8h.html</anchorfile>
      <anchor>aeb8f16cdf7cbd9d5c2d9863767c6a300</anchor>
      <arglist>(std::basic_ostream&lt; char, traits &gt; &amp;stream, const String &amp;stringToWrite)</arglist>
    </member>
    <member kind="function">
      <type>std::basic_ostream&lt; wchar_t, traits &gt; &amp;JUCE_CALLTYPE</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>juce__String_8h.html</anchorfile>
      <anchor>a658d972ca79f5270ac88b18de27f505e</anchor>
      <arglist>(std::basic_ostream&lt; wchar_t, traits &gt; &amp;stream, const String &amp;stringToWrite)</arglist>
    </member>
    <member kind="function">
      <type>JUCE_API OutputStream &amp;JUCE_CALLTYPE</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>juce__String_8h.html</anchorfile>
      <anchor>a54cae297934c6894de21d45e8ad935a2</anchor>
      <arglist>(OutputStream &amp;stream, const String &amp;stringToWrite)</arglist>
    </member>
    <member kind="function">
      <type>JUCE_API OutputStream &amp;JUCE_CALLTYPE</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>juce__String_8h.html</anchorfile>
      <anchor>a29762fe0d24d14839db43d1dc35c26bf</anchor>
      <arglist>(OutputStream &amp;stream, StringRef stringToWrite)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>juce_StringArray.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_core/text/</path>
    <filename>juce__StringArray_8h</filename>
    <class kind="class">StringArray</class>
  </compound>
  <compound kind="file">
    <name>juce_StringPairArray.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_core/text/</path>
    <filename>juce__StringPairArray_8h</filename>
    <class kind="class">StringPairArray</class>
  </compound>
  <compound kind="file">
    <name>juce_StringPool.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_core/text/</path>
    <filename>juce__StringPool_8h</filename>
    <class kind="class">StringPool</class>
  </compound>
  <compound kind="file">
    <name>juce_StringRef.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_core/text/</path>
    <filename>juce__StringRef_8h</filename>
    <class kind="class">StringRef</class>
    <member kind="function">
      <type>JUCE_API bool JUCE_CALLTYPE</type>
      <name>operator==</name>
      <anchorfile>juce__StringRef_8h.html</anchorfile>
      <anchor>ad0ca14a75383e0918a36b697af8d3085</anchor>
      <arglist>(const String &amp;string1, StringRef string2) noexcept</arglist>
    </member>
    <member kind="function">
      <type>JUCE_API bool JUCE_CALLTYPE</type>
      <name>operator!=</name>
      <anchorfile>juce__StringRef_8h.html</anchorfile>
      <anchor>abf08c24372da512ebeeb7b9399121fcc</anchor>
      <arglist>(const String &amp;string1, StringRef string2) noexcept</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>operator+</name>
      <anchorfile>juce__StringRef_8h.html</anchorfile>
      <anchor>ac4d152f0cb9688f5a0d09a5275ff8fe7</anchor>
      <arglist>(String s1, StringRef s2)</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>operator+</name>
      <anchorfile>juce__StringRef_8h.html</anchorfile>
      <anchor>a704c5c4603244f34187fe79b32c869ea</anchor>
      <arglist>(StringRef s1, const String &amp;s2)</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>operator+</name>
      <anchorfile>juce__StringRef_8h.html</anchorfile>
      <anchor>a2c934683398b100a1b9bfd1dcbb9dba1</anchor>
      <arglist>(const char *s1, StringRef s2)</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>operator+</name>
      <anchorfile>juce__StringRef_8h.html</anchorfile>
      <anchor>a5c5e939a13efba4b2af074d571a81c8c</anchor>
      <arglist>(StringRef s1, const char *s2)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>juce_SubregionStream.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_core/streams/</path>
    <filename>juce__SubregionStream_8h</filename>
    <class kind="class">SubregionStream</class>
  </compound>
  <compound kind="file">
    <name>juce_Synthesiser.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_audio_basics/synthesisers/</path>
    <filename>juce__Synthesiser_8h</filename>
    <class kind="class">SynthesiserSound</class>
    <class kind="class">SynthesiserVoice</class>
    <class kind="class">Synthesiser</class>
  </compound>
  <compound kind="file">
    <name>juce_SystemAudioVolume.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_audio_devices/audio_io/</path>
    <filename>juce__SystemAudioVolume_8h</filename>
    <class kind="class">SystemAudioVolume</class>
  </compound>
  <compound kind="file">
    <name>juce_SystemClipboard.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_gui_basics/keyboard/</path>
    <filename>juce__SystemClipboard_8h</filename>
    <class kind="class">SystemClipboard</class>
  </compound>
  <compound kind="file">
    <name>juce_SystemStats.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_core/system/</path>
    <filename>juce__SystemStats_8h</filename>
    <class kind="class">SystemStats</class>
  </compound>
  <compound kind="file">
    <name>juce_SystemTrayIconComponent.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_gui_extra/misc/</path>
    <filename>juce__SystemTrayIconComponent_8h</filename>
    <class kind="class">SystemTrayIconComponent</class>
  </compound>
  <compound kind="file">
    <name>juce_TabbedButtonBar.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_gui_basics/layout/</path>
    <filename>juce__TabbedButtonBar_8h</filename>
    <class kind="class">TabBarButton</class>
    <class kind="class">TabbedButtonBar</class>
    <class kind="struct">TabbedButtonBar::LookAndFeelMethods</class>
  </compound>
  <compound kind="file">
    <name>juce_TabbedComponent.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_gui_basics/layout/</path>
    <filename>juce__TabbedComponent_8h</filename>
    <class kind="class">TabbedComponent</class>
  </compound>
  <compound kind="file">
    <name>juce_TableHeaderComponent.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_gui_basics/widgets/</path>
    <filename>juce__TableHeaderComponent_8h</filename>
    <class kind="class">TableHeaderComponent</class>
    <class kind="class">TableHeaderComponent::Listener</class>
    <class kind="struct">TableHeaderComponent::LookAndFeelMethods</class>
    <member kind="typedef">
      <type>TableHeaderComponent::Listener</type>
      <name>TableHeaderListener</name>
      <anchorfile>juce__TableHeaderComponent_8h.html</anchorfile>
      <anchor>ab85495eafcdcfa2d8b0cd9fc7d7d1096</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>juce_TableListBox.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_gui_basics/widgets/</path>
    <filename>juce__TableListBox_8h</filename>
    <class kind="class">TableListBoxModel</class>
    <class kind="class">TableListBox</class>
  </compound>
  <compound kind="file">
    <name>juce_TargetPlatform.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_core/system/</path>
    <filename>juce__TargetPlatform_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>JUCE_ANDROID</name>
      <anchorfile>juce__TargetPlatform_8h.html</anchorfile>
      <anchor>a6fda198266d9276b5c331071dd0ba014</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>JUCE_DEBUG</name>
      <anchorfile>juce__TargetPlatform_8h.html</anchorfile>
      <anchor>a5f55c9671da5cfdf8377deba11c06044</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>JUCE_BIG_ENDIAN</name>
      <anchorfile>juce__TargetPlatform_8h.html</anchorfile>
      <anchor>ae7c65e2fe39a04d255d8c723668969bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>JUCE_32BIT</name>
      <anchorfile>juce__TargetPlatform_8h.html</anchorfile>
      <anchor>a298f3b24ad0e105ede05218dc834dd24</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>JUCE_INTEL</name>
      <anchorfile>juce__TargetPlatform_8h.html</anchorfile>
      <anchor>af1c7ad8bdab01aa04e43c5f431faf08c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>JUCE_BIG_ENDIAN</name>
      <anchorfile>juce__TargetPlatform_8h.html</anchorfile>
      <anchor>ae7c65e2fe39a04d255d8c723668969bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>JUCE_32BIT</name>
      <anchorfile>juce__TargetPlatform_8h.html</anchorfile>
      <anchor>a298f3b24ad0e105ede05218dc834dd24</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>juce_TemporaryFile.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_core/files/</path>
    <filename>juce__TemporaryFile_8h</filename>
    <class kind="class">TemporaryFile</class>
  </compound>
  <compound kind="file">
    <name>juce_TextButton.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_gui_basics/buttons/</path>
    <filename>juce__TextButton_8h</filename>
    <class kind="class">TextButton</class>
  </compound>
  <compound kind="file">
    <name>juce_TextDiff.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_core/text/</path>
    <filename>juce__TextDiff_8h</filename>
    <class kind="class">TextDiff</class>
    <class kind="struct">TextDiff::Change</class>
  </compound>
  <compound kind="file">
    <name>juce_TextDragAndDropTarget.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_gui_basics/mouse/</path>
    <filename>juce__TextDragAndDropTarget_8h</filename>
    <class kind="class">TextDragAndDropTarget</class>
  </compound>
  <compound kind="file">
    <name>juce_TextEditor.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_gui_basics/widgets/</path>
    <filename>juce__TextEditor_8h</filename>
    <class kind="class">TextEditor</class>
    <class kind="class">TextEditor::Listener</class>
    <class kind="class">TextEditor::InputFilter</class>
    <class kind="class">TextEditor::LengthAndCharacterRestriction</class>
    <class kind="struct">TextEditor::LookAndFeelMethods</class>
    <member kind="typedef">
      <type>TextEditor::Listener</type>
      <name>TextEditorListener</name>
      <anchorfile>juce__TextEditor_8h.html</anchorfile>
      <anchor>a5c863c0182e29eaf0ed83f2427572913</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>juce_TextEditorKeyMapper.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_gui_basics/keyboard/</path>
    <filename>juce__TextEditorKeyMapper_8h</filename>
    <class kind="struct">TextEditorKeyMapper</class>
  </compound>
  <compound kind="file">
    <name>juce_TextInputTarget.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_gui_basics/keyboard/</path>
    <filename>juce__TextInputTarget_8h</filename>
    <class kind="class">TextInputTarget</class>
  </compound>
  <compound kind="file">
    <name>juce_TextLayout.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_graphics/fonts/</path>
    <filename>juce__TextLayout_8h</filename>
    <class kind="class">TextLayout</class>
    <class kind="class">TextLayout::Glyph</class>
    <class kind="class">TextLayout::Run</class>
    <class kind="class">TextLayout::Line</class>
  </compound>
  <compound kind="file">
    <name>juce_TextPropertyComponent.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_gui_basics/properties/</path>
    <filename>juce__TextPropertyComponent_8h</filename>
    <class kind="class">TextPropertyComponent</class>
    <class kind="class">TextPropertyComponent::Listener</class>
  </compound>
  <compound kind="file">
    <name>juce_Thread.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_core/threads/</path>
    <filename>juce__Thread_8h</filename>
    <class kind="class">Thread</class>
  </compound>
  <compound kind="file">
    <name>juce_ThreadLocalValue.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_core/threads/</path>
    <filename>juce__ThreadLocalValue_8h</filename>
    <class kind="class">ThreadLocalValue</class>
    <member kind="define">
      <type>#define</type>
      <name>JUCE_NO_COMPILER_THREAD_LOCAL</name>
      <anchorfile>juce__ThreadLocalValue_8h.html</anchorfile>
      <anchor>ace6df6344d7f87952a787d9c35dd159d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>juce_ThreadPool.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_core/threads/</path>
    <filename>juce__ThreadPool_8h</filename>
    <class kind="class">ThreadPoolJob</class>
    <class kind="class">ThreadPool</class>
    <class kind="class">ThreadPool::JobSelector</class>
  </compound>
  <compound kind="file">
    <name>juce_ThreadWithProgressWindow.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_gui_basics/windows/</path>
    <filename>juce__ThreadWithProgressWindow_8h</filename>
    <class kind="class">ThreadWithProgressWindow</class>
  </compound>
  <compound kind="file">
    <name>juce_Time.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_core/time/</path>
    <filename>juce__Time_8h</filename>
    <class kind="class">Time</class>
    <member kind="function">
      <type>JUCE_API Time</type>
      <name>operator+</name>
      <anchorfile>juce__Time_8h.html</anchorfile>
      <anchor>a1d9968d0de43cd44dbe20338a747acb3</anchor>
      <arglist>(Time time, RelativeTime delta) noexcept</arglist>
    </member>
    <member kind="function">
      <type>JUCE_API Time</type>
      <name>operator+</name>
      <anchorfile>juce__Time_8h.html</anchorfile>
      <anchor>a9082a5d057d1eff873d1ea14b2f3575c</anchor>
      <arglist>(RelativeTime delta, Time time) noexcept</arglist>
    </member>
    <member kind="function">
      <type>JUCE_API Time</type>
      <name>operator-</name>
      <anchorfile>juce__Time_8h.html</anchorfile>
      <anchor>ac28452274b23e235e3e0c37e3b2e2e4a</anchor>
      <arglist>(Time time, RelativeTime delta) noexcept</arglist>
    </member>
    <member kind="function">
      <type>JUCE_API const RelativeTime</type>
      <name>operator-</name>
      <anchorfile>juce__Time_8h.html</anchorfile>
      <anchor>aebe98a152d30464b107994dab10853fe</anchor>
      <arglist>(Time time1, Time time2) noexcept</arglist>
    </member>
    <member kind="function">
      <type>JUCE_API bool</type>
      <name>operator==</name>
      <anchorfile>juce__Time_8h.html</anchorfile>
      <anchor>ac99c05f54b72278b37838e6b4d861b6c</anchor>
      <arglist>(Time time1, Time time2) noexcept</arglist>
    </member>
    <member kind="function">
      <type>JUCE_API bool</type>
      <name>operator!=</name>
      <anchorfile>juce__Time_8h.html</anchorfile>
      <anchor>a7062bf31e4e5ec9d216ccf66fb416166</anchor>
      <arglist>(Time time1, Time time2) noexcept</arglist>
    </member>
    <member kind="function">
      <type>JUCE_API bool</type>
      <name>operator&lt;</name>
      <anchorfile>juce__Time_8h.html</anchorfile>
      <anchor>a61acd51836dd14ee05b39f874db0c3ab</anchor>
      <arglist>(Time time1, Time time2) noexcept</arglist>
    </member>
    <member kind="function">
      <type>JUCE_API bool</type>
      <name>operator&lt;=</name>
      <anchorfile>juce__Time_8h.html</anchorfile>
      <anchor>acd093501c77342ea44db96115a362932</anchor>
      <arglist>(Time time1, Time time2) noexcept</arglist>
    </member>
    <member kind="function">
      <type>JUCE_API bool</type>
      <name>operator&gt;</name>
      <anchorfile>juce__Time_8h.html</anchorfile>
      <anchor>ad8c064add5ccb84506c2b679a8b237a3</anchor>
      <arglist>(Time time1, Time time2) noexcept</arglist>
    </member>
    <member kind="function">
      <type>JUCE_API bool</type>
      <name>operator&gt;=</name>
      <anchorfile>juce__Time_8h.html</anchorfile>
      <anchor>a632a619228ac8b627536d9693419f8c5</anchor>
      <arglist>(Time time1, Time time2) noexcept</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>juce_Timer.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_events/timers/</path>
    <filename>juce__Timer_8h</filename>
    <class kind="class">Timer</class>
  </compound>
  <compound kind="file">
    <name>juce_TimeSliceThread.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_core/threads/</path>
    <filename>juce__TimeSliceThread_8h</filename>
    <class kind="class">TimeSliceClient</class>
    <class kind="class">TimeSliceThread</class>
  </compound>
  <compound kind="file">
    <name>juce_ToggleButton.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_gui_basics/buttons/</path>
    <filename>juce__ToggleButton_8h</filename>
    <class kind="class">ToggleButton</class>
  </compound>
  <compound kind="file">
    <name>juce_ToneGeneratorAudioSource.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_audio_basics/sources/</path>
    <filename>juce__ToneGeneratorAudioSource_8h</filename>
    <class kind="class">ToneGeneratorAudioSource</class>
  </compound>
  <compound kind="file">
    <name>juce_Toolbar.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_gui_basics/widgets/</path>
    <filename>juce__Toolbar_8h</filename>
    <class kind="class">Toolbar</class>
    <class kind="struct">Toolbar::LookAndFeelMethods</class>
  </compound>
  <compound kind="file">
    <name>juce_ToolbarButton.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_gui_basics/buttons/</path>
    <filename>juce__ToolbarButton_8h</filename>
    <class kind="class">ToolbarButton</class>
  </compound>
  <compound kind="file">
    <name>juce_ToolbarItemComponent.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_gui_basics/widgets/</path>
    <filename>juce__ToolbarItemComponent_8h</filename>
    <class kind="class">ToolbarItemComponent</class>
  </compound>
  <compound kind="file">
    <name>juce_ToolbarItemFactory.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_gui_basics/widgets/</path>
    <filename>juce__ToolbarItemFactory_8h</filename>
    <class kind="class">ToolbarItemFactory</class>
  </compound>
  <compound kind="file">
    <name>juce_ToolbarItemPalette.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_gui_basics/widgets/</path>
    <filename>juce__ToolbarItemPalette_8h</filename>
    <class kind="class">ToolbarItemPalette</class>
  </compound>
  <compound kind="file">
    <name>juce_TooltipClient.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_gui_basics/mouse/</path>
    <filename>juce__TooltipClient_8h</filename>
    <class kind="class">TooltipClient</class>
    <class kind="class">SettableTooltipClient</class>
  </compound>
  <compound kind="file">
    <name>juce_TooltipWindow.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_gui_basics/windows/</path>
    <filename>juce__TooltipWindow_8h</filename>
    <class kind="class">TooltipWindow</class>
    <class kind="struct">TooltipWindow::LookAndFeelMethods</class>
  </compound>
  <compound kind="file">
    <name>juce_TopLevelWindow.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_gui_basics/windows/</path>
    <filename>juce__TopLevelWindow_8h</filename>
    <class kind="class">TopLevelWindow</class>
  </compound>
  <compound kind="file">
    <name>juce_Topology.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_blocks_basics/topology/</path>
    <filename>juce__Topology_8h</filename>
    <class kind="struct">BlockDeviceConnection</class>
    <class kind="struct">BlockTopology</class>
  </compound>
  <compound kind="file">
    <name>juce_TopologySource.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_blocks_basics/topology/</path>
    <filename>juce__TopologySource_8h</filename>
    <class kind="class">TopologySource</class>
    <class kind="struct">TopologySource::Listener</class>
  </compound>
  <compound kind="file">
    <name>juce_TouchList.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_blocks_basics/blocks/</path>
    <filename>juce__TouchList_8h</filename>
    <class kind="class">TouchList</class>
    <class kind="struct">TouchList::TouchEntry</class>
  </compound>
  <compound kind="file">
    <name>juce_TouchSurface.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_blocks_basics/blocks/</path>
    <filename>juce__TouchSurface_8h</filename>
    <class kind="class">TouchSurface</class>
    <class kind="struct">TouchSurface::Touch</class>
    <class kind="struct">TouchSurface::Listener</class>
  </compound>
  <compound kind="file">
    <name>juce_TracktionMarketplaceStatus.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_tracktion_marketplace/marketplace/</path>
    <filename>juce__TracktionMarketplaceStatus_8h</filename>
    <class kind="class">TracktionMarketplaceStatus</class>
  </compound>
  <compound kind="file">
    <name>juce_TreeView.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_gui_basics/widgets/</path>
    <filename>juce__TreeView_8h</filename>
    <class kind="class">TreeViewItem</class>
    <class kind="class">TreeViewItem::OpennessRestorer</class>
    <class kind="class">TreeView</class>
    <class kind="struct">TreeView::LookAndFeelMethods</class>
  </compound>
  <compound kind="file">
    <name>juce_Typeface.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_graphics/fonts/</path>
    <filename>juce__Typeface_8h</filename>
    <class kind="class">Typeface</class>
  </compound>
  <compound kind="file">
    <name>juce_UIViewComponent.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_gui_extra/embedding/</path>
    <filename>juce__UIViewComponent_8h</filename>
    <class kind="class">UIViewComponent</class>
  </compound>
  <compound kind="file">
    <name>juce_UndoableAction.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_data_structures/undomanager/</path>
    <filename>juce__UndoableAction_8h</filename>
    <class kind="class">UndoableAction</class>
  </compound>
  <compound kind="file">
    <name>juce_UndoManager.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_data_structures/undomanager/</path>
    <filename>juce__UndoManager_8h</filename>
    <class kind="class">UndoManager</class>
  </compound>
  <compound kind="file">
    <name>juce_UnitTest.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_core/unit_tests/</path>
    <filename>juce__UnitTest_8h</filename>
    <class kind="class">UnitTest</class>
    <class kind="class">UnitTestRunner</class>
    <class kind="struct">UnitTestRunner::TestResult</class>
    <member kind="define">
      <type>#define</type>
      <name>expectDoesNotThrow</name>
      <anchorfile>juce__UnitTest_8h.html</anchorfile>
      <anchor>a108369a73746eca6742100e413ed7e9c</anchor>
      <arglist>(expr)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>expectThrows</name>
      <anchorfile>juce__UnitTest_8h.html</anchorfile>
      <anchor>aa204d9cf44beea9c7480dfab1c526158</anchor>
      <arglist>(expr)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>expectThrowsType</name>
      <anchorfile>juce__UnitTest_8h.html</anchorfile>
      <anchor>ac75dc7b80ef6c1bc768059b3f6372103</anchor>
      <arglist>(expr, type)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>juce_URL.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_core/network/</path>
    <filename>juce__URL_8h</filename>
    <class kind="class">URL</class>
    <class kind="class">URL::DownloadTask</class>
    <class kind="struct">URL::DownloadTask::Listener</class>
  </compound>
  <compound kind="file">
    <name>juce_Uuid.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_core/misc/</path>
    <filename>juce__Uuid_8h</filename>
    <class kind="class">Uuid</class>
  </compound>
  <compound kind="file">
    <name>juce_Value.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_data_structures/values/</path>
    <filename>juce__Value_8h</filename>
    <class kind="class">Value</class>
    <class kind="class">Value::Listener</class>
    <class kind="class">Value::ValueSource</class>
    <member kind="typedef">
      <type>Value::Listener</type>
      <name>ValueListener</name>
      <anchorfile>juce__Value_8h.html</anchorfile>
      <anchor>a2cfaae906f9f1deed5ed703d8e63d613</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>OutputStream &amp;JUCE_CALLTYPE</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>juce__Value_8h.html</anchorfile>
      <anchor>a71902c21a1f95e3f42b045302be1fa6d</anchor>
      <arglist>(OutputStream &amp;, const Value &amp;)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>juce_ValueTree.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_data_structures/values/</path>
    <filename>juce__ValueTree_8h</filename>
    <class kind="class">ValueTree</class>
    <class kind="struct">ValueTree::Iterator</class>
    <class kind="class">ValueTree::Listener</class>
  </compound>
  <compound kind="file">
    <name>juce_ValueTreeSynchroniser.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_data_structures/values/</path>
    <filename>juce__ValueTreeSynchroniser_8h</filename>
    <class kind="class">ValueTreeSynchroniser</class>
  </compound>
  <compound kind="file">
    <name>juce_Variant.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_core/containers/</path>
    <filename>juce__Variant_8h</filename>
    <class kind="class">var</class>
    <class kind="struct">var::NativeFunctionArgs</class>
    <class kind="struct">VariantConverter</class>
    <class kind="struct">VariantConverter&lt; String &gt;</class>
    <member kind="function">
      <type>JUCE_API bool</type>
      <name>operator==</name>
      <anchorfile>juce__Variant_8h.html</anchorfile>
      <anchor>ab4b83937cedb23e96fd4590a08e2b7a7</anchor>
      <arglist>(const var &amp;, const var &amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>JUCE_API bool</type>
      <name>operator!=</name>
      <anchorfile>juce__Variant_8h.html</anchorfile>
      <anchor>ae1260564dd5dd8e181cfac86bec046f5</anchor>
      <arglist>(const var &amp;, const var &amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>JUCE_API bool</type>
      <name>operator==</name>
      <anchorfile>juce__Variant_8h.html</anchorfile>
      <anchor>a8512deaef9b5f1f12a8a45403a72e508</anchor>
      <arglist>(const var &amp;, const String &amp;)</arglist>
    </member>
    <member kind="function">
      <type>JUCE_API bool</type>
      <name>operator!=</name>
      <anchorfile>juce__Variant_8h.html</anchorfile>
      <anchor>a4672f12ca2fdc31e9ca7188101d35a95</anchor>
      <arglist>(const var &amp;, const String &amp;)</arglist>
    </member>
    <member kind="function">
      <type>JUCE_API bool</type>
      <name>operator==</name>
      <anchorfile>juce__Variant_8h.html</anchorfile>
      <anchor>a48fb19d379d327812bd68823c7ccf694</anchor>
      <arglist>(const var &amp;, const char *)</arglist>
    </member>
    <member kind="function">
      <type>JUCE_API bool</type>
      <name>operator!=</name>
      <anchorfile>juce__Variant_8h.html</anchorfile>
      <anchor>a5be7dbc7fd3b5935ad0aca0d8d39e425</anchor>
      <arglist>(const var &amp;, const char *)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>juce_Vector3D.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_opengl/geometry/</path>
    <filename>juce__Vector3D_8h</filename>
    <class kind="class">Vector3D</class>
  </compound>
  <compound kind="file">
    <name>juce_Viewport.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_gui_basics/layout/</path>
    <filename>juce__Viewport_8h</filename>
    <class kind="class">Viewport</class>
  </compound>
  <compound kind="file">
    <name>juce_VST3Common.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_audio_processors/format_types/</path>
    <filename>juce__VST3Common_8h</filename>
    <class kind="class">ComSmartPtr</class>
    <class kind="class">MidiEventList</class>
    <class kind="struct">VST3BufferExchange</class>
    <class kind="struct">VST3FloatAndDoubleBusMapCompositeHelper</class>
    <class kind="struct">VST3FloatAndDoubleBusMapComposite</class>
    <class kind="struct">VST3FloatAndDoubleBusMapCompositeHelper&lt; float &gt;</class>
    <class kind="struct">VST3FloatAndDoubleBusMapCompositeHelper&lt; double &gt;</class>
    <member kind="define">
      <type>#define</type>
      <name>JUCE_DECLARE_VST3_COM_REF_METHODS</name>
      <anchorfile>juce__VST3Common_8h.html</anchorfile>
      <anchor>a52081291a153c4ae5db62900492eacf8</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>JUCE_DECLARE_VST3_COM_QUERY_METHODS</name>
      <anchorfile>juce__VST3Common_8h.html</anchorfile>
      <anchor>ac28ed770da13aab54ddf2af4b4b8d754</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TEST_FOR_AND_RETURN_IF_VALID</name>
      <anchorfile>juce__VST3Common_8h.html</anchorfile>
      <anchor>a8ac5e0cbb86f5e8a2fb2e5273b65798e</anchor>
      <arglist>(iidToTest, ClassType)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TEST_FOR_COMMON_BASE_AND_RETURN_IF_VALID</name>
      <anchorfile>juce__VST3Common_8h.html</anchorfile>
      <anchor>aa30524f64f5a4135a7977082490db9a4</anchor>
      <arglist>(iidToTest, CommonClassType, SourceClassType)</arglist>
    </member>
    <member kind="function">
      <type>juce::String</type>
      <name>toString</name>
      <anchorfile>juce__VST3Common_8h.html</anchorfile>
      <anchor>a8f3527e6704741db4e2a281817d02522</anchor>
      <arglist>(const Steinberg::char8 *string) noexcept</arglist>
    </member>
    <member kind="function">
      <type>juce::String</type>
      <name>toString</name>
      <anchorfile>juce__VST3Common_8h.html</anchorfile>
      <anchor>a3ba882fea4c8f4928c48c0bd8e15d055</anchor>
      <arglist>(const Steinberg::char16 *string) noexcept</arglist>
    </member>
    <member kind="function">
      <type>juce::String</type>
      <name>toString</name>
      <anchorfile>juce__VST3Common_8h.html</anchorfile>
      <anchor>a89e560cc2b7d563461ce38e9c4ca9274</anchor>
      <arglist>(const Steinberg::UString128 &amp;string) noexcept</arglist>
    </member>
    <member kind="function">
      <type>juce::String</type>
      <name>toString</name>
      <anchorfile>juce__VST3Common_8h.html</anchorfile>
      <anchor>a5df5d91d232cd2905ea11d3100d726dc</anchor>
      <arglist>(const Steinberg::UString256 &amp;string) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>toString128</name>
      <anchorfile>juce__VST3Common_8h.html</anchorfile>
      <anchor>a7d893b946f7a4d21175f18fe3f1b5929</anchor>
      <arglist>(Steinberg::Vst::String128 result, const char *source)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>toString128</name>
      <anchorfile>juce__VST3Common_8h.html</anchorfile>
      <anchor>a9853687ef920bbaa791abbe7e6528c34</anchor>
      <arglist>(Steinberg::Vst::String128 result, const juce::String &amp;source)</arglist>
    </member>
    <member kind="function">
      <type>Steinberg::Vst::TChar *</type>
      <name>toString</name>
      <anchorfile>juce__VST3Common_8h.html</anchorfile>
      <anchor>a472a393c44f59ce51b74f5d8ebb3bdf3</anchor>
      <arglist>(const juce::String &amp;source) noexcept</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>juce_VST3Headers.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_audio_processors/format_types/</path>
    <filename>juce__VST3Headers_8h</filename>
    <namespace>Steinberg</namespace>
    <member kind="define">
      <type>#define</type>
      <name>DEVELOPMENT</name>
      <anchorfile>juce__VST3Headers_8h.html</anchorfile>
      <anchor>a70bcb76882aaa86901adf5030a8a8d44</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>juce_VST3PluginFormat.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_audio_processors/format_types/</path>
    <filename>juce__VST3PluginFormat_8h</filename>
    <class kind="class">VST3PluginFormat</class>
  </compound>
  <compound kind="file">
    <name>juce_VSTCallbackHandler.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_audio_plugin_client/VST/</path>
    <filename>juce__VSTCallbackHandler_8h</filename>
    <class kind="struct">VSTCallbackHandler</class>
  </compound>
  <compound kind="file">
    <name>juce_VSTCommon.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_audio_processors/format_types/</path>
    <filename>juce__VSTCommon_8h</filename>
    <class kind="struct">SpeakerMappings</class>
    <class kind="struct">SpeakerMappings::Mapping</class>
  </compound>
  <compound kind="file">
    <name>juce_VSTInterface.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_audio_processors/format_types/</path>
    <filename>juce__VSTInterface_8h</filename>
    <class kind="struct">VstEffectInterface</class>
    <class kind="struct">VstEditorBounds</class>
    <class kind="struct">VstPinInfo</class>
    <class kind="struct">VstEvent</class>
    <class kind="struct">VstEventBlock</class>
    <class kind="struct">VstMidiEvent</class>
    <class kind="struct">VstSysExEvent</class>
    <class kind="struct">VstTimingInformation</class>
    <class kind="struct">VstIndividualSpeakerInfo</class>
    <class kind="struct">VstSpeakerConfiguration</class>
    <member kind="define">
      <type>#define</type>
      <name>VSTINTERFACECALL</name>
      <anchorfile>juce__VSTInterface_8h.html</anchorfile>
      <anchor>a83ccabb469697b2416ffb6a7451da73f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>int32</type>
      <name>op</name>
      <anchorfile>juce__VSTInterface_8h.html</anchorfile>
      <anchor>a6b997c48cf4a35136cd340327269804c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>int32 int32</type>
      <name>index</name>
      <anchorfile>juce__VSTInterface_8h.html</anchorfile>
      <anchor>ab57c9d4e7c6d9726b6ea1da3521e4792</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>int32 int32 pointer_sized_int</type>
      <name>value</name>
      <anchorfile>juce__VSTInterface_8h.html</anchorfile>
      <anchor>abfa595d43bf960020c2afada3d371389</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>int32 int32 pointer_sized_int void *</type>
      <name>ptr</name>
      <anchorfile>juce__VSTInterface_8h.html</anchorfile>
      <anchor>a1cc4293f7e53d33b1259f7e4ae690ad2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>int32 int32 pointer_sized_int void float</type>
      <name>opt</name>
      <anchorfile>juce__VSTInterface_8h.html</anchorfile>
      <anchor>a86c8ab0c81c155375327ea3cce72a7c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>VstEffectInterfaceFlags</name>
      <anchorfile>juce__VSTInterface_8h.html</anchorfile>
      <anchor>a5b9075cb1c502b45ea05a52c32a3c4c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>vstEffectFlagHasEditor</name>
      <anchorfile>juce__VSTInterface_8h.html</anchorfile>
      <anchor>a5b9075cb1c502b45ea05a52c32a3c4c5a01984b87e136cb7430beb45832e70da0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>vstEffectFlagInplaceAudio</name>
      <anchorfile>juce__VSTInterface_8h.html</anchorfile>
      <anchor>a5b9075cb1c502b45ea05a52c32a3c4c5a0b2198d58a23bbae5a10d25834049688</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>vstEffectFlagDataInChunks</name>
      <anchorfile>juce__VSTInterface_8h.html</anchorfile>
      <anchor>a5b9075cb1c502b45ea05a52c32a3c4c5abd7feed0a57aee1b0bf48f97779f0879</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>vstEffectFlagIsSynth</name>
      <anchorfile>juce__VSTInterface_8h.html</anchorfile>
      <anchor>a5b9075cb1c502b45ea05a52c32a3c4c5a47d3432b7bb364913960f3f68eff40e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>vstEffectFlagInplaceDoubleAudio</name>
      <anchorfile>juce__VSTInterface_8h.html</anchorfile>
      <anchor>a5b9075cb1c502b45ea05a52c32a3c4c5a9dc06351a430483f79240951749a3ef0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>VstHostToPlugInOpcodes</name>
      <anchorfile>juce__VSTInterface_8h.html</anchorfile>
      <anchor>a3f29e0dd57930320dee5ed3bd059a3d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>plugInOpcodeOpen</name>
      <anchorfile>juce__VSTInterface_8h.html</anchorfile>
      <anchor>a3f29e0dd57930320dee5ed3bd059a3d2a7dd6376c8280554225a0abf1276ac870</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>plugInOpcodeClose</name>
      <anchorfile>juce__VSTInterface_8h.html</anchorfile>
      <anchor>a3f29e0dd57930320dee5ed3bd059a3d2ae8fbc1c0aa52961c20d3ee064fd24f6d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>plugInOpcodeSetCurrentProgram</name>
      <anchorfile>juce__VSTInterface_8h.html</anchorfile>
      <anchor>a3f29e0dd57930320dee5ed3bd059a3d2ac44acd24cd293bdcb48e16a423d7f05f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>plugInOpcodeGetCurrentProgram</name>
      <anchorfile>juce__VSTInterface_8h.html</anchorfile>
      <anchor>a3f29e0dd57930320dee5ed3bd059a3d2aa24495c2b20d204f37f11747934e5820</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>plugInOpcodeSetCurrentProgramName</name>
      <anchorfile>juce__VSTInterface_8h.html</anchorfile>
      <anchor>a3f29e0dd57930320dee5ed3bd059a3d2a1775ece9dde075264fb627cd0536cb42</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>plugInOpcodeGetCurrentProgramName</name>
      <anchorfile>juce__VSTInterface_8h.html</anchorfile>
      <anchor>a3f29e0dd57930320dee5ed3bd059a3d2a8742a49c1777650deaebdd4e00d5dc24</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>plugInOpcodeGetParameterLabel</name>
      <anchorfile>juce__VSTInterface_8h.html</anchorfile>
      <anchor>a3f29e0dd57930320dee5ed3bd059a3d2a0f44465df57bce9a1d5263f5efe7b32f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>plugInOpcodeGetParameterText</name>
      <anchorfile>juce__VSTInterface_8h.html</anchorfile>
      <anchor>a3f29e0dd57930320dee5ed3bd059a3d2a260f6be89057161ab2c1cfcc7cc1e51d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>plugInOpcodeGetParameterName</name>
      <anchorfile>juce__VSTInterface_8h.html</anchorfile>
      <anchor>a3f29e0dd57930320dee5ed3bd059a3d2a57d161bbab49dda03a5f9c6919e0d319</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>plugInOpcodeSetSampleRate</name>
      <anchorfile>juce__VSTInterface_8h.html</anchorfile>
      <anchor>a3f29e0dd57930320dee5ed3bd059a3d2a037c6d74f60c55aa9ada64900c889522</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>plugInOpcodeSetBlockSize</name>
      <anchorfile>juce__VSTInterface_8h.html</anchorfile>
      <anchor>a3f29e0dd57930320dee5ed3bd059a3d2aacdd6273a74752f3e1635293437ce608</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>plugInOpcodeResumeSuspend</name>
      <anchorfile>juce__VSTInterface_8h.html</anchorfile>
      <anchor>a3f29e0dd57930320dee5ed3bd059a3d2a87ad623eabc99efd86af42b5989c9ac9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>plugInOpcodeGetEditorBounds</name>
      <anchorfile>juce__VSTInterface_8h.html</anchorfile>
      <anchor>a3f29e0dd57930320dee5ed3bd059a3d2a33db05ab02de14d555215165156f6621</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>plugInOpcodeOpenEditor</name>
      <anchorfile>juce__VSTInterface_8h.html</anchorfile>
      <anchor>a3f29e0dd57930320dee5ed3bd059a3d2ab57fc33e89cb7a6b95906a980581ea8a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>plugInOpcodeCloseEditor</name>
      <anchorfile>juce__VSTInterface_8h.html</anchorfile>
      <anchor>a3f29e0dd57930320dee5ed3bd059a3d2ab5a213ac66b4a95da5c01ffc3a85869b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>plugInOpcodeDrawEditor</name>
      <anchorfile>juce__VSTInterface_8h.html</anchorfile>
      <anchor>a3f29e0dd57930320dee5ed3bd059a3d2a5b55a708375951baf05ac7a898a05b4c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>plugInOpcodeGetMouse</name>
      <anchorfile>juce__VSTInterface_8h.html</anchorfile>
      <anchor>a3f29e0dd57930320dee5ed3bd059a3d2a9607ebb32e04e53b5134321c8b35d9e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>plugInOpcodeEditorIdle</name>
      <anchorfile>juce__VSTInterface_8h.html</anchorfile>
      <anchor>a3f29e0dd57930320dee5ed3bd059a3d2a0992e8f20210d29d3b934f9a16372ff2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>plugInOpcodeeffEditorTop</name>
      <anchorfile>juce__VSTInterface_8h.html</anchorfile>
      <anchor>a3f29e0dd57930320dee5ed3bd059a3d2a2b9aba6033d9745dcc77bd9403b960d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>plugInOpcodeSleepEditor</name>
      <anchorfile>juce__VSTInterface_8h.html</anchorfile>
      <anchor>a3f29e0dd57930320dee5ed3bd059a3d2ac5c59529214cec7ead15454d4b588d32</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>plugInOpcodeIdentify</name>
      <anchorfile>juce__VSTInterface_8h.html</anchorfile>
      <anchor>a3f29e0dd57930320dee5ed3bd059a3d2a8ac6055e6f5d360dd6f8b1c4bc5d5e19</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>plugInOpcodeGetData</name>
      <anchorfile>juce__VSTInterface_8h.html</anchorfile>
      <anchor>a3f29e0dd57930320dee5ed3bd059a3d2aca8f541bab982ba432543ce7dd3ffbeb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>plugInOpcodeSetData</name>
      <anchorfile>juce__VSTInterface_8h.html</anchorfile>
      <anchor>a3f29e0dd57930320dee5ed3bd059a3d2ac23efc491e91e2e90648cb86b7ddb0a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>plugInOpcodePreAudioProcessingEvents</name>
      <anchorfile>juce__VSTInterface_8h.html</anchorfile>
      <anchor>a3f29e0dd57930320dee5ed3bd059a3d2acfe4588796b3d2f62ede72cb84ea1e29</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>plugInOpcodeIsParameterAutomatable</name>
      <anchorfile>juce__VSTInterface_8h.html</anchorfile>
      <anchor>a3f29e0dd57930320dee5ed3bd059a3d2ad5caf7b8a64aafb735d2201f06f2fb85</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>plugInOpcodeParameterValueForText</name>
      <anchorfile>juce__VSTInterface_8h.html</anchorfile>
      <anchor>a3f29e0dd57930320dee5ed3bd059a3d2a6582c0f023c6dc4bfa3f9169a4ba710c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>plugInOpcodeGetProgramName</name>
      <anchorfile>juce__VSTInterface_8h.html</anchorfile>
      <anchor>a3f29e0dd57930320dee5ed3bd059a3d2a88abdef5baf823019562548415f5366e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>plugInOpcodeConnectInput</name>
      <anchorfile>juce__VSTInterface_8h.html</anchorfile>
      <anchor>a3f29e0dd57930320dee5ed3bd059a3d2ab5c2a1c56dce310eed48ca134fb7fb4e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>plugInOpcodeConnectOutput</name>
      <anchorfile>juce__VSTInterface_8h.html</anchorfile>
      <anchor>a3f29e0dd57930320dee5ed3bd059a3d2a0ba189d2b5ab8769a160ed6649d428e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>plugInOpcodeGetInputPinProperties</name>
      <anchorfile>juce__VSTInterface_8h.html</anchorfile>
      <anchor>a3f29e0dd57930320dee5ed3bd059a3d2a569b50143c99d088f90d73ace35374cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>plugInOpcodeGetOutputPinProperties</name>
      <anchorfile>juce__VSTInterface_8h.html</anchorfile>
      <anchor>a3f29e0dd57930320dee5ed3bd059a3d2a95f7f372b10be7f0f983b2c5212b2497</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>plugInOpcodeGetPlugInCategory</name>
      <anchorfile>juce__VSTInterface_8h.html</anchorfile>
      <anchor>a3f29e0dd57930320dee5ed3bd059a3d2ae211d29c214144fc0e31c320d5194a76</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>plugInOpcodeSetSpeakerConfiguration</name>
      <anchorfile>juce__VSTInterface_8h.html</anchorfile>
      <anchor>a3f29e0dd57930320dee5ed3bd059a3d2a60c426f8764711d1cac4a9b4e89c3256</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>plugInOpcodeSetBypass</name>
      <anchorfile>juce__VSTInterface_8h.html</anchorfile>
      <anchor>a3f29e0dd57930320dee5ed3bd059a3d2a4fc1f6462f1d7eccc5b38ebaec5fb36d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>plugInOpcodeGetPlugInName</name>
      <anchorfile>juce__VSTInterface_8h.html</anchorfile>
      <anchor>a3f29e0dd57930320dee5ed3bd059a3d2a63db7cd3bdd3c910d0f5db49edef8cf1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>plugInOpcodeGetManufacturerName</name>
      <anchorfile>juce__VSTInterface_8h.html</anchorfile>
      <anchor>a3f29e0dd57930320dee5ed3bd059a3d2a3cfcfe4d2f8ccc60544debe6bc7d4af7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>plugInOpcodeGetManufacturerProductName</name>
      <anchorfile>juce__VSTInterface_8h.html</anchorfile>
      <anchor>a3f29e0dd57930320dee5ed3bd059a3d2a599b3b550f57d46030edf5fc6d886693</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>plugInOpcodeGetManufacturerVersion</name>
      <anchorfile>juce__VSTInterface_8h.html</anchorfile>
      <anchor>a3f29e0dd57930320dee5ed3bd059a3d2aee7c370a2c06e340ce2df9ece759869a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>plugInOpcodeManufacturerSpecific</name>
      <anchorfile>juce__VSTInterface_8h.html</anchorfile>
      <anchor>a3f29e0dd57930320dee5ed3bd059a3d2a298c571145af2dc6a088f63de678b2c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>plugInOpcodeCanPlugInDo</name>
      <anchorfile>juce__VSTInterface_8h.html</anchorfile>
      <anchor>a3f29e0dd57930320dee5ed3bd059a3d2ab31357f9abf53d799315986668ba49fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>plugInOpcodeGetTailSize</name>
      <anchorfile>juce__VSTInterface_8h.html</anchorfile>
      <anchor>a3f29e0dd57930320dee5ed3bd059a3d2adab6e62de93d5ba993d362ab49c00117</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>plugInOpcodeIdle</name>
      <anchorfile>juce__VSTInterface_8h.html</anchorfile>
      <anchor>a3f29e0dd57930320dee5ed3bd059a3d2aec764ec75fb2092b748975f3f5509f71</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>plugInOpcodeKeyboardFocusRequired</name>
      <anchorfile>juce__VSTInterface_8h.html</anchorfile>
      <anchor>a3f29e0dd57930320dee5ed3bd059a3d2a9bbcc40f83b4dfead0a03c9a794fe971</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>plugInOpcodeGetVstInterfaceVersion</name>
      <anchorfile>juce__VSTInterface_8h.html</anchorfile>
      <anchor>a3f29e0dd57930320dee5ed3bd059a3d2aed30a2be5f8f39d988911a426ebc407d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>plugInOpcodeGetCurrentMidiProgram</name>
      <anchorfile>juce__VSTInterface_8h.html</anchorfile>
      <anchor>a3f29e0dd57930320dee5ed3bd059a3d2a1a7b77e54c5a9e3959d933f870afc320</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>plugInOpcodeGetSpeakerArrangement</name>
      <anchorfile>juce__VSTInterface_8h.html</anchorfile>
      <anchor>a3f29e0dd57930320dee5ed3bd059a3d2ad0ff683e8370825db54429939d711533</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>plugInOpcodeNextPlugInUniqueID</name>
      <anchorfile>juce__VSTInterface_8h.html</anchorfile>
      <anchor>a3f29e0dd57930320dee5ed3bd059a3d2a361d917a3fdfd5d35a79265de5e0f071</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>plugInOpcodeStartProcess</name>
      <anchorfile>juce__VSTInterface_8h.html</anchorfile>
      <anchor>a3f29e0dd57930320dee5ed3bd059a3d2abbbff09cda5600f89f7cc5399d0bc845</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>plugInOpcodeStopProcess</name>
      <anchorfile>juce__VSTInterface_8h.html</anchorfile>
      <anchor>a3f29e0dd57930320dee5ed3bd059a3d2a9f257a8cef6a0e43b9865a3470569266</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>plugInOpcodeSetNumberOfSamplesToProcess</name>
      <anchorfile>juce__VSTInterface_8h.html</anchorfile>
      <anchor>a3f29e0dd57930320dee5ed3bd059a3d2a9b4aabfa0c110c35d88fe123dabcc882</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>plugInOpcodeSetSampleFloatType</name>
      <anchorfile>juce__VSTInterface_8h.html</anchorfile>
      <anchor>a3f29e0dd57930320dee5ed3bd059a3d2a52d2c776441342bbd0859bc8a4cc7e68</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>plugInOpcodeMaximum</name>
      <anchorfile>juce__VSTInterface_8h.html</anchorfile>
      <anchor>a3f29e0dd57930320dee5ed3bd059a3d2a4729df306f51c98ab230779d84c0db5b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>VstPlugInToHostOpcodes</name>
      <anchorfile>juce__VSTInterface_8h.html</anchorfile>
      <anchor>a13942f5626bb2fcba846e559fbc42385</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>hostOpcodeParameterChanged</name>
      <anchorfile>juce__VSTInterface_8h.html</anchorfile>
      <anchor>a13942f5626bb2fcba846e559fbc42385a5a13428fa2b36212a5e07c230c9c70fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>hostOpcodeVstVersion</name>
      <anchorfile>juce__VSTInterface_8h.html</anchorfile>
      <anchor>a13942f5626bb2fcba846e559fbc42385a5ec1df75a7f94af44d6b1d6f638a29a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>hostOpcodeCurrentId</name>
      <anchorfile>juce__VSTInterface_8h.html</anchorfile>
      <anchor>a13942f5626bb2fcba846e559fbc42385aac858deb504ff3f464d19d61d6be7172</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>hostOpcodeIdle</name>
      <anchorfile>juce__VSTInterface_8h.html</anchorfile>
      <anchor>a13942f5626bb2fcba846e559fbc42385af8dff3bccc4b08b0de93bd5af65f90ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>hostOpcodePinConnected</name>
      <anchorfile>juce__VSTInterface_8h.html</anchorfile>
      <anchor>a13942f5626bb2fcba846e559fbc42385ac916c830a326c40e65582ad4e4152ad0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>hostOpcodePlugInWantsMidi</name>
      <anchorfile>juce__VSTInterface_8h.html</anchorfile>
      <anchor>a13942f5626bb2fcba846e559fbc42385acf50a80b24eadaccfba0bb3136f9342d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>hostOpcodeGetTimingInfo</name>
      <anchorfile>juce__VSTInterface_8h.html</anchorfile>
      <anchor>a13942f5626bb2fcba846e559fbc42385a83a5c7de489a3f1294f92cff2a20b7e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>hostOpcodePreAudioProcessingEvents</name>
      <anchorfile>juce__VSTInterface_8h.html</anchorfile>
      <anchor>a13942f5626bb2fcba846e559fbc42385a31c2bc2b417fe83ed7c27c887dd8d826</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>hostOpcodeSetTime</name>
      <anchorfile>juce__VSTInterface_8h.html</anchorfile>
      <anchor>a13942f5626bb2fcba846e559fbc42385a1e9538c38b8a7a39843c6fd9d8d4767d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>hostOpcodeTempoAt</name>
      <anchorfile>juce__VSTInterface_8h.html</anchorfile>
      <anchor>a13942f5626bb2fcba846e559fbc42385a119083abf075d1de775c00d3f94e7459</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>hostOpcodeGetNumberOfAutomatableParameters</name>
      <anchorfile>juce__VSTInterface_8h.html</anchorfile>
      <anchor>a13942f5626bb2fcba846e559fbc42385a5be4e888e6a5888f38816cbad37ab134</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>hostOpcodeGetParameterInterval</name>
      <anchorfile>juce__VSTInterface_8h.html</anchorfile>
      <anchor>a13942f5626bb2fcba846e559fbc42385a920ba756b8cbf2fd4df8c112eeb55eca</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>hostOpcodeIOModified</name>
      <anchorfile>juce__VSTInterface_8h.html</anchorfile>
      <anchor>a13942f5626bb2fcba846e559fbc42385aaa0a6f0095eecd1db112b64b9bc061ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>hostOpcodeNeedsIdle</name>
      <anchorfile>juce__VSTInterface_8h.html</anchorfile>
      <anchor>a13942f5626bb2fcba846e559fbc42385a552f0e44269c40ace2c108c0791f478e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>hostOpcodeWindowSize</name>
      <anchorfile>juce__VSTInterface_8h.html</anchorfile>
      <anchor>a13942f5626bb2fcba846e559fbc42385ad7189c0add3ef974690125e5c2790ae9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>hostOpcodeGetSampleRate</name>
      <anchorfile>juce__VSTInterface_8h.html</anchorfile>
      <anchor>a13942f5626bb2fcba846e559fbc42385a5c1138d1ba954d538456efae35151a80</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>hostOpcodeGetBlockSize</name>
      <anchorfile>juce__VSTInterface_8h.html</anchorfile>
      <anchor>a13942f5626bb2fcba846e559fbc42385acd665e5c075b6e91c8064f945e9685ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>hostOpcodeGetInputLatency</name>
      <anchorfile>juce__VSTInterface_8h.html</anchorfile>
      <anchor>a13942f5626bb2fcba846e559fbc42385a8748cce840cd7e2fd68cc7910df4f21c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>hostOpcodeGetOutputLatency</name>
      <anchorfile>juce__VSTInterface_8h.html</anchorfile>
      <anchor>a13942f5626bb2fcba846e559fbc42385a8e86cd606f4e901b672a7e5b97d3f45a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>hostOpcodeGetPreviousPlugIn</name>
      <anchorfile>juce__VSTInterface_8h.html</anchorfile>
      <anchor>a13942f5626bb2fcba846e559fbc42385aca8378bda7be77fc5e25dcd18ea098d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>hostOpcodeGetNextPlugIn</name>
      <anchorfile>juce__VSTInterface_8h.html</anchorfile>
      <anchor>a13942f5626bb2fcba846e559fbc42385a4326c8e5f8458b9f715b75574110985d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>hostOpcodeWillReplace</name>
      <anchorfile>juce__VSTInterface_8h.html</anchorfile>
      <anchor>a13942f5626bb2fcba846e559fbc42385a14c772890894e8fc57677e742c15e41e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>hostOpcodeGetCurrentAudioProcessingLevel</name>
      <anchorfile>juce__VSTInterface_8h.html</anchorfile>
      <anchor>a13942f5626bb2fcba846e559fbc42385a0e8625e2c4c44e0751e55825e3bb1a4c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>hostOpcodeGetAutomationState</name>
      <anchorfile>juce__VSTInterface_8h.html</anchorfile>
      <anchor>a13942f5626bb2fcba846e559fbc42385ac318e86cbfcbb1b8de720960b4942539</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>hostOpcodeOfflineStart</name>
      <anchorfile>juce__VSTInterface_8h.html</anchorfile>
      <anchor>a13942f5626bb2fcba846e559fbc42385a93281f8f747b5ef5a1fd92b4539e47e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>hostOpcodeOfflineReadSource</name>
      <anchorfile>juce__VSTInterface_8h.html</anchorfile>
      <anchor>a13942f5626bb2fcba846e559fbc42385ad3b1cb81f8760cfe19850e1cd1495fe2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>hostOpcodeOfflineWrite</name>
      <anchorfile>juce__VSTInterface_8h.html</anchorfile>
      <anchor>a13942f5626bb2fcba846e559fbc42385a3a3d89aed5acc8c8cbd3545125dee29a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>hostOpcodeOfflineGetCurrentPass</name>
      <anchorfile>juce__VSTInterface_8h.html</anchorfile>
      <anchor>a13942f5626bb2fcba846e559fbc42385a5fbcf8553a01e8561321c990786b6ff4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>hostOpcodeOfflineGetCurrentMetaPass</name>
      <anchorfile>juce__VSTInterface_8h.html</anchorfile>
      <anchor>a13942f5626bb2fcba846e559fbc42385a44a9bb92c0df4c044833c24d930f1267</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>hostOpcodeSetOutputSampleRate</name>
      <anchorfile>juce__VSTInterface_8h.html</anchorfile>
      <anchor>a13942f5626bb2fcba846e559fbc42385a0f96ef1192d2ee9e051dc88646b61e32</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>hostOpcodeGetOutputSpeakerConfiguration</name>
      <anchorfile>juce__VSTInterface_8h.html</anchorfile>
      <anchor>a13942f5626bb2fcba846e559fbc42385a181903c000fc07e82493f8be9d21fef3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>hostOpcodeGetManufacturerName</name>
      <anchorfile>juce__VSTInterface_8h.html</anchorfile>
      <anchor>a13942f5626bb2fcba846e559fbc42385aecc761e9c5591f55507d67fb1819fdf7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>hostOpcodeGetProductName</name>
      <anchorfile>juce__VSTInterface_8h.html</anchorfile>
      <anchor>a13942f5626bb2fcba846e559fbc42385a78ddc5e34ee2eea69457569b053be91c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>hostOpcodeGetManufacturerVersion</name>
      <anchorfile>juce__VSTInterface_8h.html</anchorfile>
      <anchor>a13942f5626bb2fcba846e559fbc42385ad78cf8104d05905b88d467370af50c5c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>hostOpcodeManufacturerSpecific</name>
      <anchorfile>juce__VSTInterface_8h.html</anchorfile>
      <anchor>a13942f5626bb2fcba846e559fbc42385aeae5f7c8e9f2570a86d4385ced61627e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>hostOpcodeSetIcon</name>
      <anchorfile>juce__VSTInterface_8h.html</anchorfile>
      <anchor>a13942f5626bb2fcba846e559fbc42385ada4d50d31e683fb6937b12dc820e9d5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>hostOpcodeCanHostDo</name>
      <anchorfile>juce__VSTInterface_8h.html</anchorfile>
      <anchor>a13942f5626bb2fcba846e559fbc42385a5dd62722eaa6260adff3336036cf72d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>hostOpcodeGetLanguage</name>
      <anchorfile>juce__VSTInterface_8h.html</anchorfile>
      <anchor>a13942f5626bb2fcba846e559fbc42385a4d9655b19aeb8ecd7210be85b66beec1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>hostOpcodeOpenEditorWindow</name>
      <anchorfile>juce__VSTInterface_8h.html</anchorfile>
      <anchor>a13942f5626bb2fcba846e559fbc42385a77745c3875d1822007d33083b471889d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>hostOpcodeCloseEditorWindow</name>
      <anchorfile>juce__VSTInterface_8h.html</anchorfile>
      <anchor>a13942f5626bb2fcba846e559fbc42385af341ec3f35f79d4c5dec4d5cb828ab4b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>hostOpcodeGetDirectory</name>
      <anchorfile>juce__VSTInterface_8h.html</anchorfile>
      <anchor>a13942f5626bb2fcba846e559fbc42385a7bb8c004af19b0f49ab9a71581903991</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>hostOpcodeUpdateView</name>
      <anchorfile>juce__VSTInterface_8h.html</anchorfile>
      <anchor>a13942f5626bb2fcba846e559fbc42385a784448a19ce174cd19f0a8a61570c308</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>hostOpcodeParameterChangeGestureBegin</name>
      <anchorfile>juce__VSTInterface_8h.html</anchorfile>
      <anchor>a13942f5626bb2fcba846e559fbc42385a5e9eaedd16f9d0384ce0b6fdd68884ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>hostOpcodeParameterChangeGestureEnd</name>
      <anchorfile>juce__VSTInterface_8h.html</anchorfile>
      <anchor>a13942f5626bb2fcba846e559fbc42385aa47056266b7cf453ec6a03f940c4da68</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>VstProcessingSampleType</name>
      <anchorfile>juce__VSTInterface_8h.html</anchorfile>
      <anchor>a8952bc95c7d379200462309e2b9ab600</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>vstProcessingSampleTypeFloat</name>
      <anchorfile>juce__VSTInterface_8h.html</anchorfile>
      <anchor>a8952bc95c7d379200462309e2b9ab600a1af4a5f7cf858dddd66dbc56c8b2ef63</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>vstProcessingSampleTypeDouble</name>
      <anchorfile>juce__VSTInterface_8h.html</anchorfile>
      <anchor>a8952bc95c7d379200462309e2b9ab600ab01fc8235c5384f94a1cef8573d84bc6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>VstPlugInCategory</name>
      <anchorfile>juce__VSTInterface_8h.html</anchorfile>
      <anchor>a7974383465a8572f07241d700c239350</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>kPlugCategUnknown</name>
      <anchorfile>juce__VSTInterface_8h.html</anchorfile>
      <anchor>a7974383465a8572f07241d700c239350a85df4fc40b4433f5bcba1d6d44dce8b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>kPlugCategEffect</name>
      <anchorfile>juce__VSTInterface_8h.html</anchorfile>
      <anchor>a7974383465a8572f07241d700c239350ad31c1e5f938ce881dc149ac8c7f5d0e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>kPlugCategSynth</name>
      <anchorfile>juce__VSTInterface_8h.html</anchorfile>
      <anchor>a7974383465a8572f07241d700c239350a2e4415d5c0fae72d77cbf4bd2f30b42a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>kPlugCategAnalysis</name>
      <anchorfile>juce__VSTInterface_8h.html</anchorfile>
      <anchor>a7974383465a8572f07241d700c239350a33016aaefb7b6266b64b2acc6fe1a34b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>kPlugCategMastering</name>
      <anchorfile>juce__VSTInterface_8h.html</anchorfile>
      <anchor>a7974383465a8572f07241d700c239350a94fd16a74e18d9d47203f6a479fc1381</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>kPlugCategSpacializer</name>
      <anchorfile>juce__VSTInterface_8h.html</anchorfile>
      <anchor>a7974383465a8572f07241d700c239350adda0ce5dce0bad9d156fcf9c23b0fe09</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>kPlugCategRoomFx</name>
      <anchorfile>juce__VSTInterface_8h.html</anchorfile>
      <anchor>a7974383465a8572f07241d700c239350a711e84a2175350783f1da5449bb3b397</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>kPlugSurroundFx</name>
      <anchorfile>juce__VSTInterface_8h.html</anchorfile>
      <anchor>a7974383465a8572f07241d700c239350a32ea191b214606731d1d25419691a118</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>kPlugCategRestoration</name>
      <anchorfile>juce__VSTInterface_8h.html</anchorfile>
      <anchor>a7974383465a8572f07241d700c239350a32af4edcd7dd80d832dc1000831c92b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>kPlugCategOfflineProcess</name>
      <anchorfile>juce__VSTInterface_8h.html</anchorfile>
      <anchor>a7974383465a8572f07241d700c239350a3bfdcabf75000a902695888b25504882</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>kPlugCategShell</name>
      <anchorfile>juce__VSTInterface_8h.html</anchorfile>
      <anchor>a7974383465a8572f07241d700c239350aad2d74f002fcefac31672a74bd49ab9e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>kPlugCategGenerator</name>
      <anchorfile>juce__VSTInterface_8h.html</anchorfile>
      <anchor>a7974383465a8572f07241d700c239350a1a7eea5992983435ec8eea75ff64852e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>VstMaxStringLengths</name>
      <anchorfile>juce__VSTInterface_8h.html</anchorfile>
      <anchor>a281409a28b88d7391eb1ec9886e9c8b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>vstMaxNameLength</name>
      <anchorfile>juce__VSTInterface_8h.html</anchorfile>
      <anchor>a281409a28b88d7391eb1ec9886e9c8b0ab2ba24b01d8cad1f096516d3273a7214</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>vstMaxParameterOrPinLabelLength</name>
      <anchorfile>juce__VSTInterface_8h.html</anchorfile>
      <anchor>a281409a28b88d7391eb1ec9886e9c8b0a656493e08463faabdf8499eedb50c4cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>vstMaxParameterOrPinShortLabelLength</name>
      <anchorfile>juce__VSTInterface_8h.html</anchorfile>
      <anchor>a281409a28b88d7391eb1ec9886e9c8b0a49a8066faa13b8820956410dfbf2fa16</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>vstMaxCategoryLength</name>
      <anchorfile>juce__VSTInterface_8h.html</anchorfile>
      <anchor>a281409a28b88d7391eb1ec9886e9c8b0a8d8d01ffd0a2dd6d236c01091f293516</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>vstMaxManufacturerStringLength</name>
      <anchorfile>juce__VSTInterface_8h.html</anchorfile>
      <anchor>a281409a28b88d7391eb1ec9886e9c8b0a75f998f7f4df63adefeca684c9eb7252</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>vstMaxPlugInNameStringLength</name>
      <anchorfile>juce__VSTInterface_8h.html</anchorfile>
      <anchor>a281409a28b88d7391eb1ec9886e9c8b0afd49d4623b3c29fd884544e89c01b185</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>VstPinInfoFlags</name>
      <anchorfile>juce__VSTInterface_8h.html</anchorfile>
      <anchor>a40ffa3f764509605ad31da5a06f08014</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>vstPinInfoFlagIsActive</name>
      <anchorfile>juce__VSTInterface_8h.html</anchorfile>
      <anchor>a40ffa3f764509605ad31da5a06f08014a963372b08e79456c5d72020e2936e49a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>vstPinInfoFlagIsStereo</name>
      <anchorfile>juce__VSTInterface_8h.html</anchorfile>
      <anchor>a40ffa3f764509605ad31da5a06f08014ac0aec593973f9e6840d1a9d1cc4b04e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>vstPinInfoFlagValid</name>
      <anchorfile>juce__VSTInterface_8h.html</anchorfile>
      <anchor>a40ffa3f764509605ad31da5a06f08014a9c0a7c3944a4f76c6e09cb6cc63c5a20</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>VstEventTypes</name>
      <anchorfile>juce__VSTInterface_8h.html</anchorfile>
      <anchor>a97d16bafbef4126002a53e12b93a7d18</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>vstMidiEventType</name>
      <anchorfile>juce__VSTInterface_8h.html</anchorfile>
      <anchor>a97d16bafbef4126002a53e12b93a7d18a221cc1ae638e7f3806856d5cdb6c980b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>vstSysExEventType</name>
      <anchorfile>juce__VSTInterface_8h.html</anchorfile>
      <anchor>a97d16bafbef4126002a53e12b93a7d18a2e323ecf3ce69f0a891dccc3633b0b53</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>VstMidiEventFlags</name>
      <anchorfile>juce__VSTInterface_8h.html</anchorfile>
      <anchor>ad176e54164dc7d8200cf4cdaf2be4533</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>vstMidiEventIsRealtime</name>
      <anchorfile>juce__VSTInterface_8h.html</anchorfile>
      <anchor>ad176e54164dc7d8200cf4cdaf2be4533a568510b3fd973575268c3535d9011475</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>VstTimingInformationFlags</name>
      <anchorfile>juce__VSTInterface_8h.html</anchorfile>
      <anchor>addedc65593a9235fac7ac63519bfaa22</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>vstTimingInfoFlagTransportChanged</name>
      <anchorfile>juce__VSTInterface_8h.html</anchorfile>
      <anchor>addedc65593a9235fac7ac63519bfaa22a3df5151f73ef7480846eb53606d39370</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>vstTimingInfoFlagCurrentlyPlaying</name>
      <anchorfile>juce__VSTInterface_8h.html</anchorfile>
      <anchor>addedc65593a9235fac7ac63519bfaa22a3c8832b163cf8e23c867a6cf8eaf26ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>vstTimingInfoFlagLoopActive</name>
      <anchorfile>juce__VSTInterface_8h.html</anchorfile>
      <anchor>addedc65593a9235fac7ac63519bfaa22a842753e47675bd5a2111f55306c233c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>vstTimingInfoFlagCurrentlyRecording</name>
      <anchorfile>juce__VSTInterface_8h.html</anchorfile>
      <anchor>addedc65593a9235fac7ac63519bfaa22a066f2746d1b90b72ac674ff60b9f412e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>vstTimingInfoFlagAutomationWriteModeActive</name>
      <anchorfile>juce__VSTInterface_8h.html</anchorfile>
      <anchor>addedc65593a9235fac7ac63519bfaa22aa13d56b31067c4139b14e7360db70af4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>vstTimingInfoFlagAutomationReadModeActive</name>
      <anchorfile>juce__VSTInterface_8h.html</anchorfile>
      <anchor>addedc65593a9235fac7ac63519bfaa22a4b401aabea27f1473f8f39628e8df222</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>vstTimingInfoFlagNanosecondsValid</name>
      <anchorfile>juce__VSTInterface_8h.html</anchorfile>
      <anchor>addedc65593a9235fac7ac63519bfaa22a5d66548ba1ec1c17c2738a44e47f8e5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>vstTimingInfoFlagMusicalPositionValid</name>
      <anchorfile>juce__VSTInterface_8h.html</anchorfile>
      <anchor>addedc65593a9235fac7ac63519bfaa22ae59fb8ff78d3b755d5d846fd455e0e25</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>vstTimingInfoFlagTempoValid</name>
      <anchorfile>juce__VSTInterface_8h.html</anchorfile>
      <anchor>addedc65593a9235fac7ac63519bfaa22a8c525cad6ede54639dd99cda493e4d2f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>vstTimingInfoFlagLastBarPositionValid</name>
      <anchorfile>juce__VSTInterface_8h.html</anchorfile>
      <anchor>addedc65593a9235fac7ac63519bfaa22a3882edcfd71d8786103b322063417f90</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>vstTimingInfoFlagLoopPositionValid</name>
      <anchorfile>juce__VSTInterface_8h.html</anchorfile>
      <anchor>addedc65593a9235fac7ac63519bfaa22a02038c324fc82c7bbb26c88f39a7ec1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>vstTimingInfoFlagTimeSignatureValid</name>
      <anchorfile>juce__VSTInterface_8h.html</anchorfile>
      <anchor>addedc65593a9235fac7ac63519bfaa22a7058e06521b21ff5eba3c2e341501a83</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>vstTimingInfoFlagSmpteValid</name>
      <anchorfile>juce__VSTInterface_8h.html</anchorfile>
      <anchor>addedc65593a9235fac7ac63519bfaa22ad43c6b8698a0a17bb2abb33e4917cb83</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>vstTimingInfoFlagNearestClockValid</name>
      <anchorfile>juce__VSTInterface_8h.html</anchorfile>
      <anchor>addedc65593a9235fac7ac63519bfaa22ad4c36cb9db132bee969fa72208d993de</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>VstSmpteRates</name>
      <anchorfile>juce__VSTInterface_8h.html</anchorfile>
      <anchor>ac37f6903bd6ab8670b79cce506189fd6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>vstSmpteRateFps24</name>
      <anchorfile>juce__VSTInterface_8h.html</anchorfile>
      <anchor>ac37f6903bd6ab8670b79cce506189fd6a22187d82b243cf0c1be26db42274e2e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>vstSmpteRateFps25</name>
      <anchorfile>juce__VSTInterface_8h.html</anchorfile>
      <anchor>ac37f6903bd6ab8670b79cce506189fd6aeff18edc7fe837da0363af35defbea67</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>vstSmpteRateFps2997</name>
      <anchorfile>juce__VSTInterface_8h.html</anchorfile>
      <anchor>ac37f6903bd6ab8670b79cce506189fd6a9ac0522567cd14c204eaf5afdef22842</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>vstSmpteRateFps30</name>
      <anchorfile>juce__VSTInterface_8h.html</anchorfile>
      <anchor>ac37f6903bd6ab8670b79cce506189fd6a10f23d29cfc6677e82df654a7d773faa</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>vstSmpteRateFps2997drop</name>
      <anchorfile>juce__VSTInterface_8h.html</anchorfile>
      <anchor>ac37f6903bd6ab8670b79cce506189fd6af1eb2a379bf37f1ddc269c7128cde9d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>vstSmpteRateFps30drop</name>
      <anchorfile>juce__VSTInterface_8h.html</anchorfile>
      <anchor>ac37f6903bd6ab8670b79cce506189fd6a7444087bc193dcc27975f7e3aaa8635d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>vstSmpteRate16mmFilm</name>
      <anchorfile>juce__VSTInterface_8h.html</anchorfile>
      <anchor>ac37f6903bd6ab8670b79cce506189fd6a88e7c1b03d83952dd5e010e5dd015c80</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>vstSmpteRate35mmFilm</name>
      <anchorfile>juce__VSTInterface_8h.html</anchorfile>
      <anchor>ac37f6903bd6ab8670b79cce506189fd6a9191f32c27cf54d3fa77e382dd7e79ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>vstSmpteRateFps239</name>
      <anchorfile>juce__VSTInterface_8h.html</anchorfile>
      <anchor>ac37f6903bd6ab8670b79cce506189fd6a69989062f8e983182a5d42ea49bf09c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>vstSmpteRateFps249</name>
      <anchorfile>juce__VSTInterface_8h.html</anchorfile>
      <anchor>ac37f6903bd6ab8670b79cce506189fd6a4a1cc9461283dd530c8d444e3fb91cca</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>vstSmpteRateFps599</name>
      <anchorfile>juce__VSTInterface_8h.html</anchorfile>
      <anchor>ac37f6903bd6ab8670b79cce506189fd6a19fc827551f047743486738591a94aa4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>vstSmpteRateFps60</name>
      <anchorfile>juce__VSTInterface_8h.html</anchorfile>
      <anchor>ac37f6903bd6ab8670b79cce506189fd6a2b249473abab15ab231ee083c8541ffe</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>VstIndividualSpeakerType</name>
      <anchorfile>juce__VSTInterface_8h.html</anchorfile>
      <anchor>a42068c7ef3dcb132821527ac3884603b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>vstIndividualSpeakerTypeUndefined</name>
      <anchorfile>juce__VSTInterface_8h.html</anchorfile>
      <anchor>a42068c7ef3dcb132821527ac3884603babfc525e0e1307ee57ec7c9d5c1ead1bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>vstIndividualSpeakerTypeMono</name>
      <anchorfile>juce__VSTInterface_8h.html</anchorfile>
      <anchor>a42068c7ef3dcb132821527ac3884603ba8e39a6fea2db3cfe0707e8452ab251fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>vstIndividualSpeakerTypeLeft</name>
      <anchorfile>juce__VSTInterface_8h.html</anchorfile>
      <anchor>a42068c7ef3dcb132821527ac3884603ba7e8cea9a9434e78330a9cfc37a470119</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>vstIndividualSpeakerTypeRight</name>
      <anchorfile>juce__VSTInterface_8h.html</anchorfile>
      <anchor>a42068c7ef3dcb132821527ac3884603bab4c77e58293f2379eedade08c23a3911</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>vstIndividualSpeakerTypeCentre</name>
      <anchorfile>juce__VSTInterface_8h.html</anchorfile>
      <anchor>a42068c7ef3dcb132821527ac3884603ba8be18d3b7eb0b3cf3b23d3b191bce505</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>vstIndividualSpeakerTypeLFE</name>
      <anchorfile>juce__VSTInterface_8h.html</anchorfile>
      <anchor>a42068c7ef3dcb132821527ac3884603baa9817df9ce8e23d69fd1603672e6f227</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>vstIndividualSpeakerTypeLeftSurround</name>
      <anchorfile>juce__VSTInterface_8h.html</anchorfile>
      <anchor>a42068c7ef3dcb132821527ac3884603ba3a6461be7de312cb8ca3a4350ee9bed3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>vstIndividualSpeakerTypeRightSurround</name>
      <anchorfile>juce__VSTInterface_8h.html</anchorfile>
      <anchor>a42068c7ef3dcb132821527ac3884603baae85aa7b2a29703dacd6655fe0203ff8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>vstIndividualSpeakerTypeLeftCentre</name>
      <anchorfile>juce__VSTInterface_8h.html</anchorfile>
      <anchor>a42068c7ef3dcb132821527ac3884603baa7cfc36027812a70afdfb8e7de2f36e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>vstIndividualSpeakerTypeRightCentre</name>
      <anchorfile>juce__VSTInterface_8h.html</anchorfile>
      <anchor>a42068c7ef3dcb132821527ac3884603baef12af8482910415c51edecef9f258c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>vstIndividualSpeakerTypeSurround</name>
      <anchorfile>juce__VSTInterface_8h.html</anchorfile>
      <anchor>a42068c7ef3dcb132821527ac3884603ba13a8915b38fd49b0170f09e48bef03b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>vstIndividualSpeakerTypeCentreSurround</name>
      <anchorfile>juce__VSTInterface_8h.html</anchorfile>
      <anchor>a42068c7ef3dcb132821527ac3884603bad0419bc57da7445646e8ce9f8c5a0a73</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>vstIndividualSpeakerTypeLeftRearSurround</name>
      <anchorfile>juce__VSTInterface_8h.html</anchorfile>
      <anchor>a42068c7ef3dcb132821527ac3884603ba42f541b5d182fc0e357dfc9324de2d30</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>vstIndividualSpeakerTypeRightRearSurround</name>
      <anchorfile>juce__VSTInterface_8h.html</anchorfile>
      <anchor>a42068c7ef3dcb132821527ac3884603bae6f04e9f15dcb97c59a6e98429ad310c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>vstIndividualSpeakerTypeTopMiddle</name>
      <anchorfile>juce__VSTInterface_8h.html</anchorfile>
      <anchor>a42068c7ef3dcb132821527ac3884603babc0b6cb3fc1f30d56abd182bfee183fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>vstIndividualSpeakerTypeTopFrontLeft</name>
      <anchorfile>juce__VSTInterface_8h.html</anchorfile>
      <anchor>a42068c7ef3dcb132821527ac3884603baa146977a0a0e08de9db14ca70cd500b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>vstIndividualSpeakerTypeTopFrontCentre</name>
      <anchorfile>juce__VSTInterface_8h.html</anchorfile>
      <anchor>a42068c7ef3dcb132821527ac3884603ba603e9f8c405f06ddc5b7c090fc1733d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>vstIndividualSpeakerTypeTopFrontRight</name>
      <anchorfile>juce__VSTInterface_8h.html</anchorfile>
      <anchor>a42068c7ef3dcb132821527ac3884603ba799b927adf6b0ada8804c27ce9037f47</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>vstIndividualSpeakerTypeTopRearLeft</name>
      <anchorfile>juce__VSTInterface_8h.html</anchorfile>
      <anchor>a42068c7ef3dcb132821527ac3884603babfeb05e326b9d85cb84a167867fb962e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>vstIndividualSpeakerTypeTopRearCentre</name>
      <anchorfile>juce__VSTInterface_8h.html</anchorfile>
      <anchor>a42068c7ef3dcb132821527ac3884603ba6ebcd8bcaae5bb83eadd1dd1deb1f5f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>vstIndividualSpeakerTypeTopRearRight</name>
      <anchorfile>juce__VSTInterface_8h.html</anchorfile>
      <anchor>a42068c7ef3dcb132821527ac3884603ba1c9da0bba377bf9c86ddafea676f6d2b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>vstIndividualSpeakerTypeLFE2</name>
      <anchorfile>juce__VSTInterface_8h.html</anchorfile>
      <anchor>a42068c7ef3dcb132821527ac3884603baa78394dc251326c011fa15db9320a2fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>VstSpeakerConfigurationType</name>
      <anchorfile>juce__VSTInterface_8h.html</anchorfile>
      <anchor>aff56bb041ec3487b43c6405dd49ed6bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>vstSpeakerConfigTypeUser</name>
      <anchorfile>juce__VSTInterface_8h.html</anchorfile>
      <anchor>aff56bb041ec3487b43c6405dd49ed6bda72dff697cbaf07f5b48ffb1e6b48c2d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>vstSpeakerConfigTypeEmpty</name>
      <anchorfile>juce__VSTInterface_8h.html</anchorfile>
      <anchor>aff56bb041ec3487b43c6405dd49ed6bda56741ec6554ca77c18fd59f9e541ff35</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>vstSpeakerConfigTypeMono</name>
      <anchorfile>juce__VSTInterface_8h.html</anchorfile>
      <anchor>aff56bb041ec3487b43c6405dd49ed6bdab7b831e8a41266f3ec03c8973cd78289</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>vstSpeakerConfigTypeLR</name>
      <anchorfile>juce__VSTInterface_8h.html</anchorfile>
      <anchor>aff56bb041ec3487b43c6405dd49ed6bda44bc3aa53581366410c35623a699e960</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>vstSpeakerConfigTypeLsRs</name>
      <anchorfile>juce__VSTInterface_8h.html</anchorfile>
      <anchor>aff56bb041ec3487b43c6405dd49ed6bda12cfddad331d4b45c27c6d950cd52fb2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>vstSpeakerConfigTypeLcRc</name>
      <anchorfile>juce__VSTInterface_8h.html</anchorfile>
      <anchor>aff56bb041ec3487b43c6405dd49ed6bda060ac566b92f675e63bc3647e70e070d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>vstSpeakerConfigTypeSlSr</name>
      <anchorfile>juce__VSTInterface_8h.html</anchorfile>
      <anchor>aff56bb041ec3487b43c6405dd49ed6bda5f9827405c14e6a8e0bc4db479660713</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>vstSpeakerConfigTypeCLfe</name>
      <anchorfile>juce__VSTInterface_8h.html</anchorfile>
      <anchor>aff56bb041ec3487b43c6405dd49ed6bda4ebc0ac725608861f6196d616335c229</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>vstSpeakerConfigTypeLRC</name>
      <anchorfile>juce__VSTInterface_8h.html</anchorfile>
      <anchor>aff56bb041ec3487b43c6405dd49ed6bdad338a3d326a0ddada8ee92afcd1e9c42</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>vstSpeakerConfigTypeLRS</name>
      <anchorfile>juce__VSTInterface_8h.html</anchorfile>
      <anchor>aff56bb041ec3487b43c6405dd49ed6bdad79e1d4dbb32c726a4e275dba8464d88</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>vstSpeakerConfigTypeLRCLfe</name>
      <anchorfile>juce__VSTInterface_8h.html</anchorfile>
      <anchor>aff56bb041ec3487b43c6405dd49ed6bda91b865857bd2a9e30f70233c70794c89</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>vstSpeakerConfigTypeLRLfeS</name>
      <anchorfile>juce__VSTInterface_8h.html</anchorfile>
      <anchor>aff56bb041ec3487b43c6405dd49ed6bdac53cd2d5002abb5f4e4398e8b6ab50e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>vstSpeakerConfigTypeLRCS</name>
      <anchorfile>juce__VSTInterface_8h.html</anchorfile>
      <anchor>aff56bb041ec3487b43c6405dd49ed6bdad169feee7885f7359288aa364b77b018</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>vstSpeakerConfigTypeLRLsRs</name>
      <anchorfile>juce__VSTInterface_8h.html</anchorfile>
      <anchor>aff56bb041ec3487b43c6405dd49ed6bda4c4047f071b57b772d6fafb61c5ac108</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>vstSpeakerConfigTypeLRCLfeS</name>
      <anchorfile>juce__VSTInterface_8h.html</anchorfile>
      <anchor>aff56bb041ec3487b43c6405dd49ed6bda239a261642ac5637585e0af19e7b98e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>vstSpeakerConfigTypeLRLfeLsRs</name>
      <anchorfile>juce__VSTInterface_8h.html</anchorfile>
      <anchor>aff56bb041ec3487b43c6405dd49ed6bda3cf5fe2c194c950ecd4d20303500e191</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>vstSpeakerConfigTypeLRCLsRs</name>
      <anchorfile>juce__VSTInterface_8h.html</anchorfile>
      <anchor>aff56bb041ec3487b43c6405dd49ed6bda0d88784d8d953c7e42bb2cf72cc3d322</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>vstSpeakerConfigTypeLRCLfeLsRs</name>
      <anchorfile>juce__VSTInterface_8h.html</anchorfile>
      <anchor>aff56bb041ec3487b43c6405dd49ed6bda642369154557bc74dfbf851e65239d55</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>vstSpeakerConfigTypeLRCLsRsCs</name>
      <anchorfile>juce__VSTInterface_8h.html</anchorfile>
      <anchor>aff56bb041ec3487b43c6405dd49ed6bda31bfaca4561f82bd4b00bfb73db0beab</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>vstSpeakerConfigTypeLRLsRsSlSr</name>
      <anchorfile>juce__VSTInterface_8h.html</anchorfile>
      <anchor>aff56bb041ec3487b43c6405dd49ed6bda21b27411ace61dccd6c9dcebd9130070</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>vstSpeakerConfigTypeLRCLfeLsRsCs</name>
      <anchorfile>juce__VSTInterface_8h.html</anchorfile>
      <anchor>aff56bb041ec3487b43c6405dd49ed6bdabaf2bcb53a84546d7baa55d3cbf425c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>vstSpeakerConfigTypeLRLfeLsRsSlSr</name>
      <anchorfile>juce__VSTInterface_8h.html</anchorfile>
      <anchor>aff56bb041ec3487b43c6405dd49ed6bdaf7a1ccd60ba44df7cf58d9fb354f12fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>vstSpeakerConfigTypeLRCLsRsLcRc</name>
      <anchorfile>juce__VSTInterface_8h.html</anchorfile>
      <anchor>aff56bb041ec3487b43c6405dd49ed6bdacbde11a632fe169189a42a9c07994b4f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>vstSpeakerConfigTypeLRCLsRsSlSr</name>
      <anchorfile>juce__VSTInterface_8h.html</anchorfile>
      <anchor>aff56bb041ec3487b43c6405dd49ed6bda0926b1ad3eeb886141a6b1526e2f7dea</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>vstSpeakerConfigTypeLRCLfeLsRsLcRc</name>
      <anchorfile>juce__VSTInterface_8h.html</anchorfile>
      <anchor>aff56bb041ec3487b43c6405dd49ed6bda7c6a2dd16662bec95ca69db270fffe7f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>vstSpeakerConfigTypeLRCLfeLsRsSlSr</name>
      <anchorfile>juce__VSTInterface_8h.html</anchorfile>
      <anchor>aff56bb041ec3487b43c6405dd49ed6bda678a8c0eb54f92d8cea67e68d1226ce5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>vstSpeakerConfigTypeLRCLsRsLcRcCs</name>
      <anchorfile>juce__VSTInterface_8h.html</anchorfile>
      <anchor>aff56bb041ec3487b43c6405dd49ed6bda168e534f8654b6505c89afb02094cc5b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>vstSpeakerConfigTypeLRCLsRsCsSlSr</name>
      <anchorfile>juce__VSTInterface_8h.html</anchorfile>
      <anchor>aff56bb041ec3487b43c6405dd49ed6bda4927d276c3eb15b19b77879087fefb1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>vstSpeakerConfigTypeLRCLfeLsRsLcRcCs</name>
      <anchorfile>juce__VSTInterface_8h.html</anchorfile>
      <anchor>aff56bb041ec3487b43c6405dd49ed6bda9a13b0231fce791b82c80df4eccc38f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>vstSpeakerConfigTypeLRCLfeLsRsCsSlSr</name>
      <anchorfile>juce__VSTInterface_8h.html</anchorfile>
      <anchor>aff56bb041ec3487b43c6405dd49ed6bda07d49017636b7174c67758d1a0649107</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>vstSpeakerConfigTypeLRCLfeLsRsTflTfcTfrTrlTrrLfe2</name>
      <anchorfile>juce__VSTInterface_8h.html</anchorfile>
      <anchor>aff56bb041ec3487b43c6405dd49ed6bda0278ac52fce09124bf87afb34c2df883</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>typedef</type>
      <name>pointer_sized_int</name>
      <anchorfile>juce__VSTInterface_8h.html</anchorfile>
      <anchor>ae6eaae971f9919553303c8c6a449fa5a</anchor>
      <arglist>(VSTINTERFACECALL *VstHostCallback)(VstEffectInterface *</arglist>
    </member>
    <member kind="variable">
      <type>const int32</type>
      <name>juceVstInterfaceVersion</name>
      <anchorfile>juce__VSTInterface_8h.html</anchorfile>
      <anchor>a60c58657ea50f8347da505110bed0475</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int32</type>
      <name>juceVstInterfaceIdentifier</name>
      <anchorfile>juce__VSTInterface_8h.html</anchorfile>
      <anchor>aa0141325b2a7d73302b4415761d632fc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>juce_VSTMidiEventList.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_audio_processors/format_types/</path>
    <filename>juce__VSTMidiEventList_8h</filename>
  </compound>
  <compound kind="file">
    <name>juce_VSTPluginFormat.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_audio_processors/format_types/</path>
    <filename>juce__VSTPluginFormat_8h</filename>
    <class kind="class">VSTPluginFormat</class>
    <class kind="class">VSTPluginFormat::ExtraFunctions</class>
  </compound>
  <compound kind="file">
    <name>juce_WaitableEvent.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_core/threads/</path>
    <filename>juce__WaitableEvent_8h</filename>
    <class kind="class">WaitableEvent</class>
  </compound>
  <compound kind="file">
    <name>juce_WavAudioFormat.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_audio_formats/codecs/</path>
    <filename>juce__WavAudioFormat_8h</filename>
    <class kind="class">WavAudioFormat</class>
  </compound>
  <compound kind="file">
    <name>juce_WeakReference.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_core/memory/</path>
    <filename>juce__WeakReference_8h</filename>
    <class kind="class">WeakReference</class>
    <class kind="class">WeakReference::SharedPointer</class>
    <class kind="class">WeakReference::Master</class>
  </compound>
  <compound kind="file">
    <name>juce_WebBrowserComponent.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_gui_extra/misc/</path>
    <filename>juce__WebBrowserComponent_8h</filename>
    <class kind="class">WebBrowserComponent</class>
  </compound>
  <compound kind="file">
    <name>juce_WebInputStream.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_core/network/</path>
    <filename>juce__WebInputStream_8h</filename>
    <class kind="class">WebInputStream</class>
    <class kind="class">WebInputStream::Listener</class>
  </compound>
  <compound kind="file">
    <name>juce_Whirlpool.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_cryptography/hashing/</path>
    <filename>juce__Whirlpool_8h</filename>
    <class kind="class">Whirlpool</class>
  </compound>
  <compound kind="file">
    <name>juce_WildcardFileFilter.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_core/files/</path>
    <filename>juce__WildcardFileFilter_8h</filename>
    <class kind="class">WildcardFileFilter</class>
  </compound>
  <compound kind="file">
    <name>juce_WindowsHooks.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_audio_plugin_client/utility/</path>
    <filename>juce__WindowsHooks_8h</filename>
  </compound>
  <compound kind="file">
    <name>juce_WindowsMediaAudioFormat.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_audio_formats/codecs/</path>
    <filename>juce__WindowsMediaAudioFormat_8h</filename>
    <class kind="class">WindowsMediaAudioFormat</class>
  </compound>
  <compound kind="file">
    <name>juce_WindowsRegistry.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_core/misc/</path>
    <filename>juce__WindowsRegistry_8h</filename>
    <class kind="class">WindowsRegistry</class>
  </compound>
  <compound kind="file">
    <name>juce_XMLCodeTokeniser.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_gui_extra/code_editor/</path>
    <filename>juce__XMLCodeTokeniser_8h</filename>
    <class kind="class">XmlTokeniser</class>
  </compound>
  <compound kind="file">
    <name>juce_XmlDocument.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_core/xml/</path>
    <filename>juce__XmlDocument_8h</filename>
    <class kind="class">XmlDocument</class>
  </compound>
  <compound kind="file">
    <name>juce_XmlElement.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_core/xml/</path>
    <filename>juce__XmlElement_8h</filename>
    <class kind="class">XmlElement</class>
    <member kind="define">
      <type>#define</type>
      <name>forEachXmlChildElement</name>
      <anchorfile>juce__XmlElement_8h.html</anchorfile>
      <anchor>ace692e5be62f7ab58363d91b52eb839e</anchor>
      <arglist>(parentXmlElement, childElementVariableName)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>forEachXmlChildElementWithTagName</name>
      <anchorfile>juce__XmlElement_8h.html</anchorfile>
      <anchor>a6cf39e14a10e2e46f753b0c79c66f2f9</anchor>
      <arglist>(parentXmlElement, childElementVariableName, requiredTagName)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>juce_ZipFile.h</name>
    <path>/home/juce/data/res/development/juce/modules/juce_core/zip/</path>
    <filename>juce__ZipFile_8h</filename>
    <class kind="class">ZipFile</class>
    <class kind="struct">ZipFile::ZipEntry</class>
    <class kind="class">ZipFile::Builder</class>
  </compound>
  <compound kind="class">
    <name>AbstractFifo</name>
    <filename>classAbstractFifo.html</filename>
    <member kind="function">
      <type></type>
      <name>AbstractFifo</name>
      <anchorfile>classAbstractFifo.html</anchorfile>
      <anchor>accd680c366b4b8ca4f30ee8fb2b37b75</anchor>
      <arglist>(int capacity) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~AbstractFifo</name>
      <anchorfile>classAbstractFifo.html</anchorfile>
      <anchor>a81ff19ff8eed394e9f7aca08ae1e8e8d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getTotalSize</name>
      <anchorfile>classAbstractFifo.html</anchorfile>
      <anchor>a7724b664c3aae6cbaad1a3821ccaf654</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getFreeSpace</name>
      <anchorfile>classAbstractFifo.html</anchorfile>
      <anchor>aeb68b5aec74f6511c76df390eda588ee</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumReady</name>
      <anchorfile>classAbstractFifo.html</anchorfile>
      <anchor>a39ab3206298a1aabb4412a6993b4023b</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classAbstractFifo.html</anchorfile>
      <anchor>a33ba0f93c22c9cc182f8fa78af07862f</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTotalSize</name>
      <anchorfile>classAbstractFifo.html</anchorfile>
      <anchor>a5ece35129a957c8783411de69b2542ec</anchor>
      <arglist>(int newSize) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>prepareToWrite</name>
      <anchorfile>classAbstractFifo.html</anchorfile>
      <anchor>a9f32996a86817773a7165be823f80c87</anchor>
      <arglist>(int numToWrite, int &amp;startIndex1, int &amp;blockSize1, int &amp;startIndex2, int &amp;blockSize2) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>finishedWrite</name>
      <anchorfile>classAbstractFifo.html</anchorfile>
      <anchor>a0daf6067beb737a4136e7e9d8f26bab0</anchor>
      <arglist>(int numWritten) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>prepareToRead</name>
      <anchorfile>classAbstractFifo.html</anchorfile>
      <anchor>a880ae9f1e0a08f3c0cfe95f03b279f96</anchor>
      <arglist>(int numWanted, int &amp;startIndex1, int &amp;blockSize1, int &amp;startIndex2, int &amp;blockSize2) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>finishedRead</name>
      <anchorfile>classAbstractFifo.html</anchorfile>
      <anchor>a651019308fd148a1d1a84947d57e1679</anchor>
      <arglist>(int numRead) noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ActionBroadcaster</name>
    <filename>classActionBroadcaster.html</filename>
    <member kind="function">
      <type></type>
      <name>ActionBroadcaster</name>
      <anchorfile>classActionBroadcaster.html</anchorfile>
      <anchor>a195c0587f0d2751b9cf5c36ec8d50d50</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ActionBroadcaster</name>
      <anchorfile>classActionBroadcaster.html</anchorfile>
      <anchor>a13ffb78c0475303fad4c9e8f61e91c16</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addActionListener</name>
      <anchorfile>classActionBroadcaster.html</anchorfile>
      <anchor>a6bda58522778ad1458cd5d9baaffd9b5</anchor>
      <arglist>(ActionListener *listener)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeActionListener</name>
      <anchorfile>classActionBroadcaster.html</anchorfile>
      <anchor>ae8c41195cffd093782d4450e209f2420</anchor>
      <arglist>(ActionListener *listener)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeAllActionListeners</name>
      <anchorfile>classActionBroadcaster.html</anchorfile>
      <anchor>ae8f8b1a360c780f0acb538c97200a7cc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sendActionMessage</name>
      <anchorfile>classActionBroadcaster.html</anchorfile>
      <anchor>a317709b0f409bf00a5834a3aca06fe09</anchor>
      <arglist>(const String &amp;message) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ActionListener</name>
    <filename>classActionListener.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ActionListener</name>
      <anchorfile>classActionListener.html</anchorfile>
      <anchor>a11e316dbd4e2b404eb9946c8543b094e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>actionListenerCallback</name>
      <anchorfile>classActionListener.html</anchorfile>
      <anchor>af8171cbe6bea29143ec411a77cec9683</anchor>
      <arglist>(const String &amp;message)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ActiveXControlComponent</name>
    <filename>classActiveXControlComponent.html</filename>
    <base>Component</base>
    <member kind="function">
      <type></type>
      <name>ActiveXControlComponent</name>
      <anchorfile>classActiveXControlComponent.html</anchorfile>
      <anchor>af7b5ac27646fe23cb28c7aa5d22a3529</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ActiveXControlComponent</name>
      <anchorfile>classActiveXControlComponent.html</anchorfile>
      <anchor>a75ba2e2a8034c56afccbe27e5be43cde</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>createControl</name>
      <anchorfile>classActiveXControlComponent.html</anchorfile>
      <anchor>ae54c9bc9f943e8cd566d88fd777febdb</anchor>
      <arglist>(const void *controlIID)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deleteControl</name>
      <anchorfile>classActiveXControlComponent.html</anchorfile>
      <anchor>ac2d524d7b6a6c17611e9aaff213f3443</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isControlOpen</name>
      <anchorfile>classActiveXControlComponent.html</anchorfile>
      <anchor>a867c83a3cd08dcea5c94ac0fd25abc6e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>queryInterface</name>
      <anchorfile>classActiveXControlComponent.html</anchorfile>
      <anchor>aec74d476e939d707b578c32cdd5cebd3</anchor>
      <arglist>(const void *iid) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMouseEventsAllowed</name>
      <anchorfile>classActiveXControlComponent.html</anchorfile>
      <anchor>a1fe356a2de0bc7713efbe25c4f7a1066</anchor>
      <arglist>(bool eventsCanReachControl)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>areMouseEventsAllowed</name>
      <anchorfile>classActiveXControlComponent.html</anchorfile>
      <anchor>a763464ac5f6a4fa71dd81c738659dd95</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>paint</name>
      <anchorfile>classActiveXControlComponent.html</anchorfile>
      <anchor>af355620074bfabfa66266c25a589bc4d</anchor>
      <arglist>(Graphics &amp;) override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Component</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a5ee1827aaa22388d22da5200b70eeeee</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Component</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a2e9aa4348314d981f05f67397ad2f872</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Component</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a8e2e31d288ccd68aae89897d3068f594</anchor>
      <arglist>(const String &amp;componentName) noexcept</arglist>
    </member>
    <member kind="function">
      <type>const String &amp;</type>
      <name>getName</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a9d410bec5641d596bb8dbcf95d8b46a5</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setName</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a64d1ad9a0f8f0d1757e62ac738b36b35</anchor>
      <arglist>(const String &amp;newName)</arglist>
    </member>
    <member kind="function">
      <type>const String &amp;</type>
      <name>getComponentID</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a93a0bfdc298b93992166b081b122665b</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setComponentID</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>ac41c215031a087064add6d3a180abd1d</anchor>
      <arglist>(const String &amp;newID)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setVisible</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>ac8483af6fe4dc3254e7176df0d8e9f7a</anchor>
      <arglist>(bool shouldBeVisible)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isVisible</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a7ffb3de137ac4028e430a445c62a2d01</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>visibilityChanged</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a3859d7aacb18fd51b2fc3e0c51680d1c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isShowing</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>acbbdd1274a2d0e9447e42c7ee7753dfe</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addToDesktop</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>ad717da76012d971197fd8cf943f3e721</anchor>
      <arglist>(int windowStyleFlags, void *nativeWindowToAttachTo=nullptr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeFromDesktop</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a3eb22f7e39f71fdad3e84a8700807a82</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isOnDesktop</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a854420c3141bb90e440af6c7bc1bd360</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>ComponentPeer *</type>
      <name>getPeer</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>af425f521cbdf82b13afb9f13ca0ced05</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>userTriedToCloseWindow</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a543e70d5a3ff75cc3facb476f4cdb131</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>minimisationStateChanged</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>aafbf3cf52e606a66da16ffc85acdd383</anchor>
      <arglist>(bool isNowMinimised)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual float</type>
      <name>getDesktopScaleFactor</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>aae4aed8bee7514dba48cca1e55e19d43</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>toFront</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>ace6d99879585ba31a4212431d01d00f5</anchor>
      <arglist>(bool shouldAlsoGainFocus)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>toBack</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>ae9cd68d901dd4426b27c6c40f4759d4c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>toBehind</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a1b0cca8b9a9fea673aefc84a42602bcd</anchor>
      <arglist>(Component *other)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAlwaysOnTop</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a9ec074c0a1a25014c235a5ebafdbaaf7</anchor>
      <arglist>(bool shouldStayOnTop)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isAlwaysOnTop</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>ad3c16a8cd68a73f9765da3e48db86801</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getX</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a882733448ca364ba8f493c6301800572</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getY</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a62b2b824feafc399c8360876a43eb18d</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getWidth</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a146a947eb5d4b2e08f8e91b2e3f706c1</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getHeight</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a42c61c2d914e55b2395f6a84cf8e8aa2</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getRight</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a9f0b1e0ff5dfe85d0c4f611a93f2b78c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Point&lt; int &gt;</type>
      <name>getPosition</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>afa55ec8b0cdda88f6273e5949431288b</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getBottom</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>af8ace323af75859a134ae82ab589c9d7</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const Rectangle&lt; int &gt; &amp;</type>
      <name>getBounds</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>ad01eb84d8a989eb238bbf69aaf09e7ee</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Rectangle&lt; int &gt;</type>
      <name>getLocalBounds</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>aecc40b8a244527fcb142213151b6d00d</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Rectangle&lt; int &gt;</type>
      <name>getBoundsInParent</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a7bec78144c5f28eb78ce1550b1c58614</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getScreenX</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a0a6907c2907bab645de49c096c00fd50</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getScreenY</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a9d3bf0e97527b4fcdb6d0593b191c9d5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Point&lt; int &gt;</type>
      <name>getScreenPosition</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a27d728d223948282634429c3ad6f0a6c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Rectangle&lt; int &gt;</type>
      <name>getScreenBounds</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>af31d8d231a508755a6afaa2656eb66cb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Point&lt; int &gt;</type>
      <name>getLocalPoint</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a69c87aead08da3027f60f9438f1cc4b2</anchor>
      <arglist>(const Component *sourceComponent, Point&lt; int &gt; pointRelativeToSourceComponent) const </arglist>
    </member>
    <member kind="function">
      <type>Point&lt; float &gt;</type>
      <name>getLocalPoint</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>aee9413b254c48420ca212d542d023a36</anchor>
      <arglist>(const Component *sourceComponent, Point&lt; float &gt; pointRelativeToSourceComponent) const </arglist>
    </member>
    <member kind="function">
      <type>Rectangle&lt; int &gt;</type>
      <name>getLocalArea</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>ad430b1614d5cca921dc344641b584675</anchor>
      <arglist>(const Component *sourceComponent, const Rectangle&lt; int &gt; &amp;areaRelativeToSourceComponent) const </arglist>
    </member>
    <member kind="function">
      <type>Point&lt; int &gt;</type>
      <name>localPointToGlobal</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a275a896a2d25a6eb1624ba33345ab2cb</anchor>
      <arglist>(Point&lt; int &gt; localPoint) const </arglist>
    </member>
    <member kind="function">
      <type>Point&lt; float &gt;</type>
      <name>localPointToGlobal</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>aaec6ae5420b38f9ea7448a1b015d78c5</anchor>
      <arglist>(Point&lt; float &gt; localPoint) const </arglist>
    </member>
    <member kind="function">
      <type>Rectangle&lt; int &gt;</type>
      <name>localAreaToGlobal</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a9ad906ec22da2091eed7b65b21dc4ee9</anchor>
      <arglist>(const Rectangle&lt; int &gt; &amp;localArea) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTopLeftPosition</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a46f3b243e2ff2d000285c8642be7ea0a</anchor>
      <arglist>(int x, int y)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTopLeftPosition</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a5c86db4e969d69acc78ea3ee899cedff</anchor>
      <arglist>(Point&lt; int &gt; newTopLeftPosition)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTopRightPosition</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a28d61a4aea9791ab0b4d3cc4bed17650</anchor>
      <arglist>(int x, int y)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSize</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>af7e0443344448fcbbefc2b3dd985e43f</anchor>
      <arglist>(int newWidth, int newHeight)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBounds</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a64cbeee83a441e20ed5e7acb600ae107</anchor>
      <arglist>(int x, int y, int width, int height)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBounds</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>aaddf6f72515109d53cb671d5292bea3f</anchor>
      <arglist>(const Rectangle&lt; int &gt; &amp;newBounds)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBounds</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>afff8d34ac49e7303e60cd6cfcd68e8f6</anchor>
      <arglist>(const RelativeRectangle &amp;newBounds)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBounds</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a821833808f451753df397802d9d6160a</anchor>
      <arglist>(const String &amp;newBoundsExpression)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBoundsRelative</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a8752a76d1d0b2b27af1da1169ed5c534</anchor>
      <arglist>(float proportionalX, float proportionalY, float proportionalWidth, float proportionalHeight)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBoundsInset</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a0bdbe4ff05b03ddde7d87be82d5b0d15</anchor>
      <arglist>(const BorderSize&lt; int &gt; &amp;borders)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBoundsToFit</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a104daed5d4a04cd0b50ecb8c11b1c856</anchor>
      <arglist>(int x, int y, int width, int height, Justification justification, bool onlyReduceInSize)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCentrePosition</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>ada48e2fac4a8bd49ee8fe567309e41b0</anchor>
      <arglist>(int x, int y)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCentreRelative</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>ad2d539dc4d5a43cf828e03ab46f0db58</anchor>
      <arglist>(float x, float y)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>centreWithSize</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>abb58dc5a1f89822e4a5dcae2a538a8a7</anchor>
      <arglist>(int width, int height)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTransform</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a42d13229962acb1cdf4328c4a490ffef</anchor>
      <arglist>(const AffineTransform &amp;transform)</arglist>
    </member>
    <member kind="function">
      <type>AffineTransform</type>
      <name>getTransform</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>aff26a3fbb1469a6a8a8844daf8806060</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isTransformed</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a50a4de1bca6c487a8fa899f1b721e1d5</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>proportionOfWidth</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>ab2def9de34b650c5384f6bc040daa6a5</anchor>
      <arglist>(float proportion) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>proportionOfHeight</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a5d5356b8ad166fa48273dd90980ab3aa</anchor>
      <arglist>(float proportion) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getParentWidth</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a9ac83033387393ae0f8b85d8fc8d6dcb</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getParentHeight</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a39186f5a14d80f75e279d40846221b16</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Rectangle&lt; int &gt;</type>
      <name>getParentMonitorArea</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a1597e347c09716ce608257e4a3e08bdf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumChildComponents</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>afa33580cab86ac3b80c9c1f9d85ad81d</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Component *</type>
      <name>getChildComponent</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a9a86caea9a03be32d7a6b6dfbd09d09f</anchor>
      <arglist>(int index) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getIndexOfChildComponent</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a00c1dcf8a0a926da17daef178ca63426</anchor>
      <arglist>(const Component *child) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Component *</type>
      <name>findChildWithID</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a5607d97a62a8c9d8d1d28ce3b31dd764</anchor>
      <arglist>(StringRef componentID) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addChildComponent</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a3340a63ebd9f3a9df41bc0e8fbe3bf0c</anchor>
      <arglist>(Component *child, int zOrder=-1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addChildComponent</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>ad3cdf7ff7e9c595a25f3a4427e1a222e</anchor>
      <arglist>(Component &amp;child, int zOrder=-1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addAndMakeVisible</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a909c90277e8e95db68001a94e06b83bc</anchor>
      <arglist>(Component *child, int zOrder=-1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addAndMakeVisible</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a13417b80dfd035f5da81f1a473ef0f15</anchor>
      <arglist>(Component &amp;child, int zOrder=-1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addChildAndSetID</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a29a541ea49fafdb29fb17ebc4cddd584</anchor>
      <arglist>(Component *child, const String &amp;componentID)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeChildComponent</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a221324c67c9fb048895b8730dbf1b642</anchor>
      <arglist>(Component *childToRemove)</arglist>
    </member>
    <member kind="function">
      <type>Component *</type>
      <name>removeChildComponent</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a9f27c66bb660ca98e1713878db39bdfd</anchor>
      <arglist>(int childIndexToRemove)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeAllChildren</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a72ee4d44ce3b3954e8a00e5225201b6d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deleteAllChildren</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>abc8f8338a400c20d5e941ea3a1f67f7b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Component *</type>
      <name>getParentComponent</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>ac4d430194f6637607b1af8631d7166e7</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>TargetClass *</type>
      <name>findParentComponentOfClass</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a015b46a3de96f2de006437c04fec7378</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Component *</type>
      <name>getTopLevelComponent</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a64415a8c5911f94475b5c624598adfa8</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isParentOf</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a2fc08a04c79abc21d65c70855b792ab9</anchor>
      <arglist>(const Component *possibleChild) const noexcept</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parentHierarchyChanged</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a83f298a05d7f26a6e50e45dd37eb6313</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>childrenChanged</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a2bbc6da3479a1c3f6e711f4caf9edafb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>hitTest</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a2da9631236e1cbf1b340454209a6c9e0</anchor>
      <arglist>(int x, int y)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setInterceptsMouseClicks</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>ac9fdcb595c1878201a641de2e1159aec</anchor>
      <arglist>(bool allowClicksOnThisComponent, bool allowClicksOnChildComponents) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getInterceptsMouseClicks</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a219f9c96e896dfbbe3fb967a57297f14</anchor>
      <arglist>(bool &amp;allowsClicksOnThisComponent, bool &amp;allowsClicksOnChildComponents) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a6b697f6caaa753756251b4eb5ece302b</anchor>
      <arglist>(Point&lt; int &gt; localPoint)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>reallyContains</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>aa8d8eb035156e46e6264f600097b1cc1</anchor>
      <arglist>(Point&lt; int &gt; localPoint, bool returnTrueIfWithinAChild)</arglist>
    </member>
    <member kind="function">
      <type>Component *</type>
      <name>getComponentAt</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a29245735a161cee86ee0df0ccde9512a</anchor>
      <arglist>(int x, int y)</arglist>
    </member>
    <member kind="function">
      <type>Component *</type>
      <name>getComponentAt</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a54676dadea528187d52fa8c98d08231d</anchor>
      <arglist>(Point&lt; int &gt; position)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>repaint</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>af3ab3eabec93dd60faf983370f3a1206</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>repaint</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>af2a079621367cdf3755d708b4dbbc820</anchor>
      <arglist>(int x, int y, int width, int height)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>repaint</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a756adec76560d1ae66b1448814828531</anchor>
      <arglist>(const Rectangle&lt; int &gt; &amp;area)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBufferedToImage</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>af19bbc2186e3297ddd55c328e46c014b</anchor>
      <arglist>(bool shouldBeBuffered)</arglist>
    </member>
    <member kind="function">
      <type>Image</type>
      <name>createComponentSnapshot</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a9a5c8fc0c5c69bda41a23c351e2d5164</anchor>
      <arglist>(const Rectangle&lt; int &gt; &amp;areaToGrab, bool clipImageToComponentBounds=true, float scaleFactor=1.0f)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>paintEntireComponent</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a2c960bd5ec5ac76d18e82b6883096714</anchor>
      <arglist>(Graphics &amp;context, bool ignoreAlphaLevel)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPaintingIsUnclipped</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>afd2216ecd5029923097d6baabab400ec</anchor>
      <arglist>(bool shouldPaintWithoutClipping) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setComponentEffect</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a06800d0a55016e738c55078d82ef49fd</anchor>
      <arglist>(ImageEffectFilter *newEffect)</arglist>
    </member>
    <member kind="function">
      <type>ImageEffectFilter *</type>
      <name>getComponentEffect</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>af92051347bc323176011c16f8a53bf4c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>LookAndFeel &amp;</type>
      <name>getLookAndFeel</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>adf9083590923e021b195985a562d458e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLookAndFeel</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a6f2c10cd9840844a5be16e5deeef6f50</anchor>
      <arglist>(LookAndFeel *newLookAndFeel)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>lookAndFeelChanged</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a74af5830b815f6f985768a5673d01cf2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sendLookAndFeelChange</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>ac314d2449213d7942eca083addfcd097</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOpaque</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a7320d543cba40183c894474ab78798ea</anchor>
      <arglist>(bool shouldBeOpaque)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isOpaque</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a6ef077ace37bcd13d033305e8875d4e7</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBroughtToFrontOnMouseClick</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a2e31d54832bfa8b916fef77c4d9eb649</anchor>
      <arglist>(bool shouldBeBroughtToFront) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isBroughtToFrontOnMouseClick</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>aa8f9bdf4bef08d89b75b173421fae668</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setWantsKeyboardFocus</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a6a1f21a76b971d54870cb5c32c041055</anchor>
      <arglist>(bool wantsFocus) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getWantsKeyboardFocus</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>af3618b8c0d0583705db9918f23784833</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMouseClickGrabsKeyboardFocus</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a5e27530ab343f52b524c1c3f1a1d98eb</anchor>
      <arglist>(bool shouldGrabFocus)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getMouseClickGrabsKeyboardFocus</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a9efe458e504e68d52637f969900158b2</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>grabKeyboardFocus</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a91886a0e276d27719fa8866a95306571</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasKeyboardFocus</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>af4f079e1c0e0140ac364561cbe458a20</anchor>
      <arglist>(bool trueIfChildIsFocused) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>moveKeyboardFocusToSibling</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a2be625dadff73d1ec003cb06749ba6d6</anchor>
      <arglist>(bool moveToNext)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual KeyboardFocusTraverser *</type>
      <name>createFocusTraverser</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a7826c4e247eb6a6901211741a3e1dca3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getExplicitFocusOrder</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>af86bf43fd37ca2592cf8b482cd65f901</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setExplicitFocusOrder</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>acea5b1758143ff5815fd13ae57f2172e</anchor>
      <arglist>(int newFocusOrderIndex)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFocusContainer</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a35b455090a35a07ab832582a635425a3</anchor>
      <arglist>(bool shouldBeFocusContainer) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isFocusContainer</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a31a41d721888e3ac78659e4815294ed1</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEnabled</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a0e12726e34fdd284f036922597914bb3</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEnabled</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a6f956f690d72256838146c7dfe99bc0e</anchor>
      <arglist>(bool shouldBeEnabled)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>enablementChanged</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a8e5e39d3d7e2b8be4e78454ec4a5f584</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getAlpha</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a1fa7fae9983fed145b733d809dc7b2e5</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAlpha</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a1b9329a87c71ed01319071e0fedac128</anchor>
      <arglist>(float newAlpha)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>alphaChanged</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>af83c72f9c98476811522ba8cad855003</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMouseCursor</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>ab8c631fc3fb881ca94a9b7edcf58636f</anchor>
      <arglist>(const MouseCursor &amp;cursorType)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual MouseCursor</type>
      <name>getMouseCursor</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a712ed320619d48542de733c086f4fd3e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateMouseCursor</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a03057aba4ac79272f105e8839582309c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>paintOverChildren</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>aa15dc77c06b5a0a4192090b4a323f79c</anchor>
      <arglist>(Graphics &amp;g)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>mouseMove</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>ad2cfbadc42d5c2124f67ae181de1234e</anchor>
      <arglist>(const MouseEvent &amp;event) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>mouseEnter</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a525b16845ffacc71c7c37a72f68feccc</anchor>
      <arglist>(const MouseEvent &amp;event) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>mouseExit</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a16a0c88e82e5b71ed8cc7c7b3de37cb2</anchor>
      <arglist>(const MouseEvent &amp;event) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>mouseDown</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a8504490979c2b4a6fdf02471b03a78f6</anchor>
      <arglist>(const MouseEvent &amp;event) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>mouseDrag</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a32ebd26be9c9bc56dd942071227d799d</anchor>
      <arglist>(const MouseEvent &amp;event) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>mouseUp</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a9ef1d5efbd2b9c581c59ad75fb574fd4</anchor>
      <arglist>(const MouseEvent &amp;event) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>mouseDoubleClick</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a90a5f41210643598f6fdd5013800e5d0</anchor>
      <arglist>(const MouseEvent &amp;event) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>mouseWheelMove</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a1bb56b659ce36b629397da5837595ef8</anchor>
      <arglist>(const MouseEvent &amp;event, const MouseWheelDetails &amp;wheel) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>mouseMagnify</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>abde4246acd5f0289785daf92b8c87d81</anchor>
      <arglist>(const MouseEvent &amp;event, float scaleFactor)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRepaintsOnMouseActivity</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a7845e402a21d2b86d8c4ec48bc7c93b1</anchor>
      <arglist>(bool shouldRepaint) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addMouseListener</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>ae45db6bb7d7826eb7e936c21fec105ce</anchor>
      <arglist>(MouseListener *newListener, bool wantsEventsForAllNestedChildComponents)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeMouseListener</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a423c89ca5c8622712202c30cb7a5a69c</anchor>
      <arglist>(MouseListener *listenerToRemove)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addKeyListener</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a4ec1b609c39c54434f746cefffa6ce3f</anchor>
      <arglist>(KeyListener *newListener)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeKeyListener</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a5287496e233768c197ad8d74484a85fc</anchor>
      <arglist>(KeyListener *listenerToRemove)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>keyPressed</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>ab063a5c631854864da09106abec78a86</anchor>
      <arglist>(const KeyPress &amp;key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>keyStateChanged</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>aeff4d2fdbae4d5974e43b62ab3c304f9</anchor>
      <arglist>(bool isKeyDown)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>modifierKeysChanged</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a4145c1c28dd2ae42b19c9c3e0a6aba7b</anchor>
      <arglist>(const ModifierKeys &amp;modifiers)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>focusGained</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a408d41f1499a2ebdd4bbc8d4004c7727</anchor>
      <arglist>(FocusChangeType cause)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>focusLost</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a36456ea9d5a14172d6e96527ec1f59c8</anchor>
      <arglist>(FocusChangeType cause)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>focusOfChildComponentChanged</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a67ef76b8080b9abb7efa0df358598a01</anchor>
      <arglist>(FocusChangeType cause)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isMouseOver</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a23db151357ed4a783c224f210d036e63</anchor>
      <arglist>(bool includeChildren=false) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isMouseButtonDown</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a0944e1751f32260afd5bd2a9fcd1a5b7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isMouseOverOrDragging</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a39e6cb0b07bf16648daa51b2c75be983</anchor>
      <arglist>(bool includeChildren=false) const </arglist>
    </member>
    <member kind="function">
      <type>Point&lt; int &gt;</type>
      <name>getMouseXYRelative</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>afe14919a4a06747a9b7c98e2cff0ef3a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>resized</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>ad896183a68d71daf5816982d1fefd960</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>moved</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a1b94f2816dc8bc20473620e0db0e8246</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>childBoundsChanged</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a081b2618e5169d656167614bee91defe</anchor>
      <arglist>(Component *child)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parentSizeChanged</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>aefdce73a764c48363e82b22c32b0812e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>broughtToFront</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a4bf084bcf5b0e4398ee3a0007f803865</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addComponentListener</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a51cb09159299964cef7b975185cf400d</anchor>
      <arglist>(ComponentListener *newListener)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeComponentListener</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a7a74ad0359e05321223f1d09bcfddddd</anchor>
      <arglist>(ComponentListener *listenerToRemove)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>postCommandMessage</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a005628ba100dc23d179bff98bd419eb5</anchor>
      <arglist>(int commandId)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handleCommandMessage</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a9ba6fa31d1397c7e90050b2cd4f2089b</anchor>
      <arglist>(int commandId)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>runModalLoop</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a363364f6ae4f1a20abd60493c6854829</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enterModalState</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a0e7be8c456a663615eb389ecd10b2c04</anchor>
      <arglist>(bool takeKeyboardFocus=true, ModalComponentManager::Callback *callback=nullptr, bool deleteWhenDismissed=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>exitModalState</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a686e2440370ff4a97c7a7851907be650</anchor>
      <arglist>(int returnValue)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isCurrentlyModal</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a489ebde1970d6a2571bae5152b396267</anchor>
      <arglist>(bool onlyConsiderForemostModalComponent=true) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isCurrentlyBlockedByAnotherModalComponent</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>ad18ec802aa575cf016a7c62f12e0edf9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>canModalEventBeSentToComponent</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>abec1d60cfacf16eab602dff06932fbca</anchor>
      <arglist>(const Component *targetComponent)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>inputAttemptWhenModal</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a260e46fb72d4b3210bc46a658a21fbb5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>NamedValueSet &amp;</type>
      <name>getProperties</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a23985453622396b6037eb5ec38dbd398</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const NamedValueSet &amp;</type>
      <name>getProperties</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>adf32701df78ef2dd10793b11a979a696</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Colour</type>
      <name>findColour</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a5e4c30e25faebe1d0854f96623d6d890</anchor>
      <arglist>(int colourId, bool inheritFromParent=false) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setColour</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a875e6cc05407cea2d6a04dced62e13cd</anchor>
      <arglist>(int colourId, Colour newColour)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeColour</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a7c3179a6a241477c590ea23ff99e867d</anchor>
      <arglist>(int colourId)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isColourSpecified</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a499f4e75a4c8b7fcc2aded220ca68769</anchor>
      <arglist>(int colourId) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyAllExplicitColoursTo</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>ad359c5a74a8f05c37418d169beae95ce</anchor>
      <arglist>(Component &amp;target) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>colourChanged</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>adfab11b32c622b327a823c6565f637f4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual MarkerList *</type>
      <name>getMarkers</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a2c2b7f738ccfcf541b72a6ce8283fce0</anchor>
      <arglist>(bool xAxis)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>getWindowHandle</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a0d340d822e9a91fc665d73bbe1e91d72</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Positioner *</type>
      <name>getPositioner</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a4fb6cbf8dc543319c42a37590e0d0bd8</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPositioner</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a27359d626e9ab896af71cd57c1ff0915</anchor>
      <arglist>(Positioner *newPositioner)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCachedComponentImage</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a9a19c5cf59573243d77a94bb3abea722</anchor>
      <arglist>(CachedComponentImage *newCachedImage)</arglist>
    </member>
    <member kind="function">
      <type>CachedComponentImage *</type>
      <name>getCachedComponentImage</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a9338014ab407f6b41c14495ab2a7fc4d</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>JUCE_DEPRECATED</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>acb33b4aed9d981ae1a477c09ffa78fc7</anchor>
      <arglist>(Point&lt; int &gt; relativePositionToGlobal(Point&lt; int &gt;) const)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>JUCE_DEPRECATED</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>ae1e72f4e27817c000eabe164fd55c7fc</anchor>
      <arglist>(Point&lt; int &gt; globalPositionToRelative(Point&lt; int &gt;) const)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>JUCE_DEPRECATED</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a947f10bbb7a68691de5d3f8af394c5a9</anchor>
      <arglist>(Point&lt; int &gt; relativePositionToOtherComponent(const Component *, Point&lt; int &gt;) const)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MouseListener</name>
      <anchorfile>classMouseListener.html</anchorfile>
      <anchor>a9d4fc9354c8e4109c9b8f0d4b50dd440</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>FocusChangeType</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a7fd775ea6b1190d5d694fdffa539dfac</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>focusChangedByMouseClick</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a7fd775ea6b1190d5d694fdffa539dfaca350527c976c183a1543958e0698572df</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>focusChangedByTabKey</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a7fd775ea6b1190d5d694fdffa539dfaca1a14be78d7c4bdf7cdd9a08100bb6a43</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>focusChangedDirectly</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a7fd775ea6b1190d5d694fdffa539dfacad71927268411a4afe7f75bf6034add04</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Component *JUCE_CALLTYPE</type>
      <name>getCurrentlyFocusedComponent</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a7030de7a58ec40e43ec902d6bb8aaf7a</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void JUCE_CALLTYPE</type>
      <name>unfocusAllComponents</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a34c592c531e8c996dee1bffb2884ca4e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void JUCE_CALLTYPE</type>
      <name>beginDragAutoRepeat</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a54a125231707956e740b295f2622787b</anchor>
      <arglist>(int millisecondsBetweenCallbacks)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool JUCE_CALLTYPE</type>
      <name>isMouseButtonDownAnywhere</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>ac3184a52027ad9106185d594c522d9d0</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int JUCE_CALLTYPE</type>
      <name>getNumCurrentlyModalComponents</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>ae58129a62eda13ca8987072cd9c62359</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Component *JUCE_CALLTYPE</type>
      <name>getCurrentlyModalComponent</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>af281d9bc711b70c43ae5891a35165cb3</anchor>
      <arglist>(int index=0) noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AffineTransform</name>
    <filename>classAffineTransform.html</filename>
    <member kind="function">
      <type></type>
      <name>AffineTransform</name>
      <anchorfile>classAffineTransform.html</anchorfile>
      <anchor>af920ca0af025f2c337ce6342dc127c12</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AffineTransform</name>
      <anchorfile>classAffineTransform.html</anchorfile>
      <anchor>a1a35a2dab8547478314c2a3fcfa27efd</anchor>
      <arglist>(const AffineTransform &amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AffineTransform</name>
      <anchorfile>classAffineTransform.html</anchorfile>
      <anchor>a22e8e27cf365cbd18474863a840b5f0e</anchor>
      <arglist>(float mat00, float mat01, float mat02, float mat10, float mat11, float mat12) noexcept</arglist>
    </member>
    <member kind="function">
      <type>AffineTransform &amp;</type>
      <name>operator=</name>
      <anchorfile>classAffineTransform.html</anchorfile>
      <anchor>a8c962516af566d6ea031b3164d69597e</anchor>
      <arglist>(const AffineTransform &amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classAffineTransform.html</anchorfile>
      <anchor>a85a6a611c89f82b6300d05c400d153a6</anchor>
      <arglist>(const AffineTransform &amp;other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classAffineTransform.html</anchorfile>
      <anchor>aa974d8c3291d4d6aada4dbe20f429e32</anchor>
      <arglist>(const AffineTransform &amp;other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>transformPoint</name>
      <anchorfile>classAffineTransform.html</anchorfile>
      <anchor>ade9df23412c79acaf89f5dbdf7da6add</anchor>
      <arglist>(ValueType &amp;x, ValueType &amp;y) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>transformPoints</name>
      <anchorfile>classAffineTransform.html</anchorfile>
      <anchor>a991a8c5f94062033d7a5e75dff84ff72</anchor>
      <arglist>(ValueType &amp;x1, ValueType &amp;y1, ValueType &amp;x2, ValueType &amp;y2) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>transformPoints</name>
      <anchorfile>classAffineTransform.html</anchorfile>
      <anchor>aa4083c3ff6cab1119de654554cade3b0</anchor>
      <arglist>(ValueType &amp;x1, ValueType &amp;y1, ValueType &amp;x2, ValueType &amp;y2, ValueType &amp;x3, ValueType &amp;y3) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>AffineTransform</type>
      <name>translated</name>
      <anchorfile>classAffineTransform.html</anchorfile>
      <anchor>a6b046d2b195ae6b35277abbfae06521c</anchor>
      <arglist>(float deltaX, float deltaY) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>AffineTransform</type>
      <name>translated</name>
      <anchorfile>classAffineTransform.html</anchorfile>
      <anchor>a8ee639be7f28764e6b0e0c96c6402497</anchor>
      <arglist>(PointType delta) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>AffineTransform</type>
      <name>withAbsoluteTranslation</name>
      <anchorfile>classAffineTransform.html</anchorfile>
      <anchor>a2d9c7f713d4130aa5a08c4f04c30b483</anchor>
      <arglist>(float translationX, float translationY) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>AffineTransform</type>
      <name>rotated</name>
      <anchorfile>classAffineTransform.html</anchorfile>
      <anchor>a0dcf19186a3e5964e1bbf39843f644dd</anchor>
      <arglist>(float angleInRadians) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>AffineTransform</type>
      <name>rotated</name>
      <anchorfile>classAffineTransform.html</anchorfile>
      <anchor>a46df67778a846c4ca39e43bd474e68a0</anchor>
      <arglist>(float angleInRadians, float pivotX, float pivotY) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>AffineTransform</type>
      <name>scaled</name>
      <anchorfile>classAffineTransform.html</anchorfile>
      <anchor>a3a690b15420df18b0b704ab03999f298</anchor>
      <arglist>(float factorX, float factorY) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>AffineTransform</type>
      <name>scaled</name>
      <anchorfile>classAffineTransform.html</anchorfile>
      <anchor>a9463610a39d62866191e8ff06fb9d39b</anchor>
      <arglist>(float factor) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>AffineTransform</type>
      <name>scaled</name>
      <anchorfile>classAffineTransform.html</anchorfile>
      <anchor>ae9d7861c32dd8db2e8d9fd03fd059083</anchor>
      <arglist>(float factorX, float factorY, float pivotX, float pivotY) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>AffineTransform</type>
      <name>sheared</name>
      <anchorfile>classAffineTransform.html</anchorfile>
      <anchor>acda096f1cb0e290d6c0b1f70712c4414</anchor>
      <arglist>(float shearX, float shearY) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>AffineTransform</type>
      <name>inverted</name>
      <anchorfile>classAffineTransform.html</anchorfile>
      <anchor>ab6a5ffe9dc093892f906f99f3c931ec3</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>AffineTransform</type>
      <name>followedBy</name>
      <anchorfile>classAffineTransform.html</anchorfile>
      <anchor>a28befc816c47e965b59eec938f9380b3</anchor>
      <arglist>(const AffineTransform &amp;other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isIdentity</name>
      <anchorfile>classAffineTransform.html</anchorfile>
      <anchor>a0763b5aa59da4d6ec25875baea87cc18</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSingularity</name>
      <anchorfile>classAffineTransform.html</anchorfile>
      <anchor>a6a5398b6aef3c585ae13c84434d6d498</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isOnlyTranslation</name>
      <anchorfile>classAffineTransform.html</anchorfile>
      <anchor>a20078c305f476e1387fa81dae43782db</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getTranslationX</name>
      <anchorfile>classAffineTransform.html</anchorfile>
      <anchor>ad765fcfb02f47bd95b44735b8ca3280c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getTranslationY</name>
      <anchorfile>classAffineTransform.html</anchorfile>
      <anchor>af249bc3a5c385cdc193723cc709bc23d</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getScaleFactor</name>
      <anchorfile>classAffineTransform.html</anchorfile>
      <anchor>a7092c4d86f1fdbcf41dfad2660381072</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static AffineTransform</type>
      <name>translation</name>
      <anchorfile>classAffineTransform.html</anchorfile>
      <anchor>a3bfac94ec99d54ee375d6e1326477271</anchor>
      <arglist>(float deltaX, float deltaY) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static AffineTransform</type>
      <name>translation</name>
      <anchorfile>classAffineTransform.html</anchorfile>
      <anchor>a8d0852d6dba218323f747eb208ecf2cb</anchor>
      <arglist>(PointType delta) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static AffineTransform</type>
      <name>rotation</name>
      <anchorfile>classAffineTransform.html</anchorfile>
      <anchor>a4428d9a178f059264fdd7e8034f8d1c3</anchor>
      <arglist>(float angleInRadians) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static AffineTransform</type>
      <name>rotation</name>
      <anchorfile>classAffineTransform.html</anchorfile>
      <anchor>aa8cbff1ba0c430acf5294cab160585a2</anchor>
      <arglist>(float angleInRadians, float pivotX, float pivotY) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static AffineTransform</type>
      <name>scale</name>
      <anchorfile>classAffineTransform.html</anchorfile>
      <anchor>a43665170b0ec3ef0d1afef4053e77a24</anchor>
      <arglist>(float factorX, float factorY) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static AffineTransform</type>
      <name>scale</name>
      <anchorfile>classAffineTransform.html</anchorfile>
      <anchor>a2aed67cb210a37cb685764d15fda582a</anchor>
      <arglist>(float factor) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static AffineTransform</type>
      <name>scale</name>
      <anchorfile>classAffineTransform.html</anchorfile>
      <anchor>a506816953bd50e1f45ba27abb14f6be9</anchor>
      <arglist>(float factorX, float factorY, float pivotX, float pivotY) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static AffineTransform</type>
      <name>shear</name>
      <anchorfile>classAffineTransform.html</anchorfile>
      <anchor>a5395b927f7ae3513aaf81b2f6f351c9d</anchor>
      <arglist>(float shearX, float shearY) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static AffineTransform</type>
      <name>verticalFlip</name>
      <anchorfile>classAffineTransform.html</anchorfile>
      <anchor>ad38b69840d4b176c50d7b5ffa77eca85</anchor>
      <arglist>(float height) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static AffineTransform</type>
      <name>fromTargetPoints</name>
      <anchorfile>classAffineTransform.html</anchorfile>
      <anchor>ae2cabd0be7385641d01c871744055876</anchor>
      <arglist>(float x00, float y00, float x10, float y10, float x01, float y01) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static AffineTransform</type>
      <name>fromTargetPoints</name>
      <anchorfile>classAffineTransform.html</anchorfile>
      <anchor>ababada136d963b70272d0792d2bbff70</anchor>
      <arglist>(float sourceX1, float sourceY1, float targetX1, float targetY1, float sourceX2, float sourceY2, float targetX2, float targetY2, float sourceX3, float sourceY3, float targetX3, float targetY3) noexcept</arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>mat00</name>
      <anchorfile>classAffineTransform.html</anchorfile>
      <anchor>a1e675f5137df72253566699cd385c7ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>mat01</name>
      <anchorfile>classAffineTransform.html</anchorfile>
      <anchor>ac253c675d087474d5fcb83d5b6025496</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>mat02</name>
      <anchorfile>classAffineTransform.html</anchorfile>
      <anchor>ae85f09ed42c7e82da72a11f9fe0a838a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>mat10</name>
      <anchorfile>classAffineTransform.html</anchorfile>
      <anchor>af75941aa8f1180b3b324732613780740</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>mat11</name>
      <anchorfile>classAffineTransform.html</anchorfile>
      <anchor>a808a65da0b88a09f0e2ac752fd2648ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>mat12</name>
      <anchorfile>classAffineTransform.html</anchorfile>
      <anchor>ae26718eb62e1240ad8f800f7e7ce3a74</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AiffAudioFormat</name>
    <filename>classAiffAudioFormat.html</filename>
    <base>AudioFormat</base>
    <member kind="function">
      <type></type>
      <name>AiffAudioFormat</name>
      <anchorfile>classAiffAudioFormat.html</anchorfile>
      <anchor>a3673ab24fc35a3960be374bbff6a0d80</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~AiffAudioFormat</name>
      <anchorfile>classAiffAudioFormat.html</anchorfile>
      <anchor>ac9dc64077a6e590b299e15c0896f4fd2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Array&lt; int &gt;</type>
      <name>getPossibleSampleRates</name>
      <anchorfile>classAiffAudioFormat.html</anchorfile>
      <anchor>aea2524c9614fc7ce875bcd5fae9d3c20</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>Array&lt; int &gt;</type>
      <name>getPossibleBitDepths</name>
      <anchorfile>classAiffAudioFormat.html</anchorfile>
      <anchor>a4421f9012880f4fe7346b045de8a6edc</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>canDoStereo</name>
      <anchorfile>classAiffAudioFormat.html</anchorfile>
      <anchor>a450613be95c1f8aba30ddd1fbc3ebe29</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>canDoMono</name>
      <anchorfile>classAiffAudioFormat.html</anchorfile>
      <anchor>ad792f6daeebc7896bcad0ccfdd6c20f0</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>canHandleFile</name>
      <anchorfile>classAiffAudioFormat.html</anchorfile>
      <anchor>abd2519a6aa41cce5cab3b60d19130848</anchor>
      <arglist>(const File &amp;fileToTest) override</arglist>
    </member>
    <member kind="function">
      <type>AudioFormatReader *</type>
      <name>createReaderFor</name>
      <anchorfile>classAiffAudioFormat.html</anchorfile>
      <anchor>a3f8509831819085c11ec5a7cc34a5a16</anchor>
      <arglist>(InputStream *sourceStream, bool deleteStreamIfOpeningFails) override</arglist>
    </member>
    <member kind="function">
      <type>MemoryMappedAudioFormatReader *</type>
      <name>createMemoryMappedReader</name>
      <anchorfile>classAiffAudioFormat.html</anchorfile>
      <anchor>a2520173ee0b21a2f61917670710ade40</anchor>
      <arglist>(const File &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>MemoryMappedAudioFormatReader *</type>
      <name>createMemoryMappedReader</name>
      <anchorfile>classAiffAudioFormat.html</anchorfile>
      <anchor>a94d7ffff90060f2964d96235b25ed1af</anchor>
      <arglist>(FileInputStream *) override</arglist>
    </member>
    <member kind="function">
      <type>AudioFormatWriter *</type>
      <name>createWriterFor</name>
      <anchorfile>classAiffAudioFormat.html</anchorfile>
      <anchor>aaabe107e88a1e6f374d9ac895185c665</anchor>
      <arglist>(OutputStream *streamToWriteTo, double sampleRateToUse, unsigned int numberOfChannels, int bitsPerSample, const StringPairArray &amp;metadataValues, int qualityOptionIndex) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~AudioFormat</name>
      <anchorfile>classAudioFormat.html</anchorfile>
      <anchor>aa8d7789f75b2d9640eadb0262abd1fc1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const String &amp;</type>
      <name>getFormatName</name>
      <anchorfile>classAudioFormat.html</anchorfile>
      <anchor>a8b33099d624ef043f53e4b0082800abf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const StringArray &amp;</type>
      <name>getFileExtensions</name>
      <anchorfile>classAudioFormat.html</anchorfile>
      <anchor>a1efaa8ebdc8c026fdaad727e766b311c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isCompressed</name>
      <anchorfile>classAudioFormat.html</anchorfile>
      <anchor>a507f233bee0df2059b74d032460de870</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StringArray</type>
      <name>getQualityOptions</name>
      <anchorfile>classAudioFormat.html</anchorfile>
      <anchor>af5140c58d4c58d5949a0792604a976c8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char *const</type>
      <name>appleOneShot</name>
      <anchorfile>classAiffAudioFormat.html</anchorfile>
      <anchor>a87b12965ce1ad1aa589f360b9e101c62</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char *const</type>
      <name>appleRootSet</name>
      <anchorfile>classAiffAudioFormat.html</anchorfile>
      <anchor>a9f25a210dab1aab2077575121ac722c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char *const</type>
      <name>appleRootNote</name>
      <anchorfile>classAiffAudioFormat.html</anchorfile>
      <anchor>a90cde1895684b0f9acc38dfd3d7fda74</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char *const</type>
      <name>appleBeats</name>
      <anchorfile>classAiffAudioFormat.html</anchorfile>
      <anchor>a6bb37fe682296874d508bead17cca803</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char *const</type>
      <name>appleDenominator</name>
      <anchorfile>classAiffAudioFormat.html</anchorfile>
      <anchor>afd67205870de9ed8615b6dbaf688ab7a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char *const</type>
      <name>appleNumerator</name>
      <anchorfile>classAiffAudioFormat.html</anchorfile>
      <anchor>af95c15fc92c5f95991a22cc7ec65cfac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char *const</type>
      <name>appleTag</name>
      <anchorfile>classAiffAudioFormat.html</anchorfile>
      <anchor>ae70d490b15000091780a97d9b1913f32</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char *const</type>
      <name>appleKey</name>
      <anchorfile>classAiffAudioFormat.html</anchorfile>
      <anchor>a0cc420a19cd83e233cc9a1318c081659</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>AudioFormat</name>
      <anchorfile>classAudioFormat.html</anchorfile>
      <anchor>ab892573311f3dd4de30e1794d1877ae0</anchor>
      <arglist>(String formatName, StringArray fileExtensions)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>AudioFormat</name>
      <anchorfile>classAudioFormat.html</anchorfile>
      <anchor>aca455ed30baa4047ac9c25873618c5c3</anchor>
      <arglist>(StringRef formatName, StringRef fileExtensions)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AlertWindow</name>
    <filename>classAlertWindow.html</filename>
    <base>TopLevelWindow</base>
    <class kind="struct">AlertWindow::LookAndFeelMethods</class>
    <member kind="enumeration">
      <type></type>
      <name>AlertIconType</name>
      <anchorfile>classAlertWindow.html</anchorfile>
      <anchor>a2582d1f79937cb47a6a3764c7d9bdba3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>NoIcon</name>
      <anchorfile>classAlertWindow.html</anchorfile>
      <anchor>a2582d1f79937cb47a6a3764c7d9bdba3a6b6648ee3f02f6832d897a214c647421</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>QuestionIcon</name>
      <anchorfile>classAlertWindow.html</anchorfile>
      <anchor>a2582d1f79937cb47a6a3764c7d9bdba3a63d1a179c412afc32f7f3c8061b238be</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>WarningIcon</name>
      <anchorfile>classAlertWindow.html</anchorfile>
      <anchor>a2582d1f79937cb47a6a3764c7d9bdba3a8af24c68ddba14cc97687e2b2b75f373</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>InfoIcon</name>
      <anchorfile>classAlertWindow.html</anchorfile>
      <anchor>a2582d1f79937cb47a6a3764c7d9bdba3a3a24dd7ddec3b6ec31d320aaa525e43f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>ColourIds</name>
      <anchorfile>classAlertWindow.html</anchorfile>
      <anchor>ad2f8b8ba50ce8a744e37e05e9a40dce1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>backgroundColourId</name>
      <anchorfile>classAlertWindow.html</anchorfile>
      <anchor>ad2f8b8ba50ce8a744e37e05e9a40dce1ad8174d9e6fb186697dba3b380b1195c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>textColourId</name>
      <anchorfile>classAlertWindow.html</anchorfile>
      <anchor>ad2f8b8ba50ce8a744e37e05e9a40dce1ae52947cad55bc25fee88e0e2a97d02c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>outlineColourId</name>
      <anchorfile>classAlertWindow.html</anchorfile>
      <anchor>ad2f8b8ba50ce8a744e37e05e9a40dce1a4ca5b0e9de7b0838cf1358a85b551d10</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AlertWindow</name>
      <anchorfile>classAlertWindow.html</anchorfile>
      <anchor>a881fc5e753335f28fad5144eca5c1a3b</anchor>
      <arglist>(const String &amp;title, const String &amp;message, AlertIconType iconType, Component *associatedComponent=nullptr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~AlertWindow</name>
      <anchorfile>classAlertWindow.html</anchorfile>
      <anchor>a3c76e1a1ce702a161064eebb134f1adc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>AlertIconType</type>
      <name>getAlertType</name>
      <anchorfile>classAlertWindow.html</anchorfile>
      <anchor>a55f336d14f2e388a01c958334bd382fd</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMessage</name>
      <anchorfile>classAlertWindow.html</anchorfile>
      <anchor>a726f6cb55274959235efa16a0d18f794</anchor>
      <arglist>(const String &amp;message)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addButton</name>
      <anchorfile>classAlertWindow.html</anchorfile>
      <anchor>a783bbf81186dc21addde7e0fdb6f8001</anchor>
      <arglist>(const String &amp;name, int returnValue, const KeyPress &amp;shortcutKey1=KeyPress(), const KeyPress &amp;shortcutKey2=KeyPress())</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumButtons</name>
      <anchorfile>classAlertWindow.html</anchorfile>
      <anchor>a4a13402031851ad78b07909d41ae5c4e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>triggerButtonClick</name>
      <anchorfile>classAlertWindow.html</anchorfile>
      <anchor>abc59507f5e2ad04933736a8643ba7ef7</anchor>
      <arglist>(const String &amp;buttonName)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEscapeKeyCancels</name>
      <anchorfile>classAlertWindow.html</anchorfile>
      <anchor>a3b03c4f645e3f847a3226ac36ac1678b</anchor>
      <arglist>(bool shouldEscapeKeyCancel)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addTextEditor</name>
      <anchorfile>classAlertWindow.html</anchorfile>
      <anchor>ad3de30e292b03b2204c6faaeea55b9a9</anchor>
      <arglist>(const String &amp;name, const String &amp;initialContents, const String &amp;onScreenLabel=String(), bool isPasswordBox=false)</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>getTextEditorContents</name>
      <anchorfile>classAlertWindow.html</anchorfile>
      <anchor>a01c80c81a97a0deacce7205a401a967d</anchor>
      <arglist>(const String &amp;nameOfTextEditor) const </arglist>
    </member>
    <member kind="function">
      <type>TextEditor *</type>
      <name>getTextEditor</name>
      <anchorfile>classAlertWindow.html</anchorfile>
      <anchor>a2210fe75191fb10657f64095cb274436</anchor>
      <arglist>(const String &amp;nameOfTextEditor) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addComboBox</name>
      <anchorfile>classAlertWindow.html</anchorfile>
      <anchor>a0e7c7b4fe85d7ed4cdf34167d513ed44</anchor>
      <arglist>(const String &amp;name, const StringArray &amp;items, const String &amp;onScreenLabel=String())</arglist>
    </member>
    <member kind="function">
      <type>ComboBox *</type>
      <name>getComboBoxComponent</name>
      <anchorfile>classAlertWindow.html</anchorfile>
      <anchor>aea82c357eb43eb15a6857452a579d838</anchor>
      <arglist>(const String &amp;nameOfList) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addTextBlock</name>
      <anchorfile>classAlertWindow.html</anchorfile>
      <anchor>a06c68ddf379fcd3247182d0fee87a7f4</anchor>
      <arglist>(const String &amp;text)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addProgressBarComponent</name>
      <anchorfile>classAlertWindow.html</anchorfile>
      <anchor>a9b7ccfa6a4b4d3e871d20b4690c35b34</anchor>
      <arglist>(double &amp;progressValue)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addCustomComponent</name>
      <anchorfile>classAlertWindow.html</anchorfile>
      <anchor>a18e5456aa067a106f8ecbb03dc01f032</anchor>
      <arglist>(Component *component)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumCustomComponents</name>
      <anchorfile>classAlertWindow.html</anchorfile>
      <anchor>af2526e588df3d21a77959e77ec97c4ff</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Component *</type>
      <name>getCustomComponent</name>
      <anchorfile>classAlertWindow.html</anchorfile>
      <anchor>a91b7ff614c484629c7c4033cc29acbf7</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function">
      <type>Component *</type>
      <name>removeCustomComponent</name>
      <anchorfile>classAlertWindow.html</anchorfile>
      <anchor>a9ea24f9c13a13253c0c73b4d35fbdb82</anchor>
      <arglist>(int index)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>containsAnyExtraComponents</name>
      <anchorfile>classAlertWindow.html</anchorfile>
      <anchor>a905adfc09c6a05eebe538f4a789aa952</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TopLevelWindow</name>
      <anchorfile>classTopLevelWindow.html</anchorfile>
      <anchor>a7d52a41e30bff8d342327abc4f476112</anchor>
      <arglist>(const String &amp;name, bool addToDesktop)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TopLevelWindow</name>
      <anchorfile>classTopLevelWindow.html</anchorfile>
      <anchor>a20277d9867a8e2fa56405a24b595e547</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isActiveWindow</name>
      <anchorfile>classTopLevelWindow.html</anchorfile>
      <anchor>a462b6b5a8b21a32645ee54b7a9676121</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>centreAroundComponent</name>
      <anchorfile>classTopLevelWindow.html</anchorfile>
      <anchor>a24c4beccd6e394c68a2def2e38a3213a</anchor>
      <arglist>(Component *componentToCentreAround, int width, int height)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDropShadowEnabled</name>
      <anchorfile>classTopLevelWindow.html</anchorfile>
      <anchor>aed7017ec50e075cca022b5c11ce5fdff</anchor>
      <arglist>(bool useShadow)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isDropShadowEnabled</name>
      <anchorfile>classTopLevelWindow.html</anchorfile>
      <anchor>a910577a0e16f9e80cca0ac41f61e6299</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUsingNativeTitleBar</name>
      <anchorfile>classTopLevelWindow.html</anchorfile>
      <anchor>a749fbd5e688ed8c9af3d0d99b21e18c8</anchor>
      <arglist>(bool useNativeTitleBar)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isUsingNativeTitleBar</name>
      <anchorfile>classTopLevelWindow.html</anchorfile>
      <anchor>a18da6a0cc04d665771cfaa3137d319c5</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addToDesktop</name>
      <anchorfile>classTopLevelWindow.html</anchorfile>
      <anchor>a016b200ff582129d0aa079cb0a9bfe05</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addToDesktop</name>
      <anchorfile>classTopLevelWindow.html</anchorfile>
      <anchor>adb20393a81bcbe731b274e4fcfd8a089</anchor>
      <arglist>(int windowStyleFlags, void *nativeWindowToAttachTo=nullptr) override</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void JUCE_CALLTYPE</type>
      <name>showMessageBox</name>
      <anchorfile>classAlertWindow.html</anchorfile>
      <anchor>afce17dd21af1f740f736b757b52eba0a</anchor>
      <arglist>(AlertIconType iconType, const String &amp;title, const String &amp;message, const String &amp;buttonText=String(), Component *associatedComponent=nullptr)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void JUCE_CALLTYPE</type>
      <name>showMessageBoxAsync</name>
      <anchorfile>classAlertWindow.html</anchorfile>
      <anchor>a575b1266a8dc9ce47803b581772c3f0c</anchor>
      <arglist>(AlertIconType iconType, const String &amp;title, const String &amp;message, const String &amp;buttonText=String(), Component *associatedComponent=nullptr, ModalComponentManager::Callback *callback=nullptr)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool JUCE_CALLTYPE</type>
      <name>showOkCancelBox</name>
      <anchorfile>classAlertWindow.html</anchorfile>
      <anchor>a4aa219f3d3cee59701b5a0ef187599de</anchor>
      <arglist>(AlertIconType iconType, const String &amp;title, const String &amp;message, const String &amp;button1Text=String(), const String &amp;button2Text=String(), Component *associatedComponent=nullptr, ModalComponentManager::Callback *callback=nullptr)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int JUCE_CALLTYPE</type>
      <name>showYesNoCancelBox</name>
      <anchorfile>classAlertWindow.html</anchorfile>
      <anchor>aa91c2902742b46fbb390420808cb1294</anchor>
      <arglist>(AlertIconType iconType, const String &amp;title, const String &amp;message, const String &amp;button1Text=String(), const String &amp;button2Text=String(), const String &amp;button3Text=String(), Component *associatedComponent=nullptr, ModalComponentManager::Callback *callback=nullptr)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool JUCE_CALLTYPE</type>
      <name>showNativeDialogBox</name>
      <anchorfile>classAlertWindow.html</anchorfile>
      <anchor>a796e868eb78c49ec3e7de0f220a5bd00</anchor>
      <arglist>(const String &amp;title, const String &amp;bodyText, bool isOkCancel)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>getNumTopLevelWindows</name>
      <anchorfile>classTopLevelWindow.html</anchorfile>
      <anchor>a33eeb6e6e7694cc2b2904664c60a5240</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static TopLevelWindow *</type>
      <name>getTopLevelWindow</name>
      <anchorfile>classTopLevelWindow.html</anchorfile>
      <anchor>a2ecfdbc04b0d815fe7edd44aeadac14a</anchor>
      <arglist>(int index) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static TopLevelWindow *</type>
      <name>getActiveTopLevelWindow</name>
      <anchorfile>classTopLevelWindow.html</anchorfile>
      <anchor>af17e4d21be7d375627f6339d479ec4d4</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>paint</name>
      <anchorfile>classAlertWindow.html</anchorfile>
      <anchor>a3b70db27d70ce9972928ece3b0f809ca</anchor>
      <arglist>(Graphics &amp;) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>mouseDown</name>
      <anchorfile>classAlertWindow.html</anchorfile>
      <anchor>a0aef30be23c4018bfc8e11407d11aaa8</anchor>
      <arglist>(const MouseEvent &amp;) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>mouseDrag</name>
      <anchorfile>classAlertWindow.html</anchorfile>
      <anchor>a16da21b6606246912135fd2e7cbc0bd1</anchor>
      <arglist>(const MouseEvent &amp;) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>keyPressed</name>
      <anchorfile>classAlertWindow.html</anchorfile>
      <anchor>ac12c82883bc4d054f7eb5b793c6425e5</anchor>
      <arglist>(const KeyPress &amp;) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>buttonClicked</name>
      <anchorfile>classAlertWindow.html</anchorfile>
      <anchor>ad2e031c2dc35670cdb06739d1cc5d3b4</anchor>
      <arglist>(Button *) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>lookAndFeelChanged</name>
      <anchorfile>classAlertWindow.html</anchorfile>
      <anchor>ac4c2559255171d141a30c8a04299c8c1</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>userTriedToCloseWindow</name>
      <anchorfile>classAlertWindow.html</anchorfile>
      <anchor>ac8263176929ac925f0e4aee768094c55</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>getDesktopWindowStyleFlags</name>
      <anchorfile>classAlertWindow.html</anchorfile>
      <anchor>ac746247dc73678fab3fbf4836c98e49e</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>activeWindowStatusChanged</name>
      <anchorfile>classTopLevelWindow.html</anchorfile>
      <anchor>a6d2a68ab02862e0dda13a5d1cf874142</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>focusOfChildComponentChanged</name>
      <anchorfile>classTopLevelWindow.html</anchorfile>
      <anchor>a98d203f03113f827d4f711e6c0a00a73</anchor>
      <arglist>(FocusChangeType) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>parentHierarchyChanged</name>
      <anchorfile>classTopLevelWindow.html</anchorfile>
      <anchor>aa97c47e56ebbb608a1e286962463dfe7</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>recreateDesktopWindow</name>
      <anchorfile>classTopLevelWindow.html</anchorfile>
      <anchor>a17ae4404a23e24e2859a396bc391ffc1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>visibilityChanged</name>
      <anchorfile>classTopLevelWindow.html</anchorfile>
      <anchor>a2981bd09f16f4e6fcb8db472761ac1de</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>AlertWindow::LookAndFeelMethods</name>
    <filename>structAlertWindow_1_1LookAndFeelMethods.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~LookAndFeelMethods</name>
      <anchorfile>structAlertWindow_1_1LookAndFeelMethods.html</anchorfile>
      <anchor>ae399a4c4a55e4d8595372fad1dfcadb2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual AlertWindow *</type>
      <name>createAlertWindow</name>
      <anchorfile>structAlertWindow_1_1LookAndFeelMethods.html</anchorfile>
      <anchor>a680352c5aa799f587fb5d48f7f2da691</anchor>
      <arglist>(const String &amp;title, const String &amp;message, const String &amp;button1, const String &amp;button2, const String &amp;button3, AlertWindow::AlertIconType iconType, int numButtons, Component *associatedComponent)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>drawAlertBox</name>
      <anchorfile>structAlertWindow_1_1LookAndFeelMethods.html</anchorfile>
      <anchor>aa74eb4ad4d5c5606f9b6394ae8733c9e</anchor>
      <arglist>(Graphics &amp;, AlertWindow &amp;, const Rectangle&lt; int &gt; &amp;textArea, TextLayout &amp;)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getAlertBoxWindowFlags</name>
      <anchorfile>structAlertWindow_1_1LookAndFeelMethods.html</anchorfile>
      <anchor>aa8cfb3925ebd68bcc2ff2db1b80e661f</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Array&lt; int &gt;</type>
      <name>getWidthsForTextButtons</name>
      <anchorfile>structAlertWindow_1_1LookAndFeelMethods.html</anchorfile>
      <anchor>acdb865ab84199f3a019b115afcfbfd63</anchor>
      <arglist>(AlertWindow &amp;, const Array&lt; TextButton * &gt; &amp;)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getAlertWindowButtonHeight</name>
      <anchorfile>structAlertWindow_1_1LookAndFeelMethods.html</anchorfile>
      <anchor>add88dab726f4d792d9b1f07306b56924</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Font</type>
      <name>getAlertWindowTitleFont</name>
      <anchorfile>structAlertWindow_1_1LookAndFeelMethods.html</anchorfile>
      <anchor>a8f0e284e834cdf33a6d12d3fe0e6df1f</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Font</type>
      <name>getAlertWindowMessageFont</name>
      <anchorfile>structAlertWindow_1_1LookAndFeelMethods.html</anchorfile>
      <anchor>af299a3c2da41c34b18c1863864e17da2</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Font</type>
      <name>getAlertWindowFont</name>
      <anchorfile>structAlertWindow_1_1LookAndFeelMethods.html</anchorfile>
      <anchor>afc60fa51ad142012a6eb6c9d34ae296b</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AnimatedAppComponent</name>
    <filename>classAnimatedAppComponent.html</filename>
    <base>Component</base>
    <base protection="private">Timer</base>
    <member kind="function">
      <type></type>
      <name>AnimatedAppComponent</name>
      <anchorfile>classAnimatedAppComponent.html</anchorfile>
      <anchor>a89ac9111921c5037aafd8db92e0b20b5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFramesPerSecond</name>
      <anchorfile>classAnimatedAppComponent.html</anchorfile>
      <anchor>a4dd2504f1111896ceaebfa4c137ed6ff</anchor>
      <arglist>(int framesPerSecond)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>classAnimatedAppComponent.html</anchorfile>
      <anchor>a52d801c9046583cce9cdea2811cad364</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getFrameCounter</name>
      <anchorfile>classAnimatedAppComponent.html</anchorfile>
      <anchor>a946894a8c56958c00463d5dadea51a20</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getMillisecondsSinceLastUpdate</name>
      <anchorfile>classAnimatedAppComponent.html</anchorfile>
      <anchor>a83fc04fa62d2e1466dbada97e031d974</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>paint</name>
      <anchorfile>classComponent.html</anchorfile>
      <anchor>a7cf1862f4af5909ea72827898114a182</anchor>
      <arglist>(Graphics &amp;g)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AnimatedPosition</name>
    <filename>classAnimatedPosition.html</filename>
    <templarg></templarg>
    <base protection="private">Timer</base>
    <class kind="class">AnimatedPosition::Listener</class>
    <member kind="function">
      <type></type>
      <name>AnimatedPosition</name>
      <anchorfile>classAnimatedPosition.html</anchorfile>
      <anchor>a364daf059e5e4ac2bce94ea8a236c02c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLimits</name>
      <anchorfile>classAnimatedPosition.html</anchorfile>
      <anchor>ab8837ee82f8f478d01c3eb815edb96a2</anchor>
      <arglist>(Range&lt; double &gt; newRange) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>beginDrag</name>
      <anchorfile>classAnimatedPosition.html</anchorfile>
      <anchor>a3378dd6b200539ef684f5d8031a4f69a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drag</name>
      <anchorfile>classAnimatedPosition.html</anchorfile>
      <anchor>aecd11c12c444387d46ef54931c5cbd86</anchor>
      <arglist>(double deltaFromStartOfDrag)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>endDrag</name>
      <anchorfile>classAnimatedPosition.html</anchorfile>
      <anchor>a31520fda363c37afac010416dab7707f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>nudge</name>
      <anchorfile>classAnimatedPosition.html</anchorfile>
      <anchor>aa58f2a396a133f7325322b5eeb9b1d3b</anchor>
      <arglist>(double deltaFromCurrentPosition)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getPosition</name>
      <anchorfile>classAnimatedPosition.html</anchorfile>
      <anchor>a6586cfc0cf0ec99e73d6287b0f2700f5</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPosition</name>
      <anchorfile>classAnimatedPosition.html</anchorfile>
      <anchor>a18201fedfc570cb04582ff65b9ddbf3d</anchor>
      <arglist>(double newPosition)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addListener</name>
      <anchorfile>classAnimatedPosition.html</anchorfile>
      <anchor>a26cb4a90ef54041d01dfe07be46c0e88</anchor>
      <arglist>(Listener *listener)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeListener</name>
      <anchorfile>classAnimatedPosition.html</anchorfile>
      <anchor>aea1ba3edaac6d6f86739f64ca03f4597</anchor>
      <arglist>(Listener *listener)</arglist>
    </member>
    <member kind="variable">
      <type>Behaviour</type>
      <name>behaviour</name>
      <anchorfile>classAnimatedPosition.html</anchorfile>
      <anchor>a8dee430f7730c4f6ff98b7f53d2f1d7b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AnimatedPosition::Listener</name>
    <filename>classAnimatedPosition_1_1Listener.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Listener</name>
      <anchorfile>classAnimatedPosition_1_1Listener.html</anchorfile>
      <anchor>ac78c8a53f8ebb472b2951e38575fbc10</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>positionChanged</name>
      <anchorfile>classAnimatedPosition_1_1Listener.html</anchorfile>
      <anchor>ac7cff0f6105eeef1eb76f0daa687c19c</anchor>
      <arglist>(AnimatedPosition &amp;, double newPosition)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AppleRemoteDevice</name>
    <filename>classAppleRemoteDevice.html</filename>
    <member kind="enumeration">
      <type></type>
      <name>ButtonType</name>
      <anchorfile>classAppleRemoteDevice.html</anchorfile>
      <anchor>a63ccce128a48e63972e2d71a8de5f8d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>menuButton</name>
      <anchorfile>classAppleRemoteDevice.html</anchorfile>
      <anchor>a63ccce128a48e63972e2d71a8de5f8d0a4763e099e23574fe8e7b649e3c964cc9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>playButton</name>
      <anchorfile>classAppleRemoteDevice.html</anchorfile>
      <anchor>a63ccce128a48e63972e2d71a8de5f8d0ada64dfa4c77be0c1e9450efd26db7f2d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>plusButton</name>
      <anchorfile>classAppleRemoteDevice.html</anchorfile>
      <anchor>a63ccce128a48e63972e2d71a8de5f8d0a0a1a0de82c6d765607247bf97fb9f106</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>minusButton</name>
      <anchorfile>classAppleRemoteDevice.html</anchorfile>
      <anchor>a63ccce128a48e63972e2d71a8de5f8d0a9acc904c6686677ad3d8dc783d547f71</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>rightButton</name>
      <anchorfile>classAppleRemoteDevice.html</anchorfile>
      <anchor>a63ccce128a48e63972e2d71a8de5f8d0a41364e422072e6231a74a487f63f08fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>leftButton</name>
      <anchorfile>classAppleRemoteDevice.html</anchorfile>
      <anchor>a63ccce128a48e63972e2d71a8de5f8d0a811f6391048193b13e401ca40d610713</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>rightButton_Long</name>
      <anchorfile>classAppleRemoteDevice.html</anchorfile>
      <anchor>a63ccce128a48e63972e2d71a8de5f8d0aebf3d7bc747ddd6b471d7a71a330432b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>leftButton_Long</name>
      <anchorfile>classAppleRemoteDevice.html</anchorfile>
      <anchor>a63ccce128a48e63972e2d71a8de5f8d0a9a8742b6148aca5e32dec97292781ae0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>menuButton_Long</name>
      <anchorfile>classAppleRemoteDevice.html</anchorfile>
      <anchor>a63ccce128a48e63972e2d71a8de5f8d0a0fc32b5afdcfca212c4003ea68bdbfaa</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>playButtonSleepMode</name>
      <anchorfile>classAppleRemoteDevice.html</anchorfile>
      <anchor>a63ccce128a48e63972e2d71a8de5f8d0a57f28e98dc961f444c7db15bbd2ee8eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>switched</name>
      <anchorfile>classAppleRemoteDevice.html</anchorfile>
      <anchor>a63ccce128a48e63972e2d71a8de5f8d0ae278b856f84c176f8a1628c118e902fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AppleRemoteDevice</name>
      <anchorfile>classAppleRemoteDevice.html</anchorfile>
      <anchor>ac44938079806a0136950f95850e587f0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~AppleRemoteDevice</name>
      <anchorfile>classAppleRemoteDevice.html</anchorfile>
      <anchor>aa7ce0c2716f3a62e1eab5cbd23445ce0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>buttonPressed</name>
      <anchorfile>classAppleRemoteDevice.html</anchorfile>
      <anchor>a6392fda8b943236427da2af0dc80b445</anchor>
      <arglist>(ButtonType buttonId, bool isDown)=0</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>start</name>
      <anchorfile>classAppleRemoteDevice.html</anchorfile>
      <anchor>a826fd7464bf27550c7f62cf17bc06189</anchor>
      <arglist>(bool inExclusiveMode)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stop</name>
      <anchorfile>classAppleRemoteDevice.html</anchorfile>
      <anchor>af828962a01ccbbedf9cc8b086b3edb34</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isActive</name>
      <anchorfile>classAppleRemoteDevice.html</anchorfile>
      <anchor>a0857b406b9e57efb90a12142d7c9ae40</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getRemoteId</name>
      <anchorfile>classAppleRemoteDevice.html</anchorfile>
      <anchor>a1df8dc96b957911ffce788aa5adb6405</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>handleCallbackInternal</name>
      <anchorfile>classAppleRemoteDevice.html</anchorfile>
      <anchor>a016dfb4c500b9813c935f7387872d112</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ApplicationCommandInfo</name>
    <filename>structApplicationCommandInfo.html</filename>
    <member kind="enumeration">
      <type></type>
      <name>CommandFlags</name>
      <anchorfile>structApplicationCommandInfo.html</anchorfile>
      <anchor>ab9633f0a25ad57236fde726c98b29d72</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>isDisabled</name>
      <anchorfile>structApplicationCommandInfo.html</anchorfile>
      <anchor>ab9633f0a25ad57236fde726c98b29d72a202cb5c15583e30f2f59b48e6c18c90b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>isTicked</name>
      <anchorfile>structApplicationCommandInfo.html</anchorfile>
      <anchor>ab9633f0a25ad57236fde726c98b29d72af0c8f1c0103edb7a8e9ea852d3d3dee2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>wantsKeyUpDownCallbacks</name>
      <anchorfile>structApplicationCommandInfo.html</anchorfile>
      <anchor>ab9633f0a25ad57236fde726c98b29d72ab8ea56bbed1d23f3df3cbd3c20f2a8d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>hiddenFromKeyEditor</name>
      <anchorfile>structApplicationCommandInfo.html</anchorfile>
      <anchor>ab9633f0a25ad57236fde726c98b29d72a626b4f9f1aa2bd0761b89b376063d254</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>readOnlyInKeyEditor</name>
      <anchorfile>structApplicationCommandInfo.html</anchorfile>
      <anchor>ab9633f0a25ad57236fde726c98b29d72a57e236658a383bd74c76fadfe6c49370</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>dontTriggerVisualFeedback</name>
      <anchorfile>structApplicationCommandInfo.html</anchorfile>
      <anchor>ab9633f0a25ad57236fde726c98b29d72a362e5c4decffcd4c7ec6f508f672e443</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ApplicationCommandInfo</name>
      <anchorfile>structApplicationCommandInfo.html</anchorfile>
      <anchor>a79d1e190c9157fa3bb96f8981858ca8c</anchor>
      <arglist>(CommandID commandID) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setInfo</name>
      <anchorfile>structApplicationCommandInfo.html</anchorfile>
      <anchor>a3e9cd7e72fbf617a0d70d6be3d513b82</anchor>
      <arglist>(const String &amp;shortName, const String &amp;description, const String &amp;categoryName, int flags) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setActive</name>
      <anchorfile>structApplicationCommandInfo.html</anchorfile>
      <anchor>a68a043a95e058beeeddfba2441ee7306</anchor>
      <arglist>(bool isActive) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTicked</name>
      <anchorfile>structApplicationCommandInfo.html</anchorfile>
      <anchor>aac92e704735d8013bf8b17450858f3fb</anchor>
      <arglist>(bool isTicked) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addDefaultKeypress</name>
      <anchorfile>structApplicationCommandInfo.html</anchorfile>
      <anchor>a46d8d91bd1e2ca8aa37b1d51f7aac914</anchor>
      <arglist>(int keyCode, ModifierKeys modifiers) noexcept</arglist>
    </member>
    <member kind="variable">
      <type>CommandID</type>
      <name>commandID</name>
      <anchorfile>structApplicationCommandInfo.html</anchorfile>
      <anchor>ac8265d08896874e8aad4f9bfee9e7e03</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>String</type>
      <name>shortName</name>
      <anchorfile>structApplicationCommandInfo.html</anchorfile>
      <anchor>a2da18de634cf7794fcd0b26e4121e3ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>String</type>
      <name>description</name>
      <anchorfile>structApplicationCommandInfo.html</anchorfile>
      <anchor>a9d36981d292001925176c0be0d2e6b3a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>String</type>
      <name>categoryName</name>
      <anchorfile>structApplicationCommandInfo.html</anchorfile>
      <anchor>a38af85def791bf7f344d18ddb6f65f66</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Array&lt; KeyPress &gt;</type>
      <name>defaultKeypresses</name>
      <anchorfile>structApplicationCommandInfo.html</anchorfile>
      <anchor>acae1903bdfd8214162adb8326d1ee9da</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>flags</name>
      <anchorfile>structApplicationCommandInfo.html</anchorfile>
      <anchor>a45fa351a09f7a6df3e76fe466c476905</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ApplicationCommandManager</name>
    <filename>classApplicationCommandManager.html</filename>
    <base protection="private">AsyncUpdater</base>
    <base protection="private">FocusChangeListener</base>
    <member kind="function">
      <type></type>
      <name>ApplicationCommandManager</name>
      <anchorfile>classApplicationCommandManager.html</anchorfile>
      <anchor>a71ba22aa70cc12a7ab52c4e531db32ad</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ApplicationCommandManager</name>
      <anchorfile>classApplicationCommandManager.html</anchorfile>
      <anchor>affac02208039201c7e6a59599a1010df</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearCommands</name>
      <anchorfile>classApplicationCommandManager.html</anchorfile>
      <anchor>a33f916c7f4ac00736958a83883057df0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>registerCommand</name>
      <anchorfile>classApplicationCommandManager.html</anchorfile>
      <anchor>a151be8c30a8339675ad5dcba5a5c4e62</anchor>
      <arglist>(const ApplicationCommandInfo &amp;newCommand)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>registerAllCommandsForTarget</name>
      <anchorfile>classApplicationCommandManager.html</anchorfile>
      <anchor>ac3f8c831583499556579848779e030cf</anchor>
      <arglist>(ApplicationCommandTarget *target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeCommand</name>
      <anchorfile>classApplicationCommandManager.html</anchorfile>
      <anchor>a910296ce97f93bc7fcd8a24085ac7ca6</anchor>
      <arglist>(CommandID commandID)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>commandStatusChanged</name>
      <anchorfile>classApplicationCommandManager.html</anchorfile>
      <anchor>a91fef61705d98da881276733e304e7af</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumCommands</name>
      <anchorfile>classApplicationCommandManager.html</anchorfile>
      <anchor>afe00b76a2faa9b625765d8ceac961d96</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const ApplicationCommandInfo *</type>
      <name>getCommandForIndex</name>
      <anchorfile>classApplicationCommandManager.html</anchorfile>
      <anchor>a343d3554ce94762e692d78b7d33d21da</anchor>
      <arglist>(int index) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const ApplicationCommandInfo *</type>
      <name>getCommandForID</name>
      <anchorfile>classApplicationCommandManager.html</anchorfile>
      <anchor>a9f0d71eba397a4c0fec0193c33fcc9c2</anchor>
      <arglist>(CommandID commandID) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>getNameOfCommand</name>
      <anchorfile>classApplicationCommandManager.html</anchorfile>
      <anchor>ac0d3a5fbd431c188c65ac708d245a2bf</anchor>
      <arglist>(CommandID commandID) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>getDescriptionOfCommand</name>
      <anchorfile>classApplicationCommandManager.html</anchorfile>
      <anchor>ab4d21d8f1543a222bde11ba3bc859d03</anchor>
      <arglist>(CommandID commandID) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>StringArray</type>
      <name>getCommandCategories</name>
      <anchorfile>classApplicationCommandManager.html</anchorfile>
      <anchor>af4b839c652fd9f6e551566bf491828b6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Array&lt; CommandID &gt;</type>
      <name>getCommandsInCategory</name>
      <anchorfile>classApplicationCommandManager.html</anchorfile>
      <anchor>a479e635a4a520a6c827c4a998d2442f4</anchor>
      <arglist>(const String &amp;categoryName) const </arglist>
    </member>
    <member kind="function">
      <type>KeyPressMappingSet *</type>
      <name>getKeyMappings</name>
      <anchorfile>classApplicationCommandManager.html</anchorfile>
      <anchor>a5fea4f129e149062866c0313b29ba976</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>invokeDirectly</name>
      <anchorfile>classApplicationCommandManager.html</anchorfile>
      <anchor>a55f04432929174c2de6d622cb2d23c67</anchor>
      <arglist>(CommandID commandID, bool asynchronously)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>invoke</name>
      <anchorfile>classApplicationCommandManager.html</anchorfile>
      <anchor>a6b506331c1cfb3d07b2925ac16b8141e</anchor>
      <arglist>(const ApplicationCommandTarget::InvocationInfo &amp;invocationInfo, bool asynchronously)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ApplicationCommandTarget *</type>
      <name>getFirstCommandTarget</name>
      <anchorfile>classApplicationCommandManager.html</anchorfile>
      <anchor>a45f5c00e8bb2d670f0931c78dd166d4b</anchor>
      <arglist>(CommandID commandID)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFirstCommandTarget</name>
      <anchorfile>classApplicationCommandManager.html</anchorfile>
      <anchor>abebbbdd281b83f02a94c909f93b5347f</anchor>
      <arglist>(ApplicationCommandTarget *newTarget) noexcept</arglist>
    </member>
    <member kind="function">
      <type>ApplicationCommandTarget *</type>
      <name>getTargetForCommand</name>
      <anchorfile>classApplicationCommandManager.html</anchorfile>
      <anchor>ab9fcbf2c2a3b58cf1a54babf906d9e84</anchor>
      <arglist>(CommandID commandID, ApplicationCommandInfo &amp;upToDateInfo)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addListener</name>
      <anchorfile>classApplicationCommandManager.html</anchorfile>
      <anchor>ada313b4a4cdd787f5d3786b9102c483e</anchor>
      <arglist>(ApplicationCommandManagerListener *listener)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeListener</name>
      <anchorfile>classApplicationCommandManager.html</anchorfile>
      <anchor>a851148eb572ded776b1ba84a5de178fa</anchor>
      <arglist>(ApplicationCommandManagerListener *listener)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ApplicationCommandTarget *</type>
      <name>findDefaultComponentTarget</name>
      <anchorfile>classApplicationCommandManager.html</anchorfile>
      <anchor>add1c985aacfb09c72d038e88ce91341a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ApplicationCommandTarget *</type>
      <name>findTargetForComponent</name>
      <anchorfile>classApplicationCommandManager.html</anchorfile>
      <anchor>a49f4fca677c284452cd148b010958332</anchor>
      <arglist>(Component *)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ApplicationCommandManagerListener</name>
    <filename>classApplicationCommandManagerListener.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ApplicationCommandManagerListener</name>
      <anchorfile>classApplicationCommandManagerListener.html</anchorfile>
      <anchor>a9b2c9f6c718ad68306791c2aeb29f754</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>applicationCommandInvoked</name>
      <anchorfile>classApplicationCommandManagerListener.html</anchorfile>
      <anchor>a254f742a826d934f8c843bd87552dadb</anchor>
      <arglist>(const ApplicationCommandTarget::InvocationInfo &amp;)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>applicationCommandListChanged</name>
      <anchorfile>classApplicationCommandManagerListener.html</anchorfile>
      <anchor>a918fb2446acd367655fe88815d3be5fe</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ApplicationCommandTarget</name>
    <filename>classApplicationCommandTarget.html</filename>
    <class kind="struct">ApplicationCommandTarget::InvocationInfo</class>
    <member kind="function">
      <type></type>
      <name>ApplicationCommandTarget</name>
      <anchorfile>classApplicationCommandTarget.html</anchorfile>
      <anchor>a87a924f9667311234b74292dcd737a98</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ApplicationCommandTarget</name>
      <anchorfile>classApplicationCommandTarget.html</anchorfile>
      <anchor>aedcfa2f5c7f9798eaa717579d3d6e12a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ApplicationCommandTarget *</type>
      <name>getNextCommandTarget</name>
      <anchorfile>classApplicationCommandTarget.html</anchorfile>
      <anchor>a540016056ca6fc19818e951359c710da</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>getAllCommands</name>
      <anchorfile>classApplicationCommandTarget.html</anchorfile>
      <anchor>a12b1c7a6abe2e5a5f27fda4a292fe33d</anchor>
      <arglist>(Array&lt; CommandID &gt; &amp;commands)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>getCommandInfo</name>
      <anchorfile>classApplicationCommandTarget.html</anchorfile>
      <anchor>a54171f3ee599f0b508fed08e647edf89</anchor>
      <arglist>(CommandID commandID, ApplicationCommandInfo &amp;result)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>perform</name>
      <anchorfile>classApplicationCommandTarget.html</anchorfile>
      <anchor>a0e8f962cda82e8aa1207d38361ff96f9</anchor>
      <arglist>(const InvocationInfo &amp;info)=0</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>invoke</name>
      <anchorfile>classApplicationCommandTarget.html</anchorfile>
      <anchor>aeffaac3af6c4922240e1e5e03ad0a1b5</anchor>
      <arglist>(const InvocationInfo &amp;invocationInfo, const bool asynchronously)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>invokeDirectly</name>
      <anchorfile>classApplicationCommandTarget.html</anchorfile>
      <anchor>a93daac13c40f226ccab1e92a390ad61a</anchor>
      <arglist>(const CommandID commandID, const bool asynchronously)</arglist>
    </member>
    <member kind="function">
      <type>ApplicationCommandTarget *</type>
      <name>getTargetForCommand</name>
      <anchorfile>classApplicationCommandTarget.html</anchorfile>
      <anchor>aee836277019ca8182636e32701d814d7</anchor>
      <arglist>(const CommandID commandID)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isCommandActive</name>
      <anchorfile>classApplicationCommandTarget.html</anchorfile>
      <anchor>ab5ee995932e10bd18dc6fff111f3835e</anchor>
      <arglist>(const CommandID commandID)</arglist>
    </member>
    <member kind="function">
      <type>ApplicationCommandTarget *</type>
      <name>findFirstTargetParentComponent</name>
      <anchorfile>classApplicationCommandTarget.html</anchorfile>
      <anchor>aa8fb128295bd2117cfdc982db022ef6a</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ApplicationCommandTarget::InvocationInfo</name>
    <filename>structApplicationCommandTarget_1_1InvocationInfo.html</filename>
    <member kind="enumeration">
      <type></type>
      <name>InvocationMethod</name>
      <anchorfile>structApplicationCommandTarget_1_1InvocationInfo.html</anchorfile>
      <anchor>a87e99a7b4b51787a40700bce2a7acc22</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>direct</name>
      <anchorfile>structApplicationCommandTarget_1_1InvocationInfo.html</anchorfile>
      <anchor>a87e99a7b4b51787a40700bce2a7acc22a5da64d78c06aae22ea9c1315e99f9557</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>fromKeyPress</name>
      <anchorfile>structApplicationCommandTarget_1_1InvocationInfo.html</anchorfile>
      <anchor>a87e99a7b4b51787a40700bce2a7acc22af89cceaaf6b2fbe277117d06f4c71cdf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>fromMenu</name>
      <anchorfile>structApplicationCommandTarget_1_1InvocationInfo.html</anchorfile>
      <anchor>a87e99a7b4b51787a40700bce2a7acc22aa026666fb6700a11ab0822ca15ee0a9d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>fromButton</name>
      <anchorfile>structApplicationCommandTarget_1_1InvocationInfo.html</anchorfile>
      <anchor>a87e99a7b4b51787a40700bce2a7acc22ad4374a114c5dc22c1767e03274176f1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>InvocationInfo</name>
      <anchorfile>structApplicationCommandTarget_1_1InvocationInfo.html</anchorfile>
      <anchor>aa907354cb0e5c69320bf795bed2e13ef</anchor>
      <arglist>(const CommandID commandID)</arglist>
    </member>
    <member kind="variable">
      <type>CommandID</type>
      <name>commandID</name>
      <anchorfile>structApplicationCommandTarget_1_1InvocationInfo.html</anchorfile>
      <anchor>a4416781aae4ac0dd75477ddd98cb31d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>commandFlags</name>
      <anchorfile>structApplicationCommandTarget_1_1InvocationInfo.html</anchorfile>
      <anchor>a26fba7d10531e7613beb8e3ad0ffc239</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>InvocationMethod</type>
      <name>invocationMethod</name>
      <anchorfile>structApplicationCommandTarget_1_1InvocationInfo.html</anchorfile>
      <anchor>a4e4ea7fee8feb65189634b26003e0fbb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Component *</type>
      <name>originatingComponent</name>
      <anchorfile>structApplicationCommandTarget_1_1InvocationInfo.html</anchorfile>
      <anchor>a829cd8dbab1753320b750727df99ba41</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>KeyPress</type>
      <name>keyPress</name>
      <anchorfile>structApplicationCommandTarget_1_1InvocationInfo.html</anchorfile>
      <anchor>a733ad27cfb5ad231add1b1c82cced236</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>isKeyDown</name>
      <anchorfile>structApplicationCommandTarget_1_1InvocationInfo.html</anchorfile>
      <anchor>a40f339e15279d78b003e3598f11c1424</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>millisecsSinceKeyPressed</name>
      <anchorfile>structApplicationCommandTarget_1_1InvocationInfo.html</anchorfile>
      <anchor>a0c1817f71536452a5d69a8e28ecc8534</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ApplicationProperties</name>
    <filename>classApplicationProperties.html</filename>
    <member kind="function">
      <type></type>
      <name>ApplicationProperties</name>
      <anchorfile>classApplicationProperties.html</anchorfile>
      <anchor>aca8eb83646fdaf5fe87360738fb20bbf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ApplicationProperties</name>
      <anchorfile>classApplicationProperties.html</anchorfile>
      <anchor>ad0b5bcee64fb881459536ae91f98df9f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStorageParameters</name>
      <anchorfile>classApplicationProperties.html</anchorfile>
      <anchor>ab8f0b0ee2ece06a23d36996eaa1a7107</anchor>
      <arglist>(const PropertiesFile::Options &amp;options)</arglist>
    </member>
    <member kind="function">
      <type>const PropertiesFile::Options &amp;</type>
      <name>getStorageParameters</name>
      <anchorfile>classApplicationProperties.html</anchorfile>
      <anchor>a10b2a0a9c4dab480f40e3d80bb02d85b</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>PropertiesFile *</type>
      <name>getUserSettings</name>
      <anchorfile>classApplicationProperties.html</anchorfile>
      <anchor>a5b7ea2bc0531fc2b5db6aed82d753905</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>PropertiesFile *</type>
      <name>getCommonSettings</name>
      <anchorfile>classApplicationProperties.html</anchorfile>
      <anchor>a66aa5855d6c127e6ada14ad86a6926a5</anchor>
      <arglist>(bool returnUserPropsIfReadOnly)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>saveIfNeeded</name>
      <anchorfile>classApplicationProperties.html</anchorfile>
      <anchor>aff18ff76ec1447a771769fb3bd905623</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>closeFiles</name>
      <anchorfile>classApplicationProperties.html</anchorfile>
      <anchor>a5f0c75ea625bf1cca3ef8fe9f66687af</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Array</name>
    <filename>classArray.html</filename>
    <templarg>ElementType</templarg>
    <templarg>TypeOfCriticalSectionToUse</templarg>
    <templarg>minimumAllocatedSize</templarg>
    <member kind="typedef">
      <type>TypeOfCriticalSectionToUse::ScopedLockType</type>
      <name>ScopedLockType</name>
      <anchorfile>classArray.html</anchorfile>
      <anchor>a191f66a972ab264e2f8361727fb59ae7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Array</name>
      <anchorfile>classArray.html</anchorfile>
      <anchor>a527fe1f41cd10ccc5d8b7471d7dbef52</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Array</name>
      <anchorfile>classArray.html</anchorfile>
      <anchor>a738abff2826095c6f95ffa9e1e2a04bc</anchor>
      <arglist>(const Array&lt; ElementType, TypeOfCriticalSectionToUse &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Array</name>
      <anchorfile>classArray.html</anchorfile>
      <anchor>af041fe67dea602ed32b4ec5215d246a2</anchor>
      <arglist>(Array&lt; ElementType, TypeOfCriticalSectionToUse &gt; &amp;&amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Array</name>
      <anchorfile>classArray.html</anchorfile>
      <anchor>a6a1ecdfef773aa85351eb93bda32951b</anchor>
      <arglist>(const TypeToCreateFrom *values)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Array</name>
      <anchorfile>classArray.html</anchorfile>
      <anchor>aaa426011ebe1d6a9d32302f92ead8b98</anchor>
      <arglist>(const TypeToCreateFrom *values, int numValues)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Array</name>
      <anchorfile>classArray.html</anchorfile>
      <anchor>aca95e27784b27bea22d931fd21dd3141</anchor>
      <arglist>(const std::initializer_list&lt; TypeToCreateFrom &gt; &amp;items)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Array</name>
      <anchorfile>classArray.html</anchorfile>
      <anchor>a6149be5bb4ad25d738a9a6c1ef78253d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Array &amp;</type>
      <name>operator=</name>
      <anchorfile>classArray.html</anchorfile>
      <anchor>ae6f46b7a7bee66e0ab05dd83dca4e79d</anchor>
      <arglist>(const Array &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Array &amp;</type>
      <name>operator=</name>
      <anchorfile>classArray.html</anchorfile>
      <anchor>aa76bb296af35230df5f7cd631ae1293b</anchor>
      <arglist>(Array &amp;&amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classArray.html</anchorfile>
      <anchor>abe323c4e118f22cd1d09c2557a74c3d5</anchor>
      <arglist>(const OtherArrayType &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classArray.html</anchorfile>
      <anchor>a63cbf228f47c23e0f52d5f73b9fa8c0e</anchor>
      <arglist>(const OtherArrayType &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classArray.html</anchorfile>
      <anchor>a86dc5fe378bb99b85beb8ab86c279654</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearQuick</name>
      <anchorfile>classArray.html</anchorfile>
      <anchor>a96bcb7013ec2d56da8b918da7fc0809c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>classArray.html</anchorfile>
      <anchor>ae79ec3b32d0c9a80dfff8ffbc41f8523</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEmpty</name>
      <anchorfile>classArray.html</anchorfile>
      <anchor>a1abb3c832ea321cca9a4a0d9d3883c27</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>ElementType</type>
      <name>operator[]</name>
      <anchorfile>classArray.html</anchorfile>
      <anchor>a9e369f019d7ba8f7587bcab1906e4087</anchor>
      <arglist>(const int index) const </arglist>
    </member>
    <member kind="function">
      <type>ElementType</type>
      <name>getUnchecked</name>
      <anchorfile>classArray.html</anchorfile>
      <anchor>ada77bc1217cc15d8815e2685090de379</anchor>
      <arglist>(const int index) const </arglist>
    </member>
    <member kind="function">
      <type>ElementType &amp;</type>
      <name>getReference</name>
      <anchorfile>classArray.html</anchorfile>
      <anchor>ac1cb5babc0950eb9897812b221695b3c</anchor>
      <arglist>(const int index) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>ElementType</type>
      <name>getFirst</name>
      <anchorfile>classArray.html</anchorfile>
      <anchor>ae1884e2e59a1f2a7a2959a1f090da894</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ElementType</type>
      <name>getLast</name>
      <anchorfile>classArray.html</anchorfile>
      <anchor>abcdc6472b527f4b470ae705ed7fad38f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ElementType *</type>
      <name>getRawDataPointer</name>
      <anchorfile>classArray.html</anchorfile>
      <anchor>a4c5c3e5ab20d17d6d5757e53773ba2ff</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>ElementType *</type>
      <name>begin</name>
      <anchorfile>classArray.html</anchorfile>
      <anchor>a5aeb6bdbca7a057c6fe483f2a9c89ef5</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>ElementType *</type>
      <name>end</name>
      <anchorfile>classArray.html</anchorfile>
      <anchor>a4ec39fc8ed45a70eb82fca49c35c2088</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>indexOf</name>
      <anchorfile>classArray.html</anchorfile>
      <anchor>af3e6b6c7c55897224b923bb4409b958a</anchor>
      <arglist>(ParameterType elementToLookFor) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>classArray.html</anchorfile>
      <anchor>a57f5f5977d81f1d54315732bc30b33ab</anchor>
      <arglist>(ParameterType elementToLookFor) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>classArray.html</anchorfile>
      <anchor>a52da22e285e44171b6d6fa785a7d536a</anchor>
      <arglist>(const ElementType &amp;newElement)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>classArray.html</anchorfile>
      <anchor>ae81ab0d9abbd36bf4aab593c255eef38</anchor>
      <arglist>(ElementType &amp;&amp;newElement)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insert</name>
      <anchorfile>classArray.html</anchorfile>
      <anchor>aef96810c21931d9676c08cad82de45c7</anchor>
      <arglist>(int indexToInsertAt, ParameterType newElement)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insertMultiple</name>
      <anchorfile>classArray.html</anchorfile>
      <anchor>a0cadf83bcfba696c6a4adc15f4e0a78f</anchor>
      <arglist>(int indexToInsertAt, ParameterType newElement, int numberOfTimesToInsertIt)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insertArray</name>
      <anchorfile>classArray.html</anchorfile>
      <anchor>acb0477221ce1538611a9fcd84028b387</anchor>
      <arglist>(int indexToInsertAt, const ElementType *newElements, int numberOfElements)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addIfNotAlreadyThere</name>
      <anchorfile>classArray.html</anchorfile>
      <anchor>a41d110cdb239af70fa8416cb8a430a03</anchor>
      <arglist>(ParameterType newElement)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classArray.html</anchorfile>
      <anchor>a2fb91e8ec10caa9474a28c88e35f9686</anchor>
      <arglist>(const int indexToChange, ParameterType newValue)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUnchecked</name>
      <anchorfile>classArray.html</anchorfile>
      <anchor>a8fb9db1598de3bcf85754ff2169dd7eb</anchor>
      <arglist>(const int indexToChange, ParameterType newValue)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addArray</name>
      <anchorfile>classArray.html</anchorfile>
      <anchor>a3cb98449214bf8993d64dd06c33133eb</anchor>
      <arglist>(const Type *elementsToAdd, int numElementsToAdd)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addArray</name>
      <anchorfile>classArray.html</anchorfile>
      <anchor>a1dfc3af39d920424b645b40e2bb8cf05</anchor>
      <arglist>(const std::initializer_list&lt; TypeToCreateFrom &gt; &amp;items)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addNullTerminatedArray</name>
      <anchorfile>classArray.html</anchorfile>
      <anchor>a9dbaaaeea2b8e6ab7eede5c3f080adf8</anchor>
      <arglist>(const Type *const *elementsToAdd)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swapWith</name>
      <anchorfile>classArray.html</anchorfile>
      <anchor>a921a70882553967e2998beeb30d99f83</anchor>
      <arglist>(OtherArrayType &amp;otherArray) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addArray</name>
      <anchorfile>classArray.html</anchorfile>
      <anchor>a75cce24a6741c2e36d4f87084005ba89</anchor>
      <arglist>(const OtherArrayType &amp;arrayToAddFrom, int startIndex=0, int numElementsToAdd=-1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classArray.html</anchorfile>
      <anchor>aeee604745ed7157e6b14e8b54a27634f</anchor>
      <arglist>(const int targetNumItems)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addSorted</name>
      <anchorfile>classArray.html</anchorfile>
      <anchor>afc5417019f110034658b3c1c02af5a5e</anchor>
      <arglist>(ElementComparator &amp;comparator, ParameterType newElement)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addUsingDefaultSort</name>
      <anchorfile>classArray.html</anchorfile>
      <anchor>a88466744eccb48806b74defa442c843b</anchor>
      <arglist>(ParameterType newElement)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>indexOfSorted</name>
      <anchorfile>classArray.html</anchorfile>
      <anchor>ad3faadfb7b8eb05350afb1c9dd951ff5</anchor>
      <arglist>(ElementComparator &amp;comparator, TargetValueType elementToLookFor) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove</name>
      <anchorfile>classArray.html</anchorfile>
      <anchor>ae3ca48a00050e5fec873488300049eea</anchor>
      <arglist>(int indexToRemove)</arglist>
    </member>
    <member kind="function">
      <type>ElementType</type>
      <name>removeAndReturn</name>
      <anchorfile>classArray.html</anchorfile>
      <anchor>af1a03b0e4ae3120db6886fea3d895afe</anchor>
      <arglist>(const int indexToRemove)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove</name>
      <anchorfile>classArray.html</anchorfile>
      <anchor>a327c9e19074544bfef2caa5d41ff8131</anchor>
      <arglist>(const ElementType *elementToRemove)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeFirstMatchingValue</name>
      <anchorfile>classArray.html</anchorfile>
      <anchor>adb629ebfbcba98f1f5e1ca47ccca594e</anchor>
      <arglist>(ParameterType valueToRemove)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>removeAllInstancesOf</name>
      <anchorfile>classArray.html</anchorfile>
      <anchor>a30b2ea3341f9c6156a42da4821438299</anchor>
      <arglist>(ParameterType valueToRemove)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>removeIf</name>
      <anchorfile>classArray.html</anchorfile>
      <anchor>ac6273a9f83364b169c9c5a938c7de3c7</anchor>
      <arglist>(PredicateType predicate)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeRange</name>
      <anchorfile>classArray.html</anchorfile>
      <anchor>ae9f26706cc40ce178424b2b4ba1f9647</anchor>
      <arglist>(int startIndex, int numberToRemove)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeLast</name>
      <anchorfile>classArray.html</anchorfile>
      <anchor>af6fe3614e877f04a42330f440a5548da</anchor>
      <arglist>(int howManyToRemove=1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeValuesIn</name>
      <anchorfile>classArray.html</anchorfile>
      <anchor>a1474eae027a73758ca12734001ec9da0</anchor>
      <arglist>(const OtherArrayType &amp;otherArray)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeValuesNotIn</name>
      <anchorfile>classArray.html</anchorfile>
      <anchor>af3d9c435c3cddb0de674306b809430e3</anchor>
      <arglist>(const OtherArrayType &amp;otherArray)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swap</name>
      <anchorfile>classArray.html</anchorfile>
      <anchor>ae686a3e14b9134ddae4b6bd6088350e5</anchor>
      <arglist>(const int index1, const int index2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>move</name>
      <anchorfile>classArray.html</anchorfile>
      <anchor>aed7d9992d0e88297d4d92487205436e2</anchor>
      <arglist>(const int currentIndex, int newIndex) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>minimiseStorageOverheads</name>
      <anchorfile>classArray.html</anchorfile>
      <anchor>a0773349e71721e177ee12c8ffd20b5d8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ensureStorageAllocated</name>
      <anchorfile>classArray.html</anchorfile>
      <anchor>a43d61929a72c859191859f02e35d2058</anchor>
      <arglist>(const int minNumElements)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sort</name>
      <anchorfile>classArray.html</anchorfile>
      <anchor>abd6210cb3337f1cc11b89bc7b63f9c72</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sort</name>
      <anchorfile>classArray.html</anchorfile>
      <anchor>ae41b43e6f47cfa888c01cc09d58f08fa</anchor>
      <arglist>(ElementComparator &amp;comparator, const bool retainOrderOfEquivalentItems=false)</arglist>
    </member>
    <member kind="function">
      <type>const TypeOfCriticalSectionToUse &amp;</type>
      <name>getLock</name>
      <anchorfile>classArray.html</anchorfile>
      <anchor>a37f02f5c6eedcc9bd661069e1b991bb1</anchor>
      <arglist>() const noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArrayAllocationBase</name>
    <filename>classArrayAllocationBase.html</filename>
    <templarg>ElementType</templarg>
    <templarg>TypeOfCriticalSectionToUse</templarg>
    <member kind="function">
      <type></type>
      <name>ArrayAllocationBase</name>
      <anchorfile>classArrayAllocationBase.html</anchorfile>
      <anchor>a11d8bab507f8c7bf1e6c9e536a9d8093</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ArrayAllocationBase</name>
      <anchorfile>classArrayAllocationBase.html</anchorfile>
      <anchor>a5f7a4fea116804113f59a6eebd3120cf</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArrayAllocationBase</name>
      <anchorfile>classArrayAllocationBase.html</anchorfile>
      <anchor>af50c9ea512e0f4c5d671738f171f170e</anchor>
      <arglist>(ArrayAllocationBase&lt; ElementType, TypeOfCriticalSectionToUse &gt; &amp;&amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>ArrayAllocationBase &amp;</type>
      <name>operator=</name>
      <anchorfile>classArrayAllocationBase.html</anchorfile>
      <anchor>a8468ca0fb0f5b845e18ce5f4c4b0d043</anchor>
      <arglist>(ArrayAllocationBase&lt; ElementType, TypeOfCriticalSectionToUse &gt; &amp;&amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAllocatedSize</name>
      <anchorfile>classArrayAllocationBase.html</anchorfile>
      <anchor>a56354968cbfcf19977aae75b00768df6</anchor>
      <arglist>(const int numElements)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ensureAllocatedSize</name>
      <anchorfile>classArrayAllocationBase.html</anchorfile>
      <anchor>af97c1591bed76fcc161d0a2ce2eda35c</anchor>
      <arglist>(const int minNumElements)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>shrinkToNoMoreThan</name>
      <anchorfile>classArrayAllocationBase.html</anchorfile>
      <anchor>ad7efe3596e7ed01cad96a559b96b592e</anchor>
      <arglist>(const int maxNumElements)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swapWith</name>
      <anchorfile>classArrayAllocationBase.html</anchorfile>
      <anchor>a48910e0a2c0c3243c8fee9226d2d158a</anchor>
      <arglist>(ArrayAllocationBase&lt; ElementType, TypeOfCriticalSectionToUse &gt; &amp;other) noexcept</arglist>
    </member>
    <member kind="variable">
      <type>HeapBlock&lt; ElementType &gt;</type>
      <name>elements</name>
      <anchorfile>classArrayAllocationBase.html</anchorfile>
      <anchor>a68e9e3954a47f3a9b0721c979d4d9fe7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>numAllocated</name>
      <anchorfile>classArrayAllocationBase.html</anchorfile>
      <anchor>a5afe5480fba4ad678e2496e0a5fc5d37</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArrowButton</name>
    <filename>classArrowButton.html</filename>
    <base>Button</base>
    <member kind="function">
      <type></type>
      <name>ArrowButton</name>
      <anchorfile>classArrowButton.html</anchorfile>
      <anchor>a5f836926008f92e3f1f0e32be10b6372</anchor>
      <arglist>(const String &amp;buttonName, float arrowDirection, Colour arrowColour)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ArrowButton</name>
      <anchorfile>classArrowButton.html</anchorfile>
      <anchor>a9198279ce75060e66f9f4a52510bc76a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>paintButton</name>
      <anchorfile>classArrowButton.html</anchorfile>
      <anchor>a71ba86721ff742f0befa6d7f86e93870</anchor>
      <arglist>(Graphics &amp;, bool isMouseOverButton, bool isButtonDown) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Button</name>
      <anchorfile>classButton.html</anchorfile>
      <anchor>a6d35cf666b119be6153a717427f9b5e2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setButtonText</name>
      <anchorfile>classButton.html</anchorfile>
      <anchor>a96f4185a0a716d10309f1081f0af2f91</anchor>
      <arglist>(const String &amp;newText)</arglist>
    </member>
    <member kind="function">
      <type>const String &amp;</type>
      <name>getButtonText</name>
      <anchorfile>classButton.html</anchorfile>
      <anchor>aad4288f0231f8b342967516277c42f30</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isDown</name>
      <anchorfile>classButton.html</anchorfile>
      <anchor>a88a0adf236ac93613a8b2b36d7a74f9d</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isOver</name>
      <anchorfile>classButton.html</anchorfile>
      <anchor>ad4e53dd7b2f91e23293b6bcf3d9b50fb</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setToggleState</name>
      <anchorfile>classButton.html</anchorfile>
      <anchor>a063753c2ce6b9016456ebe353298b342</anchor>
      <arglist>(bool shouldBeOn, NotificationType notification)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getToggleState</name>
      <anchorfile>classButton.html</anchorfile>
      <anchor>ae1723837340c174f0f212855d247b626</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Value &amp;</type>
      <name>getToggleStateValue</name>
      <anchorfile>classButton.html</anchorfile>
      <anchor>a2a487362f5ea3691f7e38e1f2e064caf</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setClickingTogglesState</name>
      <anchorfile>classButton.html</anchorfile>
      <anchor>a675d6848c16e265ff334b2d51328d8d2</anchor>
      <arglist>(bool shouldAutoToggleOnClick) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getClickingTogglesState</name>
      <anchorfile>classButton.html</anchorfile>
      <anchor>a8cf8327c247a9c1fa1c82c20ce69bded</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRadioGroupId</name>
      <anchorfile>classButton.html</anchorfile>
      <anchor>a29adebc6ed27829f75b69c6ba40ef958</anchor>
      <arglist>(int newGroupId, NotificationType notification=sendNotification)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getRadioGroupId</name>
      <anchorfile>classButton.html</anchorfile>
      <anchor>aa20cdb24410a07136dd2ec603179972c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addListener</name>
      <anchorfile>classButton.html</anchorfile>
      <anchor>a346e474a41d9ac4a9ccabeb13e974b47</anchor>
      <arglist>(Listener *newListener)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeListener</name>
      <anchorfile>classButton.html</anchorfile>
      <anchor>aa7016d2e4b8ab37a12c2736057eb28de</anchor>
      <arglist>(Listener *listener)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>triggerClick</name>
      <anchorfile>classButton.html</anchorfile>
      <anchor>a8a6488055955fede16492a90a8967168</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCommandToTrigger</name>
      <anchorfile>classButton.html</anchorfile>
      <anchor>a3d29d9c9ab75389a170b67a364e0cb9e</anchor>
      <arglist>(ApplicationCommandManager *commandManagerToUse, CommandID commandID, bool generateTooltip)</arglist>
    </member>
    <member kind="function">
      <type>CommandID</type>
      <name>getCommandID</name>
      <anchorfile>classButton.html</anchorfile>
      <anchor>ae5bcb1ff0257d8c441076228549eb2a4</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addShortcut</name>
      <anchorfile>classButton.html</anchorfile>
      <anchor>afb5d0ab1c10c5f072776ae6893f22944</anchor>
      <arglist>(const KeyPress &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearShortcuts</name>
      <anchorfile>classButton.html</anchorfile>
      <anchor>aa8d27148fe4dc88ffa06eecabca9bed6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isRegisteredForShortcut</name>
      <anchorfile>classButton.html</anchorfile>
      <anchor>a8efeb0d288cb3313dddb69b8e329a347</anchor>
      <arglist>(const KeyPress &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRepeatSpeed</name>
      <anchorfile>classButton.html</anchorfile>
      <anchor>a6110b12e2f6167dd9ac731285bad825d</anchor>
      <arglist>(int initialDelayInMillisecs, int repeatDelayInMillisecs, int minimumDelayInMillisecs=-1) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTriggeredOnMouseDown</name>
      <anchorfile>classButton.html</anchorfile>
      <anchor>a727e042a6bf3b5f342c7fb5c5c4ce47e</anchor>
      <arglist>(bool isTriggeredOnMouseDown) noexcept</arglist>
    </member>
    <member kind="function">
      <type>uint32</type>
      <name>getMillisecondsSinceButtonDown</name>
      <anchorfile>classButton.html</anchorfile>
      <anchor>a9f0bee0b0f3999472e144c926884dda9</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTooltip</name>
      <anchorfile>classButton.html</anchorfile>
      <anchor>a3505896887d6b7fbb31c75cd7562b1ab</anchor>
      <arglist>(const String &amp;newTooltip) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setConnectedEdges</name>
      <anchorfile>classButton.html</anchorfile>
      <anchor>a17ae41254e2d68b1570ef5027d796ac3</anchor>
      <arglist>(int connectedEdgeFlags)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getConnectedEdgeFlags</name>
      <anchorfile>classButton.html</anchorfile>
      <anchor>a4971174bb22bb4a4172d84695fd9986e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isConnectedOnLeft</name>
      <anchorfile>classButton.html</anchorfile>
      <anchor>a925cf41750a30bbd39d052af8ae37e20</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isConnectedOnRight</name>
      <anchorfile>classButton.html</anchorfile>
      <anchor>a90f0727a44b87224d521e3c051fc2723</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isConnectedOnTop</name>
      <anchorfile>classButton.html</anchorfile>
      <anchor>a35e58c011b632a56cd37b36c0ae10285</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isConnectedOnBottom</name>
      <anchorfile>classButton.html</anchorfile>
      <anchor>a802fe07b98ca56f1e2138f306c596aa6</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setState</name>
      <anchorfile>classButton.html</anchorfile>
      <anchor>a75f6aee61f3803d1c38da9e47e31a892</anchor>
      <arglist>(ButtonState newState)</arglist>
    </member>
    <member kind="function">
      <type>ButtonState</type>
      <name>getState</name>
      <anchorfile>classButton.html</anchorfile>
      <anchor>a2c62bbd9ae76cc3843e06c45f36d5b86</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>JUCE_DEPRECATED</name>
      <anchorfile>classButton.html</anchorfile>
      <anchor>a32acb042d424bd3978d9a040a510851d</anchor>
      <arglist>(void setToggleState(bool, bool))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SettableTooltipClient</name>
      <anchorfile>classSettableTooltipClient.html</anchorfile>
      <anchor>add2c20bbf97c5eeb373660be47659b35</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>getTooltip</name>
      <anchorfile>classSettableTooltipClient.html</anchorfile>
      <anchor>a68efc0af8d287a0255e911178c1f666d</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TooltipClient</name>
      <anchorfile>classTooltipClient.html</anchorfile>
      <anchor>a1bc2223e107e4122d251f5b90049140c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>ConnectedEdgeFlags</name>
      <anchorfile>classButton.html</anchorfile>
      <anchor>aebb14d53173b13f0e98d01a02aee8e82</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>ConnectedOnLeft</name>
      <anchorfile>classButton.html</anchorfile>
      <anchor>aebb14d53173b13f0e98d01a02aee8e82aa1dd81c8737a08302b5b0ddb6414d9d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>ConnectedOnRight</name>
      <anchorfile>classButton.html</anchorfile>
      <anchor>aebb14d53173b13f0e98d01a02aee8e82aaeedde6687fd468865bfa2e8a1deee68</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>ConnectedOnTop</name>
      <anchorfile>classButton.html</anchorfile>
      <anchor>aebb14d53173b13f0e98d01a02aee8e82a856730f0a48a5b785df067d42110d009</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>ConnectedOnBottom</name>
      <anchorfile>classButton.html</anchorfile>
      <anchor>aebb14d53173b13f0e98d01a02aee8e82a680ea807983e767189afaa48f24e4ecb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>ButtonState</name>
      <anchorfile>classButton.html</anchorfile>
      <anchor>ad8312db93093c21df8b1d2be74ae1957</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>buttonNormal</name>
      <anchorfile>classButton.html</anchorfile>
      <anchor>ad8312db93093c21df8b1d2be74ae1957a09756d7da1b944c70299dbce2d4d85c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>buttonOver</name>
      <anchorfile>classButton.html</anchorfile>
      <anchor>ad8312db93093c21df8b1d2be74ae1957ab1bafc26d8c989fe21ad1289d0ce11f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>buttonDown</name>
      <anchorfile>classButton.html</anchorfile>
      <anchor>ad8312db93093c21df8b1d2be74ae1957a2510a242cf6f7e93eb33245a03268d28</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Button</name>
      <anchorfile>classButton.html</anchorfile>
      <anchor>a37f37f35bbcb27d88fc508be94dba87e</anchor>
      <arglist>(const String &amp;buttonName)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>clicked</name>
      <anchorfile>classButton.html</anchorfile>
      <anchor>a149ef29188b0519c3e39624c7b4d9400</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>clicked</name>
      <anchorfile>classButton.html</anchorfile>
      <anchor>af57cd4eec484491dc536e05d75e556dd</anchor>
      <arglist>(const ModifierKeys &amp;modifiers)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>buttonStateChanged</name>
      <anchorfile>classButton.html</anchorfile>
      <anchor>aa0e5a9bb6117baa8b6df29a47db861c5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>internalClickCallback</name>
      <anchorfile>classButton.html</anchorfile>
      <anchor>aaee88dac6fc8ca689a0bd642d7b1489d</anchor>
      <arglist>(const ModifierKeys &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleCommandMessage</name>
      <anchorfile>classButton.html</anchorfile>
      <anchor>a1d4d66619c1d44412892ab73ce806c8f</anchor>
      <arglist>(int commandId) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>mouseEnter</name>
      <anchorfile>classButton.html</anchorfile>
      <anchor>a32dfa1120a4ad81620ed4a21757e374a</anchor>
      <arglist>(const MouseEvent &amp;) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>mouseExit</name>
      <anchorfile>classButton.html</anchorfile>
      <anchor>a5f8a73f5a0c1fba9327ff96a9fec1476</anchor>
      <arglist>(const MouseEvent &amp;) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>mouseDown</name>
      <anchorfile>classButton.html</anchorfile>
      <anchor>af08726aab8086f766f098a61f47148bd</anchor>
      <arglist>(const MouseEvent &amp;) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>mouseDrag</name>
      <anchorfile>classButton.html</anchorfile>
      <anchor>ae18a78575c054ea19f0fa962021bacd6</anchor>
      <arglist>(const MouseEvent &amp;) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>mouseUp</name>
      <anchorfile>classButton.html</anchorfile>
      <anchor>a3967f9ee39205cc575980e87fa6b8406</anchor>
      <arglist>(const MouseEvent &amp;) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>keyPressed</name>
      <anchorfile>classButton.html</anchorfile>
      <anchor>a2aa055e673435a6de2a2bf962bd28f03</anchor>
      <arglist>(const KeyPress &amp;) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>paint</name>
      <anchorfile>classButton.html</anchorfile>
      <anchor>a88e200a924ec0d4632274f5c035cab6f</anchor>
      <arglist>(Graphics &amp;) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>parentHierarchyChanged</name>
      <anchorfile>classButton.html</anchorfile>
      <anchor>a5e2e93c48605137096a5b9e7cc3b2ec1</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>visibilityChanged</name>
      <anchorfile>classButton.html</anchorfile>
      <anchor>a01c56c0de70053fee3baf845d6a34ddf</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>focusGained</name>
      <anchorfile>classButton.html</anchorfile>
      <anchor>ad6fd650abdea0a360808786825172ecf</anchor>
      <arglist>(FocusChangeType) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>focusLost</name>
      <anchorfile>classButton.html</anchorfile>
      <anchor>aa8b314d92085377b37dda3a3494afc9f</anchor>
      <arglist>(FocusChangeType) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>enablementChanged</name>
      <anchorfile>classButton.html</anchorfile>
      <anchor>aacc3dbdf54be71a697272d2821b86d84</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SettableTooltipClient</name>
      <anchorfile>classSettableTooltipClient.html</anchorfile>
      <anchor>aa43c53d065d75a122eada74694deaca6</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AsyncUpdater</name>
    <filename>classAsyncUpdater.html</filename>
    <member kind="function">
      <type></type>
      <name>AsyncUpdater</name>
      <anchorfile>classAsyncUpdater.html</anchorfile>
      <anchor>a5cb530c31e68d13bbdf078ed54911e0c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~AsyncUpdater</name>
      <anchorfile>classAsyncUpdater.html</anchorfile>
      <anchor>af28a6da5c2adf73e2c18286574939d4b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>triggerAsyncUpdate</name>
      <anchorfile>classAsyncUpdater.html</anchorfile>
      <anchor>a4eece806c6ba9f591382fed54c5983b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cancelPendingUpdate</name>
      <anchorfile>classAsyncUpdater.html</anchorfile>
      <anchor>a2e71a3b3172abca3567d2d2b75564323</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>handleUpdateNowIfNeeded</name>
      <anchorfile>classAsyncUpdater.html</anchorfile>
      <anchor>a5f65e2ad091e96ce4e3979d2b701bc85</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isUpdatePending</name>
      <anchorfile>classAsyncUpdater.html</anchorfile>
      <anchor>a93c63f13659fc5acd41c3ec9b252bf01</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>handleAsyncUpdate</name>
      <anchorfile>classAsyncUpdater.html</anchorfile>
      <anchor>a446f3af793131f8772329f1f8b526578</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Atomic</name>
    <filename>classAtomic.html</filename>
    <templarg>Type</templarg>
    <member kind="function">
      <type></type>
      <name>Atomic</name>
      <anchorfile>classAtomic.html</anchorfile>
      <anchor>a903ef283284109ee6bdaa43d9b477224</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Atomic</name>
      <anchorfile>classAtomic.html</anchorfile>
      <anchor>aa5bd78cad5b124a086688f112f2d24aa</anchor>
      <arglist>(const Type initialValue) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Atomic</name>
      <anchorfile>classAtomic.html</anchorfile>
      <anchor>a482fb9fec9e47b18884a5d1f1ac4c815</anchor>
      <arglist>(const Atomic &amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Atomic</name>
      <anchorfile>classAtomic.html</anchorfile>
      <anchor>a25b0fe07fad7cfd1cf68bd02d7da2a3f</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>Type</type>
      <name>get</name>
      <anchorfile>classAtomic.html</anchorfile>
      <anchor>ad39856229e8d4e3da9088d31bad55b9e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Atomic &amp;</type>
      <name>operator=</name>
      <anchorfile>classAtomic.html</anchorfile>
      <anchor>aee8b91de965363416796ee90ff84d0e2</anchor>
      <arglist>(const Atomic &amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Atomic &amp;</type>
      <name>operator=</name>
      <anchorfile>classAtomic.html</anchorfile>
      <anchor>ac488f361f635427647ed56151d1a9591</anchor>
      <arglist>(const Type newValue) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classAtomic.html</anchorfile>
      <anchor>a52abf7d407845b5ff44b46b1c96f00d1</anchor>
      <arglist>(Type newValue) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Type</type>
      <name>exchange</name>
      <anchorfile>classAtomic.html</anchorfile>
      <anchor>a98405cfea37d5635bdddf47e92da81ea</anchor>
      <arglist>(Type value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Type</type>
      <name>operator+=</name>
      <anchorfile>classAtomic.html</anchorfile>
      <anchor>ab5c7b49a22075389a3edac358c83c92e</anchor>
      <arglist>(Type amountToAdd) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Type</type>
      <name>operator-=</name>
      <anchorfile>classAtomic.html</anchorfile>
      <anchor>af9803bc3177c75dbaf00c3a34eb3556c</anchor>
      <arglist>(Type amountToSubtract) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Type</type>
      <name>operator++</name>
      <anchorfile>classAtomic.html</anchorfile>
      <anchor>a9cc5a6c2e1f07cc097317fe1685819dd</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>Type</type>
      <name>operator--</name>
      <anchorfile>classAtomic.html</anchorfile>
      <anchor>adf3a3f87cb87e822d678dfb67f458895</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>compareAndSetBool</name>
      <anchorfile>classAtomic.html</anchorfile>
      <anchor>a9c0966a21db3a9d4649f8c869bb38fa0</anchor>
      <arglist>(Type newValue, Type valueToCompare) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Type</type>
      <name>compareAndSetValue</name>
      <anchorfile>classAtomic.html</anchorfile>
      <anchor>a9d80abdbdf76b8afd9cbf9baf8851910</anchor>
      <arglist>(Type newValue, Type valueToCompare) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>memoryBarrier</name>
      <anchorfile>classAtomic.html</anchorfile>
      <anchor>a33a7257fe866463a370c8e92a208be01</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="variable">
      <type>volatile Type</type>
      <name>value</name>
      <anchorfile>classAtomic.html</anchorfile>
      <anchor>a4c042c01777b1efe30266a45b7df36f4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AttributedString</name>
    <filename>classAttributedString.html</filename>
    <class kind="class">AttributedString::Attribute</class>
    <member kind="enumeration">
      <type></type>
      <name>WordWrap</name>
      <anchorfile>classAttributedString.html</anchorfile>
      <anchor>ad752f270294ec5b2cef0c80863ee3a3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>none</name>
      <anchorfile>classAttributedString.html</anchorfile>
      <anchor>ad752f270294ec5b2cef0c80863ee3a3cab41c5fa578ffbd8a4b8a5fbc013beae3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>byWord</name>
      <anchorfile>classAttributedString.html</anchorfile>
      <anchor>ad752f270294ec5b2cef0c80863ee3a3ca924856fd52e5a980cae23a0a35a7bad8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>byChar</name>
      <anchorfile>classAttributedString.html</anchorfile>
      <anchor>ad752f270294ec5b2cef0c80863ee3a3ca904d4c7342693028735ff39b6b6a01af</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>ReadingDirection</name>
      <anchorfile>classAttributedString.html</anchorfile>
      <anchor>a254fea6774b4e74f786cc5ad3abac400</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>natural</name>
      <anchorfile>classAttributedString.html</anchorfile>
      <anchor>a254fea6774b4e74f786cc5ad3abac400ab64fe4e1ad4457691eabf047b0b48c89</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>leftToRight</name>
      <anchorfile>classAttributedString.html</anchorfile>
      <anchor>a254fea6774b4e74f786cc5ad3abac400a0ea06be4944f880c21db20dd073a979e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>rightToLeft</name>
      <anchorfile>classAttributedString.html</anchorfile>
      <anchor>a254fea6774b4e74f786cc5ad3abac400a455f62330ea6e3aca5353d09216fff72</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AttributedString</name>
      <anchorfile>classAttributedString.html</anchorfile>
      <anchor>a24596825a1c8f87bbe4c9b3570078492</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AttributedString</name>
      <anchorfile>classAttributedString.html</anchorfile>
      <anchor>a8ce2248c52eb21973432bdff993fcf8f</anchor>
      <arglist>(const String &amp;text)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AttributedString</name>
      <anchorfile>classAttributedString.html</anchorfile>
      <anchor>ab37ff7db7a9607cc8c3eab38cf353152</anchor>
      <arglist>(const AttributedString &amp;)</arglist>
    </member>
    <member kind="function">
      <type>AttributedString &amp;</type>
      <name>operator=</name>
      <anchorfile>classAttributedString.html</anchorfile>
      <anchor>a12309a78f10f53a2c127fa7007f4d622</anchor>
      <arglist>(const AttributedString &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AttributedString</name>
      <anchorfile>classAttributedString.html</anchorfile>
      <anchor>a59bcad183ee8e544c5087702d10ff809</anchor>
      <arglist>(AttributedString &amp;&amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>AttributedString &amp;</type>
      <name>operator=</name>
      <anchorfile>classAttributedString.html</anchorfile>
      <anchor>a42260a061dc906774cd7bcca178e7139</anchor>
      <arglist>(AttributedString &amp;&amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~AttributedString</name>
      <anchorfile>classAttributedString.html</anchorfile>
      <anchor>aa3421fc9e455bf25778e9398beb6ceef</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const String &amp;</type>
      <name>getText</name>
      <anchorfile>classAttributedString.html</anchorfile>
      <anchor>aab56aed8c3543c0c2ea49aa5a020166e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setText</name>
      <anchorfile>classAttributedString.html</anchorfile>
      <anchor>a998c643b1311fa75b80e93d4d02a012b</anchor>
      <arglist>(const String &amp;newText)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>append</name>
      <anchorfile>classAttributedString.html</anchorfile>
      <anchor>a1755f63ee5d540df2aa64d7697ff0ef8</anchor>
      <arglist>(const String &amp;textToAppend)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>append</name>
      <anchorfile>classAttributedString.html</anchorfile>
      <anchor>a1ebdcf2fc784b20ba80b30e3f973820f</anchor>
      <arglist>(const String &amp;textToAppend, const Font &amp;font)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>append</name>
      <anchorfile>classAttributedString.html</anchorfile>
      <anchor>a33b4e8e68669b4c72e9deeda35ccb7d0</anchor>
      <arglist>(const String &amp;textToAppend, Colour colour)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>append</name>
      <anchorfile>classAttributedString.html</anchorfile>
      <anchor>ab835b8818a4905e1af576b3e99a13a53</anchor>
      <arglist>(const String &amp;textToAppend, const Font &amp;font, Colour colour)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>append</name>
      <anchorfile>classAttributedString.html</anchorfile>
      <anchor>acc8257dab05c592118659e1a80594338</anchor>
      <arglist>(const AttributedString &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classAttributedString.html</anchorfile>
      <anchor>aff77725b28cb06f1ddb0b3b38ad7c076</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>draw</name>
      <anchorfile>classAttributedString.html</anchorfile>
      <anchor>a7b100c5427c311b0f8d8a426c96b24a3</anchor>
      <arglist>(Graphics &amp;g, const Rectangle&lt; float &gt; &amp;area) const </arglist>
    </member>
    <member kind="function">
      <type>Justification</type>
      <name>getJustification</name>
      <anchorfile>classAttributedString.html</anchorfile>
      <anchor>a1b0acb2b269ddbd80c90f61acf623838</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setJustification</name>
      <anchorfile>classAttributedString.html</anchorfile>
      <anchor>af23239716a8ccd36a6e25315afcce470</anchor>
      <arglist>(Justification newJustification) noexcept</arglist>
    </member>
    <member kind="function">
      <type>WordWrap</type>
      <name>getWordWrap</name>
      <anchorfile>classAttributedString.html</anchorfile>
      <anchor>a23e8be5dbf974f725584726b30e0f615</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setWordWrap</name>
      <anchorfile>classAttributedString.html</anchorfile>
      <anchor>ab986ab6a8a0a0aff7d7701c5b6c25572</anchor>
      <arglist>(WordWrap newWordWrap) noexcept</arglist>
    </member>
    <member kind="function">
      <type>ReadingDirection</type>
      <name>getReadingDirection</name>
      <anchorfile>classAttributedString.html</anchorfile>
      <anchor>afb961e08dfe858d3a104fedf84922bb9</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setReadingDirection</name>
      <anchorfile>classAttributedString.html</anchorfile>
      <anchor>a96ba8ec9194f937c568bcaa990c1ca55</anchor>
      <arglist>(ReadingDirection newReadingDirection) noexcept</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getLineSpacing</name>
      <anchorfile>classAttributedString.html</anchorfile>
      <anchor>a96e27f2bd7835dc334776e595e515864</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLineSpacing</name>
      <anchorfile>classAttributedString.html</anchorfile>
      <anchor>a0506d7b2000aaebd5873ea23eca6ae6a</anchor>
      <arglist>(float newLineSpacing) noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumAttributes</name>
      <anchorfile>classAttributedString.html</anchorfile>
      <anchor>ac4df137b8bb82c878daeeba7d9a07182</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const Attribute &amp;</type>
      <name>getAttribute</name>
      <anchorfile>classAttributedString.html</anchorfile>
      <anchor>a32a624d6b3e6f41c11c517f0d81a0d7a</anchor>
      <arglist>(int index) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setColour</name>
      <anchorfile>classAttributedString.html</anchorfile>
      <anchor>a45e37afd0bfe64cf411a755ea35b20f7</anchor>
      <arglist>(Range&lt; int &gt; range, Colour colour)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setColour</name>
      <anchorfile>classAttributedString.html</anchorfile>
      <anchor>aa6b48a7f26887847de2e10dec1d917db</anchor>
      <arglist>(Colour colour)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFont</name>
      <anchorfile>classAttributedString.html</anchorfile>
      <anchor>a4fd29f067fe86b25049fdbc8df663686</anchor>
      <arglist>(Range&lt; int &gt; range, const Font &amp;font)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFont</name>
      <anchorfile>classAttributedString.html</anchorfile>
      <anchor>a5731aaf784c8e48015c79574cd1a578e</anchor>
      <arglist>(const Font &amp;font)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AttributedString::Attribute</name>
    <filename>classAttributedString_1_1Attribute.html</filename>
    <member kind="function">
      <type></type>
      <name>Attribute</name>
      <anchorfile>classAttributedString_1_1Attribute.html</anchorfile>
      <anchor>a24df21c7e0e6a0db4d7826d08879d4c8</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Attribute</name>
      <anchorfile>classAttributedString_1_1Attribute.html</anchorfile>
      <anchor>a875e4477eb4916c8bd671c26fd548b4f</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Attribute</name>
      <anchorfile>classAttributedString_1_1Attribute.html</anchorfile>
      <anchor>a223781398d0798f8ec4218c7ffb65f68</anchor>
      <arglist>(const Attribute &amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Attribute &amp;</type>
      <name>operator=</name>
      <anchorfile>classAttributedString_1_1Attribute.html</anchorfile>
      <anchor>a97eeb62dc95c6c51fd60eba9f1c9a21a</anchor>
      <arglist>(const Attribute &amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Attribute</name>
      <anchorfile>classAttributedString_1_1Attribute.html</anchorfile>
      <anchor>af9dfa351c4524ceda5bbbc83f7e24abd</anchor>
      <arglist>(Attribute &amp;&amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Attribute &amp;</type>
      <name>operator=</name>
      <anchorfile>classAttributedString_1_1Attribute.html</anchorfile>
      <anchor>ae168cd2e9d76600d7f9bfd25a32e9e0d</anchor>
      <arglist>(Attribute &amp;&amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Attribute</name>
      <anchorfile>classAttributedString_1_1Attribute.html</anchorfile>
      <anchor>aa8b37766e81b218c5a861ed1c40cf7ea</anchor>
      <arglist>(Range&lt; int &gt; range, const Font &amp;font, Colour colour) noexcept</arglist>
    </member>
    <member kind="variable">
      <type>Range&lt; int &gt;</type>
      <name>range</name>
      <anchorfile>classAttributedString_1_1Attribute.html</anchorfile>
      <anchor>ab35a1ef10e233d3d0125b01baf4e086e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Font</type>
      <name>font</name>
      <anchorfile>classAttributedString_1_1Attribute.html</anchorfile>
      <anchor>a8b15853437c7e58f98cee0f44f2df31f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Colour</type>
      <name>colour</name>
      <anchorfile>classAttributedString_1_1Attribute.html</anchorfile>
      <anchor>a959a0822fe8fd8bf016efc5b9a8d71c1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AudioAppComponent</name>
    <filename>classAudioAppComponent.html</filename>
    <base>Component</base>
    <base>AudioSource</base>
    <member kind="function">
      <type></type>
      <name>AudioAppComponent</name>
      <anchorfile>classAudioAppComponent.html</anchorfile>
      <anchor>afd5cccd54d73110d15f048d9b3ee3721</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~AudioAppComponent</name>
      <anchorfile>classAudioAppComponent.html</anchorfile>
      <anchor>a12b0ce2bef7fe80f6bc18f2ceea20907</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAudioChannels</name>
      <anchorfile>classAudioAppComponent.html</anchorfile>
      <anchor>a1cb6b457848fa80df7efc39cf095d465</anchor>
      <arglist>(int numInputChannels, int numOutputChannels, const XmlElement *const storedSettings=nullptr)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>prepareToPlay</name>
      <anchorfile>classAudioAppComponent.html</anchorfile>
      <anchor>a86839d4efdb71c84f63da8051c0c13ad</anchor>
      <arglist>(int samplesPerBlockExpected, double sampleRate)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>releaseResources</name>
      <anchorfile>classAudioAppComponent.html</anchorfile>
      <anchor>a70ea8262dddd0dbcd216a97c36796d66</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>getNextAudioBlock</name>
      <anchorfile>classAudioAppComponent.html</anchorfile>
      <anchor>a95597e162d39500971678a44ff3568ec</anchor>
      <arglist>(const AudioSourceChannelInfo &amp;bufferToFill)=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>shutdownAudio</name>
      <anchorfile>classAudioAppComponent.html</anchorfile>
      <anchor>a40f1e657f048d02c5d065de566a84d92</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~AudioSource</name>
      <anchorfile>classAudioSource.html</anchorfile>
      <anchor>a38b04f6bf7ea63b6cf465213c164623b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>AudioDeviceManager</type>
      <name>deviceManager</name>
      <anchorfile>classAudioAppComponent.html</anchorfile>
      <anchor>a7c6fe5879b27390cefd4aacf1201c745</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>AudioSource</name>
      <anchorfile>classAudioSource.html</anchorfile>
      <anchor>a5b8ec7dc3b76d7f219d8f77d5ccfbcef</anchor>
      <arglist>() noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AudioBuffer</name>
    <filename>classAudioBuffer.html</filename>
    <templarg>Type</templarg>
    <member kind="function">
      <type></type>
      <name>AudioBuffer</name>
      <anchorfile>classAudioBuffer.html</anchorfile>
      <anchor>a4f480180fae64496886e43ea2b15ddc8</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AudioBuffer</name>
      <anchorfile>classAudioBuffer.html</anchorfile>
      <anchor>af7058cce920523b97116ee7e228ee350</anchor>
      <arglist>(int numChannelsToAllocate, int numSamplesToAllocate) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AudioBuffer</name>
      <anchorfile>classAudioBuffer.html</anchorfile>
      <anchor>a3e0beee01a96f4fd162ea8347c7a50aa</anchor>
      <arglist>(Type *const *dataToReferTo, int numChannelsToUse, int numSamples) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AudioBuffer</name>
      <anchorfile>classAudioBuffer.html</anchorfile>
      <anchor>a4d788fe19d1bd23274b85bf4028a0fb8</anchor>
      <arglist>(Type *const *dataToReferTo, int numChannelsToUse, int startSample, int numSamples) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AudioBuffer</name>
      <anchorfile>classAudioBuffer.html</anchorfile>
      <anchor>a3d9d5b59ccfee79f6aadbaf6ed4ffc28</anchor>
      <arglist>(const AudioBuffer &amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>AudioBuffer &amp;</type>
      <name>operator=</name>
      <anchorfile>classAudioBuffer.html</anchorfile>
      <anchor>a60a3e64901c3e9ddeca5512ad8d82bd7</anchor>
      <arglist>(const AudioBuffer &amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~AudioBuffer</name>
      <anchorfile>classAudioBuffer.html</anchorfile>
      <anchor>afa2458169421626445472a0e22f79360</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AudioBuffer</name>
      <anchorfile>classAudioBuffer.html</anchorfile>
      <anchor>a4124843b0d14b6d5b3ae282366e6824d</anchor>
      <arglist>(AudioBuffer &amp;&amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>AudioBuffer &amp;</type>
      <name>operator=</name>
      <anchorfile>classAudioBuffer.html</anchorfile>
      <anchor>adaf3b9d2e644c9cb85a349d1cd32dc37</anchor>
      <arglist>(AudioBuffer &amp;&amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumChannels</name>
      <anchorfile>classAudioBuffer.html</anchorfile>
      <anchor>a3a9ecde91bf5b96871ce3a474c1d831f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumSamples</name>
      <anchorfile>classAudioBuffer.html</anchorfile>
      <anchor>a74e3eeed9991f6633570b3bbcd723e2b</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const Type *</type>
      <name>getReadPointer</name>
      <anchorfile>classAudioBuffer.html</anchorfile>
      <anchor>afa0c5c0ce9fc26315a0c53d3e8d46cfa</anchor>
      <arglist>(int channelNumber) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const Type *</type>
      <name>getReadPointer</name>
      <anchorfile>classAudioBuffer.html</anchorfile>
      <anchor>ac886069987c46e419ab978cd97b8339a</anchor>
      <arglist>(int channelNumber, int sampleIndex) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Type *</type>
      <name>getWritePointer</name>
      <anchorfile>classAudioBuffer.html</anchorfile>
      <anchor>a909904fa6e89008f43c83d5375c160dc</anchor>
      <arglist>(int channelNumber) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Type *</type>
      <name>getWritePointer</name>
      <anchorfile>classAudioBuffer.html</anchorfile>
      <anchor>a1689185e6baae835a486b4c45f85892d</anchor>
      <arglist>(int channelNumber, int sampleIndex) noexcept</arglist>
    </member>
    <member kind="function">
      <type>const Type **</type>
      <name>getArrayOfReadPointers</name>
      <anchorfile>classAudioBuffer.html</anchorfile>
      <anchor>a9cf2897fe524acc82e95337a033718a3</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Type **</type>
      <name>getArrayOfWritePointers</name>
      <anchorfile>classAudioBuffer.html</anchorfile>
      <anchor>a6f52c02a21eb14d53e2a6fa46a825f4f</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSize</name>
      <anchorfile>classAudioBuffer.html</anchorfile>
      <anchor>a05e3b4cec4a2c446df87de34c2788f7b</anchor>
      <arglist>(int newNumChannels, int newNumSamples, bool keepExistingContent=false, bool clearExtraSpace=false, bool avoidReallocating=false) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDataToReferTo</name>
      <anchorfile>classAudioBuffer.html</anchorfile>
      <anchor>ab2daca36339708bc76e01fea7b7b3059</anchor>
      <arglist>(Type **dataToReferTo, const int newNumChannels, const int newNumSamples) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>makeCopyOf</name>
      <anchorfile>classAudioBuffer.html</anchorfile>
      <anchor>a88f19397f068366e13aa53a0b6f92913</anchor>
      <arglist>(const AudioBuffer&lt; OtherType &gt; &amp;other, bool avoidReallocating=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classAudioBuffer.html</anchorfile>
      <anchor>a7dcadc4a02b048ae99166b5b306e552a</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classAudioBuffer.html</anchorfile>
      <anchor>a97d34c7bc5dfd19fa9450d112972422b</anchor>
      <arglist>(int startSample, int numSamples) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classAudioBuffer.html</anchorfile>
      <anchor>a3c0cc34d68718a0f24bcea846cf92f61</anchor>
      <arglist>(int channel, int startSample, int numSamples) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasBeenCleared</name>
      <anchorfile>classAudioBuffer.html</anchorfile>
      <anchor>acc922971fe78c785110e46d30c210d9c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Type</type>
      <name>getSample</name>
      <anchorfile>classAudioBuffer.html</anchorfile>
      <anchor>afa9b351b6e3cba941cf7c44860851991</anchor>
      <arglist>(int channel, int sampleIndex) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSample</name>
      <anchorfile>classAudioBuffer.html</anchorfile>
      <anchor>a8aba905085e81fefb8ef4c8589c9e7d8</anchor>
      <arglist>(int destChannel, int destSample, Type newValue) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addSample</name>
      <anchorfile>classAudioBuffer.html</anchorfile>
      <anchor>ab46e9ad400252255daa1086b354454b8</anchor>
      <arglist>(int destChannel, int destSample, Type valueToAdd) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyGain</name>
      <anchorfile>classAudioBuffer.html</anchorfile>
      <anchor>a9ffc61d339e455d4bddc7cf055a63ee3</anchor>
      <arglist>(int channel, int startSample, int numSamples, Type gain) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyGain</name>
      <anchorfile>classAudioBuffer.html</anchorfile>
      <anchor>a25c9a05ff546379ba7bed697e616bfb3</anchor>
      <arglist>(int startSample, int numSamples, Type gain) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyGain</name>
      <anchorfile>classAudioBuffer.html</anchorfile>
      <anchor>a0c4794d6dbfd6d0c20d041fffc9939af</anchor>
      <arglist>(Type gain) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyGainRamp</name>
      <anchorfile>classAudioBuffer.html</anchorfile>
      <anchor>ab0542e5b626b36087f0054e795695682</anchor>
      <arglist>(int channel, int startSample, int numSamples, Type startGain, Type endGain) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyGainRamp</name>
      <anchorfile>classAudioBuffer.html</anchorfile>
      <anchor>af5cde88e72248367626419733fc58fc2</anchor>
      <arglist>(int startSample, int numSamples, Type startGain, Type endGain) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addFrom</name>
      <anchorfile>classAudioBuffer.html</anchorfile>
      <anchor>a20c20b1e68b0e18f958dd9bcb5690a84</anchor>
      <arglist>(int destChannel, int destStartSample, const AudioBuffer &amp;source, int sourceChannel, int sourceStartSample, int numSamples, Type gainToApplyToSource=(Type) 1) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addFrom</name>
      <anchorfile>classAudioBuffer.html</anchorfile>
      <anchor>abb01aeb057e87b639eb758896cfc9ca9</anchor>
      <arglist>(int destChannel, int destStartSample, const Type *source, int numSamples, Type gainToApplyToSource=(Type) 1) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addFromWithRamp</name>
      <anchorfile>classAudioBuffer.html</anchorfile>
      <anchor>a1853da41f2a3d87fa6291a2bf2adca05</anchor>
      <arglist>(int destChannel, int destStartSample, const Type *source, int numSamples, Type startGain, Type endGain) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyFrom</name>
      <anchorfile>classAudioBuffer.html</anchorfile>
      <anchor>a9ec751bfa23564c011bf3940ca17b743</anchor>
      <arglist>(int destChannel, int destStartSample, const AudioBuffer &amp;source, int sourceChannel, int sourceStartSample, int numSamples) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyFrom</name>
      <anchorfile>classAudioBuffer.html</anchorfile>
      <anchor>a80d6c874d56ebfbf3c0aca2d2b8c4ab7</anchor>
      <arglist>(int destChannel, int destStartSample, const Type *source, int numSamples) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyFrom</name>
      <anchorfile>classAudioBuffer.html</anchorfile>
      <anchor>a2684ecc739be23105f3a2f0605e2a928</anchor>
      <arglist>(int destChannel, int destStartSample, const Type *source, int numSamples, Type gain) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyFromWithRamp</name>
      <anchorfile>classAudioBuffer.html</anchorfile>
      <anchor>ae1cff4483f4022ed49dc91eda31098c9</anchor>
      <arglist>(int destChannel, int destStartSample, const Type *source, int numSamples, Type startGain, Type endGain) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Range&lt; Type &gt;</type>
      <name>findMinMax</name>
      <anchorfile>classAudioBuffer.html</anchorfile>
      <anchor>ae315faecc34e5dc86ba9bdc772af9a2d</anchor>
      <arglist>(int channel, int startSample, int numSamples) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Type</type>
      <name>getMagnitude</name>
      <anchorfile>classAudioBuffer.html</anchorfile>
      <anchor>af0f0099350d92091c24e8b14b149328e</anchor>
      <arglist>(int channel, int startSample, int numSamples) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Type</type>
      <name>getMagnitude</name>
      <anchorfile>classAudioBuffer.html</anchorfile>
      <anchor>afdd67f1761872b093a2065dc8f9b3c9e</anchor>
      <arglist>(int startSample, int numSamples) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Type</type>
      <name>getRMSLevel</name>
      <anchorfile>classAudioBuffer.html</anchorfile>
      <anchor>a7e2c4235fa4a6da3aca73f17b46704ac</anchor>
      <arglist>(int channel, int startSample, int numSamples) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reverse</name>
      <anchorfile>classAudioBuffer.html</anchorfile>
      <anchor>a41cbf05e4d7054e02d5844b09a8eceb5</anchor>
      <arglist>(int channel, int startSample, int numSamples) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reverse</name>
      <anchorfile>classAudioBuffer.html</anchorfile>
      <anchor>a842674c6e6bd70f27fcbdef7cc76e283</anchor>
      <arglist>(int startSample, int numSamples) const noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AudioCDBurner</name>
    <filename>classAudioCDBurner.html</filename>
    <base>ChangeBroadcaster</base>
    <class kind="class">AudioCDBurner::BurnProgressListener</class>
    <member kind="enumeration">
      <type></type>
      <name>DiskState</name>
      <anchorfile>classAudioCDBurner.html</anchorfile>
      <anchor>a75c01de0b51d56d6f78a1b56ff4da846</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>unknown</name>
      <anchorfile>classAudioCDBurner.html</anchorfile>
      <anchor>a75c01de0b51d56d6f78a1b56ff4da846acfe4c1971599161b618335acaa202fac</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>trayOpen</name>
      <anchorfile>classAudioCDBurner.html</anchorfile>
      <anchor>a75c01de0b51d56d6f78a1b56ff4da846ab8a44178fa9c27bf9b55a9c56de9b448</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>noDisc</name>
      <anchorfile>classAudioCDBurner.html</anchorfile>
      <anchor>a75c01de0b51d56d6f78a1b56ff4da846ab4602a1c02a02d0110903869162ca325</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>writableDiskPresent</name>
      <anchorfile>classAudioCDBurner.html</anchorfile>
      <anchor>a75c01de0b51d56d6f78a1b56ff4da846ab2074d30eb1882e6cfc92b6f4ff24c31</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>readOnlyDiskPresent</name>
      <anchorfile>classAudioCDBurner.html</anchorfile>
      <anchor>a75c01de0b51d56d6f78a1b56ff4da846a5c5dd3ef71603fe3b53c41fda2690db9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~AudioCDBurner</name>
      <anchorfile>classAudioCDBurner.html</anchorfile>
      <anchor>a8d38668744c2e8a6e24ee98caff61ce2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>DiskState</type>
      <name>getDiskState</name>
      <anchorfile>classAudioCDBurner.html</anchorfile>
      <anchor>a00a94ec3a760486bd4d10bc7ef978285</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isDiskPresent</name>
      <anchorfile>classAudioCDBurner.html</anchorfile>
      <anchor>ab7aaeb182922a1199ceeb670321ed5ed</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>openTray</name>
      <anchorfile>classAudioCDBurner.html</anchorfile>
      <anchor>a4178950eabcb2788174542bb8b5bf7a7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>DiskState</type>
      <name>waitUntilStateChange</name>
      <anchorfile>classAudioCDBurner.html</anchorfile>
      <anchor>aad027c99aed40869ded438d730b8fa65</anchor>
      <arglist>(int timeOutMilliseconds)</arglist>
    </member>
    <member kind="function">
      <type>Array&lt; int &gt;</type>
      <name>getAvailableWriteSpeeds</name>
      <anchorfile>classAudioCDBurner.html</anchorfile>
      <anchor>a185770c2b43aad2bc60e8e267f9923e4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setBufferUnderrunProtection</name>
      <anchorfile>classAudioCDBurner.html</anchorfile>
      <anchor>a74299a88ffe40c06d903f36c0bb84347</anchor>
      <arglist>(bool shouldBeEnabled)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumAvailableAudioBlocks</name>
      <anchorfile>classAudioCDBurner.html</anchorfile>
      <anchor>a84fec33602b1dd674219ab1f68d51f95</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addAudioTrack</name>
      <anchorfile>classAudioCDBurner.html</anchorfile>
      <anchor>a57f09669a2517f3ec4634df041a965b7</anchor>
      <arglist>(AudioSource *source, int numSamples)</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>burn</name>
      <anchorfile>classAudioCDBurner.html</anchorfile>
      <anchor>a4e98ca1f950b1c56fc0d021e0d293769</anchor>
      <arglist>(BurnProgressListener *listener, bool ejectDiscAfterwards, bool performFakeBurnForTesting, int writeSpeed)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>abortBurn</name>
      <anchorfile>classAudioCDBurner.html</anchorfile>
      <anchor>a085b0ceaf4cd982d6bb1e95dd18752f7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ChangeBroadcaster</name>
      <anchorfile>classChangeBroadcaster.html</anchorfile>
      <anchor>a1c8ccfa186a47d58a05e7f1f1576c038</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ChangeBroadcaster</name>
      <anchorfile>classChangeBroadcaster.html</anchorfile>
      <anchor>a3b2f8465cc6c09c0583c8bdf56319742</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addChangeListener</name>
      <anchorfile>classChangeBroadcaster.html</anchorfile>
      <anchor>ad68416fe79a94cd5c99519bdea6c2a06</anchor>
      <arglist>(ChangeListener *listener)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeChangeListener</name>
      <anchorfile>classChangeBroadcaster.html</anchorfile>
      <anchor>ae558a26c795278549a63e342bd5f1650</anchor>
      <arglist>(ChangeListener *listener)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeAllChangeListeners</name>
      <anchorfile>classChangeBroadcaster.html</anchorfile>
      <anchor>a6b9c150078318d419debc82e6f22ce58</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sendChangeMessage</name>
      <anchorfile>classChangeBroadcaster.html</anchorfile>
      <anchor>a10f01d1c0a7fde85355321985a682cbd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sendSynchronousChangeMessage</name>
      <anchorfile>classChangeBroadcaster.html</anchorfile>
      <anchor>a5d16cd01b9af4bacb1716530af17f77b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dispatchPendingMessages</name>
      <anchorfile>classChangeBroadcaster.html</anchorfile>
      <anchor>a78f62ecd57a016f8ba7a6ce55454947d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StringArray</type>
      <name>findAvailableDevices</name>
      <anchorfile>classAudioCDBurner.html</anchorfile>
      <anchor>aa91adde6eab8e134842597c331cc3afb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static AudioCDBurner *</type>
      <name>openDevice</name>
      <anchorfile>classAudioCDBurner.html</anchorfile>
      <anchor>a31c629a961f2b988c525ebc30f3f52fd</anchor>
      <arglist>(const int deviceIndex)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AudioCDBurner::BurnProgressListener</name>
    <filename>classAudioCDBurner_1_1BurnProgressListener.html</filename>
    <member kind="function">
      <type></type>
      <name>BurnProgressListener</name>
      <anchorfile>classAudioCDBurner_1_1BurnProgressListener.html</anchorfile>
      <anchor>ac4f6a46602763793156bcaf13f74a468</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BurnProgressListener</name>
      <anchorfile>classAudioCDBurner_1_1BurnProgressListener.html</anchorfile>
      <anchor>a8e20fe9f41f22d07a0392e843834841b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>audioCDBurnProgress</name>
      <anchorfile>classAudioCDBurner_1_1BurnProgressListener.html</anchorfile>
      <anchor>a3a03f8f13d40a6ae0e30d3bb2323246c</anchor>
      <arglist>(float proportionComplete)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AudioCDReader</name>
    <filename>classAudioCDReader.html</filename>
    <base>AudioFormatReader</base>
    <member kind="enumvalue">
      <type>@</type>
      <name>framesPerSecond</name>
      <anchorfile>classAudioCDReader.html</anchorfile>
      <anchor>a1862227d7416b7b600f41b3f9ab31d6eabcf6b807bcb841f2ae1fb9c3f518aa61</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>samplesPerFrame</name>
      <anchorfile>classAudioCDReader.html</anchorfile>
      <anchor>a1862227d7416b7b600f41b3f9ab31d6ea1db74900d5d80b397c1bbf11691cee93</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~AudioCDReader</name>
      <anchorfile>classAudioCDReader.html</anchorfile>
      <anchor>aa22eb22de4ee9cd9c7463acd20cc8a2a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>readSamples</name>
      <anchorfile>classAudioCDReader.html</anchorfile>
      <anchor>a0744cc267fb83dc86f1c56c14e7468d1</anchor>
      <arglist>(int **destSamples, int numDestChannels, int startOffsetInDestBuffer, int64 startSampleInFile, int numSamples) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isCDStillPresent</name>
      <anchorfile>classAudioCDReader.html</anchorfile>
      <anchor>ac3b788ba2730d9d51cf632204ff463aa</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumTracks</name>
      <anchorfile>classAudioCDReader.html</anchorfile>
      <anchor>ae2a64231913ddfb9691da391e7946f6f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getPositionOfTrackStart</name>
      <anchorfile>classAudioCDReader.html</anchorfile>
      <anchor>aa132d0acf416907efc847770983a38db</anchor>
      <arglist>(int trackNum) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isTrackAudio</name>
      <anchorfile>classAudioCDReader.html</anchorfile>
      <anchor>a2446591a8b6e9c265d7ce286d55f57ed</anchor>
      <arglist>(int trackNum) const </arglist>
    </member>
    <member kind="function">
      <type>const Array&lt; int &gt; &amp;</type>
      <name>getTrackOffsets</name>
      <anchorfile>classAudioCDReader.html</anchorfile>
      <anchor>a3e3162c9023230744488cbd56fecaf8a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>refreshTrackLengths</name>
      <anchorfile>classAudioCDReader.html</anchorfile>
      <anchor>af27f008d4c543eb171323ff8ab5b1ab4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enableIndexScanning</name>
      <anchorfile>classAudioCDReader.html</anchorfile>
      <anchor>a7119f9f8fb88977c79ed5479b4f694ed</anchor>
      <arglist>(bool enabled)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getLastIndex</name>
      <anchorfile>classAudioCDReader.html</anchorfile>
      <anchor>a88a1359ce7a1f358ab736d0f52f9a8c1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Array&lt; int &gt;</type>
      <name>findIndexesInTrack</name>
      <anchorfile>classAudioCDReader.html</anchorfile>
      <anchor>a7136e80e819d1132d755a56167f2b6b4</anchor>
      <arglist>(const int trackNumber)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getCDDBId</name>
      <anchorfile>classAudioCDReader.html</anchorfile>
      <anchor>a0b482f236fda316a47dbc661ceb59484</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ejectDisk</name>
      <anchorfile>classAudioCDReader.html</anchorfile>
      <anchor>a41f27ce866212984e7a657f316e63e24</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~AudioFormatReader</name>
      <anchorfile>classAudioFormatReader.html</anchorfile>
      <anchor>aa5c4a7c0715e60d829a03b8aa67a8c49</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const String &amp;</type>
      <name>getFormatName</name>
      <anchorfile>classAudioFormatReader.html</anchorfile>
      <anchor>ae90256289d171f649fd83d2070b4ae32</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>read</name>
      <anchorfile>classAudioFormatReader.html</anchorfile>
      <anchor>afe581e23098c90f1fb187fdff68d3481</anchor>
      <arglist>(int *const *destSamples, int numDestChannels, int64 startSampleInSource, int numSamplesToRead, bool fillLeftoverChannelsWithCopies)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read</name>
      <anchorfile>classAudioFormatReader.html</anchorfile>
      <anchor>a76b621162d046224e14943782c42e090</anchor>
      <arglist>(AudioSampleBuffer *buffer, int startSampleInDestBuffer, int numSamples, int64 readerStartSample, bool useReaderLeftChan, bool useReaderRightChan)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>readMaxLevels</name>
      <anchorfile>classAudioFormatReader.html</anchorfile>
      <anchor>aafdf75471df1ce853785ecd5fe74b9f7</anchor>
      <arglist>(int64 startSample, int64 numSamples, Range&lt; float &gt; *results, int numChannelsToRead)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>readMaxLevels</name>
      <anchorfile>classAudioFormatReader.html</anchorfile>
      <anchor>aa6393d5cb57b6a03cb7544df495d86b6</anchor>
      <arglist>(int64 startSample, int64 numSamples, float &amp;lowestLeft, float &amp;highestLeft, float &amp;lowestRight, float &amp;highestRight)</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>searchForLevel</name>
      <anchorfile>classAudioFormatReader.html</anchorfile>
      <anchor>a088e8f4f625a23a4fd0234eec16ec53a</anchor>
      <arglist>(int64 startSample, int64 numSamplesToSearch, double magnitudeRangeMinimum, double magnitudeRangeMaximum, int minimumConsecutiveSamples)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StringArray</type>
      <name>getAvailableCDNames</name>
      <anchorfile>classAudioCDReader.html</anchorfile>
      <anchor>a1d053104ebe5a09022389d849b5ab4e0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static AudioCDReader *</type>
      <name>createReaderForCD</name>
      <anchorfile>classAudioCDReader.html</anchorfile>
      <anchor>ad7407fcef1ba2cffc8890ef2be212f2a</anchor>
      <arglist>(const int index)</arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>sampleRate</name>
      <anchorfile>classAudioFormatReader.html</anchorfile>
      <anchor>aafcd07b3ac08e83c019621cd8cd0c7c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>bitsPerSample</name>
      <anchorfile>classAudioFormatReader.html</anchorfile>
      <anchor>aa450170dd89d247be8eb1f657b8b47d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int64</type>
      <name>lengthInSamples</name>
      <anchorfile>classAudioFormatReader.html</anchorfile>
      <anchor>af7373fd7e45ed1f026647fc8671e997f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>numChannels</name>
      <anchorfile>classAudioFormatReader.html</anchorfile>
      <anchor>a2a7c577b4ececb03d3658fd0625c5b70</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>usesFloatingPointData</name>
      <anchorfile>classAudioFormatReader.html</anchorfile>
      <anchor>aed5e9ba760d519f110c18053d6adba7a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>StringPairArray</type>
      <name>metadataValues</name>
      <anchorfile>classAudioFormatReader.html</anchorfile>
      <anchor>a8dfe48ed0e171928185c716811f5ecdb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>InputStream *</type>
      <name>input</name>
      <anchorfile>classAudioFormatReader.html</anchorfile>
      <anchor>a81797ede6915ec762408d8ed23ec4d10</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>AudioFormatReader</name>
      <anchorfile>classAudioFormatReader.html</anchorfile>
      <anchor>a2dfb6080eb01440fa8e8dde6b7baf5c6</anchor>
      <arglist>(InputStream *sourceStream, const String &amp;formatName)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>clearSamplesBeyondAvailableLength</name>
      <anchorfile>classAudioFormatReader.html</anchorfile>
      <anchor>a263fd3b6a51850da53fe57688f9ccb46</anchor>
      <arglist>(int **destSamples, int numDestChannels, int startOffsetInDestBuffer, int64 startSampleInFile, int &amp;numSamples, int64 fileLengthInSamples)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AudioChannelSet</name>
    <filename>classAudioChannelSet.html</filename>
    <member kind="enumeration">
      <type></type>
      <name>ChannelType</name>
      <anchorfile>classAudioChannelSet.html</anchorfile>
      <anchor>ab917e490df2e0edfb1087e4c4f8d652e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>unknown</name>
      <anchorfile>classAudioChannelSet.html</anchorfile>
      <anchor>ab917e490df2e0edfb1087e4c4f8d652eaaa4afa88e8da74c57e088bb364518d6c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>left</name>
      <anchorfile>classAudioChannelSet.html</anchorfile>
      <anchor>ab917e490df2e0edfb1087e4c4f8d652ea4dfc2355bdcf8afda92cfa388c543937</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>right</name>
      <anchorfile>classAudioChannelSet.html</anchorfile>
      <anchor>ab917e490df2e0edfb1087e4c4f8d652ea5cd28c0881d53656730afec3cb77a7a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>centre</name>
      <anchorfile>classAudioChannelSet.html</anchorfile>
      <anchor>ab917e490df2e0edfb1087e4c4f8d652eae69498dc5874ee9f9d67d0479225d701</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>LFE</name>
      <anchorfile>classAudioChannelSet.html</anchorfile>
      <anchor>ab917e490df2e0edfb1087e4c4f8d652eae9c3c0d319ffaa4a452fefd1f04b0cc6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>leftSurround</name>
      <anchorfile>classAudioChannelSet.html</anchorfile>
      <anchor>ab917e490df2e0edfb1087e4c4f8d652ea49bd221ff66a6ff182d6f502f70fc80a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>rightSurround</name>
      <anchorfile>classAudioChannelSet.html</anchorfile>
      <anchor>ab917e490df2e0edfb1087e4c4f8d652ead79363bee2db6b4552f5f6e5b5ae770f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>leftCentre</name>
      <anchorfile>classAudioChannelSet.html</anchorfile>
      <anchor>ab917e490df2e0edfb1087e4c4f8d652ea7a14bf0c194fc474f245b6852055e017</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>rightCentre</name>
      <anchorfile>classAudioChannelSet.html</anchorfile>
      <anchor>ab917e490df2e0edfb1087e4c4f8d652ead09531f815283fd9dd1e00e75b37f289</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>centreSurround</name>
      <anchorfile>classAudioChannelSet.html</anchorfile>
      <anchor>ab917e490df2e0edfb1087e4c4f8d652ea1dac16a2969777c1255fb1e074e0f452</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>surround</name>
      <anchorfile>classAudioChannelSet.html</anchorfile>
      <anchor>ab917e490df2e0edfb1087e4c4f8d652ead7addeac6edf5a12148fabfd13a09100</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>leftSurroundSide</name>
      <anchorfile>classAudioChannelSet.html</anchorfile>
      <anchor>ab917e490df2e0edfb1087e4c4f8d652ea54489b794b5d8373245a97376c17cbcf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>rightSurroundSide</name>
      <anchorfile>classAudioChannelSet.html</anchorfile>
      <anchor>ab917e490df2e0edfb1087e4c4f8d652ea7f1ce89b09734bb05c4b4b303845cee9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>topMiddle</name>
      <anchorfile>classAudioChannelSet.html</anchorfile>
      <anchor>ab917e490df2e0edfb1087e4c4f8d652ea06c75bddcac132ac47abe9d97c9db60a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>topFrontLeft</name>
      <anchorfile>classAudioChannelSet.html</anchorfile>
      <anchor>ab917e490df2e0edfb1087e4c4f8d652ea9b18eed069cc65f40000bbe9f03a722e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>topFrontCentre</name>
      <anchorfile>classAudioChannelSet.html</anchorfile>
      <anchor>ab917e490df2e0edfb1087e4c4f8d652ea26e6fed7ec52bca8896de254b6a1d53c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>topFrontRight</name>
      <anchorfile>classAudioChannelSet.html</anchorfile>
      <anchor>ab917e490df2e0edfb1087e4c4f8d652eafe55ef181b8d826439b9c89257b72e0e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>topRearLeft</name>
      <anchorfile>classAudioChannelSet.html</anchorfile>
      <anchor>ab917e490df2e0edfb1087e4c4f8d652ea233a99aad9108e924c35ed144e09ec73</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>topRearCentre</name>
      <anchorfile>classAudioChannelSet.html</anchorfile>
      <anchor>ab917e490df2e0edfb1087e4c4f8d652eabb299d68b9795bc88efe6543c51d08ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>topRearRight</name>
      <anchorfile>classAudioChannelSet.html</anchorfile>
      <anchor>ab917e490df2e0edfb1087e4c4f8d652ea17c1d21499155e5bff232bc2c279f24d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>LFE2</name>
      <anchorfile>classAudioChannelSet.html</anchorfile>
      <anchor>ab917e490df2e0edfb1087e4c4f8d652ea0fdd29070c1802006e6e0601614a5774</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>leftSurroundRear</name>
      <anchorfile>classAudioChannelSet.html</anchorfile>
      <anchor>ab917e490df2e0edfb1087e4c4f8d652ea7f97493c50eca058c713ebe9870732b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>rightSurroundRear</name>
      <anchorfile>classAudioChannelSet.html</anchorfile>
      <anchor>ab917e490df2e0edfb1087e4c4f8d652ea42979a8c438351bc314f8df0194303a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>wideLeft</name>
      <anchorfile>classAudioChannelSet.html</anchorfile>
      <anchor>ab917e490df2e0edfb1087e4c4f8d652eaf3bdf38a52236efff9f0494f95c7f2ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>wideRight</name>
      <anchorfile>classAudioChannelSet.html</anchorfile>
      <anchor>ab917e490df2e0edfb1087e4c4f8d652eaaf7b197484dd4e491605c4afcb42ff07</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>ambisonicW</name>
      <anchorfile>classAudioChannelSet.html</anchorfile>
      <anchor>ab917e490df2e0edfb1087e4c4f8d652ea67aee72580ffafb485260470d135a3b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>ambisonicX</name>
      <anchorfile>classAudioChannelSet.html</anchorfile>
      <anchor>ab917e490df2e0edfb1087e4c4f8d652ead4e8c1dc7e9175420e59561e18ee681a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>ambisonicY</name>
      <anchorfile>classAudioChannelSet.html</anchorfile>
      <anchor>ab917e490df2e0edfb1087e4c4f8d652ea34e23dcfaba94768a9854aad5be33626</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>ambisonicZ</name>
      <anchorfile>classAudioChannelSet.html</anchorfile>
      <anchor>ab917e490df2e0edfb1087e4c4f8d652ea67ac0e6453be62d3cf5de45ad9a8f245</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>discreteChannel0</name>
      <anchorfile>classAudioChannelSet.html</anchorfile>
      <anchor>ab917e490df2e0edfb1087e4c4f8d652ead39bcac579ad18bca050376e1696af4a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>maxChannelsOfNamedLayout</name>
      <anchorfile>classAudioChannelSet.html</anchorfile>
      <anchor>aa232fc50bb02ddf633ebc4e7522d010fa19df1572e8f673a0433d98d2a3d6bd09</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AudioChannelSet</name>
      <anchorfile>classAudioChannelSet.html</anchorfile>
      <anchor>acf4d8c8bc0a91a41030e287ff25fee99</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addChannel</name>
      <anchorfile>classAudioChannelSet.html</anchorfile>
      <anchor>a769021b5cd3b2ca28dd3fec8a43bb98d</anchor>
      <arglist>(ChannelType newChannelType)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeChannel</name>
      <anchorfile>classAudioChannelSet.html</anchorfile>
      <anchor>a7cfafbfde1725ab589abc7b12ca4886d</anchor>
      <arglist>(ChannelType newChannelType)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>classAudioChannelSet.html</anchorfile>
      <anchor>ad7be564dafc89bddf37dea65d7f014ba</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isDisabled</name>
      <anchorfile>classAudioChannelSet.html</anchorfile>
      <anchor>a20055745a7bc648b55ca1822525bffe3</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Array&lt; ChannelType &gt;</type>
      <name>getChannelTypes</name>
      <anchorfile>classAudioChannelSet.html</anchorfile>
      <anchor>a7a7e2a25d1cc20a15d5f7ec7faa8f0a7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ChannelType</type>
      <name>getTypeOfChannel</name>
      <anchorfile>classAudioChannelSet.html</anchorfile>
      <anchor>a263a5f0fc1ce545e2a83831353c0edf0</anchor>
      <arglist>(int channelIndex) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getChannelIndexForType</name>
      <anchorfile>classAudioChannelSet.html</anchorfile>
      <anchor>a95d973ed2d227a757688691382c43871</anchor>
      <arglist>(ChannelType type) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>getSpeakerArrangementAsString</name>
      <anchorfile>classAudioChannelSet.html</anchorfile>
      <anchor>ab73f1bea9e022cbea1e6882983535deb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>getDescription</name>
      <anchorfile>classAudioChannelSet.html</anchorfile>
      <anchor>a5b964e99349ab44236e1212541b11784</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isDiscreteLayout</name>
      <anchorfile>classAudioChannelSet.html</anchorfile>
      <anchor>a4d17f2bda3cc1d895cd596c647775802</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>intersect</name>
      <anchorfile>classAudioChannelSet.html</anchorfile>
      <anchor>a85c5ed0b33bc20e6861d3bd669f0d63e</anchor>
      <arglist>(const AudioChannelSet &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classAudioChannelSet.html</anchorfile>
      <anchor>a04b8b4bbcc371b09cd23953227244191</anchor>
      <arglist>(const AudioChannelSet &amp;) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classAudioChannelSet.html</anchorfile>
      <anchor>ae8752cb942f70251af2cb8206e8bbede</anchor>
      <arglist>(const AudioChannelSet &amp;) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>classAudioChannelSet.html</anchorfile>
      <anchor>a370c7443d29c98f0086281c8d1391a70</anchor>
      <arglist>(const AudioChannelSet &amp;) const noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static AudioChannelSet</type>
      <name>disabled</name>
      <anchorfile>classAudioChannelSet.html</anchorfile>
      <anchor>a707681c4a7fc696d05c887e37e29bbc2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static AudioChannelSet</type>
      <name>mono</name>
      <anchorfile>classAudioChannelSet.html</anchorfile>
      <anchor>a10e2d897e8242e1cfb133bb4b01fbbb0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static AudioChannelSet</type>
      <name>stereo</name>
      <anchorfile>classAudioChannelSet.html</anchorfile>
      <anchor>a48ad477fe7a908ee23030d198d9b50eb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static AudioChannelSet</type>
      <name>createLCR</name>
      <anchorfile>classAudioChannelSet.html</anchorfile>
      <anchor>a3689327d326cbaef99d3d4e5bfd5d837</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static AudioChannelSet</type>
      <name>createLRS</name>
      <anchorfile>classAudioChannelSet.html</anchorfile>
      <anchor>a746b44b43d0d2cb7812f269c8dbd7ba6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static AudioChannelSet</type>
      <name>createLCRS</name>
      <anchorfile>classAudioChannelSet.html</anchorfile>
      <anchor>abd9782e68c302f4dc222af5676839fb3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static AudioChannelSet</type>
      <name>create5point0</name>
      <anchorfile>classAudioChannelSet.html</anchorfile>
      <anchor>afa0d4df7126f123cb1dd23de69069a0b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static AudioChannelSet</type>
      <name>create5point1</name>
      <anchorfile>classAudioChannelSet.html</anchorfile>
      <anchor>a0229170f480c70668850383809600bd3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static AudioChannelSet</type>
      <name>create6point0</name>
      <anchorfile>classAudioChannelSet.html</anchorfile>
      <anchor>ac351cc945b2b837bea38307e0bcbd035</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static AudioChannelSet</type>
      <name>create6point1</name>
      <anchorfile>classAudioChannelSet.html</anchorfile>
      <anchor>a792e2bd7a0b5f156a2474d73511d027f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static AudioChannelSet</type>
      <name>create6point0Music</name>
      <anchorfile>classAudioChannelSet.html</anchorfile>
      <anchor>ab7207d691320d8c8ffc87419359215a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static AudioChannelSet</type>
      <name>create6point1Music</name>
      <anchorfile>classAudioChannelSet.html</anchorfile>
      <anchor>a7188d1c2910df0bc1d013042acfdde57</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static AudioChannelSet</type>
      <name>create7point0</name>
      <anchorfile>classAudioChannelSet.html</anchorfile>
      <anchor>ac512f8f010cc0719f5fd7ff893400338</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static AudioChannelSet</type>
      <name>create7point0SDDS</name>
      <anchorfile>classAudioChannelSet.html</anchorfile>
      <anchor>a93c8027e1240fcb128766bbdb0e52226</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static AudioChannelSet</type>
      <name>create7point1</name>
      <anchorfile>classAudioChannelSet.html</anchorfile>
      <anchor>acf400d2cdb7d2d12ec6b9c23e7b3b76c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static AudioChannelSet</type>
      <name>create7point1SDDS</name>
      <anchorfile>classAudioChannelSet.html</anchorfile>
      <anchor>a1ba1b825429abb83dde01c8de7845cae</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static AudioChannelSet</type>
      <name>ambisonic</name>
      <anchorfile>classAudioChannelSet.html</anchorfile>
      <anchor>ab16647dcce7ae98b9a4bafe2c5deabab</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static AudioChannelSet</type>
      <name>quadraphonic</name>
      <anchorfile>classAudioChannelSet.html</anchorfile>
      <anchor>a8596c948f2696983bd7697d59c5001cb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static AudioChannelSet</type>
      <name>pentagonal</name>
      <anchorfile>classAudioChannelSet.html</anchorfile>
      <anchor>abea9536daa8a1805116199c72dc7b2f6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static AudioChannelSet</type>
      <name>hexagonal</name>
      <anchorfile>classAudioChannelSet.html</anchorfile>
      <anchor>adf061419ae04631b802ed6716da910e7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static AudioChannelSet</type>
      <name>octagonal</name>
      <anchorfile>classAudioChannelSet.html</anchorfile>
      <anchor>a741ed7da3ad990c305cb4de2f0baaa79</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static AudioChannelSet</type>
      <name>discreteChannels</name>
      <anchorfile>classAudioChannelSet.html</anchorfile>
      <anchor>a55e33e3cdc5895c403cff9dd4414b6d7</anchor>
      <arglist>(int numChannels)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static AudioChannelSet</type>
      <name>canonicalChannelSet</name>
      <anchorfile>classAudioChannelSet.html</anchorfile>
      <anchor>a2a0e656eeb59c2ef0e2ac17433381ddf</anchor>
      <arglist>(int numChannels)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static AudioChannelSet</type>
      <name>namedChannelSet</name>
      <anchorfile>classAudioChannelSet.html</anchorfile>
      <anchor>a8864c1da410b3ec81ed3698ea61f2d12</anchor>
      <arglist>(int numChannels)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Array&lt; AudioChannelSet &gt;</type>
      <name>channelSetsWithNumberOfChannels</name>
      <anchorfile>classAudioChannelSet.html</anchorfile>
      <anchor>a80d68c67160dc1e5f549fda2314391cc</anchor>
      <arglist>(int numChannels)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static String</type>
      <name>getChannelTypeName</name>
      <anchorfile>classAudioChannelSet.html</anchorfile>
      <anchor>a0cac91d52815c80b9df670112d0bde08</anchor>
      <arglist>(ChannelType)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static String</type>
      <name>getAbbreviatedChannelTypeName</name>
      <anchorfile>classAudioChannelSet.html</anchorfile>
      <anchor>af906e8d711de27842262383fdd1a0c42</anchor>
      <arglist>(ChannelType)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ChannelType</type>
      <name>getChannelTypeFromAbbreviation</name>
      <anchorfile>classAudioChannelSet.html</anchorfile>
      <anchor>a8156f489af380f5176fc6db6b2b3257a</anchor>
      <arglist>(const String &amp;abbreviation)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static AudioChannelSet</type>
      <name>fromAbbreviatedString</name>
      <anchorfile>classAudioChannelSet.html</anchorfile>
      <anchor>a335e98878c7e1e6ab280fe96e30a6189</anchor>
      <arglist>(const String &amp;set)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AudioData</name>
    <filename>classAudioData.html</filename>
    <class kind="class">AudioData::Converter</class>
    <class kind="class">AudioData::ConverterInstance</class>
    <class kind="class">AudioData::Pointer</class>
  </compound>
  <compound kind="class">
    <name>AudioData::Converter</name>
    <filename>classAudioData_1_1Converter.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Converter</name>
      <anchorfile>classAudioData_1_1Converter.html</anchorfile>
      <anchor>a61cd524dfc4096c45f9594a188583ac7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>convertSamples</name>
      <anchorfile>classAudioData_1_1Converter.html</anchorfile>
      <anchor>af16d441acd5bf3cf8e26405fd5e54874</anchor>
      <arglist>(void *destSamples, const void *sourceSamples, int numSamples) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>convertSamples</name>
      <anchorfile>classAudioData_1_1Converter.html</anchorfile>
      <anchor>a8e36983e8f05b3496e9c9e407d7f3448</anchor>
      <arglist>(void *destSamples, int destSubChannel, const void *sourceSamples, int sourceSubChannel, int numSamples) const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AudioData::ConverterInstance</name>
    <filename>classAudioData_1_1ConverterInstance.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>AudioData::Converter</base>
    <member kind="function">
      <type></type>
      <name>ConverterInstance</name>
      <anchorfile>classAudioData_1_1ConverterInstance.html</anchorfile>
      <anchor>ac2b8dd275f21a983a7df95d71a07c442</anchor>
      <arglist>(int numSourceChannels=1, int numDestChannels=1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>convertSamples</name>
      <anchorfile>classAudioData_1_1ConverterInstance.html</anchorfile>
      <anchor>a3683a10b13c8284a13e367d36f58fadf</anchor>
      <arglist>(void *dest, const void *source, int numSamples) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>convertSamples</name>
      <anchorfile>classAudioData_1_1ConverterInstance.html</anchorfile>
      <anchor>a07faa7a55572f1f7ae837a9c8cbb0e1b</anchor>
      <arglist>(void *dest, int destSubChannel, const void *source, int sourceSubChannel, int numSamples) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AudioData::Pointer</name>
    <filename>classAudioData_1_1Pointer.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>Pointer</name>
      <anchorfile>classAudioData_1_1Pointer.html</anchorfile>
      <anchor>a373fea92c60a62a2e2fe31564928561c</anchor>
      <arglist>(typename Constness::VoidType *sourceData) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Pointer</name>
      <anchorfile>classAudioData_1_1Pointer.html</anchorfile>
      <anchor>afb8aabad75cb57853c3df07cfae42b8e</anchor>
      <arglist>(typename Constness::VoidType *sourceData, int numInterleaved) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Pointer</name>
      <anchorfile>classAudioData_1_1Pointer.html</anchorfile>
      <anchor>adcec246d71e35970a17acfe5a0808020</anchor>
      <arglist>(const Pointer &amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Pointer &amp;</type>
      <name>operator=</name>
      <anchorfile>classAudioData_1_1Pointer.html</anchorfile>
      <anchor>aff849e1609a9e95c469c3909e99fb71e</anchor>
      <arglist>(const Pointer &amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getAsFloat</name>
      <anchorfile>classAudioData_1_1Pointer.html</anchorfile>
      <anchor>aaffec0dba3ee56e9b53217d4ede7ab8f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAsFloat</name>
      <anchorfile>classAudioData_1_1Pointer.html</anchorfile>
      <anchor>a8fde1bbe33eee07dc6bb973e765ed9f5</anchor>
      <arglist>(float newValue) noexcept</arglist>
    </member>
    <member kind="function">
      <type>int32</type>
      <name>getAsInt32</name>
      <anchorfile>classAudioData_1_1Pointer.html</anchorfile>
      <anchor>a9719e315da69912c0ab7c38d64cb2ca6</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAsInt32</name>
      <anchorfile>classAudioData_1_1Pointer.html</anchorfile>
      <anchor>acd19b96f9d16adf4ff8ab6c9dc9b4b04</anchor>
      <arglist>(int32 newValue) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Pointer &amp;</type>
      <name>operator++</name>
      <anchorfile>classAudioData_1_1Pointer.html</anchorfile>
      <anchor>a07bab94a896e94408e09309b6032f416</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>Pointer &amp;</type>
      <name>operator--</name>
      <anchorfile>classAudioData_1_1Pointer.html</anchorfile>
      <anchor>a8d960232b383ed9635a20122e54e1ecf</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>Pointer &amp;</type>
      <name>operator+=</name>
      <anchorfile>classAudioData_1_1Pointer.html</anchorfile>
      <anchor>ab37616faf2bd411a58e2615cdb360f68</anchor>
      <arglist>(int samplesToJump) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>convertSamples</name>
      <anchorfile>classAudioData_1_1Pointer.html</anchorfile>
      <anchor>aed75d8a75052aec8fb0ca7c9cb19dfd2</anchor>
      <arglist>(Pointer source, int numSamples) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>convertSamples</name>
      <anchorfile>classAudioData_1_1Pointer.html</anchorfile>
      <anchor>a3ed79ca9ee8fd77785c83586a97a8ce0</anchor>
      <arglist>(OtherPointerType source, int numSamples) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearSamples</name>
      <anchorfile>classAudioData_1_1Pointer.html</anchorfile>
      <anchor>a8b123e357446ef1faa6731790d421969</anchor>
      <arglist>(int numSamples) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Range&lt; float &gt;</type>
      <name>findMinAndMax</name>
      <anchorfile>classAudioData_1_1Pointer.html</anchorfile>
      <anchor>a738573ab14ef47ff8c356508e40f94f5</anchor>
      <arglist>(size_t numSamples) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>findMinAndMax</name>
      <anchorfile>classAudioData_1_1Pointer.html</anchorfile>
      <anchor>a373335e595058583a100bfa70a469518</anchor>
      <arglist>(size_t numSamples, float &amp;minValue, float &amp;maxValue) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumInterleavedChannels</name>
      <anchorfile>classAudioData_1_1Pointer.html</anchorfile>
      <anchor>a0684a61827cea250a1e3009a6e505250</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumBytesBetweenSamples</name>
      <anchorfile>classAudioData_1_1Pointer.html</anchorfile>
      <anchor>aa7a0811a9ec22b0fb98cbf83177f7ed4</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const void *</type>
      <name>getRawData</name>
      <anchorfile>classAudioData_1_1Pointer.html</anchorfile>
      <anchor>abe0944aaf90e47606b084c3a57d7ab03</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isFloatingPoint</name>
      <anchorfile>classAudioData_1_1Pointer.html</anchorfile>
      <anchor>ac4e7dd1bc1f4e8c3083711fe54822e79</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isBigEndian</name>
      <anchorfile>classAudioData_1_1Pointer.html</anchorfile>
      <anchor>ad5c297903cd9da5ad3b90328cd26e80e</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>getBytesPerSample</name>
      <anchorfile>classAudioData_1_1Pointer.html</anchorfile>
      <anchor>af24f267a250d5f62db7ed8850ae23f5a</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>get32BitResolution</name>
      <anchorfile>classAudioData_1_1Pointer.html</anchorfile>
      <anchor>a66fc124ce9480c540c80c50cabdb9889</anchor>
      <arglist>() noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AudioDataConverters</name>
    <filename>classAudioDataConverters.html</filename>
    <member kind="enumeration">
      <type></type>
      <name>DataFormat</name>
      <anchorfile>classAudioDataConverters.html</anchorfile>
      <anchor>ab61072a75ca010290e4c03efc8078a50</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>int16LE</name>
      <anchorfile>classAudioDataConverters.html</anchorfile>
      <anchor>ab61072a75ca010290e4c03efc8078a50a243339416b017cdc35a3cb5a6c0ce8b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>int16BE</name>
      <anchorfile>classAudioDataConverters.html</anchorfile>
      <anchor>ab61072a75ca010290e4c03efc8078a50a5413345207dc9e22a532a3f71cb63ee7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>int24LE</name>
      <anchorfile>classAudioDataConverters.html</anchorfile>
      <anchor>ab61072a75ca010290e4c03efc8078a50a86d4b3fbe4206a23135697b42801a72a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>int24BE</name>
      <anchorfile>classAudioDataConverters.html</anchorfile>
      <anchor>ab61072a75ca010290e4c03efc8078a50a6d6c4e9b147146368a9e37573f7d3ca9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>int32LE</name>
      <anchorfile>classAudioDataConverters.html</anchorfile>
      <anchor>ab61072a75ca010290e4c03efc8078a50a7dbfa7f347adba31c018c85f4e88e474</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>int32BE</name>
      <anchorfile>classAudioDataConverters.html</anchorfile>
      <anchor>ab61072a75ca010290e4c03efc8078a50ae66e24664940104a48ec3fa5e9c73e81</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>float32LE</name>
      <anchorfile>classAudioDataConverters.html</anchorfile>
      <anchor>ab61072a75ca010290e4c03efc8078a50ac0a9af131ea728266516d78d7ed60b60</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>float32BE</name>
      <anchorfile>classAudioDataConverters.html</anchorfile>
      <anchor>ab61072a75ca010290e4c03efc8078a50a967b624b78df07208abf588c3c87636c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>convertFloatToInt16LE</name>
      <anchorfile>classAudioDataConverters.html</anchorfile>
      <anchor>a46e7783a14d3db370f99e2f4673eadb2</anchor>
      <arglist>(const float *source, void *dest, int numSamples, int destBytesPerSample=2)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>convertFloatToInt16BE</name>
      <anchorfile>classAudioDataConverters.html</anchorfile>
      <anchor>a2b70ce732f21f861c14ad05ff048d7f4</anchor>
      <arglist>(const float *source, void *dest, int numSamples, int destBytesPerSample=2)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>convertFloatToInt24LE</name>
      <anchorfile>classAudioDataConverters.html</anchorfile>
      <anchor>aecc99da81c4759127156a9a0184a37f8</anchor>
      <arglist>(const float *source, void *dest, int numSamples, int destBytesPerSample=3)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>convertFloatToInt24BE</name>
      <anchorfile>classAudioDataConverters.html</anchorfile>
      <anchor>aa463faa96b1f9b4936bc462dc3d10e69</anchor>
      <arglist>(const float *source, void *dest, int numSamples, int destBytesPerSample=3)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>convertFloatToInt32LE</name>
      <anchorfile>classAudioDataConverters.html</anchorfile>
      <anchor>ab5e3b78350ff3ce6ec4cb309268f1914</anchor>
      <arglist>(const float *source, void *dest, int numSamples, int destBytesPerSample=4)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>convertFloatToInt32BE</name>
      <anchorfile>classAudioDataConverters.html</anchorfile>
      <anchor>a5558380ea1601f1e5adf0fad83ca9f2b</anchor>
      <arglist>(const float *source, void *dest, int numSamples, int destBytesPerSample=4)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>convertFloatToFloat32LE</name>
      <anchorfile>classAudioDataConverters.html</anchorfile>
      <anchor>a6cf904f30301cf523d984570f215891d</anchor>
      <arglist>(const float *source, void *dest, int numSamples, int destBytesPerSample=4)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>convertFloatToFloat32BE</name>
      <anchorfile>classAudioDataConverters.html</anchorfile>
      <anchor>ad8154a2931bde3ef70b1e610161c740f</anchor>
      <arglist>(const float *source, void *dest, int numSamples, int destBytesPerSample=4)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>convertInt16LEToFloat</name>
      <anchorfile>classAudioDataConverters.html</anchorfile>
      <anchor>a34f59c881de48ff27c3f920f0833ce81</anchor>
      <arglist>(const void *source, float *dest, int numSamples, int srcBytesPerSample=2)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>convertInt16BEToFloat</name>
      <anchorfile>classAudioDataConverters.html</anchorfile>
      <anchor>ab8ab2c663016bdd9d1867b516efdc1f8</anchor>
      <arglist>(const void *source, float *dest, int numSamples, int srcBytesPerSample=2)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>convertInt24LEToFloat</name>
      <anchorfile>classAudioDataConverters.html</anchorfile>
      <anchor>a3584b16537c9c652017928416f65be08</anchor>
      <arglist>(const void *source, float *dest, int numSamples, int srcBytesPerSample=3)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>convertInt24BEToFloat</name>
      <anchorfile>classAudioDataConverters.html</anchorfile>
      <anchor>a96a8c299845b4cc929cdc4f5ff3f5a4c</anchor>
      <arglist>(const void *source, float *dest, int numSamples, int srcBytesPerSample=3)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>convertInt32LEToFloat</name>
      <anchorfile>classAudioDataConverters.html</anchorfile>
      <anchor>ad37c86c3bde96edfc3f898f119c7bcb9</anchor>
      <arglist>(const void *source, float *dest, int numSamples, int srcBytesPerSample=4)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>convertInt32BEToFloat</name>
      <anchorfile>classAudioDataConverters.html</anchorfile>
      <anchor>a1dd2a4b22ed53b861c31f07c0ee052a7</anchor>
      <arglist>(const void *source, float *dest, int numSamples, int srcBytesPerSample=4)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>convertFloat32LEToFloat</name>
      <anchorfile>classAudioDataConverters.html</anchorfile>
      <anchor>a10cde5d94f2ea19f5425ac418d8dce4c</anchor>
      <arglist>(const void *source, float *dest, int numSamples, int srcBytesPerSample=4)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>convertFloat32BEToFloat</name>
      <anchorfile>classAudioDataConverters.html</anchorfile>
      <anchor>a9e9ad69c914a77be1048e9df6397edbc</anchor>
      <arglist>(const void *source, float *dest, int numSamples, int srcBytesPerSample=4)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>convertFloatToFormat</name>
      <anchorfile>classAudioDataConverters.html</anchorfile>
      <anchor>a1b7c2abcb69f9d9cbdbf55166f84ef53</anchor>
      <arglist>(DataFormat destFormat, const float *source, void *dest, int numSamples)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>convertFormatToFloat</name>
      <anchorfile>classAudioDataConverters.html</anchorfile>
      <anchor>a105215c8f851b10b7174228c85bd3a97</anchor>
      <arglist>(DataFormat sourceFormat, const void *source, float *dest, int numSamples)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>interleaveSamples</name>
      <anchorfile>classAudioDataConverters.html</anchorfile>
      <anchor>a8eb9899465d9f9a34f6b95037f04e020</anchor>
      <arglist>(const float **source, float *dest, int numSamples, int numChannels)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>deinterleaveSamples</name>
      <anchorfile>classAudioDataConverters.html</anchorfile>
      <anchor>aac3f177b8617346f5cb1dd93cf09d152</anchor>
      <arglist>(const float *source, float **dest, int numSamples, int numChannels)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AudioDeviceManager</name>
    <filename>classAudioDeviceManager.html</filename>
    <base>ChangeBroadcaster</base>
    <class kind="struct">AudioDeviceManager::AudioDeviceSetup</class>
    <member kind="function">
      <type></type>
      <name>AudioDeviceManager</name>
      <anchorfile>classAudioDeviceManager.html</anchorfile>
      <anchor>accab16a03e809121d56e8b272125f3ea</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~AudioDeviceManager</name>
      <anchorfile>classAudioDeviceManager.html</anchorfile>
      <anchor>aba2ff8bbc69b9434dfc90c3a7bc09d6a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>initialise</name>
      <anchorfile>classAudioDeviceManager.html</anchorfile>
      <anchor>a4c6d8a76a270a6e4ca0537093f447b44</anchor>
      <arglist>(int numInputChannelsNeeded, int numOutputChannelsNeeded, const XmlElement *savedState, bool selectDefaultDeviceOnFailure, const String &amp;preferredDefaultDeviceName=String(), const AudioDeviceSetup *preferredSetupOptions=nullptr)</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>initialiseWithDefaultDevices</name>
      <anchorfile>classAudioDeviceManager.html</anchorfile>
      <anchor>aed646db44c76466d8d0e288d56e50691</anchor>
      <arglist>(int numInputChannelsNeeded, int numOutputChannelsNeeded)</arglist>
    </member>
    <member kind="function">
      <type>XmlElement *</type>
      <name>createStateXml</name>
      <anchorfile>classAudioDeviceManager.html</anchorfile>
      <anchor>abb846b502125744f4ea04f06cde5d92c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getAudioDeviceSetup</name>
      <anchorfile>classAudioDeviceManager.html</anchorfile>
      <anchor>a20f207e942152fdb1080ea5abcb1ed2f</anchor>
      <arglist>(AudioDeviceSetup &amp;result) const </arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>setAudioDeviceSetup</name>
      <anchorfile>classAudioDeviceManager.html</anchorfile>
      <anchor>aef0249d178aa5448ad2e949ae059c461</anchor>
      <arglist>(const AudioDeviceSetup &amp;newSetup, bool treatAsChosenDevice)</arglist>
    </member>
    <member kind="function">
      <type>AudioIODevice *</type>
      <name>getCurrentAudioDevice</name>
      <anchorfile>classAudioDeviceManager.html</anchorfile>
      <anchor>ad7ab4d5ba626a08098bb77a6164321a1</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>getCurrentAudioDeviceType</name>
      <anchorfile>classAudioDeviceManager.html</anchorfile>
      <anchor>a2d89901b67119f512b036345bd3d092c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>AudioIODeviceType *</type>
      <name>getCurrentDeviceTypeObject</name>
      <anchorfile>classAudioDeviceManager.html</anchorfile>
      <anchor>a01438e7795abd52342d2cc845c1e74c4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCurrentAudioDeviceType</name>
      <anchorfile>classAudioDeviceManager.html</anchorfile>
      <anchor>a49e34c1ed60dafcebefc55d12f9175ad</anchor>
      <arglist>(const String &amp;type, bool treatAsChosenDevice)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>closeAudioDevice</name>
      <anchorfile>classAudioDeviceManager.html</anchorfile>
      <anchor>af9829fcacafb4a395d084b34cdb8391c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>restartLastAudioDevice</name>
      <anchorfile>classAudioDeviceManager.html</anchorfile>
      <anchor>ac46693f5b78c06357b16bf5e95560605</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addAudioCallback</name>
      <anchorfile>classAudioDeviceManager.html</anchorfile>
      <anchor>acf3977dcc83f22b7f51091d7ff7b8aff</anchor>
      <arglist>(AudioIODeviceCallback *newCallback)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeAudioCallback</name>
      <anchorfile>classAudioDeviceManager.html</anchorfile>
      <anchor>af6d672043bfc5ca423ea0ca41b5ad2d1</anchor>
      <arglist>(AudioIODeviceCallback *callback)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getCpuUsage</name>
      <anchorfile>classAudioDeviceManager.html</anchorfile>
      <anchor>ab7d067e2864f399a471b35cc83bf9a57</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMidiInputEnabled</name>
      <anchorfile>classAudioDeviceManager.html</anchorfile>
      <anchor>a5c16cde5d7c4c49dd9b6d00cc17ba481</anchor>
      <arglist>(const String &amp;midiInputDeviceName, bool enabled)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isMidiInputEnabled</name>
      <anchorfile>classAudioDeviceManager.html</anchorfile>
      <anchor>a68824aadea468bbe6cd338c333fff715</anchor>
      <arglist>(const String &amp;midiInputDeviceName) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addMidiInputCallback</name>
      <anchorfile>classAudioDeviceManager.html</anchorfile>
      <anchor>a31e11b7a8596530a87cfcf8e48b978d2</anchor>
      <arglist>(const String &amp;midiInputDeviceName, MidiInputCallback *callback)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeMidiInputCallback</name>
      <anchorfile>classAudioDeviceManager.html</anchorfile>
      <anchor>a1338a65adb3849560847f99252adcbd2</anchor>
      <arglist>(const String &amp;midiInputDeviceName, MidiInputCallback *callback)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDefaultMidiOutput</name>
      <anchorfile>classAudioDeviceManager.html</anchorfile>
      <anchor>a02d957a7dfc854c2de56278db62a171f</anchor>
      <arglist>(const String &amp;deviceName)</arglist>
    </member>
    <member kind="function">
      <type>const String &amp;</type>
      <name>getDefaultMidiOutputName</name>
      <anchorfile>classAudioDeviceManager.html</anchorfile>
      <anchor>ad3796e84d5b112f78f8ffc02d7b9f8be</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>MidiOutput *</type>
      <name>getDefaultMidiOutput</name>
      <anchorfile>classAudioDeviceManager.html</anchorfile>
      <anchor>a4c3518c6e06fc752d065ff8dd4c9e4f1</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const OwnedArray&lt; AudioIODeviceType &gt; &amp;</type>
      <name>getAvailableDeviceTypes</name>
      <anchorfile>classAudioDeviceManager.html</anchorfile>
      <anchor>a577475b3171c4d2cf8dbd7a6a48a02ca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>createAudioDeviceTypes</name>
      <anchorfile>classAudioDeviceManager.html</anchorfile>
      <anchor>ad7d7e0e64926665b12b62a53082caecc</anchor>
      <arglist>(OwnedArray&lt; AudioIODeviceType &gt; &amp;types)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addAudioDeviceType</name>
      <anchorfile>classAudioDeviceManager.html</anchorfile>
      <anchor>a9516ba945a2de06438cb3bd30210b94f</anchor>
      <arglist>(AudioIODeviceType *newDeviceType)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>playTestSound</name>
      <anchorfile>classAudioDeviceManager.html</anchorfile>
      <anchor>ab32b74d9dda550d70d47c0cca76fdd25</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enableInputLevelMeasurement</name>
      <anchorfile>classAudioDeviceManager.html</anchorfile>
      <anchor>a84226f822c6b65295beb16b973ec30ac</anchor>
      <arglist>(bool enableMeasurement) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enableOutputLevelMeasurement</name>
      <anchorfile>classAudioDeviceManager.html</anchorfile>
      <anchor>a51fe04c8fe00ef8fc40a326f2dba7ea6</anchor>
      <arglist>(bool enableMeasurement) noexcept</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getCurrentInputLevel</name>
      <anchorfile>classAudioDeviceManager.html</anchorfile>
      <anchor>aedbbb2987a9c420951c2a40246367e22</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getCurrentOutputLevel</name>
      <anchorfile>classAudioDeviceManager.html</anchorfile>
      <anchor>a2127a0c198170f510a6bf54822da7096</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>CriticalSection &amp;</type>
      <name>getAudioCallbackLock</name>
      <anchorfile>classAudioDeviceManager.html</anchorfile>
      <anchor>a1e92ccc57a94f20639bcdfa68b628dc5</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>CriticalSection &amp;</type>
      <name>getMidiCallbackLock</name>
      <anchorfile>classAudioDeviceManager.html</anchorfile>
      <anchor>a2bdc27c676c875645d4d77b1146dad24</anchor>
      <arglist>() noexcept</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>AudioDeviceManager::AudioDeviceSetup</name>
    <filename>structAudioDeviceManager_1_1AudioDeviceSetup.html</filename>
    <member kind="function">
      <type></type>
      <name>AudioDeviceSetup</name>
      <anchorfile>structAudioDeviceManager_1_1AudioDeviceSetup.html</anchorfile>
      <anchor>a0386acffa5672ff88151c4d998363e95</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>structAudioDeviceManager_1_1AudioDeviceSetup.html</anchorfile>
      <anchor>a006af4c030d43a833b002f0c6bc87e62</anchor>
      <arglist>(const AudioDeviceSetup &amp;other) const </arglist>
    </member>
    <member kind="variable">
      <type>String</type>
      <name>outputDeviceName</name>
      <anchorfile>structAudioDeviceManager_1_1AudioDeviceSetup.html</anchorfile>
      <anchor>a5112cd247e403671a6977344c6764e7d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>String</type>
      <name>inputDeviceName</name>
      <anchorfile>structAudioDeviceManager_1_1AudioDeviceSetup.html</anchorfile>
      <anchor>af1c134f5280bec722facace7c9fa0f1d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>sampleRate</name>
      <anchorfile>structAudioDeviceManager_1_1AudioDeviceSetup.html</anchorfile>
      <anchor>afa56530d7a661131d8891f7b9874fcd1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>bufferSize</name>
      <anchorfile>structAudioDeviceManager_1_1AudioDeviceSetup.html</anchorfile>
      <anchor>a2b6b158660e8f9381be469ce87232b8e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>BigInteger</type>
      <name>inputChannels</name>
      <anchorfile>structAudioDeviceManager_1_1AudioDeviceSetup.html</anchorfile>
      <anchor>a9365767334c0819bb45754100c743fae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>useDefaultInputChannels</name>
      <anchorfile>structAudioDeviceManager_1_1AudioDeviceSetup.html</anchorfile>
      <anchor>af4ee7e75cc152be926202c6a7a822d0c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>BigInteger</type>
      <name>outputChannels</name>
      <anchorfile>structAudioDeviceManager_1_1AudioDeviceSetup.html</anchorfile>
      <anchor>ab95916f70e697107288dc0c44af25aab</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>useDefaultOutputChannels</name>
      <anchorfile>structAudioDeviceManager_1_1AudioDeviceSetup.html</anchorfile>
      <anchor>a0506caa1460f630b207e1dcf1093f791</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AudioDeviceSelectorComponent</name>
    <filename>classAudioDeviceSelectorComponent.html</filename>
    <base>Component</base>
    <base protection="private">ComboBox::Listener</base>
    <base protection="private">ChangeListener</base>
    <base protection="private">Button::Listener</base>
    <base protection="private">Timer</base>
    <member kind="function">
      <type></type>
      <name>AudioDeviceSelectorComponent</name>
      <anchorfile>classAudioDeviceSelectorComponent.html</anchorfile>
      <anchor>a859af6ef664a974dc7d2ce3d24d8f94c</anchor>
      <arglist>(AudioDeviceManager &amp;deviceManager, int minAudioInputChannels, int maxAudioInputChannels, int minAudioOutputChannels, int maxAudioOutputChannels, bool showMidiInputOptions, bool showMidiOutputSelector, bool showChannelsAsStereoPairs, bool hideAdvancedOptionsWithButton)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~AudioDeviceSelectorComponent</name>
      <anchorfile>classAudioDeviceSelectorComponent.html</anchorfile>
      <anchor>a4d8df94ada78d63f0114b0633a6b1024</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setItemHeight</name>
      <anchorfile>classAudioDeviceSelectorComponent.html</anchorfile>
      <anchor>ada1aa901b6fb25bd13bf1e0c20ce2df1</anchor>
      <arglist>(int itemHeight)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getItemHeight</name>
      <anchorfile>classAudioDeviceSelectorComponent.html</anchorfile>
      <anchor>a37ab45ee4651bb9f12750a043b1659a8</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>ListBox *</type>
      <name>getMidiInputSelectorListBox</name>
      <anchorfile>classAudioDeviceSelectorComponent.html</anchorfile>
      <anchor>a54b0a37d52eecf88f2a26133a6aa41e6</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resized</name>
      <anchorfile>classAudioDeviceSelectorComponent.html</anchorfile>
      <anchor>a4decb02c8e9f4815fcaf2b008048be98</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>timerCallback</name>
      <anchorfile>classAudioDeviceSelectorComponent.html</anchorfile>
      <anchor>a225ffb9aebc48af8e51d0891fe2ae719</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="variable">
      <type>AudioDeviceManager &amp;</type>
      <name>deviceManager</name>
      <anchorfile>classAudioDeviceSelectorComponent.html</anchorfile>
      <anchor>a1d55ccd0985a42f37b5683f609b65386</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AudioFormat</name>
    <filename>classAudioFormat.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>canHandleFile</name>
      <anchorfile>classAudioFormat.html</anchorfile>
      <anchor>a1bb639929ca98b8e34183d568c380c79</anchor>
      <arglist>(const File &amp;fileToTest)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Array&lt; int &gt;</type>
      <name>getPossibleSampleRates</name>
      <anchorfile>classAudioFormat.html</anchorfile>
      <anchor>a2ed8c044df0018c8efea32798c244354</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Array&lt; int &gt;</type>
      <name>getPossibleBitDepths</name>
      <anchorfile>classAudioFormat.html</anchorfile>
      <anchor>a6dc00e2fac5bdff1ae391b03d8be302c</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>canDoStereo</name>
      <anchorfile>classAudioFormat.html</anchorfile>
      <anchor>a9ad5466caa8ccba6005ffad301e294a9</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>canDoMono</name>
      <anchorfile>classAudioFormat.html</anchorfile>
      <anchor>a40fc3d0b8ce9fe7b3dd87dfd1c57e72d</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual AudioFormatReader *</type>
      <name>createReaderFor</name>
      <anchorfile>classAudioFormat.html</anchorfile>
      <anchor>a18536136744af7eeaf69800ccb98a9a9</anchor>
      <arglist>(InputStream *sourceStream, bool deleteStreamIfOpeningFails)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual MemoryMappedAudioFormatReader *</type>
      <name>createMemoryMappedReader</name>
      <anchorfile>classAudioFormat.html</anchorfile>
      <anchor>a3f307a62245c7457877d934e2ff1ceed</anchor>
      <arglist>(const File &amp;file)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual MemoryMappedAudioFormatReader *</type>
      <name>createMemoryMappedReader</name>
      <anchorfile>classAudioFormat.html</anchorfile>
      <anchor>ac74812908f1121d92dc4bd22bdf0f383</anchor>
      <arglist>(FileInputStream *fin)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual AudioFormatWriter *</type>
      <name>createWriterFor</name>
      <anchorfile>classAudioFormat.html</anchorfile>
      <anchor>ae93a8144520e5bd2902a5daa97cc443b</anchor>
      <arglist>(OutputStream *streamToWriteTo, double sampleRateToUse, unsigned int numberOfChannels, int bitsPerSample, const StringPairArray &amp;metadataValues, int qualityOptionIndex)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AudioFormatManager</name>
    <filename>classAudioFormatManager.html</filename>
    <member kind="function">
      <type></type>
      <name>AudioFormatManager</name>
      <anchorfile>classAudioFormatManager.html</anchorfile>
      <anchor>ab6f17392bd6758b6ee2c544cfc377850</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~AudioFormatManager</name>
      <anchorfile>classAudioFormatManager.html</anchorfile>
      <anchor>ae5e43f96f3854585e116637732c798d7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>registerFormat</name>
      <anchorfile>classAudioFormatManager.html</anchorfile>
      <anchor>aa9527a11651cbf1f34c4942f44ea5bf4</anchor>
      <arglist>(AudioFormat *newFormat, bool makeThisTheDefaultFormat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>registerBasicFormats</name>
      <anchorfile>classAudioFormatManager.html</anchorfile>
      <anchor>a1a8510b3078662358013ad78239d688e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearFormats</name>
      <anchorfile>classAudioFormatManager.html</anchorfile>
      <anchor>aa321a315fd1fdb294779832386092450</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumKnownFormats</name>
      <anchorfile>classAudioFormatManager.html</anchorfile>
      <anchor>aef8170d93782573c9a2970430ac64f5b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>AudioFormat *</type>
      <name>getKnownFormat</name>
      <anchorfile>classAudioFormatManager.html</anchorfile>
      <anchor>a7f8c19e9820a10264371c2097ce3bfee</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function">
      <type>AudioFormat **</type>
      <name>begin</name>
      <anchorfile>classAudioFormatManager.html</anchorfile>
      <anchor>a831cac74ca82dcdea9a8328f7a1550d8</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>AudioFormat **</type>
      <name>end</name>
      <anchorfile>classAudioFormatManager.html</anchorfile>
      <anchor>a6d74237010910f4566a182f1649458e4</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>AudioFormat *</type>
      <name>findFormatForFileExtension</name>
      <anchorfile>classAudioFormatManager.html</anchorfile>
      <anchor>a36344f4d5c1820133a430572a0cbf6d6</anchor>
      <arglist>(const String &amp;fileExtension) const </arglist>
    </member>
    <member kind="function">
      <type>AudioFormat *</type>
      <name>getDefaultFormat</name>
      <anchorfile>classAudioFormatManager.html</anchorfile>
      <anchor>a19c093d4ddead5c031c50d37a61bc9b0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>getWildcardForAllFormats</name>
      <anchorfile>classAudioFormatManager.html</anchorfile>
      <anchor>a9d8aa57c760eae655ad0016a0ef931d0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>AudioFormatReader *</type>
      <name>createReaderFor</name>
      <anchorfile>classAudioFormatManager.html</anchorfile>
      <anchor>ab78bd5aa0ff2b9b667b5156b3bac5e83</anchor>
      <arglist>(const File &amp;audioFile)</arglist>
    </member>
    <member kind="function">
      <type>AudioFormatReader *</type>
      <name>createReaderFor</name>
      <anchorfile>classAudioFormatManager.html</anchorfile>
      <anchor>a8b691e67fef322c482262635fcfd3fee</anchor>
      <arglist>(InputStream *audioFileStream)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AudioFormatReader</name>
    <filename>classAudioFormatReader.html</filename>
    <class kind="struct">AudioFormatReader::ReadHelper</class>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>readSamples</name>
      <anchorfile>classAudioFormatReader.html</anchorfile>
      <anchor>a8447eed7f81e0b931248a8eb98ed106f</anchor>
      <arglist>(int **destSamples, int numDestChannels, int startOffsetInDestBuffer, int64 startSampleInFile, int numSamples)=0</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>AudioFormatReader::ReadHelper</name>
    <filename>structAudioFormatReader_1_1ReadHelper.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>AudioData::Pointer&lt; DestSampleType, AudioData::NativeEndian, AudioData::NonInterleaved, AudioData::NonConst &gt;</type>
      <name>DestType</name>
      <anchorfile>structAudioFormatReader_1_1ReadHelper.html</anchorfile>
      <anchor>a0084d44db12183607466fe09e4829f67</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>AudioData::Pointer&lt; SourceSampleType, SourceEndianness, AudioData::Interleaved, AudioData::Const &gt;</type>
      <name>SourceType</name>
      <anchorfile>structAudioFormatReader_1_1ReadHelper.html</anchorfile>
      <anchor>a8a24767200ed43a8317fb20d84c2ad17</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>read</name>
      <anchorfile>structAudioFormatReader_1_1ReadHelper.html</anchorfile>
      <anchor>ab1158f4802796adedd47088948930c7d</anchor>
      <arglist>(TargetType *const *destData, int destOffset, int numDestChannels, const void *sourceData, int numSourceChannels, int numSamples) noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AudioFormatReaderSource</name>
    <filename>classAudioFormatReaderSource.html</filename>
    <base>PositionableAudioSource</base>
    <member kind="function">
      <type></type>
      <name>AudioFormatReaderSource</name>
      <anchorfile>classAudioFormatReaderSource.html</anchorfile>
      <anchor>a33b9036a7a64c0ae8b741550d70ec52d</anchor>
      <arglist>(AudioFormatReader *sourceReader, bool deleteReaderWhenThisIsDeleted)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~AudioFormatReaderSource</name>
      <anchorfile>classAudioFormatReaderSource.html</anchorfile>
      <anchor>a6efb3ee10a5980d3830c4f2272040779</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLooping</name>
      <anchorfile>classAudioFormatReaderSource.html</anchorfile>
      <anchor>a15d8af211ce8cfcbc0c4aaac143b303e</anchor>
      <arglist>(bool shouldLoop) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isLooping</name>
      <anchorfile>classAudioFormatReaderSource.html</anchorfile>
      <anchor>a63d3bcb837d97574acfac92c5e14d4cb</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>AudioFormatReader *</type>
      <name>getAudioFormatReader</name>
      <anchorfile>classAudioFormatReaderSource.html</anchorfile>
      <anchor>a8cf967923624f7b75acafa3c397873da</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>prepareToPlay</name>
      <anchorfile>classAudioFormatReaderSource.html</anchorfile>
      <anchor>a5c69623e095398def8caa8dcaaf868af</anchor>
      <arglist>(int samplesPerBlockExpected, double sampleRate) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>releaseResources</name>
      <anchorfile>classAudioFormatReaderSource.html</anchorfile>
      <anchor>a0f11379e2449d8108de40694bd6a268d</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getNextAudioBlock</name>
      <anchorfile>classAudioFormatReaderSource.html</anchorfile>
      <anchor>a9136e13b99da2e6a683d6cc8244ff565</anchor>
      <arglist>(const AudioSourceChannelInfo &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNextReadPosition</name>
      <anchorfile>classAudioFormatReaderSource.html</anchorfile>
      <anchor>a08ce78b0db1845da34f4048b6f1c568e</anchor>
      <arglist>(int64 newPosition) override</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>getNextReadPosition</name>
      <anchorfile>classAudioFormatReaderSource.html</anchorfile>
      <anchor>acd5239a04ecd311c280fab04871a64cc</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>getTotalLength</name>
      <anchorfile>classAudioFormatReaderSource.html</anchorfile>
      <anchor>a51e078a6f53a1abb7de4e08899144fbf</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~PositionableAudioSource</name>
      <anchorfile>classPositionableAudioSource.html</anchorfile>
      <anchor>aa81c6f032ae672549050b0985a665cf5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PositionableAudioSource</name>
      <anchorfile>classPositionableAudioSource.html</anchorfile>
      <anchor>a53821ed920c27c8e81a6695041dd1dca</anchor>
      <arglist>() noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AudioFormatWriter</name>
    <filename>classAudioFormatWriter.html</filename>
    <class kind="class">AudioFormatWriter::ThreadedWriter</class>
    <class kind="struct">AudioFormatWriter::WriteHelper</class>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~AudioFormatWriter</name>
      <anchorfile>classAudioFormatWriter.html</anchorfile>
      <anchor>ad3e3c4a5e1ba629c0d1aaa47827389f8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const String &amp;</type>
      <name>getFormatName</name>
      <anchorfile>classAudioFormatWriter.html</anchorfile>
      <anchor>aea144b105a5d45fb91acfb484b0ff303</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>write</name>
      <anchorfile>classAudioFormatWriter.html</anchorfile>
      <anchor>a60dc79a5cd9ed0307ea04637ed25ea8b</anchor>
      <arglist>(const int **samplesToWrite, int numSamples)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>flush</name>
      <anchorfile>classAudioFormatWriter.html</anchorfile>
      <anchor>ac83a728db8d8abf6cf39a3bd34390a6a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>writeFromAudioReader</name>
      <anchorfile>classAudioFormatWriter.html</anchorfile>
      <anchor>a3a691c94e9609383c915af71cbf760db</anchor>
      <arglist>(AudioFormatReader &amp;reader, int64 startSample, int64 numSamplesToRead)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>writeFromAudioSource</name>
      <anchorfile>classAudioFormatWriter.html</anchorfile>
      <anchor>a4d09d96836ebe2779d2e82a090d0b29f</anchor>
      <arglist>(AudioSource &amp;source, int numSamplesToRead, int samplesPerBlock=2048)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>writeFromAudioSampleBuffer</name>
      <anchorfile>classAudioFormatWriter.html</anchorfile>
      <anchor>a62f00db8e716c1d253d70be4c9d753a1</anchor>
      <arglist>(const AudioSampleBuffer &amp;source, int startSample, int numSamples)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>writeFromFloatArrays</name>
      <anchorfile>classAudioFormatWriter.html</anchorfile>
      <anchor>ad3ceaa6f20c49a692f92b2e1603786be</anchor>
      <arglist>(const float *const *channels, int numChannels, int numSamples)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getSampleRate</name>
      <anchorfile>classAudioFormatWriter.html</anchorfile>
      <anchor>ae31a1427413b3ac45c7f02d7384e156e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumChannels</name>
      <anchorfile>classAudioFormatWriter.html</anchorfile>
      <anchor>a436de23247a535b447ed8ddf6100c496</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getBitsPerSample</name>
      <anchorfile>classAudioFormatWriter.html</anchorfile>
      <anchor>a893f8254a9d1978511806ee414cce929</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isFloatingPoint</name>
      <anchorfile>classAudioFormatWriter.html</anchorfile>
      <anchor>ac51a620bf86a2e501eaae93e2e2c331c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>AudioFormatWriter</name>
      <anchorfile>classAudioFormatWriter.html</anchorfile>
      <anchor>ad13516434d025d9427fab9ac9b208a77</anchor>
      <arglist>(OutputStream *destStream, const String &amp;formatName, double sampleRate, unsigned int numberOfChannels, unsigned int bitsPerSample)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>sampleRate</name>
      <anchorfile>classAudioFormatWriter.html</anchorfile>
      <anchor>aafefbda90e2a58cb057e89e995decfd2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>numChannels</name>
      <anchorfile>classAudioFormatWriter.html</anchorfile>
      <anchor>af33e6836e6dbbcd774ac166453c5446c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>bitsPerSample</name>
      <anchorfile>classAudioFormatWriter.html</anchorfile>
      <anchor>aa1c1c0accbc262067e2f9ad75d70d155</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>usesFloatingPointData</name>
      <anchorfile>classAudioFormatWriter.html</anchorfile>
      <anchor>a876800b982bbe25e583633d3876a9a02</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>OutputStream *</type>
      <name>output</name>
      <anchorfile>classAudioFormatWriter.html</anchorfile>
      <anchor>aeef1f96e051a7f40b69664636393bf5f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AudioFormatWriter::ThreadedWriter</name>
    <filename>classAudioFormatWriter_1_1ThreadedWriter.html</filename>
    <class kind="class">AudioFormatWriter::ThreadedWriter::IncomingDataReceiver</class>
    <member kind="function">
      <type></type>
      <name>ThreadedWriter</name>
      <anchorfile>classAudioFormatWriter_1_1ThreadedWriter.html</anchorfile>
      <anchor>a8efb067cf742fdac8b2bc6e21a084531</anchor>
      <arglist>(AudioFormatWriter *writer, TimeSliceThread &amp;backgroundThread, int numSamplesToBuffer)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ThreadedWriter</name>
      <anchorfile>classAudioFormatWriter_1_1ThreadedWriter.html</anchorfile>
      <anchor>acb40f07ce4ffd0bdff82533d61ca79f2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>write</name>
      <anchorfile>classAudioFormatWriter_1_1ThreadedWriter.html</anchorfile>
      <anchor>a75e83af285e9c0ce5d74522220821051</anchor>
      <arglist>(const float *const *data, int numSamples)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDataReceiver</name>
      <anchorfile>classAudioFormatWriter_1_1ThreadedWriter.html</anchorfile>
      <anchor>af9af3b0ff01f3e62427c0526087f5ab3</anchor>
      <arglist>(IncomingDataReceiver *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFlushInterval</name>
      <anchorfile>classAudioFormatWriter_1_1ThreadedWriter.html</anchorfile>
      <anchor>aed11ea43682211de3bc3c2f86799686f</anchor>
      <arglist>(int numSamplesPerFlush) noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AudioFormatWriter::ThreadedWriter::IncomingDataReceiver</name>
    <filename>classAudioFormatWriter_1_1ThreadedWriter_1_1IncomingDataReceiver.html</filename>
    <member kind="function">
      <type></type>
      <name>IncomingDataReceiver</name>
      <anchorfile>classAudioFormatWriter_1_1ThreadedWriter_1_1IncomingDataReceiver.html</anchorfile>
      <anchor>a27d5ea6fc6910944fc7351e058af4450</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~IncomingDataReceiver</name>
      <anchorfile>classAudioFormatWriter_1_1ThreadedWriter_1_1IncomingDataReceiver.html</anchorfile>
      <anchor>a0728c19886518197e280cc5318197295</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>reset</name>
      <anchorfile>classAudioFormatWriter_1_1ThreadedWriter_1_1IncomingDataReceiver.html</anchorfile>
      <anchor>a48e39e836142669e489b04389123536a</anchor>
      <arglist>(int numChannels, double sampleRate, int64 totalSamplesInSource)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>addBlock</name>
      <anchorfile>classAudioFormatWriter_1_1ThreadedWriter_1_1IncomingDataReceiver.html</anchorfile>
      <anchor>aa4fbc037fadc84e796c5840fdf920063</anchor>
      <arglist>(int64 sampleNumberInSource, const AudioSampleBuffer &amp;newData, int startOffsetInBuffer, int numSamples)=0</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>AudioFormatWriter::WriteHelper</name>
    <filename>structAudioFormatWriter_1_1WriteHelper.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>AudioData::Pointer&lt; DestSampleType, DestEndianness, AudioData::Interleaved, AudioData::NonConst &gt;</type>
      <name>DestType</name>
      <anchorfile>structAudioFormatWriter_1_1WriteHelper.html</anchorfile>
      <anchor>a5b7c59617fd96d69dee0062368e7f3e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>AudioData::Pointer&lt; SourceSampleType, AudioData::NativeEndian, AudioData::NonInterleaved, AudioData::Const &gt;</type>
      <name>SourceType</name>
      <anchorfile>structAudioFormatWriter_1_1WriteHelper.html</anchorfile>
      <anchor>a783e948eebc1915c108e97bef8a2698b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>write</name>
      <anchorfile>structAudioFormatWriter_1_1WriteHelper.html</anchorfile>
      <anchor>af9c774c70ec8e459e633be63c049c915</anchor>
      <arglist>(void *destData, int numDestChannels, const int *const *source, int numSamples, const int sourceOffset=0) noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AudioIODevice</name>
    <filename>classAudioIODevice.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~AudioIODevice</name>
      <anchorfile>classAudioIODevice.html</anchorfile>
      <anchor>a0af67fc5598fb5fd9b033d3938968a51</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const String &amp;</type>
      <name>getName</name>
      <anchorfile>classAudioIODevice.html</anchorfile>
      <anchor>abb1c4b56c8aa943f0507ed1776369a80</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const String &amp;</type>
      <name>getTypeName</name>
      <anchorfile>classAudioIODevice.html</anchorfile>
      <anchor>acb989e3b415936f70fb68e8a37bdb813</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual StringArray</type>
      <name>getOutputChannelNames</name>
      <anchorfile>classAudioIODevice.html</anchorfile>
      <anchor>a49d09c50d23685dfeb881594c6e8a621</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual StringArray</type>
      <name>getInputChannelNames</name>
      <anchorfile>classAudioIODevice.html</anchorfile>
      <anchor>aabb8e29146abb9aeb60dea604288c8a7</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Array&lt; double &gt;</type>
      <name>getAvailableSampleRates</name>
      <anchorfile>classAudioIODevice.html</anchorfile>
      <anchor>a18f3fef68c17f7d1b8e6d79493b0422c</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Array&lt; int &gt;</type>
      <name>getAvailableBufferSizes</name>
      <anchorfile>classAudioIODevice.html</anchorfile>
      <anchor>a9a3c62edc30e0b7c1ff0ddd8a789f5da</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getDefaultBufferSize</name>
      <anchorfile>classAudioIODevice.html</anchorfile>
      <anchor>a71384f0310a9f6850cd826d0fd91f8f4</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual String</type>
      <name>open</name>
      <anchorfile>classAudioIODevice.html</anchorfile>
      <anchor>a519b91efd6bf7bf88fbe85eb5510629f</anchor>
      <arglist>(const BigInteger &amp;inputChannels, const BigInteger &amp;outputChannels, double sampleRate, int bufferSizeSamples)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>close</name>
      <anchorfile>classAudioIODevice.html</anchorfile>
      <anchor>a7ca9104dc82d77961b3dfcc005810004</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isOpen</name>
      <anchorfile>classAudioIODevice.html</anchorfile>
      <anchor>aebfdd9a70545dd500041cd7e5cd736c1</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>start</name>
      <anchorfile>classAudioIODevice.html</anchorfile>
      <anchor>aa3a17cf757a6297aab23a1327579347f</anchor>
      <arglist>(AudioIODeviceCallback *callback)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>stop</name>
      <anchorfile>classAudioIODevice.html</anchorfile>
      <anchor>aca2e8897d904bc36b5faa647cfa8d20a</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isPlaying</name>
      <anchorfile>classAudioIODevice.html</anchorfile>
      <anchor>af8b5c71cb2512bcdf477267e3fc4faf7</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual String</type>
      <name>getLastError</name>
      <anchorfile>classAudioIODevice.html</anchorfile>
      <anchor>a4cfb59b5782efabcb31b225a69bd9b12</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getCurrentBufferSizeSamples</name>
      <anchorfile>classAudioIODevice.html</anchorfile>
      <anchor>af7636fe06f58b58c41bc8575184f518f</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>getCurrentSampleRate</name>
      <anchorfile>classAudioIODevice.html</anchorfile>
      <anchor>afba31b6d244b7cc257e925a04c5c383c</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getCurrentBitDepth</name>
      <anchorfile>classAudioIODevice.html</anchorfile>
      <anchor>abab889e2e9ff5dd49626faa15bfbac37</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual BigInteger</type>
      <name>getActiveOutputChannels</name>
      <anchorfile>classAudioIODevice.html</anchorfile>
      <anchor>a4f8af9affa191545e0722d07c3157cd2</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual BigInteger</type>
      <name>getActiveInputChannels</name>
      <anchorfile>classAudioIODevice.html</anchorfile>
      <anchor>a8020f07359040702d9339dff1628f940</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getOutputLatencyInSamples</name>
      <anchorfile>classAudioIODevice.html</anchorfile>
      <anchor>a693804fbf5a7cceb31ece10a9f03bd11</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getInputLatencyInSamples</name>
      <anchorfile>classAudioIODevice.html</anchorfile>
      <anchor>a3998b9256b8f5056e5e1cbf17c3e520d</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>hasControlPanel</name>
      <anchorfile>classAudioIODevice.html</anchorfile>
      <anchor>a61f6654ab66f66e60e30bc7e5b08647b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>showControlPanel</name>
      <anchorfile>classAudioIODevice.html</anchorfile>
      <anchor>ab8871c0f3b0639e0408582b354b28247</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>setAudioPreprocessingEnabled</name>
      <anchorfile>classAudioIODevice.html</anchorfile>
      <anchor>a413f736464f6fdfe09dbd31f17afa0b0</anchor>
      <arglist>(bool shouldBeEnabled)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>AudioIODevice</name>
      <anchorfile>classAudioIODevice.html</anchorfile>
      <anchor>aa380a49e49176fb883d89b094bf2448c</anchor>
      <arglist>(const String &amp;deviceName, const String &amp;typeName)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>String</type>
      <name>name</name>
      <anchorfile>classAudioIODevice.html</anchorfile>
      <anchor>a8f0fcd3c3672601cfd44749221452ebc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>String</type>
      <name>typeName</name>
      <anchorfile>classAudioIODevice.html</anchorfile>
      <anchor>a0f3aec64dbabccdd7a9a688def70cf45</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AudioIODeviceCallback</name>
    <filename>classAudioIODeviceCallback.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~AudioIODeviceCallback</name>
      <anchorfile>classAudioIODeviceCallback.html</anchorfile>
      <anchor>a922abd58862d1bc04c067683a6a8e59a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>audioDeviceIOCallback</name>
      <anchorfile>classAudioIODeviceCallback.html</anchorfile>
      <anchor>a9ba147cd10fe995c3016dbf35132f995</anchor>
      <arglist>(const float **inputChannelData, int numInputChannels, float **outputChannelData, int numOutputChannels, int numSamples)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>audioDeviceAboutToStart</name>
      <anchorfile>classAudioIODeviceCallback.html</anchorfile>
      <anchor>a1bec2ae89543a93e31461991f7404aec</anchor>
      <arglist>(AudioIODevice *device)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>audioDeviceStopped</name>
      <anchorfile>classAudioIODeviceCallback.html</anchorfile>
      <anchor>a7b3e3c479e4e0b3b19ea992960ef46f5</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>audioDeviceError</name>
      <anchorfile>classAudioIODeviceCallback.html</anchorfile>
      <anchor>a7768d640daf7d5d56399ced8188b2b75</anchor>
      <arglist>(const String &amp;errorMessage)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AudioIODeviceType</name>
    <filename>classAudioIODeviceType.html</filename>
    <class kind="class">AudioIODeviceType::Listener</class>
    <member kind="function">
      <type>const String &amp;</type>
      <name>getTypeName</name>
      <anchorfile>classAudioIODeviceType.html</anchorfile>
      <anchor>aa3c52a84433f7b0aa2958ad8939fe64c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>scanForDevices</name>
      <anchorfile>classAudioIODeviceType.html</anchorfile>
      <anchor>a9215b39e523934ac648d4f85f1e1bdf5</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual StringArray</type>
      <name>getDeviceNames</name>
      <anchorfile>classAudioIODeviceType.html</anchorfile>
      <anchor>ade867e4e10fb4ba6c91bc1bcba8573cb</anchor>
      <arglist>(bool wantInputNames=false) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getDefaultDeviceIndex</name>
      <anchorfile>classAudioIODeviceType.html</anchorfile>
      <anchor>af12cc963a4d445c2665452c3173bac67</anchor>
      <arglist>(bool forInput) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getIndexOfDevice</name>
      <anchorfile>classAudioIODeviceType.html</anchorfile>
      <anchor>a76d7d6b6c3f600dce0594be7bab24bc8</anchor>
      <arglist>(AudioIODevice *device, bool asInput) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>hasSeparateInputsAndOutputs</name>
      <anchorfile>classAudioIODeviceType.html</anchorfile>
      <anchor>ac87c3129c8e55018e968225b4a47dc74</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual AudioIODevice *</type>
      <name>createDevice</name>
      <anchorfile>classAudioIODeviceType.html</anchorfile>
      <anchor>a71099710a2d23a76ccba190882635f76</anchor>
      <arglist>(const String &amp;outputDeviceName, const String &amp;inputDeviceName)=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addListener</name>
      <anchorfile>classAudioIODeviceType.html</anchorfile>
      <anchor>aba66d5fc04bb8162ad082bbc5a46df37</anchor>
      <arglist>(Listener *listener)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeListener</name>
      <anchorfile>classAudioIODeviceType.html</anchorfile>
      <anchor>a9f900be754924e8a269064c37671e92c</anchor>
      <arglist>(Listener *listener)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~AudioIODeviceType</name>
      <anchorfile>classAudioIODeviceType.html</anchorfile>
      <anchor>adc7de51c8ca7633ace84e982b13272d8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static AudioIODeviceType *</type>
      <name>createAudioIODeviceType_CoreAudio</name>
      <anchorfile>classAudioIODeviceType.html</anchorfile>
      <anchor>a6ca7fa4634cf402d84eb747abe29c897</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static AudioIODeviceType *</type>
      <name>createAudioIODeviceType_iOSAudio</name>
      <anchorfile>classAudioIODeviceType.html</anchorfile>
      <anchor>ac58ef81494ae91347abce612447f93df</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static AudioIODeviceType *</type>
      <name>createAudioIODeviceType_WASAPI</name>
      <anchorfile>classAudioIODeviceType.html</anchorfile>
      <anchor>a941ad4701a3c6650cdd4eca391c6f71d</anchor>
      <arglist>(bool exclusiveMode)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static AudioIODeviceType *</type>
      <name>createAudioIODeviceType_DirectSound</name>
      <anchorfile>classAudioIODeviceType.html</anchorfile>
      <anchor>a1630530b154ab8eeb0458d156d9f07cc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static AudioIODeviceType *</type>
      <name>createAudioIODeviceType_ASIO</name>
      <anchorfile>classAudioIODeviceType.html</anchorfile>
      <anchor>aee6faebf37f99124203b401c3bc6dfcc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static AudioIODeviceType *</type>
      <name>createAudioIODeviceType_ALSA</name>
      <anchorfile>classAudioIODeviceType.html</anchorfile>
      <anchor>ab6f7e9cd0b51436fabf706e8ca8a602f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static AudioIODeviceType *</type>
      <name>createAudioIODeviceType_JACK</name>
      <anchorfile>classAudioIODeviceType.html</anchorfile>
      <anchor>a2b3643c9616a0f6b1c216b43576966bc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static AudioIODeviceType *</type>
      <name>createAudioIODeviceType_Android</name>
      <anchorfile>classAudioIODeviceType.html</anchorfile>
      <anchor>a6be31ae8ce32ecae93f6fce86477e859</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static AudioIODeviceType *</type>
      <name>createAudioIODeviceType_OpenSLES</name>
      <anchorfile>classAudioIODeviceType.html</anchorfile>
      <anchor>a9e2c88b78be45c3dd3cda93f6c2dd30a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>AudioIODeviceType</name>
      <anchorfile>classAudioIODeviceType.html</anchorfile>
      <anchor>a4750d3af810f03d74d9a73584f2bf1d0</anchor>
      <arglist>(const String &amp;typeName)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>callDeviceChangeListeners</name>
      <anchorfile>classAudioIODeviceType.html</anchorfile>
      <anchor>a256b0adb6c00e875e9d52e2c79ecdb85</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AudioIODeviceType::Listener</name>
    <filename>classAudioIODeviceType_1_1Listener.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Listener</name>
      <anchorfile>classAudioIODeviceType_1_1Listener.html</anchorfile>
      <anchor>a2728ca3ef4754c977a2125fd2e7d9f38</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>audioDeviceListChanged</name>
      <anchorfile>classAudioIODeviceType_1_1Listener.html</anchorfile>
      <anchor>a1738204697daecf0f2619c3525656eae</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AudioParameterBool</name>
    <filename>classAudioParameterBool.html</filename>
    <base>AudioProcessorParameterWithID</base>
    <member kind="function">
      <type></type>
      <name>AudioParameterBool</name>
      <anchorfile>classAudioParameterBool.html</anchorfile>
      <anchor>a6c07f65cfa7b3a5d3188dfe05e03187e</anchor>
      <arglist>(const String &amp;parameterID, const String &amp;name, bool defaultValue, const String &amp;label=String())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~AudioParameterBool</name>
      <anchorfile>classAudioParameterBool.html</anchorfile>
      <anchor>a3557a412400467534e5d4d2280b47b76</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get</name>
      <anchorfile>classAudioParameterBool.html</anchorfile>
      <anchor>a71762628c45bff203a7deed2a10ae576</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator bool</name>
      <anchorfile>classAudioParameterBool.html</anchorfile>
      <anchor>a5f0418697910d56b99edd5db110309b7</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>AudioParameterBool &amp;</type>
      <name>operator=</name>
      <anchorfile>classAudioParameterBool.html</anchorfile>
      <anchor>af1f16d564bab3a92b36bb3e0eae5bf5b</anchor>
      <arglist>(bool newValue)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AudioProcessorParameterWithID</name>
      <anchorfile>classAudioProcessorParameterWithID.html</anchorfile>
      <anchor>adea4c94155fc4a6cef9b64038fa4074d</anchor>
      <arglist>(const String &amp;parameterID, const String &amp;name, const String &amp;label=String(), Category category=AudioProcessorParameter::genericParameter)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~AudioProcessorParameterWithID</name>
      <anchorfile>classAudioProcessorParameterWithID.html</anchorfile>
      <anchor>a6382be17ef344cdd6b6a8b839fdc0909</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AudioProcessorParameter</name>
      <anchorfile>classAudioProcessorParameter.html</anchorfile>
      <anchor>a3df493838d2f048ff182fef75f535729</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~AudioProcessorParameter</name>
      <anchorfile>classAudioProcessorParameter.html</anchorfile>
      <anchor>a30e812a7e141bb25f509980d7d11d27b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValueNotifyingHost</name>
      <anchorfile>classAudioProcessorParameter.html</anchorfile>
      <anchor>ac9b67f35339db50d2bd9a026d89390e1</anchor>
      <arglist>(float newValue)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>beginChangeGesture</name>
      <anchorfile>classAudioProcessorParameter.html</anchorfile>
      <anchor>aae70f0cce34b664206323bc277096ddc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>endChangeGesture</name>
      <anchorfile>classAudioProcessorParameter.html</anchorfile>
      <anchor>a50c2a826a7aa77dbe0e55e77a93d061e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isOrientationInverted</name>
      <anchorfile>classAudioProcessorParameter.html</anchorfile>
      <anchor>a4059d9e8fdee3e0f06bb9b088157130e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isAutomatable</name>
      <anchorfile>classAudioProcessorParameter.html</anchorfile>
      <anchor>a1114c7cca3bfde9ab668191a41b27641</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isMetaParameter</name>
      <anchorfile>classAudioProcessorParameter.html</anchorfile>
      <anchor>a2ed01ae575f42e4bf9cffd76dc43dc4f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getParameterIndex</name>
      <anchorfile>classAudioProcessorParameter.html</anchorfile>
      <anchor>a35b9c23ce77721f84bc4686e217d76f7</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>Category</name>
      <anchorfile>classAudioProcessorParameter.html</anchorfile>
      <anchor>aef73dff71cb1abfdadd5b6f3649d7db2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>genericParameter</name>
      <anchorfile>classAudioProcessorParameter.html</anchorfile>
      <anchor>aef73dff71cb1abfdadd5b6f3649d7db2ac86017a29081bfb3405d7d5a4ed2c370</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>inputGain</name>
      <anchorfile>classAudioProcessorParameter.html</anchorfile>
      <anchor>aef73dff71cb1abfdadd5b6f3649d7db2a63cbb830db905388a7a347625739ecfa</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>outputGain</name>
      <anchorfile>classAudioProcessorParameter.html</anchorfile>
      <anchor>aef73dff71cb1abfdadd5b6f3649d7db2af9f7073b86a4bbff42f8afb5cefcd0e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>inputMeter</name>
      <anchorfile>classAudioProcessorParameter.html</anchorfile>
      <anchor>aef73dff71cb1abfdadd5b6f3649d7db2ab0a6f7d8b29c5c25442d47eead44ee32</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>outputMeter</name>
      <anchorfile>classAudioProcessorParameter.html</anchorfile>
      <anchor>aef73dff71cb1abfdadd5b6f3649d7db2a8fa25053a987220c193c4aa19a2659fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>compressorLimiterGainReductionMeter</name>
      <anchorfile>classAudioProcessorParameter.html</anchorfile>
      <anchor>aef73dff71cb1abfdadd5b6f3649d7db2a23cec5a8cfbc473d139480500345ae42</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>expanderGateGainReductionMeter</name>
      <anchorfile>classAudioProcessorParameter.html</anchorfile>
      <anchor>aef73dff71cb1abfdadd5b6f3649d7db2a60a4f91c56eaab4d327f16240702233a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>analysisMeter</name>
      <anchorfile>classAudioProcessorParameter.html</anchorfile>
      <anchor>aef73dff71cb1abfdadd5b6f3649d7db2a4ebe3982218c5ea7dcdcbcfbb70faa1d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>otherMeter</name>
      <anchorfile>classAudioProcessorParameter.html</anchorfile>
      <anchor>aef73dff71cb1abfdadd5b6f3649d7db2aaba169374c989f88c1006291e2576005</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const String</type>
      <name>paramID</name>
      <anchorfile>classAudioProcessorParameterWithID.html</anchorfile>
      <anchor>a09fd779999685889367257e36ff648da</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const String</type>
      <name>name</name>
      <anchorfile>classAudioProcessorParameterWithID.html</anchorfile>
      <anchor>a26e3f108f8a3fabf92bb942518f9fd39</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const String</type>
      <name>label</name>
      <anchorfile>classAudioProcessorParameterWithID.html</anchorfile>
      <anchor>ac9e5aa7e602b64e78fda51972375579c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Category</type>
      <name>category</name>
      <anchorfile>classAudioProcessorParameterWithID.html</anchorfile>
      <anchor>afb66a203959ef95de116341ecc2000b9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AudioParameterChoice</name>
    <filename>classAudioParameterChoice.html</filename>
    <base>AudioProcessorParameterWithID</base>
    <member kind="function">
      <type></type>
      <name>AudioParameterChoice</name>
      <anchorfile>classAudioParameterChoice.html</anchorfile>
      <anchor>ad6f5b50a043daa33f66d6807147c7b73</anchor>
      <arglist>(const String &amp;parameterID, const String &amp;name, const StringArray &amp;choices, int defaultItemIndex, const String &amp;label=String())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~AudioParameterChoice</name>
      <anchorfile>classAudioParameterChoice.html</anchorfile>
      <anchor>abaecb29355bc6e5db36e077ea4162b64</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getIndex</name>
      <anchorfile>classAudioParameterChoice.html</anchorfile>
      <anchor>af92fba857f94e81cd2e50eddf351c6d8</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator int</name>
      <anchorfile>classAudioParameterChoice.html</anchorfile>
      <anchor>a06324df9e78630dcbc872ce0e416414d</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>getCurrentChoiceName</name>
      <anchorfile>classAudioParameterChoice.html</anchorfile>
      <anchor>ab8d07d0d1a7604711686df79732ffd9d</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator String</name>
      <anchorfile>classAudioParameterChoice.html</anchorfile>
      <anchor>a8088c4fe433a76c9a9bfd88c70f5fd21</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>AudioParameterChoice &amp;</type>
      <name>operator=</name>
      <anchorfile>classAudioParameterChoice.html</anchorfile>
      <anchor>a80b1b0d2be85f40a0e8959277386e092</anchor>
      <arglist>(int newValue)</arglist>
    </member>
    <member kind="variable">
      <type>const StringArray</type>
      <name>choices</name>
      <anchorfile>classAudioParameterChoice.html</anchorfile>
      <anchor>afbeec68d8f56cf4cde23c1b615699b9f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AudioParameterFloat</name>
    <filename>classAudioParameterFloat.html</filename>
    <base>AudioProcessorParameterWithID</base>
    <member kind="function">
      <type></type>
      <name>AudioParameterFloat</name>
      <anchorfile>classAudioParameterFloat.html</anchorfile>
      <anchor>a3624f588f8af70eb0d03ce524533850a</anchor>
      <arglist>(const String &amp;parameterID, const String &amp;name, NormalisableRange&lt; float &gt; normalisableRange, float defaultValue, const String &amp;label=String(), Category category=AudioProcessorParameter::genericParameter)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AudioParameterFloat</name>
      <anchorfile>classAudioParameterFloat.html</anchorfile>
      <anchor>affbd6b7716d9ea098b5bcead7c3e5a89</anchor>
      <arglist>(String parameterID, String name, float minValue, float maxValue, float defaultValue)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~AudioParameterFloat</name>
      <anchorfile>classAudioParameterFloat.html</anchorfile>
      <anchor>a506f108d60273f9af854852b25bd4598</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>get</name>
      <anchorfile>classAudioParameterFloat.html</anchorfile>
      <anchor>a5dfe7c0b452beac16f139029d83106c5</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator float</name>
      <anchorfile>classAudioParameterFloat.html</anchorfile>
      <anchor>aebdc357fc8e777d8070149e721d78132</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>AudioParameterFloat &amp;</type>
      <name>operator=</name>
      <anchorfile>classAudioParameterFloat.html</anchorfile>
      <anchor>a76a147ac794e800cc6b8f8f34987a659</anchor>
      <arglist>(float newValue)</arglist>
    </member>
    <member kind="variable">
      <type>NormalisableRange&lt; float &gt;</type>
      <name>range</name>
      <anchorfile>classAudioParameterFloat.html</anchorfile>
      <anchor>a7e860466dbc1319bc064cd6e7db382e3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AudioParameterInt</name>
    <filename>classAudioParameterInt.html</filename>
    <base>AudioProcessorParameterWithID</base>
    <member kind="function">
      <type></type>
      <name>AudioParameterInt</name>
      <anchorfile>classAudioParameterInt.html</anchorfile>
      <anchor>aaa34ef972ce508f86d8f637da0d221a7</anchor>
      <arglist>(const String &amp;parameterID, const String &amp;name, int minValue, int maxValue, int defaultValue, const String &amp;label=String())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~AudioParameterInt</name>
      <anchorfile>classAudioParameterInt.html</anchorfile>
      <anchor>aee8b27577a16bb86b82502a0f5b146c1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get</name>
      <anchorfile>classAudioParameterInt.html</anchorfile>
      <anchor>a126c58d83e818ed6358969b78822c3ee</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator int</name>
      <anchorfile>classAudioParameterInt.html</anchorfile>
      <anchor>a782cc33b4a21648b39899aec0534b2de</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>AudioParameterInt &amp;</type>
      <name>operator=</name>
      <anchorfile>classAudioParameterInt.html</anchorfile>
      <anchor>afb2a71f7d03f32184772070c7a16f16d</anchor>
      <arglist>(int newValue)</arglist>
    </member>
    <member kind="function">
      <type>Range&lt; int &gt;</type>
      <name>getRange</name>
      <anchorfile>classAudioParameterInt.html</anchorfile>
      <anchor>afb6595ddf398e97e31f85d570d4ef87f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AudioPlayHead</name>
    <filename>classAudioPlayHead.html</filename>
    <class kind="struct">AudioPlayHead::CurrentPositionInfo</class>
    <member kind="enumeration">
      <type></type>
      <name>FrameRateType</name>
      <anchorfile>classAudioPlayHead.html</anchorfile>
      <anchor>a9afad1749c8002945b2a6921eef92b25</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>fps24</name>
      <anchorfile>classAudioPlayHead.html</anchorfile>
      <anchor>a9afad1749c8002945b2a6921eef92b25a0a9a4305317d85cf1975f6be3569e9df</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>fps25</name>
      <anchorfile>classAudioPlayHead.html</anchorfile>
      <anchor>a9afad1749c8002945b2a6921eef92b25a8deb0cfa8182f6be90cb4d91b4b68456</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>fps2997</name>
      <anchorfile>classAudioPlayHead.html</anchorfile>
      <anchor>a9afad1749c8002945b2a6921eef92b25a7c5eadafb62a8be03ab5690d34fb7460</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>fps30</name>
      <anchorfile>classAudioPlayHead.html</anchorfile>
      <anchor>a9afad1749c8002945b2a6921eef92b25a77c3bd70c42f416f663c83036bff401d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>fps2997drop</name>
      <anchorfile>classAudioPlayHead.html</anchorfile>
      <anchor>a9afad1749c8002945b2a6921eef92b25ac03944a2bba5e61cabcca112edfd1efd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>fps30drop</name>
      <anchorfile>classAudioPlayHead.html</anchorfile>
      <anchor>a9afad1749c8002945b2a6921eef92b25a2263e006dec6f9cf53adbbcecdc9e287</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>fpsUnknown</name>
      <anchorfile>classAudioPlayHead.html</anchorfile>
      <anchor>a9afad1749c8002945b2a6921eef92b25a7e58343767d199b598a16ea25c09b062</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~AudioPlayHead</name>
      <anchorfile>classAudioPlayHead.html</anchorfile>
      <anchor>a9c32cae9ee0bb7442a2c465a73aca6bd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>getCurrentPosition</name>
      <anchorfile>classAudioPlayHead.html</anchorfile>
      <anchor>ae8ff79b6ec79fbecb1e8276ad9867cd2</anchor>
      <arglist>(CurrentPositionInfo &amp;result)=0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>AudioPlayHead</name>
      <anchorfile>classAudioPlayHead.html</anchorfile>
      <anchor>a9e78c0595510555a3d816a54bffeb610</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>AudioPlayHead::CurrentPositionInfo</name>
    <filename>structAudioPlayHead_1_1CurrentPositionInfo.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>structAudioPlayHead_1_1CurrentPositionInfo.html</anchorfile>
      <anchor>a927d8dc1a9acc71fff0656b0d2128afe</anchor>
      <arglist>(const CurrentPositionInfo &amp;other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>structAudioPlayHead_1_1CurrentPositionInfo.html</anchorfile>
      <anchor>aa97bb9f02a577b9e53ef575d17ac1c46</anchor>
      <arglist>(const CurrentPositionInfo &amp;other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetToDefault</name>
      <anchorfile>structAudioPlayHead_1_1CurrentPositionInfo.html</anchorfile>
      <anchor>a4eb2e1834c4f9e932ef43301c0cd99ea</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>bpm</name>
      <anchorfile>structAudioPlayHead_1_1CurrentPositionInfo.html</anchorfile>
      <anchor>a70442777df0b88595ac6865acd936722</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>timeSigNumerator</name>
      <anchorfile>structAudioPlayHead_1_1CurrentPositionInfo.html</anchorfile>
      <anchor>aaf8ad36ef3b2d39d401542ae5ca0100c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>timeSigDenominator</name>
      <anchorfile>structAudioPlayHead_1_1CurrentPositionInfo.html</anchorfile>
      <anchor>a953c3ad29ef6e0ced883e15f901b0a15</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int64</type>
      <name>timeInSamples</name>
      <anchorfile>structAudioPlayHead_1_1CurrentPositionInfo.html</anchorfile>
      <anchor>a6cc14e975100cd474bc37971a6b9e460</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>timeInSeconds</name>
      <anchorfile>structAudioPlayHead_1_1CurrentPositionInfo.html</anchorfile>
      <anchor>a9da5cfbe320a2e6bf67c3a064ab34fd7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>editOriginTime</name>
      <anchorfile>structAudioPlayHead_1_1CurrentPositionInfo.html</anchorfile>
      <anchor>a5a8c7375646228f378c4eb673f49a9e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>ppqPosition</name>
      <anchorfile>structAudioPlayHead_1_1CurrentPositionInfo.html</anchorfile>
      <anchor>aae819730a8f2918f97b9869970ff8c3d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>ppqPositionOfLastBarStart</name>
      <anchorfile>structAudioPlayHead_1_1CurrentPositionInfo.html</anchorfile>
      <anchor>ad7967e1315115628cb35f93f389a3448</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FrameRateType</type>
      <name>frameRate</name>
      <anchorfile>structAudioPlayHead_1_1CurrentPositionInfo.html</anchorfile>
      <anchor>aca5544d9204e4fedfdf6088dcdf339aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>isPlaying</name>
      <anchorfile>structAudioPlayHead_1_1CurrentPositionInfo.html</anchorfile>
      <anchor>a84105c58665f2daae7a18809c964b397</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>isRecording</name>
      <anchorfile>structAudioPlayHead_1_1CurrentPositionInfo.html</anchorfile>
      <anchor>a26d4f8779d4f64ba6c3a0a0df5607a36</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>ppqLoopStart</name>
      <anchorfile>structAudioPlayHead_1_1CurrentPositionInfo.html</anchorfile>
      <anchor>ae56173fb2fdc1bf77094d5a507ad247c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>ppqLoopEnd</name>
      <anchorfile>structAudioPlayHead_1_1CurrentPositionInfo.html</anchorfile>
      <anchor>af3f8a3e1105700c28b2197635a64c9f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>isLooping</name>
      <anchorfile>structAudioPlayHead_1_1CurrentPositionInfo.html</anchorfile>
      <anchor>a69d7734277c893a624b2ea7392cb96e5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AudioPluginFormat</name>
    <filename>classAudioPluginFormat.html</filename>
    <class kind="struct">AudioPluginFormat::InstantiationCompletionCallback</class>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~AudioPluginFormat</name>
      <anchorfile>classAudioPluginFormat.html</anchorfile>
      <anchor>a13029b260e822e954d6b33229db75d50</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual String</type>
      <name>getName</name>
      <anchorfile>classAudioPluginFormat.html</anchorfile>
      <anchor>aad966eb47be8b72b34f8f317ea89b4a2</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>findAllTypesForFile</name>
      <anchorfile>classAudioPluginFormat.html</anchorfile>
      <anchor>a9d23e71b2c2429cad9775a14e021abd6</anchor>
      <arglist>(OwnedArray&lt; PluginDescription &gt; &amp;results, const String &amp;fileOrIdentifier)=0</arglist>
    </member>
    <member kind="function">
      <type>AudioPluginInstance *</type>
      <name>createInstanceFromDescription</name>
      <anchorfile>classAudioPluginFormat.html</anchorfile>
      <anchor>a078fc44fc2966158d661c56e11e7ca38</anchor>
      <arglist>(const PluginDescription &amp;, double initialSampleRate, int initialBufferSize)</arglist>
    </member>
    <member kind="function">
      <type>AudioPluginInstance *</type>
      <name>createInstanceFromDescription</name>
      <anchorfile>classAudioPluginFormat.html</anchorfile>
      <anchor>a66a7f6a84ae7c5f270a0a12917d687eb</anchor>
      <arglist>(const PluginDescription &amp;, double initialSampleRate, int initialBufferSize, String &amp;errorMessage)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>createPluginInstanceAsync</name>
      <anchorfile>classAudioPluginFormat.html</anchorfile>
      <anchor>ac03372359b6033b378bc036ffb19c78e</anchor>
      <arglist>(const PluginDescription &amp;description, double initialSampleRate, int initialBufferSize, InstantiationCompletionCallback *completionCallback)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>createPluginInstanceAsync</name>
      <anchorfile>classAudioPluginFormat.html</anchorfile>
      <anchor>ac7c1dd944b69054af6b8633bb43fcb5e</anchor>
      <arglist>(const PluginDescription &amp;description, double initialSampleRate, int initialBufferSize, std::function&lt; void(AudioPluginInstance *, const String &amp;)&gt; completionCallback)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>fileMightContainThisPluginType</name>
      <anchorfile>classAudioPluginFormat.html</anchorfile>
      <anchor>a89c2413dae86f4b9ea8fb29ed205edc5</anchor>
      <arglist>(const String &amp;fileOrIdentifier)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual String</type>
      <name>getNameOfPluginFromIdentifier</name>
      <anchorfile>classAudioPluginFormat.html</anchorfile>
      <anchor>a8e8251e287c4829606dda2f1730a1c32</anchor>
      <arglist>(const String &amp;fileOrIdentifier)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>pluginNeedsRescanning</name>
      <anchorfile>classAudioPluginFormat.html</anchorfile>
      <anchor>aeaf55cd79107b25ca1c0dbc685890aa3</anchor>
      <arglist>(const PluginDescription &amp;)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>doesPluginStillExist</name>
      <anchorfile>classAudioPluginFormat.html</anchorfile>
      <anchor>a895b91a86d223f3caeba207dba298d2f</anchor>
      <arglist>(const PluginDescription &amp;)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>canScanForPlugins</name>
      <anchorfile>classAudioPluginFormat.html</anchorfile>
      <anchor>a9bded73bfc877952f9f092ae13ae8816</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual StringArray</type>
      <name>searchPathsForPlugins</name>
      <anchorfile>classAudioPluginFormat.html</anchorfile>
      <anchor>a74b24832af4eb78213ffaa35937d8ac6</anchor>
      <arglist>(const FileSearchPath &amp;directoriesToSearch, bool recursive, bool allowPluginsWhichRequireAsynchronousInstantiation=false)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual FileSearchPath</type>
      <name>getDefaultLocationsToSearch</name>
      <anchorfile>classAudioPluginFormat.html</anchorfile>
      <anchor>aa7d194ad3abdad8da5e37d2557579430</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>AudioPluginFormat</name>
      <anchorfile>classAudioPluginFormat.html</anchorfile>
      <anchor>a1cba190b88451cc41cae664a72bce7d5</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>createPluginInstance</name>
      <anchorfile>classAudioPluginFormat.html</anchorfile>
      <anchor>aae20bd6e1eedb6c3b46fd49375c99f25</anchor>
      <arglist>(const PluginDescription &amp;, double initialSampleRate, int initialBufferSize, void *userData, void(*callback)(void *, AudioPluginInstance *, const String &amp;))=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual bool</type>
      <name>requiresUnblockedMessageThreadDuringCreation</name>
      <anchorfile>classAudioPluginFormat.html</anchorfile>
      <anchor>abbfbfda97cb2fd11ad368c5c45d508ed</anchor>
      <arglist>(const PluginDescription &amp;) const noexcept=0</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>AudioPluginFormat::InstantiationCompletionCallback</name>
    <filename>structAudioPluginFormat_1_1InstantiationCompletionCallback.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~InstantiationCompletionCallback</name>
      <anchorfile>structAudioPluginFormat_1_1InstantiationCompletionCallback.html</anchorfile>
      <anchor>a784cd8c9355b64cb5e3abb4da09ce996</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>completionCallback</name>
      <anchorfile>structAudioPluginFormat_1_1InstantiationCompletionCallback.html</anchorfile>
      <anchor>ac7ffa1201f4999014d78583b0c08723f</anchor>
      <arglist>(AudioPluginInstance *instance, const String &amp;error)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AudioPluginFormatManager</name>
    <filename>classAudioPluginFormatManager.html</filename>
    <member kind="function">
      <type></type>
      <name>AudioPluginFormatManager</name>
      <anchorfile>classAudioPluginFormatManager.html</anchorfile>
      <anchor>ac2781ab5b9b81784a1041edb16c3bdd9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~AudioPluginFormatManager</name>
      <anchorfile>classAudioPluginFormatManager.html</anchorfile>
      <anchor>af665e2e901d438a93a75282df73dd1b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addDefaultFormats</name>
      <anchorfile>classAudioPluginFormatManager.html</anchorfile>
      <anchor>a43c3c16e48f1c50069573c8aede0b776</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumFormats</name>
      <anchorfile>classAudioPluginFormatManager.html</anchorfile>
      <anchor>a3c93f8d5747cf2c9f1aa6967e19b5dbd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>AudioPluginFormat *</type>
      <name>getFormat</name>
      <anchorfile>classAudioPluginFormatManager.html</anchorfile>
      <anchor>a2b402a4797089f016b68a1e6afdf51ae</anchor>
      <arglist>(int index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addFormat</name>
      <anchorfile>classAudioPluginFormatManager.html</anchorfile>
      <anchor>ac243852bbebb30d33264457579005875</anchor>
      <arglist>(AudioPluginFormat *format)</arglist>
    </member>
    <member kind="function">
      <type>AudioPluginInstance *</type>
      <name>createPluginInstance</name>
      <anchorfile>classAudioPluginFormatManager.html</anchorfile>
      <anchor>a9cea8462bb39841dbb78371692cd2952</anchor>
      <arglist>(const PluginDescription &amp;description, double initialSampleRate, int initialBufferSize, String &amp;errorMessage) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>createPluginInstanceAsync</name>
      <anchorfile>classAudioPluginFormatManager.html</anchorfile>
      <anchor>ae347b83fed14e1db1744242fdba6e7dd</anchor>
      <arglist>(const PluginDescription &amp;description, double initialSampleRate, int initialBufferSize, AudioPluginFormat::InstantiationCompletionCallback *callback)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>createPluginInstanceAsync</name>
      <anchorfile>classAudioPluginFormatManager.html</anchorfile>
      <anchor>a6c00eeb1a876da59d86478ef114b68b1</anchor>
      <arglist>(const PluginDescription &amp;description, double initialSampleRate, int initialBufferSize, std::function&lt; void(AudioPluginInstance *, const String &amp;)&gt; completionCallback)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>doesPluginStillExist</name>
      <anchorfile>classAudioPluginFormatManager.html</anchorfile>
      <anchor>aa72ffaa8d7fa00a3b510a75064bcb913</anchor>
      <arglist>(const PluginDescription &amp;description) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AudioPluginInstance</name>
    <filename>classAudioPluginInstance.html</filename>
    <base>AudioProcessor</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~AudioPluginInstance</name>
      <anchorfile>classAudioPluginInstance.html</anchorfile>
      <anchor>adfede30a4e4f8debd321785322a472b7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>fillInPluginDescription</name>
      <anchorfile>classAudioPluginInstance.html</anchorfile>
      <anchor>addcf6a53ee6ac9d21e1e4ad1ba0bcc5d</anchor>
      <arglist>(PluginDescription &amp;description) const =0</arglist>
    </member>
    <member kind="function">
      <type>PluginDescription</type>
      <name>getPluginDescription</name>
      <anchorfile>classAudioPluginInstance.html</anchorfile>
      <anchor>ab66898f8a83ea7ef38154927dbc9bc47</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void *</type>
      <name>getPlatformSpecificData</name>
      <anchorfile>classAudioPluginInstance.html</anchorfile>
      <anchor>a49f7214074ad74ca108f3f770e8c749e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>refreshParameterList</name>
      <anchorfile>classAudioPluginInstance.html</anchorfile>
      <anchor>ac2acb0606147c2568276ab32e7552d38</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~AudioProcessor</name>
      <anchorfile>classAudioProcessor.html</anchorfile>
      <anchor>ac36ca53f3b198e097e38b8e830890878</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const String</type>
      <name>getName</name>
      <anchorfile>classAudioProcessor.html</anchorfile>
      <anchor>a71affad7782adb55b183d6d4d0853253</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>prepareToPlay</name>
      <anchorfile>classAudioProcessor.html</anchorfile>
      <anchor>a44b74778247a35a669a3a994d814389e</anchor>
      <arglist>(double sampleRate, int maximumExpectedSamplesPerBlock)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>releaseResources</name>
      <anchorfile>classAudioProcessor.html</anchorfile>
      <anchor>a49e88e7d6c7c40899624beb9e3508f3a</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>processBlock</name>
      <anchorfile>classAudioProcessor.html</anchorfile>
      <anchor>abbac77f68ba047cf60c4bc97326dcb58</anchor>
      <arglist>(AudioBuffer&lt; float &gt; &amp;buffer, MidiBuffer &amp;midiMessages)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>processBlock</name>
      <anchorfile>classAudioProcessor.html</anchorfile>
      <anchor>ac1d1db605c16ab803fadd100bb6ff2e8</anchor>
      <arglist>(AudioBuffer&lt; double &gt; &amp;buffer, MidiBuffer &amp;midiMessages)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>processBlockBypassed</name>
      <anchorfile>classAudioProcessor.html</anchorfile>
      <anchor>a8728dd8bc715ee6d840ce5a9c86a4048</anchor>
      <arglist>(AudioBuffer&lt; float &gt; &amp;buffer, MidiBuffer &amp;midiMessages)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>processBlockBypassed</name>
      <anchorfile>classAudioProcessor.html</anchorfile>
      <anchor>a745093678f8ea07e47f19b777031abd2</anchor>
      <arglist>(AudioBuffer&lt; double &gt; &amp;buffer, MidiBuffer &amp;midiMessages)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getBusCount</name>
      <anchorfile>classAudioProcessor.html</anchorfile>
      <anchor>a349a6c1a08d916db53224675c897cd5b</anchor>
      <arglist>(bool isInput) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Bus *</type>
      <name>getBus</name>
      <anchorfile>classAudioProcessor.html</anchorfile>
      <anchor>abd56b3a8717d5898942babd3a88690ae</anchor>
      <arglist>(bool isInput, int busIdx) noexcept</arglist>
    </member>
    <member kind="function">
      <type>const Bus *</type>
      <name>getBus</name>
      <anchorfile>classAudioProcessor.html</anchorfile>
      <anchor>a7dfe4c12e9e27f3de877e9d2044f0fab</anchor>
      <arglist>(bool isInput, int busIdx) const noexcept</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>canAddBus</name>
      <anchorfile>classAudioProcessor.html</anchorfile>
      <anchor>af2df1b7ab111642230ed749d8017b4a9</anchor>
      <arglist>(bool isInput) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>canRemoveBus</name>
      <anchorfile>classAudioProcessor.html</anchorfile>
      <anchor>a48440b8736885e0e377569c0796628b1</anchor>
      <arglist>(bool isInput) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addBus</name>
      <anchorfile>classAudioProcessor.html</anchorfile>
      <anchor>a9aea2fb2745c0baf3a5fa90a00b14df6</anchor>
      <arglist>(bool isInput)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>removeBus</name>
      <anchorfile>classAudioProcessor.html</anchorfile>
      <anchor>ad50d39de8a1ed655829ccf21e63c13b4</anchor>
      <arglist>(bool isInput)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setBusesLayout</name>
      <anchorfile>classAudioProcessor.html</anchorfile>
      <anchor>acd92c2d343de66816b290015cd15517f</anchor>
      <arglist>(const BusesLayout &amp;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setBusesLayoutWithoutEnabling</name>
      <anchorfile>classAudioProcessor.html</anchorfile>
      <anchor>a5ac4a4f4640b3fb1be6b0235a3c48f9c</anchor>
      <arglist>(const BusesLayout &amp;)</arglist>
    </member>
    <member kind="function">
      <type>BusesLayout</type>
      <name>getBusesLayout</name>
      <anchorfile>classAudioProcessor.html</anchorfile>
      <anchor>a6b618b6e5cdca4da58e87417ade7dbc0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>AudioChannelSet</type>
      <name>getChannelLayoutOfBus</name>
      <anchorfile>classAudioProcessor.html</anchorfile>
      <anchor>a5ccdab0242879d734cd34ab45a8ef6a5</anchor>
      <arglist>(bool isInput, int busIndex) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setChannelLayoutOfBus</name>
      <anchorfile>classAudioProcessor.html</anchorfile>
      <anchor>ac72802fbbf3bb51abae31dc5eb3a814f</anchor>
      <arglist>(bool isInput, int busIdx, const AudioChannelSet &amp;layout)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getChannelCountOfBus</name>
      <anchorfile>classAudioProcessor.html</anchorfile>
      <anchor>a17f5020380dbfcd84dff17578143fddc</anchor>
      <arglist>(bool isInput, int busIdx) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>enableAllBuses</name>
      <anchorfile>classAudioProcessor.html</anchorfile>
      <anchor>a9f4a4b0951d15e7bfecd86bd68993b51</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>disableNonMainBuses</name>
      <anchorfile>classAudioProcessor.html</anchorfile>
      <anchor>a95e1cedbe30a03547baa4f8341c5f04a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getChannelIndexInProcessBlockBuffer</name>
      <anchorfile>classAudioProcessor.html</anchorfile>
      <anchor>af9de177654fe95cc9de951df15537c24</anchor>
      <arglist>(bool isInput, int busIndex, int channelIndex) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getOffsetInBusBufferForAbsoluteChannelIndex</name>
      <anchorfile>classAudioProcessor.html</anchorfile>
      <anchor>aa567504e979bf8ee6868878d21d05f71</anchor>
      <arglist>(bool isInput, int absoluteChannelIndex, int &amp;busIdx) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>AudioBuffer&lt; FloatType &gt;</type>
      <name>getBusBuffer</name>
      <anchorfile>classAudioProcessor.html</anchorfile>
      <anchor>a356fa03d08448f40384f0194e943403b</anchor>
      <arglist>(AudioBuffer&lt; FloatType &gt; &amp;processBlockBuffer, bool isInput, int busIndex) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>checkBusesLayoutSupported</name>
      <anchorfile>classAudioProcessor.html</anchorfile>
      <anchor>a59e40238c21042c81b6dcdea07f9b7e6</anchor>
      <arglist>(const BusesLayout &amp;) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>supportsDoublePrecisionProcessing</name>
      <anchorfile>classAudioProcessor.html</anchorfile>
      <anchor>a8481c6767076b20c25de25bbf0469114</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ProcessingPrecision</type>
      <name>getProcessingPrecision</name>
      <anchorfile>classAudioProcessor.html</anchorfile>
      <anchor>a431488bcce04de3caf9f873fe0efbb92</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isUsingDoublePrecision</name>
      <anchorfile>classAudioProcessor.html</anchorfile>
      <anchor>a58f5414e3b89197136ab4fb8f1263d66</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setProcessingPrecision</name>
      <anchorfile>classAudioProcessor.html</anchorfile>
      <anchor>a3ae51e20ee91b1383bc4d6a3789ae119</anchor>
      <arglist>(ProcessingPrecision newPrecision) noexcept</arglist>
    </member>
    <member kind="function">
      <type>AudioPlayHead *</type>
      <name>getPlayHead</name>
      <anchorfile>classAudioProcessor.html</anchorfile>
      <anchor>a3000c867da8b04866a4f91c8103956ac</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getTotalNumInputChannels</name>
      <anchorfile>classAudioProcessor.html</anchorfile>
      <anchor>a77571fc8ce02ddf4fe3a56fe57ea9392</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getTotalNumOutputChannels</name>
      <anchorfile>classAudioProcessor.html</anchorfile>
      <anchor>a2a99a78e2a1e2b7f2d4dffee0819a225</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getMainBusNumInputChannels</name>
      <anchorfile>classAudioProcessor.html</anchorfile>
      <anchor>a6c273007eacb9926081f1276cb1ad44c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getMainBusNumOutputChannels</name>
      <anchorfile>classAudioProcessor.html</anchorfile>
      <anchor>a89e5d408f21d930bd56c21dd2aa8f69b</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>BusesLayout</type>
      <name>getNextBestLayoutInLayoutList</name>
      <anchorfile>classAudioProcessor.html</anchorfile>
      <anchor>a82b3815d0d5be7bef661d7e9728b33e8</anchor>
      <arglist>(const BusesLayout &amp;layouts, const short(&amp;channelLayoutList)[numLayouts][2])</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getSampleRate</name>
      <anchorfile>classAudioProcessor.html</anchorfile>
      <anchor>a99b216c491ed4896424a9a075858ca03</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getBlockSize</name>
      <anchorfile>classAudioProcessor.html</anchorfile>
      <anchor>a3b59606e6e85f262d465c7f779ca0c4a</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getLatencySamples</name>
      <anchorfile>classAudioProcessor.html</anchorfile>
      <anchor>abae54a8c1bcfd88bcba9d42b752e006d</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLatencySamples</name>
      <anchorfile>classAudioProcessor.html</anchorfile>
      <anchor>ac902e27eb0950adac57bb69680b6e709</anchor>
      <arglist>(int newLatency)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>getTailLengthSeconds</name>
      <anchorfile>classAudioProcessor.html</anchorfile>
      <anchor>a358db82650c6423968091f8b4d22b09a</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>acceptsMidi</name>
      <anchorfile>classAudioProcessor.html</anchorfile>
      <anchor>ae482a0c2928bfe77de821e6824ffaee6</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>producesMidi</name>
      <anchorfile>classAudioProcessor.html</anchorfile>
      <anchor>a719715472b12c40e8144109561c04e65</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>supportsMPE</name>
      <anchorfile>classAudioProcessor.html</anchorfile>
      <anchor>ae8aeb6d876050fce6508701f675248e4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isMidiEffect</name>
      <anchorfile>classAudioProcessor.html</anchorfile>
      <anchor>aac4f66e34f0a5da7f4e56a30d5631220</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const CriticalSection &amp;</type>
      <name>getCallbackLock</name>
      <anchorfile>classAudioProcessor.html</anchorfile>
      <anchor>a71ae245e3ea15035f0648ddd34a492c1</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>suspendProcessing</name>
      <anchorfile>classAudioProcessor.html</anchorfile>
      <anchor>a584d01c1c009c1ce49a45cd6e49d2dc5</anchor>
      <arglist>(bool shouldBeSuspended)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSuspended</name>
      <anchorfile>classAudioProcessor.html</anchorfile>
      <anchor>aab07ed8e72817efe0e12b70890950e3e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>reset</name>
      <anchorfile>classAudioProcessor.html</anchorfile>
      <anchor>ab10c4739ceb56e5cd70dbce8aa8c4f61</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNonRealtime</name>
      <anchorfile>classAudioProcessor.html</anchorfile>
      <anchor>ac61949900870c9f6dca63d53ee68f7a0</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setNonRealtime</name>
      <anchorfile>classAudioProcessor.html</anchorfile>
      <anchor>ac419b4487f3c8ade182189e5b19e7c2c</anchor>
      <arglist>(bool isNonRealtime) noexcept</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual AudioProcessorEditor *</type>
      <name>createEditor</name>
      <anchorfile>classAudioProcessor.html</anchorfile>
      <anchor>a103fc8a8666b7d31b472e017262be84d</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>hasEditor</name>
      <anchorfile>classAudioProcessor.html</anchorfile>
      <anchor>a00be8f595da09ba01d74cb7c52b8fb81</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <type>AudioProcessorEditor *</type>
      <name>getActiveEditor</name>
      <anchorfile>classAudioProcessor.html</anchorfile>
      <anchor>a0f1386123ab008b42a82c7d121b2ff13</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>AudioProcessorEditor *</type>
      <name>createEditorIfNeeded</name>
      <anchorfile>classAudioProcessor.html</anchorfile>
      <anchor>a0e06519ec925a8da3180df1a7a34f3eb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumParameters</name>
      <anchorfile>classAudioProcessor.html</anchorfile>
      <anchor>ac7b802374ba30b719f34570ab6f07c21</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const String</type>
      <name>getParameterName</name>
      <anchorfile>classAudioProcessor.html</anchorfile>
      <anchor>a9ae35eca716774ae1fd750d60c52885e</anchor>
      <arglist>(int parameterIndex)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual String</type>
      <name>getParameterID</name>
      <anchorfile>classAudioProcessor.html</anchorfile>
      <anchor>aa33fdce9c882b67dff4ab2cf1bfc3273</anchor>
      <arglist>(int index)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual float</type>
      <name>getParameter</name>
      <anchorfile>classAudioProcessor.html</anchorfile>
      <anchor>aa4b04d76a2d80c08f0d762f0fa6b715c</anchor>
      <arglist>(int parameterIndex)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual String</type>
      <name>getParameterName</name>
      <anchorfile>classAudioProcessor.html</anchorfile>
      <anchor>a443c3bc95aaac71abe669bb6b5833b7f</anchor>
      <arglist>(int parameterIndex, int maximumStringLength)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const String</type>
      <name>getParameterText</name>
      <anchorfile>classAudioProcessor.html</anchorfile>
      <anchor>adfc2bb4a053ea9997dadbb681a636cb0</anchor>
      <arglist>(int parameterIndex)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual String</type>
      <name>getParameterText</name>
      <anchorfile>classAudioProcessor.html</anchorfile>
      <anchor>a51062b0669b31253a99a36615b68c5f1</anchor>
      <arglist>(int parameterIndex, int maximumStringLength)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getParameterNumSteps</name>
      <anchorfile>classAudioProcessor.html</anchorfile>
      <anchor>a0a07b5efc95b686b57256b16c22eec7f</anchor>
      <arglist>(int parameterIndex)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual float</type>
      <name>getParameterDefaultValue</name>
      <anchorfile>classAudioProcessor.html</anchorfile>
      <anchor>a727cc79e6efb14222e91e65f3ebc5e91</anchor>
      <arglist>(int parameterIndex)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual String</type>
      <name>getParameterLabel</name>
      <anchorfile>classAudioProcessor.html</anchorfile>
      <anchor>aeb6c777ad229e3415314d3f66efba7b4</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isParameterOrientationInverted</name>
      <anchorfile>classAudioProcessor.html</anchorfile>
      <anchor>a16cfd3c20c0d6a63b40e3bdf27d7588c</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setParameter</name>
      <anchorfile>classAudioProcessor.html</anchorfile>
      <anchor>adafe6e16f7ae33645dbbafcb21014e50</anchor>
      <arglist>(int parameterIndex, float newValue)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setParameterNotifyingHost</name>
      <anchorfile>classAudioProcessor.html</anchorfile>
      <anchor>ab09a26934acb4d7fe3f71448aeb80f18</anchor>
      <arglist>(int parameterIndex, float newValue)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isParameterAutomatable</name>
      <anchorfile>classAudioProcessor.html</anchorfile>
      <anchor>a854a99d8216288d7518024828398f74b</anchor>
      <arglist>(int parameterIndex) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isMetaParameter</name>
      <anchorfile>classAudioProcessor.html</anchorfile>
      <anchor>a525c28ae5c579beaf0008cbf09d490c7</anchor>
      <arglist>(int parameterIndex) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual AudioProcessorParameter::Category</type>
      <name>getParameterCategory</name>
      <anchorfile>classAudioProcessor.html</anchorfile>
      <anchor>a6abc6da40c846bd5c7a695ab5103ee0b</anchor>
      <arglist>(int parameterIndex) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>beginParameterChangeGesture</name>
      <anchorfile>classAudioProcessor.html</anchorfile>
      <anchor>ad082383dc1b0e4f648bb4edaf61cf385</anchor>
      <arglist>(int parameterIndex)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>endParameterChangeGesture</name>
      <anchorfile>classAudioProcessor.html</anchorfile>
      <anchor>a4205962ffb34852cfc1ef1476050dd68</anchor>
      <arglist>(int parameterIndex)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateHostDisplay</name>
      <anchorfile>classAudioProcessor.html</anchorfile>
      <anchor>ab53b860c69380cb34e466b60a3bce3f2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addParameter</name>
      <anchorfile>classAudioProcessor.html</anchorfile>
      <anchor>ae686ddf13e3e8f6008cb7b4c41704aba</anchor>
      <arglist>(AudioProcessorParameter *)</arglist>
    </member>
    <member kind="function">
      <type>const OwnedArray&lt; AudioProcessorParameter &gt; &amp;</type>
      <name>getParameters</name>
      <anchorfile>classAudioProcessor.html</anchorfile>
      <anchor>a1cc35c3439f44d55ca068d1144a3bea7</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getNumPrograms</name>
      <anchorfile>classAudioProcessor.html</anchorfile>
      <anchor>a510123768a99f32ff4a23d0458e15e13</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getCurrentProgram</name>
      <anchorfile>classAudioProcessor.html</anchorfile>
      <anchor>ac111282810f1e9ddb057e1267fa0bd79</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setCurrentProgram</name>
      <anchorfile>classAudioProcessor.html</anchorfile>
      <anchor>aafe9fab0a94b6bb23cecdbb67851f206</anchor>
      <arglist>(int index)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const String</type>
      <name>getProgramName</name>
      <anchorfile>classAudioProcessor.html</anchorfile>
      <anchor>af0facfc9ed31fb3d2948ceac7ae89d87</anchor>
      <arglist>(int index)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>changeProgramName</name>
      <anchorfile>classAudioProcessor.html</anchorfile>
      <anchor>accd5bd7b594fbc1a385f7a8b31c7b3f3</anchor>
      <arglist>(int index, const String &amp;newName)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>getStateInformation</name>
      <anchorfile>classAudioProcessor.html</anchorfile>
      <anchor>a5d79591b367a7c0516e4ef4d1d6c32b2</anchor>
      <arglist>(juce::MemoryBlock &amp;destData)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getCurrentProgramStateInformation</name>
      <anchorfile>classAudioProcessor.html</anchorfile>
      <anchor>aa8f9774ef205e4b19174f2de7664928f</anchor>
      <arglist>(juce::MemoryBlock &amp;destData)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setStateInformation</name>
      <anchorfile>classAudioProcessor.html</anchorfile>
      <anchor>a6154837fea67c594a9b35c487894df27</anchor>
      <arglist>(const void *data, int sizeInBytes)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCurrentProgramStateInformation</name>
      <anchorfile>classAudioProcessor.html</anchorfile>
      <anchor>ade2c2df3606218b0f9fa1a3a376440a5</anchor>
      <arglist>(const void *data, int sizeInBytes)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>numChannelsChanged</name>
      <anchorfile>classAudioProcessor.html</anchorfile>
      <anchor>adb83690e0bdce0710f54b28c020e8e04</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>numBusesChanged</name>
      <anchorfile>classAudioProcessor.html</anchorfile>
      <anchor>acdca26c33ae737c3a824b455f136a23d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>processorLayoutsChanged</name>
      <anchorfile>classAudioProcessor.html</anchorfile>
      <anchor>a5a4ff4840a159939742b2a0f294ad28d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addListener</name>
      <anchorfile>classAudioProcessor.html</anchorfile>
      <anchor>a3b328ab99ffc5e04cc470e04ce3c11f4</anchor>
      <arglist>(AudioProcessorListener *newListener)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>removeListener</name>
      <anchorfile>classAudioProcessor.html</anchorfile>
      <anchor>a0bb6996a1f0710330b0a3e426fb22866</anchor>
      <arglist>(AudioProcessorListener *listenerToRemove)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setPlayHead</name>
      <anchorfile>classAudioProcessor.html</anchorfile>
      <anchor>a9015f8476c07b173e3c9919b3036339d</anchor>
      <arglist>(AudioPlayHead *newPlayHead)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPlayConfigDetails</name>
      <anchorfile>classAudioProcessor.html</anchorfile>
      <anchor>a6364f81b66aaa3d772889c78cdf60b46</anchor>
      <arglist>(int numIns, int numOuts, double sampleRate, int blockSize)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRateAndBufferSizeDetails</name>
      <anchorfile>classAudioProcessor.html</anchorfile>
      <anchor>a562ba6fd88562fd42eddee5b95da489d</anchor>
      <arglist>(double sampleRate, int blockSize) noexcept</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int32</type>
      <name>getAAXPluginIDForMainBusConfig</name>
      <anchorfile>classAudioProcessor.html</anchorfile>
      <anchor>a3e4579d11fffe39b46f618a69b46f300</anchor>
      <arglist>(const AudioChannelSet &amp;mainInputLayout, const AudioChannelSet &amp;mainOutputLayout, bool idForAudioSuite) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>editorBeingDeleted</name>
      <anchorfile>classAudioProcessor.html</anchorfile>
      <anchor>a78f4b83d4f5c8625cf1df93288142642</anchor>
      <arglist>(AudioProcessorEditor *) noexcept</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>AudioPluginInstance</name>
      <anchorfile>classAudioPluginInstance.html</anchorfile>
      <anchor>a728172a1e902b7ab16c5d2b580a93e79</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>AudioPluginInstance</name>
      <anchorfile>classAudioPluginInstance.html</anchorfile>
      <anchor>a3e58c288ac43487c0991797851b0fa1a</anchor>
      <arglist>(const BusesProperties &amp;ioLayouts)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>AudioPluginInstance</name>
      <anchorfile>classAudioPluginInstance.html</anchorfile>
      <anchor>a60023436b24dbc061ed979e510bff673</anchor>
      <arglist>(const short channelLayoutList[numLayouts][2])</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>AudioProcessor</name>
      <anchorfile>classAudioProcessor.html</anchorfile>
      <anchor>a8602919358f1bf8799abd0c179c5e03b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>AudioProcessor</name>
      <anchorfile>classAudioProcessor.html</anchorfile>
      <anchor>acf616254f1566d60d2a46d4208220b20</anchor>
      <arglist>(const BusesProperties &amp;ioLayouts)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>AudioProcessor</name>
      <anchorfile>classAudioProcessor.html</anchorfile>
      <anchor>a30360ac3f4fb52e993836efdb1da7b1d</anchor>
      <arglist>(const std::initializer_list&lt; const short[2]&gt; &amp;channelLayoutList)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>isBusesLayoutSupported</name>
      <anchorfile>classAudioProcessor.html</anchorfile>
      <anchor>a2eee96c0d18913e18fb353bf868bcad2</anchor>
      <arglist>(const BusesLayout &amp;) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>canApplyBusesLayout</name>
      <anchorfile>classAudioProcessor.html</anchorfile>
      <anchor>a2976f881dd3ae2f96f70cf821b0d589b</anchor>
      <arglist>(const BusesLayout &amp;layouts) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>canApplyBusCountChange</name>
      <anchorfile>classAudioProcessor.html</anchorfile>
      <anchor>a4dd0f8e893a9c295cd2b5eea2d92a6c5</anchor>
      <arglist>(bool isInput, bool isAddingBuses, BusProperties &amp;outNewBusProperties)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendParamChangeMessageToListeners</name>
      <anchorfile>classAudioProcessor.html</anchorfile>
      <anchor>a2e0e6efdce297e7ae7a9a23152c55165</anchor>
      <arglist>(int parameterIndex, float newValue)</arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>ProcessingPrecision</name>
      <anchorfile>classAudioProcessor.html</anchorfile>
      <anchor>a212c3670b59976559237cbf629af275f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>singlePrecision</name>
      <anchorfile>classAudioProcessor.html</anchorfile>
      <anchor>a212c3670b59976559237cbf629af275fabe443816497d7aa69a1cb30a0095dd22</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>doublePrecision</name>
      <anchorfile>classAudioProcessor.html</anchorfile>
      <anchor>a212c3670b59976559237cbf629af275fa9dd64cbb15d8e16c897da5e47189d20c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>WrapperType</name>
      <anchorfile>classAudioProcessor.html</anchorfile>
      <anchor>a2e1b21b8831ac529965abffc96223dcf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>wrapperType_Undefined</name>
      <anchorfile>classAudioProcessor.html</anchorfile>
      <anchor>a2e1b21b8831ac529965abffc96223dcfaeb155b5982c79f733c4bee215678fc97</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>wrapperType_VST</name>
      <anchorfile>classAudioProcessor.html</anchorfile>
      <anchor>a2e1b21b8831ac529965abffc96223dcfa5313891416ab9b1b2ae5db6b673e4061</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>wrapperType_VST3</name>
      <anchorfile>classAudioProcessor.html</anchorfile>
      <anchor>a2e1b21b8831ac529965abffc96223dcfac12c7f266e9f234367307597b332fa10</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>wrapperType_AudioUnit</name>
      <anchorfile>classAudioProcessor.html</anchorfile>
      <anchor>a2e1b21b8831ac529965abffc96223dcfa3942e92d75c1edf6096405a400a12100</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>wrapperType_AudioUnitv3</name>
      <anchorfile>classAudioProcessor.html</anchorfile>
      <anchor>a2e1b21b8831ac529965abffc96223dcfa24c1746c07b93d66ef9a906285c3d782</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>wrapperType_RTAS</name>
      <anchorfile>classAudioProcessor.html</anchorfile>
      <anchor>a2e1b21b8831ac529965abffc96223dcfa0d1334a563a3764a0a026703fec73ff6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>wrapperType_AAX</name>
      <anchorfile>classAudioProcessor.html</anchorfile>
      <anchor>a2e1b21b8831ac529965abffc96223dcfa9a43d586134e1bf0ceacdd2de2defbb3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>wrapperType_Standalone</name>
      <anchorfile>classAudioProcessor.html</anchorfile>
      <anchor>a2e1b21b8831ac529965abffc96223dcfaad6832e63028f039a818f3eed72cf06f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>containsLayout</name>
      <anchorfile>classAudioProcessor.html</anchorfile>
      <anchor>a825862aa6d73086c8c088ec18ee6999e</anchor>
      <arglist>(const BusesLayout &amp;layouts, const std::initializer_list&lt; const short[2]&gt; &amp;channelLayoutList)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>containsLayout</name>
      <anchorfile>classAudioProcessor.html</anchorfile>
      <anchor>ade9d054d26452735f77401b05a76ce0c</anchor>
      <arglist>(const BusesLayout &amp;layouts, const short(&amp;channelLayoutList)[numLayouts][2])</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>getDefaultNumParameterSteps</name>
      <anchorfile>classAudioProcessor.html</anchorfile>
      <anchor>a39a78126e8b9abb65e4198a02ca41b7d</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>copyXmlToBinary</name>
      <anchorfile>classAudioProcessor.html</anchorfile>
      <anchor>a6d0c1c945bebbc967d187c0f08b42c4b</anchor>
      <arglist>(const XmlElement &amp;xml, juce::MemoryBlock &amp;destData)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static XmlElement *</type>
      <name>getXmlFromBinary</name>
      <anchorfile>classAudioProcessor.html</anchorfile>
      <anchor>af314980ac708cb8802b48317037e5b5b</anchor>
      <arglist>(const void *data, int sizeInBytes)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void JUCE_CALLTYPE</type>
      <name>setTypeOfNextNewPlugin</name>
      <anchorfile>classAudioProcessor.html</anchorfile>
      <anchor>a2a406ae17bd699349d5da8510aa8af1b</anchor>
      <arglist>(WrapperType)</arglist>
    </member>
    <member kind="variable">
      <type>WrapperType</type>
      <name>wrapperType</name>
      <anchorfile>classAudioProcessor.html</anchorfile>
      <anchor>a7bf4a5cf41e84de51aab7ccb75d1f897</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>AudioPlayHead *</type>
      <name>playHead</name>
      <anchorfile>classAudioProcessor.html</anchorfile>
      <anchor>a78d1c3e1cabecff818b93de44891d973</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AudioProcessor</name>
    <filename>classAudioProcessor.html</filename>
    <class kind="class">AudioProcessor::Bus</class>
    <class kind="struct">AudioProcessor::BusesLayout</class>
    <class kind="struct">AudioProcessor::BusesProperties</class>
    <class kind="struct">AudioProcessor::BusProperties</class>
  </compound>
  <compound kind="class">
    <name>AudioProcessor::Bus</name>
    <filename>classAudioProcessor_1_1Bus.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>isInput</name>
      <anchorfile>classAudioProcessor_1_1Bus.html</anchorfile>
      <anchor>a99884e38bb15ac207964deacc29d9c56</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getBusIndex</name>
      <anchorfile>classAudioProcessor_1_1Bus.html</anchorfile>
      <anchor>aa4aae2c0527a0390e6286c0e9a981e46</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isMain</name>
      <anchorfile>classAudioProcessor_1_1Bus.html</anchorfile>
      <anchor>ae28be30fbd772e9af64f5eec8f029211</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const String &amp;</type>
      <name>getName</name>
      <anchorfile>classAudioProcessor_1_1Bus.html</anchorfile>
      <anchor>a60b8dbfd65d66a65799f951fb6f51328</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const AudioChannelSet &amp;</type>
      <name>getDefaultLayout</name>
      <anchorfile>classAudioProcessor_1_1Bus.html</anchorfile>
      <anchor>a27048e646ca587776e361c74536f3197</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const AudioChannelSet &amp;</type>
      <name>getCurrentLayout</name>
      <anchorfile>classAudioProcessor_1_1Bus.html</anchorfile>
      <anchor>ad21ba0e63f9936f0dc93cc6540d3cae3</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const AudioChannelSet &amp;</type>
      <name>getLastEnabledLayout</name>
      <anchorfile>classAudioProcessor_1_1Bus.html</anchorfile>
      <anchor>aafb02eb8790c154f372dc4a91d2693de</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setCurrentLayout</name>
      <anchorfile>classAudioProcessor_1_1Bus.html</anchorfile>
      <anchor>a11591551fb051724a4eafc47068be6d7</anchor>
      <arglist>(const AudioChannelSet &amp;layout)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setCurrentLayoutWithoutEnabling</name>
      <anchorfile>classAudioProcessor_1_1Bus.html</anchorfile>
      <anchor>a9858f44335c55c6a58b9bfe541c0d9ca</anchor>
      <arglist>(const AudioChannelSet &amp;layout)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumberOfChannels</name>
      <anchorfile>classAudioProcessor_1_1Bus.html</anchorfile>
      <anchor>a45f459543397fae15edbd7c1488323b3</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setNumberOfChannels</name>
      <anchorfile>classAudioProcessor_1_1Bus.html</anchorfile>
      <anchor>a994380c6bfe870f7212899298d2bf22a</anchor>
      <arglist>(int channels)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isLayoutSupported</name>
      <anchorfile>classAudioProcessor_1_1Bus.html</anchorfile>
      <anchor>acb7f2e03141c1d880e131319d7cf6853</anchor>
      <arglist>(const AudioChannelSet &amp;set, BusesLayout *currentLayout=nullptr) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNumberOfChannelsSupported</name>
      <anchorfile>classAudioProcessor_1_1Bus.html</anchorfile>
      <anchor>acb3c103daadf6fa83eb25961f3347d11</anchor>
      <arglist>(int channels) const </arglist>
    </member>
    <member kind="function">
      <type>AudioChannelSet</type>
      <name>supportedLayoutWithChannels</name>
      <anchorfile>classAudioProcessor_1_1Bus.html</anchorfile>
      <anchor>a1272fcafe09a0dc0139b7d4705f211dd</anchor>
      <arglist>(int channels) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getMaxSupportedChannels</name>
      <anchorfile>classAudioProcessor_1_1Bus.html</anchorfile>
      <anchor>a0afb47875959edfd3f2c5120c0c63f2c</anchor>
      <arglist>(int limit=AudioChannelSet::maxChannelsOfNamedLayout) const </arglist>
    </member>
    <member kind="function">
      <type>BusesLayout</type>
      <name>getBusesLayoutForLayoutChangeOfBus</name>
      <anchorfile>classAudioProcessor_1_1Bus.html</anchorfile>
      <anchor>a0b84a02ba9e358a7bff8282973c7da71</anchor>
      <arglist>(const AudioChannelSet &amp;set) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEnabled</name>
      <anchorfile>classAudioProcessor_1_1Bus.html</anchorfile>
      <anchor>a2f6bf1c920a6e9ae4c41279b63d24567</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>enable</name>
      <anchorfile>classAudioProcessor_1_1Bus.html</anchorfile>
      <anchor>a8a148a2e2f175a7a266ca67319fba000</anchor>
      <arglist>(bool shouldEnable=true)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEnabledByDefault</name>
      <anchorfile>classAudioProcessor_1_1Bus.html</anchorfile>
      <anchor>aab5c552903dd9e6856f7dfd3eee1fab2</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getChannelIndexInProcessBlockBuffer</name>
      <anchorfile>classAudioProcessor_1_1Bus.html</anchorfile>
      <anchor>a8b28c4022d732fb72a9f0d4f10b7ed0e</anchor>
      <arglist>(int channelIndex) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>AudioBuffer&lt; FloatType &gt;</type>
      <name>getBusBuffer</name>
      <anchorfile>classAudioProcessor_1_1Bus.html</anchorfile>
      <anchor>acc532c9108dcb63082aa08d570c8121d</anchor>
      <arglist>(AudioBuffer&lt; FloatType &gt; &amp;processBlockBuffer) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>AudioProcessor::BusesLayout</name>
    <filename>structAudioProcessor_1_1BusesLayout.html</filename>
    <member kind="function">
      <type>int</type>
      <name>getNumChannels</name>
      <anchorfile>structAudioProcessor_1_1BusesLayout.html</anchorfile>
      <anchor>a9610324ff03e26720dcc7cbed75a3611</anchor>
      <arglist>(bool isInput, int busIndex) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>AudioChannelSet &amp;</type>
      <name>getChannelSet</name>
      <anchorfile>structAudioProcessor_1_1BusesLayout.html</anchorfile>
      <anchor>a36e2cd1756e0aaa47bca5f3f16df6d4a</anchor>
      <arglist>(bool isInput, int busIndex)</arglist>
    </member>
    <member kind="function">
      <type>AudioChannelSet</type>
      <name>getChannelSet</name>
      <anchorfile>structAudioProcessor_1_1BusesLayout.html</anchorfile>
      <anchor>a339aa2f75e7df251a7417577c0cb07c3</anchor>
      <arglist>(bool isInput, int busIndex) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>AudioChannelSet</type>
      <name>getMainInputChannelSet</name>
      <anchorfile>structAudioProcessor_1_1BusesLayout.html</anchorfile>
      <anchor>a8df1db6f8ef0f07d555d70f27bc4ee2f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>AudioChannelSet</type>
      <name>getMainOutputChannelSet</name>
      <anchorfile>structAudioProcessor_1_1BusesLayout.html</anchorfile>
      <anchor>a9bdf40341da9535884c350e1c1f26029</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getMainInputChannels</name>
      <anchorfile>structAudioProcessor_1_1BusesLayout.html</anchorfile>
      <anchor>acf34047071c6e6a7a68df13134838867</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getMainOutputChannels</name>
      <anchorfile>structAudioProcessor_1_1BusesLayout.html</anchorfile>
      <anchor>a86b00685a2ed1eea2f200b72682681c0</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>structAudioProcessor_1_1BusesLayout.html</anchorfile>
      <anchor>af7c1cc52296f27efdb64e5bdc39c5c2f</anchor>
      <arglist>(const BusesLayout &amp;other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>structAudioProcessor_1_1BusesLayout.html</anchorfile>
      <anchor>a3e26459889a0392548dad5e847a54d99</anchor>
      <arglist>(const BusesLayout &amp;other) const noexcept</arglist>
    </member>
    <member kind="variable">
      <type>Array&lt; AudioChannelSet &gt;</type>
      <name>inputBuses</name>
      <anchorfile>structAudioProcessor_1_1BusesLayout.html</anchorfile>
      <anchor>a73c26adffea9b970150aa2c204155db6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Array&lt; AudioChannelSet &gt;</type>
      <name>outputBuses</name>
      <anchorfile>structAudioProcessor_1_1BusesLayout.html</anchorfile>
      <anchor>aeb39a2b0609cdecfa2b2e7075724acf5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>AudioProcessor::BusesProperties</name>
    <filename>structAudioProcessor_1_1BusesProperties.html</filename>
    <member kind="function">
      <type>void</type>
      <name>addBus</name>
      <anchorfile>structAudioProcessor_1_1BusesProperties.html</anchorfile>
      <anchor>a234f2c3949f1d569d166c195babbfd93</anchor>
      <arglist>(bool isInput, const String &amp;name, const AudioChannelSet &amp;defaultLayout, bool isActivatedByDefault=true)</arglist>
    </member>
    <member kind="function">
      <type>BusesProperties</type>
      <name>withInput</name>
      <anchorfile>structAudioProcessor_1_1BusesProperties.html</anchorfile>
      <anchor>a70c427e169c3e6bef1eac27408814304</anchor>
      <arglist>(const String &amp;name, const AudioChannelSet &amp;defaultLayout, bool isActivatedByDefault=true) const </arglist>
    </member>
    <member kind="function">
      <type>BusesProperties</type>
      <name>withOutput</name>
      <anchorfile>structAudioProcessor_1_1BusesProperties.html</anchorfile>
      <anchor>a9c0d98bbeb798355c242cc9ea4e006c2</anchor>
      <arglist>(const String &amp;name, const AudioChannelSet &amp;defaultLayout, bool isActivatedByDefault=true) const </arglist>
    </member>
    <member kind="variable">
      <type>Array&lt; BusProperties &gt;</type>
      <name>inputLayouts</name>
      <anchorfile>structAudioProcessor_1_1BusesProperties.html</anchorfile>
      <anchor>a97d88a6caefa14f20e7572eea844575b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Array&lt; BusProperties &gt;</type>
      <name>outputLayouts</name>
      <anchorfile>structAudioProcessor_1_1BusesProperties.html</anchorfile>
      <anchor>ad62c87a7502481e0b70cc7cebfd9b04d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>AudioProcessor::BusProperties</name>
    <filename>structAudioProcessor_1_1BusProperties.html</filename>
    <member kind="variable">
      <type>String</type>
      <name>busName</name>
      <anchorfile>structAudioProcessor_1_1BusProperties.html</anchorfile>
      <anchor>a43722826739bc1bc65598fa0b7ce77a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>AudioChannelSet</type>
      <name>defaultLayout</name>
      <anchorfile>structAudioProcessor_1_1BusProperties.html</anchorfile>
      <anchor>a72866039f0acaecb38d84a43f74fe95d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>isActivatedByDefault</name>
      <anchorfile>structAudioProcessor_1_1BusProperties.html</anchorfile>
      <anchor>a9f1acd435666c510282b378fc805d199</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AudioProcessorEditor</name>
    <filename>classAudioProcessorEditor.html</filename>
    <base>Component</base>
    <class kind="struct">AudioProcessorEditor::ParameterControlHighlightInfo</class>
    <member kind="function">
      <type></type>
      <name>~AudioProcessorEditor</name>
      <anchorfile>classAudioProcessorEditor.html</anchorfile>
      <anchor>a097320aae2fae460cfd0c01fc8e9ccb0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>AudioProcessor *</type>
      <name>getAudioProcessor</name>
      <anchorfile>classAudioProcessorEditor.html</anchorfile>
      <anchor>a4673c0d44d3c88bb0e8d1460a2224e3f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setControlHighlight</name>
      <anchorfile>classAudioProcessorEditor.html</anchorfile>
      <anchor>a069f6bb43b3f613ac952cbb04e0b443f</anchor>
      <arglist>(ParameterControlHighlightInfo)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getControlParameterIndex</name>
      <anchorfile>classAudioProcessorEditor.html</anchorfile>
      <anchor>a5f1501ac7caa5a12cab2d05bd5d020fe</anchor>
      <arglist>(Component &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setResizable</name>
      <anchorfile>classAudioProcessorEditor.html</anchorfile>
      <anchor>a3d36f7385146270fc752ce17418f115a</anchor>
      <arglist>(bool allowHostToResize, bool useBottomRightCornerResizer)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isResizable</name>
      <anchorfile>classAudioProcessorEditor.html</anchorfile>
      <anchor>a9092ff3e3e5090dd37f0b67d4235a637</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setResizeLimits</name>
      <anchorfile>classAudioProcessorEditor.html</anchorfile>
      <anchor>a4f52a3b54d9a54e9b0b72dffc5030426</anchor>
      <arglist>(int newMinimumWidth, int newMinimumHeight, int newMaximumWidth, int newMaximumHeight) noexcept</arglist>
    </member>
    <member kind="function">
      <type>ComponentBoundsConstrainer *</type>
      <name>getConstrainer</name>
      <anchorfile>classAudioProcessorEditor.html</anchorfile>
      <anchor>a6af94d6a975ea5d8722e81bacf0bf85d</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setConstrainer</name>
      <anchorfile>classAudioProcessorEditor.html</anchorfile>
      <anchor>a3a620a4659312f2456692c44c4ec999b</anchor>
      <arglist>(ComponentBoundsConstrainer *newConstrainer)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBoundsConstrained</name>
      <anchorfile>classAudioProcessorEditor.html</anchorfile>
      <anchor>a328459f2e3e6c4468250d22e86d89ff2</anchor>
      <arglist>(Rectangle&lt; int &gt; newBounds)</arglist>
    </member>
    <member kind="variable">
      <type>AudioProcessor &amp;</type>
      <name>processor</name>
      <anchorfile>classAudioProcessorEditor.html</anchorfile>
      <anchor>a96811cb3a8371de07b685fa10cf2d48e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ScopedPointer&lt; ResizableCornerComponent &gt;</type>
      <name>resizableCorner</name>
      <anchorfile>classAudioProcessorEditor.html</anchorfile>
      <anchor>a4536ffdc9611050e4f31ce4751e80b3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>AudioProcessorEditor</name>
      <anchorfile>classAudioProcessorEditor.html</anchorfile>
      <anchor>a213530cf58bc4e47354ed1a65520adbb</anchor>
      <arglist>(AudioProcessor &amp;) noexcept</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>AudioProcessorEditor</name>
      <anchorfile>classAudioProcessorEditor.html</anchorfile>
      <anchor>af4d621c9ed4398b3c55eb416dc9a569e</anchor>
      <arglist>(AudioProcessor *) noexcept</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>AudioProcessorEditor::ParameterControlHighlightInfo</name>
    <filename>structAudioProcessorEditor_1_1ParameterControlHighlightInfo.html</filename>
    <member kind="variable">
      <type>int</type>
      <name>parameterIndex</name>
      <anchorfile>structAudioProcessorEditor_1_1ParameterControlHighlightInfo.html</anchorfile>
      <anchor>adf1655668910dd66ab04d8c2bafeb4c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>isHighlighted</name>
      <anchorfile>structAudioProcessorEditor_1_1ParameterControlHighlightInfo.html</anchorfile>
      <anchor>a7f442332239058eabeaeaa73be17889a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Colour</type>
      <name>suggestedColour</name>
      <anchorfile>structAudioProcessorEditor_1_1ParameterControlHighlightInfo.html</anchorfile>
      <anchor>ae06159d036b60b93709ac4a5553af0ba</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AudioProcessorGraph</name>
    <filename>classAudioProcessorGraph.html</filename>
    <base>AudioProcessor</base>
    <base protection="private">AsyncUpdater</base>
    <class kind="class">AudioProcessorGraph::AudioGraphIOProcessor</class>
    <class kind="struct">AudioProcessorGraph::Connection</class>
    <class kind="class">AudioProcessorGraph::Node</class>
    <member kind="function">
      <type></type>
      <name>AudioProcessorGraph</name>
      <anchorfile>classAudioProcessorGraph.html</anchorfile>
      <anchor>a8d33e2e949c97a1a37b47e39bbe43f7a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~AudioProcessorGraph</name>
      <anchorfile>classAudioProcessorGraph.html</anchorfile>
      <anchor>acd8a5defb48ec3344ad412e489aa58fb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classAudioProcessorGraph.html</anchorfile>
      <anchor>a13486fcb6b0a740331b0cecb3d22109f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumNodes</name>
      <anchorfile>classAudioProcessorGraph.html</anchorfile>
      <anchor>ac54590c31a8423051aef75cc3f1edc6f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Node *</type>
      <name>getNode</name>
      <anchorfile>classAudioProcessorGraph.html</anchorfile>
      <anchor>ac056f909144eda97eafe417423f08e30</anchor>
      <arglist>(const int index) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Node *</type>
      <name>getNodeForId</name>
      <anchorfile>classAudioProcessorGraph.html</anchorfile>
      <anchor>ab2cf79e6540bb6a95df2c6e8fbe14b2f</anchor>
      <arglist>(const uint32 nodeId) const </arglist>
    </member>
    <member kind="function">
      <type>Node *</type>
      <name>addNode</name>
      <anchorfile>classAudioProcessorGraph.html</anchorfile>
      <anchor>a6a75a45b9daea9e424ea327b924e4bf9</anchor>
      <arglist>(AudioProcessor *newProcessor, uint32 nodeId=0)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>removeNode</name>
      <anchorfile>classAudioProcessorGraph.html</anchorfile>
      <anchor>a35e6dcbafebe8ac84db3dad6983aad6c</anchor>
      <arglist>(uint32 nodeId)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>removeNode</name>
      <anchorfile>classAudioProcessorGraph.html</anchorfile>
      <anchor>a5161ef424f00408c904f4cc09ab25e44</anchor>
      <arglist>(Node *node)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumConnections</name>
      <anchorfile>classAudioProcessorGraph.html</anchorfile>
      <anchor>a5ec854f3964347bcc429bed74b1c0143</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Connection *</type>
      <name>getConnection</name>
      <anchorfile>classAudioProcessorGraph.html</anchorfile>
      <anchor>abb71ccd0af51ad8c64df980836f53856</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function">
      <type>const Connection *</type>
      <name>getConnectionBetween</name>
      <anchorfile>classAudioProcessorGraph.html</anchorfile>
      <anchor>aecf825019c1bf0256105fc6c8ef130e7</anchor>
      <arglist>(uint32 sourceNodeId, int sourceChannelIndex, uint32 destNodeId, int destChannelIndex) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isConnected</name>
      <anchorfile>classAudioProcessorGraph.html</anchorfile>
      <anchor>a9f52ec181d8aabf723170d69b4bf4d7d</anchor>
      <arglist>(uint32 possibleSourceNodeId, uint32 possibleDestNodeId) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>canConnect</name>
      <anchorfile>classAudioProcessorGraph.html</anchorfile>
      <anchor>a1e196b127080aa6cb3f3f395c2a9366f</anchor>
      <arglist>(uint32 sourceNodeId, int sourceChannelIndex, uint32 destNodeId, int destChannelIndex) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addConnection</name>
      <anchorfile>classAudioProcessorGraph.html</anchorfile>
      <anchor>adde28972b8d725a3c9c7af43bbe0b569</anchor>
      <arglist>(uint32 sourceNodeId, int sourceChannelIndex, uint32 destNodeId, int destChannelIndex)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeConnection</name>
      <anchorfile>classAudioProcessorGraph.html</anchorfile>
      <anchor>a59e7b99abf5a7a515e9659e2fbfd3cb5</anchor>
      <arglist>(int index)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>removeConnection</name>
      <anchorfile>classAudioProcessorGraph.html</anchorfile>
      <anchor>a24cb1c816cb611f1a22978976f50aed0</anchor>
      <arglist>(uint32 sourceNodeId, int sourceChannelIndex, uint32 destNodeId, int destChannelIndex)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>disconnectNode</name>
      <anchorfile>classAudioProcessorGraph.html</anchorfile>
      <anchor>a8fb912ad3add171eb08c6e58a66e1687</anchor>
      <arglist>(uint32 nodeId)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isConnectionLegal</name>
      <anchorfile>classAudioProcessorGraph.html</anchorfile>
      <anchor>a29eb5ea53c60de51a5ac7134804ed8b6</anchor>
      <arglist>(const Connection *connection) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>removeIllegalConnections</name>
      <anchorfile>classAudioProcessorGraph.html</anchorfile>
      <anchor>a3d025471473ded56797653edd4669220</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const String</type>
      <name>getName</name>
      <anchorfile>classAudioProcessorGraph.html</anchorfile>
      <anchor>a7b5b20e16e5d55fd5eabfc33f60acf72</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>prepareToPlay</name>
      <anchorfile>classAudioProcessorGraph.html</anchorfile>
      <anchor>ae8c62040d60911da0bc0be2cb4bf0b73</anchor>
      <arglist>(double, int) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>releaseResources</name>
      <anchorfile>classAudioProcessorGraph.html</anchorfile>
      <anchor>a74875e2099b8c5a68845d69c8907f96a</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>processBlock</name>
      <anchorfile>classAudioProcessorGraph.html</anchorfile>
      <anchor>a398355e90612416b87e02fa026a1f014</anchor>
      <arglist>(AudioBuffer&lt; float &gt; &amp;, MidiBuffer &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>processBlock</name>
      <anchorfile>classAudioProcessorGraph.html</anchorfile>
      <anchor>a452ddef93059ca44478ae666377ef9c7</anchor>
      <arglist>(AudioBuffer&lt; double &gt; &amp;, MidiBuffer &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>supportsDoublePrecisionProcessing</name>
      <anchorfile>classAudioProcessorGraph.html</anchorfile>
      <anchor>a8feab3ff67b9aac5bb00296189c946a8</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classAudioProcessorGraph.html</anchorfile>
      <anchor>a3ceaedc1c4d645ccc20b22151bedc297</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNonRealtime</name>
      <anchorfile>classAudioProcessorGraph.html</anchorfile>
      <anchor>a4afc3d267dff6778bb0647e6f18836c6</anchor>
      <arglist>(bool) noexceptoverride</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPlayHead</name>
      <anchorfile>classAudioProcessorGraph.html</anchorfile>
      <anchor>a83cd84fdac4a503fe25bc0155bfe9ece</anchor>
      <arglist>(AudioPlayHead *) override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getTailLengthSeconds</name>
      <anchorfile>classAudioProcessorGraph.html</anchorfile>
      <anchor>a8dd74d5bbb00c8d0ae5dbdb074565a7b</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>acceptsMidi</name>
      <anchorfile>classAudioProcessorGraph.html</anchorfile>
      <anchor>a653c9237a655d4c4b1da4be847ebbf43</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>producesMidi</name>
      <anchorfile>classAudioProcessorGraph.html</anchorfile>
      <anchor>a8a69dc67c7fb405699f1c9132f2bbb3d</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasEditor</name>
      <anchorfile>classAudioProcessorGraph.html</anchorfile>
      <anchor>afdb5ca50f8d3ffef636be2b9dbdf08cf</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>AudioProcessorEditor *</type>
      <name>createEditor</name>
      <anchorfile>classAudioProcessorGraph.html</anchorfile>
      <anchor>a8abe19086a1ccc4f6f31894f056bdce8</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumPrograms</name>
      <anchorfile>classAudioProcessorGraph.html</anchorfile>
      <anchor>a242bb9d08d43f9933fa7438f8233fb14</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getCurrentProgram</name>
      <anchorfile>classAudioProcessorGraph.html</anchorfile>
      <anchor>a80e7bec00fa02b22e3cb70dd4b1e5374</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCurrentProgram</name>
      <anchorfile>classAudioProcessorGraph.html</anchorfile>
      <anchor>ae8fbbe8212372bc3fccfc83186fcf321</anchor>
      <arglist>(int) override</arglist>
    </member>
    <member kind="function">
      <type>const String</type>
      <name>getProgramName</name>
      <anchorfile>classAudioProcessorGraph.html</anchorfile>
      <anchor>af552643b26098bdf4a1c0d51156b6182</anchor>
      <arglist>(int) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>changeProgramName</name>
      <anchorfile>classAudioProcessorGraph.html</anchorfile>
      <anchor>a31a6dcb4995a5af32e80f302222db103</anchor>
      <arglist>(int, const String &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getStateInformation</name>
      <anchorfile>classAudioProcessorGraph.html</anchorfile>
      <anchor>ae6957b5e54ca59a628aef5ec564f63d6</anchor>
      <arglist>(juce::MemoryBlock &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStateInformation</name>
      <anchorfile>classAudioProcessorGraph.html</anchorfile>
      <anchor>a84e6d9e7d6ae555020cd21f887cca889</anchor>
      <arglist>(const void *data, int sizeInBytes) override</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>midiChannelIndex</name>
      <anchorfile>classAudioProcessorGraph.html</anchorfile>
      <anchor>acde235cdad97d2bba6dd828ceeb7c4e9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AudioProcessorGraph::AudioGraphIOProcessor</name>
    <filename>classAudioProcessorGraph_1_1AudioGraphIOProcessor.html</filename>
    <base>AudioPluginInstance</base>
    <member kind="enumeration">
      <type></type>
      <name>IODeviceType</name>
      <anchorfile>classAudioProcessorGraph_1_1AudioGraphIOProcessor.html</anchorfile>
      <anchor>a612fff538a6a57529626b4121934761a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>audioInputNode</name>
      <anchorfile>classAudioProcessorGraph_1_1AudioGraphIOProcessor.html</anchorfile>
      <anchor>a612fff538a6a57529626b4121934761aa002564f5df42036b1b8a791d8c3a760d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>audioOutputNode</name>
      <anchorfile>classAudioProcessorGraph_1_1AudioGraphIOProcessor.html</anchorfile>
      <anchor>a612fff538a6a57529626b4121934761aac004122d6a09fdb5bce7fdb2221340f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>midiInputNode</name>
      <anchorfile>classAudioProcessorGraph_1_1AudioGraphIOProcessor.html</anchorfile>
      <anchor>a612fff538a6a57529626b4121934761aa6ba4fa6ffb1f9ca1025fca01a222e000</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>midiOutputNode</name>
      <anchorfile>classAudioProcessorGraph_1_1AudioGraphIOProcessor.html</anchorfile>
      <anchor>a612fff538a6a57529626b4121934761aac88e470585a2a9265dda58a0911b1c0f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>IODeviceType</type>
      <name>getType</name>
      <anchorfile>classAudioProcessorGraph_1_1AudioGraphIOProcessor.html</anchorfile>
      <anchor>a39e96209b6b596ae5d6ee9b05d1c5760</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>AudioProcessorGraph *</type>
      <name>getParentGraph</name>
      <anchorfile>classAudioProcessorGraph_1_1AudioGraphIOProcessor.html</anchorfile>
      <anchor>a74572c4abf4ca06c91a6de0f6825c35c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isInput</name>
      <anchorfile>classAudioProcessorGraph_1_1AudioGraphIOProcessor.html</anchorfile>
      <anchor>a31233f833064a84d01559714c2aead8c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isOutput</name>
      <anchorfile>classAudioProcessorGraph_1_1AudioGraphIOProcessor.html</anchorfile>
      <anchor>ac8b67c5d29cffbf50018d3c8ada83a38</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AudioGraphIOProcessor</name>
      <anchorfile>classAudioProcessorGraph_1_1AudioGraphIOProcessor.html</anchorfile>
      <anchor>a8eb56847dc607a88b1872e3f36b53722</anchor>
      <arglist>(const IODeviceType type)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~AudioGraphIOProcessor</name>
      <anchorfile>classAudioProcessorGraph_1_1AudioGraphIOProcessor.html</anchorfile>
      <anchor>a75d863be80c6fbec07b67cdaf4def49e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const String</type>
      <name>getName</name>
      <anchorfile>classAudioProcessorGraph_1_1AudioGraphIOProcessor.html</anchorfile>
      <anchor>aaf66f184db9cbee38e7fe0162d0d5b66</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fillInPluginDescription</name>
      <anchorfile>classAudioProcessorGraph_1_1AudioGraphIOProcessor.html</anchorfile>
      <anchor>ac77b9b008fd57b3410e97e984ceecf01</anchor>
      <arglist>(PluginDescription &amp;) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>prepareToPlay</name>
      <anchorfile>classAudioProcessorGraph_1_1AudioGraphIOProcessor.html</anchorfile>
      <anchor>a4fbbce95585d7d00387ba6d5a7f37989</anchor>
      <arglist>(double newSampleRate, int estimatedSamplesPerBlock) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>releaseResources</name>
      <anchorfile>classAudioProcessorGraph_1_1AudioGraphIOProcessor.html</anchorfile>
      <anchor>a920975ffb790ec27cd243ababd8e3576</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>processBlock</name>
      <anchorfile>classAudioProcessorGraph_1_1AudioGraphIOProcessor.html</anchorfile>
      <anchor>ae79b4debef5e39306aea4dfd6dff7580</anchor>
      <arglist>(AudioBuffer&lt; float &gt; &amp;, MidiBuffer &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>processBlock</name>
      <anchorfile>classAudioProcessorGraph_1_1AudioGraphIOProcessor.html</anchorfile>
      <anchor>a27cf51705c0cbdf8d9e64d1bde888e36</anchor>
      <arglist>(AudioBuffer&lt; double &gt; &amp;, MidiBuffer &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>supportsDoublePrecisionProcessing</name>
      <anchorfile>classAudioProcessorGraph_1_1AudioGraphIOProcessor.html</anchorfile>
      <anchor>a2b542a902ffb09ac772a175725997e79</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getTailLengthSeconds</name>
      <anchorfile>classAudioProcessorGraph_1_1AudioGraphIOProcessor.html</anchorfile>
      <anchor>a431f57d18030438c4121ce722e155dc3</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>acceptsMidi</name>
      <anchorfile>classAudioProcessorGraph_1_1AudioGraphIOProcessor.html</anchorfile>
      <anchor>a32af37c599689a815ec647ab77a182cb</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>producesMidi</name>
      <anchorfile>classAudioProcessorGraph_1_1AudioGraphIOProcessor.html</anchorfile>
      <anchor>a3f3255bdda7c9e586f8a2de275f9c032</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasEditor</name>
      <anchorfile>classAudioProcessorGraph_1_1AudioGraphIOProcessor.html</anchorfile>
      <anchor>aa0e5fd5f05d014cbb01c0bbfa651abdc</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>AudioProcessorEditor *</type>
      <name>createEditor</name>
      <anchorfile>classAudioProcessorGraph_1_1AudioGraphIOProcessor.html</anchorfile>
      <anchor>a585a4e870a6ef2985f8cd4c84680ae7d</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumPrograms</name>
      <anchorfile>classAudioProcessorGraph_1_1AudioGraphIOProcessor.html</anchorfile>
      <anchor>a1b130b0656fdd1a55af9e6c5b2755e51</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getCurrentProgram</name>
      <anchorfile>classAudioProcessorGraph_1_1AudioGraphIOProcessor.html</anchorfile>
      <anchor>ab1e9c9dc59253cc4729bc73dc134b52a</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCurrentProgram</name>
      <anchorfile>classAudioProcessorGraph_1_1AudioGraphIOProcessor.html</anchorfile>
      <anchor>a6a0bada075ee75bce6e6b3ec00e4a4a7</anchor>
      <arglist>(int) override</arglist>
    </member>
    <member kind="function">
      <type>const String</type>
      <name>getProgramName</name>
      <anchorfile>classAudioProcessorGraph_1_1AudioGraphIOProcessor.html</anchorfile>
      <anchor>a3b7d58ec91183d3a2b5ed68e85681597</anchor>
      <arglist>(int) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>changeProgramName</name>
      <anchorfile>classAudioProcessorGraph_1_1AudioGraphIOProcessor.html</anchorfile>
      <anchor>ad5fc086da661f7e63e9554040b7f41f8</anchor>
      <arglist>(int, const String &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getStateInformation</name>
      <anchorfile>classAudioProcessorGraph_1_1AudioGraphIOProcessor.html</anchorfile>
      <anchor>a7a725b764dda6f324acf2ae2141fc12b</anchor>
      <arglist>(juce::MemoryBlock &amp;destData) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStateInformation</name>
      <anchorfile>classAudioProcessorGraph_1_1AudioGraphIOProcessor.html</anchorfile>
      <anchor>a0a3367144ac4af6e34923d2bdd53a5ab</anchor>
      <arglist>(const void *data, int sizeInBytes) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setParentGraph</name>
      <anchorfile>classAudioProcessorGraph_1_1AudioGraphIOProcessor.html</anchorfile>
      <anchor>a8900c014ee04b186deaa45f809e33d40</anchor>
      <arglist>(AudioProcessorGraph *)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>AudioProcessorGraph::Connection</name>
    <filename>structAudioProcessorGraph_1_1Connection.html</filename>
    <member kind="function">
      <type></type>
      <name>Connection</name>
      <anchorfile>structAudioProcessorGraph_1_1Connection.html</anchorfile>
      <anchor>a44bfc7a094c31cfc8d6016c62ac781f4</anchor>
      <arglist>(uint32 sourceNodeId, int sourceChannelIndex, uint32 destNodeId, int destChannelIndex) noexcept</arglist>
    </member>
    <member kind="variable">
      <type>uint32</type>
      <name>sourceNodeId</name>
      <anchorfile>structAudioProcessorGraph_1_1Connection.html</anchorfile>
      <anchor>aeffe3c3426cd49761f8dbf0e01b8be97</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>sourceChannelIndex</name>
      <anchorfile>structAudioProcessorGraph_1_1Connection.html</anchorfile>
      <anchor>ab65e13dc0013dabb4700e89c4820b179</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32</type>
      <name>destNodeId</name>
      <anchorfile>structAudioProcessorGraph_1_1Connection.html</anchorfile>
      <anchor>a7f1b8d717bcb7f30c1ebc45e553ba20a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>destChannelIndex</name>
      <anchorfile>structAudioProcessorGraph_1_1Connection.html</anchorfile>
      <anchor>a542e23f5e9b746d2b13485545cce791e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AudioProcessorGraph::Node</name>
    <filename>classAudioProcessorGraph_1_1Node.html</filename>
    <base>ReferenceCountedObject</base>
    <member kind="typedef">
      <type>ReferenceCountedObjectPtr&lt; Node &gt;</type>
      <name>Ptr</name>
      <anchorfile>classAudioProcessorGraph_1_1Node.html</anchorfile>
      <anchor>a1cd4fece57dfbe4994e6a52ab7fca74c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>AudioProcessor *</type>
      <name>getProcessor</name>
      <anchorfile>classAudioProcessorGraph_1_1Node.html</anchorfile>
      <anchor>a31cbb08af2e5e2602e2b488194d707f3</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>incReferenceCount</name>
      <anchorfile>classReferenceCountedObject.html</anchorfile>
      <anchor>a878ca594f89f757d29af5a42ee51161f</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>decReferenceCount</name>
      <anchorfile>classReferenceCountedObject.html</anchorfile>
      <anchor>a523f06d996130f24b36996b28b83d802</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>decReferenceCountWithoutDeleting</name>
      <anchorfile>classReferenceCountedObject.html</anchorfile>
      <anchor>a2355316960a6bf2e9691fded43249254</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getReferenceCount</name>
      <anchorfile>classReferenceCountedObject.html</anchorfile>
      <anchor>a0111caf12d101fc74abd832d44fbfa4f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="variable">
      <type>const uint32</type>
      <name>nodeId</name>
      <anchorfile>classAudioProcessorGraph_1_1Node.html</anchorfile>
      <anchor>a48f9b1360b965f9d0c124b690a50b0b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>NamedValueSet</type>
      <name>properties</name>
      <anchorfile>classAudioProcessorGraph_1_1Node.html</anchorfile>
      <anchor>afc706ebfb3beddad1c5bc16bc7fa2a2e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ReferenceCountedObject</name>
      <anchorfile>classReferenceCountedObject.html</anchorfile>
      <anchor>a86c1a0791cb6e98e63f7c1f7812c6eb5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~ReferenceCountedObject</name>
      <anchorfile>classReferenceCountedObject.html</anchorfile>
      <anchor>a7ed87d7f91e5ae51c620947c61291375</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>resetReferenceCount</name>
      <anchorfile>classReferenceCountedObject.html</anchorfile>
      <anchor>a9bbeeab431755e2be8ff09dfe9ea4c4d</anchor>
      <arglist>() noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AudioProcessorListener</name>
    <filename>classAudioProcessorListener.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~AudioProcessorListener</name>
      <anchorfile>classAudioProcessorListener.html</anchorfile>
      <anchor>a255083443e5612f75ae3ab98bde7deb1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>audioProcessorParameterChanged</name>
      <anchorfile>classAudioProcessorListener.html</anchorfile>
      <anchor>aa08a28d958759256aecd0f4af8a826f4</anchor>
      <arglist>(AudioProcessor *processor, int parameterIndex, float newValue)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>audioProcessorChanged</name>
      <anchorfile>classAudioProcessorListener.html</anchorfile>
      <anchor>aa639a646573153b1ecf666506318abd4</anchor>
      <arglist>(AudioProcessor *processor)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>audioProcessorParameterChangeGestureBegin</name>
      <anchorfile>classAudioProcessorListener.html</anchorfile>
      <anchor>a38075b5e4654a8c50e135eee40c74f2e</anchor>
      <arglist>(AudioProcessor *processor, int parameterIndex)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>audioProcessorParameterChangeGestureEnd</name>
      <anchorfile>classAudioProcessorListener.html</anchorfile>
      <anchor>a3d78c8d30a546bcccf98827c1b6effb4</anchor>
      <arglist>(AudioProcessor *processor, int parameterIndex)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AudioProcessorParameter</name>
    <filename>classAudioProcessorParameter.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual float</type>
      <name>getValue</name>
      <anchorfile>classAudioProcessorParameter.html</anchorfile>
      <anchor>a1d05f912735f11cb4fe2f250190af9ef</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setValue</name>
      <anchorfile>classAudioProcessorParameter.html</anchorfile>
      <anchor>ab7c0b4f8caace42d38c71ff620cf8182</anchor>
      <arglist>(float newValue)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual float</type>
      <name>getDefaultValue</name>
      <anchorfile>classAudioProcessorParameter.html</anchorfile>
      <anchor>ae33d8ce958178cff49604d5ab55ce0c9</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual String</type>
      <name>getName</name>
      <anchorfile>classAudioProcessorParameter.html</anchorfile>
      <anchor>ac4d06247b0f466d5350b62d45c42080c</anchor>
      <arglist>(int maximumStringLength) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual String</type>
      <name>getLabel</name>
      <anchorfile>classAudioProcessorParameter.html</anchorfile>
      <anchor>a1413a29855168b5e0ca5a1cd648d352a</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumSteps</name>
      <anchorfile>classAudioProcessorParameter.html</anchorfile>
      <anchor>a4707ab253ff2585a12f3e4a42958e0d6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual String</type>
      <name>getText</name>
      <anchorfile>classAudioProcessorParameter.html</anchorfile>
      <anchor>aa5bd8a255ef5dd285787ab0b5a7a7d76</anchor>
      <arglist>(float value, int) const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual float</type>
      <name>getValueForText</name>
      <anchorfile>classAudioProcessorParameter.html</anchorfile>
      <anchor>a64b02b1c4e81c44520c0ddd60ea67618</anchor>
      <arglist>(const String &amp;text) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Category</type>
      <name>getCategory</name>
      <anchorfile>classAudioProcessorParameter.html</anchorfile>
      <anchor>adb651003f0fe12b6c2191e1da2580ff0</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AudioProcessorParameterWithID</name>
    <filename>classAudioProcessorParameterWithID.html</filename>
    <base>AudioProcessorParameter</base>
  </compound>
  <compound kind="class">
    <name>AudioProcessorPlayer</name>
    <filename>classAudioProcessorPlayer.html</filename>
    <base>AudioIODeviceCallback</base>
    <base>MidiInputCallback</base>
    <member kind="function">
      <type></type>
      <name>AudioProcessorPlayer</name>
      <anchorfile>classAudioProcessorPlayer.html</anchorfile>
      <anchor>a80c93a5ac051d18a62a1865da54cf56e</anchor>
      <arglist>(bool doDoublePrecisionProcessing=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~AudioProcessorPlayer</name>
      <anchorfile>classAudioProcessorPlayer.html</anchorfile>
      <anchor>ad029b9ad85fd3aac440cdc019d190498</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setProcessor</name>
      <anchorfile>classAudioProcessorPlayer.html</anchorfile>
      <anchor>a1a0491edbdbcb7e64375c42b8b48ed64</anchor>
      <arglist>(AudioProcessor *processorToPlay)</arglist>
    </member>
    <member kind="function">
      <type>AudioProcessor *</type>
      <name>getCurrentProcessor</name>
      <anchorfile>classAudioProcessorPlayer.html</anchorfile>
      <anchor>a45de02b2ea641894092d94d6e99c2403</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>MidiMessageCollector &amp;</type>
      <name>getMidiMessageCollector</name>
      <anchorfile>classAudioProcessorPlayer.html</anchorfile>
      <anchor>a1bdda7b77f76579ae526cc1f4f4a8ba7</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDoublePrecisionProcessing</name>
      <anchorfile>classAudioProcessorPlayer.html</anchorfile>
      <anchor>a7d49f631fc1c0aac6f432fe4b524ff1d</anchor>
      <arglist>(bool doublePrecision)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getDoublePrecisionProcessing</name>
      <anchorfile>classAudioProcessorPlayer.html</anchorfile>
      <anchor>aab453796aff8eba0ca2abde731746ba7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>audioDeviceIOCallback</name>
      <anchorfile>classAudioProcessorPlayer.html</anchorfile>
      <anchor>aa9ec99f33b14a00a4dc33d47f29576f6</anchor>
      <arglist>(const float **, int, float **, int, int) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>audioDeviceAboutToStart</name>
      <anchorfile>classAudioProcessorPlayer.html</anchorfile>
      <anchor>a6e86ec16b53690d894d67fd7cfd7fcc4</anchor>
      <arglist>(AudioIODevice *) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>audioDeviceStopped</name>
      <anchorfile>classAudioProcessorPlayer.html</anchorfile>
      <anchor>ab7ce7ac03e058c2fe908b98f2889c65b</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>handleIncomingMidiMessage</name>
      <anchorfile>classAudioProcessorPlayer.html</anchorfile>
      <anchor>aa3f6a26339ac28951d252adf1b4a776e</anchor>
      <arglist>(MidiInput *, const MidiMessage &amp;) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MidiInputCallback</name>
      <anchorfile>classMidiInputCallback.html</anchorfile>
      <anchor>a5636d6d55f23b03b3d443ed42609f566</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handlePartialSysexMessage</name>
      <anchorfile>classMidiInputCallback.html</anchorfile>
      <anchor>af31fb0fe3195c72e76e9ebdfa89cf344</anchor>
      <arglist>(MidiInput *source, const uint8 *messageData, int numBytesSoFar, double timestamp)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AudioProcessorValueTreeState</name>
    <filename>classAudioProcessorValueTreeState.html</filename>
    <base protection="private">Timer</base>
    <base protection="private">ValueTree::Listener</base>
    <class kind="class">AudioProcessorValueTreeState::ButtonAttachment</class>
    <class kind="class">AudioProcessorValueTreeState::ComboBoxAttachment</class>
    <class kind="struct">AudioProcessorValueTreeState::Listener</class>
    <class kind="class">AudioProcessorValueTreeState::SliderAttachment</class>
    <member kind="function">
      <type></type>
      <name>AudioProcessorValueTreeState</name>
      <anchorfile>classAudioProcessorValueTreeState.html</anchorfile>
      <anchor>a9bbdefeccca98cec191c7fe4811a9610</anchor>
      <arglist>(AudioProcessor &amp;processorToConnectTo, UndoManager *undoManagerToUse)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~AudioProcessorValueTreeState</name>
      <anchorfile>classAudioProcessorValueTreeState.html</anchorfile>
      <anchor>a84ac43c650107a8b440ad98b3706e733</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>AudioProcessorParameterWithID *</type>
      <name>createAndAddParameter</name>
      <anchorfile>classAudioProcessorValueTreeState.html</anchorfile>
      <anchor>a6b108d8bfaa0cdb2cd0b9f0118b4d542</anchor>
      <arglist>(const String &amp;parameterID, const String &amp;parameterName, const String &amp;labelText, NormalisableRange&lt; float &gt; valueRange, float defaultValue, std::function&lt; String(float)&gt; valueToTextFunction, std::function&lt; float(const String &amp;)&gt; textToValueFunction)</arglist>
    </member>
    <member kind="function">
      <type>AudioProcessorParameterWithID *</type>
      <name>getParameter</name>
      <anchorfile>classAudioProcessorValueTreeState.html</anchorfile>
      <anchor>a2eb0ed702aead6ce83afde8d8d0b13f7</anchor>
      <arglist>(StringRef parameterID) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>float *</type>
      <name>getRawParameterValue</name>
      <anchorfile>classAudioProcessorValueTreeState.html</anchorfile>
      <anchor>ae0973506996a2446e31db292e1e6c8e9</anchor>
      <arglist>(StringRef parameterID) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addParameterListener</name>
      <anchorfile>classAudioProcessorValueTreeState.html</anchorfile>
      <anchor>a350478cad727aa6ceac20e1c933446fc</anchor>
      <arglist>(StringRef parameterID, Listener *listener)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeParameterListener</name>
      <anchorfile>classAudioProcessorValueTreeState.html</anchorfile>
      <anchor>a89b3ccdb853514ce5cd4ee363b71ef80</anchor>
      <arglist>(StringRef parameterID, Listener *listener)</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>getParameterAsValue</name>
      <anchorfile>classAudioProcessorValueTreeState.html</anchorfile>
      <anchor>a8e3130f3a19d9e74c9633c34e40cca33</anchor>
      <arglist>(StringRef parameterID) const </arglist>
    </member>
    <member kind="function">
      <type>NormalisableRange&lt; float &gt;</type>
      <name>getParameterRange</name>
      <anchorfile>classAudioProcessorValueTreeState.html</anchorfile>
      <anchor>a057ab89b864fbc1ad83f3ead47a5685c</anchor>
      <arglist>(StringRef parameterID) const noexcept</arglist>
    </member>
    <member kind="variable">
      <type>AudioProcessor &amp;</type>
      <name>processor</name>
      <anchorfile>classAudioProcessorValueTreeState.html</anchorfile>
      <anchor>aa50efe71cc5b2c9bf0b5c661d0b36c54</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ValueTree</type>
      <name>state</name>
      <anchorfile>classAudioProcessorValueTreeState.html</anchorfile>
      <anchor>ad7de02052d045956f56018e009dc50c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>UndoManager *const</type>
      <name>undoManager</name>
      <anchorfile>classAudioProcessorValueTreeState.html</anchorfile>
      <anchor>a1dbe64c2074c51b19f54d55dc4292e07</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AudioProcessorValueTreeState::ButtonAttachment</name>
    <filename>classAudioProcessorValueTreeState_1_1ButtonAttachment.html</filename>
    <member kind="function">
      <type></type>
      <name>ButtonAttachment</name>
      <anchorfile>classAudioProcessorValueTreeState_1_1ButtonAttachment.html</anchorfile>
      <anchor>a6bda37b30d082e8a0a027135c1e82636</anchor>
      <arglist>(AudioProcessorValueTreeState &amp;stateToControl, const String &amp;parameterID, Button &amp;buttonToControl)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ButtonAttachment</name>
      <anchorfile>classAudioProcessorValueTreeState_1_1ButtonAttachment.html</anchorfile>
      <anchor>a0a24d9416dd0599256cbdde0cc188fb0</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AudioProcessorValueTreeState::ComboBoxAttachment</name>
    <filename>classAudioProcessorValueTreeState_1_1ComboBoxAttachment.html</filename>
    <member kind="function">
      <type></type>
      <name>ComboBoxAttachment</name>
      <anchorfile>classAudioProcessorValueTreeState_1_1ComboBoxAttachment.html</anchorfile>
      <anchor>a57408bc03c0b20af59deafacbd3e27fc</anchor>
      <arglist>(AudioProcessorValueTreeState &amp;stateToControl, const String &amp;parameterID, ComboBox &amp;comboBoxToControl)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ComboBoxAttachment</name>
      <anchorfile>classAudioProcessorValueTreeState_1_1ComboBoxAttachment.html</anchorfile>
      <anchor>af61e743b0d9d621197203cce1dcc209e</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>AudioProcessorValueTreeState::Listener</name>
    <filename>structAudioProcessorValueTreeState_1_1Listener.html</filename>
    <member kind="function">
      <type></type>
      <name>Listener</name>
      <anchorfile>structAudioProcessorValueTreeState_1_1Listener.html</anchorfile>
      <anchor>ab2e47cef4585a4bed8be2b84f2d792a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Listener</name>
      <anchorfile>structAudioProcessorValueTreeState_1_1Listener.html</anchorfile>
      <anchor>a259362f956f9e4c6832492669b891e0b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>parameterChanged</name>
      <anchorfile>structAudioProcessorValueTreeState_1_1Listener.html</anchorfile>
      <anchor>a2716fa16ef99141f599ffd7c93682552</anchor>
      <arglist>(const String &amp;parameterID, float newValue)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AudioProcessorValueTreeState::SliderAttachment</name>
    <filename>classAudioProcessorValueTreeState_1_1SliderAttachment.html</filename>
    <member kind="function">
      <type></type>
      <name>SliderAttachment</name>
      <anchorfile>classAudioProcessorValueTreeState_1_1SliderAttachment.html</anchorfile>
      <anchor>a9d08e48ee60a5d4fe78e87d5c97254f4</anchor>
      <arglist>(AudioProcessorValueTreeState &amp;stateToControl, const String &amp;parameterID, Slider &amp;sliderToControl)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SliderAttachment</name>
      <anchorfile>classAudioProcessorValueTreeState_1_1SliderAttachment.html</anchorfile>
      <anchor>aecf549281970c64fe7d94160f5acaf70</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AudioSource</name>
    <filename>classAudioSource.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>prepareToPlay</name>
      <anchorfile>classAudioSource.html</anchorfile>
      <anchor>a653279dbd167f70e318fd280681dbddf</anchor>
      <arglist>(int samplesPerBlockExpected, double sampleRate)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>releaseResources</name>
      <anchorfile>classAudioSource.html</anchorfile>
      <anchor>a7823bf0f1c43333eed41664c7994f290</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>getNextAudioBlock</name>
      <anchorfile>classAudioSource.html</anchorfile>
      <anchor>a36fc2484ead8fb8dc03be57d09dd5735</anchor>
      <arglist>(const AudioSourceChannelInfo &amp;bufferToFill)=0</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>AudioSourceChannelInfo</name>
    <filename>structAudioSourceChannelInfo.html</filename>
    <member kind="function">
      <type></type>
      <name>AudioSourceChannelInfo</name>
      <anchorfile>structAudioSourceChannelInfo.html</anchorfile>
      <anchor>ab6cb8323683ddb2e9170c96aedfb4e6f</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AudioSourceChannelInfo</name>
      <anchorfile>structAudioSourceChannelInfo.html</anchorfile>
      <anchor>a0076062656d54e026c971aafc6051d50</anchor>
      <arglist>(AudioSampleBuffer *bufferToUse, int startSampleOffset, int numSamplesToUse) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AudioSourceChannelInfo</name>
      <anchorfile>structAudioSourceChannelInfo.html</anchorfile>
      <anchor>ae486e3eb8d0b4e53b279793d5d03dc19</anchor>
      <arglist>(AudioSampleBuffer &amp;bufferToUse) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearActiveBufferRegion</name>
      <anchorfile>structAudioSourceChannelInfo.html</anchorfile>
      <anchor>a988b6665c085bf47b1b5fd4f1e6b7f8b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable">
      <type>AudioSampleBuffer *</type>
      <name>buffer</name>
      <anchorfile>structAudioSourceChannelInfo.html</anchorfile>
      <anchor>abed0807b4447de67b8ffd29ef2f2d2d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>startSample</name>
      <anchorfile>structAudioSourceChannelInfo.html</anchorfile>
      <anchor>a42e88ccc05d4893015e2415785390259</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>numSamples</name>
      <anchorfile>structAudioSourceChannelInfo.html</anchorfile>
      <anchor>a6669c809cf3b47afa94af63d4fa48101</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AudioSourcePlayer</name>
    <filename>classAudioSourcePlayer.html</filename>
    <base>AudioIODeviceCallback</base>
    <member kind="function">
      <type></type>
      <name>AudioSourcePlayer</name>
      <anchorfile>classAudioSourcePlayer.html</anchorfile>
      <anchor>a708828c1d38dc7d003f79bd98f577a94</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~AudioSourcePlayer</name>
      <anchorfile>classAudioSourcePlayer.html</anchorfile>
      <anchor>a7cf30ef2b4616108e95a133fced197bc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSource</name>
      <anchorfile>classAudioSourcePlayer.html</anchorfile>
      <anchor>a27acf0932a719dd1cd6d730af0c232fa</anchor>
      <arglist>(AudioSource *newSource)</arglist>
    </member>
    <member kind="function">
      <type>AudioSource *</type>
      <name>getCurrentSource</name>
      <anchorfile>classAudioSourcePlayer.html</anchorfile>
      <anchor>ab70c9acf32f6e0e50467e4b24172464c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGain</name>
      <anchorfile>classAudioSourcePlayer.html</anchorfile>
      <anchor>a6750b0c4ed1258abe4c108c80dfeff4d</anchor>
      <arglist>(float newGain) noexcept</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getGain</name>
      <anchorfile>classAudioSourcePlayer.html</anchorfile>
      <anchor>aa705d1a6ee51b4bc1f25bddf8a912d69</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>audioDeviceIOCallback</name>
      <anchorfile>classAudioSourcePlayer.html</anchorfile>
      <anchor>affe24f50bfa4d73f8e2d220bec2433ec</anchor>
      <arglist>(const float **inputChannelData, int totalNumInputChannels, float **outputChannelData, int totalNumOutputChannels, int numSamples) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>audioDeviceAboutToStart</name>
      <anchorfile>classAudioSourcePlayer.html</anchorfile>
      <anchor>a873c307b234e375b25aa589aba5ebaca</anchor>
      <arglist>(AudioIODevice *device) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>audioDeviceStopped</name>
      <anchorfile>classAudioSourcePlayer.html</anchorfile>
      <anchor>a4858c64b3dc045c9fd400ea72bed1898</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>prepareToPlay</name>
      <anchorfile>classAudioSourcePlayer.html</anchorfile>
      <anchor>a0941ec351494d77bce92df935c98b777</anchor>
      <arglist>(double sampleRate, int blockSize)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AudioSubsectionReader</name>
    <filename>classAudioSubsectionReader.html</filename>
    <base>AudioFormatReader</base>
    <member kind="function">
      <type></type>
      <name>AudioSubsectionReader</name>
      <anchorfile>classAudioSubsectionReader.html</anchorfile>
      <anchor>a534254f7895a750d6e02863f0b1f72de</anchor>
      <arglist>(AudioFormatReader *sourceReader, int64 subsectionStartSample, int64 subsectionLength, bool deleteSourceWhenDeleted)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~AudioSubsectionReader</name>
      <anchorfile>classAudioSubsectionReader.html</anchorfile>
      <anchor>a6ea56901d6a179240bbb18e8ade97c90</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>readSamples</name>
      <anchorfile>classAudioSubsectionReader.html</anchorfile>
      <anchor>a74503d803fbffeac827371b7f75e0749</anchor>
      <arglist>(int **destSamples, int numDestChannels, int startOffsetInDestBuffer, int64 startSampleInFile, int numSamples) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>readMaxLevels</name>
      <anchorfile>classAudioSubsectionReader.html</anchorfile>
      <anchor>aaf1151c9dd37fb13e276518d39a6121f</anchor>
      <arglist>(int64 startSample, int64 numSamples, Range&lt; float &gt; *results, int numChannelsToRead) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AudioThumbnail</name>
    <filename>classAudioThumbnail.html</filename>
    <base>AudioThumbnailBase</base>
    <member kind="function">
      <type></type>
      <name>AudioThumbnail</name>
      <anchorfile>classAudioThumbnail.html</anchorfile>
      <anchor>abfa7516538eb0518cddeec4c71cf329d</anchor>
      <arglist>(int sourceSamplesPerThumbnailSample, AudioFormatManager &amp;formatManagerToUse, AudioThumbnailCache &amp;cacheToUse)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~AudioThumbnail</name>
      <anchorfile>classAudioThumbnail.html</anchorfile>
      <anchor>ac4e25d85982477ec205c5e968f16a56c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classAudioThumbnail.html</anchorfile>
      <anchor>a3b5a0fab0c544023b734b545ae15e22a</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setSource</name>
      <anchorfile>classAudioThumbnail.html</anchorfile>
      <anchor>a1c10b38a794d96b2d26acbbc15946319</anchor>
      <arglist>(InputSource *newSource) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setReader</name>
      <anchorfile>classAudioThumbnail.html</anchorfile>
      <anchor>a67fb7eb4571c0442789b34139dfb47f9</anchor>
      <arglist>(AudioFormatReader *newReader, int64 hashCode) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classAudioThumbnail.html</anchorfile>
      <anchor>a9a99b62ab38df9acf50ce84e9488bf6e</anchor>
      <arglist>(int numChannels, double sampleRate, int64 totalSamplesInSource=0) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addBlock</name>
      <anchorfile>classAudioThumbnail.html</anchorfile>
      <anchor>acc6b12d4f8d8074dfd76398e775eeb90</anchor>
      <arglist>(int64 sampleNumberInSource, const AudioSampleBuffer &amp;newData, int startOffsetInBuffer, int numSamples) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>loadFrom</name>
      <anchorfile>classAudioThumbnail.html</anchorfile>
      <anchor>aa0f585f827cda690c98264045be8d1b7</anchor>
      <arglist>(InputStream &amp;input) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>saveTo</name>
      <anchorfile>classAudioThumbnail.html</anchorfile>
      <anchor>ac3535275e40a4414ef1081fcecbf814e</anchor>
      <arglist>(OutputStream &amp;output) const override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumChannels</name>
      <anchorfile>classAudioThumbnail.html</anchorfile>
      <anchor>a210ec272ed68ba39034b24c5b54d3760</anchor>
      <arglist>() const noexceptoverride</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getTotalLength</name>
      <anchorfile>classAudioThumbnail.html</anchorfile>
      <anchor>a83a7515ae5a053d7237a370b2f239b5a</anchor>
      <arglist>() const noexceptoverride</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawChannel</name>
      <anchorfile>classAudioThumbnail.html</anchorfile>
      <anchor>ab9b136a4b025b6a0f283cef57c61b893</anchor>
      <arglist>(Graphics &amp;g, const Rectangle&lt; int &gt; &amp;area, double startTimeSeconds, double endTimeSeconds, int channelNum, float verticalZoomFactor) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawChannels</name>
      <anchorfile>classAudioThumbnail.html</anchorfile>
      <anchor>a8fc354b03e88e66771ef3b9647fdd9fa</anchor>
      <arglist>(Graphics &amp;g, const Rectangle&lt; int &gt; &amp;area, double startTimeSeconds, double endTimeSeconds, float verticalZoomFactor) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isFullyLoaded</name>
      <anchorfile>classAudioThumbnail.html</anchorfile>
      <anchor>ac5d03c01d0bc65828cbc6bac8151a2e4</anchor>
      <arglist>() const noexceptoverride</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getProportionComplete</name>
      <anchorfile>classAudioThumbnail.html</anchorfile>
      <anchor>a054d995aa7d9765b695a642bb250ff12</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>getNumSamplesFinished</name>
      <anchorfile>classAudioThumbnail.html</anchorfile>
      <anchor>a59366f1bc8660eff93993ab51648c7c9</anchor>
      <arglist>() const noexceptoverride</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getApproximatePeak</name>
      <anchorfile>classAudioThumbnail.html</anchorfile>
      <anchor>a53a867a5d46790deb5135a24cfcf85c6</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getApproximateMinMax</name>
      <anchorfile>classAudioThumbnail.html</anchorfile>
      <anchor>aa3d04cc2aafce7b11b5b9913ddf9e55c</anchor>
      <arglist>(double startTime, double endTime, int channelIndex, float &amp;minValue, float &amp;maxValue) const noexceptoverride</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>getHashCode</name>
      <anchorfile>classAudioThumbnail.html</anchorfile>
      <anchor>a943ab9611f881a53106c002effe280a4</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AudioThumbnailBase</name>
      <anchorfile>classAudioThumbnailBase.html</anchorfile>
      <anchor>af7b4ebde2996de4bed6e1cf048b11467</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~AudioThumbnailBase</name>
      <anchorfile>classAudioThumbnailBase.html</anchorfile>
      <anchor>a2ef25f2c29e6363e346c2cb819e7a5b6</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AudioThumbnailBase</name>
    <filename>classAudioThumbnailBase.html</filename>
    <base>ChangeBroadcaster</base>
    <base>AudioFormatWriter::ThreadedWriter::IncomingDataReceiver</base>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>classAudioThumbnailBase.html</anchorfile>
      <anchor>a53a5be624c9de79a672777d3697cfd48</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>setSource</name>
      <anchorfile>classAudioThumbnailBase.html</anchorfile>
      <anchor>a8fd77ac3757e9eca141ab1cbc4e7d269</anchor>
      <arglist>(InputSource *newSource)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setReader</name>
      <anchorfile>classAudioThumbnailBase.html</anchorfile>
      <anchor>ad6960274ea876808fd2e6df6f0761e9c</anchor>
      <arglist>(AudioFormatReader *newReader, int64 hashCode)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>loadFrom</name>
      <anchorfile>classAudioThumbnailBase.html</anchorfile>
      <anchor>a84319e0027a1d0b98a38b51c00fa2d5c</anchor>
      <arglist>(InputStream &amp;input)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>saveTo</name>
      <anchorfile>classAudioThumbnailBase.html</anchorfile>
      <anchor>a9cb4b72aa47359c671f89fc25eae0a72</anchor>
      <arglist>(OutputStream &amp;output) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getNumChannels</name>
      <anchorfile>classAudioThumbnailBase.html</anchorfile>
      <anchor>a6677b1ec042a69aa14ceec756d292671</anchor>
      <arglist>() const noexcept=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>getTotalLength</name>
      <anchorfile>classAudioThumbnailBase.html</anchorfile>
      <anchor>aa668e0939708049e4ee3b203860037c9</anchor>
      <arglist>() const noexcept=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>drawChannel</name>
      <anchorfile>classAudioThumbnailBase.html</anchorfile>
      <anchor>ab7e4df6d6c5e96943f3f6ca184235a57</anchor>
      <arglist>(Graphics &amp;g, const Rectangle&lt; int &gt; &amp;area, double startTimeSeconds, double endTimeSeconds, int channelNum, float verticalZoomFactor)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>drawChannels</name>
      <anchorfile>classAudioThumbnailBase.html</anchorfile>
      <anchor>a7779a08868bbb6581acb904f200c7877</anchor>
      <arglist>(Graphics &amp;g, const Rectangle&lt; int &gt; &amp;area, double startTimeSeconds, double endTimeSeconds, float verticalZoomFactor)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isFullyLoaded</name>
      <anchorfile>classAudioThumbnailBase.html</anchorfile>
      <anchor>aacffa9ccff66765ea16fad7aca98323e</anchor>
      <arglist>() const noexcept=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int64</type>
      <name>getNumSamplesFinished</name>
      <anchorfile>classAudioThumbnailBase.html</anchorfile>
      <anchor>ad04c3c2c5a003df0296faab4f017081f</anchor>
      <arglist>() const noexcept=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual float</type>
      <name>getApproximatePeak</name>
      <anchorfile>classAudioThumbnailBase.html</anchorfile>
      <anchor>a8efca4beb3d0f32b65be53be933a8e81</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>getApproximateMinMax</name>
      <anchorfile>classAudioThumbnailBase.html</anchorfile>
      <anchor>ab3abc860ff8e4fda8234b54cbec3d137</anchor>
      <arglist>(double startTime, double endTime, int channelIndex, float &amp;minValue, float &amp;maxValue) const noexcept=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int64</type>
      <name>getHashCode</name>
      <anchorfile>classAudioThumbnailBase.html</anchorfile>
      <anchor>a9a16ffaf872861903fdf2e97fcfe958f</anchor>
      <arglist>() const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AudioThumbnailCache</name>
    <filename>classAudioThumbnailCache.html</filename>
    <member kind="function">
      <type></type>
      <name>AudioThumbnailCache</name>
      <anchorfile>classAudioThumbnailCache.html</anchorfile>
      <anchor>a8b337276f3ec8979475e1884e9dde170</anchor>
      <arglist>(int maxNumThumbsToStore)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~AudioThumbnailCache</name>
      <anchorfile>classAudioThumbnailCache.html</anchorfile>
      <anchor>a8064df47de6982ee3629e2f849542c1b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classAudioThumbnailCache.html</anchorfile>
      <anchor>a52c8490b5df7c750822d9c15ca829dc2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>loadThumb</name>
      <anchorfile>classAudioThumbnailCache.html</anchorfile>
      <anchor>a0c02c3ed2e7868c20e9d77c16915d818</anchor>
      <arglist>(AudioThumbnailBase &amp;thumb, int64 hashCode)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>storeThumb</name>
      <anchorfile>classAudioThumbnailCache.html</anchorfile>
      <anchor>a04e1fc8084a07fb926e22bbc62bfe4c4</anchor>
      <arglist>(const AudioThumbnailBase &amp;thumb, int64 hashCode)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeThumb</name>
      <anchorfile>classAudioThumbnailCache.html</anchorfile>
      <anchor>afd26c87085118697efd805fd57b26b99</anchor>
      <arglist>(int64 hashCode)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>readFromStream</name>
      <anchorfile>classAudioThumbnailCache.html</anchorfile>
      <anchor>a4964efe9a66ded88c1224e2c0946c5e9</anchor>
      <arglist>(InputStream &amp;source)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeToStream</name>
      <anchorfile>classAudioThumbnailCache.html</anchorfile>
      <anchor>ae752aabe2829fb344c4e619d2819a3d7</anchor>
      <arglist>(OutputStream &amp;stream)</arglist>
    </member>
    <member kind="function">
      <type>TimeSliceThread &amp;</type>
      <name>getTimeSliceThread</name>
      <anchorfile>classAudioThumbnailCache.html</anchorfile>
      <anchor>a3b4a7387c73aa4163ddc236e8b104023</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>saveNewlyFinishedThumbnail</name>
      <anchorfile>classAudioThumbnailCache.html</anchorfile>
      <anchor>a2b314d8449a4387722f83f1771aab200</anchor>
      <arglist>(const AudioThumbnailBase &amp;, int64 hashCode)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>loadNewThumb</name>
      <anchorfile>classAudioThumbnailCache.html</anchorfile>
      <anchor>a70a034bb9341604fe41b7bcfe613ba12</anchor>
      <arglist>(AudioThumbnailBase &amp;, int64 hashCode)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AudioTransportSource</name>
    <filename>classAudioTransportSource.html</filename>
    <base>PositionableAudioSource</base>
    <base>ChangeBroadcaster</base>
    <member kind="function">
      <type></type>
      <name>AudioTransportSource</name>
      <anchorfile>classAudioTransportSource.html</anchorfile>
      <anchor>ace4826902928ee0bb94026d29eebe419</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~AudioTransportSource</name>
      <anchorfile>classAudioTransportSource.html</anchorfile>
      <anchor>a8a47ae2093d1c04f53a13a014530419f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSource</name>
      <anchorfile>classAudioTransportSource.html</anchorfile>
      <anchor>a20a6a91c4505e77207cadef7ddc4dc5c</anchor>
      <arglist>(PositionableAudioSource *newSource, int readAheadBufferSize=0, TimeSliceThread *readAheadThread=nullptr, double sourceSampleRateToCorrectFor=0.0, int maxNumChannels=2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPosition</name>
      <anchorfile>classAudioTransportSource.html</anchorfile>
      <anchor>aab002d853ed9e9389fcaa25014c1fc72</anchor>
      <arglist>(double newPosition)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getCurrentPosition</name>
      <anchorfile>classAudioTransportSource.html</anchorfile>
      <anchor>ac7fe93e119dc374f5acdef19649314b4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getLengthInSeconds</name>
      <anchorfile>classAudioTransportSource.html</anchorfile>
      <anchor>a13844dfcbedab586bc5ba382bd0e6386</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasStreamFinished</name>
      <anchorfile>classAudioTransportSource.html</anchorfile>
      <anchor>a4914381d34ed8bff499ca878c2be83fb</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>classAudioTransportSource.html</anchorfile>
      <anchor>a1cfd309ab61fb226bc03e5774c6ce65f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stop</name>
      <anchorfile>classAudioTransportSource.html</anchorfile>
      <anchor>a8c29c458d172bf51712f318de69d50db</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isPlaying</name>
      <anchorfile>classAudioTransportSource.html</anchorfile>
      <anchor>aa730c63d2cff661d8bfcb5c002ec0bce</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGain</name>
      <anchorfile>classAudioTransportSource.html</anchorfile>
      <anchor>a694930a9778a641b71d006a07cd7a5df</anchor>
      <arglist>(float newGain) noexcept</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getGain</name>
      <anchorfile>classAudioTransportSource.html</anchorfile>
      <anchor>a723be769b44f4334b947e3568e2b2d4a</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>prepareToPlay</name>
      <anchorfile>classAudioTransportSource.html</anchorfile>
      <anchor>a8d6683c6ff1d33298928a764d12ffba1</anchor>
      <arglist>(int samplesPerBlockExpected, double sampleRate) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>releaseResources</name>
      <anchorfile>classAudioTransportSource.html</anchorfile>
      <anchor>a1efbef0a54aee220f2910c6dec9f7199</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getNextAudioBlock</name>
      <anchorfile>classAudioTransportSource.html</anchorfile>
      <anchor>a7506340feb1e3cd0dac988f12a607fad</anchor>
      <arglist>(const AudioSourceChannelInfo &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNextReadPosition</name>
      <anchorfile>classAudioTransportSource.html</anchorfile>
      <anchor>afa89d10f6220f74c23027cfd805c6771</anchor>
      <arglist>(int64 newPosition) override</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>getNextReadPosition</name>
      <anchorfile>classAudioTransportSource.html</anchorfile>
      <anchor>a57baa00fcb68e24671d2e9aa402123bd</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>getTotalLength</name>
      <anchorfile>classAudioTransportSource.html</anchorfile>
      <anchor>a2c41a833a4473d4ed29b53418dad5240</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isLooping</name>
      <anchorfile>classAudioTransportSource.html</anchorfile>
      <anchor>a610d354af3a8fcb975bfea23bbb97018</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setLooping</name>
      <anchorfile>classPositionableAudioSource.html</anchorfile>
      <anchor>a8fba6ce7ef75cfc66c3176a37cda3ba9</anchor>
      <arglist>(bool shouldLoop)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>AudioUnitHelpers</name>
    <filename>structAudioUnitHelpers.html</filename>
    <class kind="struct">AudioUnitHelpers::AUChannelStreamOrder</class>
    <class kind="class">AudioUnitHelpers::ChannelRemapper</class>
    <class kind="class">AudioUnitHelpers::CoreAudioBufferList</class>
    <class kind="struct">AudioUnitHelpers::StreamOrder</class>
    <member kind="function" static="yes">
      <type>static AudioChannelSet::ChannelType</type>
      <name>CoreAudioChannelLabelToJuceType</name>
      <anchorfile>structAudioUnitHelpers.html</anchorfile>
      <anchor>ac68ad178d4178ad91a11fb91ced08290</anchor>
      <arglist>(AudioChannelLabel label) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static AudioChannelLabel</type>
      <name>JuceChannelTypeToCoreAudioLabel</name>
      <anchorfile>structAudioUnitHelpers.html</anchorfile>
      <anchor>a1976196d3f6e79fe0280d3504686634e</anchor>
      <arglist>(const AudioChannelSet::ChannelType &amp;label) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static AudioChannelSet</type>
      <name>CoreAudioChannelBitmapToJuceType</name>
      <anchorfile>structAudioUnitHelpers.html</anchorfile>
      <anchor>aaa03a90fe271fda5c558f1c607d8113f</anchor>
      <arglist>(UInt32 bitmap) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static AudioChannelSet</type>
      <name>CoreAudioChannelLayoutToJuceType</name>
      <anchorfile>structAudioUnitHelpers.html</anchorfile>
      <anchor>a941026e5949e35df064df023ec05956b</anchor>
      <arglist>(const AudioChannelLayout &amp;layout) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static AudioChannelSet</type>
      <name>CALayoutTagToChannelSet</name>
      <anchorfile>structAudioUnitHelpers.html</anchorfile>
      <anchor>a21271d10f524034499c8b0439d457d9b</anchor>
      <arglist>(AudioChannelLayoutTag tag) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static AudioChannelLayoutTag</type>
      <name>ChannelSetToCALayoutTag</name>
      <anchorfile>structAudioUnitHelpers.html</anchorfile>
      <anchor>ac68a1469332bd2a144fa795027b91727</anchor>
      <arglist>(const AudioChannelSet &amp;set) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>auChannelIndexToJuce</name>
      <anchorfile>structAudioUnitHelpers.html</anchorfile>
      <anchor>abb43c8086087796cb74a57c791a27e40</anchor>
      <arglist>(int auIndex, const AudioChannelSet &amp;channelSet)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>juceChannelIndexToAu</name>
      <anchorfile>structAudioUnitHelpers.html</anchorfile>
      <anchor>a3f0f49089b990ec2c7a652f3b3687aa7</anchor>
      <arglist>(int juceIndex, const AudioChannelSet &amp;channelSet)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isAudioBufferInterleaved</name>
      <anchorfile>structAudioUnitHelpers.html</anchorfile>
      <anchor>a2085fcf1704685ccf9b378d8daa75523</anchor>
      <arglist>(const AudioBufferList &amp;audioBuffer) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>clearAudioBuffer</name>
      <anchorfile>structAudioUnitHelpers.html</anchorfile>
      <anchor>a502793d0d94d69f92ee0251a274eb48e</anchor>
      <arglist>(const AudioBufferList &amp;audioBuffer) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>copyAudioBuffer</name>
      <anchorfile>structAudioUnitHelpers.html</anchorfile>
      <anchor>ac27199a857891d4ceaf411569d20709b</anchor>
      <arglist>(const AudioBufferList &amp;audioBuffer, const int channel, const UInt32 size, float *dst) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>copyAudioBuffer</name>
      <anchorfile>structAudioUnitHelpers.html</anchorfile>
      <anchor>a82dd544b757329d7cdf033eacaed06d1</anchor>
      <arglist>(const float *src, const int channel, const UInt32 size, AudioBufferList &amp;audioBuffer) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isLayoutSupported</name>
      <anchorfile>structAudioUnitHelpers.html</anchorfile>
      <anchor>a890b0da6eb3ecad3ee73c47c63dc7d3c</anchor>
      <arglist>(const AudioProcessor &amp;processor, bool isInput, int busIdx, int numChannels, const short(&amp;channelLayoutList)[numLayouts][2], bool hasLayoutMap=true)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Array&lt; AUChannelInfo &gt;</type>
      <name>getAUChannelInfo</name>
      <anchorfile>structAudioUnitHelpers.html</anchorfile>
      <anchor>a72c5a76c5a1721f88d9ee0a3e0656926</anchor>
      <arglist>(const AudioProcessor &amp;processor)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>getBusCount</name>
      <anchorfile>structAudioUnitHelpers.html</anchorfile>
      <anchor>a6ec130e790d87fca3c0a34f60eba216c</anchor>
      <arglist>(const AudioProcessor *juceFilter, bool isInput)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>setBusesLayout</name>
      <anchorfile>structAudioUnitHelpers.html</anchorfile>
      <anchor>ad1e17712bdffc5d7a180c09d561329fa</anchor>
      <arglist>(AudioProcessor *juceFilter, const AudioProcessor::BusesLayout &amp;requestedLayouts)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static AudioProcessor::BusesLayout</type>
      <name>getBusesLayout</name>
      <anchorfile>structAudioUnitHelpers.html</anchorfile>
      <anchor>a2e13cc1304fce78d837abe4a8cccef61</anchor>
      <arglist>(const AudioProcessor *juceFilter)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>AudioUnitHelpers::AUChannelStreamOrder</name>
    <filename>structAudioUnitHelpers_1_1AUChannelStreamOrder.html</filename>
    <member kind="variable">
      <type>AudioChannelLayoutTag</type>
      <name>auLayoutTag</name>
      <anchorfile>structAudioUnitHelpers_1_1AUChannelStreamOrder.html</anchorfile>
      <anchor>afc45e29183fc45b1bebfb7f97d8e48db</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>AudioChannelSet::ChannelType</type>
      <name>speakerOrder</name>
      <anchorfile>structAudioUnitHelpers_1_1AUChannelStreamOrder.html</anchorfile>
      <anchor>a74710deb4640ef3ae8495d432a1ec66f</anchor>
      <arglist>[8]</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AudioUnitHelpers::ChannelRemapper</name>
    <filename>classAudioUnitHelpers_1_1ChannelRemapper.html</filename>
    <member kind="function">
      <type></type>
      <name>ChannelRemapper</name>
      <anchorfile>classAudioUnitHelpers_1_1ChannelRemapper.html</anchorfile>
      <anchor>a42e3fbc35743773e6b2a1550e45ad167</anchor>
      <arglist>(AudioProcessor &amp;p)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ChannelRemapper</name>
      <anchorfile>classAudioUnitHelpers_1_1ChannelRemapper.html</anchorfile>
      <anchor>a39f01c1aebe0ef2f257ee0a72ec48bd7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>alloc</name>
      <anchorfile>classAudioUnitHelpers_1_1ChannelRemapper.html</anchorfile>
      <anchor>aee51531605d0b0cc8f7f7e549aea3470</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>release</name>
      <anchorfile>classAudioUnitHelpers_1_1ChannelRemapper.html</anchorfile>
      <anchor>a149a4f20954320f89e4e2ffd65166d3d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const int *</type>
      <name>get</name>
      <anchorfile>classAudioUnitHelpers_1_1ChannelRemapper.html</anchorfile>
      <anchor>a4cce2263d3c691c3560e866a6d4446d0</anchor>
      <arglist>(bool input, int bus) const noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AudioUnitHelpers::CoreAudioBufferList</name>
    <filename>classAudioUnitHelpers_1_1CoreAudioBufferList.html</filename>
    <member kind="function">
      <type></type>
      <name>CoreAudioBufferList</name>
      <anchorfile>classAudioUnitHelpers_1_1CoreAudioBufferList.html</anchorfile>
      <anchor>a720d47f9178b3f66cd9f1d099d588507</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>prepare</name>
      <anchorfile>classAudioUnitHelpers_1_1CoreAudioBufferList.html</anchorfile>
      <anchor>a7e4cd6becddb903c974fb6e643afe8b4</anchor>
      <arglist>(int inChannels, int outChannels, int maxFrames)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>release</name>
      <anchorfile>classAudioUnitHelpers_1_1CoreAudioBufferList.html</anchorfile>
      <anchor>ac802ae2d716fab534a42a53313648e7d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classAudioUnitHelpers_1_1CoreAudioBufferList.html</anchorfile>
      <anchor>aa06cbf692838e38fa57a45b2b3daca00</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>float *</type>
      <name>setBuffer</name>
      <anchorfile>classAudioUnitHelpers_1_1CoreAudioBufferList.html</anchorfile>
      <anchor>adc7e8afd6102e99e0b5d18a97cb3c8cb</anchor>
      <arglist>(const int idx, float *ptr=nullptr) noexcept</arglist>
    </member>
    <member kind="function">
      <type>float *</type>
      <name>push</name>
      <anchorfile>classAudioUnitHelpers_1_1CoreAudioBufferList.html</anchorfile>
      <anchor>aa24515fd83834e0734ee67cd7d20dcea</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push</name>
      <anchorfile>classAudioUnitHelpers_1_1CoreAudioBufferList.html</anchorfile>
      <anchor>a6f0a021337e80e30ad91afb7c8fe55df</anchor>
      <arglist>(AudioBufferList &amp;bufferList, const int *channelMap) noexcept</arglist>
    </member>
    <member kind="function">
      <type>float *</type>
      <name>pop</name>
      <anchorfile>classAudioUnitHelpers_1_1CoreAudioBufferList.html</anchorfile>
      <anchor>a115ccebe2a6ccbe501732ab209f4f96c</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pop</name>
      <anchorfile>classAudioUnitHelpers_1_1CoreAudioBufferList.html</anchorfile>
      <anchor>aa5e3bbd964561829502a3362b34a084a</anchor>
      <arglist>(AudioBufferList &amp;buffer, const int *channelMap) noexcept</arglist>
    </member>
    <member kind="function">
      <type>AudioSampleBuffer &amp;</type>
      <name>getBuffer</name>
      <anchorfile>classAudioUnitHelpers_1_1CoreAudioBufferList.html</anchorfile>
      <anchor>aeac6d2651e2880146cfe7a78dda9cc8d</anchor>
      <arglist>(UInt32 frames) noexcept</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>AudioUnitHelpers::StreamOrder</name>
    <filename>structAudioUnitHelpers_1_1StreamOrder.html</filename>
    <base>AudioChannelSet</base>
    <member kind="variable" static="yes">
      <type>static AUChannelStreamOrder</type>
      <name>auChannelStreamOrder</name>
      <anchorfile>structAudioUnitHelpers_1_1StreamOrder.html</anchorfile>
      <anchor>a1d7ea82974b92196443cca8e5b9086fa</anchor>
      <arglist>[]</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AudioUnitPluginFormat</name>
    <filename>classAudioUnitPluginFormat.html</filename>
    <base>AudioPluginFormat</base>
    <member kind="function">
      <type></type>
      <name>AudioUnitPluginFormat</name>
      <anchorfile>classAudioUnitPluginFormat.html</anchorfile>
      <anchor>a6173f2767d8a293b694752c2dc374e0d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~AudioUnitPluginFormat</name>
      <anchorfile>classAudioUnitPluginFormat.html</anchorfile>
      <anchor>aead448c125c2f812b1c2559de3f2e538</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>getName</name>
      <anchorfile>classAudioUnitPluginFormat.html</anchorfile>
      <anchor>abbe165200210d269d2c0cbc54fd3ae5c</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>findAllTypesForFile</name>
      <anchorfile>classAudioUnitPluginFormat.html</anchorfile>
      <anchor>a3d1e00a1c24ebf0f8ff5326f810f5e4a</anchor>
      <arglist>(OwnedArray&lt; PluginDescription &gt; &amp;, const String &amp;fileOrIdentifier) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>fileMightContainThisPluginType</name>
      <anchorfile>classAudioUnitPluginFormat.html</anchorfile>
      <anchor>a15c635a8e18ea3db3516e3a98c157a40</anchor>
      <arglist>(const String &amp;fileOrIdentifier) override</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>getNameOfPluginFromIdentifier</name>
      <anchorfile>classAudioUnitPluginFormat.html</anchorfile>
      <anchor>aae7503a9a5a626959f164a032e7ecaa6</anchor>
      <arglist>(const String &amp;fileOrIdentifier) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>pluginNeedsRescanning</name>
      <anchorfile>classAudioUnitPluginFormat.html</anchorfile>
      <anchor>acfae9bd9cc7841f6adccd0a23773642e</anchor>
      <arglist>(const PluginDescription &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>StringArray</type>
      <name>searchPathsForPlugins</name>
      <anchorfile>classAudioUnitPluginFormat.html</anchorfile>
      <anchor>a312376321898119dbfebbe5bfcb2e84f</anchor>
      <arglist>(const FileSearchPath &amp;, bool recursive, bool) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>doesPluginStillExist</name>
      <anchorfile>classAudioUnitPluginFormat.html</anchorfile>
      <anchor>a084772b97639d1d6343f81006731e78d</anchor>
      <arglist>(const PluginDescription &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>FileSearchPath</type>
      <name>getDefaultLocationsToSearch</name>
      <anchorfile>classAudioUnitPluginFormat.html</anchorfile>
      <anchor>ad8d7bea4da5696d28afbf63a6b4afd13</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>canScanForPlugins</name>
      <anchorfile>classAudioUnitPluginFormat.html</anchorfile>
      <anchor>a7c8cef8c0cfb9743d5cb0a92a93fc35a</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AudioVisualiserComponent</name>
    <filename>classAudioVisualiserComponent.html</filename>
    <base>Component</base>
    <base protection="private">Timer</base>
    <member kind="function">
      <type></type>
      <name>AudioVisualiserComponent</name>
      <anchorfile>classAudioVisualiserComponent.html</anchorfile>
      <anchor>af021e96fba1c9ea5520da12c9fa15cca</anchor>
      <arglist>(int initialNumChannels)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~AudioVisualiserComponent</name>
      <anchorfile>classAudioVisualiserComponent.html</anchorfile>
      <anchor>a0edf2186ab120bd36f53d69f69fe67e7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNumChannels</name>
      <anchorfile>classAudioVisualiserComponent.html</anchorfile>
      <anchor>a85a80b9f48881fc3a5dfe49ff44ba4d9</anchor>
      <arglist>(int numChannels)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBufferSize</name>
      <anchorfile>classAudioVisualiserComponent.html</anchorfile>
      <anchor>ad711814c23fe0903b75f057a7a971c54</anchor>
      <arglist>(int bufferSize)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSamplesPerBlock</name>
      <anchorfile>classAudioVisualiserComponent.html</anchorfile>
      <anchor>a0e2fdccfb05a21cbca71958cc7988dab</anchor>
      <arglist>(int newNumInputSamplesPerBlock) noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getSamplesPerBlock</name>
      <anchorfile>classAudioVisualiserComponent.html</anchorfile>
      <anchor>ab18fda34f0cc982ce1491fd43f61174e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classAudioVisualiserComponent.html</anchorfile>
      <anchor>a1156a8a1226cc46ba6e746c2eb4fcd49</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pushBuffer</name>
      <anchorfile>classAudioVisualiserComponent.html</anchorfile>
      <anchor>a4506332638d6c553440974ba0974c71c</anchor>
      <arglist>(const AudioSampleBuffer &amp;bufferToPush)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pushBuffer</name>
      <anchorfile>classAudioVisualiserComponent.html</anchorfile>
      <anchor>a9fa4943ecb7a4822a205417c5a6b5eb7</anchor>
      <arglist>(const AudioSourceChannelInfo &amp;bufferToPush)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pushBuffer</name>
      <anchorfile>classAudioVisualiserComponent.html</anchorfile>
      <anchor>a7b6bc6e5b31c9e471425a19cbef8d0ff</anchor>
      <arglist>(const float **channelData, int numChannels, int numSamples)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pushSample</name>
      <anchorfile>classAudioVisualiserComponent.html</anchorfile>
      <anchor>aa0e53a6298d7cd56112fa004a933e598</anchor>
      <arglist>(const float *samplesForEachChannel, int numChannels)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setColours</name>
      <anchorfile>classAudioVisualiserComponent.html</anchorfile>
      <anchor>aa381c0b541be493dcf1121b937dd5704</anchor>
      <arglist>(Colour backgroundColour, Colour waveformColour) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRepaintRate</name>
      <anchorfile>classAudioVisualiserComponent.html</anchorfile>
      <anchor>aa852121a86bde7b1c442f2228219db37</anchor>
      <arglist>(int frequencyInHz)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>paintChannel</name>
      <anchorfile>classAudioVisualiserComponent.html</anchorfile>
      <anchor>a6099471cd180ed29f8a8487682785064</anchor>
      <arglist>(Graphics &amp;, Rectangle&lt; float &gt; bounds, const Range&lt; float &gt; *levels, int numLevels, int nextSample)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getChannelAsPath</name>
      <anchorfile>classAudioVisualiserComponent.html</anchorfile>
      <anchor>a35d39453d1ed981f446967ea13c1fa02</anchor>
      <arglist>(Path &amp;result, const Range&lt; float &gt; *levels, int numLevels, int nextSample)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>paint</name>
      <anchorfile>classAudioVisualiserComponent.html</anchorfile>
      <anchor>a4c9e47c97200c8bfcd43c47a71e4121d</anchor>
      <arglist>(Graphics &amp;) override</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Base64</name>
    <filename>structBase64.html</filename>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>convertToBase64</name>
      <anchorfile>structBase64.html</anchorfile>
      <anchor>a69ae397d3f61cd0299811b984b871ae2</anchor>
      <arglist>(OutputStream &amp;base64Result, const void *sourceData, size_t sourceDataSize)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>convertFromBase64</name>
      <anchorfile>structBase64.html</anchorfile>
      <anchor>a1d31c080284840a2c23ee41175e882ea</anchor>
      <arglist>(OutputStream &amp;binaryOutput, StringRef base64TextInput)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static String</type>
      <name>toBase64</name>
      <anchorfile>structBase64.html</anchorfile>
      <anchor>a810999461ee28244f7b7c1cd709132c4</anchor>
      <arglist>(const void *sourceData, size_t sourceDataSize)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static String</type>
      <name>toBase64</name>
      <anchorfile>structBase64.html</anchorfile>
      <anchor>a5cf5d031757f73b758345bf789ab9a82</anchor>
      <arglist>(const String &amp;textToEncode)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BigInteger</name>
    <filename>classBigInteger.html</filename>
    <member kind="function">
      <type></type>
      <name>BigInteger</name>
      <anchorfile>classBigInteger.html</anchorfile>
      <anchor>a67a108dbe651911a21b3fc4310a505dd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BigInteger</name>
      <anchorfile>classBigInteger.html</anchorfile>
      <anchor>a7383d0c28c57ed4ed3e7fa9edb30d31b</anchor>
      <arglist>(uint32 value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BigInteger</name>
      <anchorfile>classBigInteger.html</anchorfile>
      <anchor>aee6b45535891b6b29f416be59bbe2287</anchor>
      <arglist>(int32 value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BigInteger</name>
      <anchorfile>classBigInteger.html</anchorfile>
      <anchor>a60dbec51bf8fcc775cf40aef3d49ae55</anchor>
      <arglist>(int64 value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BigInteger</name>
      <anchorfile>classBigInteger.html</anchorfile>
      <anchor>a55d60010d6496e9abbd7198f800c1c5c</anchor>
      <arglist>(const BigInteger &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BigInteger</name>
      <anchorfile>classBigInteger.html</anchorfile>
      <anchor>aadf04a04dca6b6e21ef8f5186d5a9201</anchor>
      <arglist>(BigInteger &amp;&amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>BigInteger &amp;</type>
      <name>operator=</name>
      <anchorfile>classBigInteger.html</anchorfile>
      <anchor>ab163743407adf27da3530bf06caca3e2</anchor>
      <arglist>(BigInteger &amp;&amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~BigInteger</name>
      <anchorfile>classBigInteger.html</anchorfile>
      <anchor>a987e3a4e9c4405404719be08caaa3146</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>BigInteger &amp;</type>
      <name>operator=</name>
      <anchorfile>classBigInteger.html</anchorfile>
      <anchor>ad024e49f1e99b6ab698ee55bd9a67f15</anchor>
      <arglist>(const BigInteger &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swapWith</name>
      <anchorfile>classBigInteger.html</anchorfile>
      <anchor>ae529db54204c618db11f5c1adc04173c</anchor>
      <arglist>(BigInteger &amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator[]</name>
      <anchorfile>classBigInteger.html</anchorfile>
      <anchor>abf24792b7ed8b86b3ae25aea147ff99e</anchor>
      <arglist>(int bit) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isZero</name>
      <anchorfile>classBigInteger.html</anchorfile>
      <anchor>ade36d99bf6219959eb9266c30c72c2e5</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isOne</name>
      <anchorfile>classBigInteger.html</anchorfile>
      <anchor>aed8f27aadd82224339e2af19d73494d3</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>toInteger</name>
      <anchorfile>classBigInteger.html</anchorfile>
      <anchor>a67b4e436a4d9e7f51bc73b1d53c19eff</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>toInt64</name>
      <anchorfile>classBigInteger.html</anchorfile>
      <anchor>afb671dce311c1ed3a64f0336f4c76b19</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classBigInteger.html</anchorfile>
      <anchor>a11a1d0f298970cc34e26d63112189983</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearBit</name>
      <anchorfile>classBigInteger.html</anchorfile>
      <anchor>a84b70003be75f5c9465087828b3b8e3b</anchor>
      <arglist>(int bitNumber) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBit</name>
      <anchorfile>classBigInteger.html</anchorfile>
      <anchor>ad75e08bf5ec6959b99b1971fd858459d</anchor>
      <arglist>(int bitNumber)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBit</name>
      <anchorfile>classBigInteger.html</anchorfile>
      <anchor>ab062a5ac87d3b389e420e7a26b35629b</anchor>
      <arglist>(int bitNumber, bool shouldBeSet)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRange</name>
      <anchorfile>classBigInteger.html</anchorfile>
      <anchor>a1bc23c87d83558c4556b76a4c3b60972</anchor>
      <arglist>(int startBit, int numBits, bool shouldBeSet)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insertBit</name>
      <anchorfile>classBigInteger.html</anchorfile>
      <anchor>a90fc29cee61181cff82a70f5307186e8</anchor>
      <arglist>(int bitNumber, bool shouldBeSet)</arglist>
    </member>
    <member kind="function">
      <type>BigInteger</type>
      <name>getBitRange</name>
      <anchorfile>classBigInteger.html</anchorfile>
      <anchor>ab0bc80e65664a854c7b7500f8735e798</anchor>
      <arglist>(int startBit, int numBits) const </arglist>
    </member>
    <member kind="function">
      <type>uint32</type>
      <name>getBitRangeAsInt</name>
      <anchorfile>classBigInteger.html</anchorfile>
      <anchor>ac5d0166b81201203051986fee96eb227</anchor>
      <arglist>(int startBit, int numBits) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBitRangeAsInt</name>
      <anchorfile>classBigInteger.html</anchorfile>
      <anchor>ade91afb8c2681dd4cba363fa51c3eb04</anchor>
      <arglist>(int startBit, int numBits, uint32 valueToSet)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>shiftBits</name>
      <anchorfile>classBigInteger.html</anchorfile>
      <anchor>ac78d23b9c93713430758df01c0a68f48</anchor>
      <arglist>(int howManyBitsLeft, int startBit)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>countNumberOfSetBits</name>
      <anchorfile>classBigInteger.html</anchorfile>
      <anchor>a0db5dd578089614b40127b093a7cac7f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>findNextSetBit</name>
      <anchorfile>classBigInteger.html</anchorfile>
      <anchor>a288fc79aa972d1fd11fc4ff57b4b4d99</anchor>
      <arglist>(int startIndex) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>findNextClearBit</name>
      <anchorfile>classBigInteger.html</anchorfile>
      <anchor>acf68c12ba8881226f8d9da54635964c5</anchor>
      <arglist>(int startIndex) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getHighestBit</name>
      <anchorfile>classBigInteger.html</anchorfile>
      <anchor>a42579f711d8dcd205a87cf5b32a2b9d2</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNegative</name>
      <anchorfile>classBigInteger.html</anchorfile>
      <anchor>ae3188c5cf254ae3328b8e87227d41e00</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNegative</name>
      <anchorfile>classBigInteger.html</anchorfile>
      <anchor>a6397641af659abb9fc60e04b42b7c240</anchor>
      <arglist>(bool shouldBeNegative) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>negate</name>
      <anchorfile>classBigInteger.html</anchorfile>
      <anchor>a2f597f0f63ffc2410423626c5a850e60</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>BigInteger &amp;</type>
      <name>operator+=</name>
      <anchorfile>classBigInteger.html</anchorfile>
      <anchor>a65b2562a60761ae3ab4d4bccd9ebeff9</anchor>
      <arglist>(const BigInteger &amp;)</arglist>
    </member>
    <member kind="function">
      <type>BigInteger &amp;</type>
      <name>operator-=</name>
      <anchorfile>classBigInteger.html</anchorfile>
      <anchor>ad0a16798f29bf020717ad463e6e5a7d0</anchor>
      <arglist>(const BigInteger &amp;)</arglist>
    </member>
    <member kind="function">
      <type>BigInteger &amp;</type>
      <name>operator*=</name>
      <anchorfile>classBigInteger.html</anchorfile>
      <anchor>a3f08e16aaacfd4e62ff276050efdf293</anchor>
      <arglist>(const BigInteger &amp;)</arglist>
    </member>
    <member kind="function">
      <type>BigInteger &amp;</type>
      <name>operator/=</name>
      <anchorfile>classBigInteger.html</anchorfile>
      <anchor>a233c1e319f1c46ac97abcae3c0b73018</anchor>
      <arglist>(const BigInteger &amp;)</arglist>
    </member>
    <member kind="function">
      <type>BigInteger &amp;</type>
      <name>operator|=</name>
      <anchorfile>classBigInteger.html</anchorfile>
      <anchor>adf3193363b4c36257f2bc9c1b1c66f4c</anchor>
      <arglist>(const BigInteger &amp;)</arglist>
    </member>
    <member kind="function">
      <type>BigInteger &amp;</type>
      <name>operator&amp;=</name>
      <anchorfile>classBigInteger.html</anchorfile>
      <anchor>a1a397cb62f266650ab9f0b56d6e96280</anchor>
      <arglist>(const BigInteger &amp;)</arglist>
    </member>
    <member kind="function">
      <type>BigInteger &amp;</type>
      <name>operator^=</name>
      <anchorfile>classBigInteger.html</anchorfile>
      <anchor>a2d6c5bd7b985470766c009b96aace5ac</anchor>
      <arglist>(const BigInteger &amp;)</arglist>
    </member>
    <member kind="function">
      <type>BigInteger &amp;</type>
      <name>operator%=</name>
      <anchorfile>classBigInteger.html</anchorfile>
      <anchor>a2901e97b75ba343525ff170269899f9f</anchor>
      <arglist>(const BigInteger &amp;)</arglist>
    </member>
    <member kind="function">
      <type>BigInteger &amp;</type>
      <name>operator&lt;&lt;=</name>
      <anchorfile>classBigInteger.html</anchorfile>
      <anchor>ae0fc34611974febbef389fe009f3281e</anchor>
      <arglist>(int numBitsToShift)</arglist>
    </member>
    <member kind="function">
      <type>BigInteger &amp;</type>
      <name>operator&gt;&gt;=</name>
      <anchorfile>classBigInteger.html</anchorfile>
      <anchor>a76aace76cfea3cd498606fed2fafa0cf</anchor>
      <arglist>(int numBitsToShift)</arglist>
    </member>
    <member kind="function">
      <type>BigInteger &amp;</type>
      <name>operator++</name>
      <anchorfile>classBigInteger.html</anchorfile>
      <anchor>a9a3d2c5b1447311c814f60f6b096ac59</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>BigInteger &amp;</type>
      <name>operator--</name>
      <anchorfile>classBigInteger.html</anchorfile>
      <anchor>a461022c98269d400f19ba718efcbbdb3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>BigInteger</type>
      <name>operator++</name>
      <anchorfile>classBigInteger.html</anchorfile>
      <anchor>a586b4d3400cf283a04eb646531f53fc2</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>BigInteger</type>
      <name>operator--</name>
      <anchorfile>classBigInteger.html</anchorfile>
      <anchor>af350c94f378084883a5e670b37bf0195</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>BigInteger</type>
      <name>operator-</name>
      <anchorfile>classBigInteger.html</anchorfile>
      <anchor>a1fea890d567aedb7548da280ca75079c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>BigInteger</type>
      <name>operator+</name>
      <anchorfile>classBigInteger.html</anchorfile>
      <anchor>a0e161da59a1d25db995a32dd1fc83ba8</anchor>
      <arglist>(const BigInteger &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>BigInteger</type>
      <name>operator-</name>
      <anchorfile>classBigInteger.html</anchorfile>
      <anchor>ae8ab3494b169126d48dc62ae800552f1</anchor>
      <arglist>(const BigInteger &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>BigInteger</type>
      <name>operator*</name>
      <anchorfile>classBigInteger.html</anchorfile>
      <anchor>ad44eba6253e3c82f558b9340d0e50ed8</anchor>
      <arglist>(const BigInteger &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>BigInteger</type>
      <name>operator/</name>
      <anchorfile>classBigInteger.html</anchorfile>
      <anchor>a98cdca5d1b44afff36100731a05f32ab</anchor>
      <arglist>(const BigInteger &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>BigInteger</type>
      <name>operator|</name>
      <anchorfile>classBigInteger.html</anchorfile>
      <anchor>ab7f0a1a7fcdfa0e4e5054151962c768d</anchor>
      <arglist>(const BigInteger &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>BigInteger</type>
      <name>operator&amp;</name>
      <anchorfile>classBigInteger.html</anchorfile>
      <anchor>a1022555a1b60a962c6722387e46ff19b</anchor>
      <arglist>(const BigInteger &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>BigInteger</type>
      <name>operator^</name>
      <anchorfile>classBigInteger.html</anchorfile>
      <anchor>a01d12ccc4a12a63446a1f76581c17b7e</anchor>
      <arglist>(const BigInteger &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>BigInteger</type>
      <name>operator%</name>
      <anchorfile>classBigInteger.html</anchorfile>
      <anchor>afc969196c420c7c39cbbc511f91829ae</anchor>
      <arglist>(const BigInteger &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>BigInteger</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classBigInteger.html</anchorfile>
      <anchor>abe44149daf6a6bf480d4ad72364373c0</anchor>
      <arglist>(int numBitsToShift) const </arglist>
    </member>
    <member kind="function">
      <type>BigInteger</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>classBigInteger.html</anchorfile>
      <anchor>a6ff2d2aefbfcb788f61407825f27d29c</anchor>
      <arglist>(int numBitsToShift) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classBigInteger.html</anchorfile>
      <anchor>a7ffac8205d1a80cd804fba1a37940b66</anchor>
      <arglist>(const BigInteger &amp;) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classBigInteger.html</anchorfile>
      <anchor>ad87db4513a634b87e5eb8d2e53610145</anchor>
      <arglist>(const BigInteger &amp;) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>classBigInteger.html</anchorfile>
      <anchor>a62613a41ed507959e7f554d430a9da58</anchor>
      <arglist>(const BigInteger &amp;) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>classBigInteger.html</anchorfile>
      <anchor>a1059467e4103dc64253675c1bc6db761</anchor>
      <arglist>(const BigInteger &amp;) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>classBigInteger.html</anchorfile>
      <anchor>a45e548c14ca17264d5476360103539ea</anchor>
      <arglist>(const BigInteger &amp;) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>classBigInteger.html</anchorfile>
      <anchor>a89ceabf3695745df3c813e59f6084a1d</anchor>
      <arglist>(const BigInteger &amp;) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>compare</name>
      <anchorfile>classBigInteger.html</anchorfile>
      <anchor>a50c1da841a87ee9f901447d71bae656c</anchor>
      <arglist>(const BigInteger &amp;other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>compareAbsolute</name>
      <anchorfile>classBigInteger.html</anchorfile>
      <anchor>a06654fb2a0f67e13700cb32ddb1ad253</anchor>
      <arglist>(const BigInteger &amp;other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>divideBy</name>
      <anchorfile>classBigInteger.html</anchorfile>
      <anchor>a9c0bd824652adc58adec98eafa452963</anchor>
      <arglist>(const BigInteger &amp;divisor, BigInteger &amp;remainder)</arglist>
    </member>
    <member kind="function">
      <type>BigInteger</type>
      <name>findGreatestCommonDivisor</name>
      <anchorfile>classBigInteger.html</anchorfile>
      <anchor>a824c6a3e29985ce675474137d6b26b1c</anchor>
      <arglist>(BigInteger other) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>exponentModulo</name>
      <anchorfile>classBigInteger.html</anchorfile>
      <anchor>a6ff2a42d364b1f36c7e51d63cba5a882</anchor>
      <arglist>(const BigInteger &amp;exponent, const BigInteger &amp;modulus)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>inverseModulo</name>
      <anchorfile>classBigInteger.html</anchorfile>
      <anchor>ae071b9b24f05d8e50d8f3d640a225304</anchor>
      <arglist>(const BigInteger &amp;modulus)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>montgomeryMultiplication</name>
      <anchorfile>classBigInteger.html</anchorfile>
      <anchor>a63d85dc2a0b19f7bfdfb6879cad01e25</anchor>
      <arglist>(const BigInteger &amp;other, const BigInteger &amp;modulus, const BigInteger &amp;modulusp, int k)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>extendedEuclidean</name>
      <anchorfile>classBigInteger.html</anchorfile>
      <anchor>a110c0c8e787c623440da2c401d88c6e6</anchor>
      <arglist>(const BigInteger &amp;a, const BigInteger &amp;b, BigInteger &amp;xOut, BigInteger &amp;yOut)</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>toString</name>
      <anchorfile>classBigInteger.html</anchorfile>
      <anchor>a26a951d7f23736579d4a41d5fe037c41</anchor>
      <arglist>(int base, int minimumNumCharacters=1) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>parseString</name>
      <anchorfile>classBigInteger.html</anchorfile>
      <anchor>aebfbb1afffd8237ba77ae317c612a8f8</anchor>
      <arglist>(StringRef text, int base)</arglist>
    </member>
    <member kind="function">
      <type>MemoryBlock</type>
      <name>toMemoryBlock</name>
      <anchorfile>classBigInteger.html</anchorfile>
      <anchor>a94ee80a851a3ae80a2c755715ca4a519</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>loadFromMemoryBlock</name>
      <anchorfile>classBigInteger.html</anchorfile>
      <anchor>af1ad0e8dcaaa34c7d14d01dca224a668</anchor>
      <arglist>(const MemoryBlock &amp;data)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>BitmapLEDProgram</name>
    <filename>structBitmapLEDProgram.html</filename>
    <base>LEDGrid::Program</base>
    <member kind="function">
      <type></type>
      <name>BitmapLEDProgram</name>
      <anchorfile>structBitmapLEDProgram.html</anchorfile>
      <anchor>a3e4791f4567a1f8023aca5ad0d77d216</anchor>
      <arglist>(LEDGrid &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLED</name>
      <anchorfile>structBitmapLEDProgram.html</anchorfile>
      <anchor>ac0897947a0f61327b7676369213824c4</anchor>
      <arglist>(uint32 x, uint32 y, LEDColour)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Program</name>
      <anchorfile>structLEDGrid_1_1Program.html</anchorfile>
      <anchor>accc8eb40e5617b95b4c4243eebd8abdb</anchor>
      <arglist>(LEDGrid &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Program</name>
      <anchorfile>structLEDGrid_1_1Program.html</anchorfile>
      <anchor>a26fe2fd993872f1d5eddde4a2ff10972</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>LEDGrid &amp;</type>
      <name>ledGrid</name>
      <anchorfile>structLEDGrid_1_1Program.html</anchorfile>
      <anchor>a18472e9f39b7231f97db4965690184d6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Block</name>
    <filename>classBlock.html</filename>
    <class kind="struct">Block::ConnectionPort</class>
    <class kind="struct">Block::DataInputPortListener</class>
    <member kind="enumeration">
      <type></type>
      <name>Type</name>
      <anchorfile>classBlock.html</anchorfile>
      <anchor>a2c6b3c425b9b8cb708b23e553fa81324</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>unknown</name>
      <anchorfile>classBlock.html</anchorfile>
      <anchor>a2c6b3c425b9b8cb708b23e553fa81324a55520dc971c98c77e00eb4331207058d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>lightPadBlock</name>
      <anchorfile>classBlock.html</anchorfile>
      <anchor>a2c6b3c425b9b8cb708b23e553fa81324ae901f3708edf53ccf96ff94ff361a3fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>liveBlock</name>
      <anchorfile>classBlock.html</anchorfile>
      <anchor>a2c6b3c425b9b8cb708b23e553fa81324a93f75ccb833781bd24f8ad1755da25e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>loopBlock</name>
      <anchorfile>classBlock.html</anchorfile>
      <anchor>a2c6b3c425b9b8cb708b23e553fa81324a53a61b7ffc6c027d254d52373a5d2d2b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>developerControlBlock</name>
      <anchorfile>classBlock.html</anchorfile>
      <anchor>a2c6b3c425b9b8cb708b23e553fa81324a98ca592426170135a53fdd46bc6d2a53</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>seaboardBlock</name>
      <anchorfile>classBlock.html</anchorfile>
      <anchor>a2c6b3c425b9b8cb708b23e553fa81324ad44a5d974e8503f978e605adc27ca156</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>juce::ReferenceCountedObjectPtr&lt; Block &gt;</type>
      <name>Ptr</name>
      <anchorfile>classBlock.html</anchorfile>
      <anchor>ab9125d8b89e8f6e121e6342ccfb96aec</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>juce::ReferenceCountedArray&lt; Block &gt;</type>
      <name>Array</name>
      <anchorfile>classBlock.html</anchorfile>
      <anchor>a04899ac7b51f4c911cfdee1dda12d4dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>uint64</type>
      <name>UID</name>
      <anchorfile>classBlock.html</anchorfile>
      <anchor>a23857e2a9f15761beabb4b7a3339e156</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>uint32</type>
      <name>Timestamp</name>
      <anchorfile>classBlock.html</anchorfile>
      <anchor>a7e97e8f893c4d37d02a50c4ea3fe42e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Block</name>
      <anchorfile>classBlock.html</anchorfile>
      <anchor>a9f0026f5d2dafca3c101e70e4b34780f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Type</type>
      <name>getType</name>
      <anchorfile>classBlock.html</anchorfile>
      <anchor>aa09e9ff13441f8c6689acb398870c715</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual juce::String</type>
      <name>getDeviceDescription</name>
      <anchorfile>classBlock.html</anchorfile>
      <anchor>a9bf4c5524d032bed6f4f9fe7ac42aac1</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual float</type>
      <name>getBatteryLevel</name>
      <anchorfile>classBlock.html</anchorfile>
      <anchor>a0921046ac4cabfb90e614d430be3c4d2</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isBatteryCharging</name>
      <anchorfile>classBlock.html</anchorfile>
      <anchor>ae1e9122a7d34c5a7588280d948ac8733</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isConnected</name>
      <anchorfile>classBlock.html</anchorfile>
      <anchor>a2ddbc553e7d6c01b5359adb8ee256562</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isMasterBlock</name>
      <anchorfile>classBlock.html</anchorfile>
      <anchor>ad7b1a264a065614451203dc15657b93e</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getWidth</name>
      <anchorfile>classBlock.html</anchorfile>
      <anchor>a7c2dfea896a938c866ae09d676784431</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getHeight</name>
      <anchorfile>classBlock.html</anchorfile>
      <anchor>ae611643a101a7af7382d0c7537998e92</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isHardwareBlock</name>
      <anchorfile>classBlock.html</anchorfile>
      <anchor>a5df64cb106babe70e7010dd527ce662b</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual float</type>
      <name>getMillimetersPerUnit</name>
      <anchorfile>classBlock.html</anchorfile>
      <anchor>aeaf40b6fba680e0722d2c0bb2835b695</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual LEDGrid *</type>
      <name>getLEDGrid</name>
      <anchorfile>classBlock.html</anchorfile>
      <anchor>a6b5061298a0a23598edc5c204ff0458c</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual LEDRow *</type>
      <name>getLEDRow</name>
      <anchorfile>classBlock.html</anchorfile>
      <anchor>aef05c2bacc416c450b9d4eeabf8d2d36</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual juce::Array&lt; StatusLight * &gt;</type>
      <name>getStatusLights</name>
      <anchorfile>classBlock.html</anchorfile>
      <anchor>a89ba287c87d75f061eac4219df144e48</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual TouchSurface *</type>
      <name>getTouchSurface</name>
      <anchorfile>classBlock.html</anchorfile>
      <anchor>aa70fa4170ec51dc2e78c0ff03fb12592</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual juce::Array&lt; ControlButton * &gt;</type>
      <name>getButtons</name>
      <anchorfile>classBlock.html</anchorfile>
      <anchor>acc23b0d9ec2fb2c250a3b120da0dc337</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>supportsGraphics</name>
      <anchorfile>classBlock.html</anchorfile>
      <anchor>a0699fefdfbeb5311c7fd8b9fc1950e81</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual juce::Array&lt; ConnectionPort &gt;</type>
      <name>getPorts</name>
      <anchorfile>classBlock.html</anchorfile>
      <anchor>a4d7cdf778c1a7b1f52962f3397624565</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addDataInputPortListener</name>
      <anchorfile>classBlock.html</anchorfile>
      <anchor>a018545f50301b7d56574574e00b68e0f</anchor>
      <arglist>(DataInputPortListener *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>removeDataInputPortListener</name>
      <anchorfile>classBlock.html</anchorfile>
      <anchor>a7048afb6e8e680b108e9c9933cb18928</anchor>
      <arglist>(DataInputPortListener *)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>sendMessage</name>
      <anchorfile>classBlock.html</anchorfile>
      <anchor>ab20244f18141a5aea2f9c0c6696d2f1d</anchor>
      <arglist>(const void *messageData, size_t messageSize)=0</arglist>
    </member>
    <member kind="variable">
      <type>const juce::String</type>
      <name>serialNumber</name>
      <anchorfile>classBlock.html</anchorfile>
      <anchor>a7d8d1dbd650aa0dad8c37b5b1efbed3e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const UID</type>
      <name>uid</name>
      <anchorfile>classBlock.html</anchorfile>
      <anchor>a8a1c23c1f7ca58fcc032eb45cfc029d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Block</name>
      <anchorfile>classBlock.html</anchorfile>
      <anchor>a596d7845cc8ff7d29fdc0300bac04203</anchor>
      <arglist>(const juce::String &amp;serialNumberToUse)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>juce::ListenerList&lt; DataInputPortListener &gt;</type>
      <name>dataInputPortListeners</name>
      <anchorfile>classBlock.html</anchorfile>
      <anchor>a86de54de4f53ae04cc3fdd5ce9b841bf</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Block::ConnectionPort</name>
    <filename>structBlock_1_1ConnectionPort.html</filename>
    <member kind="enumeration">
      <type></type>
      <name>DeviceEdge</name>
      <anchorfile>structBlock_1_1ConnectionPort.html</anchorfile>
      <anchor>adb5cd70e80bd854e5a40436a99d003ea</anchor>
      <arglist></arglist>
      <enumvalue file="structBlock_1_1ConnectionPort.html" anchor="adb5cd70e80bd854e5a40436a99d003eaa8d8d1437907bca79900ac5f0ea1f5c73">north</enumvalue>
      <enumvalue file="structBlock_1_1ConnectionPort.html" anchor="adb5cd70e80bd854e5a40436a99d003eaa50fd76e33fe5b9617c5ca99008af8904">south</enumvalue>
      <enumvalue file="structBlock_1_1ConnectionPort.html" anchor="adb5cd70e80bd854e5a40436a99d003eaa320381dbf7cd2f31c04baa6b36e1c682">east</enumvalue>
      <enumvalue file="structBlock_1_1ConnectionPort.html" anchor="adb5cd70e80bd854e5a40436a99d003eaada4f0053a5c13882268852ae2da2e466">west</enumvalue>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>structBlock_1_1ConnectionPort.html</anchorfile>
      <anchor>a3e1345ceea690f1eabb213c5bbc3bded</anchor>
      <arglist>(const ConnectionPort &amp;) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>structBlock_1_1ConnectionPort.html</anchorfile>
      <anchor>a5c24af28ddab44ff91d47153e513e996</anchor>
      <arglist>(const ConnectionPort &amp;) const noexcept</arglist>
    </member>
    <member kind="variable">
      <type>DeviceEdge</type>
      <name>edge</name>
      <anchorfile>structBlock_1_1ConnectionPort.html</anchorfile>
      <anchor>ad08422824b0ed2cedd4bc12a75dc6f79</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>index</name>
      <anchorfile>structBlock_1_1ConnectionPort.html</anchorfile>
      <anchor>a01544db019387950e10d511a23817614</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Block::DataInputPortListener</name>
    <filename>structBlock_1_1DataInputPortListener.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~DataInputPortListener</name>
      <anchorfile>structBlock_1_1DataInputPortListener.html</anchorfile>
      <anchor>a19467b8cff5687d9385daa6bf26bc886</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>handleIncomingDataPortMessage</name>
      <anchorfile>structBlock_1_1DataInputPortListener.html</anchorfile>
      <anchor>ac90519100c7ffb63ed70bfe174ce6d24</anchor>
      <arglist>(Block &amp;source, const void *messageData, size_t messageSize)=0</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>BlockDataSheet</name>
    <filename>structBlockDataSheet.html</filename>
    <class kind="struct">BlockDataSheet::ButtonInfo</class>
    <class kind="struct">BlockDataSheet::StatusLEDInfo</class>
    <member kind="function">
      <type></type>
      <name>BlockDataSheet</name>
      <anchorfile>structBlockDataSheet.html</anchorfile>
      <anchor>ae0118456cfd73f525cc3e62d6f11247f</anchor>
      <arglist>(const BlocksProtocol::BlockSerialNumber &amp;serial)</arglist>
    </member>
    <member kind="function">
      <type>Block::ConnectionPort</type>
      <name>convertPortIndexToConnectorPort</name>
      <anchorfile>structBlockDataSheet.html</anchorfile>
      <anchor>a05c13aac995522c739372e6eb1d04393</anchor>
      <arglist>(BlocksProtocol::ConnectorPort port) const noexcept</arglist>
    </member>
    <member kind="variable">
      <type>const BlocksProtocol::BlockSerialNumber</type>
      <name>serialNumber</name>
      <anchorfile>structBlockDataSheet.html</anchorfile>
      <anchor>a6699f59898f85f61c20031299088a885</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Block::Type</type>
      <name>apiType</name>
      <anchorfile>structBlockDataSheet.html</anchorfile>
      <anchor>a7ddbb027dd30d844d4a586f6d241c64b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const char *</type>
      <name>description</name>
      <anchorfile>structBlockDataSheet.html</anchorfile>
      <anchor>a4cb9a9fa5ca783a70ef13798bcad0a4b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>widthUnits</name>
      <anchorfile>structBlockDataSheet.html</anchorfile>
      <anchor>a94b33bf381f4416f6432033644ca9954</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>heightUnits</name>
      <anchorfile>structBlockDataSheet.html</anchorfile>
      <anchor>a73bc9c4e70502730f2cafe7c122fdb96</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>lightGridWidth</name>
      <anchorfile>structBlockDataSheet.html</anchorfile>
      <anchor>abf393da49de696e7d7f46fb8a854caff</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>lightGridHeight</name>
      <anchorfile>structBlockDataSheet.html</anchorfile>
      <anchor>a84edaffa99f47e4222cd3870e6a5b779</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>lightGridStartIndex</name>
      <anchorfile>structBlockDataSheet.html</anchorfile>
      <anchor>a14c4f8d55b2a0dc453fa67923328d87b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>hasTouchSurface</name>
      <anchorfile>structBlockDataSheet.html</anchorfile>
      <anchor>afc7d50120343ec4de04e17efac8c7841</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>numKeywaves</name>
      <anchorfile>structBlockDataSheet.html</anchorfile>
      <anchor>a9e22d78c57256e3b6b6d7bf50bc5b5ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>numLEDRowLEDs</name>
      <anchorfile>structBlockDataSheet.html</anchorfile>
      <anchor>a49116d454be30abf1101139b9a2693da</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32</type>
      <name>programAndHeapSize</name>
      <anchorfile>structBlockDataSheet.html</anchorfile>
      <anchor>a90122c854c90735ef4c583f9f588eac0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>juce::Array&lt; ButtonInfo &gt;</type>
      <name>buttons</name>
      <anchorfile>structBlockDataSheet.html</anchorfile>
      <anchor>a6af51d13e995ec09b2d75322f40d9fe8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>juce::Array&lt; StatusLEDInfo &gt;</type>
      <name>statusLEDs</name>
      <anchorfile>structBlockDataSheet.html</anchorfile>
      <anchor>ad0e1acff4a334de6e896dc55b8389419</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>juce::Array&lt; Block::ConnectionPort &gt;</type>
      <name>ports</name>
      <anchorfile>structBlockDataSheet.html</anchorfile>
      <anchor>ae4af5fce74f2093043fe3144a0032ef9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>juce::Array&lt; const char * &gt;</type>
      <name>dials</name>
      <anchorfile>structBlockDataSheet.html</anchorfile>
      <anchor>a6eac214bfd36f425b99721e98fffe6e9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>BlockDataSheet::ButtonInfo</name>
    <filename>structBlockDataSheet_1_1ButtonInfo.html</filename>
    <member kind="variable">
      <type>ControlButton::ButtonFunction</type>
      <name>type</name>
      <anchorfile>structBlockDataSheet_1_1ButtonInfo.html</anchorfile>
      <anchor>a1126b93fab81d8f4ae3473dbaed11e42</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>x</name>
      <anchorfile>structBlockDataSheet_1_1ButtonInfo.html</anchorfile>
      <anchor>ad989da16dc399e6d57179edca81a2b7c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>y</name>
      <anchorfile>structBlockDataSheet_1_1ButtonInfo.html</anchorfile>
      <anchor>aa5fc8f5bb388f8e869b2e124e70ace0d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>BlockDataSheet::StatusLEDInfo</name>
    <filename>structBlockDataSheet_1_1StatusLEDInfo.html</filename>
    <member kind="variable">
      <type>juce::String</type>
      <name>name</name>
      <anchorfile>structBlockDataSheet_1_1StatusLEDInfo.html</anchorfile>
      <anchor>a7e5fd5243cf053e6d943a71cb4fd1e89</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>x</name>
      <anchorfile>structBlockDataSheet_1_1StatusLEDInfo.html</anchorfile>
      <anchor>afeaccf92d08af7cedab87aaf057b3d23</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>y</name>
      <anchorfile>structBlockDataSheet_1_1StatusLEDInfo.html</anchorfile>
      <anchor>a1ce50d257d8d3cd9cf01dde1160b3e77</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>BlockDeviceConnection</name>
    <filename>structBlockDeviceConnection.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>structBlockDeviceConnection.html</anchorfile>
      <anchor>a3706ebdf7798049571e6db04c430a2f5</anchor>
      <arglist>(const BlockDeviceConnection &amp;) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>structBlockDeviceConnection.html</anchorfile>
      <anchor>ab32562cb6805b179701cf74343ed6e4b</anchor>
      <arglist>(const BlockDeviceConnection &amp;) const noexcept</arglist>
    </member>
    <member kind="variable">
      <type>Block::UID</type>
      <name>device1</name>
      <anchorfile>structBlockDeviceConnection.html</anchorfile>
      <anchor>a1b082f8ace5fa47ff897c5a664be64fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Block::UID</type>
      <name>device2</name>
      <anchorfile>structBlockDeviceConnection.html</anchorfile>
      <anchor>a13d7b73573f67924291c352ac45aa278</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Block::ConnectionPort</type>
      <name>connectionPortOnDevice1</name>
      <anchorfile>structBlockDeviceConnection.html</anchorfile>
      <anchor>a18ce02bccf32c194eea19011a0c32a89</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Block::ConnectionPort</type>
      <name>connectionPortOnDevice2</name>
      <anchorfile>structBlockDeviceConnection.html</anchorfile>
      <anchor>af1e309e087f992e5cb487ab05fcedacc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>BlockSerialNumber</name>
    <filename>structBlockSerialNumber.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>structBlockSerialNumber.html</anchorfile>
      <anchor>af8154134f01f04a947a491071425b1da</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isPadBlock</name>
      <anchorfile>structBlockSerialNumber.html</anchorfile>
      <anchor>aeef05c253b0a9b7830bbca9d43735784</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isLiveBlock</name>
      <anchorfile>structBlockSerialNumber.html</anchorfile>
      <anchor>ae8ab9686373a47b50068ff9f84c9eccd</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isLoopBlock</name>
      <anchorfile>structBlockSerialNumber.html</anchorfile>
      <anchor>a9dd15add4013a8168e81a056c3f10b1e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isDevCtrlBlock</name>
      <anchorfile>structBlockSerialNumber.html</anchorfile>
      <anchor>a89738368379500328f7beb27d8974205</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isAnyControlBlock</name>
      <anchorfile>structBlockSerialNumber.html</anchorfile>
      <anchor>a8fde3898538f2b5d2c7157ae515df258</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasPrefix</name>
      <anchorfile>structBlockSerialNumber.html</anchorfile>
      <anchor>a01b8ec89af09161466d7f29d318f7bc8</anchor>
      <arglist>(const char *prefix) const noexcept</arglist>
    </member>
    <member kind="variable">
      <type>uint8</type>
      <name>serial</name>
      <anchorfile>structBlockSerialNumber.html</anchorfile>
      <anchor>aee6cb67cd8c8f0ecc9c6a6189558c7c3</anchor>
      <arglist>[16]</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>BlockTopology</name>
    <filename>structBlockTopology.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>structBlockTopology.html</anchorfile>
      <anchor>afea7cfab05a6913c71b98e74b5263761</anchor>
      <arglist>(const BlockTopology &amp;) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>structBlockTopology.html</anchorfile>
      <anchor>a98d8f8a004f7a65cf927987c0cda0b0b</anchor>
      <arglist>(const BlockTopology &amp;) const noexcept</arglist>
    </member>
    <member kind="variable">
      <type>Block::Array</type>
      <name>blocks</name>
      <anchorfile>structBlockTopology.html</anchorfile>
      <anchor>a526d6f3eb1da5b434176445fe68657de</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>juce::Array&lt; BlockDeviceConnection &gt;</type>
      <name>connections</name>
      <anchorfile>structBlockTopology.html</anchorfile>
      <anchor>a13c44d0f739830ed25c65eed8321aa28</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BlowFish</name>
    <filename>classBlowFish.html</filename>
    <member kind="function">
      <type></type>
      <name>BlowFish</name>
      <anchorfile>classBlowFish.html</anchorfile>
      <anchor>a7a90652859afaf45194281939e881270</anchor>
      <arglist>(const void *keyData, int keyBytes)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BlowFish</name>
      <anchorfile>classBlowFish.html</anchorfile>
      <anchor>a33f39cf5622a285c351727a64ed1507a</anchor>
      <arglist>(const BlowFish &amp;)</arglist>
    </member>
    <member kind="function">
      <type>BlowFish &amp;</type>
      <name>operator=</name>
      <anchorfile>classBlowFish.html</anchorfile>
      <anchor>aa23769a68749a6fe7b285b9ce2119b5d</anchor>
      <arglist>(const BlowFish &amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~BlowFish</name>
      <anchorfile>classBlowFish.html</anchorfile>
      <anchor>a69c3837d2fea4786d294442536d4d6d3</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>encrypt</name>
      <anchorfile>classBlowFish.html</anchorfile>
      <anchor>a76dbc9a108227a581f9e79ff83396aba</anchor>
      <arglist>(uint32 &amp;data1, uint32 &amp;data2) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>decrypt</name>
      <anchorfile>classBlowFish.html</anchorfile>
      <anchor>aa43faa09ee4018a615ed81b30607ed2d</anchor>
      <arglist>(uint32 &amp;data1, uint32 &amp;data2) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>encrypt</name>
      <anchorfile>classBlowFish.html</anchorfile>
      <anchor>aa5c7098b06f98cb1b101cc03fb00d688</anchor>
      <arglist>(MemoryBlock &amp;data) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>decrypt</name>
      <anchorfile>classBlowFish.html</anchorfile>
      <anchor>ac9c50b974ecf4f0dd75207ec38c345ec</anchor>
      <arglist>(MemoryBlock &amp;data) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>encrypt</name>
      <anchorfile>classBlowFish.html</anchorfile>
      <anchor>a1781d5be74001b555b1d7321b800805e</anchor>
      <arglist>(void *buffer, size_t sizeOfMsg, size_t bufferSize) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>decrypt</name>
      <anchorfile>classBlowFish.html</anchorfile>
      <anchor>ae1b0a7eadbaccbdc55a2a6f3c1543ef7</anchor>
      <arglist>(void *buffer, size_t bytes) const noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BluetoothMidiDevicePairingDialogue</name>
    <filename>classBluetoothMidiDevicePairingDialogue.html</filename>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>open</name>
      <anchorfile>classBluetoothMidiDevicePairingDialogue.html</anchorfile>
      <anchor>a368ee42f0c472a93a1654643ee308ead</anchor>
      <arglist>(ModalComponentManager::Callback *exitCallback=nullptr)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isAvailable</name>
      <anchorfile>classBluetoothMidiDevicePairingDialogue.html</anchorfile>
      <anchor>ae098fb3df2ff875817d3540b0bdb6c26</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BooleanPropertyComponent</name>
    <filename>classBooleanPropertyComponent.html</filename>
    <base>PropertyComponent</base>
    <member kind="enumeration">
      <type></type>
      <name>ColourIds</name>
      <anchorfile>classBooleanPropertyComponent.html</anchorfile>
      <anchor>a179225eac56b3eff314b3255a34870cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>backgroundColourId</name>
      <anchorfile>classBooleanPropertyComponent.html</anchorfile>
      <anchor>a179225eac56b3eff314b3255a34870cbaa2baedbc46759e527e9d58fcff909837</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>outlineColourId</name>
      <anchorfile>classBooleanPropertyComponent.html</anchorfile>
      <anchor>a179225eac56b3eff314b3255a34870cbaeca91c271e1d3ff508a3d9059ab8076c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>ColourIds</name>
      <anchorfile>classPropertyComponent.html</anchorfile>
      <anchor>ab0dbefdbbbaa3f69df288b6970529c5b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>backgroundColourId</name>
      <anchorfile>classPropertyComponent.html</anchorfile>
      <anchor>ab0dbefdbbbaa3f69df288b6970529c5bacc13328b88de6630938e8dd8dc432c2e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>labelTextColourId</name>
      <anchorfile>classPropertyComponent.html</anchorfile>
      <anchor>ab0dbefdbbbaa3f69df288b6970529c5ba8c2fb4e7c4bdf509c98bac7ea8a81b5b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BooleanPropertyComponent</name>
      <anchorfile>classBooleanPropertyComponent.html</anchorfile>
      <anchor>a9bdf7035a16fadfeaffd4c37ad56969d</anchor>
      <arglist>(const Value &amp;valueToControl, const String &amp;propertyName, const String &amp;buttonText)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~BooleanPropertyComponent</name>
      <anchorfile>classBooleanPropertyComponent.html</anchorfile>
      <anchor>afde82e86dafa0ce21c07f018ab7f049a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setState</name>
      <anchorfile>classBooleanPropertyComponent.html</anchorfile>
      <anchor>a6e2b7a6d257e7c9b6d7ff9373c9a98c7</anchor>
      <arglist>(bool newState)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getState</name>
      <anchorfile>classBooleanPropertyComponent.html</anchorfile>
      <anchor>a873145d733afe272da3ea2950c0fd7eb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>paint</name>
      <anchorfile>classBooleanPropertyComponent.html</anchorfile>
      <anchor>a5a535012244efedf4e79e356a075fbcb</anchor>
      <arglist>(Graphics &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>refresh</name>
      <anchorfile>classBooleanPropertyComponent.html</anchorfile>
      <anchor>a44fa84b7da2ed250721acbe57820fc87</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>buttonClicked</name>
      <anchorfile>classBooleanPropertyComponent.html</anchorfile>
      <anchor>a2552e60f3bcdb423b62d651e51c962a9</anchor>
      <arglist>(Button *) override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PropertyComponent</name>
      <anchorfile>classPropertyComponent.html</anchorfile>
      <anchor>abcc554f33995e1b424ac1a0858198f21</anchor>
      <arglist>(const String &amp;propertyName, int preferredHeight=25)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~PropertyComponent</name>
      <anchorfile>classPropertyComponent.html</anchorfile>
      <anchor>a34f299f31134464667b23ff94d5afd2e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getPreferredHeight</name>
      <anchorfile>classPropertyComponent.html</anchorfile>
      <anchor>a733270fac94b39b4db089d79c71a66cf</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPreferredHeight</name>
      <anchorfile>classPropertyComponent.html</anchorfile>
      <anchor>a7a1419d38e6281bc7fef79c89656024a</anchor>
      <arglist>(int newHeight) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>paint</name>
      <anchorfile>classPropertyComponent.html</anchorfile>
      <anchor>acf6942b726a973f80901fcbbbed900eb</anchor>
      <arglist>(Graphics &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resized</name>
      <anchorfile>classPropertyComponent.html</anchorfile>
      <anchor>a96ec6d515107ae96b8e7b8c154fbda67</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enablementChanged</name>
      <anchorfile>classPropertyComponent.html</anchorfile>
      <anchor>a5b75f072da6b54155076ddc5c5cf22da</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setTooltip</name>
      <anchorfile>classSettableTooltipClient.html</anchorfile>
      <anchor>aa374ef7cc0eea80f3922f5d584da79e9</anchor>
      <arglist>(const String &amp;newTooltip)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BooleanPropertyComponent</name>
      <anchorfile>classBooleanPropertyComponent.html</anchorfile>
      <anchor>a866e6decfd615cbdefe91da904bde660</anchor>
      <arglist>(const String &amp;propertyName, const String &amp;buttonTextWhenTrue, const String &amp;buttonTextWhenFalse)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>preferredHeight</name>
      <anchorfile>classPropertyComponent.html</anchorfile>
      <anchor>ae912e7f6c12e76cf3dc2a9f0d210e4ed</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BorderSize</name>
    <filename>classBorderSize.html</filename>
    <templarg>ValueType</templarg>
    <member kind="function">
      <type></type>
      <name>BorderSize</name>
      <anchorfile>classBorderSize.html</anchorfile>
      <anchor>af27d39b618c5ec86f5eafc38a044e9af</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BorderSize</name>
      <anchorfile>classBorderSize.html</anchorfile>
      <anchor>a5471c56eb3c2bf1eedc5fa84cfb31155</anchor>
      <arglist>(const BorderSize &amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BorderSize</name>
      <anchorfile>classBorderSize.html</anchorfile>
      <anchor>ad089c00ba251def844b0dfb79d9da95f</anchor>
      <arglist>(ValueType topGap, ValueType leftGap, ValueType bottomGap, ValueType rightGap) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BorderSize</name>
      <anchorfile>classBorderSize.html</anchorfile>
      <anchor>aa678d15b6acb3bcfc2c97e2fd49be57a</anchor>
      <arglist>(ValueType allGaps) noexcept</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>getTop</name>
      <anchorfile>classBorderSize.html</anchorfile>
      <anchor>ac0bc5ff4e31f6955f8d83dfede7986a5</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>getLeft</name>
      <anchorfile>classBorderSize.html</anchorfile>
      <anchor>a83c7bc89d97447a9d275e54d6236599c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>getBottom</name>
      <anchorfile>classBorderSize.html</anchorfile>
      <anchor>a4b757391273b60fb2b5c047c6d37c36b</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>getRight</name>
      <anchorfile>classBorderSize.html</anchorfile>
      <anchor>a853a83e49056433cb25f6189954eb7eb</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>getTopAndBottom</name>
      <anchorfile>classBorderSize.html</anchorfile>
      <anchor>a60a3974f3ae9ead86e7e752c251f87f4</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>getLeftAndRight</name>
      <anchorfile>classBorderSize.html</anchorfile>
      <anchor>adb885e18f92582eec88e36ce0954111b</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEmpty</name>
      <anchorfile>classBorderSize.html</anchorfile>
      <anchor>aacf6e4e81a579e7440484a5886e91c68</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTop</name>
      <anchorfile>classBorderSize.html</anchorfile>
      <anchor>abaf52266cecbdf53621d1833e13bd130</anchor>
      <arglist>(ValueType newTopGap) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLeft</name>
      <anchorfile>classBorderSize.html</anchorfile>
      <anchor>ac17aba0420116785bf1e8fb687ab01e7</anchor>
      <arglist>(ValueType newLeftGap) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBottom</name>
      <anchorfile>classBorderSize.html</anchorfile>
      <anchor>a2f3dc09168142824865d8e2b191d535f</anchor>
      <arglist>(ValueType newBottomGap) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRight</name>
      <anchorfile>classBorderSize.html</anchorfile>
      <anchor>a5f54de3869e7efff78e8429a81bd38bb</anchor>
      <arglist>(ValueType newRightGap) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Rectangle&lt; ValueType &gt;</type>
      <name>subtractedFrom</name>
      <anchorfile>classBorderSize.html</anchorfile>
      <anchor>addb07fd003bbf5cfd57433b26a8890fa</anchor>
      <arglist>(const Rectangle&lt; ValueType &gt; &amp;original) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>subtractFrom</name>
      <anchorfile>classBorderSize.html</anchorfile>
      <anchor>a05a0b857fc434cc89718d2404373df85</anchor>
      <arglist>(Rectangle&lt; ValueType &gt; &amp;rectangle) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Rectangle&lt; ValueType &gt;</type>
      <name>addedTo</name>
      <anchorfile>classBorderSize.html</anchorfile>
      <anchor>a17696eaf86dcf3115724d8aac530b3dd</anchor>
      <arglist>(const Rectangle&lt; ValueType &gt; &amp;original) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addTo</name>
      <anchorfile>classBorderSize.html</anchorfile>
      <anchor>a58e8866ce59503a31f71574fb1799065</anchor>
      <arglist>(Rectangle&lt; ValueType &gt; &amp;rectangle) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classBorderSize.html</anchorfile>
      <anchor>a70117c6c8528fe571c8d91b282a541e6</anchor>
      <arglist>(const BorderSize &amp;other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classBorderSize.html</anchorfile>
      <anchor>a9aa153628e58a1e32fb11df0477dc13c</anchor>
      <arglist>(const BorderSize &amp;other) const noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Box2DRenderer</name>
    <filename>classBox2DRenderer.html</filename>
    <member kind="function">
      <type></type>
      <name>Box2DRenderer</name>
      <anchorfile>classBox2DRenderer.html</anchorfile>
      <anchor>a82f5d69efdedbcf1868f173779f42789</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>render</name>
      <anchorfile>classBox2DRenderer.html</anchorfile>
      <anchor>a9dc474dbf89965501a5d92300c46dfa0</anchor>
      <arglist>(Graphics &amp;g, b2World &amp;world, float box2DWorldLeft, float box2DWorldTop, float box2DWorldRight, float box2DWorldBottom, const Rectangle&lt; float &gt; &amp;targetArea)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>DrawPolygon</name>
      <anchorfile>classBox2DRenderer.html</anchorfile>
      <anchor>aaa4e0d0b1b0836a151ee64e4975f6cfa</anchor>
      <arglist>(const b2Vec2 *, int32, const b2Color &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>DrawSolidPolygon</name>
      <anchorfile>classBox2DRenderer.html</anchorfile>
      <anchor>aadf22c1d6cc40c34baf375a010495ceb</anchor>
      <arglist>(const b2Vec2 *, int32, const b2Color &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>DrawCircle</name>
      <anchorfile>classBox2DRenderer.html</anchorfile>
      <anchor>a3a4f51689c3093396f01ff77415ea302</anchor>
      <arglist>(const b2Vec2 &amp;center, float32 radius, const b2Color &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>DrawSolidCircle</name>
      <anchorfile>classBox2DRenderer.html</anchorfile>
      <anchor>ad91bf735174b843431b3330bfc7b5edd</anchor>
      <arglist>(const b2Vec2 &amp;center, float32 radius, const b2Vec2 &amp;axis, const b2Color &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>DrawSegment</name>
      <anchorfile>classBox2DRenderer.html</anchorfile>
      <anchor>a8183ff94a606e87dfc1b255546502c29</anchor>
      <arglist>(const b2Vec2 &amp;p1, const b2Vec2 &amp;p2, const b2Color &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>DrawTransform</name>
      <anchorfile>classBox2DRenderer.html</anchorfile>
      <anchor>a4098d30d53387a738e74ef65943a7816</anchor>
      <arglist>(const b2Transform &amp;xf) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Colour</type>
      <name>getColour</name>
      <anchorfile>classBox2DRenderer.html</anchorfile>
      <anchor>a7bced16fc679c93c82bd7c5bb81b6031</anchor>
      <arglist>(const b2Color &amp;) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual float</type>
      <name>getLineThickness</name>
      <anchorfile>classBox2DRenderer.html</anchorfile>
      <anchor>aa08bd17ea18b9a5ddd6c5d62c17fab96</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Graphics *</type>
      <name>graphics</name>
      <anchorfile>classBox2DRenderer.html</anchorfile>
      <anchor>a239c1aa7ebd09f8be7d5cd3cfbcd7611</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BubbleComponent</name>
    <filename>classBubbleComponent.html</filename>
    <base>Component</base>
    <class kind="struct">BubbleComponent::LookAndFeelMethods</class>
    <member kind="enumeration">
      <type></type>
      <name>BubblePlacement</name>
      <anchorfile>classBubbleComponent.html</anchorfile>
      <anchor>aba96d481d723fd2549f497ccd7ed41a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>above</name>
      <anchorfile>classBubbleComponent.html</anchorfile>
      <anchor>aba96d481d723fd2549f497ccd7ed41a3a46398aeabcf45a9b397beca92dcf85b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>below</name>
      <anchorfile>classBubbleComponent.html</anchorfile>
      <anchor>aba96d481d723fd2549f497ccd7ed41a3a971b484b6fd9e0e0f97ec4ef2c64de50</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>left</name>
      <anchorfile>classBubbleComponent.html</anchorfile>
      <anchor>aba96d481d723fd2549f497ccd7ed41a3a55e0c30c9b033af546bc8ffd96c0534c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>right</name>
      <anchorfile>classBubbleComponent.html</anchorfile>
      <anchor>aba96d481d723fd2549f497ccd7ed41a3a2dee448ac06c9b0186287c5f7e071b33</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>ColourIds</name>
      <anchorfile>classBubbleComponent.html</anchorfile>
      <anchor>acd4f589f242a148462d90a2ada86a999</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>backgroundColourId</name>
      <anchorfile>classBubbleComponent.html</anchorfile>
      <anchor>acd4f589f242a148462d90a2ada86a999a56755cadccae478be8ee4a7cd1d82e4f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>outlineColourId</name>
      <anchorfile>classBubbleComponent.html</anchorfile>
      <anchor>acd4f589f242a148462d90a2ada86a999ade450dde688dbb5680ce965966c8486d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~BubbleComponent</name>
      <anchorfile>classBubbleComponent.html</anchorfile>
      <anchor>a11f1e39d0be20493c46477fe59e30685</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAllowedPlacement</name>
      <anchorfile>classBubbleComponent.html</anchorfile>
      <anchor>a7c0081674149dc2a8380a0b20cf6f6ae</anchor>
      <arglist>(int newPlacement)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPosition</name>
      <anchorfile>classBubbleComponent.html</anchorfile>
      <anchor>a279ce3e2971a1f48711260f513c5508f</anchor>
      <arglist>(Component *componentToPointTo, int distanceFromTarget=15, int arrowLength=10)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPosition</name>
      <anchorfile>classBubbleComponent.html</anchorfile>
      <anchor>a846beea742ea2bf5f732b5e64a049728</anchor>
      <arglist>(Point&lt; int &gt; arrowTipPosition, int arrowLength=10)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPosition</name>
      <anchorfile>classBubbleComponent.html</anchorfile>
      <anchor>a9454d4c59f98a337020d57083a0ee100</anchor>
      <arglist>(Rectangle&lt; int &gt; rectangleToPointTo, int distanceFromTarget=15, int arrowLength=10)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>paint</name>
      <anchorfile>classBubbleComponent.html</anchorfile>
      <anchor>ab7f569418ed2401a94663658622703d5</anchor>
      <arglist>(Graphics &amp;) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BubbleComponent</name>
      <anchorfile>classBubbleComponent.html</anchorfile>
      <anchor>a7cce909ece8964165fdcfc173940b74b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>getContentSize</name>
      <anchorfile>classBubbleComponent.html</anchorfile>
      <anchor>a0763d0b281eaea28861f8a3d3e7b6dbe</anchor>
      <arglist>(int &amp;width, int &amp;height)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>paintContent</name>
      <anchorfile>classBubbleComponent.html</anchorfile>
      <anchor>a30f7ac74c7ce0452d0a85c72db2309f1</anchor>
      <arglist>(Graphics &amp;g, int width, int height)=0</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>BubbleComponent::LookAndFeelMethods</name>
    <filename>structBubbleComponent_1_1LookAndFeelMethods.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~LookAndFeelMethods</name>
      <anchorfile>structBubbleComponent_1_1LookAndFeelMethods.html</anchorfile>
      <anchor>a931851730950cb1f9ed75e4e71143196</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>drawBubble</name>
      <anchorfile>structBubbleComponent_1_1LookAndFeelMethods.html</anchorfile>
      <anchor>af7a870b9fd611867b550d1fb2be0f350</anchor>
      <arglist>(Graphics &amp;, BubbleComponent &amp;, const Point&lt; float &gt; &amp;positionOfTip, const Rectangle&lt; float &gt; &amp;body)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BubbleMessageComponent</name>
    <filename>classBubbleMessageComponent.html</filename>
    <base>BubbleComponent</base>
    <base protection="private">Timer</base>
    <member kind="function">
      <type></type>
      <name>BubbleMessageComponent</name>
      <anchorfile>classBubbleMessageComponent.html</anchorfile>
      <anchor>a17b34a71669df21e5632440d1a43b844</anchor>
      <arglist>(int fadeOutLengthMs=150)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~BubbleMessageComponent</name>
      <anchorfile>classBubbleMessageComponent.html</anchorfile>
      <anchor>aae5d8029a52bbb1d677adbfda80a978e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>showAt</name>
      <anchorfile>classBubbleMessageComponent.html</anchorfile>
      <anchor>accf152caac1319d8a05d145a94fc7022</anchor>
      <arglist>(const Rectangle&lt; int &gt; &amp;position, const AttributedString &amp;message, int numMillisecondsBeforeRemoving, bool removeWhenMouseClicked=true, bool deleteSelfAfterUse=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>showAt</name>
      <anchorfile>classBubbleMessageComponent.html</anchorfile>
      <anchor>a578aec6fc92df2b9a70f29250b4ea243</anchor>
      <arglist>(Component *component, const AttributedString &amp;message, int numMillisecondsBeforeRemoving, bool removeWhenMouseClicked=true, bool deleteSelfAfterUse=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getContentSize</name>
      <anchorfile>classBubbleMessageComponent.html</anchorfile>
      <anchor>a1db6f15c953b0dd9d800d1823a06b226</anchor>
      <arglist>(int &amp;w, int &amp;h) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>paintContent</name>
      <anchorfile>classBubbleMessageComponent.html</anchorfile>
      <anchor>a07a481773727c7ab38c5b841df1f53f6</anchor>
      <arglist>(Graphics &amp;g, int w, int h) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>timerCallback</name>
      <anchorfile>classBubbleMessageComponent.html</anchorfile>
      <anchor>a3c18ebec472bdae07e7544261e6dc372</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BufferedInputStream</name>
    <filename>classBufferedInputStream.html</filename>
    <base>InputStream</base>
    <member kind="function">
      <type></type>
      <name>BufferedInputStream</name>
      <anchorfile>classBufferedInputStream.html</anchorfile>
      <anchor>a28fb830b98e3134853083fdcdaaacb2d</anchor>
      <arglist>(InputStream *sourceStream, int bufferSize, bool deleteSourceWhenDestroyed)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BufferedInputStream</name>
      <anchorfile>classBufferedInputStream.html</anchorfile>
      <anchor>ae4ba1382a422e4b4049284ab18f69b05</anchor>
      <arglist>(InputStream &amp;sourceStream, int bufferSize)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~BufferedInputStream</name>
      <anchorfile>classBufferedInputStream.html</anchorfile>
      <anchor>ab353c2eacfa486206f3e155619162c3c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>getTotalLength</name>
      <anchorfile>classBufferedInputStream.html</anchorfile>
      <anchor>a6d304c21b8b657fc6429815ea5d26553</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>getPosition</name>
      <anchorfile>classBufferedInputStream.html</anchorfile>
      <anchor>a4bae1b9b3bbaf6f47859b726cf1b0454</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setPosition</name>
      <anchorfile>classBufferedInputStream.html</anchorfile>
      <anchor>ac71d4e069913c419f46b98322d5099c1</anchor>
      <arglist>(int64 newPosition) override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>read</name>
      <anchorfile>classBufferedInputStream.html</anchorfile>
      <anchor>a5f210b5232af59aff2d01279174d9d9c</anchor>
      <arglist>(void *destBuffer, int maxBytesToRead) override</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>readString</name>
      <anchorfile>classBufferedInputStream.html</anchorfile>
      <anchor>aedf621e448b5d415e68dc55eedbeebea</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isExhausted</name>
      <anchorfile>classBufferedInputStream.html</anchorfile>
      <anchor>a22ebb22c9c3ee96ebabf6b025b957771</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~InputStream</name>
      <anchorfile>classInputStream.html</anchorfile>
      <anchor>a8c49246dd62e559578732f518f159432</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>getNumBytesRemaining</name>
      <anchorfile>classInputStream.html</anchorfile>
      <anchor>adc989306067e47deabad840d05846290</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual char</type>
      <name>readByte</name>
      <anchorfile>classInputStream.html</anchorfile>
      <anchor>a2e5944641712d84b6da2eee5d394326a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>readBool</name>
      <anchorfile>classInputStream.html</anchorfile>
      <anchor>a37d1e4956da4fb9f765f16f9c4b4ec3b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual short</type>
      <name>readShort</name>
      <anchorfile>classInputStream.html</anchorfile>
      <anchor>a0c4b0f9f1fa9515fea5a98d2ffe7ae02</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual short</type>
      <name>readShortBigEndian</name>
      <anchorfile>classInputStream.html</anchorfile>
      <anchor>ac33bbf8ae4597a30bde70cbdbc6bfa5b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>readInt</name>
      <anchorfile>classInputStream.html</anchorfile>
      <anchor>a59eb456ebfbe9d4c7fdfd4c14337e19a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>readIntBigEndian</name>
      <anchorfile>classInputStream.html</anchorfile>
      <anchor>a84ab1bcc547eee621c4c6c2502af808d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int64</type>
      <name>readInt64</name>
      <anchorfile>classInputStream.html</anchorfile>
      <anchor>a58941fd7cf4279e49d4697750f837a56</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int64</type>
      <name>readInt64BigEndian</name>
      <anchorfile>classInputStream.html</anchorfile>
      <anchor>a8894f1c01c6e0de4b5dd9b9c1fe06c4b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual float</type>
      <name>readFloat</name>
      <anchorfile>classInputStream.html</anchorfile>
      <anchor>a46d7f191f1872bc27550db3fa0733f59</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual float</type>
      <name>readFloatBigEndian</name>
      <anchorfile>classInputStream.html</anchorfile>
      <anchor>a4d19fef152296085c477882e0650b011</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>readDouble</name>
      <anchorfile>classInputStream.html</anchorfile>
      <anchor>a31626a82ad48629a202135ac925ffecd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>readDoubleBigEndian</name>
      <anchorfile>classInputStream.html</anchorfile>
      <anchor>a7c7a2928053424caf51986d9e6fdaa35</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>readCompressedInt</name>
      <anchorfile>classInputStream.html</anchorfile>
      <anchor>a3e3643991f4103c5cfc1b8c61c6a3e92</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual String</type>
      <name>readNextLine</name>
      <anchorfile>classInputStream.html</anchorfile>
      <anchor>af16acc8f2fd769adb559a781ece8e903</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual String</type>
      <name>readEntireStreamAsString</name>
      <anchorfile>classInputStream.html</anchorfile>
      <anchor>aeb956ec5838d7f64153141ef51977c40</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual size_t</type>
      <name>readIntoMemoryBlock</name>
      <anchorfile>classInputStream.html</anchorfile>
      <anchor>a7708d25af96e8d8b937a4642dcf55a23</anchor>
      <arglist>(MemoryBlock &amp;destBlock, ssize_t maxNumBytesToRead=-1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>skipNextBytes</name>
      <anchorfile>classInputStream.html</anchorfile>
      <anchor>a7e3005cc6a58cd2ded6094dd6dd06542</anchor>
      <arglist>(int64 numBytesToSkip)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>InputStream</name>
      <anchorfile>classInputStream.html</anchorfile>
      <anchor>a7652c5cf6f92901c99ddb19a8adf2268</anchor>
      <arglist>() noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BufferingAudioReader</name>
    <filename>classBufferingAudioReader.html</filename>
    <base>AudioFormatReader</base>
    <base protection="private">TimeSliceClient</base>
    <member kind="function">
      <type></type>
      <name>BufferingAudioReader</name>
      <anchorfile>classBufferingAudioReader.html</anchorfile>
      <anchor>ab68442def75d9d7b8a1f78883992041c</anchor>
      <arglist>(AudioFormatReader *sourceReader, TimeSliceThread &amp;timeSliceThread, int samplesToBuffer)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~BufferingAudioReader</name>
      <anchorfile>classBufferingAudioReader.html</anchorfile>
      <anchor>a568c48a6b62ce2acf4e0e59f7ac78711</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setReadTimeout</name>
      <anchorfile>classBufferingAudioReader.html</anchorfile>
      <anchor>a5a27246602984c5614b7f708005a9d34</anchor>
      <arglist>(int timeoutMilliseconds) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>readSamples</name>
      <anchorfile>classBufferingAudioReader.html</anchorfile>
      <anchor>a578f7686c957cfb442a5a385c2ebbbeb</anchor>
      <arglist>(int **destSamples, int numDestChannels, int startOffsetInDestBuffer, int64 startSampleInFile, int numSamples) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BufferingAudioSource</name>
    <filename>classBufferingAudioSource.html</filename>
    <base>PositionableAudioSource</base>
    <base protection="private">TimeSliceClient</base>
    <member kind="function">
      <type></type>
      <name>BufferingAudioSource</name>
      <anchorfile>classBufferingAudioSource.html</anchorfile>
      <anchor>a325821cdc46ccbfcbad4c0c4e224e9f6</anchor>
      <arglist>(PositionableAudioSource *source, TimeSliceThread &amp;backgroundThread, bool deleteSourceWhenDeleted, int numberOfSamplesToBuffer, int numberOfChannels=2, bool prefillBufferOnPrepareToPlay=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~BufferingAudioSource</name>
      <anchorfile>classBufferingAudioSource.html</anchorfile>
      <anchor>a2633cef1b35b4d435db60374d7b2859f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>prepareToPlay</name>
      <anchorfile>classBufferingAudioSource.html</anchorfile>
      <anchor>aa7fccfe307c0c3f8c4c1af52b97cb6c1</anchor>
      <arglist>(int samplesPerBlockExpected, double sampleRate) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>releaseResources</name>
      <anchorfile>classBufferingAudioSource.html</anchorfile>
      <anchor>a62ec9a6127f4728ecb84464f807b648b</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getNextAudioBlock</name>
      <anchorfile>classBufferingAudioSource.html</anchorfile>
      <anchor>a53ed823e042d3b78ff7f11985d88042c</anchor>
      <arglist>(const AudioSourceChannelInfo &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNextReadPosition</name>
      <anchorfile>classBufferingAudioSource.html</anchorfile>
      <anchor>aaa1d23f64abd488771fea3e6cab68ce2</anchor>
      <arglist>(int64 newPosition) override</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>getNextReadPosition</name>
      <anchorfile>classBufferingAudioSource.html</anchorfile>
      <anchor>aa0d8d7021519e011877656c1725accea</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>getTotalLength</name>
      <anchorfile>classBufferingAudioSource.html</anchorfile>
      <anchor>aa9c0838f1c7c8cd5a9f93f72681b3bd8</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isLooping</name>
      <anchorfile>classBufferingAudioSource.html</anchorfile>
      <anchor>ad5db3f567c5b68306f23fb3fed5367c0</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>waitForNextAudioBlockReady</name>
      <anchorfile>classBufferingAudioSource.html</anchorfile>
      <anchor>a5b6591413bbb172929fe3514eea14238</anchor>
      <arglist>(const AudioSourceChannelInfo &amp;info, const uint32 timeout)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Button</name>
    <filename>classButton.html</filename>
    <base>Component</base>
    <base>SettableTooltipClient</base>
    <class kind="class">Button::Listener</class>
    <class kind="struct">Button::LookAndFeelMethods</class>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>paintButton</name>
      <anchorfile>classButton.html</anchorfile>
      <anchor>a42622e1dc165f718a9835c0ef94aacca</anchor>
      <arglist>(Graphics &amp;g, bool isMouseOverButton, bool isButtonDown)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Button::Listener</name>
    <filename>classButton_1_1Listener.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Listener</name>
      <anchorfile>classButton_1_1Listener.html</anchorfile>
      <anchor>a30e17290ff1936e89331ae556bed1826</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>buttonClicked</name>
      <anchorfile>classButton_1_1Listener.html</anchorfile>
      <anchor>a81499cef24b7189cd0d1581fd9dc9e14</anchor>
      <arglist>(Button *)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>buttonStateChanged</name>
      <anchorfile>classButton_1_1Listener.html</anchorfile>
      <anchor>a6a83cb9405ff7e4cc0b775a5b65ce305</anchor>
      <arglist>(Button *)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Button::LookAndFeelMethods</name>
    <filename>structButton_1_1LookAndFeelMethods.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~LookAndFeelMethods</name>
      <anchorfile>structButton_1_1LookAndFeelMethods.html</anchorfile>
      <anchor>add9b7cc6398a726eaa4510ba8eb3742f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>drawButtonBackground</name>
      <anchorfile>structButton_1_1LookAndFeelMethods.html</anchorfile>
      <anchor>aefc3e78ac99a5fe1e4da24ce3ba0b917</anchor>
      <arglist>(Graphics &amp;, Button &amp;, const Colour &amp;backgroundColour, bool isMouseOverButton, bool isButtonDown)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Font</type>
      <name>getTextButtonFont</name>
      <anchorfile>structButton_1_1LookAndFeelMethods.html</anchorfile>
      <anchor>a6733c9a1d59cea5a0fc45054beb44b1b</anchor>
      <arglist>(TextButton &amp;, int buttonHeight)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getTextButtonWidthToFitText</name>
      <anchorfile>structButton_1_1LookAndFeelMethods.html</anchorfile>
      <anchor>a80e1caa329bc236e08955069ba6164f4</anchor>
      <arglist>(TextButton &amp;, int buttonHeight)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>drawButtonText</name>
      <anchorfile>structButton_1_1LookAndFeelMethods.html</anchorfile>
      <anchor>ad66d06555c26ea08fc69290cbdc6b431</anchor>
      <arglist>(Graphics &amp;, TextButton &amp;, bool isMouseOverButton, bool isButtonDown)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>drawToggleButton</name>
      <anchorfile>structButton_1_1LookAndFeelMethods.html</anchorfile>
      <anchor>a6ee19222f8245ee154bff9218ec57730</anchor>
      <arglist>(Graphics &amp;, ToggleButton &amp;, bool isMouseOverButton, bool isButtonDown)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>changeToggleButtonWidthToFitText</name>
      <anchorfile>structButton_1_1LookAndFeelMethods.html</anchorfile>
      <anchor>a78ae999a958a78a087035752fdf4f9d3</anchor>
      <arglist>(ToggleButton &amp;)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>drawTickBox</name>
      <anchorfile>structButton_1_1LookAndFeelMethods.html</anchorfile>
      <anchor>a61a14aaa6a228f9b8ab64d6ad4433334</anchor>
      <arglist>(Graphics &amp;, Component &amp;, float x, float y, float w, float h, bool ticked, bool isEnabled, bool isMouseOverButton, bool isButtonDown)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>drawDrawableButton</name>
      <anchorfile>structButton_1_1LookAndFeelMethods.html</anchorfile>
      <anchor>ae0020c4472d2c7b56464820eba5205b1</anchor>
      <arglist>(Graphics &amp;, DrawableButton &amp;, bool isMouseOverButton, bool isButtonDown)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ButtonPropertyComponent</name>
    <filename>classButtonPropertyComponent.html</filename>
    <base>PropertyComponent</base>
    <member kind="function">
      <type></type>
      <name>ButtonPropertyComponent</name>
      <anchorfile>classButtonPropertyComponent.html</anchorfile>
      <anchor>a25eeae4339791fc2d87045f1dd521d4d</anchor>
      <arglist>(const String &amp;propertyName, bool triggerOnMouseDown)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ButtonPropertyComponent</name>
      <anchorfile>classButtonPropertyComponent.html</anchorfile>
      <anchor>ad4532aa811fe1025cb47b6fa848172cc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>buttonClicked</name>
      <anchorfile>classButtonPropertyComponent.html</anchorfile>
      <anchor>ae38c05546f045db1e40a06112bc2f546</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual String</type>
      <name>getButtonText</name>
      <anchorfile>classButtonPropertyComponent.html</anchorfile>
      <anchor>af08e57b77bcbae7c6301d748e764a08c</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>refresh</name>
      <anchorfile>classButtonPropertyComponent.html</anchorfile>
      <anchor>a526375fb6a25fda38df91aa22ee65067</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>buttonClicked</name>
      <anchorfile>classButtonPropertyComponent.html</anchorfile>
      <anchor>afa718766db01628e12b736a6640bdcb4</anchor>
      <arglist>(Button *)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ByteOrder</name>
    <filename>classByteOrder.html</filename>
    <member kind="function" static="yes">
      <type>static uint16</type>
      <name>swap</name>
      <anchorfile>classByteOrder.html</anchorfile>
      <anchor>ac2b033fd8e98d9c4dfbb57a88466d62f</anchor>
      <arglist>(uint16 value) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static uint32</type>
      <name>swap</name>
      <anchorfile>classByteOrder.html</anchorfile>
      <anchor>a039a6658618d891f825cdec00929356a</anchor>
      <arglist>(uint32 value) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static uint64</type>
      <name>swap</name>
      <anchorfile>classByteOrder.html</anchorfile>
      <anchor>aa754df407abe7487660dd3f223c87324</anchor>
      <arglist>(uint64 value) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static uint16</type>
      <name>swapIfBigEndian</name>
      <anchorfile>classByteOrder.html</anchorfile>
      <anchor>a8461d39c7370a6adb9556d3235cbdbe1</anchor>
      <arglist>(uint16 value) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static uint32</type>
      <name>swapIfBigEndian</name>
      <anchorfile>classByteOrder.html</anchorfile>
      <anchor>a433cad5a04c392b9c97658eb6de79aef</anchor>
      <arglist>(uint32 value) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static uint64</type>
      <name>swapIfBigEndian</name>
      <anchorfile>classByteOrder.html</anchorfile>
      <anchor>a3568cb8775a1fa8f67bec0a889582ade</anchor>
      <arglist>(uint64 value) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int16</type>
      <name>swapIfBigEndian</name>
      <anchorfile>classByteOrder.html</anchorfile>
      <anchor>a878689f08a7a6ea436cd550c6538ee4a</anchor>
      <arglist>(int16 value) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int32</type>
      <name>swapIfBigEndian</name>
      <anchorfile>classByteOrder.html</anchorfile>
      <anchor>a2ee1facdbe64e044d394093aad0042ce</anchor>
      <arglist>(int32 value) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int64</type>
      <name>swapIfBigEndian</name>
      <anchorfile>classByteOrder.html</anchorfile>
      <anchor>a9869ab64491231b02a6cca33d6ff9f60</anchor>
      <arglist>(int64 value) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static float</type>
      <name>swapIfBigEndian</name>
      <anchorfile>classByteOrder.html</anchorfile>
      <anchor>a9b284220a53da3852b131d98dd85fdbb</anchor>
      <arglist>(float value) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>swapIfBigEndian</name>
      <anchorfile>classByteOrder.html</anchorfile>
      <anchor>a92060f5baff564c7e346309473326b69</anchor>
      <arglist>(double value) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static uint16</type>
      <name>swapIfLittleEndian</name>
      <anchorfile>classByteOrder.html</anchorfile>
      <anchor>a374444379b6a0f2010e36fa985175b9d</anchor>
      <arglist>(uint16 value) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static uint32</type>
      <name>swapIfLittleEndian</name>
      <anchorfile>classByteOrder.html</anchorfile>
      <anchor>a4a6108916f94343a894fd7a146d48000</anchor>
      <arglist>(uint32 value) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static uint64</type>
      <name>swapIfLittleEndian</name>
      <anchorfile>classByteOrder.html</anchorfile>
      <anchor>a08ca5e947cb823fc208ede0635387695</anchor>
      <arglist>(uint64 value) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int16</type>
      <name>swapIfLittleEndian</name>
      <anchorfile>classByteOrder.html</anchorfile>
      <anchor>a744b0ba49fa5cd0323fbd0cb663a64a1</anchor>
      <arglist>(int16 value) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int32</type>
      <name>swapIfLittleEndian</name>
      <anchorfile>classByteOrder.html</anchorfile>
      <anchor>ae00631878bb112db9e31cb7987cd0114</anchor>
      <arglist>(int32 value) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int64</type>
      <name>swapIfLittleEndian</name>
      <anchorfile>classByteOrder.html</anchorfile>
      <anchor>a531090b4ee8e06c95c8c6d0536aadd64</anchor>
      <arglist>(int64 value) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static float</type>
      <name>swapIfLittleEndian</name>
      <anchorfile>classByteOrder.html</anchorfile>
      <anchor>abde05ef314c29aeb9f49c1dbe13f6fb2</anchor>
      <arglist>(float value) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>swapIfLittleEndian</name>
      <anchorfile>classByteOrder.html</anchorfile>
      <anchor>a51aa557077c032ab3fec337e0b47b5f0</anchor>
      <arglist>(double value) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static uint32</type>
      <name>littleEndianInt</name>
      <anchorfile>classByteOrder.html</anchorfile>
      <anchor>a5ee16f591feb0902fddb472eb4057293</anchor>
      <arglist>(const void *bytes) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static uint64</type>
      <name>littleEndianInt64</name>
      <anchorfile>classByteOrder.html</anchorfile>
      <anchor>aa68dab24810f92bd18f08471ca2b2bba</anchor>
      <arglist>(const void *bytes) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static uint16</type>
      <name>littleEndianShort</name>
      <anchorfile>classByteOrder.html</anchorfile>
      <anchor>abfa2888cce7d46ea40f54fceb49b544c</anchor>
      <arglist>(const void *bytes) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static uint32</type>
      <name>bigEndianInt</name>
      <anchorfile>classByteOrder.html</anchorfile>
      <anchor>aca1a20a5825bcbef1f7b6920e3eee99f</anchor>
      <arglist>(const void *bytes) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static uint64</type>
      <name>bigEndianInt64</name>
      <anchorfile>classByteOrder.html</anchorfile>
      <anchor>af7c126f0a1015a0c9f5b91aac2991620</anchor>
      <arglist>(const void *bytes) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static uint16</type>
      <name>bigEndianShort</name>
      <anchorfile>classByteOrder.html</anchorfile>
      <anchor>a7716b1b156320f4668d93142c69d7a3b</anchor>
      <arglist>(const void *bytes) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>littleEndian24Bit</name>
      <anchorfile>classByteOrder.html</anchorfile>
      <anchor>a35200b99bb4420fe1401bb9f3bae52a2</anchor>
      <arglist>(const void *bytes) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>bigEndian24Bit</name>
      <anchorfile>classByteOrder.html</anchorfile>
      <anchor>a0dffd4f0e34fdd69453104e89996507d</anchor>
      <arglist>(const void *bytes) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>littleEndian24BitToChars</name>
      <anchorfile>classByteOrder.html</anchorfile>
      <anchor>a287ad85e68c599c8dcfdb329aecefda7</anchor>
      <arglist>(int value, void *destBytes) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>bigEndian24BitToChars</name>
      <anchorfile>classByteOrder.html</anchorfile>
      <anchor>af30f589309d051d2e3476c4c62a698b0</anchor>
      <arglist>(int value, void *destBytes) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isBigEndian</name>
      <anchorfile>classByteOrder.html</anchorfile>
      <anchor>a579da6322ef30e565507fdbf0b9faefb</anchor>
      <arglist>() noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CachedComponentImage</name>
    <filename>classCachedComponentImage.html</filename>
    <member kind="function">
      <type></type>
      <name>CachedComponentImage</name>
      <anchorfile>classCachedComponentImage.html</anchorfile>
      <anchor>a73b6556a146ea166ee9e3fa5ffe9f780</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CachedComponentImage</name>
      <anchorfile>classCachedComponentImage.html</anchorfile>
      <anchor>ac2e9de7eaa6ecf3a018ceafb0440c704</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>paint</name>
      <anchorfile>classCachedComponentImage.html</anchorfile>
      <anchor>ae25f61ece3f331280d0ac989d41ac2c1</anchor>
      <arglist>(Graphics &amp;)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>invalidateAll</name>
      <anchorfile>classCachedComponentImage.html</anchorfile>
      <anchor>a65cc82fa3020cb440e55f33313bc6897</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>invalidate</name>
      <anchorfile>classCachedComponentImage.html</anchorfile>
      <anchor>ae056a7e4c692db8196e58657342e52e0</anchor>
      <arglist>(const Rectangle&lt; int &gt; &amp;area)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>releaseResources</name>
      <anchorfile>classCachedComponentImage.html</anchorfile>
      <anchor>a3e36fc5255badec7885a1d5484cb78f6</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CachedValue</name>
    <filename>classCachedValue.html</filename>
    <templarg></templarg>
    <base protection="private">ValueTree::Listener</base>
    <member kind="function">
      <type></type>
      <name>CachedValue</name>
      <anchorfile>classCachedValue.html</anchorfile>
      <anchor>aa982fb4fefb3b0b7f802733cd2d17711</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CachedValue</name>
      <anchorfile>classCachedValue.html</anchorfile>
      <anchor>a43508969aaa4149c7d5668ad254fd9c0</anchor>
      <arglist>(ValueTree &amp;tree, const Identifier &amp;propertyID, UndoManager *undoManager)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CachedValue</name>
      <anchorfile>classCachedValue.html</anchorfile>
      <anchor>a820d1245983942e804bec4facf607f7d</anchor>
      <arglist>(ValueTree &amp;tree, const Identifier &amp;propertyID, UndoManager *undoManager, const Type &amp;defaultToUse)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator Type</name>
      <anchorfile>classCachedValue.html</anchorfile>
      <anchor>a18813b3c4f63e1744c9eb1355fc99295</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Type</type>
      <name>get</name>
      <anchorfile>classCachedValue.html</anchorfile>
      <anchor>a3b985781bf4e9225dc37be8529390df0</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Type &amp;</type>
      <name>operator*</name>
      <anchorfile>classCachedValue.html</anchorfile>
      <anchor>a736abaeca32332646d5708836989edb3</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>Type *</type>
      <name>operator-&gt;</name>
      <anchorfile>classCachedValue.html</anchorfile>
      <anchor>a6aa76168a700607f7ca9110276ecbfbd</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classCachedValue.html</anchorfile>
      <anchor>a78ce1443c5989cdb9e65d2104c512902</anchor>
      <arglist>(const OtherType &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classCachedValue.html</anchorfile>
      <anchor>acdb58d17375720cf7f3a438fb6f1978f</anchor>
      <arglist>(const OtherType &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>getPropertyAsValue</name>
      <anchorfile>classCachedValue.html</anchorfile>
      <anchor>afd02fa783537a57a8c4e89b5d6fc0151</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isUsingDefault</name>
      <anchorfile>classCachedValue.html</anchorfile>
      <anchor>ae94d86526537c9ca32e4fb8192f259cd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Type</type>
      <name>getDefault</name>
      <anchorfile>classCachedValue.html</anchorfile>
      <anchor>ac9d65358b3c0726ad2bab55baa9c8290</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>CachedValue &amp;</type>
      <name>operator=</name>
      <anchorfile>classCachedValue.html</anchorfile>
      <anchor>a5019c13c04d5885610192c533faed8a6</anchor>
      <arglist>(const Type &amp;newValue)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>classCachedValue.html</anchorfile>
      <anchor>aa30d36d0218f11c28398eb8c11de3768</anchor>
      <arglist>(const Type &amp;newValue, UndoManager *undoManagerToUse)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetToDefault</name>
      <anchorfile>classCachedValue.html</anchorfile>
      <anchor>a0cc9c7ec676bb292f0bb8428eb579c27</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetToDefault</name>
      <anchorfile>classCachedValue.html</anchorfile>
      <anchor>abf520f7db956e46018d027296488f8fd</anchor>
      <arglist>(UndoManager *undoManagerToUse)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDefault</name>
      <anchorfile>classCachedValue.html</anchorfile>
      <anchor>ab0365e5556090469b609bc8e18f7247d</anchor>
      <arglist>(const Type &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>referTo</name>
      <anchorfile>classCachedValue.html</anchorfile>
      <anchor>a22c029d41ad7c38c01d91e8b77bdcae6</anchor>
      <arglist>(ValueTree &amp;tree, const Identifier &amp;property, UndoManager *um)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>referTo</name>
      <anchorfile>classCachedValue.html</anchorfile>
      <anchor>af3326834ddf48fd194fce40355de46c7</anchor>
      <arglist>(ValueTree &amp;tree, const Identifier &amp;property, UndoManager *um, const Type &amp;defaultVal)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>forceUpdateOfCachedValue</name>
      <anchorfile>classCachedValue.html</anchorfile>
      <anchor>ad1dd20dd34843f4bcfe8516e7a10e871</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ValueTree &amp;</type>
      <name>getValueTree</name>
      <anchorfile>classCachedValue.html</anchorfile>
      <anchor>a17c5b157d6f41365fe57f7af57af17f6</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const Identifier &amp;</type>
      <name>getPropertyID</name>
      <anchorfile>classCachedValue.html</anchorfile>
      <anchor>a999622278761a16def8f1f2af77e6fcb</anchor>
      <arglist>() const noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CallbackMessage</name>
    <filename>classCallbackMessage.html</filename>
    <base>MessageManager::MessageBase</base>
    <member kind="function">
      <type></type>
      <name>CallbackMessage</name>
      <anchorfile>classCallbackMessage.html</anchorfile>
      <anchor>a670d5e9feb62e19814b1dfc25c00e9f7</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~CallbackMessage</name>
      <anchorfile>classCallbackMessage.html</anchorfile>
      <anchor>afa4bb7bd8f5962edcc53c5df37cd8b25</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>messageCallback</name>
      <anchorfile>classCallbackMessage.html</anchorfile>
      <anchor>a1f72c1e680e26f44780ac9437f3450de</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MessageBase</name>
      <anchorfile>classMessageManager_1_1MessageBase.html</anchorfile>
      <anchor>aa6778b8af6b43e189e8e9d5136609bdc</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MessageBase</name>
      <anchorfile>classMessageManager_1_1MessageBase.html</anchorfile>
      <anchor>a68a883d493b6ae46b030b9f51bbc2dce</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>post</name>
      <anchorfile>classMessageManager_1_1MessageBase.html</anchorfile>
      <anchor>a2bcdf57123967a59650bd46543906796</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="typedef">
      <type>ReferenceCountedObjectPtr&lt; MessageBase &gt;</type>
      <name>Ptr</name>
      <anchorfile>classMessageManager_1_1MessageBase.html</anchorfile>
      <anchor>a0f00522db88c06d0dae02759f197dfa9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CallOutBox</name>
    <filename>classCallOutBox.html</filename>
    <base>Component</base>
    <base protection="private">Timer</base>
    <class kind="struct">CallOutBox::LookAndFeelMethods</class>
    <member kind="function">
      <type></type>
      <name>CallOutBox</name>
      <anchorfile>classCallOutBox.html</anchorfile>
      <anchor>adc9b58efa3aab3fa31964fad95b08c23</anchor>
      <arglist>(Component &amp;contentComponent, const Rectangle&lt; int &gt; &amp;areaToPointTo, Component *parentComponent)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~CallOutBox</name>
      <anchorfile>classCallOutBox.html</anchorfile>
      <anchor>acef7ecf52e34515d5edb30213ecd47dc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setArrowSize</name>
      <anchorfile>classCallOutBox.html</anchorfile>
      <anchor>a83090d1fbfb1dad89d90e6c269ca0911</anchor>
      <arglist>(float newSize)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updatePosition</name>
      <anchorfile>classCallOutBox.html</anchorfile>
      <anchor>a19e7a01bb331faba5196e3aa3df07e40</anchor>
      <arglist>(const Rectangle&lt; int &gt; &amp;newAreaToPointTo, const Rectangle&lt; int &gt; &amp;newAreaToFitIn)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dismiss</name>
      <anchorfile>classCallOutBox.html</anchorfile>
      <anchor>a4249288a642041f5311528e3f1d7d06e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDismissalMouseClicksAreAlwaysConsumed</name>
      <anchorfile>classCallOutBox.html</anchorfile>
      <anchor>a28c85c1cfc76bb0801e287950ec8ce45</anchor>
      <arglist>(bool shouldAlwaysBeConsumed) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>paint</name>
      <anchorfile>classCallOutBox.html</anchorfile>
      <anchor>abb855fb08a18a20c93c2a7e4be96eef0</anchor>
      <arglist>(Graphics &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resized</name>
      <anchorfile>classCallOutBox.html</anchorfile>
      <anchor>af20578de71eec8f927c9386c0ae198c5</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>moved</name>
      <anchorfile>classCallOutBox.html</anchorfile>
      <anchor>adbe7b39dc2d141143b8168aae6559bfe</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>childBoundsChanged</name>
      <anchorfile>classCallOutBox.html</anchorfile>
      <anchor>a54971e2cc9e7e0289b7ac2078ab34867</anchor>
      <arglist>(Component *) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hitTest</name>
      <anchorfile>classCallOutBox.html</anchorfile>
      <anchor>a916cce375fb38ac4e77e4a8ef27591b6</anchor>
      <arglist>(int x, int y) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>inputAttemptWhenModal</name>
      <anchorfile>classCallOutBox.html</anchorfile>
      <anchor>aca7bdf771e02f60f10f11671da033ffc</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>keyPressed</name>
      <anchorfile>classCallOutBox.html</anchorfile>
      <anchor>a3e384979c98ee2be15c2e35db3e405bd</anchor>
      <arglist>(const KeyPress &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>handleCommandMessage</name>
      <anchorfile>classCallOutBox.html</anchorfile>
      <anchor>a14c430dd12c4a9dcd5549a37a70bd6c7</anchor>
      <arglist>(int) override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getBorderSize</name>
      <anchorfile>classCallOutBox.html</anchorfile>
      <anchor>a517ef8e27ff897c3e9eeedc5dd6742a3</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static CallOutBox &amp;</type>
      <name>launchAsynchronously</name>
      <anchorfile>classCallOutBox.html</anchorfile>
      <anchor>a55dd3c214fc70d1ee94a3e501b85e02d</anchor>
      <arglist>(Component *contentComponent, const Rectangle&lt; int &gt; &amp;areaToPointTo, Component *parentComponent)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>CallOutBox::LookAndFeelMethods</name>
    <filename>structCallOutBox_1_1LookAndFeelMethods.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~LookAndFeelMethods</name>
      <anchorfile>structCallOutBox_1_1LookAndFeelMethods.html</anchorfile>
      <anchor>a2f84851c2a38e3d896a3c39c4deed10c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>drawCallOutBoxBackground</name>
      <anchorfile>structCallOutBox_1_1LookAndFeelMethods.html</anchorfile>
      <anchor>a3df79aa6b1609e72a63bcbf673b201df</anchor>
      <arglist>(CallOutBox &amp;, Graphics &amp;, const Path &amp;, Image &amp;)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getCallOutBoxBorderSize</name>
      <anchorfile>structCallOutBox_1_1LookAndFeelMethods.html</anchorfile>
      <anchor>a56a913fced5859e09743b290884ddfd3</anchor>
      <arglist>(const CallOutBox &amp;)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CameraDevice</name>
    <filename>classCameraDevice.html</filename>
    <class kind="class">CameraDevice::Listener</class>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CameraDevice</name>
      <anchorfile>classCameraDevice.html</anchorfile>
      <anchor>ac885198479887e5a3779a818e07e9917</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const String &amp;</type>
      <name>getName</name>
      <anchorfile>classCameraDevice.html</anchorfile>
      <anchor>aa555467e7121ec6ad3538d5f799aca83</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Component *</type>
      <name>createViewerComponent</name>
      <anchorfile>classCameraDevice.html</anchorfile>
      <anchor>a17948f7b0ba629b0958bd0638bdb112a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>startRecordingToFile</name>
      <anchorfile>classCameraDevice.html</anchorfile>
      <anchor>a14cf9ed22ac491e949d05ac44071fbee</anchor>
      <arglist>(const File &amp;file, int quality=2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stopRecording</name>
      <anchorfile>classCameraDevice.html</anchorfile>
      <anchor>a8f4e51fb9d4a77a5bb479749e65e8d8e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Time</type>
      <name>getTimeOfFirstRecordedFrame</name>
      <anchorfile>classCameraDevice.html</anchorfile>
      <anchor>a55af5a493ae628304fa11aec1ad70a92</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addListener</name>
      <anchorfile>classCameraDevice.html</anchorfile>
      <anchor>a37d6fce26ed8f3814eb90c6acefb2244</anchor>
      <arglist>(Listener *listenerToAdd)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeListener</name>
      <anchorfile>classCameraDevice.html</anchorfile>
      <anchor>ab91e1f572ebcee77ffeccd17017c43dd</anchor>
      <arglist>(Listener *listenerToRemove)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StringArray</type>
      <name>getAvailableDevices</name>
      <anchorfile>classCameraDevice.html</anchorfile>
      <anchor>acf99196e8620c39638cb014044012b72</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static CameraDevice *</type>
      <name>openDevice</name>
      <anchorfile>classCameraDevice.html</anchorfile>
      <anchor>a4eacdfe0e80e66e7af5115f0af7c116c</anchor>
      <arglist>(int deviceIndex, int minWidth=128, int minHeight=64, int maxWidth=1024, int maxHeight=768, bool highQuality=true)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static String</type>
      <name>getFileExtension</name>
      <anchorfile>classCameraDevice.html</anchorfile>
      <anchor>ac720c6cdc6a67685a0472c5fc8566f37</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CameraDevice::Listener</name>
    <filename>classCameraDevice_1_1Listener.html</filename>
    <member kind="function">
      <type></type>
      <name>Listener</name>
      <anchorfile>classCameraDevice_1_1Listener.html</anchorfile>
      <anchor>a9a04f445b39617bffd2739c453245c37</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Listener</name>
      <anchorfile>classCameraDevice_1_1Listener.html</anchorfile>
      <anchor>a4c14aed9e0393ddf8cd541ce102703cc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>imageReceived</name>
      <anchorfile>classCameraDevice_1_1Listener.html</anchorfile>
      <anchor>aae8ddc9fa3fea24ae48826a5c4232aeb</anchor>
      <arglist>(const Image &amp;image)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CaretComponent</name>
    <filename>classCaretComponent.html</filename>
    <base>Component</base>
    <base protection="private">Timer</base>
    <member kind="enumeration">
      <type></type>
      <name>ColourIds</name>
      <anchorfile>classCaretComponent.html</anchorfile>
      <anchor>aee2f8dbdf274b7691a1fe3b704831f81</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>caretColourId</name>
      <anchorfile>classCaretComponent.html</anchorfile>
      <anchor>aee2f8dbdf274b7691a1fe3b704831f81a17c813c8e63c43ff1339f864387a007e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CaretComponent</name>
      <anchorfile>classCaretComponent.html</anchorfile>
      <anchor>a4d0d34bc6f55b6aa99c5c7f05f39b711</anchor>
      <arglist>(Component *keyFocusOwner)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~CaretComponent</name>
      <anchorfile>classCaretComponent.html</anchorfile>
      <anchor>a20871c2e074ec0e94a026fbbe34b8857</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCaretPosition</name>
      <anchorfile>classCaretComponent.html</anchorfile>
      <anchor>aa69c32be5ca9921ed5590bbfdc5bcb03</anchor>
      <arglist>(const Rectangle&lt; int &gt; &amp;characterArea)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>paint</name>
      <anchorfile>classCaretComponent.html</anchorfile>
      <anchor>a2edcbccc932386c3093859b9408cc016</anchor>
      <arglist>(Graphics &amp;) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CatmullRomInterpolator</name>
    <filename>classCatmullRomInterpolator.html</filename>
    <member kind="function">
      <type></type>
      <name>CatmullRomInterpolator</name>
      <anchorfile>classCatmullRomInterpolator.html</anchorfile>
      <anchor>a443256138d61654b5b10d6d2e19a13cf</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~CatmullRomInterpolator</name>
      <anchorfile>classCatmullRomInterpolator.html</anchorfile>
      <anchor>a6581f9213b489fa925c2ea7a3302ec8c</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classCatmullRomInterpolator.html</anchorfile>
      <anchor>a64cc736b5a48202f3dda2877550cd4ab</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>process</name>
      <anchorfile>classCatmullRomInterpolator.html</anchorfile>
      <anchor>ab45fe99084ea9fa7e55ee47004615550</anchor>
      <arglist>(double speedRatio, const float *inputSamples, float *outputSamples, int numOutputSamplesToProduce) noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>processAdding</name>
      <anchorfile>classCatmullRomInterpolator.html</anchorfile>
      <anchor>a8ee27f940e8ee293768a3283a6c63276</anchor>
      <arglist>(double speedRatio, const float *inputSamples, float *outputSamples, int numOutputSamplesToProduce, float gain) noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ChangeBroadcaster</name>
    <filename>classChangeBroadcaster.html</filename>
  </compound>
  <compound kind="class">
    <name>ChangeListener</name>
    <filename>classChangeListener.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ChangeListener</name>
      <anchorfile>classChangeListener.html</anchorfile>
      <anchor>a0498f9374464e4b59fada8b4445c0e98</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>changeListenerCallback</name>
      <anchorfile>classChangeListener.html</anchorfile>
      <anchor>a027420041071315201df11e19a36ea18</anchor>
      <arglist>(ChangeBroadcaster *source)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ChannelRemappingAudioSource</name>
    <filename>classChannelRemappingAudioSource.html</filename>
    <base>AudioSource</base>
    <member kind="function">
      <type></type>
      <name>ChannelRemappingAudioSource</name>
      <anchorfile>classChannelRemappingAudioSource.html</anchorfile>
      <anchor>ad6cfa532e77dc3993a0516cae1623b2b</anchor>
      <arglist>(AudioSource *source, bool deleteSourceWhenDeleted)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ChannelRemappingAudioSource</name>
      <anchorfile>classChannelRemappingAudioSource.html</anchorfile>
      <anchor>ac95f5a646e2c8ad1fb90a69c1f251a65</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNumberOfChannelsToProduce</name>
      <anchorfile>classChannelRemappingAudioSource.html</anchorfile>
      <anchor>a8af553519941d35644aa5373fde05acb</anchor>
      <arglist>(int requiredNumberOfChannels)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearAllMappings</name>
      <anchorfile>classChannelRemappingAudioSource.html</anchorfile>
      <anchor>a373b386b0873abccac53601fa0760f2c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setInputChannelMapping</name>
      <anchorfile>classChannelRemappingAudioSource.html</anchorfile>
      <anchor>a6d2601cc888b1c4d19ed4bcd4877cc53</anchor>
      <arglist>(int destChannelIndex, int sourceChannelIndex)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOutputChannelMapping</name>
      <anchorfile>classChannelRemappingAudioSource.html</anchorfile>
      <anchor>a319830bf0ca0a05bf60d070cf3d2ab3a</anchor>
      <arglist>(int sourceChannelIndex, int destChannelIndex)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getRemappedInputChannel</name>
      <anchorfile>classChannelRemappingAudioSource.html</anchorfile>
      <anchor>aa6253a294f5df832746290aace819066</anchor>
      <arglist>(int inputChannelIndex) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getRemappedOutputChannel</name>
      <anchorfile>classChannelRemappingAudioSource.html</anchorfile>
      <anchor>a2e3d5c199038069c4510d9fc62226e24</anchor>
      <arglist>(int outputChannelIndex) const </arglist>
    </member>
    <member kind="function">
      <type>XmlElement *</type>
      <name>createXml</name>
      <anchorfile>classChannelRemappingAudioSource.html</anchorfile>
      <anchor>a1230528d1eb1ca7a1b0f7a46fa97802a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>restoreFromXml</name>
      <anchorfile>classChannelRemappingAudioSource.html</anchorfile>
      <anchor>a2bb3bd5bc67e413e9c143c64ba904125</anchor>
      <arglist>(const XmlElement &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>prepareToPlay</name>
      <anchorfile>classChannelRemappingAudioSource.html</anchorfile>
      <anchor>abe7b07c27ff2987fd6968f1db40caafa</anchor>
      <arglist>(int samplesPerBlockExpected, double sampleRate) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>releaseResources</name>
      <anchorfile>classChannelRemappingAudioSource.html</anchorfile>
      <anchor>adec9a1e901cc8b88626f02aaa5582a85</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getNextAudioBlock</name>
      <anchorfile>classChannelRemappingAudioSource.html</anchorfile>
      <anchor>a7cc4e508799f79e4a7c750ea7a3c23f3</anchor>
      <arglist>(const AudioSourceChannelInfo &amp;) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CharacterFunctions</name>
    <filename>classCharacterFunctions.html</filename>
    <class kind="struct">CharacterFunctions::HexParser</class>
    <member kind="function" static="yes">
      <type>static juce_wchar</type>
      <name>toUpperCase</name>
      <anchorfile>classCharacterFunctions.html</anchorfile>
      <anchor>a23ce171684182080563cb2829e0e15e0</anchor>
      <arglist>(juce_wchar character) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static juce_wchar</type>
      <name>toLowerCase</name>
      <anchorfile>classCharacterFunctions.html</anchorfile>
      <anchor>ad24ab7b19d00b0ea570b31d8cce4a33e</anchor>
      <arglist>(juce_wchar character) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isUpperCase</name>
      <anchorfile>classCharacterFunctions.html</anchorfile>
      <anchor>a6533e82213f7bc97d84f5509cfe21225</anchor>
      <arglist>(juce_wchar character) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isLowerCase</name>
      <anchorfile>classCharacterFunctions.html</anchorfile>
      <anchor>aa5b13d045a9ddb2e56e3acd7cef23b41</anchor>
      <arglist>(juce_wchar character) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isWhitespace</name>
      <anchorfile>classCharacterFunctions.html</anchorfile>
      <anchor>ab98a1ddf024746a50e471f003a35ff2e</anchor>
      <arglist>(char character) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isWhitespace</name>
      <anchorfile>classCharacterFunctions.html</anchorfile>
      <anchor>a913c5ce360aee241ff77a7d7b6604e1c</anchor>
      <arglist>(juce_wchar character) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isDigit</name>
      <anchorfile>classCharacterFunctions.html</anchorfile>
      <anchor>a47701af97c7c496659a0bd87b2e207a3</anchor>
      <arglist>(char character) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isDigit</name>
      <anchorfile>classCharacterFunctions.html</anchorfile>
      <anchor>a6d70f7f3e1c90086cb98e26b50ed26c8</anchor>
      <arglist>(juce_wchar character) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isLetter</name>
      <anchorfile>classCharacterFunctions.html</anchorfile>
      <anchor>aab334019d831b58969596ebc2030cdd5</anchor>
      <arglist>(char character) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isLetter</name>
      <anchorfile>classCharacterFunctions.html</anchorfile>
      <anchor>ace469a8d0ef2cfe250160adee5a085ce</anchor>
      <arglist>(juce_wchar character) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isLetterOrDigit</name>
      <anchorfile>classCharacterFunctions.html</anchorfile>
      <anchor>a4d9adb0a8f3bb9c7acf3bcaa2799cbdd</anchor>
      <arglist>(char character) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isLetterOrDigit</name>
      <anchorfile>classCharacterFunctions.html</anchorfile>
      <anchor>a8339c9641b58e16a400d8ce653b0a1fa</anchor>
      <arglist>(juce_wchar character) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isPrintable</name>
      <anchorfile>classCharacterFunctions.html</anchorfile>
      <anchor>a7a02c7cae4d13b92cf5865e2f9df98d2</anchor>
      <arglist>(char character) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isPrintable</name>
      <anchorfile>classCharacterFunctions.html</anchorfile>
      <anchor>aceb5e92bad66575302feceb5aee53500</anchor>
      <arglist>(juce_wchar character) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>getHexDigitValue</name>
      <anchorfile>classCharacterFunctions.html</anchorfile>
      <anchor>a3f97549ff81aee8415076f99b4adb310</anchor>
      <arglist>(juce_wchar digit) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static juce_wchar</type>
      <name>getUnicodeCharFromWindows1252Codepage</name>
      <anchorfile>classCharacterFunctions.html</anchorfile>
      <anchor>a0ade4adc89c28bd6578ce6b798e55cf5</anchor>
      <arglist>(uint8 windows1252Char) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>readDoubleValue</name>
      <anchorfile>classCharacterFunctions.html</anchorfile>
      <anchor>a8743d3c374a36a0fb0596ac0e259b9ed</anchor>
      <arglist>(CharPointerType &amp;text) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>getDoubleValue</name>
      <anchorfile>classCharacterFunctions.html</anchorfile>
      <anchor>ae58bda3f52f99ffe9d331a07ee0e60d9</anchor>
      <arglist>(CharPointerType text) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static IntType</type>
      <name>getIntValue</name>
      <anchorfile>classCharacterFunctions.html</anchorfile>
      <anchor>a1ad032242c425770875015f8f6d4b0e4</anchor>
      <arglist>(const CharPointerType text) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static size_t</type>
      <name>lengthUpTo</name>
      <anchorfile>classCharacterFunctions.html</anchorfile>
      <anchor>ad464ebf48f8195b54b889e697dc1d5b7</anchor>
      <arglist>(CharPointerType text, const size_t maxCharsToCount) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static size_t</type>
      <name>lengthUpTo</name>
      <anchorfile>classCharacterFunctions.html</anchorfile>
      <anchor>a5685f5fdd8a4c8c0ae5871e509e844ed</anchor>
      <arglist>(CharPointerType start, const CharPointerType end) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>copyAll</name>
      <anchorfile>classCharacterFunctions.html</anchorfile>
      <anchor>aeb4fe8347d3df6ac1a09e3342517041c</anchor>
      <arglist>(DestCharPointerType &amp;dest, SrcCharPointerType src) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static size_t</type>
      <name>copyWithDestByteLimit</name>
      <anchorfile>classCharacterFunctions.html</anchorfile>
      <anchor>af5732566217c2fbeb0830f605f90c989</anchor>
      <arglist>(DestCharPointerType &amp;dest, SrcCharPointerType src, size_t maxBytesToWrite) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>copyWithCharLimit</name>
      <anchorfile>classCharacterFunctions.html</anchorfile>
      <anchor>a6926024e6276580b38d81b432a2261a2</anchor>
      <arglist>(DestCharPointerType &amp;dest, SrcCharPointerType src, int maxChars) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>compare</name>
      <anchorfile>classCharacterFunctions.html</anchorfile>
      <anchor>a0a4508ec49af4218ff4f5979b1f6845a</anchor>
      <arglist>(juce_wchar char1, juce_wchar char2) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>compare</name>
      <anchorfile>classCharacterFunctions.html</anchorfile>
      <anchor>a1833e4d42a9fc8e3333e57e4786641d2</anchor>
      <arglist>(CharPointerType1 s1, CharPointerType2 s2) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>compareUpTo</name>
      <anchorfile>classCharacterFunctions.html</anchorfile>
      <anchor>a121f7e5a6d496a95894c5f3e2bcc6cd0</anchor>
      <arglist>(CharPointerType1 s1, CharPointerType2 s2, int maxChars) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>compareIgnoreCase</name>
      <anchorfile>classCharacterFunctions.html</anchorfile>
      <anchor>a347c2ef2ab32ac9b4eee84ce87876e04</anchor>
      <arglist>(juce_wchar char1, juce_wchar char2) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>compareIgnoreCase</name>
      <anchorfile>classCharacterFunctions.html</anchorfile>
      <anchor>a58b4b783a7181c4a0ae90bb9c430d735</anchor>
      <arglist>(CharPointerType1 s1, CharPointerType2 s2) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>compareIgnoreCaseUpTo</name>
      <anchorfile>classCharacterFunctions.html</anchorfile>
      <anchor>a88c1a470b8d453d8fd790c99406b1828</anchor>
      <arglist>(CharPointerType1 s1, CharPointerType2 s2, int maxChars) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>indexOf</name>
      <anchorfile>classCharacterFunctions.html</anchorfile>
      <anchor>a00a4d93de59505337b51f0597238872c</anchor>
      <arglist>(CharPointerType1 textToSearch, const CharPointerType2 substringToLookFor) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static CharPointerType1</type>
      <name>find</name>
      <anchorfile>classCharacterFunctions.html</anchorfile>
      <anchor>a9fbf57c0172b477fc8eb7ebac3f569a8</anchor>
      <arglist>(CharPointerType1 textToSearch, const CharPointerType2 substringToLookFor) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static CharPointerType</type>
      <name>find</name>
      <anchorfile>classCharacterFunctions.html</anchorfile>
      <anchor>af839b24f2b8dfaa83181b027880e70c9</anchor>
      <arglist>(CharPointerType textToSearch, const juce_wchar charToLookFor) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>indexOfIgnoreCase</name>
      <anchorfile>classCharacterFunctions.html</anchorfile>
      <anchor>a824a98ee3bef8a55a453636704a74ff8</anchor>
      <arglist>(CharPointerType1 haystack, const CharPointerType2 needle) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>indexOfChar</name>
      <anchorfile>classCharacterFunctions.html</anchorfile>
      <anchor>a6f53c649e6aae9e9f15b3a45fd7679a2</anchor>
      <arglist>(Type text, const juce_wchar charToFind) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>indexOfCharIgnoreCase</name>
      <anchorfile>classCharacterFunctions.html</anchorfile>
      <anchor>a0390d13daac405225657a7237022778c</anchor>
      <arglist>(Type text, juce_wchar charToFind) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Type</type>
      <name>findEndOfWhitespace</name>
      <anchorfile>classCharacterFunctions.html</anchorfile>
      <anchor>ad1b0612e60e31641f0f2460d646b8e80</anchor>
      <arglist>(Type text) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Type</type>
      <name>findEndOfToken</name>
      <anchorfile>classCharacterFunctions.html</anchorfile>
      <anchor>ac8ab82cc29024a8bb4f8dc1508fd75e1</anchor>
      <arglist>(Type text, const BreakType breakCharacters, const Type quoteCharacters)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>CharacterFunctions::HexParser</name>
    <filename>structCharacterFunctions_1_1HexParser.html</filename>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static ResultType</type>
      <name>parse</name>
      <anchorfile>structCharacterFunctions_1_1HexParser.html</anchorfile>
      <anchor>a6da02089ed151cf59b990394a1531879</anchor>
      <arglist>(CharPointerType t) noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CharPointer_ASCII</name>
    <filename>classCharPointer__ASCII.html</filename>
    <member kind="typedef">
      <type>char</type>
      <name>CharType</name>
      <anchorfile>classCharPointer__ASCII.html</anchorfile>
      <anchor>add860ee0ed357926cb0cb5f0f8707283</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CharPointer_ASCII</name>
      <anchorfile>classCharPointer__ASCII.html</anchorfile>
      <anchor>a5f3a9f5183fc777f6d48814bcbbcce71</anchor>
      <arglist>(const CharType *const rawPointer) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CharPointer_ASCII</name>
      <anchorfile>classCharPointer__ASCII.html</anchorfile>
      <anchor>a9de29da955a20e66c3b867de345bf629</anchor>
      <arglist>(const CharPointer_ASCII &amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>CharPointer_ASCII</type>
      <name>operator=</name>
      <anchorfile>classCharPointer__ASCII.html</anchorfile>
      <anchor>a3d4c71731aaadfa1008143242764de17</anchor>
      <arglist>(const CharPointer_ASCII other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>CharPointer_ASCII</type>
      <name>operator=</name>
      <anchorfile>classCharPointer__ASCII.html</anchorfile>
      <anchor>a9b7640188e9cf2c6c740687b00b677e0</anchor>
      <arglist>(const CharType *text) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classCharPointer__ASCII.html</anchorfile>
      <anchor>a1eac65d38f504772535e280d6590b1cd</anchor>
      <arglist>(CharPointer_ASCII other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classCharPointer__ASCII.html</anchorfile>
      <anchor>a05dee60cb95fd7f35fce740a34b113b1</anchor>
      <arglist>(CharPointer_ASCII other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>classCharPointer__ASCII.html</anchorfile>
      <anchor>a93596cffaab7b1d69e03de7edacd45bd</anchor>
      <arglist>(CharPointer_ASCII other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>classCharPointer__ASCII.html</anchorfile>
      <anchor>afadf6b79f61b0caaf2d5ceac645f0956</anchor>
      <arglist>(CharPointer_ASCII other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>classCharPointer__ASCII.html</anchorfile>
      <anchor>a68651e26e8399bb0403730d1c53086aa</anchor>
      <arglist>(CharPointer_ASCII other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>classCharPointer__ASCII.html</anchorfile>
      <anchor>afc11fbc069559e2fd510d0ed829c46b2</anchor>
      <arglist>(CharPointer_ASCII other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>CharType *</type>
      <name>getAddress</name>
      <anchorfile>classCharPointer__ASCII.html</anchorfile>
      <anchor>a1e686d89f0358c21941b2302d950e29d</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const CharType *</name>
      <anchorfile>classCharPointer__ASCII.html</anchorfile>
      <anchor>ad18bd5f249b831ae6e218a587c010fbe</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEmpty</name>
      <anchorfile>classCharPointer__ASCII.html</anchorfile>
      <anchor>ab1c9259029e592aa64823f196779bfe3</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>juce_wchar</type>
      <name>operator*</name>
      <anchorfile>classCharPointer__ASCII.html</anchorfile>
      <anchor>a86513f6fa77d4bf8cfeadf1496252745</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>CharPointer_ASCII</type>
      <name>operator++</name>
      <anchorfile>classCharPointer__ASCII.html</anchorfile>
      <anchor>aa79bfec68aa8a9d01458eac3013b7bd2</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>CharPointer_ASCII</type>
      <name>operator--</name>
      <anchorfile>classCharPointer__ASCII.html</anchorfile>
      <anchor>ad03a6f4da460cce423dc3feddad8dcb5</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>juce_wchar</type>
      <name>getAndAdvance</name>
      <anchorfile>classCharPointer__ASCII.html</anchorfile>
      <anchor>a7de52fb2870310c2b6c3283cc9e4f451</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>CharPointer_ASCII</type>
      <name>operator++</name>
      <anchorfile>classCharPointer__ASCII.html</anchorfile>
      <anchor>a8769743cd65a51886e812dd317378f60</anchor>
      <arglist>(int) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator+=</name>
      <anchorfile>classCharPointer__ASCII.html</anchorfile>
      <anchor>aa3d12bc7c3175b546151f8bc5d855989</anchor>
      <arglist>(const int numToSkip) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator-=</name>
      <anchorfile>classCharPointer__ASCII.html</anchorfile>
      <anchor>a132bc266a7be528fbd6c03e467bda144</anchor>
      <arglist>(const int numToSkip) noexcept</arglist>
    </member>
    <member kind="function">
      <type>juce_wchar</type>
      <name>operator[]</name>
      <anchorfile>classCharPointer__ASCII.html</anchorfile>
      <anchor>ac42226d999daf75013cafe27f2f8e729</anchor>
      <arglist>(const int characterIndex) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>CharPointer_ASCII</type>
      <name>operator+</name>
      <anchorfile>classCharPointer__ASCII.html</anchorfile>
      <anchor>a092155496ca4029e82d339495fb3d931</anchor>
      <arglist>(const int numToSkip) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>CharPointer_ASCII</type>
      <name>operator-</name>
      <anchorfile>classCharPointer__ASCII.html</anchorfile>
      <anchor>adaba36dfc9690f08ff6b7a3dc6b1e5cd</anchor>
      <arglist>(const int numToSkip) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>classCharPointer__ASCII.html</anchorfile>
      <anchor>af4720cdda5d3fbd633105b733fc7f21b</anchor>
      <arglist>(const juce_wchar charToWrite) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>replaceChar</name>
      <anchorfile>classCharPointer__ASCII.html</anchorfile>
      <anchor>a054bda19b12a24917cb206135d28abd4</anchor>
      <arglist>(const juce_wchar newChar) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeNull</name>
      <anchorfile>classCharPointer__ASCII.html</anchorfile>
      <anchor>a58bcb2eac1020c73bf66c50b57ba1843</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>length</name>
      <anchorfile>classCharPointer__ASCII.html</anchorfile>
      <anchor>a0337abc21ab3c3bf9a86fa1082f0b314</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>lengthUpTo</name>
      <anchorfile>classCharPointer__ASCII.html</anchorfile>
      <anchor>a446e66e8ec874258e5aece82dfe1343c</anchor>
      <arglist>(const size_t maxCharsToCount) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>lengthUpTo</name>
      <anchorfile>classCharPointer__ASCII.html</anchorfile>
      <anchor>a9484e891c07631cbd30aa4d5218b9c96</anchor>
      <arglist>(const CharPointer_ASCII end) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>sizeInBytes</name>
      <anchorfile>classCharPointer__ASCII.html</anchorfile>
      <anchor>a5d9b8f6799c81f41b17ada06f341663b</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>CharPointer_ASCII</type>
      <name>findTerminatingNull</name>
      <anchorfile>classCharPointer__ASCII.html</anchorfile>
      <anchor>a0876ef6e480b2bb87f39c0b2eb12f6c2</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeAll</name>
      <anchorfile>classCharPointer__ASCII.html</anchorfile>
      <anchor>aa4a8d0bca98e34643eff30fd325c3ed0</anchor>
      <arglist>(const CharPointer src) noexcept</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>writeWithDestByteLimit</name>
      <anchorfile>classCharPointer__ASCII.html</anchorfile>
      <anchor>a5c33257c7d5dbbdff24d36b363dc7e4a</anchor>
      <arglist>(const CharPointer src, const size_t maxDestBytes) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeWithCharLimit</name>
      <anchorfile>classCharPointer__ASCII.html</anchorfile>
      <anchor>a90dfd927c18eeb36b730cc0bf9b2903d</anchor>
      <arglist>(const CharPointer src, const int maxChars) noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>compare</name>
      <anchorfile>classCharPointer__ASCII.html</anchorfile>
      <anchor>ac55f6d8fcd3ba65ad289dea52e07adf7</anchor>
      <arglist>(const CharPointer other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>compare</name>
      <anchorfile>classCharPointer__ASCII.html</anchorfile>
      <anchor>a62b211948b7a1f6b42be82b3ab7c6d9d</anchor>
      <arglist>(const CharPointer_ASCII other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>compareUpTo</name>
      <anchorfile>classCharPointer__ASCII.html</anchorfile>
      <anchor>a35201e2ff6c4037e2f52fb28c648699e</anchor>
      <arglist>(const CharPointer other, const int maxChars) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>compareUpTo</name>
      <anchorfile>classCharPointer__ASCII.html</anchorfile>
      <anchor>a4b5680661b5a6b336144322d9f8c3448</anchor>
      <arglist>(const CharPointer_ASCII other, const int maxChars) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>compareIgnoreCase</name>
      <anchorfile>classCharPointer__ASCII.html</anchorfile>
      <anchor>a2594193ac89ef6645ad91004b579ac59</anchor>
      <arglist>(const CharPointer other) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>compareIgnoreCase</name>
      <anchorfile>classCharPointer__ASCII.html</anchorfile>
      <anchor>a724284fd21c5d0c950398b0ce4f49667</anchor>
      <arglist>(const CharPointer_ASCII other) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>compareIgnoreCaseUpTo</name>
      <anchorfile>classCharPointer__ASCII.html</anchorfile>
      <anchor>abc3c0e882db2d5db17ef7fe3104ec476</anchor>
      <arglist>(const CharPointer other, const int maxChars) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>indexOf</name>
      <anchorfile>classCharPointer__ASCII.html</anchorfile>
      <anchor>aa4a0868b53035d938ef70e338d602857</anchor>
      <arglist>(const CharPointer stringToFind) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>indexOf</name>
      <anchorfile>classCharPointer__ASCII.html</anchorfile>
      <anchor>a5eaab616b6560069baaadade7fd18ec0</anchor>
      <arglist>(const juce_wchar charToFind) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>indexOf</name>
      <anchorfile>classCharPointer__ASCII.html</anchorfile>
      <anchor>aa9d771060a8f44b24a76f9388f88107d</anchor>
      <arglist>(const juce_wchar charToFind, const bool ignoreCase) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isWhitespace</name>
      <anchorfile>classCharPointer__ASCII.html</anchorfile>
      <anchor>a41883c550ab553dabb8890176b7133e4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isDigit</name>
      <anchorfile>classCharPointer__ASCII.html</anchorfile>
      <anchor>a32250190b49ea4fa0c7053be3873ee06</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isLetter</name>
      <anchorfile>classCharPointer__ASCII.html</anchorfile>
      <anchor>ad3859d62210809d7e52140e9f3e8e631</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isLetterOrDigit</name>
      <anchorfile>classCharPointer__ASCII.html</anchorfile>
      <anchor>a96e0007e4e36e6b4f23411d1c847568e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isUpperCase</name>
      <anchorfile>classCharPointer__ASCII.html</anchorfile>
      <anchor>a8ca8fe31c732a98f4d8d1e71e308ce2f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isLowerCase</name>
      <anchorfile>classCharPointer__ASCII.html</anchorfile>
      <anchor>abd12c4494348cbaa7c464089623cc5d8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>juce_wchar</type>
      <name>toUpperCase</name>
      <anchorfile>classCharPointer__ASCII.html</anchorfile>
      <anchor>acd439c5e2ffbb749960fab419bf48fc2</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>juce_wchar</type>
      <name>toLowerCase</name>
      <anchorfile>classCharPointer__ASCII.html</anchorfile>
      <anchor>a345ba7273fc3288bcd656786ae390bae</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getIntValue32</name>
      <anchorfile>classCharPointer__ASCII.html</anchorfile>
      <anchor>adcb32591a31db3d4ce6f62fae2eacf45</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>getIntValue64</name>
      <anchorfile>classCharPointer__ASCII.html</anchorfile>
      <anchor>a309286b2fa217c4fae667f64ebf97286</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getDoubleValue</name>
      <anchorfile>classCharPointer__ASCII.html</anchorfile>
      <anchor>a477aaad22ed57ff0c6893ba90e7e8be7</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>CharPointer_ASCII</type>
      <name>findEndOfWhitespace</name>
      <anchorfile>classCharPointer__ASCII.html</anchorfile>
      <anchor>a46e66abf5a596aaf031ee70699ab5ab9</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static size_t</type>
      <name>getBytesRequiredFor</name>
      <anchorfile>classCharPointer__ASCII.html</anchorfile>
      <anchor>a46b20d6375eab74f5646eb007a257d09</anchor>
      <arglist>(const juce_wchar) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static size_t</type>
      <name>getBytesRequiredFor</name>
      <anchorfile>classCharPointer__ASCII.html</anchorfile>
      <anchor>ace316358200da73de9bb47d98403831d</anchor>
      <arglist>(const CharPointer text) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>canRepresent</name>
      <anchorfile>classCharPointer__ASCII.html</anchorfile>
      <anchor>afe5960ae735cf778e29264ff2f21a0d2</anchor>
      <arglist>(juce_wchar character) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isValidString</name>
      <anchorfile>classCharPointer__ASCII.html</anchorfile>
      <anchor>a2f6778c511b05729cc81e8f3b7bca132</anchor>
      <arglist>(const CharType *dataToTest, int maxBytesToRead)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CharPointer_UTF16</name>
    <filename>classCharPointer__UTF16.html</filename>
    <member kind="enumvalue">
      <type>@</type>
      <name>byteOrderMarkBE1</name>
      <anchorfile>classCharPointer__UTF16.html</anchorfile>
      <anchor>a5a33e69697b3b8e7181f39f2fcc05cdaaec96c813c427ded95e8d412690c08c9a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>byteOrderMarkBE2</name>
      <anchorfile>classCharPointer__UTF16.html</anchorfile>
      <anchor>a5a33e69697b3b8e7181f39f2fcc05cdaa0e9e3e062cd6caa2ddbd9861763a5aef</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>byteOrderMarkLE1</name>
      <anchorfile>classCharPointer__UTF16.html</anchorfile>
      <anchor>a5a33e69697b3b8e7181f39f2fcc05cdaae1379594854299323a3c64115026d288</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>byteOrderMarkLE2</name>
      <anchorfile>classCharPointer__UTF16.html</anchorfile>
      <anchor>a5a33e69697b3b8e7181f39f2fcc05cdaae603365b2895acc018233efeb0da3d6b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>int16</type>
      <name>CharType</name>
      <anchorfile>classCharPointer__UTF16.html</anchorfile>
      <anchor>a28977ea8b479d3b2f3a8459594f88c58</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CharPointer_UTF16</name>
      <anchorfile>classCharPointer__UTF16.html</anchorfile>
      <anchor>a3b8f36f58c2899ba6e620965473397ab</anchor>
      <arglist>(const CharType *const rawPointer) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CharPointer_UTF16</name>
      <anchorfile>classCharPointer__UTF16.html</anchorfile>
      <anchor>ae8a672d80bd54445f2c32038b1e3d89e</anchor>
      <arglist>(const CharPointer_UTF16 &amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>CharPointer_UTF16</type>
      <name>operator=</name>
      <anchorfile>classCharPointer__UTF16.html</anchorfile>
      <anchor>a3a7b0b579db5d3a1b86b2fb70bc316d6</anchor>
      <arglist>(CharPointer_UTF16 other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>CharPointer_UTF16</type>
      <name>operator=</name>
      <anchorfile>classCharPointer__UTF16.html</anchorfile>
      <anchor>a9924d0e575debc39135ab7dc45983a79</anchor>
      <arglist>(const CharType *text) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classCharPointer__UTF16.html</anchorfile>
      <anchor>affee23ac0de3bd5b21d1146dc347334b</anchor>
      <arglist>(CharPointer_UTF16 other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classCharPointer__UTF16.html</anchorfile>
      <anchor>a657bfc271702bd57105f4ec0c147df6d</anchor>
      <arglist>(CharPointer_UTF16 other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>classCharPointer__UTF16.html</anchorfile>
      <anchor>af8e0ccfaba9701695bf6541d53990ce8</anchor>
      <arglist>(CharPointer_UTF16 other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>classCharPointer__UTF16.html</anchorfile>
      <anchor>adfb12d6c65a76882642cd9c35f38fffe</anchor>
      <arglist>(CharPointer_UTF16 other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>classCharPointer__UTF16.html</anchorfile>
      <anchor>a5d8f6137c35437f2f559f67e8e3a0d6e</anchor>
      <arglist>(CharPointer_UTF16 other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>classCharPointer__UTF16.html</anchorfile>
      <anchor>a7fcd08b425880673722e86bed86d7771</anchor>
      <arglist>(CharPointer_UTF16 other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>CharType *</type>
      <name>getAddress</name>
      <anchorfile>classCharPointer__UTF16.html</anchorfile>
      <anchor>a1e5dda82cc30d2889f65c4e8698426d4</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const CharType *</name>
      <anchorfile>classCharPointer__UTF16.html</anchorfile>
      <anchor>a0fd172e6338963799ec29f50bceefb8f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEmpty</name>
      <anchorfile>classCharPointer__UTF16.html</anchorfile>
      <anchor>a13ad3aa1ffb8cf9b09d35619f93c0551</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>juce_wchar</type>
      <name>operator*</name>
      <anchorfile>classCharPointer__UTF16.html</anchorfile>
      <anchor>a7c11c03b28b25d3a5914c36b3850c39a</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>CharPointer_UTF16</type>
      <name>operator++</name>
      <anchorfile>classCharPointer__UTF16.html</anchorfile>
      <anchor>ad8ea85f799b9ae4a4dec72300b2349f7</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>CharPointer_UTF16</type>
      <name>operator--</name>
      <anchorfile>classCharPointer__UTF16.html</anchorfile>
      <anchor>a6ee18d2b84e6f7443304fa5951ee4b1d</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>juce_wchar</type>
      <name>getAndAdvance</name>
      <anchorfile>classCharPointer__UTF16.html</anchorfile>
      <anchor>a41df61ed062db96f0792ce7f54da49d7</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>CharPointer_UTF16</type>
      <name>operator++</name>
      <anchorfile>classCharPointer__UTF16.html</anchorfile>
      <anchor>a58369a120186a6f73258852330acb428</anchor>
      <arglist>(int) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator+=</name>
      <anchorfile>classCharPointer__UTF16.html</anchorfile>
      <anchor>a76a792edf85b22acc6ad2e7d7f3d796e</anchor>
      <arglist>(int numToSkip) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator-=</name>
      <anchorfile>classCharPointer__UTF16.html</anchorfile>
      <anchor>a0587ca2c785aa7b426e1d005c603405d</anchor>
      <arglist>(int numToSkip) noexcept</arglist>
    </member>
    <member kind="function">
      <type>juce_wchar</type>
      <name>operator[]</name>
      <anchorfile>classCharPointer__UTF16.html</anchorfile>
      <anchor>a5e59116f71c716371e991344b047101e</anchor>
      <arglist>(const int characterIndex) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>CharPointer_UTF16</type>
      <name>operator+</name>
      <anchorfile>classCharPointer__UTF16.html</anchorfile>
      <anchor>a2ee5d01bc02e2a22bf4765823d95608b</anchor>
      <arglist>(const int numToSkip) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>CharPointer_UTF16</type>
      <name>operator-</name>
      <anchorfile>classCharPointer__UTF16.html</anchorfile>
      <anchor>a319e3ff5ce3e87ec79bbaa19fafd5f04</anchor>
      <arglist>(const int numToSkip) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>classCharPointer__UTF16.html</anchorfile>
      <anchor>a515757c960c3baad17b9e73a3e82cc11</anchor>
      <arglist>(juce_wchar charToWrite) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeNull</name>
      <anchorfile>classCharPointer__UTF16.html</anchorfile>
      <anchor>a8de95eb2a7116acd346c4ed3d3fd3515</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>length</name>
      <anchorfile>classCharPointer__UTF16.html</anchorfile>
      <anchor>a6e376bba43fa82d73197d04895bdf126</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>lengthUpTo</name>
      <anchorfile>classCharPointer__UTF16.html</anchorfile>
      <anchor>a18b7fd72a75236159029a595afcdc32e</anchor>
      <arglist>(const size_t maxCharsToCount) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>lengthUpTo</name>
      <anchorfile>classCharPointer__UTF16.html</anchorfile>
      <anchor>a24b7bee2c71a1b54b87f5ee93929a1b8</anchor>
      <arglist>(const CharPointer_UTF16 end) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>sizeInBytes</name>
      <anchorfile>classCharPointer__UTF16.html</anchorfile>
      <anchor>ad0f7058d9e9f68d81c1f847b8b76f27c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>CharPointer_UTF16</type>
      <name>findTerminatingNull</name>
      <anchorfile>classCharPointer__UTF16.html</anchorfile>
      <anchor>a9321c084d9ecd18da24cff1a368f29cd</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeAll</name>
      <anchorfile>classCharPointer__UTF16.html</anchorfile>
      <anchor>a9f92e575c699c6b3bc19348fd809ce67</anchor>
      <arglist>(const CharPointer src) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeAll</name>
      <anchorfile>classCharPointer__UTF16.html</anchorfile>
      <anchor>a621fe27fa14022ef4c68083423319fea</anchor>
      <arglist>(const CharPointer_UTF16 src) noexcept</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>writeWithDestByteLimit</name>
      <anchorfile>classCharPointer__UTF16.html</anchorfile>
      <anchor>a1921440a1aae42ec7ea2264e5e3af118</anchor>
      <arglist>(const CharPointer src, const size_t maxDestBytes) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeWithCharLimit</name>
      <anchorfile>classCharPointer__UTF16.html</anchorfile>
      <anchor>ad2dd0f3ae4e8075de1e550095e0316a6</anchor>
      <arglist>(const CharPointer src, const int maxChars) noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>compare</name>
      <anchorfile>classCharPointer__UTF16.html</anchorfile>
      <anchor>a84aa805a85c3654ab0149c26a5388d03</anchor>
      <arglist>(const CharPointer other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>compareUpTo</name>
      <anchorfile>classCharPointer__UTF16.html</anchorfile>
      <anchor>aeee6d47d6f1de43422d9bc73234fe781</anchor>
      <arglist>(const CharPointer other, const int maxChars) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>compareIgnoreCase</name>
      <anchorfile>classCharPointer__UTF16.html</anchorfile>
      <anchor>ac45dc36f8c5ba3ec6313ec55d669fb52</anchor>
      <arglist>(const CharPointer other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>compareIgnoreCaseUpTo</name>
      <anchorfile>classCharPointer__UTF16.html</anchorfile>
      <anchor>a25d2b63a258f5deda19e5e06ed40bc9a</anchor>
      <arglist>(const CharPointer other, const int maxChars) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>indexOf</name>
      <anchorfile>classCharPointer__UTF16.html</anchorfile>
      <anchor>aca092edd0c9aa14d467af69a1e2b88e7</anchor>
      <arglist>(const CharPointer stringToFind) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>indexOf</name>
      <anchorfile>classCharPointer__UTF16.html</anchorfile>
      <anchor>a9898fcd1d82b488162fdeb469320a5e5</anchor>
      <arglist>(const juce_wchar charToFind) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>indexOf</name>
      <anchorfile>classCharPointer__UTF16.html</anchorfile>
      <anchor>a6f2bff8fe087a58422205c20b5108105</anchor>
      <arglist>(const juce_wchar charToFind, const bool ignoreCase) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isWhitespace</name>
      <anchorfile>classCharPointer__UTF16.html</anchorfile>
      <anchor>a9985663b80f83e80caf9b9ce1d1e7ee7</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isDigit</name>
      <anchorfile>classCharPointer__UTF16.html</anchorfile>
      <anchor>aa85407ed241a73b49991cf6414c58238</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isLetter</name>
      <anchorfile>classCharPointer__UTF16.html</anchorfile>
      <anchor>a3fb032db114d5574404a2a937f6d5b22</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isLetterOrDigit</name>
      <anchorfile>classCharPointer__UTF16.html</anchorfile>
      <anchor>a6f12dad08e0deaad5ad56f39cadc9891</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isUpperCase</name>
      <anchorfile>classCharPointer__UTF16.html</anchorfile>
      <anchor>a0010de47cf9f0c4fe7d0f33931c666af</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isLowerCase</name>
      <anchorfile>classCharPointer__UTF16.html</anchorfile>
      <anchor>a96740237e7b24401880c9ff5114e1b08</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>juce_wchar</type>
      <name>toUpperCase</name>
      <anchorfile>classCharPointer__UTF16.html</anchorfile>
      <anchor>a9f4679d73f4135ce332eb6db2b53b67c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>juce_wchar</type>
      <name>toLowerCase</name>
      <anchorfile>classCharPointer__UTF16.html</anchorfile>
      <anchor>a2f23f33e815df394df305b10a4d8a372</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getIntValue32</name>
      <anchorfile>classCharPointer__UTF16.html</anchorfile>
      <anchor>a5793f67991416a245becaf79c7ab387f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>getIntValue64</name>
      <anchorfile>classCharPointer__UTF16.html</anchorfile>
      <anchor>aa80bcbf2f7632513a62b59282103b1ab</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getDoubleValue</name>
      <anchorfile>classCharPointer__UTF16.html</anchorfile>
      <anchor>a8c8fa1d45d916c5cb685dc6e5a72736d</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>CharPointer_UTF16</type>
      <name>findEndOfWhitespace</name>
      <anchorfile>classCharPointer__UTF16.html</anchorfile>
      <anchor>a390416da21c0599f732fe6c7815f67cd</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>CharPointer_UTF16</type>
      <name>atomicSwap</name>
      <anchorfile>classCharPointer__UTF16.html</anchorfile>
      <anchor>a707b15339e842553d65a95f07ffd2306</anchor>
      <arglist>(const CharPointer_UTF16 newValue)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static size_t</type>
      <name>getBytesRequiredFor</name>
      <anchorfile>classCharPointer__UTF16.html</anchorfile>
      <anchor>a2c7e013dd52871e441d013342ce4d82f</anchor>
      <arglist>(const juce_wchar charToWrite) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static size_t</type>
      <name>getBytesRequiredFor</name>
      <anchorfile>classCharPointer__UTF16.html</anchorfile>
      <anchor>a9236e8a0b5ec5a1acfb25cee0b4395c2</anchor>
      <arglist>(CharPointer text) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>canRepresent</name>
      <anchorfile>classCharPointer__UTF16.html</anchorfile>
      <anchor>a85971fe7d9b82ad95daf137af02976f6</anchor>
      <arglist>(juce_wchar character) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isValidString</name>
      <anchorfile>classCharPointer__UTF16.html</anchorfile>
      <anchor>a9cb146266c89a9abecb848011bd0382c</anchor>
      <arglist>(const CharType *dataToTest, int maxBytesToRead)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isByteOrderMarkBigEndian</name>
      <anchorfile>classCharPointer__UTF16.html</anchorfile>
      <anchor>ace1742329bcdaa7165380dd2d2c002d5</anchor>
      <arglist>(const void *possibleByteOrder) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isByteOrderMarkLittleEndian</name>
      <anchorfile>classCharPointer__UTF16.html</anchorfile>
      <anchor>a07380f4a63664c59377c84dda44635e7</anchor>
      <arglist>(const void *possibleByteOrder) noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CharPointer_UTF32</name>
    <filename>classCharPointer__UTF32.html</filename>
    <member kind="typedef">
      <type>juce_wchar</type>
      <name>CharType</name>
      <anchorfile>classCharPointer__UTF32.html</anchorfile>
      <anchor>aec00e72e5c5324d92e97f17ff7cd70f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CharPointer_UTF32</name>
      <anchorfile>classCharPointer__UTF32.html</anchorfile>
      <anchor>a8af5362ad32f31575d76998d70e1ce2a</anchor>
      <arglist>(const CharType *const rawPointer) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CharPointer_UTF32</name>
      <anchorfile>classCharPointer__UTF32.html</anchorfile>
      <anchor>abb743befaaa4aabd6ae57cd4b0c4e2d0</anchor>
      <arglist>(const CharPointer_UTF32 &amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>CharPointer_UTF32</type>
      <name>operator=</name>
      <anchorfile>classCharPointer__UTF32.html</anchorfile>
      <anchor>a263b1ff4576a5028a67e94a7651cb29e</anchor>
      <arglist>(CharPointer_UTF32 other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>CharPointer_UTF32</type>
      <name>operator=</name>
      <anchorfile>classCharPointer__UTF32.html</anchorfile>
      <anchor>a3816f5e204c91761236df5b4a8697be0</anchor>
      <arglist>(const CharType *text) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classCharPointer__UTF32.html</anchorfile>
      <anchor>aa383d42ff281a6c20027bf051ab6e772</anchor>
      <arglist>(CharPointer_UTF32 other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classCharPointer__UTF32.html</anchorfile>
      <anchor>a0fb578864c4e207d664dc1952e225a04</anchor>
      <arglist>(CharPointer_UTF32 other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>classCharPointer__UTF32.html</anchorfile>
      <anchor>a27d5571e1a3e987acbd9747575e68029</anchor>
      <arglist>(CharPointer_UTF32 other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>classCharPointer__UTF32.html</anchorfile>
      <anchor>a0bfea0fc717b37b7a7d6c57a9498e0c5</anchor>
      <arglist>(CharPointer_UTF32 other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>classCharPointer__UTF32.html</anchorfile>
      <anchor>aca66b9a0ae87290ba1634d4ba05d42c0</anchor>
      <arglist>(CharPointer_UTF32 other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>classCharPointer__UTF32.html</anchorfile>
      <anchor>a0186984739ceadc2b9bd7a3a184a9efd</anchor>
      <arglist>(CharPointer_UTF32 other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>CharType *</type>
      <name>getAddress</name>
      <anchorfile>classCharPointer__UTF32.html</anchorfile>
      <anchor>ad07ae8c5d561e107d67264399fa07b6c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const CharType *</name>
      <anchorfile>classCharPointer__UTF32.html</anchorfile>
      <anchor>a00d42ba06ea2ce18df6f2bad11d0b63d</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEmpty</name>
      <anchorfile>classCharPointer__UTF32.html</anchorfile>
      <anchor>afeb22ca18bf5130341bf3dfc5dd63f62</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>juce_wchar</type>
      <name>operator*</name>
      <anchorfile>classCharPointer__UTF32.html</anchorfile>
      <anchor>a47ce448fd1f52d5e0c8911e83eb8d378</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>CharPointer_UTF32</type>
      <name>operator++</name>
      <anchorfile>classCharPointer__UTF32.html</anchorfile>
      <anchor>a4770d169696336b392b3a086dde911d2</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>CharPointer_UTF32</type>
      <name>operator--</name>
      <anchorfile>classCharPointer__UTF32.html</anchorfile>
      <anchor>a2602ddd2ac36d6bcf9609db04bcae38a</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>juce_wchar</type>
      <name>getAndAdvance</name>
      <anchorfile>classCharPointer__UTF32.html</anchorfile>
      <anchor>a17395f87dd554c1983aa4bdf49a2292c</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>CharPointer_UTF32</type>
      <name>operator++</name>
      <anchorfile>classCharPointer__UTF32.html</anchorfile>
      <anchor>aef7aab932a9ad8b07c6efb908c0767f4</anchor>
      <arglist>(int) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator+=</name>
      <anchorfile>classCharPointer__UTF32.html</anchorfile>
      <anchor>abb35aa950c3d29d99596ebd0f438ddb6</anchor>
      <arglist>(const int numToSkip) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator-=</name>
      <anchorfile>classCharPointer__UTF32.html</anchorfile>
      <anchor>a0fb27a5c1c1c85fcee28f5df6c1cd720</anchor>
      <arglist>(const int numToSkip) noexcept</arglist>
    </member>
    <member kind="function">
      <type>juce_wchar &amp;</type>
      <name>operator[]</name>
      <anchorfile>classCharPointer__UTF32.html</anchorfile>
      <anchor>ac88fe872f66b05f840380d5e26d50005</anchor>
      <arglist>(const int characterIndex) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>CharPointer_UTF32</type>
      <name>operator+</name>
      <anchorfile>classCharPointer__UTF32.html</anchorfile>
      <anchor>af6f7099f07fd5946acc38f7266655f89</anchor>
      <arglist>(const int numToSkip) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>CharPointer_UTF32</type>
      <name>operator-</name>
      <anchorfile>classCharPointer__UTF32.html</anchorfile>
      <anchor>ae137213e4c83554c724c299f68cc91d4</anchor>
      <arglist>(const int numToSkip) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>classCharPointer__UTF32.html</anchorfile>
      <anchor>a4d5d291f1afe51b6930b5ffbe52f0de4</anchor>
      <arglist>(const juce_wchar charToWrite) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>replaceChar</name>
      <anchorfile>classCharPointer__UTF32.html</anchorfile>
      <anchor>affdec15df0e21e4985da83f3df64f263</anchor>
      <arglist>(const juce_wchar newChar) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeNull</name>
      <anchorfile>classCharPointer__UTF32.html</anchorfile>
      <anchor>aa990904698eefcae216fd1a0324c3fb5</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>length</name>
      <anchorfile>classCharPointer__UTF32.html</anchorfile>
      <anchor>a17ae1bf956ba06132575fd396516fb6f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>lengthUpTo</name>
      <anchorfile>classCharPointer__UTF32.html</anchorfile>
      <anchor>ab5af051053dc120126f3f04a9c88871b</anchor>
      <arglist>(const size_t maxCharsToCount) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>lengthUpTo</name>
      <anchorfile>classCharPointer__UTF32.html</anchorfile>
      <anchor>a7e4a66e11bd3cb5daa3ad9de119ee5c1</anchor>
      <arglist>(const CharPointer_UTF32 end) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>sizeInBytes</name>
      <anchorfile>classCharPointer__UTF32.html</anchorfile>
      <anchor>a68aa1761ab4b0bd01dd9cb12c7512f36</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>CharPointer_UTF32</type>
      <name>findTerminatingNull</name>
      <anchorfile>classCharPointer__UTF32.html</anchorfile>
      <anchor>abd7b2bd51355a8a467f664ece48bdde5</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeAll</name>
      <anchorfile>classCharPointer__UTF32.html</anchorfile>
      <anchor>ad246d2eb02d4f3259ac6212cff8a2d53</anchor>
      <arglist>(const CharPointer src) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeAll</name>
      <anchorfile>classCharPointer__UTF32.html</anchorfile>
      <anchor>a48e79084ee4b1b1ee8e53a63f7350eef</anchor>
      <arglist>(const CharPointer_UTF32 src) noexcept</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>writeWithDestByteLimit</name>
      <anchorfile>classCharPointer__UTF32.html</anchorfile>
      <anchor>aad135388edfba78ee61601325e3c6194</anchor>
      <arglist>(const CharPointer src, const size_t maxDestBytes) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeWithCharLimit</name>
      <anchorfile>classCharPointer__UTF32.html</anchorfile>
      <anchor>a1bd6f1db5dd0f9a65fa09dd600a16e1d</anchor>
      <arglist>(const CharPointer src, const int maxChars) noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>compare</name>
      <anchorfile>classCharPointer__UTF32.html</anchorfile>
      <anchor>a4ecc47df85543129a5382ee30ac36338</anchor>
      <arglist>(const CharPointer other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>compareUpTo</name>
      <anchorfile>classCharPointer__UTF32.html</anchorfile>
      <anchor>a73946fdcc82e0e03501976e1cd47b323</anchor>
      <arglist>(const CharPointer other, const int maxChars) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>compareIgnoreCase</name>
      <anchorfile>classCharPointer__UTF32.html</anchorfile>
      <anchor>a48be323705c2ad8d8238c212e7ceba81</anchor>
      <arglist>(const CharPointer other) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>compareIgnoreCaseUpTo</name>
      <anchorfile>classCharPointer__UTF32.html</anchorfile>
      <anchor>a945448d9c3f38546a433a9f71332d695</anchor>
      <arglist>(const CharPointer other, const int maxChars) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>indexOf</name>
      <anchorfile>classCharPointer__UTF32.html</anchorfile>
      <anchor>a7462a3d4ad9f36271a6d44023e7f177f</anchor>
      <arglist>(const CharPointer stringToFind) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>indexOf</name>
      <anchorfile>classCharPointer__UTF32.html</anchorfile>
      <anchor>a21049d77a1723e3baae318728d300bda</anchor>
      <arglist>(const juce_wchar charToFind) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>indexOf</name>
      <anchorfile>classCharPointer__UTF32.html</anchorfile>
      <anchor>a9fa2ac897c0e6d978ff12907f61892b0</anchor>
      <arglist>(const juce_wchar charToFind, const bool ignoreCase) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isWhitespace</name>
      <anchorfile>classCharPointer__UTF32.html</anchorfile>
      <anchor>ad7178b3b784f737ef422ed8e2ab9230e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isDigit</name>
      <anchorfile>classCharPointer__UTF32.html</anchorfile>
      <anchor>a9f07809894a45ae036a245389f638529</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isLetter</name>
      <anchorfile>classCharPointer__UTF32.html</anchorfile>
      <anchor>a29941ef95624b8c308640b8e9172b6a1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isLetterOrDigit</name>
      <anchorfile>classCharPointer__UTF32.html</anchorfile>
      <anchor>a6a9dba9f1050db8daab6560b12b213ee</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isUpperCase</name>
      <anchorfile>classCharPointer__UTF32.html</anchorfile>
      <anchor>acb9c7c6eb40147ba6e6159baea2877b7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isLowerCase</name>
      <anchorfile>classCharPointer__UTF32.html</anchorfile>
      <anchor>afc452c7113e22fca699f8744dcac8a59</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>juce_wchar</type>
      <name>toUpperCase</name>
      <anchorfile>classCharPointer__UTF32.html</anchorfile>
      <anchor>abc8f84ecbede295debe097ba50754061</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>juce_wchar</type>
      <name>toLowerCase</name>
      <anchorfile>classCharPointer__UTF32.html</anchorfile>
      <anchor>a1f444f71abb18ea75989f4630e77badd</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getIntValue32</name>
      <anchorfile>classCharPointer__UTF32.html</anchorfile>
      <anchor>a1f7171176d8f0d77f4275e5698397535</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>getIntValue64</name>
      <anchorfile>classCharPointer__UTF32.html</anchorfile>
      <anchor>a3cb59485dac27fbd64fa7667880c9f0c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getDoubleValue</name>
      <anchorfile>classCharPointer__UTF32.html</anchorfile>
      <anchor>a64fc0ce7ef9331d755ab1847618d2eb4</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>CharPointer_UTF32</type>
      <name>findEndOfWhitespace</name>
      <anchorfile>classCharPointer__UTF32.html</anchorfile>
      <anchor>a609babf8df00758db3e44c676d61d457</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>CharPointer_UTF32</type>
      <name>atomicSwap</name>
      <anchorfile>classCharPointer__UTF32.html</anchorfile>
      <anchor>a7318a669eeda82ada4ab6afc32973b57</anchor>
      <arglist>(const CharPointer_UTF32 newValue)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static size_t</type>
      <name>getBytesRequiredFor</name>
      <anchorfile>classCharPointer__UTF32.html</anchorfile>
      <anchor>a8132e312b73ab73df7b990336b002b6d</anchor>
      <arglist>(const juce_wchar) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static size_t</type>
      <name>getBytesRequiredFor</name>
      <anchorfile>classCharPointer__UTF32.html</anchorfile>
      <anchor>a5595f424d651c1a1b8e74e9345964727</anchor>
      <arglist>(const CharPointer text) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>canRepresent</name>
      <anchorfile>classCharPointer__UTF32.html</anchorfile>
      <anchor>ad350d6d84f72f876d0fdb4257edae6f0</anchor>
      <arglist>(juce_wchar character) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isValidString</name>
      <anchorfile>classCharPointer__UTF32.html</anchorfile>
      <anchor>aff3cbc01e31f577c294d82d26dca0340</anchor>
      <arglist>(const CharType *dataToTest, int maxBytesToRead)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CharPointer_UTF8</name>
    <filename>classCharPointer__UTF8.html</filename>
    <member kind="enumvalue">
      <type>@</type>
      <name>byteOrderMark1</name>
      <anchorfile>classCharPointer__UTF8.html</anchorfile>
      <anchor>ad6480de7be0d714832e4f15474c3d675a8085c34bfa20125556249baba7268ebc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>byteOrderMark2</name>
      <anchorfile>classCharPointer__UTF8.html</anchorfile>
      <anchor>ad6480de7be0d714832e4f15474c3d675a2e5a169828d5d53f24d89f12ea14d308</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>byteOrderMark3</name>
      <anchorfile>classCharPointer__UTF8.html</anchorfile>
      <anchor>ad6480de7be0d714832e4f15474c3d675aa535790ae396383e305fbf9af74624f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>char</type>
      <name>CharType</name>
      <anchorfile>classCharPointer__UTF8.html</anchorfile>
      <anchor>ac410c2e8043cffd3cf0ae00e04c6e630</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CharPointer_UTF8</name>
      <anchorfile>classCharPointer__UTF8.html</anchorfile>
      <anchor>aef82dd41c193bbffec176c7b2a0dd810</anchor>
      <arglist>(const CharType *const rawPointer) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CharPointer_UTF8</name>
      <anchorfile>classCharPointer__UTF8.html</anchorfile>
      <anchor>a2d8b82ec16af6c4101b95dcc72ab6883</anchor>
      <arglist>(const CharPointer_UTF8 &amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>CharPointer_UTF8</type>
      <name>operator=</name>
      <anchorfile>classCharPointer__UTF8.html</anchorfile>
      <anchor>a078cf9740e760c9ee3c0da5fcb156f6c</anchor>
      <arglist>(CharPointer_UTF8 other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>CharPointer_UTF8</type>
      <name>operator=</name>
      <anchorfile>classCharPointer__UTF8.html</anchorfile>
      <anchor>ae8392f792c15c60a80186238bf587dc6</anchor>
      <arglist>(const CharType *text) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classCharPointer__UTF8.html</anchorfile>
      <anchor>a31528c0bee1880b487e24a57740dd3d9</anchor>
      <arglist>(CharPointer_UTF8 other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classCharPointer__UTF8.html</anchorfile>
      <anchor>aa696e328dab0b0bc5703bd5bbd01e7b6</anchor>
      <arglist>(CharPointer_UTF8 other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>classCharPointer__UTF8.html</anchorfile>
      <anchor>ae9e7f4d9b5078f7e752da51ec796ebf8</anchor>
      <arglist>(CharPointer_UTF8 other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>classCharPointer__UTF8.html</anchorfile>
      <anchor>a55109c0b001ed033d0c360bb939e972b</anchor>
      <arglist>(CharPointer_UTF8 other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>classCharPointer__UTF8.html</anchorfile>
      <anchor>af0b873c176820a5a19845cc41e93fc74</anchor>
      <arglist>(CharPointer_UTF8 other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>classCharPointer__UTF8.html</anchorfile>
      <anchor>a7e5fa09b9e03f1631918becf6fa86cab</anchor>
      <arglist>(CharPointer_UTF8 other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>CharType *</type>
      <name>getAddress</name>
      <anchorfile>classCharPointer__UTF8.html</anchorfile>
      <anchor>a2cc5261e5aff03fba78a712a79779300</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const CharType *</name>
      <anchorfile>classCharPointer__UTF8.html</anchorfile>
      <anchor>a17e9bb3a69e75f92034d2dae676f7180</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEmpty</name>
      <anchorfile>classCharPointer__UTF8.html</anchorfile>
      <anchor>a452c936eef0f27624b4fcecf3988e861</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>juce_wchar</type>
      <name>operator*</name>
      <anchorfile>classCharPointer__UTF8.html</anchorfile>
      <anchor>a5b19c2009d8f8b0dc95c066395faa0b5</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>CharPointer_UTF8 &amp;</type>
      <name>operator++</name>
      <anchorfile>classCharPointer__UTF8.html</anchorfile>
      <anchor>ab4a4967be0c1973db2e1faed09c1150e</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>CharPointer_UTF8</type>
      <name>operator--</name>
      <anchorfile>classCharPointer__UTF8.html</anchorfile>
      <anchor>aba32f5a15e64ac26945833c0bfceebf1</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>juce_wchar</type>
      <name>getAndAdvance</name>
      <anchorfile>classCharPointer__UTF8.html</anchorfile>
      <anchor>aa04226d2270f693aacdfc242e3409cf9</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>CharPointer_UTF8</type>
      <name>operator++</name>
      <anchorfile>classCharPointer__UTF8.html</anchorfile>
      <anchor>a00580758ed092347f1f6231cfaf7bc8a</anchor>
      <arglist>(int) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator+=</name>
      <anchorfile>classCharPointer__UTF8.html</anchorfile>
      <anchor>aa4cc9b4ed06e2bd8074e5515dde212a0</anchor>
      <arglist>(int numToSkip) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator-=</name>
      <anchorfile>classCharPointer__UTF8.html</anchorfile>
      <anchor>aafcbd7d7f23270f413a39a03608c62b0</anchor>
      <arglist>(int numToSkip) noexcept</arglist>
    </member>
    <member kind="function">
      <type>juce_wchar</type>
      <name>operator[]</name>
      <anchorfile>classCharPointer__UTF8.html</anchorfile>
      <anchor>a72bb9d58f70b5d8886d0b7a324a7e955</anchor>
      <arglist>(int characterIndex) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>CharPointer_UTF8</type>
      <name>operator+</name>
      <anchorfile>classCharPointer__UTF8.html</anchorfile>
      <anchor>acfd5a69b9692e933f2b3991cbd8911e0</anchor>
      <arglist>(int numToSkip) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>CharPointer_UTF8</type>
      <name>operator-</name>
      <anchorfile>classCharPointer__UTF8.html</anchorfile>
      <anchor>a3768795b09fa735a26e07c91999f7650</anchor>
      <arglist>(int numToSkip) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>length</name>
      <anchorfile>classCharPointer__UTF8.html</anchorfile>
      <anchor>ab6a19ddff694e7e52f0063c6d298c778</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>lengthUpTo</name>
      <anchorfile>classCharPointer__UTF8.html</anchorfile>
      <anchor>ade7a61fe136d8c65032f5bcab7a4bbfc</anchor>
      <arglist>(const size_t maxCharsToCount) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>lengthUpTo</name>
      <anchorfile>classCharPointer__UTF8.html</anchorfile>
      <anchor>a4de5ad089e77e1551bf32fbae7ab37ba</anchor>
      <arglist>(const CharPointer_UTF8 end) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>sizeInBytes</name>
      <anchorfile>classCharPointer__UTF8.html</anchorfile>
      <anchor>a46b0aabf7dd39aefdc1f0b2afcac8eca</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>CharPointer_UTF8</type>
      <name>findTerminatingNull</name>
      <anchorfile>classCharPointer__UTF8.html</anchorfile>
      <anchor>ae24e5043e6c78c0750b697d85eea05f2</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>classCharPointer__UTF8.html</anchorfile>
      <anchor>af477c8305e8299286dca56a9ca75d433</anchor>
      <arglist>(const juce_wchar charToWrite) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeNull</name>
      <anchorfile>classCharPointer__UTF8.html</anchorfile>
      <anchor>ac794a16057eb9bc642a21c73568e02e3</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeAll</name>
      <anchorfile>classCharPointer__UTF8.html</anchorfile>
      <anchor>ae839e2b033f1c0597c6ca8b591e3ec58</anchor>
      <arglist>(const CharPointer src) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeAll</name>
      <anchorfile>classCharPointer__UTF8.html</anchorfile>
      <anchor>a1dbbff5df930edb3fd5fca50b2666529</anchor>
      <arglist>(const CharPointer_UTF8 src) noexcept</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>writeWithDestByteLimit</name>
      <anchorfile>classCharPointer__UTF8.html</anchorfile>
      <anchor>a19786aa1ddf993e1a1969c3141e7f68a</anchor>
      <arglist>(const CharPointer src, const size_t maxDestBytes) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeWithCharLimit</name>
      <anchorfile>classCharPointer__UTF8.html</anchorfile>
      <anchor>a2d324a5e6ced93c34ac56737b555a674</anchor>
      <arglist>(const CharPointer src, const int maxChars) noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>compare</name>
      <anchorfile>classCharPointer__UTF8.html</anchorfile>
      <anchor>afc7dfda1d81c1e8f11fb9544769efbce</anchor>
      <arglist>(const CharPointer other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>compareUpTo</name>
      <anchorfile>classCharPointer__UTF8.html</anchorfile>
      <anchor>adb818a45252c42e21f0e233fe757397b</anchor>
      <arglist>(const CharPointer other, const int maxChars) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>compareIgnoreCase</name>
      <anchorfile>classCharPointer__UTF8.html</anchorfile>
      <anchor>af9ddbeda1c9ec897d99cb6433e484af9</anchor>
      <arglist>(const CharPointer other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>compareIgnoreCase</name>
      <anchorfile>classCharPointer__UTF8.html</anchorfile>
      <anchor>abb173a6187b83b31830d418def13bf93</anchor>
      <arglist>(const CharPointer_UTF8 other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>compareIgnoreCaseUpTo</name>
      <anchorfile>classCharPointer__UTF8.html</anchorfile>
      <anchor>abb1f323cccee9f3cdb1244e70af835b7</anchor>
      <arglist>(const CharPointer other, const int maxChars) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>indexOf</name>
      <anchorfile>classCharPointer__UTF8.html</anchorfile>
      <anchor>a49b568aa6e8e992080e31e6ed1a8ffac</anchor>
      <arglist>(const CharPointer stringToFind) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>indexOf</name>
      <anchorfile>classCharPointer__UTF8.html</anchorfile>
      <anchor>a8f96063c08b82528519d34768c03d715</anchor>
      <arglist>(const juce_wchar charToFind) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>indexOf</name>
      <anchorfile>classCharPointer__UTF8.html</anchorfile>
      <anchor>aeb907245068a92ecd70990e5cd75b767</anchor>
      <arglist>(const juce_wchar charToFind, const bool ignoreCase) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isWhitespace</name>
      <anchorfile>classCharPointer__UTF8.html</anchorfile>
      <anchor>acde7478e0bd4f72ba80c37391fde3c30</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isDigit</name>
      <anchorfile>classCharPointer__UTF8.html</anchorfile>
      <anchor>add4e53cc313384bd3d3346f30677bc7c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isLetter</name>
      <anchorfile>classCharPointer__UTF8.html</anchorfile>
      <anchor>a29dd4e419bd59fcde8217b48ba85923d</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isLetterOrDigit</name>
      <anchorfile>classCharPointer__UTF8.html</anchorfile>
      <anchor>a1bbf1d6235491ff7614913945ed74272</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isUpperCase</name>
      <anchorfile>classCharPointer__UTF8.html</anchorfile>
      <anchor>a7c04fb1ce2e2a69d88f458787b53991b</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isLowerCase</name>
      <anchorfile>classCharPointer__UTF8.html</anchorfile>
      <anchor>ad2d69913724d7d1ae82c328f47823a11</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>juce_wchar</type>
      <name>toUpperCase</name>
      <anchorfile>classCharPointer__UTF8.html</anchorfile>
      <anchor>a89f8a6b510bbda4b95e5b8917d23f35c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>juce_wchar</type>
      <name>toLowerCase</name>
      <anchorfile>classCharPointer__UTF8.html</anchorfile>
      <anchor>ad9d5948877132712f57ecc2094479444</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getIntValue32</name>
      <anchorfile>classCharPointer__UTF8.html</anchorfile>
      <anchor>acbc5e116260ff6357a9f5b7ffe8300ae</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>getIntValue64</name>
      <anchorfile>classCharPointer__UTF8.html</anchorfile>
      <anchor>a1cd0d2c43a3df347467ec05a3a8b5339</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getDoubleValue</name>
      <anchorfile>classCharPointer__UTF8.html</anchorfile>
      <anchor>aceae335150864e9a0804748b3af8ce8e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>CharPointer_UTF8</type>
      <name>findEndOfWhitespace</name>
      <anchorfile>classCharPointer__UTF8.html</anchorfile>
      <anchor>a955fb7d8289c3b1e61f1bd70b74df117</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>CharPointer_UTF8</type>
      <name>atomicSwap</name>
      <anchorfile>classCharPointer__UTF8.html</anchorfile>
      <anchor>a51b2d5b8382bc3c6dec9e9b758c6ee61</anchor>
      <arglist>(const CharPointer_UTF8 newValue)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static size_t</type>
      <name>getBytesRequiredFor</name>
      <anchorfile>classCharPointer__UTF8.html</anchorfile>
      <anchor>af70d66750ea1b8be02f613592319059e</anchor>
      <arglist>(const juce_wchar charToWrite) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static size_t</type>
      <name>getBytesRequiredFor</name>
      <anchorfile>classCharPointer__UTF8.html</anchorfile>
      <anchor>a0039e385e2e3b77edf984dc3d5e811b0</anchor>
      <arglist>(CharPointer text) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>canRepresent</name>
      <anchorfile>classCharPointer__UTF8.html</anchorfile>
      <anchor>ab1e225fa4b54c0c647209eb092ff4c0a</anchor>
      <arglist>(juce_wchar character) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isValidString</name>
      <anchorfile>classCharPointer__UTF8.html</anchorfile>
      <anchor>a5ff9c244b3c7615345e0c3dc59dc7289</anchor>
      <arglist>(const CharType *dataToTest, int maxBytesToRead)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isByteOrderMark</name>
      <anchorfile>classCharPointer__UTF8.html</anchorfile>
      <anchor>a3040c1c80d603a558fe7ffc01efec212</anchor>
      <arglist>(const void *possibleByteOrder) noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ChildProcess</name>
    <filename>classChildProcess.html</filename>
    <member kind="enumeration">
      <type></type>
      <name>StreamFlags</name>
      <anchorfile>classChildProcess.html</anchorfile>
      <anchor>a9e7be158550b4d2a470e4cceef501892</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>wantStdOut</name>
      <anchorfile>classChildProcess.html</anchorfile>
      <anchor>a9e7be158550b4d2a470e4cceef501892abb52a8d118b221d35bc924efb9f48573</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>wantStdErr</name>
      <anchorfile>classChildProcess.html</anchorfile>
      <anchor>a9e7be158550b4d2a470e4cceef501892a99e96160b71df9cd65473f410ac7090e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ChildProcess</name>
      <anchorfile>classChildProcess.html</anchorfile>
      <anchor>a7a3ac50868578dc8b65203e4ccfb8038</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ChildProcess</name>
      <anchorfile>classChildProcess.html</anchorfile>
      <anchor>a3749642d15c9fce912f9e7f9daaf52f0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>start</name>
      <anchorfile>classChildProcess.html</anchorfile>
      <anchor>aa5e6f939a0f0c3e87bd7c58dcec9f13c</anchor>
      <arglist>(const String &amp;command, int streamFlags=wantStdOut|wantStdErr)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>start</name>
      <anchorfile>classChildProcess.html</anchorfile>
      <anchor>ae1b54ec34a8fa09e679aed90c167cb64</anchor>
      <arglist>(const StringArray &amp;arguments, int streamFlags=wantStdOut|wantStdErr)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isRunning</name>
      <anchorfile>classChildProcess.html</anchorfile>
      <anchor>a1a187cc5d299c331798a7b46c3971ccd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>readProcessOutput</name>
      <anchorfile>classChildProcess.html</anchorfile>
      <anchor>af6f8f31a8c86fadeba06b8be21e94e30</anchor>
      <arglist>(void *destBuffer, int numBytesToRead)</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>readAllProcessOutput</name>
      <anchorfile>classChildProcess.html</anchorfile>
      <anchor>ae91e215618cd1861c2e2ca13e5f4166e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>waitForProcessToFinish</name>
      <anchorfile>classChildProcess.html</anchorfile>
      <anchor>a170898d07e43e68fbca86cd5f2ecca15</anchor>
      <arglist>(int timeoutMs) const </arglist>
    </member>
    <member kind="function">
      <type>uint32</type>
      <name>getExitCode</name>
      <anchorfile>classChildProcess.html</anchorfile>
      <anchor>a46f2ca6f3bc9d38bca277e8537d579c8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>kill</name>
      <anchorfile>classChildProcess.html</anchorfile>
      <anchor>a524fd75e18a0aa94a8518ce49432413c</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ChildProcessMaster</name>
    <filename>classChildProcessMaster.html</filename>
    <member kind="function">
      <type></type>
      <name>ChildProcessMaster</name>
      <anchorfile>classChildProcessMaster.html</anchorfile>
      <anchor>a2ac2f078c51af01a6a2b09e39cae0d61</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ChildProcessMaster</name>
      <anchorfile>classChildProcessMaster.html</anchorfile>
      <anchor>ab140f15a3cbabd52a9be0a38a217ff2b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>launchSlaveProcess</name>
      <anchorfile>classChildProcessMaster.html</anchorfile>
      <anchor>a1ff992de676f73bba4d9fd77ccbbbf90</anchor>
      <arglist>(const File &amp;executableToLaunch, const String &amp;commandLineUniqueID, int timeoutMs=0, int streamFlags=ChildProcess::wantStdOut|ChildProcess::wantStdErr)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>handleMessageFromSlave</name>
      <anchorfile>classChildProcessMaster.html</anchorfile>
      <anchor>a5edab8b373fc85da57a6367c797cc3a7</anchor>
      <arglist>(const MemoryBlock &amp;)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handleConnectionLost</name>
      <anchorfile>classChildProcessMaster.html</anchorfile>
      <anchor>a2511b4e4427f66fb83a0023b5157bb2d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>sendMessageToSlave</name>
      <anchorfile>classChildProcessMaster.html</anchorfile>
      <anchor>ad2b119d572bed6ef2ddee2f46fb1220d</anchor>
      <arglist>(const MemoryBlock &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ChildProcessSlave</name>
    <filename>classChildProcessSlave.html</filename>
    <member kind="function">
      <type></type>
      <name>ChildProcessSlave</name>
      <anchorfile>classChildProcessSlave.html</anchorfile>
      <anchor>a0466a587b20190e988b9b92e6f0c67d1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ChildProcessSlave</name>
      <anchorfile>classChildProcessSlave.html</anchorfile>
      <anchor>af486ef6acd3c06c1ce14d07f9a69da28</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>initialiseFromCommandLine</name>
      <anchorfile>classChildProcessSlave.html</anchorfile>
      <anchor>a7b61b9bcb42ea88efd2b09b44887ab0a</anchor>
      <arglist>(const String &amp;commandLine, const String &amp;commandLineUniqueID, int timeoutMs=0)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>handleMessageFromMaster</name>
      <anchorfile>classChildProcessSlave.html</anchorfile>
      <anchor>ad75b9b600fa0877fc60c3013810b4713</anchor>
      <arglist>(const MemoryBlock &amp;)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handleConnectionMade</name>
      <anchorfile>classChildProcessSlave.html</anchorfile>
      <anchor>ac01ed2cf340bf508b29c1fe9ec13dcb6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handleConnectionLost</name>
      <anchorfile>classChildProcessSlave.html</anchorfile>
      <anchor>a664405f8c42ecbce6c58b50252359ed1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>sendMessageToMaster</name>
      <anchorfile>classChildProcessSlave.html</anchorfile>
      <anchor>ab619cb3d7beddef480385b7f8ffaf699</anchor>
      <arglist>(const MemoryBlock &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ChoicePropertyComponent</name>
    <filename>classChoicePropertyComponent.html</filename>
    <base>PropertyComponent</base>
    <base protection="private">ComboBox::Listener</base>
    <member kind="function">
      <type></type>
      <name>ChoicePropertyComponent</name>
      <anchorfile>classChoicePropertyComponent.html</anchorfile>
      <anchor>afa42d754b1427b60c7aa922ff14ebb7c</anchor>
      <arglist>(const Value &amp;valueToControl, const String &amp;propertyName, const StringArray &amp;choices, const Array&lt; var &gt; &amp;correspondingValues)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ChoicePropertyComponent</name>
      <anchorfile>classChoicePropertyComponent.html</anchorfile>
      <anchor>a1f4ed698110aba123058d1d03e19f50c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setIndex</name>
      <anchorfile>classChoicePropertyComponent.html</anchorfile>
      <anchor>a96cc058a27b803f9fe954040c57951ec</anchor>
      <arglist>(int newIndex)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getIndex</name>
      <anchorfile>classChoicePropertyComponent.html</anchorfile>
      <anchor>ad274393dd06733afced8d81225b515c2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const StringArray &amp;</type>
      <name>getChoices</name>
      <anchorfile>classChoicePropertyComponent.html</anchorfile>
      <anchor>a6a02cfe8ec2dd563d623e527bba414be</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>refresh</name>
      <anchorfile>classChoicePropertyComponent.html</anchorfile>
      <anchor>a596cfdff4aacee564c686e0910b011e1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ChoicePropertyComponent</name>
      <anchorfile>classChoicePropertyComponent.html</anchorfile>
      <anchor>a2c81bdfd97932a807b7f055dd9ef145b</anchor>
      <arglist>(const String &amp;propertyName)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>StringArray</type>
      <name>choices</name>
      <anchorfile>classChoicePropertyComponent.html</anchorfile>
      <anchor>a9e1e134a3393008eaed61c31667b78fd</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CodeDocument</name>
    <filename>classCodeDocument.html</filename>
    <class kind="class">CodeDocument::Iterator</class>
    <class kind="class">CodeDocument::Listener</class>
    <class kind="class">CodeDocument::Position</class>
    <member kind="function">
      <type></type>
      <name>CodeDocument</name>
      <anchorfile>classCodeDocument.html</anchorfile>
      <anchor>a9b4bff1cc4d65445d0563fb286d3799d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~CodeDocument</name>
      <anchorfile>classCodeDocument.html</anchorfile>
      <anchor>aa42ffd824e93061e613f7a0f941d51ce</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>getAllContent</name>
      <anchorfile>classCodeDocument.html</anchorfile>
      <anchor>aaed217186ceab7101ed1cbdc611d1f63</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>getTextBetween</name>
      <anchorfile>classCodeDocument.html</anchorfile>
      <anchor>ab8ebc3cdc2eefef56824427356237650</anchor>
      <arglist>(const Position &amp;start, const Position &amp;end) const </arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>getLine</name>
      <anchorfile>classCodeDocument.html</anchorfile>
      <anchor>abc15eea21b2690c442a610277157dc4a</anchor>
      <arglist>(int lineIndex) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumCharacters</name>
      <anchorfile>classCodeDocument.html</anchorfile>
      <anchor>acf647cc02035fdbee025201442550841</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumLines</name>
      <anchorfile>classCodeDocument.html</anchorfile>
      <anchor>ac1f426f1238d6960b725cb79399e27d5</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getMaximumLineLength</name>
      <anchorfile>classCodeDocument.html</anchorfile>
      <anchor>acdf7d662f21054059b8180f124e7ef85</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deleteSection</name>
      <anchorfile>classCodeDocument.html</anchorfile>
      <anchor>a8618046d22c26326da18c0f372c330d8</anchor>
      <arglist>(const Position &amp;startPosition, const Position &amp;endPosition)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deleteSection</name>
      <anchorfile>classCodeDocument.html</anchorfile>
      <anchor>a7ecc088f32162bb34897d3cbfe653b8f</anchor>
      <arglist>(int startIndex, int endIndex)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insertText</name>
      <anchorfile>classCodeDocument.html</anchorfile>
      <anchor>a52039d2d208e30688478dbe2f31640e4</anchor>
      <arglist>(const Position &amp;position, const String &amp;text)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insertText</name>
      <anchorfile>classCodeDocument.html</anchorfile>
      <anchor>affb956a29f9708767046bdfbdde99077</anchor>
      <arglist>(int insertIndex, const String &amp;text)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>replaceSection</name>
      <anchorfile>classCodeDocument.html</anchorfile>
      <anchor>ae6ec45481f08161ffcb222eafba21c32</anchor>
      <arglist>(int startIndex, int endIndex, const String &amp;newText)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>replaceAllContent</name>
      <anchorfile>classCodeDocument.html</anchorfile>
      <anchor>a621939da95a3a245a9474c003b59f65e</anchor>
      <arglist>(const String &amp;newContent)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyChanges</name>
      <anchorfile>classCodeDocument.html</anchorfile>
      <anchor>a6ce285d0b51126f464791407ea9b3e60</anchor>
      <arglist>(const String &amp;newContent)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>loadFromStream</name>
      <anchorfile>classCodeDocument.html</anchorfile>
      <anchor>a666ae3cea6e96721b22176624bfa3881</anchor>
      <arglist>(InputStream &amp;stream)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>writeToStream</name>
      <anchorfile>classCodeDocument.html</anchorfile>
      <anchor>ae31f276f6445c5a6dc32cc12c4589b98</anchor>
      <arglist>(OutputStream &amp;stream)</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>getNewLineCharacters</name>
      <anchorfile>classCodeDocument.html</anchorfile>
      <anchor>a8f2c371735dd2630329f114d040634de</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNewLineCharacters</name>
      <anchorfile>classCodeDocument.html</anchorfile>
      <anchor>ac354ec456f3d7aed2899cd39fb7eff45</anchor>
      <arglist>(const String &amp;newLineCharacters) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>newTransaction</name>
      <anchorfile>classCodeDocument.html</anchorfile>
      <anchor>a507bca2d6747323276b938670584f354</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>undo</name>
      <anchorfile>classCodeDocument.html</anchorfile>
      <anchor>a47208d3029a44c1e9970f41ab5d87c5e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>redo</name>
      <anchorfile>classCodeDocument.html</anchorfile>
      <anchor>a65238c6b6e038074051ace9393c779c3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearUndoHistory</name>
      <anchorfile>classCodeDocument.html</anchorfile>
      <anchor>a14e3cfa2635a240eb8f5f378caab00f9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>UndoManager &amp;</type>
      <name>getUndoManager</name>
      <anchorfile>classCodeDocument.html</anchorfile>
      <anchor>a5420dec1f4f8ca9034e7d93ff538f1cf</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSavePoint</name>
      <anchorfile>classCodeDocument.html</anchorfile>
      <anchor>ad76824d16b674adf90193e8286ad0a89</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasChangedSinceSavePoint</name>
      <anchorfile>classCodeDocument.html</anchorfile>
      <anchor>a4c3047eee0dad38555cf546c3ea3c15f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Position</type>
      <name>findWordBreakAfter</name>
      <anchorfile>classCodeDocument.html</anchorfile>
      <anchor>a26c7afab579aea79440f02ba126ed2eb</anchor>
      <arglist>(const Position &amp;position) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Position</type>
      <name>findWordBreakBefore</name>
      <anchorfile>classCodeDocument.html</anchorfile>
      <anchor>aa86e626eb2e919c675afa2317d4aada2</anchor>
      <arglist>(const Position &amp;position) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>findTokenContaining</name>
      <anchorfile>classCodeDocument.html</anchorfile>
      <anchor>a8506a8a409cc12de12ce7734b1e66ff4</anchor>
      <arglist>(const Position &amp;pos, Position &amp;start, Position &amp;end) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>findLineContaining</name>
      <anchorfile>classCodeDocument.html</anchorfile>
      <anchor>a33c6c59951845799410ce84fd41abf06</anchor>
      <arglist>(const Position &amp;pos, Position &amp;start, Position &amp;end) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addListener</name>
      <anchorfile>classCodeDocument.html</anchorfile>
      <anchor>a449f7459c2784ac56c24ddb0e5bb9d41</anchor>
      <arglist>(Listener *listener) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeListener</name>
      <anchorfile>classCodeDocument.html</anchorfile>
      <anchor>acaf96503a0445a145f50667ce33d6cad</anchor>
      <arglist>(Listener *listener) noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CodeDocument::Iterator</name>
    <filename>classCodeDocument_1_1Iterator.html</filename>
    <member kind="function">
      <type></type>
      <name>Iterator</name>
      <anchorfile>classCodeDocument_1_1Iterator.html</anchorfile>
      <anchor>a350e1a7a64043f010e5467a1d862830f</anchor>
      <arglist>(const CodeDocument &amp;document) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Iterator</name>
      <anchorfile>classCodeDocument_1_1Iterator.html</anchorfile>
      <anchor>ae4ccddcd44ec79ac604a0abf4c5ea1e5</anchor>
      <arglist>(const Iterator &amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Iterator &amp;</type>
      <name>operator=</name>
      <anchorfile>classCodeDocument_1_1Iterator.html</anchorfile>
      <anchor>a2de09a01d9c488c0642446d5d2bf9455</anchor>
      <arglist>(const Iterator &amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Iterator</name>
      <anchorfile>classCodeDocument_1_1Iterator.html</anchorfile>
      <anchor>ab7213db89a00d17eae0f3434dedae0ee</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>juce_wchar</type>
      <name>nextChar</name>
      <anchorfile>classCodeDocument_1_1Iterator.html</anchorfile>
      <anchor>a21dd834cc9809e8c64c1d351fd956735</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>juce_wchar</type>
      <name>peekNextChar</name>
      <anchorfile>classCodeDocument_1_1Iterator.html</anchorfile>
      <anchor>a9e5a711b7cc71c199436d0a6f37f5213</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>skip</name>
      <anchorfile>classCodeDocument_1_1Iterator.html</anchorfile>
      <anchor>a794f99491b06e4648b800f826769da06</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getPosition</name>
      <anchorfile>classCodeDocument_1_1Iterator.html</anchorfile>
      <anchor>a8a841561cb183954fbcf7816b140e094</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>skipWhitespace</name>
      <anchorfile>classCodeDocument_1_1Iterator.html</anchorfile>
      <anchor>abc24c310cf990a0caf19bc3bf475f3c5</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>skipToEndOfLine</name>
      <anchorfile>classCodeDocument_1_1Iterator.html</anchorfile>
      <anchor>a98a02afbe6bc5d3d034c258ce0b606c8</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getLine</name>
      <anchorfile>classCodeDocument_1_1Iterator.html</anchorfile>
      <anchor>a8ce8da0d5c4c14b74c3ad751b97b6581</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEOF</name>
      <anchorfile>classCodeDocument_1_1Iterator.html</anchorfile>
      <anchor>a5ab0309f0ca7a87e2231b0c240330fe9</anchor>
      <arglist>() const noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CodeDocument::Listener</name>
    <filename>classCodeDocument_1_1Listener.html</filename>
    <member kind="function">
      <type></type>
      <name>Listener</name>
      <anchorfile>classCodeDocument_1_1Listener.html</anchorfile>
      <anchor>a13e5b679bd0f71d05debd7d450228460</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Listener</name>
      <anchorfile>classCodeDocument_1_1Listener.html</anchorfile>
      <anchor>aff508f04d66863de7bfabcfff8dd4ab7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>codeDocumentTextInserted</name>
      <anchorfile>classCodeDocument_1_1Listener.html</anchorfile>
      <anchor>a145cb6afbd34c2d85c179dad9b35cf92</anchor>
      <arglist>(const String &amp;newText, int insertIndex)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>codeDocumentTextDeleted</name>
      <anchorfile>classCodeDocument_1_1Listener.html</anchorfile>
      <anchor>a694f66b037c76039ac82dd39e67570b8</anchor>
      <arglist>(int startIndex, int endIndex)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CodeDocument::Position</name>
    <filename>classCodeDocument_1_1Position.html</filename>
    <member kind="function">
      <type></type>
      <name>Position</name>
      <anchorfile>classCodeDocument_1_1Position.html</anchorfile>
      <anchor>a9884a2a1c00b008cd47fddd81ec6cbc2</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Position</name>
      <anchorfile>classCodeDocument_1_1Position.html</anchorfile>
      <anchor>ab75b3df0bb0307b50979be99e74848a2</anchor>
      <arglist>(const CodeDocument &amp;ownerDocument, int line, int indexInLine) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Position</name>
      <anchorfile>classCodeDocument_1_1Position.html</anchorfile>
      <anchor>ae43f0043e69f22e0e1e1af9f4721653e</anchor>
      <arglist>(const CodeDocument &amp;ownerDocument, int charactersFromStartOfDocument) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Position</name>
      <anchorfile>classCodeDocument_1_1Position.html</anchorfile>
      <anchor>acd8eeea7947b1588df66d6db12e21777</anchor>
      <arglist>(const Position &amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Position</name>
      <anchorfile>classCodeDocument_1_1Position.html</anchorfile>
      <anchor>aaffd03d4e5545fb6f65ec9c02fadb99b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Position &amp;</type>
      <name>operator=</name>
      <anchorfile>classCodeDocument_1_1Position.html</anchorfile>
      <anchor>accbf6d594320d0f9f5678246d10c6332</anchor>
      <arglist>(const Position &amp;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classCodeDocument_1_1Position.html</anchorfile>
      <anchor>a0b9208a5f42fabda5856e7e3d745a415</anchor>
      <arglist>(const Position &amp;) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classCodeDocument_1_1Position.html</anchorfile>
      <anchor>a75b1e24f9489b2763e726b1538a1314d</anchor>
      <arglist>(const Position &amp;) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPosition</name>
      <anchorfile>classCodeDocument_1_1Position.html</anchorfile>
      <anchor>aabaa322c141c2aa1c4f51689372dac70</anchor>
      <arglist>(int charactersFromStartOfDocument)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getPosition</name>
      <anchorfile>classCodeDocument_1_1Position.html</anchorfile>
      <anchor>a33d5895feefd36e5a9727e680a22f266</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLineAndIndex</name>
      <anchorfile>classCodeDocument_1_1Position.html</anchorfile>
      <anchor>a5a8e3e6b17098f0767f8ed46bb597518</anchor>
      <arglist>(int newLineNumber, int newIndexInLine)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getLineNumber</name>
      <anchorfile>classCodeDocument_1_1Position.html</anchorfile>
      <anchor>ab63027008380f4c8646b9b750bef49e9</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getIndexInLine</name>
      <anchorfile>classCodeDocument_1_1Position.html</anchorfile>
      <anchor>a6e33162e697f7ecc8f4a35a63ee67bb5</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPositionMaintained</name>
      <anchorfile>classCodeDocument_1_1Position.html</anchorfile>
      <anchor>a6137825e7845bb6d5ee203a7d42c8d6a</anchor>
      <arglist>(bool isMaintained)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>moveBy</name>
      <anchorfile>classCodeDocument_1_1Position.html</anchorfile>
      <anchor>a064a37e5128a3b31570dd09eef48c8f9</anchor>
      <arglist>(int characterDelta)</arglist>
    </member>
    <member kind="function">
      <type>Position</type>
      <name>movedBy</name>
      <anchorfile>classCodeDocument_1_1Position.html</anchorfile>
      <anchor>a59543ea662ac12a61babeaa13351a1ec</anchor>
      <arglist>(int characterDelta) const </arglist>
    </member>
    <member kind="function">
      <type>Position</type>
      <name>movedByLines</name>
      <anchorfile>classCodeDocument_1_1Position.html</anchorfile>
      <anchor>a55669800547700638bc09b391f86f68b</anchor>
      <arglist>(int deltaLines) const </arglist>
    </member>
    <member kind="function">
      <type>juce_wchar</type>
      <name>getCharacter</name>
      <anchorfile>classCodeDocument_1_1Position.html</anchorfile>
      <anchor>af6dab414dcad09f9250700558fc29b66</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>getLineText</name>
      <anchorfile>classCodeDocument_1_1Position.html</anchorfile>
      <anchor>a75e87660115ed51326cae062cb405980</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CodeEditorComponent</name>
    <filename>classCodeEditorComponent.html</filename>
    <base>Component</base>
    <base>ApplicationCommandTarget</base>
    <base>TextInputTarget</base>
    <class kind="struct">CodeEditorComponent::ColourScheme</class>
    <class kind="struct">CodeEditorComponent::State</class>
    <member kind="enumeration">
      <type></type>
      <name>ColourIds</name>
      <anchorfile>classCodeEditorComponent.html</anchorfile>
      <anchor>a452d8416080619c9b4984bc97e85a596</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>backgroundColourId</name>
      <anchorfile>classCodeEditorComponent.html</anchorfile>
      <anchor>a452d8416080619c9b4984bc97e85a596aab761a6dbaa4bf78a14e346dc2d416c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>highlightColourId</name>
      <anchorfile>classCodeEditorComponent.html</anchorfile>
      <anchor>a452d8416080619c9b4984bc97e85a596ae30c71457d23fcf0ff18ce56195107cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>defaultTextColourId</name>
      <anchorfile>classCodeEditorComponent.html</anchorfile>
      <anchor>a452d8416080619c9b4984bc97e85a596aebfaf17bcdaf7960adf28fc44355a51d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>lineNumberBackgroundId</name>
      <anchorfile>classCodeEditorComponent.html</anchorfile>
      <anchor>a452d8416080619c9b4984bc97e85a596ae61ab632da4a17cbbf39b5ca0c8d38eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>lineNumberTextId</name>
      <anchorfile>classCodeEditorComponent.html</anchorfile>
      <anchor>a452d8416080619c9b4984bc97e85a596a09a47043a26cf39eb7f56e3f9596c8c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>VirtualKeyboardType</name>
      <anchorfile>classTextInputTarget.html</anchorfile>
      <anchor>a097550317e3bf2aee470a20540b9edc7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>textKeyboard</name>
      <anchorfile>classTextInputTarget.html</anchorfile>
      <anchor>a097550317e3bf2aee470a20540b9edc7a11c126feb4e4a2a3f7695fbf8bfedf47</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>numericKeyboard</name>
      <anchorfile>classTextInputTarget.html</anchorfile>
      <anchor>a097550317e3bf2aee470a20540b9edc7ad6a4c6dad692fe4625b23d7ff5a7a5af</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>decimalKeyboard</name>
      <anchorfile>classTextInputTarget.html</anchorfile>
      <anchor>a097550317e3bf2aee470a20540b9edc7a46a93c956a571fd5d34ef5b2731242a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>urlKeyboard</name>
      <anchorfile>classTextInputTarget.html</anchorfile>
      <anchor>a097550317e3bf2aee470a20540b9edc7aa10922a2c8f4cdf0e1af8f761374dbf9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>emailAddressKeyboard</name>
      <anchorfile>classTextInputTarget.html</anchorfile>
      <anchor>a097550317e3bf2aee470a20540b9edc7a5cb8da15324fce23d70f1bd1eae86ff8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>phoneNumberKeyboard</name>
      <anchorfile>classTextInputTarget.html</anchorfile>
      <anchor>a097550317e3bf2aee470a20540b9edc7a7b7dc41224aef43f9585fc49e2a92567</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CodeEditorComponent</name>
      <anchorfile>classCodeEditorComponent.html</anchorfile>
      <anchor>a88a12161694167080d375325019b984a</anchor>
      <arglist>(CodeDocument &amp;document, CodeTokeniser *codeTokeniser)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~CodeEditorComponent</name>
      <anchorfile>classCodeEditorComponent.html</anchorfile>
      <anchor>af36172ba8ba2275cbec5c365e1ef964c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>CodeDocument &amp;</type>
      <name>getDocument</name>
      <anchorfile>classCodeEditorComponent.html</anchorfile>
      <anchor>abfcc393868114fb38d970859fab4ad04</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>loadContent</name>
      <anchorfile>classCodeEditorComponent.html</anchorfile>
      <anchor>ad4c04d9757379b8205559c155f979ebd</anchor>
      <arglist>(const String &amp;newContent)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getCharWidth</name>
      <anchorfile>classCodeEditorComponent.html</anchorfile>
      <anchor>a592bd5f1cd779df278df5af660a17e13</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getLineHeight</name>
      <anchorfile>classCodeEditorComponent.html</anchorfile>
      <anchor>a046f4031bd9d396e0e5f93f19c732aac</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumLinesOnScreen</name>
      <anchorfile>classCodeEditorComponent.html</anchorfile>
      <anchor>a5e0e2e440c0e05f5eb37aec7f5cc3ce7</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getFirstLineOnScreen</name>
      <anchorfile>classCodeEditorComponent.html</anchorfile>
      <anchor>aefb5a9e2729d0f20db537861d7f451b0</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumColumnsOnScreen</name>
      <anchorfile>classCodeEditorComponent.html</anchorfile>
      <anchor>a6dfa7f7cf2eabb1b58594bc37c640750</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>CodeDocument::Position</type>
      <name>getCaretPos</name>
      <anchorfile>classCodeEditorComponent.html</anchorfile>
      <anchor>ad342ae37f8bf6093f46b2e9faccba948</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Rectangle&lt; int &gt;</type>
      <name>getCaretRectangle</name>
      <anchorfile>classCodeEditorComponent.html</anchorfile>
      <anchor>a540848e9b8ecf8f69176c12404f0be0e</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>moveCaretTo</name>
      <anchorfile>classCodeEditorComponent.html</anchorfile>
      <anchor>a875d87419bd0dfc748b77257b14fc67a</anchor>
      <arglist>(const CodeDocument::Position &amp;newPos, bool selecting)</arglist>
    </member>
    <member kind="function">
      <type>Rectangle&lt; int &gt;</type>
      <name>getCharacterBounds</name>
      <anchorfile>classCodeEditorComponent.html</anchorfile>
      <anchor>a50ab6c77be869ef29afc004a64f55a32</anchor>
      <arglist>(const CodeDocument::Position &amp;pos) const </arglist>
    </member>
    <member kind="function">
      <type>CodeDocument::Position</type>
      <name>getPositionAt</name>
      <anchorfile>classCodeEditorComponent.html</anchorfile>
      <anchor>a05dedcb7ec163913bc7f907949306c17</anchor>
      <arglist>(int x, int y)</arglist>
    </member>
    <member kind="function">
      <type>CodeDocument::Position</type>
      <name>getSelectionStart</name>
      <anchorfile>classCodeEditorComponent.html</anchorfile>
      <anchor>a0eeca00745cf5ef945f2c318cf2c0c0b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>CodeDocument::Position</type>
      <name>getSelectionEnd</name>
      <anchorfile>classCodeEditorComponent.html</anchorfile>
      <anchor>ab7145b37621cde6d0574f028f7c01787</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLineNumbersShown</name>
      <anchorfile>classCodeEditorComponent.html</anchorfile>
      <anchor>a3408b92d61eac5cab4d14badf4b866d7</anchor>
      <arglist>(bool shouldBeShown)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>moveCaretLeft</name>
      <anchorfile>classCodeEditorComponent.html</anchorfile>
      <anchor>a632a51806070135fc19b2587d217f5db</anchor>
      <arglist>(bool moveInWholeWordSteps, bool selecting)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>moveCaretRight</name>
      <anchorfile>classCodeEditorComponent.html</anchorfile>
      <anchor>abf7742e22a76538a728efb1037f18338</anchor>
      <arglist>(bool moveInWholeWordSteps, bool selecting)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>moveCaretUp</name>
      <anchorfile>classCodeEditorComponent.html</anchorfile>
      <anchor>afb9d164bf55a9332feb3f9cfeac9344a</anchor>
      <arglist>(bool selecting)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>moveCaretDown</name>
      <anchorfile>classCodeEditorComponent.html</anchorfile>
      <anchor>a9f8bfa47772c11e0b6a8802c83f7f33b</anchor>
      <arglist>(bool selecting)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>scrollDown</name>
      <anchorfile>classCodeEditorComponent.html</anchorfile>
      <anchor>ab89db38f2bc6faa4e19358f5cc95df43</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>scrollUp</name>
      <anchorfile>classCodeEditorComponent.html</anchorfile>
      <anchor>ad91a3ad9bb309b40676eee994365f873</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>pageUp</name>
      <anchorfile>classCodeEditorComponent.html</anchorfile>
      <anchor>a2f3d175b823eb0e3fed980aad52ca6b0</anchor>
      <arglist>(bool selecting)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>pageDown</name>
      <anchorfile>classCodeEditorComponent.html</anchorfile>
      <anchor>aa17e6e7ff54e046051f7183dfe5b8291</anchor>
      <arglist>(bool selecting)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>moveCaretToTop</name>
      <anchorfile>classCodeEditorComponent.html</anchorfile>
      <anchor>a3daae1c3d07f768a16b7409fede6d3ae</anchor>
      <arglist>(bool selecting)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>moveCaretToStartOfLine</name>
      <anchorfile>classCodeEditorComponent.html</anchorfile>
      <anchor>aeb144ed9459372399cc5533a2793ff07</anchor>
      <arglist>(bool selecting)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>moveCaretToEnd</name>
      <anchorfile>classCodeEditorComponent.html</anchorfile>
      <anchor>a2b5b1f3e5e767d03069153ff758a59be</anchor>
      <arglist>(bool selecting)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>moveCaretToEndOfLine</name>
      <anchorfile>classCodeEditorComponent.html</anchorfile>
      <anchor>aac7f4faab383c6cf1179081055aaea6f</anchor>
      <arglist>(bool selecting)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>deleteBackwards</name>
      <anchorfile>classCodeEditorComponent.html</anchorfile>
      <anchor>ae867bf29668d137a9d4edb3632dd01c4</anchor>
      <arglist>(bool moveInWholeWordSteps)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>deleteForwards</name>
      <anchorfile>classCodeEditorComponent.html</anchorfile>
      <anchor>a2fbd2473cca409c0faa16ad5d7493878</anchor>
      <arglist>(bool moveInWholeWordSteps)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>deleteWhitespaceBackwardsToTabStop</name>
      <anchorfile>classCodeEditorComponent.html</anchorfile>
      <anchor>ac283e6cf9449007138c21a84f07eaf0d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>copyToClipboard</name>
      <anchorfile>classCodeEditorComponent.html</anchorfile>
      <anchor>a532ad67ec851021d4018bca1facec84b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>cutToClipboard</name>
      <anchorfile>classCodeEditorComponent.html</anchorfile>
      <anchor>a60686c10d3af6fe89db87a5f738805b8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>pasteFromClipboard</name>
      <anchorfile>classCodeEditorComponent.html</anchorfile>
      <anchor>a2a8019e9717cb043530ed35300cebe0a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>undo</name>
      <anchorfile>classCodeEditorComponent.html</anchorfile>
      <anchor>af9a84573dbbe88fe4c1cf0691e4246ba</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>redo</name>
      <anchorfile>classCodeEditorComponent.html</anchorfile>
      <anchor>af21b33268573e1f76ef4edd07f8c9163</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>selectRegion</name>
      <anchorfile>classCodeEditorComponent.html</anchorfile>
      <anchor>aae1302c724b2ac3e0c5fa4df6a3144f8</anchor>
      <arglist>(const CodeDocument::Position &amp;start, const CodeDocument::Position &amp;end)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>selectAll</name>
      <anchorfile>classCodeEditorComponent.html</anchorfile>
      <anchor>ae6e04934e2a725465dc7c60928650c3f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deselectAll</name>
      <anchorfile>classCodeEditorComponent.html</anchorfile>
      <anchor>a17ed61aa9155a012f96dd6ff5c7c6b1e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scrollToLine</name>
      <anchorfile>classCodeEditorComponent.html</anchorfile>
      <anchor>aa334176d889fd98af33c7c8aa08f6ee2</anchor>
      <arglist>(int newFirstLineOnScreen)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scrollBy</name>
      <anchorfile>classCodeEditorComponent.html</anchorfile>
      <anchor>a16136821d3e53e18175eceb1158b14c5</anchor>
      <arglist>(int deltaLines)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scrollToColumn</name>
      <anchorfile>classCodeEditorComponent.html</anchorfile>
      <anchor>a0bfb4492d67572224018afebc02ee555</anchor>
      <arglist>(int newFirstColumnOnScreen)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scrollToKeepCaretOnScreen</name>
      <anchorfile>classCodeEditorComponent.html</anchorfile>
      <anchor>a2039755404663d74a9ff7164306a75a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scrollToKeepLinesOnScreen</name>
      <anchorfile>classCodeEditorComponent.html</anchorfile>
      <anchor>a95bedc478a37983fbfb28a65d138ce76</anchor>
      <arglist>(Range&lt; int &gt; linesToShow)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insertTextAtCaret</name>
      <anchorfile>classCodeEditorComponent.html</anchorfile>
      <anchor>a74c65cd4773090f1654f3cd8622cdc50</anchor>
      <arglist>(const String &amp;textToInsert) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insertTabAtCaret</name>
      <anchorfile>classCodeEditorComponent.html</anchorfile>
      <anchor>a870a061b7ce31960f9c53b3214c25cf3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>indentSelection</name>
      <anchorfile>classCodeEditorComponent.html</anchorfile>
      <anchor>a0989f9ae06b61b843b4c5be9c9ce1a26</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unindentSelection</name>
      <anchorfile>classCodeEditorComponent.html</anchorfile>
      <anchor>ad96b0eadd14eee69dbbc4a691918d803</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Range&lt; int &gt;</type>
      <name>getHighlightedRegion</name>
      <anchorfile>classCodeEditorComponent.html</anchorfile>
      <anchor>a46522619290415b47ac6a7b89e386642</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isHighlightActive</name>
      <anchorfile>classCodeEditorComponent.html</anchorfile>
      <anchor>a7f1f3b2a0cb4ac22634bf2740364b0b7</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setHighlightedRegion</name>
      <anchorfile>classCodeEditorComponent.html</anchorfile>
      <anchor>a14dbeff62bc8663f08e60d823fbc096e</anchor>
      <arglist>(const Range&lt; int &gt; &amp;newRange) override</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>getTextInRange</name>
      <anchorfile>classCodeEditorComponent.html</anchorfile>
      <anchor>af2ddba62b3bd39fb2599fb8e4e04f269</anchor>
      <arglist>(const Range&lt; int &gt; &amp;range) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTabSize</name>
      <anchorfile>classCodeEditorComponent.html</anchorfile>
      <anchor>a8ceedaaa27d8da25da6a8941d4a2db4e</anchor>
      <arglist>(int numSpacesPerTab, bool insertSpacesInsteadOfTabCharacters)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getTabSize</name>
      <anchorfile>classCodeEditorComponent.html</anchorfile>
      <anchor>ac61310345a03af1dbb4b2c57d05a391b</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>areSpacesInsertedForTabs</name>
      <anchorfile>classCodeEditorComponent.html</anchorfile>
      <anchor>a79befaff281e3c097f5586889ec7014c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>getTabString</name>
      <anchorfile>classCodeEditorComponent.html</anchorfile>
      <anchor>a31ab335a3475b4bca51f49a5ad698bec</anchor>
      <arglist>(int numSpaces) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFont</name>
      <anchorfile>classCodeEditorComponent.html</anchorfile>
      <anchor>a9804e73700fc3d18c178d7138510f32d</anchor>
      <arglist>(const Font &amp;newFont)</arglist>
    </member>
    <member kind="function">
      <type>const Font &amp;</type>
      <name>getFont</name>
      <anchorfile>classCodeEditorComponent.html</anchorfile>
      <anchor>a23600a4b29aa908c5e9d19a39a3f1c99</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setReadOnly</name>
      <anchorfile>classCodeEditorComponent.html</anchorfile>
      <anchor>af9710a20d23f1e0e64b6b7605ded6e9a</anchor>
      <arglist>(bool shouldBeReadOnly) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isReadOnly</name>
      <anchorfile>classCodeEditorComponent.html</anchorfile>
      <anchor>a937254c0d264ddf847ab248d16fd3742</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setColourScheme</name>
      <anchorfile>classCodeEditorComponent.html</anchorfile>
      <anchor>a4faca1aad5f908a0e35a71ca25e784b1</anchor>
      <arglist>(const ColourScheme &amp;scheme)</arglist>
    </member>
    <member kind="function">
      <type>const ColourScheme &amp;</type>
      <name>getColourScheme</name>
      <anchorfile>classCodeEditorComponent.html</anchorfile>
      <anchor>a29d1b0b3ae5ebaa7a46bac9d912ec220</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Colour</type>
      <name>getColourForTokenType</name>
      <anchorfile>classCodeEditorComponent.html</anchorfile>
      <anchor>a120ed24ab68f677c86a4b44bde5f9426</anchor>
      <arglist>(int tokenType) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setScrollbarThickness</name>
      <anchorfile>classCodeEditorComponent.html</anchorfile>
      <anchor>a75ac5d9c886a72d925d62417d1171c65</anchor>
      <arglist>(int thickness)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getScrollbarThickness</name>
      <anchorfile>classCodeEditorComponent.html</anchorfile>
      <anchor>ade6e0f9d0aabef8392e2bb9b41b64e92</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handleReturnKey</name>
      <anchorfile>classCodeEditorComponent.html</anchorfile>
      <anchor>ae9512581845c99d157e793af6db9e08f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handleTabKey</name>
      <anchorfile>classCodeEditorComponent.html</anchorfile>
      <anchor>a7efe69631b0e73a50d42c117fa35c7b8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handleEscapeKey</name>
      <anchorfile>classCodeEditorComponent.html</anchorfile>
      <anchor>a873ae3e9eb99f551754adc85ae738acb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>editorViewportPositionChanged</name>
      <anchorfile>classCodeEditorComponent.html</anchorfile>
      <anchor>a979f3f00f16b6e3eed9bd15b674daa2d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addPopupMenuItems</name>
      <anchorfile>classCodeEditorComponent.html</anchorfile>
      <anchor>ad53b2fb7fb3f1af076fc280d30df0785</anchor>
      <arglist>(PopupMenu &amp;menuToAddTo, const MouseEvent *mouseClickEvent)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>performPopupMenuAction</name>
      <anchorfile>classCodeEditorComponent.html</anchorfile>
      <anchor>a8472c804d4666a0c1988362895a47f22</anchor>
      <arglist>(int menuItemID)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCommandManager</name>
      <anchorfile>classCodeEditorComponent.html</anchorfile>
      <anchor>a3d3c6f24eca16e823c19e1fe2ae065bc</anchor>
      <arglist>(ApplicationCommandManager *newManager) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>paint</name>
      <anchorfile>classCodeEditorComponent.html</anchorfile>
      <anchor>aacfd5a44cfc287934279deb7a1b50ebc</anchor>
      <arglist>(Graphics &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resized</name>
      <anchorfile>classCodeEditorComponent.html</anchorfile>
      <anchor>a7fa2c81e022e85eb9400196a3c081c13</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>keyPressed</name>
      <anchorfile>classCodeEditorComponent.html</anchorfile>
      <anchor>a2bd64e5a434ab1eb2d66831843afb780</anchor>
      <arglist>(const KeyPress &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mouseDown</name>
      <anchorfile>classCodeEditorComponent.html</anchorfile>
      <anchor>ac02bce10d167e40f84434c61c167fffe</anchor>
      <arglist>(const MouseEvent &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mouseDrag</name>
      <anchorfile>classCodeEditorComponent.html</anchorfile>
      <anchor>a1f04e20f252124cf5095b25b3f3b69ec</anchor>
      <arglist>(const MouseEvent &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mouseUp</name>
      <anchorfile>classCodeEditorComponent.html</anchorfile>
      <anchor>aa9e63b9be7c5fdd5f2e90ed73740b8eb</anchor>
      <arglist>(const MouseEvent &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mouseDoubleClick</name>
      <anchorfile>classCodeEditorComponent.html</anchorfile>
      <anchor>a883b27e657e54827bbf1abcf298ffd80</anchor>
      <arglist>(const MouseEvent &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mouseWheelMove</name>
      <anchorfile>classCodeEditorComponent.html</anchorfile>
      <anchor>a977b36773552d5304aa13cd3d77c1378</anchor>
      <arglist>(const MouseEvent &amp;, const MouseWheelDetails &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>focusGained</name>
      <anchorfile>classCodeEditorComponent.html</anchorfile>
      <anchor>a33156862edc3b4fb2f02a396bdded184</anchor>
      <arglist>(FocusChangeType) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>focusLost</name>
      <anchorfile>classCodeEditorComponent.html</anchorfile>
      <anchor>a1035b8aae52d208e512bafd872bcd4ad</anchor>
      <arglist>(FocusChangeType) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isTextInputActive</name>
      <anchorfile>classCodeEditorComponent.html</anchorfile>
      <anchor>aaabca05f2c538254bec73900f2b4c30d</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTemporaryUnderlining</name>
      <anchorfile>classCodeEditorComponent.html</anchorfile>
      <anchor>a27cd2a9e1cfaeeca93629dbaeca85826</anchor>
      <arglist>(const Array&lt; Range&lt; int &gt; &gt; &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>ApplicationCommandTarget *</type>
      <name>getNextCommandTarget</name>
      <anchorfile>classCodeEditorComponent.html</anchorfile>
      <anchor>a830b370576d782d2e75f33164322e012</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getAllCommands</name>
      <anchorfile>classCodeEditorComponent.html</anchorfile>
      <anchor>ac37e3ec835e0672ac9fd24a574d67c87</anchor>
      <arglist>(Array&lt; CommandID &gt; &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getCommandInfo</name>
      <anchorfile>classCodeEditorComponent.html</anchorfile>
      <anchor>a9454244abc456d67d191c4f294858ad8</anchor>
      <arglist>(CommandID, ApplicationCommandInfo &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>perform</name>
      <anchorfile>classCodeEditorComponent.html</anchorfile>
      <anchor>ae46081c4bb11e732058659d10aa9ef8c</anchor>
      <arglist>(const InvocationInfo &amp;) override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TextInputTarget</name>
      <anchorfile>classTextInputTarget.html</anchorfile>
      <anchor>a49747e7bca27c213004a89460543b139</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TextInputTarget</name>
      <anchorfile>classTextInputTarget.html</anchorfile>
      <anchor>a77845e997bbe85a68ad77407a8f5bdfc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VirtualKeyboardType</type>
      <name>getKeyboardType</name>
      <anchorfile>classTextInputTarget.html</anchorfile>
      <anchor>a71072392a8f3455c0da8b43f8c249f43</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>CodeEditorComponent::ColourScheme</name>
    <filename>structCodeEditorComponent_1_1ColourScheme.html</filename>
    <class kind="struct">CodeEditorComponent::ColourScheme::TokenType</class>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>structCodeEditorComponent_1_1ColourScheme.html</anchorfile>
      <anchor>ad3dbb1b39e99178039e810ae6bdaa84e</anchor>
      <arglist>(const String &amp;name, const Colour colour)</arglist>
    </member>
    <member kind="variable">
      <type>Array&lt; TokenType &gt;</type>
      <name>types</name>
      <anchorfile>structCodeEditorComponent_1_1ColourScheme.html</anchorfile>
      <anchor>ab62bd258568a2060a3c7c61364af27fe</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>CodeEditorComponent::ColourScheme::TokenType</name>
    <filename>structCodeEditorComponent_1_1ColourScheme_1_1TokenType.html</filename>
    <member kind="variable">
      <type>String</type>
      <name>name</name>
      <anchorfile>structCodeEditorComponent_1_1ColourScheme_1_1TokenType.html</anchorfile>
      <anchor>ac12c92870f85aa19da82f6ae2e75ea6a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Colour</type>
      <name>colour</name>
      <anchorfile>structCodeEditorComponent_1_1ColourScheme_1_1TokenType.html</anchorfile>
      <anchor>ad64a0ec08892eba127e52ae798813780</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>CodeEditorComponent::State</name>
    <filename>structCodeEditorComponent_1_1State.html</filename>
    <member kind="function">
      <type></type>
      <name>State</name>
      <anchorfile>structCodeEditorComponent_1_1State.html</anchorfile>
      <anchor>a4a38fd3e47a1b6b2b4097e774e0aa6ca</anchor>
      <arglist>(const CodeEditorComponent &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>State</name>
      <anchorfile>structCodeEditorComponent_1_1State.html</anchorfile>
      <anchor>a23abe2809ec64addd39a3047031adbc5</anchor>
      <arglist>(const String &amp;stringifiedVersion)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>State</name>
      <anchorfile>structCodeEditorComponent_1_1State.html</anchorfile>
      <anchor>a14abacea08dda609922dd04d53a44d0f</anchor>
      <arglist>(const State &amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>restoreState</name>
      <anchorfile>structCodeEditorComponent_1_1State.html</anchorfile>
      <anchor>ad6507af99d6a35aaa6a4068900214a97</anchor>
      <arglist>(CodeEditorComponent &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>toString</name>
      <anchorfile>structCodeEditorComponent_1_1State.html</anchorfile>
      <anchor>a7332657530e408b765e159048a4b164b</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CodeTokeniser</name>
    <filename>classCodeTokeniser.html</filename>
    <member kind="function">
      <type></type>
      <name>CodeTokeniser</name>
      <anchorfile>classCodeTokeniser.html</anchorfile>
      <anchor>a03586fac70e7e14fdd091e87497112bc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CodeTokeniser</name>
      <anchorfile>classCodeTokeniser.html</anchorfile>
      <anchor>ac0509831c5e621abc5d1e8cc792f563d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>readNextToken</name>
      <anchorfile>classCodeTokeniser.html</anchorfile>
      <anchor>aeb723b767eed0ce44ae995c99ebc1c2f</anchor>
      <arglist>(CodeDocument::Iterator &amp;source)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual CodeEditorComponent::ColourScheme</type>
      <name>getDefaultColourScheme</name>
      <anchorfile>classCodeTokeniser.html</anchorfile>
      <anchor>a240c3d9ca2a5e7f4da5d895143b52b78</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Colour</name>
    <filename>classColour.html</filename>
    <member kind="function">
      <type></type>
      <name>Colour</name>
      <anchorfile>classColour.html</anchorfile>
      <anchor>aa009fc40e04a728a6ed8c8ef3bd4de8b</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Colour</name>
      <anchorfile>classColour.html</anchorfile>
      <anchor>ab36014ff4d156a80d4092480a3c9acad</anchor>
      <arglist>(const Colour &amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Colour</name>
      <anchorfile>classColour.html</anchorfile>
      <anchor>aa85da4a12766e70d809a3331945daa86</anchor>
      <arglist>(uint32 argb) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Colour</name>
      <anchorfile>classColour.html</anchorfile>
      <anchor>ac67a899c0ce2d8b8e45436c1b51647c5</anchor>
      <arglist>(uint8 red, uint8 green, uint8 blue) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Colour</name>
      <anchorfile>classColour.html</anchorfile>
      <anchor>a9af7bfa12d5149f917b0c2852022ef84</anchor>
      <arglist>(uint8 red, uint8 green, uint8 blue, uint8 alpha) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Colour</name>
      <anchorfile>classColour.html</anchorfile>
      <anchor>acfdcf34d0d45bc43531d60f1f4f03c71</anchor>
      <arglist>(uint8 red, uint8 green, uint8 blue, float alpha) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Colour</name>
      <anchorfile>classColour.html</anchorfile>
      <anchor>a55e06082b4daee5e42a8647bccd514e6</anchor>
      <arglist>(float hue, float saturation, float brightness, uint8 alpha) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Colour</name>
      <anchorfile>classColour.html</anchorfile>
      <anchor>af84197c2cc0f45f4dffb253075346f2a</anchor>
      <arglist>(float hue, float saturation, float brightness, float alpha) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Colour</name>
      <anchorfile>classColour.html</anchorfile>
      <anchor>a5837bfc549eb523e09546482ef67c631</anchor>
      <arglist>(PixelARGB argb) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Colour</name>
      <anchorfile>classColour.html</anchorfile>
      <anchor>afaa0d78f1aff25b4dd57ffdebe6f9a61</anchor>
      <arglist>(PixelRGB rgb) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Colour</name>
      <anchorfile>classColour.html</anchorfile>
      <anchor>a2dbee14ceaa5c8fea982e281d86685ae</anchor>
      <arglist>(PixelAlpha alpha) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Colour</name>
      <anchorfile>classColour.html</anchorfile>
      <anchor>a90c3026fa2ac4380844686720caa3f48</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>Colour &amp;</type>
      <name>operator=</name>
      <anchorfile>classColour.html</anchorfile>
      <anchor>a306f2803d0af244bd446feeb4b1c2067</anchor>
      <arglist>(const Colour &amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classColour.html</anchorfile>
      <anchor>a80b0a8ecec773ec3ce0cb6956460ffa2</anchor>
      <arglist>(const Colour &amp;other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classColour.html</anchorfile>
      <anchor>a243e67f935798a277d4729e91f1d3593</anchor>
      <arglist>(const Colour &amp;other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>uint8</type>
      <name>getRed</name>
      <anchorfile>classColour.html</anchorfile>
      <anchor>a05872730d5a284f07c4bfb8dd81db79a</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>uint8</type>
      <name>getGreen</name>
      <anchorfile>classColour.html</anchorfile>
      <anchor>a1c02651acff9d94975fb337114eb5d97</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>uint8</type>
      <name>getBlue</name>
      <anchorfile>classColour.html</anchorfile>
      <anchor>a487ce0a8e467fdceb45fd851317ae496</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getFloatRed</name>
      <anchorfile>classColour.html</anchorfile>
      <anchor>ad5dfb34a664a5900fb554c993310caeb</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getFloatGreen</name>
      <anchorfile>classColour.html</anchorfile>
      <anchor>a6a8ae0289d06af2e6552bec965da515d</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getFloatBlue</name>
      <anchorfile>classColour.html</anchorfile>
      <anchor>ab6f50dfc4850d0970c8ac2334e8b96bb</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const PixelARGB</type>
      <name>getPixelARGB</name>
      <anchorfile>classColour.html</anchorfile>
      <anchor>adf6de35bcbcae267c1f34791f52415a6</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>uint32</type>
      <name>getARGB</name>
      <anchorfile>classColour.html</anchorfile>
      <anchor>a11798d929e8c7e8f57efc5ad588f1464</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>uint8</type>
      <name>getAlpha</name>
      <anchorfile>classColour.html</anchorfile>
      <anchor>a5550ecfb401fd08e87761b2ad79d6c9c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getFloatAlpha</name>
      <anchorfile>classColour.html</anchorfile>
      <anchor>a340325739e15cdb61995258ee9fbe291</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isOpaque</name>
      <anchorfile>classColour.html</anchorfile>
      <anchor>a0ea77f44712e52ad17b313b305650ec0</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isTransparent</name>
      <anchorfile>classColour.html</anchorfile>
      <anchor>a30c68aad96d0a126d68b410089ae9993</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Colour</type>
      <name>withAlpha</name>
      <anchorfile>classColour.html</anchorfile>
      <anchor>a0cd650ce4ce07bd594f3abb0c3fec5e6</anchor>
      <arglist>(uint8 newAlpha) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Colour</type>
      <name>withAlpha</name>
      <anchorfile>classColour.html</anchorfile>
      <anchor>a9d38dac3c093152c0c465116e99f2f93</anchor>
      <arglist>(float newAlpha) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Colour</type>
      <name>withMultipliedAlpha</name>
      <anchorfile>classColour.html</anchorfile>
      <anchor>ab7b9e09718eab166f4f7ebd5202163a4</anchor>
      <arglist>(float alphaMultiplier) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Colour</type>
      <name>overlaidWith</name>
      <anchorfile>classColour.html</anchorfile>
      <anchor>a3c6c94ff6f05b403b783acaf7c68b439</anchor>
      <arglist>(Colour foregroundColour) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Colour</type>
      <name>interpolatedWith</name>
      <anchorfile>classColour.html</anchorfile>
      <anchor>ac1500fb05c7775db2e1b21f07cc28c0c</anchor>
      <arglist>(Colour other, float proportionOfOther) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getHue</name>
      <anchorfile>classColour.html</anchorfile>
      <anchor>adbc8c5118f647a77780fec0187d6b499</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getSaturation</name>
      <anchorfile>classColour.html</anchorfile>
      <anchor>a2d6cf1e67613d761dc699eb10281344a</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getBrightness</name>
      <anchorfile>classColour.html</anchorfile>
      <anchor>aeff939e673b49a4ea4a22c607d851e4d</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getPerceivedBrightness</name>
      <anchorfile>classColour.html</anchorfile>
      <anchor>adf7ef04250abe052b566e3849914c04d</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getHSB</name>
      <anchorfile>classColour.html</anchorfile>
      <anchor>a8f59eb28e10446aefd7b7b504641195d</anchor>
      <arglist>(float &amp;hue, float &amp;saturation, float &amp;brightness) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Colour</type>
      <name>withHue</name>
      <anchorfile>classColour.html</anchorfile>
      <anchor>a8006b38ceee7d4259ed74af40a1affc6</anchor>
      <arglist>(float newHue) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Colour</type>
      <name>withSaturation</name>
      <anchorfile>classColour.html</anchorfile>
      <anchor>a51801c014c2abe3fe87ee59604bdb993</anchor>
      <arglist>(float newSaturation) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Colour</type>
      <name>withBrightness</name>
      <anchorfile>classColour.html</anchorfile>
      <anchor>a3854dde3b298ff71d7c1a5b93393ca29</anchor>
      <arglist>(float newBrightness) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Colour</type>
      <name>withRotatedHue</name>
      <anchorfile>classColour.html</anchorfile>
      <anchor>a8708ccf6e53671d1b26c6b8682950fd7</anchor>
      <arglist>(float amountToRotate) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Colour</type>
      <name>withMultipliedSaturation</name>
      <anchorfile>classColour.html</anchorfile>
      <anchor>a2f7f499a42a9f69d9b9956957fc6e288</anchor>
      <arglist>(float multiplier) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Colour</type>
      <name>withMultipliedBrightness</name>
      <anchorfile>classColour.html</anchorfile>
      <anchor>a807b51f53791e9cac5bcc3786d4398eb</anchor>
      <arglist>(float amount) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Colour</type>
      <name>brighter</name>
      <anchorfile>classColour.html</anchorfile>
      <anchor>a614c7699a1b47dcf324106d548238bac</anchor>
      <arglist>(float amountBrighter=0.4f) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Colour</type>
      <name>darker</name>
      <anchorfile>classColour.html</anchorfile>
      <anchor>a9910d9b8385825a87ea0d62d96115872</anchor>
      <arglist>(float amountDarker=0.4f) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Colour</type>
      <name>contrasting</name>
      <anchorfile>classColour.html</anchorfile>
      <anchor>a50e8a45cda60f6853cb74ed1ff1fb7d7</anchor>
      <arglist>(float amount=1.0f) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Colour</type>
      <name>contrasting</name>
      <anchorfile>classColour.html</anchorfile>
      <anchor>a2b65294cfdcb99f0dcb2c4302115fc9f</anchor>
      <arglist>(Colour targetColour, float minLuminosityDiff) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>toString</name>
      <anchorfile>classColour.html</anchorfile>
      <anchor>a76b64c58ab48c2655c5632eb3e17d269</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>toDisplayString</name>
      <anchorfile>classColour.html</anchorfile>
      <anchor>af67d6e061dcf0429339fe6b8b999ece6</anchor>
      <arglist>(bool includeAlphaValue) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Colour</type>
      <name>fromRGB</name>
      <anchorfile>classColour.html</anchorfile>
      <anchor>a8229c3afbbab454c718ee2b08b56df8c</anchor>
      <arglist>(uint8 red, uint8 green, uint8 blue) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Colour</type>
      <name>fromRGBA</name>
      <anchorfile>classColour.html</anchorfile>
      <anchor>a0611ddee8a4c8414645d6975f290a750</anchor>
      <arglist>(uint8 red, uint8 green, uint8 blue, uint8 alpha) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Colour</type>
      <name>fromFloatRGBA</name>
      <anchorfile>classColour.html</anchorfile>
      <anchor>a3992d5ea9bdaf0471bd6caa0595b0185</anchor>
      <arglist>(float red, float green, float blue, float alpha) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Colour</type>
      <name>fromHSV</name>
      <anchorfile>classColour.html</anchorfile>
      <anchor>a34cee4195baff72c95a9c99148acf6c2</anchor>
      <arglist>(float hue, float saturation, float brightness, float alpha) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Colour</type>
      <name>contrasting</name>
      <anchorfile>classColour.html</anchorfile>
      <anchor>a400a1d64ee2f49887676a7fe137a1dec</anchor>
      <arglist>(Colour colour1, Colour colour2) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Colour</type>
      <name>greyLevel</name>
      <anchorfile>classColour.html</anchorfile>
      <anchor>aa471422198e711e4d05aa1a90b160301</anchor>
      <arglist>(float brightness) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Colour</type>
      <name>fromString</name>
      <anchorfile>classColour.html</anchorfile>
      <anchor>af3201190cd919556988a7125ad2f92a0</anchor>
      <arglist>(StringRef encodedColourString)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ColourGradient</name>
    <filename>classColourGradient.html</filename>
    <member kind="function">
      <type></type>
      <name>ColourGradient</name>
      <anchorfile>classColourGradient.html</anchorfile>
      <anchor>a837b0054a74938bf8ea783d5cdd53897</anchor>
      <arglist>(Colour colour1, float x1, float y1, Colour colour2, float x2, float y2, bool isRadial)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ColourGradient</name>
      <anchorfile>classColourGradient.html</anchorfile>
      <anchor>a73556e9dd8b02b0d10e4f5ec9e0edec1</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ColourGradient</name>
      <anchorfile>classColourGradient.html</anchorfile>
      <anchor>a0ab7aff1c3f8b6faf82bebf3ff9b4a5a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearColours</name>
      <anchorfile>classColourGradient.html</anchorfile>
      <anchor>a634055607de82695189730cf409e3ecd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addColour</name>
      <anchorfile>classColourGradient.html</anchorfile>
      <anchor>ab220584b1725993c9a7eee42739f8353</anchor>
      <arglist>(double proportionAlongGradient, Colour colour)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeColour</name>
      <anchorfile>classColourGradient.html</anchorfile>
      <anchor>a55bbee0ea470af294d36d19256e7d419</anchor>
      <arglist>(int index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>multiplyOpacity</name>
      <anchorfile>classColourGradient.html</anchorfile>
      <anchor>a7c5cef5beaeca40e429f5a3b661983cb</anchor>
      <arglist>(float multiplier) noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumColours</name>
      <anchorfile>classColourGradient.html</anchorfile>
      <anchor>a5520e46c4cee46a10e4c4f63e3cb3e46</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getColourPosition</name>
      <anchorfile>classColourGradient.html</anchorfile>
      <anchor>ab43972e13c701166d7cd268251ddbe67</anchor>
      <arglist>(int index) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Colour</type>
      <name>getColour</name>
      <anchorfile>classColourGradient.html</anchorfile>
      <anchor>a9c9bbbf99f789034a7f527a381389042</anchor>
      <arglist>(int index) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setColour</name>
      <anchorfile>classColourGradient.html</anchorfile>
      <anchor>ae16d321cfe4706a4be8c875fadc78afa</anchor>
      <arglist>(int index, Colour newColour) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Colour</type>
      <name>getColourAtPosition</name>
      <anchorfile>classColourGradient.html</anchorfile>
      <anchor>a679196f0e731d1306ca484909a6fccdb</anchor>
      <arglist>(double position) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>createLookupTable</name>
      <anchorfile>classColourGradient.html</anchorfile>
      <anchor>a6670038ecde1f98034ae4231c30d9298</anchor>
      <arglist>(const AffineTransform &amp;transform, HeapBlock&lt; PixelARGB &gt; &amp;resultLookupTable) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>createLookupTable</name>
      <anchorfile>classColourGradient.html</anchorfile>
      <anchor>a95b9ca19c7d38e65b9525b1fa05d20ed</anchor>
      <arglist>(PixelARGB *resultLookupTable, int numEntries) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isOpaque</name>
      <anchorfile>classColourGradient.html</anchorfile>
      <anchor>ab2aa475450033278b052126609416303</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isInvisible</name>
      <anchorfile>classColourGradient.html</anchorfile>
      <anchor>af335e4b881ef05022440d15a16f681da</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classColourGradient.html</anchorfile>
      <anchor>a1eec4cedae0908b58163f14b202ab19d</anchor>
      <arglist>(const ColourGradient &amp;) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classColourGradient.html</anchorfile>
      <anchor>abb3da1ad163d9892745dcf490c933d4e</anchor>
      <arglist>(const ColourGradient &amp;) const noexcept</arglist>
    </member>
    <member kind="variable">
      <type>Point&lt; float &gt;</type>
      <name>point1</name>
      <anchorfile>classColourGradient.html</anchorfile>
      <anchor>ac016d8472f6ce47c16d1df1e49c39dfc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Point&lt; float &gt;</type>
      <name>point2</name>
      <anchorfile>classColourGradient.html</anchorfile>
      <anchor>a218351e8768cb2f956d2186d85710787</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>isRadial</name>
      <anchorfile>classColourGradient.html</anchorfile>
      <anchor>a42c5382b7e7bda2b7efdb7b1a9258a44</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Colours</name>
    <filename>classColours.html</filename>
    <member kind="function" static="yes">
      <type>static JUCE_API Colour</type>
      <name>findColourForName</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>a4399e0f5d7c504f1ecaa7b3ee7ac3f35</anchor>
      <arglist>(const String &amp;colourName, Colour defaultColour)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>transparentBlack</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>a0ce54d7a6cbbce207c29165102d3a35f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>transparentWhite</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>a9188c880171c8f146d40801c304c25b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>black</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>aad3910013bf00a80305c082284cd5ee2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>white</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>a9e57055bbdf8261e776d2ea8bb44514a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>blue</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>a6a834cffeaa15537e4781d8d24968a87</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>grey</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>a631686f2c072d2bf0988f418dea3c27f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>green</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>a9a561532a8aa26019e40aa0460a40646</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>red</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>a5056e7857f2bc211569dfc89512244dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>yellow</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>a2a39e71272c998b9244bd633d0c80a6a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>aliceblue</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>aa90d486409e9c3634ec3f9abbaeb14d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>antiquewhite</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>a2b7b4df4c8de5448bbb9b0e675d5ba71</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>aqua</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>a8e8c52db61e74dde6972c2f9c727796f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>aquamarine</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>aa16a1a5bd7d1e56f3d36ce7bf7706cd6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>azure</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>a5171f883b75e70b30df3b3b1746a8521</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>beige</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>a3dfd5f795dbfe57bd3d2b856455b68ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>bisque</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>ae6dbea8a5a7948d1b7e9189dce936e52</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>blanchedalmond</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>ade76144d43cca657dac89e21b9a4ff43</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>blueviolet</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>a1720311a325df81523fac5513a1253a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>brown</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>a4c9ecea4fcd6707c997848245cdb1aea</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>burlywood</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>a44803d0e7de49815d43c88d9b6042718</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>cadetblue</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>af5bca16acd0235fa3c63859465d53f7f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>chartreuse</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>aadcaa70cc7028fee7c6dba0a04926b6d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>chocolate</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>a0c018189a4e1c0810a8838abb1763135</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>coral</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>a194cea1670d8b5588dc0acb40c7e93d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>cornflowerblue</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>a4186f54cc951c1482c317b8729eb47a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>cornsilk</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>a21bbe016b258787d6754d6227efa3c53</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>crimson</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>abd804b3fa30e3aea3908bfaef84ff7ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>cyan</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>a0f35bbd00d593e18a4e980100e77373c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>darkblue</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>a444aff0fcfa17bb58a4e5fbc55fdd2e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>darkcyan</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>ae05956920f811ce4b5747ed19b219bb7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>darkgoldenrod</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>a3684379c9ead0aafa8e35640c21b1e04</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>darkgrey</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>a69d1600ff4246b36704d9cf972575bdf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>darkgreen</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>ad2cc4c51c26edb7697352b22ecc090cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>darkkhaki</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>a054e8a1bb8b99049217e9e8c78b6a1b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>darkmagenta</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>afb2749e7f077c0424a3f9ee45093a9d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>darkolivegreen</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>acd779b0d1d755516274066e96ffa3f4c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>darkorange</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>a4e47895b9516b78a951233d176553ada</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>darkorchid</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>adb030640ac52d88eac194db4e3221107</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>darkred</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>a708ef7df00517dda5693ac3576f300e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>darksalmon</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>abd3a046bb36d67f85a6dc9b36d9ddc69</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>darkseagreen</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>a9bbe7f34e6ca7dc1f1bf28c47aed4101</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>darkslateblue</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>acf7161f16736b24346901341aa4e2132</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>darkslategrey</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>a5d110e28508d1b6b94d1c6a2ca2ce0d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>darkturquoise</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>a3cab3c29a15b8f727b4915512c7f0c63</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>darkviolet</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>a157085bc9d4d0bc75966b238b51a7ee3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>deeppink</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>a28f6cc1ccf53cef009f33f982100453f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>deepskyblue</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>ae7932af011b21184ce06f33c30396d69</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>dimgrey</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>a737012c7670ba25ccc7bee5ba96c3d2b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>dodgerblue</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>a1a07cae34389d93d4b3817a14ef6efda</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>firebrick</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>a42927144796d42794fb69b30dce33e1e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>floralwhite</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>a7b14b831624be80b4520225559ba5253</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>forestgreen</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>a34c336f65b06cb988f89bddc14a5041e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>fuchsia</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>a612e521b7168865f48fc7d1612658a79</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>gainsboro</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>aafd6fddf3e1dc29dadc28574d814b341</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>gold</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>afa34ba9e11dffb794fb740f4e57da7cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>goldenrod</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>a7b4ffbc83bda6d20b537415f49327ce5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>greenyellow</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>a9d690d0eb0194caa2c91dfba4afbff4c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>honeydew</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>a5f2fec9693dfbde24317fa3fe3d29528</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>hotpink</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>a7f61d3865bb38cd0eecdc7c46ae0e603</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>indianred</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>a5a356968d2d4f49b369afa56c0ec3f43</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>indigo</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>a087ca459fcd267cdda383c5bf5ab0f0e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>ivory</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>a97ea5f64838c6c2d1301c32108e830d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>khaki</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>a3dbd6496fffe6448949acef248ddb3f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>lavender</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>a42bdd3828e3e453f1aacd8e129d7ba4c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>lavenderblush</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>a189b1d3e8c5a8f324de759efc8325496</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>lemonchiffon</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>aac8ef45b16855e5990afa7efca9a19cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>lightblue</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>a7c6d7f45d8e84964320b3c510b15ac29</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>lightcoral</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>ac7ec898bf0d0e640c2272479e4e83262</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>lightcyan</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>a126f9d070fa806c9159a7df2fa0b29c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>lightgoldenrodyellow</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>aa211fa75f0d31dd157551a340df3035f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>lightgreen</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>a0b5d566aeaf7d6ee3a6decb9766eb984</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>lightgrey</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>a1fa2b00bb140b113d57b6de66c0c8e46</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>lightpink</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>a8067259612bf052798aa6a9f4ac562db</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>lightsalmon</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>aa994fb73c8ea9b95188fbf9fee1ad6b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>lightseagreen</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>a31d871ea1084f5e497c01e276dd251cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>lightskyblue</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>a088bec932f10162da5fd40c3e407884c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>lightslategrey</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>a86dd7443cbd2e6f1f68b489e284980e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>lightsteelblue</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>a7cb8ffd18a182fa76df45b0888af429b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>lightyellow</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>a8614458932a2ff1907db0c672a74c1f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>lime</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>aaf9a5609e0358dec5bf3d424bf6961d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>limegreen</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>a864d371bf2a2f6aa17f08c34e30fa750</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>linen</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>ae78b2b6dd2b4f69df9653603310ebf94</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>magenta</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>a9a33de3ccb10690341256154909b390e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>maroon</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>a4790622961dd6a1eff7179d89cc78617</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>mediumaquamarine</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>a059c8c5ab845ec21bba2a86cd8240fc7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>mediumblue</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>a50c8a8350bbc20cc32167ab8719a68a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>mediumorchid</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>afb4edaddffe337e9b8a98a3945c1b0f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>mediumpurple</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>ad7b9364df25c2a9cab57edf5754c1700</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>mediumseagreen</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>a22521dd30cf5cae36214214e1f5e6a8d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>mediumslateblue</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>a3714678ce4c2fc1d82258a3ac8dc1c46</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>mediumspringgreen</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>a1eed924e1912712c790ec6e9733f30e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>mediumturquoise</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>a108a3b570a3e24157b157445502e0c36</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>mediumvioletred</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>aca989bc73fc042848610a8d841a817cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>midnightblue</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>ae2b84b4de769da6c75cc947dcf8a066a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>mintcream</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>ae73a01a9deca54c8f004320a2d24edfb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>mistyrose</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>a6f6db5e9de7a3d438ebe01a6a6c28baf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>navajowhite</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>a3aae0d537d9c4103f0be6e84443bae6f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>navy</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>a2f4e6cbbf218f698b25a8e08c787068f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>oldlace</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>a8854bc208ff4c18d1359d48061801eed</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>olive</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>afa863de7d2e3c645092e981ef4b47349</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>olivedrab</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>a470482f79ccbabc1cfe7c44e4123acfd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>orange</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>a8c31c34f70dbdc0cad0f7cddf6cdb59a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>orangered</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>a9a18c3a1066dd40816a1847450b7df1d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>orchid</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>a713c49555dcbf132b3f147f4a66e2cb4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>palegoldenrod</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>a3bbc454c6b84c80fb0d664cfb2b01657</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>palegreen</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>a6518cb2353fd89ad7d463ef6675f30c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>paleturquoise</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>a2b17126a05b24d3e936527e260cd9f47</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>palevioletred</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>aff1ccf8323d8231e42e1342a7d7b293a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>papayawhip</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>a8b6fb5bd196ba71f78c2d0a17c712783</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>peachpuff</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>aa83a3ec486288727ffa82d9e8e4a82b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>peru</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>a8417b7053caaf567a98eb61eccf57838</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>pink</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>aa959194b957e4113dcdc9ec488464229</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>plum</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>ac02c6bea8fac05b5c050a3ec6b4fd924</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>powderblue</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>aa913febd5348f64f92af7c4dac0b667c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>purple</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>ae3a4c80eb100c23650cec3d19320b40b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>rosybrown</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>ac80422785f2552e8738a6b450f335dfa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>royalblue</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>a2f85b97be33e07c1ca9a0187c4883df3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>saddlebrown</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>a753a5e165485d3bb8e27db7296627a3d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>salmon</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>af378ac76e1537fce6687df4ba4cdf02a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>sandybrown</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>aeaae32c502a189cef0bfbbc1251cdb1c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>seagreen</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>adc17fb0b93d2db209de3e4f54857f2b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>seashell</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>a59caf9dbbe04dd428b7253273ec14ca3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>sienna</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>aef8c3caf18a816ecc8180ca9d639ab3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>silver</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>ac171c2c4d749ed079e56de4fe35ba2a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>skyblue</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>a1c4ad4071850e2f41643f5754052769b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>slateblue</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>acfce5d955cbea8e623306c40608e4157</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>slategrey</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>a6be50813f9d395a79a006cad9164f2b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>snow</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>a526bf1d183bff07c8984d7221cfd33ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>springgreen</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>a3e179fc221c9922880646454e451562b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>steelblue</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>a5b38585d24f85fd84b1aea940d0970db</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>tan</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>ae8816a5fc45532eff9ba5884de8902f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>teal</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>a8b36ca8736b9a5f54d04687b702d2407</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>thistle</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>ab84edf5bce8e53629326721524ce3b9e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>tomato</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>a52d1f22f0d92d67cdb05c0d083dc109a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>turquoise</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>a18ee88829e56e1e141d0291d0c540b1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>violet</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>a47d1f14979982a28936c5ec4f90e82aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>wheat</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>ad1fd92baa1ca57d2e51995df721bb326</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>whitesmoke</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>a0ef54946314ce5243c7cc6aa7d04fbb2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JUCE_API const Colour</type>
      <name>yellowgreen</name>
      <anchorfile>classColours.html</anchorfile>
      <anchor>ad83bd255e0db333a7e66f23ab02eb492</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ColourSelector</name>
    <filename>classColourSelector.html</filename>
    <base>Component</base>
    <base>ChangeBroadcaster</base>
    <base protection="protected">Slider::Listener</base>
    <member kind="enumeration">
      <type></type>
      <name>ColourSelectorOptions</name>
      <anchorfile>classColourSelector.html</anchorfile>
      <anchor>a42bcef80614375bb812096797d7439f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>showAlphaChannel</name>
      <anchorfile>classColourSelector.html</anchorfile>
      <anchor>a42bcef80614375bb812096797d7439f4a532b65a28bec85b05e7a1af509d537b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>showColourAtTop</name>
      <anchorfile>classColourSelector.html</anchorfile>
      <anchor>a42bcef80614375bb812096797d7439f4ad6696687d1305adef49791cb79f44ab2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>showSliders</name>
      <anchorfile>classColourSelector.html</anchorfile>
      <anchor>a42bcef80614375bb812096797d7439f4acb7837c2bed5ec3fe11c19408b9d8f68</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>showColourspace</name>
      <anchorfile>classColourSelector.html</anchorfile>
      <anchor>a42bcef80614375bb812096797d7439f4ab4838306154c4cb269920a01c2a6495b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>ColourIds</name>
      <anchorfile>classColourSelector.html</anchorfile>
      <anchor>a65fa6c43362eb075049881086dc3ffca</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>backgroundColourId</name>
      <anchorfile>classColourSelector.html</anchorfile>
      <anchor>a65fa6c43362eb075049881086dc3ffcaa8b8cebff8127c562a7253f04c06fc521</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>labelTextColourId</name>
      <anchorfile>classColourSelector.html</anchorfile>
      <anchor>a65fa6c43362eb075049881086dc3ffcaaaa24cca7ebcab0317445ff12196e0362</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ColourSelector</name>
      <anchorfile>classColourSelector.html</anchorfile>
      <anchor>a897f79f6d20ae6c1827b4885bdf73923</anchor>
      <arglist>(int flags=(showAlphaChannel|showColourAtTop|showSliders|showColourspace), int edgeGap=4, int gapAroundColourSpaceComponent=7)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ColourSelector</name>
      <anchorfile>classColourSelector.html</anchorfile>
      <anchor>ab1ea0383b709b67127afd17c8b912df3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Colour</type>
      <name>getCurrentColour</name>
      <anchorfile>classColourSelector.html</anchorfile>
      <anchor>a17a850280d960de60704a1df2d6b608c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCurrentColour</name>
      <anchorfile>classColourSelector.html</anchorfile>
      <anchor>a38aaf19f67b6c6f32628c4e71b3e6b25</anchor>
      <arglist>(Colour newColour, NotificationType notificationType=sendNotification)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumSwatches</name>
      <anchorfile>classColourSelector.html</anchorfile>
      <anchor>a66475288c0a7b9325e73af07421490db</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Colour</type>
      <name>getSwatchColour</name>
      <anchorfile>classColourSelector.html</anchorfile>
      <anchor>a095caf66bb8711f7c971c113cffc701b</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSwatchColour</name>
      <anchorfile>classColourSelector.html</anchorfile>
      <anchor>a6004e7dd347d157a9f80b4d79207f526</anchor>
      <arglist>(int index, const Colour &amp;newColour) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Listener</name>
      <anchorfile>classSlider_1_1Listener.html</anchorfile>
      <anchor>a16bff39b45d9d9eb712e450a4c9b155a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>sliderDragStarted</name>
      <anchorfile>classSlider_1_1Listener.html</anchorfile>
      <anchor>a47d244924786c6a047c81c1a05f21dc0</anchor>
      <arglist>(Slider *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>sliderDragEnded</name>
      <anchorfile>classSlider_1_1Listener.html</anchorfile>
      <anchor>a39fd22d0de8881350b786c98f70efe57</anchor>
      <arglist>(Slider *)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ComboBox</name>
    <filename>classComboBox.html</filename>
    <base>Component</base>
    <base>SettableTooltipClient</base>
    <base>Label::Listener</base>
    <base>Value::Listener</base>
    <base protection="private">AsyncUpdater</base>
    <class kind="class">ComboBox::Listener</class>
    <class kind="struct">ComboBox::LookAndFeelMethods</class>
    <member kind="enumeration">
      <type></type>
      <name>ColourIds</name>
      <anchorfile>classComboBox.html</anchorfile>
      <anchor>aa2eff88125f77f8e278374e716202e6e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>backgroundColourId</name>
      <anchorfile>classComboBox.html</anchorfile>
      <anchor>aa2eff88125f77f8e278374e716202e6ea6273f60ffa0214d402ebca64c7a5db6e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>textColourId</name>
      <anchorfile>classComboBox.html</anchorfile>
      <anchor>aa2eff88125f77f8e278374e716202e6ea9dadb9138921557c1f5cb21f6b9ce861</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>outlineColourId</name>
      <anchorfile>classComboBox.html</anchorfile>
      <anchor>aa2eff88125f77f8e278374e716202e6ea647eb96fb5883a2fa7807c53daeb9eb3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>buttonColourId</name>
      <anchorfile>classComboBox.html</anchorfile>
      <anchor>aa2eff88125f77f8e278374e716202e6ea7266326d0ef0fe7fe4df8519ce695022</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>arrowColourId</name>
      <anchorfile>classComboBox.html</anchorfile>
      <anchor>aa2eff88125f77f8e278374e716202e6ea784b5c333839f9cfc0b6e890f1c2ef66</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ComboBox</name>
      <anchorfile>classComboBox.html</anchorfile>
      <anchor>ac21bb836780eb59d049e360fb843244e</anchor>
      <arglist>(const String &amp;componentName=String())</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ComboBox</name>
      <anchorfile>classComboBox.html</anchorfile>
      <anchor>ad604f1b99d025de79d0b768c310777f5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEditableText</name>
      <anchorfile>classComboBox.html</anchorfile>
      <anchor>af11edea3da851e2e0cb231f2cffa57aa</anchor>
      <arglist>(bool isEditable)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isTextEditable</name>
      <anchorfile>classComboBox.html</anchorfile>
      <anchor>a782bd99dc000c2ec442c3fb8ebd969e9</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setJustificationType</name>
      <anchorfile>classComboBox.html</anchorfile>
      <anchor>a90706d1526b2f53aba6a01dc2ccbba5f</anchor>
      <arglist>(Justification justification)</arglist>
    </member>
    <member kind="function">
      <type>Justification</type>
      <name>getJustificationType</name>
      <anchorfile>classComboBox.html</anchorfile>
      <anchor>adf5b2bad0b6e879295259d18866f3541</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addItem</name>
      <anchorfile>classComboBox.html</anchorfile>
      <anchor>a37491da45f1cbb74e47f145e5664d8bf</anchor>
      <arglist>(const String &amp;newItemText, int newItemId)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addItemList</name>
      <anchorfile>classComboBox.html</anchorfile>
      <anchor>a220fdfd4c252990583bfde360e0b2431</anchor>
      <arglist>(const StringArray &amp;items, int firstItemIdOffset)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addSeparator</name>
      <anchorfile>classComboBox.html</anchorfile>
      <anchor>af53bb419bb136f11f6f0342702d8d902</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addSectionHeading</name>
      <anchorfile>classComboBox.html</anchorfile>
      <anchor>ad376928ef517800c42628399e1a80990</anchor>
      <arglist>(const String &amp;headingName)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setItemEnabled</name>
      <anchorfile>classComboBox.html</anchorfile>
      <anchor>ad2a408f7f2a4318f66b7a6ae566dfab2</anchor>
      <arglist>(int itemId, bool shouldBeEnabled)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isItemEnabled</name>
      <anchorfile>classComboBox.html</anchorfile>
      <anchor>a3eb9bb4e4cf8a650a21ad23e7694ef13</anchor>
      <arglist>(int itemId) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>changeItemText</name>
      <anchorfile>classComboBox.html</anchorfile>
      <anchor>a760da2c5b9d0113fb040666cc92ccace</anchor>
      <arglist>(int itemId, const String &amp;newText)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classComboBox.html</anchorfile>
      <anchor>a2994551b0b24b123faa57496cba5dd05</anchor>
      <arglist>(NotificationType notification=sendNotificationAsync)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumItems</name>
      <anchorfile>classComboBox.html</anchorfile>
      <anchor>a2e889e4a22cf97bfea2ed0bb26b62922</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>getItemText</name>
      <anchorfile>classComboBox.html</anchorfile>
      <anchor>ab84f9beba948c52d0954f9d3b5a2a468</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getItemId</name>
      <anchorfile>classComboBox.html</anchorfile>
      <anchor>a667151e2d4add6c825fcda153e0668cb</anchor>
      <arglist>(int index) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>indexOfItemId</name>
      <anchorfile>classComboBox.html</anchorfile>
      <anchor>aeac0efaa026d2b6372b6abff93366466</anchor>
      <arglist>(int itemId) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getSelectedId</name>
      <anchorfile>classComboBox.html</anchorfile>
      <anchor>ab6232527104faad901ba0fa1380cd8ec</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Value &amp;</type>
      <name>getSelectedIdAsValue</name>
      <anchorfile>classComboBox.html</anchorfile>
      <anchor>a6b2df5f3b5615e5b0f5af969f44c2e19</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSelectedId</name>
      <anchorfile>classComboBox.html</anchorfile>
      <anchor>a61f8097b495703a253c33897e978fc06</anchor>
      <arglist>(int newItemId, NotificationType notification=sendNotificationAsync)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getSelectedItemIndex</name>
      <anchorfile>classComboBox.html</anchorfile>
      <anchor>a832bec23316a888a0739a7fe2584b254</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSelectedItemIndex</name>
      <anchorfile>classComboBox.html</anchorfile>
      <anchor>ad477b02d6a2af5c14b6e7ce673ec7979</anchor>
      <arglist>(int newItemIndex, NotificationType notification=sendNotificationAsync)</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>getText</name>
      <anchorfile>classComboBox.html</anchorfile>
      <anchor>a49371a2fbc471f2f067cd1bad53d91e7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setText</name>
      <anchorfile>classComboBox.html</anchorfile>
      <anchor>a2914dc2d3fd068d2e4ae4ccf03e42cfd</anchor>
      <arglist>(const String &amp;newText, NotificationType notification=sendNotificationAsync)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>showEditor</name>
      <anchorfile>classComboBox.html</anchorfile>
      <anchor>a4076d1c2a333f66e380e8614ea95000a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>showPopup</name>
      <anchorfile>classComboBox.html</anchorfile>
      <anchor>a46d401e92f606ef7ffa081d5e0bdb609</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>hidePopup</name>
      <anchorfile>classComboBox.html</anchorfile>
      <anchor>a68c3355b300f275af9962d772665fd53</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isPopupActive</name>
      <anchorfile>classComboBox.html</anchorfile>
      <anchor>a033d1799a5327fcdae0ecf9a364f0914</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>PopupMenu *</type>
      <name>getRootMenu</name>
      <anchorfile>classComboBox.html</anchorfile>
      <anchor>ada8ab191b09811f989a0df42e26dcd8b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addListener</name>
      <anchorfile>classComboBox.html</anchorfile>
      <anchor>a750af2fdf946a248d661fa4d2ca72e37</anchor>
      <arglist>(Listener *listener)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeListener</name>
      <anchorfile>classComboBox.html</anchorfile>
      <anchor>a5cabafb0691a2ad0819343f0e2aa1ca5</anchor>
      <arglist>(Listener *listener)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTextWhenNothingSelected</name>
      <anchorfile>classComboBox.html</anchorfile>
      <anchor>aa06d9e5b0437bc1717c761e0b9df8be5</anchor>
      <arglist>(const String &amp;newMessage)</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>getTextWhenNothingSelected</name>
      <anchorfile>classComboBox.html</anchorfile>
      <anchor>aa35fe371e6b4da8d65cf28abbbb01d18</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTextWhenNoChoicesAvailable</name>
      <anchorfile>classComboBox.html</anchorfile>
      <anchor>aac6093916748d66bb8e83373105c0e85</anchor>
      <arglist>(const String &amp;newMessage)</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>getTextWhenNoChoicesAvailable</name>
      <anchorfile>classComboBox.html</anchorfile>
      <anchor>ada4598044ace79d63bb1ed529c3f7ac8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTooltip</name>
      <anchorfile>classComboBox.html</anchorfile>
      <anchor>a34ab2052eaf915ea4dc39e1c1555aece</anchor>
      <arglist>(const String &amp;newTooltip) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setScrollWheelEnabled</name>
      <anchorfile>classComboBox.html</anchorfile>
      <anchor>a2ea185eac89f6a6136a4c7ae651ba475</anchor>
      <arglist>(bool enabled) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>labelTextChanged</name>
      <anchorfile>classComboBox.html</anchorfile>
      <anchor>a8db239b93e77646b61f3646bc223844b</anchor>
      <arglist>(Label *) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enablementChanged</name>
      <anchorfile>classComboBox.html</anchorfile>
      <anchor>adeabe2c0edc2170647ba741a8938aa2c</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>colourChanged</name>
      <anchorfile>classComboBox.html</anchorfile>
      <anchor>aa8c5d5d5d1a4bc61f06aa67dce85a762</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>focusGained</name>
      <anchorfile>classComboBox.html</anchorfile>
      <anchor>a919b2a14abca0da57d696b54b81d60f9</anchor>
      <arglist>(Component::FocusChangeType) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>focusLost</name>
      <anchorfile>classComboBox.html</anchorfile>
      <anchor>a254706d515cef8063b721522db8e41fc</anchor>
      <arglist>(Component::FocusChangeType) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>handleAsyncUpdate</name>
      <anchorfile>classComboBox.html</anchorfile>
      <anchor>a773b7375c6a370db67ed6fd16b4535a7</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>getTooltip</name>
      <anchorfile>classComboBox.html</anchorfile>
      <anchor>a98c8e084084091c1420ca846290d2002</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mouseDown</name>
      <anchorfile>classComboBox.html</anchorfile>
      <anchor>a8294a54c115bfbde18a66cdd3d3f6ec8</anchor>
      <arglist>(const MouseEvent &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mouseDrag</name>
      <anchorfile>classComboBox.html</anchorfile>
      <anchor>ad21a09e0f78a342b9b1ffab48be0f6c8</anchor>
      <arglist>(const MouseEvent &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mouseUp</name>
      <anchorfile>classComboBox.html</anchorfile>
      <anchor>a2cb99db20f64898f597015fa3fe1011e</anchor>
      <arglist>(const MouseEvent &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mouseWheelMove</name>
      <anchorfile>classComboBox.html</anchorfile>
      <anchor>a48d026065fbdd6822c1d2c07a72aa41b</anchor>
      <arglist>(const MouseEvent &amp;, const MouseWheelDetails &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lookAndFeelChanged</name>
      <anchorfile>classComboBox.html</anchorfile>
      <anchor>a827bd9fb9f273694458e0cc71f7424c5</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>paint</name>
      <anchorfile>classComboBox.html</anchorfile>
      <anchor>a67a3388f0b01381add6486802b568a50</anchor>
      <arglist>(Graphics &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resized</name>
      <anchorfile>classComboBox.html</anchorfile>
      <anchor>aaac698ef603e25f7e61ab510c74808eb</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>keyStateChanged</name>
      <anchorfile>classComboBox.html</anchorfile>
      <anchor>a35cf3423079da7b0605956fb9ec39174</anchor>
      <arglist>(bool) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>keyPressed</name>
      <anchorfile>classComboBox.html</anchorfile>
      <anchor>a2f910fc3d45c137b18448bdb9d9b7ec5</anchor>
      <arglist>(const KeyPress &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>valueChanged</name>
      <anchorfile>classComboBox.html</anchorfile>
      <anchor>ab1fe5413caf9ed998aa28c9044287e44</anchor>
      <arglist>(Value &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>parentHierarchyChanged</name>
      <anchorfile>classComboBox.html</anchorfile>
      <anchor>ad135622f39bab2e147816feea303a841</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>JUCE_DEPRECATED</name>
      <anchorfile>classComboBox.html</anchorfile>
      <anchor>adc31e2888737b3c6029309ab9b2537a5</anchor>
      <arglist>(void clear(bool))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>JUCE_DEPRECATED</name>
      <anchorfile>classComboBox.html</anchorfile>
      <anchor>a4db6c3a8b0c795213498eb09e3345cfe</anchor>
      <arglist>(void setSelectedId(int, bool))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>JUCE_DEPRECATED</name>
      <anchorfile>classComboBox.html</anchorfile>
      <anchor>a0cd478bbe86a068f922a2fe2d89485c3</anchor>
      <arglist>(void setSelectedItemIndex(int, bool))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>JUCE_DEPRECATED</name>
      <anchorfile>classComboBox.html</anchorfile>
      <anchor>aac7e88327ae08579f69b94fdee96c5af</anchor>
      <arglist>(void setText(const String &amp;, bool))</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Listener</name>
      <anchorfile>classLabel_1_1Listener.html</anchorfile>
      <anchor>a722e6e037b03e122cd00c11426f2a964</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>editorShown</name>
      <anchorfile>classLabel_1_1Listener.html</anchorfile>
      <anchor>a566bd2443fcd14c798760eb78812fc80</anchor>
      <arglist>(Label *, TextEditor &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>editorHidden</name>
      <anchorfile>classLabel_1_1Listener.html</anchorfile>
      <anchor>ae537782b534d768b3f293c9e85b90858</anchor>
      <arglist>(Label *, TextEditor &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Listener</name>
      <anchorfile>classValue_1_1Listener.html</anchorfile>
      <anchor>aca4d97f9b7f5d75109df491021e8a308</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Listener</name>
      <anchorfile>classValue_1_1Listener.html</anchorfile>
      <anchor>a10db56a1241f10e1d2497de6248f519d</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ComboBox::Listener</name>
    <filename>classComboBox_1_1Listener.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Listener</name>
      <anchorfile>classComboBox_1_1Listener.html</anchorfile>
      <anchor>aef7ca29a8e74043802db262a9b7adfed</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>comboBoxChanged</name>
      <anchorfile>classComboBox_1_1Listener.html</anchorfile>
      <anchor>a9ed3676ad921acde0414966fc41f1000</anchor>
      <arglist>(ComboBox *comboBoxThatHasChanged)=0</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ComboBox::LookAndFeelMethods</name>
    <filename>structComboBox_1_1LookAndFeelMethods.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~LookAndFeelMethods</name>
      <anchorfile>structComboBox_1_1LookAndFeelMethods.html</anchorfile>
      <anchor>ab929c0c6c626917c85ae3b37a529b926</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>drawComboBox</name>
      <anchorfile>structComboBox_1_1LookAndFeelMethods.html</anchorfile>
      <anchor>ae43e629153160f3ff1ddacbad9430fb7</anchor>
      <arglist>(Graphics &amp;, int width, int height, bool isButtonDown, int buttonX, int buttonY, int buttonW, int buttonH, ComboBox &amp;)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Font</type>
      <name>getComboBoxFont</name>
      <anchorfile>structComboBox_1_1LookAndFeelMethods.html</anchorfile>
      <anchor>a201fff98c8fdc7ccfee4f95746aa375d</anchor>
      <arglist>(ComboBox &amp;)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Label *</type>
      <name>createComboBoxTextBox</name>
      <anchorfile>structComboBox_1_1LookAndFeelMethods.html</anchorfile>
      <anchor>a62646a6d11739eab92feb340f85ff1d6</anchor>
      <arglist>(ComboBox &amp;)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>positionComboBoxText</name>
      <anchorfile>structComboBox_1_1LookAndFeelMethods.html</anchorfile>
      <anchor>aa93b0e37adae54ccf80a9386a23eb8a8</anchor>
      <arglist>(ComboBox &amp;, Label &amp;labelToPosition)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Component</name>
    <filename>classComponent.html</filename>
    <base>MouseListener</base>
    <class kind="class">Component::BailOutChecker</class>
    <class kind="class">Component::Positioner</class>
    <class kind="class">Component::SafePointer</class>
  </compound>
  <compound kind="class">
    <name>Component::BailOutChecker</name>
    <filename>classComponent_1_1BailOutChecker.html</filename>
    <member kind="function">
      <type></type>
      <name>BailOutChecker</name>
      <anchorfile>classComponent_1_1BailOutChecker.html</anchorfile>
      <anchor>a81634845f2a6f4c10572038f57420fd6</anchor>
      <arglist>(Component *component)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>shouldBailOut</name>
      <anchorfile>classComponent_1_1BailOutChecker.html</anchorfile>
      <anchor>a2c09b014548960f6792f62f7b8ec50bd</anchor>
      <arglist>() const noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Component::Positioner</name>
    <filename>classComponent_1_1Positioner.html</filename>
    <member kind="function">
      <type></type>
      <name>Positioner</name>
      <anchorfile>classComponent_1_1Positioner.html</anchorfile>
      <anchor>a5aca4975618f87c6f92d42eab4ca93bb</anchor>
      <arglist>(Component &amp;component) noexcept</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Positioner</name>
      <anchorfile>classComponent_1_1Positioner.html</anchorfile>
      <anchor>a95313fb4c0288de5082e6aca3dbcbf11</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Component &amp;</type>
      <name>getComponent</name>
      <anchorfile>classComponent_1_1Positioner.html</anchorfile>
      <anchor>aeeef98ad50aa4e6a5ca66b2a4cf011fd</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>applyNewBounds</name>
      <anchorfile>classComponent_1_1Positioner.html</anchorfile>
      <anchor>a3e88d32210f26978c182b4dfc376658f</anchor>
      <arglist>(const Rectangle&lt; int &gt; &amp;newBounds)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Component::SafePointer</name>
    <filename>classComponent_1_1SafePointer.html</filename>
    <templarg>ComponentType</templarg>
    <member kind="function">
      <type></type>
      <name>SafePointer</name>
      <anchorfile>classComponent_1_1SafePointer.html</anchorfile>
      <anchor>ad6a7f801bacd0a414469ca82db229488</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SafePointer</name>
      <anchorfile>classComponent_1_1SafePointer.html</anchorfile>
      <anchor>abb19a109404b9c591c2ddd340cd6da04</anchor>
      <arglist>(ComponentType *component)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SafePointer</name>
      <anchorfile>classComponent_1_1SafePointer.html</anchorfile>
      <anchor>a96bcb2f2303c429243030be224244f36</anchor>
      <arglist>(const SafePointer &amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>SafePointer &amp;</type>
      <name>operator=</name>
      <anchorfile>classComponent_1_1SafePointer.html</anchorfile>
      <anchor>a24d69c4ba84c89d69ed272f85b748989</anchor>
      <arglist>(const SafePointer &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>SafePointer &amp;</type>
      <name>operator=</name>
      <anchorfile>classComponent_1_1SafePointer.html</anchorfile>
      <anchor>ac40f6f50bdf6196280415b87b7e56718</anchor>
      <arglist>(ComponentType *newComponent)</arglist>
    </member>
    <member kind="function">
      <type>ComponentType *</type>
      <name>getComponent</name>
      <anchorfile>classComponent_1_1SafePointer.html</anchorfile>
      <anchor>a46a3d55ceff890abeb7db2e1ce17cab4</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator ComponentType *</name>
      <anchorfile>classComponent_1_1SafePointer.html</anchorfile>
      <anchor>a3a230def2f3e8c2695d45843ba248a79</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>ComponentType *</type>
      <name>operator-&gt;</name>
      <anchorfile>classComponent_1_1SafePointer.html</anchorfile>
      <anchor>ae2e22efbfb34148e0cddbea5d6c97402</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const ComponentType *</type>
      <name>operator-&gt;</name>
      <anchorfile>classComponent_1_1SafePointer.html</anchorfile>
      <anchor>a7d9ae035538065773e2866dc0ec6e606</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deleteAndZero</name>
      <anchorfile>classComponent_1_1SafePointer.html</anchorfile>
      <anchor>a2da79cce74d3d7b0ab1a248fcb2ca8a9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classComponent_1_1SafePointer.html</anchorfile>
      <anchor>a4503da7852a9758c8efc840716125813</anchor>
      <arglist>(ComponentType *component) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classComponent_1_1SafePointer.html</anchorfile>
      <anchor>a68f77044cc7808450e120e28beb07f34</anchor>
      <arglist>(ComponentType *component) const noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ComponentAnimator</name>
    <filename>classComponentAnimator.html</filename>
    <base>ChangeBroadcaster</base>
    <base protection="private">Timer</base>
    <member kind="function">
      <type></type>
      <name>ComponentAnimator</name>
      <anchorfile>classComponentAnimator.html</anchorfile>
      <anchor>a2252fed7a4a6de4df683912ef2786d4c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ComponentAnimator</name>
      <anchorfile>classComponentAnimator.html</anchorfile>
      <anchor>a03ba19fcba41474d165889cb8f04bd85</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>animateComponent</name>
      <anchorfile>classComponentAnimator.html</anchorfile>
      <anchor>ac4606415aa267cdb0be7e8f17abd8435</anchor>
      <arglist>(Component *component, const Rectangle&lt; int &gt; &amp;finalBounds, float finalAlpha, int animationDurationMilliseconds, bool useProxyComponent, double startSpeed, double endSpeed)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fadeOut</name>
      <anchorfile>classComponentAnimator.html</anchorfile>
      <anchor>ad89563171f4a80402380cf1c7873fe6e</anchor>
      <arglist>(Component *component, int millisecondsToTake)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fadeIn</name>
      <anchorfile>classComponentAnimator.html</anchorfile>
      <anchor>a7ccf95ec264eb19e0b33833fbef80aaa</anchor>
      <arglist>(Component *component, int millisecondsToTake)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cancelAnimation</name>
      <anchorfile>classComponentAnimator.html</anchorfile>
      <anchor>a7ded366b9b6dc3c6351b716c60e7f390</anchor>
      <arglist>(Component *component, bool moveComponentToItsFinalPosition)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cancelAllAnimations</name>
      <anchorfile>classComponentAnimator.html</anchorfile>
      <anchor>a1a6fab0501e0e4db7ad22a57780951e5</anchor>
      <arglist>(bool moveComponentsToTheirFinalPositions)</arglist>
    </member>
    <member kind="function">
      <type>Rectangle&lt; int &gt;</type>
      <name>getComponentDestination</name>
      <anchorfile>classComponentAnimator.html</anchorfile>
      <anchor>a8dc0196560be6463265493bf2f545ea3</anchor>
      <arglist>(Component *component)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isAnimating</name>
      <anchorfile>classComponentAnimator.html</anchorfile>
      <anchor>a1de237b6e0ec05ede35683a7a24e6e7d</anchor>
      <arglist>(Component *component) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isAnimating</name>
      <anchorfile>classComponentAnimator.html</anchorfile>
      <anchor>a9372429cc9a6a3865dcc322488cebf6a</anchor>
      <arglist>() const noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ComponentBoundsConstrainer</name>
    <filename>classComponentBoundsConstrainer.html</filename>
    <member kind="function">
      <type></type>
      <name>ComponentBoundsConstrainer</name>
      <anchorfile>classComponentBoundsConstrainer.html</anchorfile>
      <anchor>af45eadfc4f8fd8a33578ea00f49a1c0e</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ComponentBoundsConstrainer</name>
      <anchorfile>classComponentBoundsConstrainer.html</anchorfile>
      <anchor>ae4a71b7679b7a8a97365b4756f1be737</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMinimumWidth</name>
      <anchorfile>classComponentBoundsConstrainer.html</anchorfile>
      <anchor>a74e8916739dc8782adc0cca2eb95bef3</anchor>
      <arglist>(int minimumWidth) noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getMinimumWidth</name>
      <anchorfile>classComponentBoundsConstrainer.html</anchorfile>
      <anchor>a39e4ef743733614cd1cd2b2949e8d5f3</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaximumWidth</name>
      <anchorfile>classComponentBoundsConstrainer.html</anchorfile>
      <anchor>a925ec5da22e0a6e6266b2428705d5d6d</anchor>
      <arglist>(int maximumWidth) noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getMaximumWidth</name>
      <anchorfile>classComponentBoundsConstrainer.html</anchorfile>
      <anchor>a953f95835e414252d900a72d3d5a9e76</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMinimumHeight</name>
      <anchorfile>classComponentBoundsConstrainer.html</anchorfile>
      <anchor>a0b46cbd472fe7f925732ce92f4dcdfb3</anchor>
      <arglist>(int minimumHeight) noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getMinimumHeight</name>
      <anchorfile>classComponentBoundsConstrainer.html</anchorfile>
      <anchor>a12a419edbb224adc7033ba8289f7da51</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaximumHeight</name>
      <anchorfile>classComponentBoundsConstrainer.html</anchorfile>
      <anchor>af2a07dca0015ea0955ed0ff1856e78ff</anchor>
      <arglist>(int maximumHeight) noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getMaximumHeight</name>
      <anchorfile>classComponentBoundsConstrainer.html</anchorfile>
      <anchor>a63b8def753269b32bab577eb0cf84e98</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMinimumSize</name>
      <anchorfile>classComponentBoundsConstrainer.html</anchorfile>
      <anchor>aea5a0319cabade466756b4f031b9329d</anchor>
      <arglist>(int minimumWidth, int minimumHeight) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaximumSize</name>
      <anchorfile>classComponentBoundsConstrainer.html</anchorfile>
      <anchor>a0e2b30774ced1284700b5abf361847d0</anchor>
      <arglist>(int maximumWidth, int maximumHeight) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSizeLimits</name>
      <anchorfile>classComponentBoundsConstrainer.html</anchorfile>
      <anchor>a1a4b9c98a27720bf23bb5621af00d6a3</anchor>
      <arglist>(int minimumWidth, int minimumHeight, int maximumWidth, int maximumHeight) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMinimumOnscreenAmounts</name>
      <anchorfile>classComponentBoundsConstrainer.html</anchorfile>
      <anchor>aff1abf331d36ac67df318f999beccc0a</anchor>
      <arglist>(int minimumWhenOffTheTop, int minimumWhenOffTheLeft, int minimumWhenOffTheBottom, int minimumWhenOffTheRight) noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getMinimumWhenOffTheTop</name>
      <anchorfile>classComponentBoundsConstrainer.html</anchorfile>
      <anchor>a44c52db11cf8a141c9e8c562db59fad5</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getMinimumWhenOffTheLeft</name>
      <anchorfile>classComponentBoundsConstrainer.html</anchorfile>
      <anchor>a2115c6e6732ac8d22a681126feaa0692</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getMinimumWhenOffTheBottom</name>
      <anchorfile>classComponentBoundsConstrainer.html</anchorfile>
      <anchor>aadafebd97fcd42ae595973abcd164244</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getMinimumWhenOffTheRight</name>
      <anchorfile>classComponentBoundsConstrainer.html</anchorfile>
      <anchor>acc3d3e62dd2e533d86c38fb311287db0</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFixedAspectRatio</name>
      <anchorfile>classComponentBoundsConstrainer.html</anchorfile>
      <anchor>ad2dc5063fde4f7eec915c29eb9a78d46</anchor>
      <arglist>(double widthOverHeight) noexcept</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getFixedAspectRatio</name>
      <anchorfile>classComponentBoundsConstrainer.html</anchorfile>
      <anchor>aef5a96ab24d00c21a5d350b2b242b8a8</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>checkBounds</name>
      <anchorfile>classComponentBoundsConstrainer.html</anchorfile>
      <anchor>ae5de4ca69f5f0a595ca51d9354a217ab</anchor>
      <arglist>(Rectangle&lt; int &gt; &amp;bounds, const Rectangle&lt; int &gt; &amp;previousBounds, const Rectangle&lt; int &gt; &amp;limits, bool isStretchingTop, bool isStretchingLeft, bool isStretchingBottom, bool isStretchingRight)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>resizeStart</name>
      <anchorfile>classComponentBoundsConstrainer.html</anchorfile>
      <anchor>a93469c13206cd1f1a8662a4d031f6efc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>resizeEnd</name>
      <anchorfile>classComponentBoundsConstrainer.html</anchorfile>
      <anchor>a8e97270a714a8e9df0bbe1359388c599</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBoundsForComponent</name>
      <anchorfile>classComponentBoundsConstrainer.html</anchorfile>
      <anchor>afaf4fe2f6d2002463fce84ebdefc8db1</anchor>
      <arglist>(Component *component, const Rectangle&lt; int &gt; &amp;bounds, bool isStretchingTop, bool isStretchingLeft, bool isStretchingBottom, bool isStretchingRight)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkComponentBounds</name>
      <anchorfile>classComponentBoundsConstrainer.html</anchorfile>
      <anchor>a1f799af496b1658715dd34381043841b</anchor>
      <arglist>(Component *component)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>applyBoundsToComponent</name>
      <anchorfile>classComponentBoundsConstrainer.html</anchorfile>
      <anchor>a064cdd9798ea6a06c774fc9c554a8214</anchor>
      <arglist>(Component *component, const Rectangle&lt; int &gt; &amp;bounds)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ComponentBuilder</name>
    <filename>classComponentBuilder.html</filename>
    <base protection="private">ValueTree::Listener</base>
    <class kind="class">ComponentBuilder::ImageProvider</class>
    <class kind="class">ComponentBuilder::TypeHandler</class>
    <member kind="function">
      <type></type>
      <name>ComponentBuilder</name>
      <anchorfile>classComponentBuilder.html</anchorfile>
      <anchor>a129bcaf6b54dba4b8ffd87a3a69db5dc</anchor>
      <arglist>(const ValueTree &amp;state)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ComponentBuilder</name>
      <anchorfile>classComponentBuilder.html</anchorfile>
      <anchor>a0f565ba5e93bab1e079db4714e7169ca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ComponentBuilder</name>
      <anchorfile>classComponentBuilder.html</anchorfile>
      <anchor>a49cd066bf7fe3cb4711c3d68c6087fa3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Component *</type>
      <name>getManagedComponent</name>
      <anchorfile>classComponentBuilder.html</anchorfile>
      <anchor>a6d22c2e9d567af9e140ae4200b9dc493</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Component *</type>
      <name>createComponent</name>
      <anchorfile>classComponentBuilder.html</anchorfile>
      <anchor>a8758d00b4832dfe9447b0cfa352e8270</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>registerTypeHandler</name>
      <anchorfile>classComponentBuilder.html</anchorfile>
      <anchor>a97053a0ddf882ea7c6178ad06985865c</anchor>
      <arglist>(TypeHandler *type)</arglist>
    </member>
    <member kind="function">
      <type>TypeHandler *</type>
      <name>getHandlerForState</name>
      <anchorfile>classComponentBuilder.html</anchorfile>
      <anchor>a2a8a311fbe14f3f2be37a4c67bfbae08</anchor>
      <arglist>(const ValueTree &amp;state) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumHandlers</name>
      <anchorfile>classComponentBuilder.html</anchorfile>
      <anchor>a31c6a85cefbac6a0647c8c62d730bc90</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>TypeHandler *</type>
      <name>getHandler</name>
      <anchorfile>classComponentBuilder.html</anchorfile>
      <anchor>a386ce324816c401a08344991a90adc9b</anchor>
      <arglist>(int index) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>registerStandardComponentTypes</name>
      <anchorfile>classComponentBuilder.html</anchorfile>
      <anchor>a94f0dd79ea5bc434bce91e1139e8ccc8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setImageProvider</name>
      <anchorfile>classComponentBuilder.html</anchorfile>
      <anchor>a4eac18667dc404ad636bb72d8e836667</anchor>
      <arglist>(ImageProvider *newImageProvider) noexcept</arglist>
    </member>
    <member kind="function">
      <type>ImageProvider *</type>
      <name>getImageProvider</name>
      <anchorfile>classComponentBuilder.html</anchorfile>
      <anchor>a52784294955a92a505ecdff6347d46e3</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateChildComponents</name>
      <anchorfile>classComponentBuilder.html</anchorfile>
      <anchor>ada58c44d9f924f56b43f9552c537f30a</anchor>
      <arglist>(Component &amp;parent, const ValueTree &amp;children)</arglist>
    </member>
    <member kind="variable">
      <type>ValueTree</type>
      <name>state</name>
      <anchorfile>classComponentBuilder.html</anchorfile>
      <anchor>af09fdfb8bb0edf0a6c2f19d5d54563f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Identifier</type>
      <name>idProperty</name>
      <anchorfile>classComponentBuilder.html</anchorfile>
      <anchor>aded44aa66f9f06a544e758dc6391664e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ComponentBuilder::ImageProvider</name>
    <filename>classComponentBuilder_1_1ImageProvider.html</filename>
    <member kind="function">
      <type></type>
      <name>ImageProvider</name>
      <anchorfile>classComponentBuilder_1_1ImageProvider.html</anchorfile>
      <anchor>acdb88d7ecc51ec8e9dc1a57e0268a115</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ImageProvider</name>
      <anchorfile>classComponentBuilder_1_1ImageProvider.html</anchorfile>
      <anchor>a9589cd277ddb9c7d544550a135b025ce</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Image</type>
      <name>getImageForIdentifier</name>
      <anchorfile>classComponentBuilder_1_1ImageProvider.html</anchorfile>
      <anchor>acd32b5882422f627f179b8b560dff043</anchor>
      <arglist>(const var &amp;imageIdentifier)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual var</type>
      <name>getIdentifierForImage</name>
      <anchorfile>classComponentBuilder_1_1ImageProvider.html</anchorfile>
      <anchor>a3bf6e1d1fa78bc1749a623ab4e849339</anchor>
      <arglist>(const Image &amp;image)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ComponentBuilder::TypeHandler</name>
    <filename>classComponentBuilder_1_1TypeHandler.html</filename>
    <member kind="function">
      <type></type>
      <name>TypeHandler</name>
      <anchorfile>classComponentBuilder_1_1TypeHandler.html</anchorfile>
      <anchor>a17ef9f010b9beeb0d4161500fbe1e424</anchor>
      <arglist>(const Identifier &amp;valueTreeType)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TypeHandler</name>
      <anchorfile>classComponentBuilder_1_1TypeHandler.html</anchorfile>
      <anchor>a8f9404ae33ce0f03498f483a61e4183d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ComponentBuilder *</type>
      <name>getBuilder</name>
      <anchorfile>classComponentBuilder_1_1TypeHandler.html</anchorfile>
      <anchor>a783b84cad6d710bdb6fdbdb788be4b0a</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Component *</type>
      <name>addNewComponentFromState</name>
      <anchorfile>classComponentBuilder_1_1TypeHandler.html</anchorfile>
      <anchor>a3472d533654b88bfffa387d51f51d779</anchor>
      <arglist>(const ValueTree &amp;state, Component *parent)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>updateComponentFromState</name>
      <anchorfile>classComponentBuilder_1_1TypeHandler.html</anchorfile>
      <anchor>a8ca3a127f43eef2849300856a2a0017a</anchor>
      <arglist>(Component *component, const ValueTree &amp;state)=0</arglist>
    </member>
    <member kind="variable">
      <type>const Identifier</type>
      <name>type</name>
      <anchorfile>classComponentBuilder_1_1TypeHandler.html</anchorfile>
      <anchor>a16f363c68f0e40e262d15a86b022476c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ComponentDragger</name>
    <filename>classComponentDragger.html</filename>
    <member kind="function">
      <type></type>
      <name>ComponentDragger</name>
      <anchorfile>classComponentDragger.html</anchorfile>
      <anchor>ac702fc282b4d5c9c059b1d5fe73a266d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ComponentDragger</name>
      <anchorfile>classComponentDragger.html</anchorfile>
      <anchor>a6e2b9b526ddff35060fecdbdca4ade30</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>startDraggingComponent</name>
      <anchorfile>classComponentDragger.html</anchorfile>
      <anchor>a3a6ae550729873ec7fa31a48bc79a352</anchor>
      <arglist>(Component *componentToDrag, const MouseEvent &amp;e)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dragComponent</name>
      <anchorfile>classComponentDragger.html</anchorfile>
      <anchor>af2ebcd662f3279b373bfaf035f2c269e</anchor>
      <arglist>(Component *componentToDrag, const MouseEvent &amp;e, ComponentBoundsConstrainer *constrainer)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ComponentListener</name>
    <filename>classComponentListener.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ComponentListener</name>
      <anchorfile>classComponentListener.html</anchorfile>
      <anchor>ab4df3c2c42d7fdb762cef175b2e0ebe2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>componentMovedOrResized</name>
      <anchorfile>classComponentListener.html</anchorfile>
      <anchor>ac5d2c3c7290cbde571403fd5d3112978</anchor>
      <arglist>(Component &amp;component, bool wasMoved, bool wasResized)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>componentBroughtToFront</name>
      <anchorfile>classComponentListener.html</anchorfile>
      <anchor>a68fd2e94bbac54a480ada6b0fdd3c3d4</anchor>
      <arglist>(Component &amp;component)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>componentVisibilityChanged</name>
      <anchorfile>classComponentListener.html</anchorfile>
      <anchor>aaacf63f35f26733d615be2258e57fd69</anchor>
      <arglist>(Component &amp;component)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>componentChildrenChanged</name>
      <anchorfile>classComponentListener.html</anchorfile>
      <anchor>ae03a3583fa9999dc868a2e2c5825bbc2</anchor>
      <arglist>(Component &amp;component)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>componentParentHierarchyChanged</name>
      <anchorfile>classComponentListener.html</anchorfile>
      <anchor>a84b23253fe18f447472652452b1858e6</anchor>
      <arglist>(Component &amp;component)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>componentNameChanged</name>
      <anchorfile>classComponentListener.html</anchorfile>
      <anchor>ae58c494e8e9319d18d552c82f1936336</anchor>
      <arglist>(Component &amp;component)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>componentBeingDeleted</name>
      <anchorfile>classComponentListener.html</anchorfile>
      <anchor>a948f7c07d7dabde3b6cc7a7ceac29cec</anchor>
      <arglist>(Component &amp;component)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ComponentMovementWatcher</name>
    <filename>classComponentMovementWatcher.html</filename>
    <base>ComponentListener</base>
    <member kind="function">
      <type></type>
      <name>ComponentMovementWatcher</name>
      <anchorfile>classComponentMovementWatcher.html</anchorfile>
      <anchor>a1855ca8c74573719a4049d7b8f8033a0</anchor>
      <arglist>(Component *component)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ComponentMovementWatcher</name>
      <anchorfile>classComponentMovementWatcher.html</anchorfile>
      <anchor>ac330cfdf207f4d5d69abb6c1bed3b1e4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>componentMovedOrResized</name>
      <anchorfile>classComponentMovementWatcher.html</anchorfile>
      <anchor>a8aa7d93c182f7d8d0fd07019868da887</anchor>
      <arglist>(bool wasMoved, bool wasResized)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>componentPeerChanged</name>
      <anchorfile>classComponentMovementWatcher.html</anchorfile>
      <anchor>a572c2e568b9df20f1ee51f4f5d8d819f</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>componentVisibilityChanged</name>
      <anchorfile>classComponentMovementWatcher.html</anchorfile>
      <anchor>ab890075a6625aff818080f601f8bec37</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <type>Component *</type>
      <name>getComponent</name>
      <anchorfile>classComponentMovementWatcher.html</anchorfile>
      <anchor>a493a44fe352767269a5d92ea0a1bb902</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>componentParentHierarchyChanged</name>
      <anchorfile>classComponentMovementWatcher.html</anchorfile>
      <anchor>a29e561c10e87a124de646c20b16adcd6</anchor>
      <arglist>(Component &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>componentMovedOrResized</name>
      <anchorfile>classComponentMovementWatcher.html</anchorfile>
      <anchor>a764c9643265fa7d0cd3cb1bcb4fa8b0c</anchor>
      <arglist>(Component &amp;, bool wasMoved, bool wasResized) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>componentBeingDeleted</name>
      <anchorfile>classComponentMovementWatcher.html</anchorfile>
      <anchor>a62fb9c96c645f1198a725abe7fcf1a73</anchor>
      <arglist>(Component &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>componentVisibilityChanged</name>
      <anchorfile>classComponentMovementWatcher.html</anchorfile>
      <anchor>afd3a52764f46853e2ee01d2f145f8d23</anchor>
      <arglist>(Component &amp;) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ComponentPeer</name>
    <filename>classComponentPeer.html</filename>
    <class kind="struct">ComponentPeer::DragInfo</class>
    <member kind="enumeration">
      <type></type>
      <name>StyleFlags</name>
      <anchorfile>classComponentPeer.html</anchorfile>
      <anchor>a94a21f91c61f8211774d6f43243a6ddc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>windowAppearsOnTaskbar</name>
      <anchorfile>classComponentPeer.html</anchorfile>
      <anchor>a94a21f91c61f8211774d6f43243a6ddca99981bc182b3f9f1534008c6be93de80</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>windowIsTemporary</name>
      <anchorfile>classComponentPeer.html</anchorfile>
      <anchor>a94a21f91c61f8211774d6f43243a6ddca8bb0cadf1232d3e8c8ff531c58946087</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>windowIgnoresMouseClicks</name>
      <anchorfile>classComponentPeer.html</anchorfile>
      <anchor>a94a21f91c61f8211774d6f43243a6ddcab8553607b9b28ba46dad559294b7db60</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>windowHasTitleBar</name>
      <anchorfile>classComponentPeer.html</anchorfile>
      <anchor>a94a21f91c61f8211774d6f43243a6ddca071514cf5386f9ed5c544460e94737e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>windowIsResizable</name>
      <anchorfile>classComponentPeer.html</anchorfile>
      <anchor>a94a21f91c61f8211774d6f43243a6ddca3b12da2010eca8a92f6c97fad9a21a6b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>windowHasMinimiseButton</name>
      <anchorfile>classComponentPeer.html</anchorfile>
      <anchor>a94a21f91c61f8211774d6f43243a6ddca01571bf1cfc4e3bc17198b593e64750a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>windowHasMaximiseButton</name>
      <anchorfile>classComponentPeer.html</anchorfile>
      <anchor>a94a21f91c61f8211774d6f43243a6ddcab56ba75cd98f8e630a907c3a8a4836c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>windowHasCloseButton</name>
      <anchorfile>classComponentPeer.html</anchorfile>
      <anchor>a94a21f91c61f8211774d6f43243a6ddca71f089a2bb2af56ccc7bb3eaf0ce46a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>windowHasDropShadow</name>
      <anchorfile>classComponentPeer.html</anchorfile>
      <anchor>a94a21f91c61f8211774d6f43243a6ddcaada172d23a2b21e8c364feb52e39464b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>windowRepaintedExplictly</name>
      <anchorfile>classComponentPeer.html</anchorfile>
      <anchor>a94a21f91c61f8211774d6f43243a6ddcad4f6500107e752f57986bad17e681c43</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>windowIgnoresKeyPresses</name>
      <anchorfile>classComponentPeer.html</anchorfile>
      <anchor>a94a21f91c61f8211774d6f43243a6ddca348f19f81e1e8e929e0bb9932f7007c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>windowIsSemiTransparent</name>
      <anchorfile>classComponentPeer.html</anchorfile>
      <anchor>a94a21f91c61f8211774d6f43243a6ddcaedab89c85c7fe9b5d4c1310b34a9f792</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ComponentPeer</name>
      <anchorfile>classComponentPeer.html</anchorfile>
      <anchor>a65015932f2b6b2777d5da63c267d828d</anchor>
      <arglist>(Component &amp;component, int styleFlags)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ComponentPeer</name>
      <anchorfile>classComponentPeer.html</anchorfile>
      <anchor>a582ed1de9b220645c16c67e0124e18e4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Component &amp;</type>
      <name>getComponent</name>
      <anchorfile>classComponentPeer.html</anchorfile>
      <anchor>a4b8bf87ff4901951dcb5b3f80b24dae2</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getStyleFlags</name>
      <anchorfile>classComponentPeer.html</anchorfile>
      <anchor>a47edec896c72e39f36e1be2bc03659cf</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>uint32</type>
      <name>getUniqueID</name>
      <anchorfile>classComponentPeer.html</anchorfile>
      <anchor>af7797e064a137afcb3f72a35b95da7f6</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void *</type>
      <name>getNativeHandle</name>
      <anchorfile>classComponentPeer.html</anchorfile>
      <anchor>ab873eaa1294b49c6739a04e1edc5e85e</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setVisible</name>
      <anchorfile>classComponentPeer.html</anchorfile>
      <anchor>a45cdae32b498158f5a353f0382b3afa5</anchor>
      <arglist>(bool shouldBeVisible)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setTitle</name>
      <anchorfile>classComponentPeer.html</anchorfile>
      <anchor>a040f5c7bf60ea0081232888d0296fc77</anchor>
      <arglist>(const String &amp;title)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>setDocumentEditedStatus</name>
      <anchorfile>classComponentPeer.html</anchorfile>
      <anchor>a3288b2b0df69ef748513219d0a01f78d</anchor>
      <arglist>(bool edited)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRepresentedFile</name>
      <anchorfile>classComponentPeer.html</anchorfile>
      <anchor>ad1eb29e57a210ad9fb626326c4a97a1a</anchor>
      <arglist>(const File &amp;)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setBounds</name>
      <anchorfile>classComponentPeer.html</anchorfile>
      <anchor>a2cf75982cd01d14d454a982410a576e3</anchor>
      <arglist>(const Rectangle&lt; int &gt; &amp;newBounds, bool isNowFullScreen)=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateBounds</name>
      <anchorfile>classComponentPeer.html</anchorfile>
      <anchor>a9c0ef89ac8f2a9b8906a7dbe3e4cabe7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Rectangle&lt; int &gt;</type>
      <name>getBounds</name>
      <anchorfile>classComponentPeer.html</anchorfile>
      <anchor>a6438873cdc43bf3ccbf9e2b1c3bac4b4</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Point&lt; float &gt;</type>
      <name>localToGlobal</name>
      <anchorfile>classComponentPeer.html</anchorfile>
      <anchor>a2827091ce81d5e16e98a106dc8a0d4ed</anchor>
      <arglist>(Point&lt; float &gt; relativePosition)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Point&lt; float &gt;</type>
      <name>globalToLocal</name>
      <anchorfile>classComponentPeer.html</anchorfile>
      <anchor>a02b5a507ccebbc345d0cbc44a70c003f</anchor>
      <arglist>(Point&lt; float &gt; screenPosition)=0</arglist>
    </member>
    <member kind="function">
      <type>Point&lt; int &gt;</type>
      <name>localToGlobal</name>
      <anchorfile>classComponentPeer.html</anchorfile>
      <anchor>afffc97252a734897283b390069731d0d</anchor>
      <arglist>(Point&lt; int &gt; relativePosition)</arglist>
    </member>
    <member kind="function">
      <type>Point&lt; int &gt;</type>
      <name>globalToLocal</name>
      <anchorfile>classComponentPeer.html</anchorfile>
      <anchor>a398e907e5df527943768c3e7d8343e8a</anchor>
      <arglist>(Point&lt; int &gt; screenPosition)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Rectangle&lt; int &gt;</type>
      <name>localToGlobal</name>
      <anchorfile>classComponentPeer.html</anchorfile>
      <anchor>a74ee249417ab026d71be6cdbaf01716f</anchor>
      <arglist>(const Rectangle&lt; int &gt; &amp;relativePosition)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Rectangle&lt; int &gt;</type>
      <name>globalToLocal</name>
      <anchorfile>classComponentPeer.html</anchorfile>
      <anchor>a1236ece6db4e0363761aa0a1e2e282d9</anchor>
      <arglist>(const Rectangle&lt; int &gt; &amp;screenPosition)</arglist>
    </member>
    <member kind="function">
      <type>Rectangle&lt; int &gt;</type>
      <name>getAreaCoveredBy</name>
      <anchorfile>classComponentPeer.html</anchorfile>
      <anchor>a0d84bfe8728903d3b086e14a4d3e189b</anchor>
      <arglist>(Component &amp;subComponent) const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setMinimised</name>
      <anchorfile>classComponentPeer.html</anchorfile>
      <anchor>aa9732a41b884d1e8021c69908ed72fdb</anchor>
      <arglist>(bool shouldBeMinimised)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isMinimised</name>
      <anchorfile>classComponentPeer.html</anchorfile>
      <anchor>a89063a1ab796e670d56ff660c3de60ed</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setFullScreen</name>
      <anchorfile>classComponentPeer.html</anchorfile>
      <anchor>ae14a735045acf686a945392d29cb1b2b</anchor>
      <arglist>(bool shouldBeFullScreen)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isFullScreen</name>
      <anchorfile>classComponentPeer.html</anchorfile>
      <anchor>a0f649966fb18d9eb06e63ce0bcddf10d</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isKioskMode</name>
      <anchorfile>classComponentPeer.html</anchorfile>
      <anchor>a7d95464bff747c71e5fbbfad88abdd95</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNonFullScreenBounds</name>
      <anchorfile>classComponentPeer.html</anchorfile>
      <anchor>a4e32802a7398d27abea90057523d5d50</anchor>
      <arglist>(const Rectangle&lt; int &gt; &amp;newBounds) noexcept</arglist>
    </member>
    <member kind="function">
      <type>const Rectangle&lt; int &gt; &amp;</type>
      <name>getNonFullScreenBounds</name>
      <anchorfile>classComponentPeer.html</anchorfile>
      <anchor>a665efc4abb9c6c1a4ba71a55d10ee436</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setIcon</name>
      <anchorfile>classComponentPeer.html</anchorfile>
      <anchor>aea319e975bcb86e3727d3b5026ad376c</anchor>
      <arglist>(const Image &amp;newIcon)=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setConstrainer</name>
      <anchorfile>classComponentPeer.html</anchorfile>
      <anchor>a650879e0f1cca550ddb2006ef30d73c7</anchor>
      <arglist>(ComponentBoundsConstrainer *newConstrainer) noexcept</arglist>
    </member>
    <member kind="function">
      <type>ComponentBoundsConstrainer *</type>
      <name>getConstrainer</name>
      <anchorfile>classComponentPeer.html</anchorfile>
      <anchor>a235e5515db305347dbee4483c4ececd5</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>contains</name>
      <anchorfile>classComponentPeer.html</anchorfile>
      <anchor>ac8b799721e421dc4552b42957a9b9b82</anchor>
      <arglist>(Point&lt; int &gt; localPos, bool trueIfInAChildWindow) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual BorderSize&lt; int &gt;</type>
      <name>getFrameSize</name>
      <anchorfile>classComponentPeer.html</anchorfile>
      <anchor>a36afe1e3902e2c112f004d4c4380ceb4</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>handleMovedOrResized</name>
      <anchorfile>classComponentPeer.html</anchorfile>
      <anchor>a8fb507144ba1144b75b63da1075807b9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handleScreenSizeChange</name>
      <anchorfile>classComponentPeer.html</anchorfile>
      <anchor>a4766990f50ee01cdc401a4dd4202a940</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>handlePaint</name>
      <anchorfile>classComponentPeer.html</anchorfile>
      <anchor>a360713977c8a8d38657247b16ff4e836</anchor>
      <arglist>(LowLevelGraphicsContext &amp;contextToPaintTo)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>setAlwaysOnTop</name>
      <anchorfile>classComponentPeer.html</anchorfile>
      <anchor>a0ddc8883fd6b5ece98fb422730bc3fe7</anchor>
      <arglist>(bool alwaysOnTop)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>toFront</name>
      <anchorfile>classComponentPeer.html</anchorfile>
      <anchor>a4e96a24cccbd4f86da8d988d9901615f</anchor>
      <arglist>(bool makeActive)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>toBehind</name>
      <anchorfile>classComponentPeer.html</anchorfile>
      <anchor>afd04fab397a9c85cb7251582d9c6b461</anchor>
      <arglist>(ComponentPeer *other)=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>handleBroughtToFront</name>
      <anchorfile>classComponentPeer.html</anchorfile>
      <anchor>a8f451c2a22a1696443ab724fa62b9708</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isFocused</name>
      <anchorfile>classComponentPeer.html</anchorfile>
      <anchor>a86c19e5dcdc7fbeb932351af522512dd</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>grabFocus</name>
      <anchorfile>classComponentPeer.html</anchorfile>
      <anchor>a2a90a97e43c8ac0b98ea1151f8fde316</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>handleFocusGain</name>
      <anchorfile>classComponentPeer.html</anchorfile>
      <anchor>a7f0f1bf14f3ad8df8372352804d1c54d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>handleFocusLoss</name>
      <anchorfile>classComponentPeer.html</anchorfile>
      <anchor>a9d14cc3ce5afb95b4d8b62b90dbca46e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Component *</type>
      <name>getLastFocusedSubcomponent</name>
      <anchorfile>classComponentPeer.html</anchorfile>
      <anchor>ab57f08253f973580a2eae92e859aa345</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>handleKeyPress</name>
      <anchorfile>classComponentPeer.html</anchorfile>
      <anchor>ac03f1b3bf45aebeca5f45799b1647d59</anchor>
      <arglist>(int keyCode, juce_wchar textCharacter)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>handleKeyPress</name>
      <anchorfile>classComponentPeer.html</anchorfile>
      <anchor>a6935e686c540ad229969695b57df7d7e</anchor>
      <arglist>(const KeyPress &amp;key)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>handleKeyUpOrDown</name>
      <anchorfile>classComponentPeer.html</anchorfile>
      <anchor>a100869544b69c072622bee3015202368</anchor>
      <arglist>(bool isKeyDown)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>handleModifierKeysChange</name>
      <anchorfile>classComponentPeer.html</anchorfile>
      <anchor>af53ee9f555184174fcbdacafa07588fe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>textInputRequired</name>
      <anchorfile>classComponentPeer.html</anchorfile>
      <anchor>a090d949af873ace3f79ab5ed4183b7d1</anchor>
      <arglist>(Point&lt; int &gt; position, TextInputTarget &amp;)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>dismissPendingTextInput</name>
      <anchorfile>classComponentPeer.html</anchorfile>
      <anchor>a279443ef9e2343320577655775e2e827</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>TextInputTarget *</type>
      <name>findCurrentTextInputTarget</name>
      <anchorfile>classComponentPeer.html</anchorfile>
      <anchor>a85355b1df4c5e7fa8692c7a3ede22d9e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>repaint</name>
      <anchorfile>classComponentPeer.html</anchorfile>
      <anchor>a33bcb7a98fd047bd0cae67f0196cb710</anchor>
      <arglist>(const Rectangle&lt; int &gt; &amp;area)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>performAnyPendingRepaintsNow</name>
      <anchorfile>classComponentPeer.html</anchorfile>
      <anchor>af6d87781bea23f08e8f413a2fd772506</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setAlpha</name>
      <anchorfile>classComponentPeer.html</anchorfile>
      <anchor>a1394fc9e9e2c0d059709d55c557c18c3</anchor>
      <arglist>(float newAlpha)=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>handleMouseEvent</name>
      <anchorfile>classComponentPeer.html</anchorfile>
      <anchor>a9eb5d35434130f3b05284f9d9cd5bcd4</anchor>
      <arglist>(int touchIndex, Point&lt; float &gt; positionWithinPeer, ModifierKeys newMods, float pressure, int64 time)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>handleMouseWheel</name>
      <anchorfile>classComponentPeer.html</anchorfile>
      <anchor>a9179664ec98bdcef25bfd640f2b79783</anchor>
      <arglist>(int touchIndex, Point&lt; float &gt; positionWithinPeer, int64 time, const MouseWheelDetails &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>handleMagnifyGesture</name>
      <anchorfile>classComponentPeer.html</anchorfile>
      <anchor>aeaed1ac243485c9a9dbf80501564e0a1</anchor>
      <arglist>(int touchIndex, Point&lt; float &gt; positionWithinPeer, int64 time, float scaleFactor)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>handleUserClosingWindow</name>
      <anchorfile>classComponentPeer.html</anchorfile>
      <anchor>a13b9987266c93f3e73148c7c3e83da64</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>handleDragMove</name>
      <anchorfile>classComponentPeer.html</anchorfile>
      <anchor>a6e44b78f7f2d4f813baffc7577a376f6</anchor>
      <arglist>(const DragInfo &amp;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>handleDragExit</name>
      <anchorfile>classComponentPeer.html</anchorfile>
      <anchor>a531d190202f98b79786f2b2b9885931a</anchor>
      <arglist>(const DragInfo &amp;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>handleDragDrop</name>
      <anchorfile>classComponentPeer.html</anchorfile>
      <anchor>a351c6a2ba20b0dfb55b3c11b7e5bfa9c</anchor>
      <arglist>(const DragInfo &amp;)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual StringArray</type>
      <name>getAvailableRenderingEngines</name>
      <anchorfile>classComponentPeer.html</anchorfile>
      <anchor>a745eab9fcfef9ef16c48298063f75e41</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getCurrentRenderingEngine</name>
      <anchorfile>classComponentPeer.html</anchorfile>
      <anchor>ac864060ffdd62e78ae65cde6740467f6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCurrentRenderingEngine</name>
      <anchorfile>classComponentPeer.html</anchorfile>
      <anchor>a44614a1572c6c8860821f3ab5db12ea5</anchor>
      <arglist>(int index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>getNumPeers</name>
      <anchorfile>classComponentPeer.html</anchorfile>
      <anchor>a33de09ced4025faaaa016af050a67c12</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ComponentPeer *</type>
      <name>getPeer</name>
      <anchorfile>classComponentPeer.html</anchorfile>
      <anchor>af6e6601976f567bc8208cd7e90915ff9</anchor>
      <arglist>(int index) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ComponentPeer *</type>
      <name>getPeerFor</name>
      <anchorfile>classComponentPeer.html</anchorfile>
      <anchor>a3ff525e6b30e9d9376ade1dd731fa5c7</anchor>
      <arglist>(const Component *) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isValidPeer</name>
      <anchorfile>classComponentPeer.html</anchorfile>
      <anchor>ae8e06f4b14b73e562da0b47783a7210e</anchor>
      <arglist>(const ComponentPeer *peer) noexcept</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Component &amp;</type>
      <name>component</name>
      <anchorfile>classComponentPeer.html</anchorfile>
      <anchor>a597272f3a78e8f1d02471692c2e2932a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const int</type>
      <name>styleFlags</name>
      <anchorfile>classComponentPeer.html</anchorfile>
      <anchor>a8322b7cdb134bc52f443cd587ffc3f75</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Rectangle&lt; int &gt;</type>
      <name>lastNonFullscreenBounds</name>
      <anchorfile>classComponentPeer.html</anchorfile>
      <anchor>a2aee1a16331876b88555838cd75caeda</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ComponentBoundsConstrainer *</type>
      <name>constrainer</name>
      <anchorfile>classComponentPeer.html</anchorfile>
      <anchor>a75216f7f562c5bbf8b7758a1198d2744</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ComponentPeer::DragInfo</name>
    <filename>structComponentPeer_1_1DragInfo.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>isEmpty</name>
      <anchorfile>structComponentPeer_1_1DragInfo.html</anchorfile>
      <anchor>a06d2c54a7b17a8ba2136595f86a111f9</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>structComponentPeer_1_1DragInfo.html</anchorfile>
      <anchor>a477efd4543a4b35c8d01b7c2d6db8d34</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="variable">
      <type>StringArray</type>
      <name>files</name>
      <anchorfile>structComponentPeer_1_1DragInfo.html</anchorfile>
      <anchor>addae08e58daceff162d5003254f393ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>String</type>
      <name>text</name>
      <anchorfile>structComponentPeer_1_1DragInfo.html</anchorfile>
      <anchor>a9ef783609b4ae2ca44735a734759ccab</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Point&lt; int &gt;</type>
      <name>position</name>
      <anchorfile>structComponentPeer_1_1DragInfo.html</anchorfile>
      <anchor>ac83d9a513bd9e691d6b8afb1d33f9a3a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ComSmartPtr</name>
    <filename>classComSmartPtr.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>ComSmartPtr</name>
      <anchorfile>classComSmartPtr.html</anchorfile>
      <anchor>a94a101451e514251d8d5c8e74574f816</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ComSmartPtr</name>
      <anchorfile>classComSmartPtr.html</anchorfile>
      <anchor>a7f3deab04cdf5fcd9b1888e7b27e6552</anchor>
      <arglist>(ObjectType *object, bool autoAddRef=true) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ComSmartPtr</name>
      <anchorfile>classComSmartPtr.html</anchorfile>
      <anchor>a47c59a1e248397a65f25a3f5dae85bab</anchor>
      <arglist>(const ComSmartPtr &amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ComSmartPtr</name>
      <anchorfile>classComSmartPtr.html</anchorfile>
      <anchor>a8c0689d94b3828115bd53356809ddf1f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator ObjectType *</name>
      <anchorfile>classComSmartPtr.html</anchorfile>
      <anchor>a0ca6b482b5cf078bad45413b5dd1ab43</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>ObjectType *</type>
      <name>get</name>
      <anchorfile>classComSmartPtr.html</anchorfile>
      <anchor>a28795e6fb20515cf40a9e8804945b1b2</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>ObjectType &amp;</type>
      <name>operator*</name>
      <anchorfile>classComSmartPtr.html</anchorfile>
      <anchor>a287aaeed5a9309ed4a4b354b649804ae</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>ObjectType *</type>
      <name>operator-&gt;</name>
      <anchorfile>classComSmartPtr.html</anchorfile>
      <anchor>a2125e626a98ccb401901c3d3fc326a2f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>ComSmartPtr &amp;</type>
      <name>operator=</name>
      <anchorfile>classComSmartPtr.html</anchorfile>
      <anchor>a678f6aeb897fdc59cd6ac0dbe240eee5</anchor>
      <arglist>(const ComSmartPtr &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>ComSmartPtr &amp;</type>
      <name>operator=</name>
      <anchorfile>classComSmartPtr.html</anchorfile>
      <anchor>a2b4d354dbd68cd6fc4dc34af36ea619c</anchor>
      <arglist>(ObjectType *const newObjectToTakePossessionOf)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classComSmartPtr.html</anchorfile>
      <anchor>ad46f128e1dd7f9adf9067ad79f248fa5</anchor>
      <arglist>(ObjectType *const other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classComSmartPtr.html</anchorfile>
      <anchor>aa98d807d4fec79c0fd0c78edef67112c</anchor>
      <arglist>(ObjectType *const other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>loadFrom</name>
      <anchorfile>classComSmartPtr.html</anchorfile>
      <anchor>a0f26e2e13122d318b118010d0e7afd12</anchor>
      <arglist>(Steinberg::FUnknown *o)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>loadFrom</name>
      <anchorfile>classComSmartPtr.html</anchorfile>
      <anchor>a125cab20f460e11c58683770ebe1b188</anchor>
      <arglist>(Steinberg::IPluginFactory *factory, const Steinberg::TUID &amp;uuid)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ConcertinaPanel</name>
    <filename>classConcertinaPanel.html</filename>
    <base>Component</base>
    <class kind="struct">ConcertinaPanel::LookAndFeelMethods</class>
    <member kind="function">
      <type></type>
      <name>ConcertinaPanel</name>
      <anchorfile>classConcertinaPanel.html</anchorfile>
      <anchor>a2920a5c550d59485bf73088618cf1cb6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ConcertinaPanel</name>
      <anchorfile>classConcertinaPanel.html</anchorfile>
      <anchor>a1453c3ab3121c4e1c7c7d526f8763c33</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addPanel</name>
      <anchorfile>classConcertinaPanel.html</anchorfile>
      <anchor>ac619903630bdc5ee60e1ed5f616955b6</anchor>
      <arglist>(int insertIndex, Component *component, bool takeOwnership)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removePanel</name>
      <anchorfile>classConcertinaPanel.html</anchorfile>
      <anchor>a681cff380bcf2574c7d73ac2b69e6c60</anchor>
      <arglist>(Component *panelComponent)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumPanels</name>
      <anchorfile>classConcertinaPanel.html</anchorfile>
      <anchor>a8b1d01c01a0632e900cdb19e0b2b8d96</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Component *</type>
      <name>getPanel</name>
      <anchorfile>classConcertinaPanel.html</anchorfile>
      <anchor>afc0460a5c2c4db59c7bbdb27ceca6ca5</anchor>
      <arglist>(int index) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setPanelSize</name>
      <anchorfile>classConcertinaPanel.html</anchorfile>
      <anchor>a99abf7cb8b65cc81060113d854aa9735</anchor>
      <arglist>(Component *panelComponent, int newHeight, bool animate)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>expandPanelFully</name>
      <anchorfile>classConcertinaPanel.html</anchorfile>
      <anchor>a597cebdba709414a2f07ef076ee659b1</anchor>
      <arglist>(Component *panelComponent, bool animate)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaximumPanelSize</name>
      <anchorfile>classConcertinaPanel.html</anchorfile>
      <anchor>a5574d0d41278fd51113b82256bfd4453</anchor>
      <arglist>(Component *panelComponent, int maximumSize)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPanelHeaderSize</name>
      <anchorfile>classConcertinaPanel.html</anchorfile>
      <anchor>a70823aaec07b0fc92fcf420c36c2c704</anchor>
      <arglist>(Component *panelComponent, int headerSize)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ConcertinaPanel::LookAndFeelMethods</name>
    <filename>structConcertinaPanel_1_1LookAndFeelMethods.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~LookAndFeelMethods</name>
      <anchorfile>structConcertinaPanel_1_1LookAndFeelMethods.html</anchorfile>
      <anchor>a04f1cc9a5b9eddc9a1518d37bda372ca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>drawConcertinaPanelHeader</name>
      <anchorfile>structConcertinaPanel_1_1LookAndFeelMethods.html</anchorfile>
      <anchor>a23982ffbcf478c1235c9c27f1de076f6</anchor>
      <arglist>(Graphics &amp;, const Rectangle&lt; int &gt; &amp;area, bool isMouseOver, bool isMouseDown, ConcertinaPanel &amp;, Component &amp;)=0</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ContainerDeletePolicy</name>
    <filename>structContainerDeletePolicy.html</filename>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>structContainerDeletePolicy.html</anchorfile>
      <anchor>adff767e9533d0e7bdd8bc914d21eb01a</anchor>
      <arglist>(ObjectType *object)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ControlButton</name>
    <filename>classControlButton.html</filename>
    <class kind="struct">ControlButton::Listener</class>
    <member kind="enumeration">
      <type></type>
      <name>ButtonFunction</name>
      <anchorfile>classControlButton.html</anchorfile>
      <anchor>a891776295057786f99f14631b1aa2794</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>mode</name>
      <anchorfile>classControlButton.html</anchorfile>
      <anchor>a891776295057786f99f14631b1aa2794a4e084a5a84e6736bfd222863f305ec51</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>volume</name>
      <anchorfile>classControlButton.html</anchorfile>
      <anchor>a891776295057786f99f14631b1aa2794a45e67203fbd33289e4cb8d3b5f3b66ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>up</name>
      <anchorfile>classControlButton.html</anchorfile>
      <anchor>a891776295057786f99f14631b1aa2794a4fe52d5d0ca24d13da9a3aa436615c90</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>down</name>
      <anchorfile>classControlButton.html</anchorfile>
      <anchor>a891776295057786f99f14631b1aa2794aa76d350670f78fda703039b0dbf571ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>scale</name>
      <anchorfile>classControlButton.html</anchorfile>
      <anchor>a891776295057786f99f14631b1aa2794ac9b833f510533f89cc26705999ed2bca</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>chord</name>
      <anchorfile>classControlButton.html</anchorfile>
      <anchor>a891776295057786f99f14631b1aa2794ab542ef25973fab8e5c2d404281d0532d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>arp</name>
      <anchorfile>classControlButton.html</anchorfile>
      <anchor>a891776295057786f99f14631b1aa2794adab22b88ae7ce5fe608b846917051771</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>sustain</name>
      <anchorfile>classControlButton.html</anchorfile>
      <anchor>a891776295057786f99f14631b1aa2794a2339a8eba5c6912f6c1958cf3c29f38b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>octave</name>
      <anchorfile>classControlButton.html</anchorfile>
      <anchor>a891776295057786f99f14631b1aa2794a340de50f29503c78ff28749dead05530</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>love</name>
      <anchorfile>classControlButton.html</anchorfile>
      <anchor>a891776295057786f99f14631b1aa2794a628e6207ba0dd67b2b5be3fc96886141</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>click</name>
      <anchorfile>classControlButton.html</anchorfile>
      <anchor>a891776295057786f99f14631b1aa2794ac8335e20c2d77b2a60b7dfe6c95b4144</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>snap</name>
      <anchorfile>classControlButton.html</anchorfile>
      <anchor>a891776295057786f99f14631b1aa2794ac1514f029b82b12f7617e3b81472bea0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>back</name>
      <anchorfile>classControlButton.html</anchorfile>
      <anchor>a891776295057786f99f14631b1aa2794ad37abdb65f944e87e5d1003541f48d3b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>playOrPause</name>
      <anchorfile>classControlButton.html</anchorfile>
      <anchor>a891776295057786f99f14631b1aa2794a74a84bc553f54bd44bf330d76c093056</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>record</name>
      <anchorfile>classControlButton.html</anchorfile>
      <anchor>a891776295057786f99f14631b1aa2794a3534bd78b4a9437ce34c79388cdb7705</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>learn</name>
      <anchorfile>classControlButton.html</anchorfile>
      <anchor>a891776295057786f99f14631b1aa2794a2b68fd776bd51173926290285095e56a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>button0</name>
      <anchorfile>classControlButton.html</anchorfile>
      <anchor>a891776295057786f99f14631b1aa2794a28b50acc49d2f2d93ca099ece4664f35</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>button1</name>
      <anchorfile>classControlButton.html</anchorfile>
      <anchor>a891776295057786f99f14631b1aa2794ab2cd42bc12cd6956719f60c730dadd9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>button2</name>
      <anchorfile>classControlButton.html</anchorfile>
      <anchor>a891776295057786f99f14631b1aa2794acf6c18af99aeadcbf24debd3961687e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>button3</name>
      <anchorfile>classControlButton.html</anchorfile>
      <anchor>a891776295057786f99f14631b1aa2794a0d8ebb329e2edbccae9bdee689ab2acb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>button4</name>
      <anchorfile>classControlButton.html</anchorfile>
      <anchor>a891776295057786f99f14631b1aa2794a77bef3e74cf72400fd3467389d6f5968</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>button5</name>
      <anchorfile>classControlButton.html</anchorfile>
      <anchor>a891776295057786f99f14631b1aa2794ad0ca65d0d12b9e7866cb0e264d159bbf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>button6</name>
      <anchorfile>classControlButton.html</anchorfile>
      <anchor>a891776295057786f99f14631b1aa2794a9fd8cd31141f442f5a8cbf7728ae106e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>button7</name>
      <anchorfile>classControlButton.html</anchorfile>
      <anchor>a891776295057786f99f14631b1aa2794a4acf073fd402d4897b9bb274e9dfcd33</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ControlButton</name>
      <anchorfile>classControlButton.html</anchorfile>
      <anchor>a07dac20b3f600e5d336bafcb75ca210a</anchor>
      <arglist>(Block &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ControlButton</name>
      <anchorfile>classControlButton.html</anchorfile>
      <anchor>a234095a162749b99b9fdc6dc6b62fdb7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ButtonFunction</type>
      <name>getType</name>
      <anchorfile>classControlButton.html</anchorfile>
      <anchor>a41db526f8540d3cb9300ca2b19a45cfd</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual juce::String</type>
      <name>getName</name>
      <anchorfile>classControlButton.html</anchorfile>
      <anchor>a7910c0259c095616fee440a3f8ab7e91</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual float</type>
      <name>getPositionX</name>
      <anchorfile>classControlButton.html</anchorfile>
      <anchor>a242855017a85d57907e3f81909f9200b</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual float</type>
      <name>getPositionY</name>
      <anchorfile>classControlButton.html</anchorfile>
      <anchor>ad8e0276dc931646442eccbd35beef0f6</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>hasLight</name>
      <anchorfile>classControlButton.html</anchorfile>
      <anchor>a3baaa73d0463c515e121f7117ac18b7b</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>setLightColour</name>
      <anchorfile>classControlButton.html</anchorfile>
      <anchor>a689a6ffb7468ce794a4af4f7dc2bda9c</anchor>
      <arglist>(LEDColour newColour)=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addListener</name>
      <anchorfile>classControlButton.html</anchorfile>
      <anchor>acafc27c68996e2c9f1bdd839fed35a51</anchor>
      <arglist>(Listener *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeListener</name>
      <anchorfile>classControlButton.html</anchorfile>
      <anchor>a1f2eafedbd16e1ed8a2fab705b1eeb74</anchor>
      <arglist>(Listener *)</arglist>
    </member>
    <member kind="variable">
      <type>Block &amp;</type>
      <name>block</name>
      <anchorfile>classControlButton.html</anchorfile>
      <anchor>a59d4781c4364a7e78d20b31c58be0fb0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>juce::ListenerList&lt; Listener &gt;</type>
      <name>listeners</name>
      <anchorfile>classControlButton.html</anchorfile>
      <anchor>a855a438e559c21cee293ed824d138b26</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ControlButton::Listener</name>
    <filename>structControlButton_1_1Listener.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Listener</name>
      <anchorfile>structControlButton_1_1Listener.html</anchorfile>
      <anchor>af04fc7cfc79b008ff01f8a3ad2105204</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>buttonPressed</name>
      <anchorfile>structControlButton_1_1Listener.html</anchorfile>
      <anchor>aa324925eb2c059abd9b967c9ba98cd95</anchor>
      <arglist>(ControlButton &amp;, Block::Timestamp)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>buttonReleased</name>
      <anchorfile>structControlButton_1_1Listener.html</anchorfile>
      <anchor>ac327990c17308209cfa919d70f7623b3</anchor>
      <arglist>(ControlButton &amp;, Block::Timestamp)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CoreAudioFormat</name>
    <filename>classCoreAudioFormat.html</filename>
    <base>AudioFormat</base>
    <member kind="function">
      <type></type>
      <name>CoreAudioFormat</name>
      <anchorfile>classCoreAudioFormat.html</anchorfile>
      <anchor>ad59f427b0fbe2381bb1361933192dcf4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~CoreAudioFormat</name>
      <anchorfile>classCoreAudioFormat.html</anchorfile>
      <anchor>abd1d707bd707ae31f786662dc4091c4a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Array&lt; int &gt;</type>
      <name>getPossibleSampleRates</name>
      <anchorfile>classCoreAudioFormat.html</anchorfile>
      <anchor>a5a88b656a2ad53b34df4ed922e47c6fa</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>Array&lt; int &gt;</type>
      <name>getPossibleBitDepths</name>
      <anchorfile>classCoreAudioFormat.html</anchorfile>
      <anchor>a29da60258e5e3730bdaf61ad300ce083</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>canDoStereo</name>
      <anchorfile>classCoreAudioFormat.html</anchorfile>
      <anchor>ab328df6a0e06c1d339c7d1e7302e946f</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>canDoMono</name>
      <anchorfile>classCoreAudioFormat.html</anchorfile>
      <anchor>a857f61e6d8f8d19c0b725c21fe4a7cb0</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>AudioFormatReader *</type>
      <name>createReaderFor</name>
      <anchorfile>classCoreAudioFormat.html</anchorfile>
      <anchor>a26a5b69457d419d57af037a2ac3d0f87</anchor>
      <arglist>(InputStream *, bool deleteStreamIfOpeningFails) override</arglist>
    </member>
    <member kind="function">
      <type>AudioFormatWriter *</type>
      <name>createWriterFor</name>
      <anchorfile>classCoreAudioFormat.html</anchorfile>
      <anchor>a66c5b799a9db9b77f4066bfd77695d61</anchor>
      <arglist>(OutputStream *, double sampleRateToUse, unsigned int numberOfChannels, int bitsPerSample, const StringPairArray &amp;metadataValues, int qualityOptionIndex) override</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char *const</type>
      <name>midiDataBase64</name>
      <anchorfile>classCoreAudioFormat.html</anchorfile>
      <anchor>a6a78852cc234c7fc83ab18c92662feb6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char *const</type>
      <name>tempo</name>
      <anchorfile>classCoreAudioFormat.html</anchorfile>
      <anchor>a0b50e5a99a47c7c0af11092fd9e5fe7e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char *const</type>
      <name>timeSig</name>
      <anchorfile>classCoreAudioFormat.html</anchorfile>
      <anchor>aa0205a8ba3d4148ba0b2b7b58631d943</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char *const</type>
      <name>keySig</name>
      <anchorfile>classCoreAudioFormat.html</anchorfile>
      <anchor>a523344d08328d28bc32436f1ad472013</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CPlusPlusCodeTokeniser</name>
    <filename>classCPlusPlusCodeTokeniser.html</filename>
    <base>CodeTokeniser</base>
    <member kind="enumeration">
      <type></type>
      <name>TokenType</name>
      <anchorfile>classCPlusPlusCodeTokeniser.html</anchorfile>
      <anchor>a757e9a2599a0e15b536754f99aeb0257</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>tokenType_error</name>
      <anchorfile>classCPlusPlusCodeTokeniser.html</anchorfile>
      <anchor>a757e9a2599a0e15b536754f99aeb0257a96ec7cd93a85eb494ff478b2531ca6dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>tokenType_comment</name>
      <anchorfile>classCPlusPlusCodeTokeniser.html</anchorfile>
      <anchor>a757e9a2599a0e15b536754f99aeb0257a7052a5bb03e836c04d591110776f201e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>tokenType_keyword</name>
      <anchorfile>classCPlusPlusCodeTokeniser.html</anchorfile>
      <anchor>a757e9a2599a0e15b536754f99aeb0257a07505083d25d615f0147afdebc315523</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>tokenType_operator</name>
      <anchorfile>classCPlusPlusCodeTokeniser.html</anchorfile>
      <anchor>a757e9a2599a0e15b536754f99aeb0257a539da9fffe49f181c22173b47d57fdb2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>tokenType_identifier</name>
      <anchorfile>classCPlusPlusCodeTokeniser.html</anchorfile>
      <anchor>a757e9a2599a0e15b536754f99aeb0257a34e6424d83c728aabcae3b322c236b52</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>tokenType_integer</name>
      <anchorfile>classCPlusPlusCodeTokeniser.html</anchorfile>
      <anchor>a757e9a2599a0e15b536754f99aeb0257a2e52758c8cb50924da51149bc5b4c755</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>tokenType_float</name>
      <anchorfile>classCPlusPlusCodeTokeniser.html</anchorfile>
      <anchor>a757e9a2599a0e15b536754f99aeb0257a1998f95edfbf5e071de632e2e2b26994</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>tokenType_string</name>
      <anchorfile>classCPlusPlusCodeTokeniser.html</anchorfile>
      <anchor>a757e9a2599a0e15b536754f99aeb0257aa21476a798b64fd4fef6961e258df548</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>tokenType_bracket</name>
      <anchorfile>classCPlusPlusCodeTokeniser.html</anchorfile>
      <anchor>a757e9a2599a0e15b536754f99aeb0257a290668e5b4167e765b849c977c697384</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>tokenType_punctuation</name>
      <anchorfile>classCPlusPlusCodeTokeniser.html</anchorfile>
      <anchor>a757e9a2599a0e15b536754f99aeb0257aa2ac45a2c81f2d202df78cb9ab01c311</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>tokenType_preprocessor</name>
      <anchorfile>classCPlusPlusCodeTokeniser.html</anchorfile>
      <anchor>a757e9a2599a0e15b536754f99aeb0257a0f86221be32d125f9827b9439c545702</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CPlusPlusCodeTokeniser</name>
      <anchorfile>classCPlusPlusCodeTokeniser.html</anchorfile>
      <anchor>a469ad5768ee42ef25442571d4b6ab5e9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~CPlusPlusCodeTokeniser</name>
      <anchorfile>classCPlusPlusCodeTokeniser.html</anchorfile>
      <anchor>ab8ea32248dbb8039233da1006a9cd6f8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>readNextToken</name>
      <anchorfile>classCPlusPlusCodeTokeniser.html</anchorfile>
      <anchor>a2e3caa24a249809d10244737f4c08f6a</anchor>
      <arglist>(CodeDocument::Iterator &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>CodeEditorComponent::ColourScheme</type>
      <name>getDefaultColourScheme</name>
      <anchorfile>classCPlusPlusCodeTokeniser.html</anchorfile>
      <anchor>aaf182fcb2371143ea3709b4f966b3e8a</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isReservedKeyword</name>
      <anchorfile>classCPlusPlusCodeTokeniser.html</anchorfile>
      <anchor>aaeae35807604c0f8941f4ed821e07642</anchor>
      <arglist>(const String &amp;token) noexcept</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>CppTokeniserFunctions</name>
    <filename>structCppTokeniserFunctions.html</filename>
    <class kind="struct">CppTokeniserFunctions::StringIterator</class>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isIdentifierStart</name>
      <anchorfile>structCppTokeniserFunctions.html</anchorfile>
      <anchor>a13364f0e29c090497fa4b9971c55ed09</anchor>
      <arglist>(const juce_wchar c) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isIdentifierBody</name>
      <anchorfile>structCppTokeniserFunctions.html</anchorfile>
      <anchor>a9a1c08ad4564d75d4226a8df6abd5500</anchor>
      <arglist>(const juce_wchar c) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isReservedKeyword</name>
      <anchorfile>structCppTokeniserFunctions.html</anchorfile>
      <anchor>aa3b33648bc0a23789c3e53221cfb09d7</anchor>
      <arglist>(String::CharPointerType token, const int tokenLength) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>parseIdentifier</name>
      <anchorfile>structCppTokeniserFunctions.html</anchorfile>
      <anchor>aea69e827e335f754cb4e9c9c46a07ac5</anchor>
      <arglist>(Iterator &amp;source) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>skipNumberSuffix</name>
      <anchorfile>structCppTokeniserFunctions.html</anchorfile>
      <anchor>abd84f7c1b1b5df145e88819cf0ccd0d0</anchor>
      <arglist>(Iterator &amp;source)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isHexDigit</name>
      <anchorfile>structCppTokeniserFunctions.html</anchorfile>
      <anchor>acc6491811e5ae41ee52840b0d6576b1d</anchor>
      <arglist>(const juce_wchar c) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>parseHexLiteral</name>
      <anchorfile>structCppTokeniserFunctions.html</anchorfile>
      <anchor>adba962733aa284e276817e8e0bd4c30a</anchor>
      <arglist>(Iterator &amp;source) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isOctalDigit</name>
      <anchorfile>structCppTokeniserFunctions.html</anchorfile>
      <anchor>a3fea938ab1c80d3dae78df5e95dcb42b</anchor>
      <arglist>(const juce_wchar c) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>parseOctalLiteral</name>
      <anchorfile>structCppTokeniserFunctions.html</anchorfile>
      <anchor>af3b1bfdb9719b6547c92d40e28f7ee1d</anchor>
      <arglist>(Iterator &amp;source) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isDecimalDigit</name>
      <anchorfile>structCppTokeniserFunctions.html</anchorfile>
      <anchor>ae9b9ca8de1201e8e9c96d37a93879f79</anchor>
      <arglist>(const juce_wchar c) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>parseDecimalLiteral</name>
      <anchorfile>structCppTokeniserFunctions.html</anchorfile>
      <anchor>aac227ebdba41534a0bba3b399d1d542d</anchor>
      <arglist>(Iterator &amp;source) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>parseFloatLiteral</name>
      <anchorfile>structCppTokeniserFunctions.html</anchorfile>
      <anchor>a5915487dcb8ba2aa54ac733299cc732d</anchor>
      <arglist>(Iterator &amp;source) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>parseNumber</name>
      <anchorfile>structCppTokeniserFunctions.html</anchorfile>
      <anchor>aa7d38384c966aae354723f534dae49d6</anchor>
      <arglist>(Iterator &amp;source)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>skipQuotedString</name>
      <anchorfile>structCppTokeniserFunctions.html</anchorfile>
      <anchor>a8c64db97036cde3a9774945c39361ea5</anchor>
      <arglist>(Iterator &amp;source) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>skipComment</name>
      <anchorfile>structCppTokeniserFunctions.html</anchorfile>
      <anchor>acc20b010695f2ea7cba36da65c606219</anchor>
      <arglist>(Iterator &amp;source) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>skipPreprocessorLine</name>
      <anchorfile>structCppTokeniserFunctions.html</anchorfile>
      <anchor>a905f50dc9cdd44e54772c3ab69538338</anchor>
      <arglist>(Iterator &amp;source) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>skipIfNextCharMatches</name>
      <anchorfile>structCppTokeniserFunctions.html</anchorfile>
      <anchor>a537b688c16a211d4826bcccf338aad79</anchor>
      <arglist>(Iterator &amp;source, const juce_wchar c) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>skipIfNextCharMatches</name>
      <anchorfile>structCppTokeniserFunctions.html</anchorfile>
      <anchor>a6a7fb9d8843cda49644b5c9c0e7ea352</anchor>
      <arglist>(Iterator &amp;source, const juce_wchar c1, const juce_wchar c2) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>readNextToken</name>
      <anchorfile>structCppTokeniserFunctions.html</anchorfile>
      <anchor>a0052d25ba400cf3e01f5f5bc95e03ce4</anchor>
      <arglist>(Iterator &amp;source)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>writeEscapeChars</name>
      <anchorfile>structCppTokeniserFunctions.html</anchorfile>
      <anchor>aec2241fa18131c4d828d1a953f942b32</anchor>
      <arglist>(OutputStream &amp;out, const char *utf8, const int numBytesToRead, const int maxCharsOnLine, const bool breakAtNewLines, const bool replaceSingleQuotes, const bool allowStringBreaks)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static String</type>
      <name>addEscapeChars</name>
      <anchorfile>structCppTokeniserFunctions.html</anchorfile>
      <anchor>a0af79aca7fefba85524844c4b201803a</anchor>
      <arglist>(const String &amp;s)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>CppTokeniserFunctions::StringIterator</name>
    <filename>structCppTokeniserFunctions_1_1StringIterator.html</filename>
    <member kind="function">
      <type></type>
      <name>StringIterator</name>
      <anchorfile>structCppTokeniserFunctions_1_1StringIterator.html</anchorfile>
      <anchor>a089130ee2986c1244d60db647c46e8a8</anchor>
      <arglist>(const String &amp;s) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StringIterator</name>
      <anchorfile>structCppTokeniserFunctions_1_1StringIterator.html</anchorfile>
      <anchor>ac7bb997127826fdc3d28e5f814dc105c</anchor>
      <arglist>(String::CharPointerType s) noexcept</arglist>
    </member>
    <member kind="function">
      <type>juce_wchar</type>
      <name>nextChar</name>
      <anchorfile>structCppTokeniserFunctions_1_1StringIterator.html</anchorfile>
      <anchor>ad59265b3d4b07ab77064446c23afa127</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>juce_wchar</type>
      <name>peekNextChar</name>
      <anchorfile>structCppTokeniserFunctions_1_1StringIterator.html</anchorfile>
      <anchor>a9e2e1628f424c225d6a6af64d10b8b47</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>skip</name>
      <anchorfile>structCppTokeniserFunctions_1_1StringIterator.html</anchorfile>
      <anchor>a6f0be3a6790cd989e58773263851b68c</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>skipWhitespace</name>
      <anchorfile>structCppTokeniserFunctions_1_1StringIterator.html</anchorfile>
      <anchor>a595bfe927e3e8a2f50adc510c7eee7f3</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>skipToEndOfLine</name>
      <anchorfile>structCppTokeniserFunctions_1_1StringIterator.html</anchorfile>
      <anchor>a859ddc9ab65b8a98c86a2c3074415085</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEOF</name>
      <anchorfile>structCppTokeniserFunctions_1_1StringIterator.html</anchorfile>
      <anchor>aaf1d54f7436605fc2869ffa53a467ec2</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="variable">
      <type>String::CharPointerType</type>
      <name>t</name>
      <anchorfile>structCppTokeniserFunctions_1_1StringIterator.html</anchorfile>
      <anchor>a720692c1a876c915654d05df723fe77e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>numChars</name>
      <anchorfile>structCppTokeniserFunctions_1_1StringIterator.html</anchorfile>
      <anchor>a87c5f347ec1afcfa2594b15892002c99</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CriticalSection</name>
    <filename>classCriticalSection.html</filename>
    <member kind="typedef">
      <type>GenericScopedLock&lt; CriticalSection &gt;</type>
      <name>ScopedLockType</name>
      <anchorfile>classCriticalSection.html</anchorfile>
      <anchor>a586568fcce3a9c6a0f1547518fd6ddb6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GenericScopedUnlock&lt; CriticalSection &gt;</type>
      <name>ScopedUnlockType</name>
      <anchorfile>classCriticalSection.html</anchorfile>
      <anchor>a69d6b613f2638fbae341cfd06df478c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GenericScopedTryLock&lt; CriticalSection &gt;</type>
      <name>ScopedTryLockType</name>
      <anchorfile>classCriticalSection.html</anchorfile>
      <anchor>a745e5e36d8c6a33ea1fcbbfa2fff00a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CriticalSection</name>
      <anchorfile>classCriticalSection.html</anchorfile>
      <anchor>aaa4d9ea166cd7ce8ef369a7934e26b97</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~CriticalSection</name>
      <anchorfile>classCriticalSection.html</anchorfile>
      <anchor>ae1ed672427d129fb5102459354d33422</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enter</name>
      <anchorfile>classCriticalSection.html</anchorfile>
      <anchor>a20c4b0714061cc488d220b1b5a77aa1c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>tryEnter</name>
      <anchorfile>classCriticalSection.html</anchorfile>
      <anchor>a2c12101da7ebf8455de49652f377d313</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>exit</name>
      <anchorfile>classCriticalSection.html</anchorfile>
      <anchor>a856bbcc18f0367ae231f7277d9cb33f8</anchor>
      <arglist>() const noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CustomTypeface</name>
    <filename>classCustomTypeface.html</filename>
    <base>Typeface</base>
    <member kind="function">
      <type></type>
      <name>CustomTypeface</name>
      <anchorfile>classCustomTypeface.html</anchorfile>
      <anchor>ab55fd08f0ab46d6121f7a3947c69440e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CustomTypeface</name>
      <anchorfile>classCustomTypeface.html</anchorfile>
      <anchor>aa08aa5740c635671d23b4005387dd073</anchor>
      <arglist>(InputStream &amp;serialisedTypefaceStream)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~CustomTypeface</name>
      <anchorfile>classCustomTypeface.html</anchorfile>
      <anchor>a7de69e6a3862d73f61061d10c5996255</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classCustomTypeface.html</anchorfile>
      <anchor>aae23b3b2c7f54b633376361462363ece</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCharacteristics</name>
      <anchorfile>classCustomTypeface.html</anchorfile>
      <anchor>a7da2c0383a43ca73649aae749c3acc4f</anchor>
      <arglist>(const String &amp;fontFamily, float ascent, bool isBold, bool isItalic, juce_wchar defaultCharacter) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCharacteristics</name>
      <anchorfile>classCustomTypeface.html</anchorfile>
      <anchor>a0d2c31c8caaaec95299512e05988ed0a</anchor>
      <arglist>(const String &amp;fontFamily, const String &amp;fontStyle, float ascent, juce_wchar defaultCharacter) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addGlyph</name>
      <anchorfile>classCustomTypeface.html</anchorfile>
      <anchor>a09d793a31978d29a3b274014d5787754</anchor>
      <arglist>(juce_wchar character, const Path &amp;path, float width) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addKerningPair</name>
      <anchorfile>classCustomTypeface.html</anchorfile>
      <anchor>ababca5dbbddb414180c1ebae0e639992</anchor>
      <arglist>(juce_wchar char1, juce_wchar char2, float extraAmount) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addGlyphsFromOtherTypeface</name>
      <anchorfile>classCustomTypeface.html</anchorfile>
      <anchor>a94de59c3b010a1f68ce3681174a6a173</anchor>
      <arglist>(Typeface &amp;typefaceToCopy, juce_wchar characterStartIndex, int numCharacters) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>writeToStream</name>
      <anchorfile>classCustomTypeface.html</anchorfile>
      <anchor>ab5f4f1bed4814397104d57cab666ca1a</anchor>
      <arglist>(OutputStream &amp;outputStream)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getAscent</name>
      <anchorfile>classCustomTypeface.html</anchorfile>
      <anchor>aa1780a81a84a15eb379ff48ad8414666</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getDescent</name>
      <anchorfile>classCustomTypeface.html</anchorfile>
      <anchor>a8f556d4d8fcdae01b95b5f2324beba6f</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getHeightToPointsFactor</name>
      <anchorfile>classCustomTypeface.html</anchorfile>
      <anchor>a043e644515aa4200fac16b4bacd4076c</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getStringWidth</name>
      <anchorfile>classCustomTypeface.html</anchorfile>
      <anchor>a977541b6e41057ea3bcf50bc69d81da5</anchor>
      <arglist>(const String &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getGlyphPositions</name>
      <anchorfile>classCustomTypeface.html</anchorfile>
      <anchor>a447fb8eeb7df5ba6fa1439176c185919</anchor>
      <arglist>(const String &amp;, Array&lt; int &gt; &amp;glyphs, Array&lt; float &gt; &amp;xOffsets) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getOutlineForGlyph</name>
      <anchorfile>classCustomTypeface.html</anchorfile>
      <anchor>ad7c9243dab6ddc767350a617f1142b81</anchor>
      <arglist>(int glyphNumber, Path &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>EdgeTable *</type>
      <name>getEdgeTableForGlyph</name>
      <anchorfile>classCustomTypeface.html</anchorfile>
      <anchor>a7d2203069a352d8f9fbb24ecdfd56923</anchor>
      <arglist>(int glyphNumber, const AffineTransform &amp;, float fontHeight) override</arglist>
    </member>
    <member kind="function">
      <type>const String &amp;</type>
      <name>getName</name>
      <anchorfile>classTypeface.html</anchorfile>
      <anchor>ab1996880b3e86b59828bf070902f47f9</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const String &amp;</type>
      <name>getStyle</name>
      <anchorfile>classTypeface.html</anchorfile>
      <anchor>aca511c989e285e5a338f4f00d1d567ce</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Typeface</name>
      <anchorfile>classTypeface.html</anchorfile>
      <anchor>ae3f6929dec75f834504478b6ab33dcbd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isSuitableForFont</name>
      <anchorfile>classTypeface.html</anchorfile>
      <anchor>abb54f4e30a1e6ac3a1106c3fc20ce01b</anchor>
      <arglist>(const Font &amp;) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isHinted</name>
      <anchorfile>classTypeface.html</anchorfile>
      <anchor>a0a0c1ba0a02a01e032c8f2fef2efe371</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyVerticalHintingTransform</name>
      <anchorfile>classTypeface.html</anchorfile>
      <anchor>a5920548d7f8a4811a66b0e6745de14ea</anchor>
      <arglist>(float fontHeight, Path &amp;path)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>loadGlyphIfPossible</name>
      <anchorfile>classCustomTypeface.html</anchorfile>
      <anchor>a3d46ee607d4e0e1a7eb2a67f670fd9e5</anchor>
      <arglist>(juce_wchar characterNeeded)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Typeface</name>
      <anchorfile>classTypeface.html</anchorfile>
      <anchor>aeff4239f1343ce0f80fb30c6bd52ed07</anchor>
      <arglist>(const String &amp;name, const String &amp;style) noexcept</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>juce_wchar</type>
      <name>defaultCharacter</name>
      <anchorfile>classCustomTypeface.html</anchorfile>
      <anchor>a253a2ab299747b043f623ddbdd354e15</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>float</type>
      <name>ascent</name>
      <anchorfile>classCustomTypeface.html</anchorfile>
      <anchor>ab5c74224ec102b6990481b658d189ac4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>String</type>
      <name>name</name>
      <anchorfile>classTypeface.html</anchorfile>
      <anchor>adf2787d392df086aa81c1a831d1ca3f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>String</type>
      <name>style</name>
      <anchorfile>classTypeface.html</anchorfile>
      <anchor>a4169174330e29936cda2170a51a36df8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ReferenceCountedObjectPtr&lt; Typeface &gt;</type>
      <name>Ptr</name>
      <anchorfile>classTypeface.html</anchorfile>
      <anchor>a13053be679c87b7a72963e9ce60e34c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Ptr</type>
      <name>createSystemTypefaceFor</name>
      <anchorfile>classTypeface.html</anchorfile>
      <anchor>a2ce51562cc51437352c4d47777185f35</anchor>
      <arglist>(const Font &amp;font)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Ptr</type>
      <name>createSystemTypefaceFor</name>
      <anchorfile>classTypeface.html</anchorfile>
      <anchor>a67bf5a42f6227ba6f5c9af2a23b0bb48</anchor>
      <arglist>(const void *fontFileData, size_t fontFileDataSize)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setTypefaceCacheSize</name>
      <anchorfile>classTypeface.html</anchorfile>
      <anchor>a873c4f902b5fbfa920a4ecd3dff7ee44</anchor>
      <arglist>(int numFontsToCache)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>clearTypefaceCache</name>
      <anchorfile>classTypeface.html</anchorfile>
      <anchor>a3f47a4db006dc9d8b3aaabbd35aebb78</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>scanFolderForFonts</name>
      <anchorfile>classTypeface.html</anchorfile>
      <anchor>afcf68edfb330cb72c684b0f8b2c94ba8</anchor>
      <arglist>(const File &amp;folder)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static Ptr</type>
      <name>getFallbackTypeface</name>
      <anchorfile>classTypeface.html</anchorfile>
      <anchor>a867faec01233e12690a6135a6ff08feb</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DatagramSocket</name>
    <filename>classDatagramSocket.html</filename>
    <member kind="function">
      <type></type>
      <name>DatagramSocket</name>
      <anchorfile>classDatagramSocket.html</anchorfile>
      <anchor>af2fea92879c30d16256752076c5473e4</anchor>
      <arglist>(bool enableBroadcasting=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~DatagramSocket</name>
      <anchorfile>classDatagramSocket.html</anchorfile>
      <anchor>a67749ad62429e5a9aac2b2d9faaff89e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>bindToPort</name>
      <anchorfile>classDatagramSocket.html</anchorfile>
      <anchor>a94c29fad4912e3dfc17cb8824de3d548</anchor>
      <arglist>(int localPortNumber)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>bindToPort</name>
      <anchorfile>classDatagramSocket.html</anchorfile>
      <anchor>abab3319908ade4467169d260b7029056</anchor>
      <arglist>(int localPortNumber, const String &amp;localAddress)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getBoundPort</name>
      <anchorfile>classDatagramSocket.html</anchorfile>
      <anchor>af292685919385420af0a4f6cdadcd61d</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getRawSocketHandle</name>
      <anchorfile>classDatagramSocket.html</anchorfile>
      <anchor>af1e8a49c016a60b10e733aff662c3fa3</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>waitUntilReady</name>
      <anchorfile>classDatagramSocket.html</anchorfile>
      <anchor>a773fbe9241d1c57e4ced45317f876b58</anchor>
      <arglist>(bool readyForReading, int timeoutMsecs) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>read</name>
      <anchorfile>classDatagramSocket.html</anchorfile>
      <anchor>aa6d0fb81186112263c99e88b498f58ed</anchor>
      <arglist>(void *destBuffer, int maxBytesToRead, bool blockUntilSpecifiedAmountHasArrived)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>read</name>
      <anchorfile>classDatagramSocket.html</anchorfile>
      <anchor>a2f0e21a081e3dcb1b341a63a9a0d1fe5</anchor>
      <arglist>(void *destBuffer, int maxBytesToRead, bool blockUntilSpecifiedAmountHasArrived, String &amp;senderIPAddress, int &amp;senderPortNumber)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>write</name>
      <anchorfile>classDatagramSocket.html</anchorfile>
      <anchor>a24df3d574d38f78256551c1f58d58be1</anchor>
      <arglist>(const String &amp;remoteHostname, int remotePortNumber, const void *sourceBuffer, int numBytesToWrite)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>shutdown</name>
      <anchorfile>classDatagramSocket.html</anchorfile>
      <anchor>a9c4d7433fc0275c0cbeff650f53d3eb0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>joinMulticast</name>
      <anchorfile>classDatagramSocket.html</anchorfile>
      <anchor>a2b2bed0e6b34949f0e0cdaa9c0a96f62</anchor>
      <arglist>(const String &amp;multicastIPAddress)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>leaveMulticast</name>
      <anchorfile>classDatagramSocket.html</anchorfile>
      <anchor>aaa785e39e8bf7ec660e0dbe6a2ea3c1a</anchor>
      <arglist>(const String &amp;multicastIPAddress)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setEnablePortReuse</name>
      <anchorfile>classDatagramSocket.html</anchorfile>
      <anchor>a5578663686a9ea899e0ce4390222479e</anchor>
      <arglist>(bool enabled)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Decibels</name>
    <filename>classDecibels.html</filename>
    <member kind="function" static="yes">
      <type>static Type</type>
      <name>decibelsToGain</name>
      <anchorfile>classDecibels.html</anchorfile>
      <anchor>a4bc3a6fd3f361e9c64bd055ba8fa1238</anchor>
      <arglist>(const Type decibels, const Type minusInfinityDb=(Type) defaultMinusInfinitydB)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Type</type>
      <name>gainToDecibels</name>
      <anchorfile>classDecibels.html</anchorfile>
      <anchor>afa3f66fd6a7e63c04b2d0f7b956e1fba</anchor>
      <arglist>(const Type gain, const Type minusInfinityDb=(Type) defaultMinusInfinitydB)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static String</type>
      <name>toString</name>
      <anchorfile>classDecibels.html</anchorfile>
      <anchor>af054ac41adc5abc38c3bb536ac33b292</anchor>
      <arglist>(const Type decibels, const int decimalPlaces=2, const Type minusInfinityDb=(Type) defaultMinusInfinitydB)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DefaultElementComparator</name>
    <filename>classDefaultElementComparator.html</filename>
    <templarg>ElementType</templarg>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>compareElements</name>
      <anchorfile>classDefaultElementComparator.html</anchorfile>
      <anchor>a271d017e79a70c56794e516871ab5c87</anchor>
      <arglist>(ParameterType first, ParameterType second)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DefaultHashFunctions</name>
    <filename>structDefaultHashFunctions.html</filename>
    <member kind="function">
      <type>int</type>
      <name>generateHash</name>
      <anchorfile>structDefaultHashFunctions.html</anchorfile>
      <anchor>a08236fd3fe2de023bd296a5e3f2cbfa8</anchor>
      <arglist>(const int key, const int upperLimit) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>generateHash</name>
      <anchorfile>structDefaultHashFunctions.html</anchorfile>
      <anchor>a7d45d0ec81f3165216661b65cdb32485</anchor>
      <arglist>(const int64 key, const int upperLimit) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>generateHash</name>
      <anchorfile>structDefaultHashFunctions.html</anchorfile>
      <anchor>a2c0594ed0cfaaaa20e76954c623f11a7</anchor>
      <arglist>(const String &amp;key, const int upperLimit) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>generateHash</name>
      <anchorfile>structDefaultHashFunctions.html</anchorfile>
      <anchor>a7c7f2a8dc8021b7a61ac12d559a0f7d7</anchor>
      <arglist>(const var &amp;key, const int upperLimit) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>generateHash</name>
      <anchorfile>structDefaultHashFunctions.html</anchorfile>
      <anchor>a2ab386ceab53ce4b3e4a1bc3b8bec2d0</anchor>
      <arglist>(const void *key, const int upperLimit) const noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DeletedAtShutdown</name>
    <filename>classDeletedAtShutdown.html</filename>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>deleteAll</name>
      <anchorfile>classDeletedAtShutdown.html</anchorfile>
      <anchor>a72ea5ccbe21f14172dbcfdcb0f3fe4e5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>DeletedAtShutdown</name>
      <anchorfile>classDeletedAtShutdown.html</anchorfile>
      <anchor>ad03334a429dfa1c465dd8ad52fb94190</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~DeletedAtShutdown</name>
      <anchorfile>classDeletedAtShutdown.html</anchorfile>
      <anchor>af9065f0567544fbbb8966a8bef264873</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Desktop</name>
    <filename>classDesktop.html</filename>
    <base protection="private">DeletedAtShutdown</base>
    <base protection="private">Timer</base>
    <base protection="private">AsyncUpdater</base>
    <class kind="class">Desktop::Displays</class>
    <member kind="enumeration">
      <type></type>
      <name>DisplayOrientation</name>
      <anchorfile>classDesktop.html</anchorfile>
      <anchor>a5e06947d2d1295bdb6f5c4fab7beb98a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>upright</name>
      <anchorfile>classDesktop.html</anchorfile>
      <anchor>a5e06947d2d1295bdb6f5c4fab7beb98aaced7253546b0f2e73e4dd08bcb60c9f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>upsideDown</name>
      <anchorfile>classDesktop.html</anchorfile>
      <anchor>a5e06947d2d1295bdb6f5c4fab7beb98aa5820a6ffe2f7f012a16a1bd57e304b91</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>rotatedClockwise</name>
      <anchorfile>classDesktop.html</anchorfile>
      <anchor>a5e06947d2d1295bdb6f5c4fab7beb98aae1e0629de1668ef16f700b7278fd0f04</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>rotatedAntiClockwise</name>
      <anchorfile>classDesktop.html</anchorfile>
      <anchor>a5e06947d2d1295bdb6f5c4fab7beb98aab48176789b5764aae6aae6a393916712</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>allOrientations</name>
      <anchorfile>classDesktop.html</anchorfile>
      <anchor>a5e06947d2d1295bdb6f5c4fab7beb98aacb260a5600c352a166edd836a2305a06</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getMouseButtonClickCounter</name>
      <anchorfile>classDesktop.html</anchorfile>
      <anchor>aedc0ee3a5d19297c0163bc5a160b2ee4</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getMouseWheelMoveCounter</name>
      <anchorfile>classDesktop.html</anchorfile>
      <anchor>aca2d34fe675f71a0ba3a7335fd169e0e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addGlobalMouseListener</name>
      <anchorfile>classDesktop.html</anchorfile>
      <anchor>add528b1597a432f2e4cb9b10314fc210</anchor>
      <arglist>(MouseListener *listener)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeGlobalMouseListener</name>
      <anchorfile>classDesktop.html</anchorfile>
      <anchor>a6051a5203c21377974a1f65c0acd4acc</anchor>
      <arglist>(MouseListener *listener)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addFocusChangeListener</name>
      <anchorfile>classDesktop.html</anchorfile>
      <anchor>a0db6055049b8268af05e51e55f377586</anchor>
      <arglist>(FocusChangeListener *listener)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeFocusChangeListener</name>
      <anchorfile>classDesktop.html</anchorfile>
      <anchor>af428140675315bed1cec0494ec70007a</anchor>
      <arglist>(FocusChangeListener *listener)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setKioskModeComponent</name>
      <anchorfile>classDesktop.html</anchorfile>
      <anchor>a8fa4033714b5a9cd0714c9b9633b3366</anchor>
      <arglist>(Component *componentToUse, bool allowMenusAndBars=true)</arglist>
    </member>
    <member kind="function">
      <type>Component *</type>
      <name>getKioskModeComponent</name>
      <anchorfile>classDesktop.html</anchorfile>
      <anchor>a3f09558177477a50a1fa092871f4aab1</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumComponents</name>
      <anchorfile>classDesktop.html</anchorfile>
      <anchor>a74081737d1c862fdcce6bb2eb24901f3</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Component *</type>
      <name>getComponent</name>
      <anchorfile>classDesktop.html</anchorfile>
      <anchor>a1ad83bce07a7197742d334e204c4c194</anchor>
      <arglist>(int index) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Component *</type>
      <name>findComponentAt</name>
      <anchorfile>classDesktop.html</anchorfile>
      <anchor>add5f26846a67075522535c285c644a06</anchor>
      <arglist>(Point&lt; int &gt; screenPosition) const </arglist>
    </member>
    <member kind="function">
      <type>ComponentAnimator &amp;</type>
      <name>getAnimator</name>
      <anchorfile>classDesktop.html</anchorfile>
      <anchor>a80aea7a339408d22a84d447d3cd95755</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>LookAndFeel &amp;</type>
      <name>getDefaultLookAndFeel</name>
      <anchorfile>classDesktop.html</anchorfile>
      <anchor>ad88ac93bb8d5b101d6cb63c268d66e1b</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDefaultLookAndFeel</name>
      <anchorfile>classDesktop.html</anchorfile>
      <anchor>a726a6fd8120c6b64a85ca382a9208c67</anchor>
      <arglist>(LookAndFeel *newDefaultLookAndFeel)</arglist>
    </member>
    <member kind="function">
      <type>const Array&lt; MouseInputSource &gt; &amp;</type>
      <name>getMouseSources</name>
      <anchorfile>classDesktop.html</anchorfile>
      <anchor>ae7fe79c5fa5ffc7d06354fdbea1e5bde</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumMouseSources</name>
      <anchorfile>classDesktop.html</anchorfile>
      <anchor>a7dc6e7f8c3c94ffa20584305d51133d2</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>MouseInputSource *</type>
      <name>getMouseSource</name>
      <anchorfile>classDesktop.html</anchorfile>
      <anchor>acab109fe14b5337c5a3129c746ba17e5</anchor>
      <arglist>(int index) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>MouseInputSource</type>
      <name>getMainMouseSource</name>
      <anchorfile>classDesktop.html</anchorfile>
      <anchor>a56b73809a55ec618201661f163ff00dc</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumDraggingMouseSources</name>
      <anchorfile>classDesktop.html</anchorfile>
      <anchor>ab58864358ece4bdfea451efc7a308379</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>MouseInputSource *</type>
      <name>getDraggingMouseSource</name>
      <anchorfile>classDesktop.html</anchorfile>
      <anchor>ac2c86b073c213abc4380a8abbbf33379</anchor>
      <arglist>(int index) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>beginDragAutoRepeat</name>
      <anchorfile>classDesktop.html</anchorfile>
      <anchor>a484c8460c95255150aef4dbe1909ae9f</anchor>
      <arglist>(int millisecondsBetweenCallbacks)</arglist>
    </member>
    <member kind="function">
      <type>DisplayOrientation</type>
      <name>getCurrentOrientation</name>
      <anchorfile>classDesktop.html</anchorfile>
      <anchor>a14dd6704af2eb6b6e374509e4ba5a33e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOrientationsEnabled</name>
      <anchorfile>classDesktop.html</anchorfile>
      <anchor>a4c4e91683ca8ffef6724650b90b17293</anchor>
      <arglist>(int allowedOrientations)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isOrientationEnabled</name>
      <anchorfile>classDesktop.html</anchorfile>
      <anchor>a501649988905cfa81e1a5798b2bc5572</anchor>
      <arglist>(DisplayOrientation orientation) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const Displays &amp;</type>
      <name>getDisplays</name>
      <anchorfile>classDesktop.html</anchorfile>
      <anchor>aaf44cad873d28c06e2d22c9ee05387c3</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGlobalScaleFactor</name>
      <anchorfile>classDesktop.html</anchorfile>
      <anchor>a1a10b63e1495aac17b5848335c6ea4cf</anchor>
      <arglist>(float newScaleFactor) noexcept</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getGlobalScaleFactor</name>
      <anchorfile>classDesktop.html</anchorfile>
      <anchor>a9d3762d46b652cd0249e6845229f3b4c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Desktop &amp;JUCE_CALLTYPE</type>
      <name>getInstance</name>
      <anchorfile>classDesktop.html</anchorfile>
      <anchor>a15ebe474aab368cff35578b8f7bec6c1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Point&lt; int &gt;</type>
      <name>getMousePosition</name>
      <anchorfile>classDesktop.html</anchorfile>
      <anchor>a3a0aecaa5e9ec284dbe1f7108f51eb0b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setMousePosition</name>
      <anchorfile>classDesktop.html</anchorfile>
      <anchor>ab8561129265571ab55b2b5a50faecf19</anchor>
      <arglist>(Point&lt; int &gt; newPosition)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Point&lt; int &gt;</type>
      <name>getLastMouseDownPosition</name>
      <anchorfile>classDesktop.html</anchorfile>
      <anchor>a876e731f99d9a6646c7fc5722e421baf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setScreenSaverEnabled</name>
      <anchorfile>classDesktop.html</anchorfile>
      <anchor>a12b63736985b72fc78bebe7bf9903597</anchor>
      <arglist>(bool isEnabled)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isScreenSaverEnabled</name>
      <anchorfile>classDesktop.html</anchorfile>
      <anchor>ac49ada613f5989b8fe36c22cf19bf517</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>canUseSemiTransparentWindows</name>
      <anchorfile>classDesktop.html</anchorfile>
      <anchor>af15bdf2abd33c022d88f9335a5b5d098</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isOSXDarkModeActive</name>
      <anchorfile>classDesktop.html</anchorfile>
      <anchor>a97962db3a6f6fd50252428bb58a63eb6</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Desktop::Displays</name>
    <filename>classDesktop_1_1Displays.html</filename>
    <class kind="struct">Desktop::Displays::Display</class>
    <member kind="function">
      <type>const Display &amp;</type>
      <name>getMainDisplay</name>
      <anchorfile>classDesktop_1_1Displays.html</anchorfile>
      <anchor>ab330cfff5471512312e7017472276c8d</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const Display &amp;</type>
      <name>getDisplayContaining</name>
      <anchorfile>classDesktop_1_1Displays.html</anchorfile>
      <anchor>a8406cb34748e8731b9acd925cbc843f3</anchor>
      <arglist>(Point&lt; int &gt; position) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>RectangleList&lt; int &gt;</type>
      <name>getRectangleList</name>
      <anchorfile>classDesktop_1_1Displays.html</anchorfile>
      <anchor>a16ea53693b429eee1f033123cbbb1ec6</anchor>
      <arglist>(bool userAreasOnly) const </arglist>
    </member>
    <member kind="function">
      <type>Rectangle&lt; int &gt;</type>
      <name>getTotalBounds</name>
      <anchorfile>classDesktop_1_1Displays.html</anchorfile>
      <anchor>a14668006cd63864b5ef4328cfa222f77</anchor>
      <arglist>(bool userAreasOnly) const </arglist>
    </member>
    <member kind="variable">
      <type>Array&lt; Display &gt;</type>
      <name>displays</name>
      <anchorfile>classDesktop_1_1Displays.html</anchorfile>
      <anchor>af3bca6783a93f00366a068ea04c661b4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Desktop::Displays::Display</name>
    <filename>structDesktop_1_1Displays_1_1Display.html</filename>
    <member kind="variable">
      <type>Rectangle&lt; int &gt;</type>
      <name>userArea</name>
      <anchorfile>structDesktop_1_1Displays_1_1Display.html</anchorfile>
      <anchor>a7b9601b6a4c7de297099ff4e3b8651ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Rectangle&lt; int &gt;</type>
      <name>totalArea</name>
      <anchorfile>structDesktop_1_1Displays_1_1Display.html</anchorfile>
      <anchor>a90732ffebb1b91769b95400dec70f74f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>scale</name>
      <anchorfile>structDesktop_1_1Displays_1_1Display.html</anchorfile>
      <anchor>a1fa73b56829f21284aaf3ba95d64c227</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>dpi</name>
      <anchorfile>structDesktop_1_1Displays_1_1Display.html</anchorfile>
      <anchor>acfea525d7724fa5b442648346bff2af0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>isMain</name>
      <anchorfile>structDesktop_1_1Displays_1_1Display.html</anchorfile>
      <anchor>a392d751b64069c4b4a212e2f07f1766a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DeviceConnection</name>
    <filename>structDeviceConnection.html</filename>
    <member kind="variable">
      <type>TopologyIndex</type>
      <name>device1</name>
      <anchorfile>structDeviceConnection.html</anchorfile>
      <anchor>a0832d4787d77695bc677d8788a368b34</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TopologyIndex</type>
      <name>device2</name>
      <anchorfile>structDeviceConnection.html</anchorfile>
      <anchor>a7204d54fa1322115a828084254ab158a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ConnectorPort</type>
      <name>port1</name>
      <anchorfile>structDeviceConnection.html</anchorfile>
      <anchor>a543601890d30c218c0a616159b865a80</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ConnectorPort</type>
      <name>port2</name>
      <anchorfile>structDeviceConnection.html</anchorfile>
      <anchor>a5b035970cd94bbd08083d046b9bcbcd4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DeviceStatus</name>
    <filename>structDeviceStatus.html</filename>
    <member kind="variable">
      <type>BlockSerialNumber</type>
      <name>serialNumber</name>
      <anchorfile>structDeviceStatus.html</anchorfile>
      <anchor>a4321d8758904e8ebb07b4b5aa599f2c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TopologyIndex</type>
      <name>index</name>
      <anchorfile>structDeviceStatus.html</anchorfile>
      <anchor>a73e708651456bb3be5271bde1a08399f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>BatteryLevel</type>
      <name>batteryLevel</name>
      <anchorfile>structDeviceStatus.html</anchorfile>
      <anchor>a7d5ac14a84c93cb60fed1259d7f1bdc6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>BatteryCharging</type>
      <name>batteryCharging</name>
      <anchorfile>structDeviceStatus.html</anchorfile>
      <anchor>aac9f242216c5f7e5217b65eef63d7fcc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DialogWindow</name>
    <filename>classDialogWindow.html</filename>
    <base>DocumentWindow</base>
    <class kind="struct">DialogWindow::LaunchOptions</class>
    <member kind="function">
      <type></type>
      <name>DialogWindow</name>
      <anchorfile>classDialogWindow.html</anchorfile>
      <anchor>a30c37c6a684edc50b8b63ec72ddd2793</anchor>
      <arglist>(const String &amp;name, Colour backgroundColour, bool escapeKeyTriggersCloseButton, bool addToDesktop=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~DialogWindow</name>
      <anchorfile>classDialogWindow.html</anchorfile>
      <anchor>a59d3601f7622f31ef928377fc1789eda</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>escapeKeyPressed</name>
      <anchorfile>classDialogWindow.html</anchorfile>
      <anchor>a95060bcf703d4e8f2fa6b88370981ed2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DocumentWindow</name>
      <anchorfile>classDocumentWindow.html</anchorfile>
      <anchor>a0b97fb8d09a99701368b33445bc0cf94</anchor>
      <arglist>(const String &amp;name, Colour backgroundColour, int requiredButtons, bool addToDesktop=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~DocumentWindow</name>
      <anchorfile>classDocumentWindow.html</anchorfile>
      <anchor>a2a142203d2559ee92d5cac99dfa1c265</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setName</name>
      <anchorfile>classDocumentWindow.html</anchorfile>
      <anchor>aac6b784f048c3a84e444009dfbf87441</anchor>
      <arglist>(const String &amp;newName) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIcon</name>
      <anchorfile>classDocumentWindow.html</anchorfile>
      <anchor>ae2270940d36586af89359045bdd9c844</anchor>
      <arglist>(const Image &amp;imageToUse)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTitleBarHeight</name>
      <anchorfile>classDocumentWindow.html</anchorfile>
      <anchor>a02567fc3120d918ac5d7929813c1a56b</anchor>
      <arglist>(int newHeight)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getTitleBarHeight</name>
      <anchorfile>classDocumentWindow.html</anchorfile>
      <anchor>abac134f2107fabc94ed2751a158c1a9f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTitleBarButtonsRequired</name>
      <anchorfile>classDocumentWindow.html</anchorfile>
      <anchor>af9549ecc64c2b7e91161a49c44b6ae17</anchor>
      <arglist>(int requiredButtons, bool positionTitleBarButtonsOnLeft)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTitleBarTextCentred</name>
      <anchorfile>classDocumentWindow.html</anchorfile>
      <anchor>af85b7ce283221be0bc17015b8c1bc1aa</anchor>
      <arglist>(bool textShouldBeCentred)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMenuBar</name>
      <anchorfile>classDocumentWindow.html</anchorfile>
      <anchor>a4a808defbae48839786354a350eaf7ea</anchor>
      <arglist>(MenuBarModel *menuBarModel, int menuBarHeight=0)</arglist>
    </member>
    <member kind="function">
      <type>Component *</type>
      <name>getMenuBarComponent</name>
      <anchorfile>classDocumentWindow.html</anchorfile>
      <anchor>a5c89d66d32f7487b5ec556318030b918</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMenuBarComponent</name>
      <anchorfile>classDocumentWindow.html</anchorfile>
      <anchor>adcb1654739565bad5aec52c143d2cd52</anchor>
      <arglist>(Component *newMenuBarComponent)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>closeButtonPressed</name>
      <anchorfile>classDocumentWindow.html</anchorfile>
      <anchor>a71c46283a6fe63f2cad49d01997e16d5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>minimiseButtonPressed</name>
      <anchorfile>classDocumentWindow.html</anchorfile>
      <anchor>a939d52f9986f46aa8929c69e02258acc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>maximiseButtonPressed</name>
      <anchorfile>classDocumentWindow.html</anchorfile>
      <anchor>a1d2ce7145c2e6da062e22589543ea037</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Button *</type>
      <name>getCloseButton</name>
      <anchorfile>classDocumentWindow.html</anchorfile>
      <anchor>a9bf5e16ce71e573dbd8d06641db4c221</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Button *</type>
      <name>getMinimiseButton</name>
      <anchorfile>classDocumentWindow.html</anchorfile>
      <anchor>af94690223f336bd56361c64210a15149</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Button *</type>
      <name>getMaximiseButton</name>
      <anchorfile>classDocumentWindow.html</anchorfile>
      <anchor>a9441c9bc7085750342b70faa7df0a229</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ResizableWindow</name>
      <anchorfile>classResizableWindow.html</anchorfile>
      <anchor>a72a45d75d7e14d157e01143969e51361</anchor>
      <arglist>(const String &amp;name, bool addToDesktop)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ResizableWindow</name>
      <anchorfile>classResizableWindow.html</anchorfile>
      <anchor>a16e8710f342007dbcb7c7d4171043f0c</anchor>
      <arglist>(const String &amp;name, Colour backgroundColour, bool addToDesktop)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ResizableWindow</name>
      <anchorfile>classResizableWindow.html</anchorfile>
      <anchor>a9aa0f14f04a2985bab7ce5287229b0e9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Colour</type>
      <name>getBackgroundColour</name>
      <anchorfile>classResizableWindow.html</anchorfile>
      <anchor>a11317b014f89275843625d142d86d8c7</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBackgroundColour</name>
      <anchorfile>classResizableWindow.html</anchorfile>
      <anchor>a720ac4d5feda66c0171db0031ae33151</anchor>
      <arglist>(Colour newColour)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setResizable</name>
      <anchorfile>classResizableWindow.html</anchorfile>
      <anchor>a538709f0111ad32b05d858a511bcd5be</anchor>
      <arglist>(bool shouldBeResizable, bool useBottomRightCornerResizer)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isResizable</name>
      <anchorfile>classResizableWindow.html</anchorfile>
      <anchor>afa786ee064166bebe3df0843ad96b979</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setResizeLimits</name>
      <anchorfile>classResizableWindow.html</anchorfile>
      <anchor>a6afa3b9ddf1cd9f7fa546692074dd781</anchor>
      <arglist>(int newMinimumWidth, int newMinimumHeight, int newMaximumWidth, int newMaximumHeight) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDraggable</name>
      <anchorfile>classResizableWindow.html</anchorfile>
      <anchor>adede3d77c744014ab574422978de16f2</anchor>
      <arglist>(bool shouldBeDraggable) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isDraggable</name>
      <anchorfile>classResizableWindow.html</anchorfile>
      <anchor>a655542b0fb7e1dd2284b3bb1cf9aa190</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>ComponentBoundsConstrainer *</type>
      <name>getConstrainer</name>
      <anchorfile>classResizableWindow.html</anchorfile>
      <anchor>a49512bcc9fdb5df06d2412e6c7e17e72</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setConstrainer</name>
      <anchorfile>classResizableWindow.html</anchorfile>
      <anchor>ae386b9e5c905a04cc36cabba1798a444</anchor>
      <arglist>(ComponentBoundsConstrainer *newConstrainer)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBoundsConstrained</name>
      <anchorfile>classResizableWindow.html</anchorfile>
      <anchor>a0578c4bfbfea01f222025e73bbdbf0ac</anchor>
      <arglist>(const Rectangle&lt; int &gt; &amp;newBounds)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isFullScreen</name>
      <anchorfile>classResizableWindow.html</anchorfile>
      <anchor>a4436633b8bfef5d4bd45d05edad4d296</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFullScreen</name>
      <anchorfile>classResizableWindow.html</anchorfile>
      <anchor>a08a0f1863417c80e6494d113a5c1fbd2</anchor>
      <arglist>(bool shouldBeFullScreen)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isMinimised</name>
      <anchorfile>classResizableWindow.html</anchorfile>
      <anchor>add27363b06fa6704db1bcfb99313bf0c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMinimised</name>
      <anchorfile>classResizableWindow.html</anchorfile>
      <anchor>a8b3174e4cad2a85ff1405a0c22e12148</anchor>
      <arglist>(bool shouldMinimise)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isKioskMode</name>
      <anchorfile>classResizableWindow.html</anchorfile>
      <anchor>a99fef2e75cbb9a53401a2a711a5ff2a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>getWindowStateAsString</name>
      <anchorfile>classResizableWindow.html</anchorfile>
      <anchor>af5120046ac8f889a3252f1afd9d0043e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>restoreWindowStateFromString</name>
      <anchorfile>classResizableWindow.html</anchorfile>
      <anchor>a462e5efd2f570fd65b0822c0ea96889b</anchor>
      <arglist>(const String &amp;previousState)</arglist>
    </member>
    <member kind="function">
      <type>Component *</type>
      <name>getContentComponent</name>
      <anchorfile>classResizableWindow.html</anchorfile>
      <anchor>a3e00e6a9b730e6081c6ea33b24c47420</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setContentOwned</name>
      <anchorfile>classResizableWindow.html</anchorfile>
      <anchor>a97940f07b6014bac018cbe9330abc769</anchor>
      <arglist>(Component *newContentComponent, bool resizeToFitWhenContentChangesSize)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setContentNonOwned</name>
      <anchorfile>classResizableWindow.html</anchorfile>
      <anchor>ad6c44adc91ca926e9c0a6ecb4cf1bfa7</anchor>
      <arglist>(Component *newContentComponent, bool resizeToFitWhenContentChangesSize)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearContentComponent</name>
      <anchorfile>classResizableWindow.html</anchorfile>
      <anchor>a44edd8f80203fd6a44459df7ae953979</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setContentComponentSize</name>
      <anchorfile>classResizableWindow.html</anchorfile>
      <anchor>a756f7d17ab2e38e2733f2db0d4670f81</anchor>
      <arglist>(int width, int height)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual BorderSize&lt; int &gt;</type>
      <name>getBorderThickness</name>
      <anchorfile>classResizableWindow.html</anchorfile>
      <anchor>a2c94adad7cb9693aa69e55d897cb1c1e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual BorderSize&lt; int &gt;</type>
      <name>getContentComponentBorder</name>
      <anchorfile>classResizableWindow.html</anchorfile>
      <anchor>a3aaa41a555bc21daa301b11c620fb7b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>JUCE_DEPRECATED</name>
      <anchorfile>classResizableWindow.html</anchorfile>
      <anchor>abb26a60ce095d44d5a54639c977cb29a</anchor>
      <arglist>(void setContentComponent(Component *newContentComponent, bool deleteOldOne=true, bool resizeToFit=false))</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>showDialog</name>
      <anchorfile>classDialogWindow.html</anchorfile>
      <anchor>a7ecd3420abf6bc06791e3f6c0da815b4</anchor>
      <arglist>(const String &amp;dialogTitle, Component *contentComponent, Component *componentToCentreAround, Colour backgroundColour, bool escapeKeyTriggersCloseButton, bool shouldBeResizable=false, bool useBottomRightCornerResizer=false)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>showModalDialog</name>
      <anchorfile>classDialogWindow.html</anchorfile>
      <anchor>a4e7934b53c5a76398cefb697d709a251</anchor>
      <arglist>(const String &amp;dialogTitle, Component *contentComponent, Component *componentToCentreAround, Colour backgroundColour, bool escapeKeyTriggersCloseButton, bool shouldBeResizable=false, bool useBottomRightCornerResizer=false)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>resized</name>
      <anchorfile>classDialogWindow.html</anchorfile>
      <anchor>a495890fb9139e539f86190c7319da3ea</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>keyPressed</name>
      <anchorfile>classDialogWindow.html</anchorfile>
      <anchor>aeb7649c419d4b031fd4967bfff3d09e0</anchor>
      <arglist>(const KeyPress &amp;) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>paint</name>
      <anchorfile>classResizableWindow.html</anchorfile>
      <anchor>a97b64ce86b466f26b489f533946b42cc</anchor>
      <arglist>(Graphics &amp;) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>moved</name>
      <anchorfile>classResizableWindow.html</anchorfile>
      <anchor>acfb2ced15e476e78f9a71b0214414798</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>resized</name>
      <anchorfile>classResizableWindow.html</anchorfile>
      <anchor>ae42aa18209b1d14e8441dce5b991cb07</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>mouseDown</name>
      <anchorfile>classResizableWindow.html</anchorfile>
      <anchor>a061e907019fb970e205063572e3cf933</anchor>
      <arglist>(const MouseEvent &amp;) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>mouseDrag</name>
      <anchorfile>classResizableWindow.html</anchorfile>
      <anchor>a88f1ec87e42f7bea6ba4e7d8dd68737e</anchor>
      <arglist>(const MouseEvent &amp;) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>mouseUp</name>
      <anchorfile>classResizableWindow.html</anchorfile>
      <anchor>a9fa6ed7d0c4ad350327816c559b3468b</anchor>
      <arglist>(const MouseEvent &amp;) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>lookAndFeelChanged</name>
      <anchorfile>classResizableWindow.html</anchorfile>
      <anchor>ae314150a8f5a5aab3ba5383679c83b0d</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>childBoundsChanged</name>
      <anchorfile>classResizableWindow.html</anchorfile>
      <anchor>acdb8203a8fa46c5e4cb5c2e57dcd00c0</anchor>
      <arglist>(Component *) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>parentSizeChanged</name>
      <anchorfile>classResizableWindow.html</anchorfile>
      <anchor>a912b4576f868723bfe87bf7dbd68ed5d</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>visibilityChanged</name>
      <anchorfile>classResizableWindow.html</anchorfile>
      <anchor>ad295a65851924b0008f27a8292b33bc0</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>activeWindowStatusChanged</name>
      <anchorfile>classResizableWindow.html</anchorfile>
      <anchor>a1ba8f2eebc7abb19987ce91e956f8858</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>getDesktopWindowStyleFlags</name>
      <anchorfile>classResizableWindow.html</anchorfile>
      <anchor>ab05ffc354603142610b126166ac9e1f5</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>TitleBarButtons</name>
      <anchorfile>classDocumentWindow.html</anchorfile>
      <anchor>a104d68bc145157c6ce79169a36fc3c31</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>minimiseButton</name>
      <anchorfile>classDocumentWindow.html</anchorfile>
      <anchor>a104d68bc145157c6ce79169a36fc3c31a4200920dc08e7ecfe1c8b90444d99098</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>maximiseButton</name>
      <anchorfile>classDocumentWindow.html</anchorfile>
      <anchor>a104d68bc145157c6ce79169a36fc3c31a84fe4bbe25739fe241f2e6128e7a51c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>closeButton</name>
      <anchorfile>classDocumentWindow.html</anchorfile>
      <anchor>a104d68bc145157c6ce79169a36fc3c31a80e87a70beeecc78adc89517fa1df978</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>allButtons</name>
      <anchorfile>classDocumentWindow.html</anchorfile>
      <anchor>a104d68bc145157c6ce79169a36fc3c31af4a9b49869cebf7e8cecaf7f6dd93420</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>ColourIds</name>
      <anchorfile>classDocumentWindow.html</anchorfile>
      <anchor>a227c6ab86245d481d4dbe21893cb028c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>textColourId</name>
      <anchorfile>classDocumentWindow.html</anchorfile>
      <anchor>a227c6ab86245d481d4dbe21893cb028ca7d2f8fdfae3820cd074ebd598cf220ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>ColourIds</name>
      <anchorfile>classResizableWindow.html</anchorfile>
      <anchor>a9488716cf84a6e72cf3397fa83933c79</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>backgroundColourId</name>
      <anchorfile>classResizableWindow.html</anchorfile>
      <anchor>a9488716cf84a6e72cf3397fa83933c79a95839e67b4ccccc75988fc0ed38113a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ScopedPointer&lt; ResizableCornerComponent &gt;</type>
      <name>resizableCorner</name>
      <anchorfile>classResizableWindow.html</anchorfile>
      <anchor>a99d4f438dba8740a09fbeb832450013f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ScopedPointer&lt; ResizableBorderComponent &gt;</type>
      <name>resizableBorder</name>
      <anchorfile>classResizableWindow.html</anchorfile>
      <anchor>a4d0b53ec83fe41125b1223bb92171543</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DialogWindow::LaunchOptions</name>
    <filename>structDialogWindow_1_1LaunchOptions.html</filename>
    <member kind="function">
      <type></type>
      <name>LaunchOptions</name>
      <anchorfile>structDialogWindow_1_1LaunchOptions.html</anchorfile>
      <anchor>a801f59545b377317060adddc492ba4bf</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>DialogWindow *</type>
      <name>launchAsync</name>
      <anchorfile>structDialogWindow_1_1LaunchOptions.html</anchorfile>
      <anchor>ade02f0c6ea259f9a37ab15474159ca11</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>DialogWindow *</type>
      <name>create</name>
      <anchorfile>structDialogWindow_1_1LaunchOptions.html</anchorfile>
      <anchor>abb32a7e6c59102c97d73cbbaaff02ce5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>runModal</name>
      <anchorfile>structDialogWindow_1_1LaunchOptions.html</anchorfile>
      <anchor>a22a6deb2f2f4b87a0190fdc4a0025d82</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>String</type>
      <name>dialogTitle</name>
      <anchorfile>structDialogWindow_1_1LaunchOptions.html</anchorfile>
      <anchor>ac9b19e68e10b4d64b2bb9c37b460afbf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Colour</type>
      <name>dialogBackgroundColour</name>
      <anchorfile>structDialogWindow_1_1LaunchOptions.html</anchorfile>
      <anchor>a301462bfb1591667490f392113225083</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>OptionalScopedPointer&lt; Component &gt;</type>
      <name>content</name>
      <anchorfile>structDialogWindow_1_1LaunchOptions.html</anchorfile>
      <anchor>afb8d6fb02aec1a20e787de456556067a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Component *</type>
      <name>componentToCentreAround</name>
      <anchorfile>structDialogWindow_1_1LaunchOptions.html</anchorfile>
      <anchor>a42f82232312ecb770ab5bf9fa03936a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>escapeKeyTriggersCloseButton</name>
      <anchorfile>structDialogWindow_1_1LaunchOptions.html</anchorfile>
      <anchor>a65c71187b9ebcfa96056aa1bbc77534a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>useNativeTitleBar</name>
      <anchorfile>structDialogWindow_1_1LaunchOptions.html</anchorfile>
      <anchor>a8a67e5ca3f075102c1dc40aee20856b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>resizable</name>
      <anchorfile>structDialogWindow_1_1LaunchOptions.html</anchorfile>
      <anchor>a07bc81d41581d3d5bc1d05be03a5b4b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>useBottomRightCornerResizer</name>
      <anchorfile>structDialogWindow_1_1LaunchOptions.html</anchorfile>
      <anchor>af76a62b12b7dd7e42d6e8374462b5906</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DirectoryContentsDisplayComponent</name>
    <filename>classDirectoryContentsDisplayComponent.html</filename>
    <member kind="enumeration">
      <type></type>
      <name>ColourIds</name>
      <anchorfile>classDirectoryContentsDisplayComponent.html</anchorfile>
      <anchor>ab57cde73f0efaaa4b3d8a1d6c2af358b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>highlightColourId</name>
      <anchorfile>classDirectoryContentsDisplayComponent.html</anchorfile>
      <anchor>ab57cde73f0efaaa4b3d8a1d6c2af358bac53e42ed088fe6d66eb46b51f458f8ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>textColourId</name>
      <anchorfile>classDirectoryContentsDisplayComponent.html</anchorfile>
      <anchor>ab57cde73f0efaaa4b3d8a1d6c2af358bac9c2c1e7103616f5665dfc53e27cc0e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DirectoryContentsDisplayComponent</name>
      <anchorfile>classDirectoryContentsDisplayComponent.html</anchorfile>
      <anchor>a77753970a52f8b388bb7142f662d82c0</anchor>
      <arglist>(DirectoryContentsList &amp;listToShow)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~DirectoryContentsDisplayComponent</name>
      <anchorfile>classDirectoryContentsDisplayComponent.html</anchorfile>
      <anchor>a1aa97c3b2cb8cea18a072867070e749d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getNumSelectedFiles</name>
      <anchorfile>classDirectoryContentsDisplayComponent.html</anchorfile>
      <anchor>a17067d141e43635f80942d7a2d527563</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual File</type>
      <name>getSelectedFile</name>
      <anchorfile>classDirectoryContentsDisplayComponent.html</anchorfile>
      <anchor>a90137f0e012e2e2d40d0ce1e5cc3711c</anchor>
      <arglist>(int index) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>deselectAllFiles</name>
      <anchorfile>classDirectoryContentsDisplayComponent.html</anchorfile>
      <anchor>a3441ee30eddf973d2bb57dddf7ca0c0b</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>scrollToTop</name>
      <anchorfile>classDirectoryContentsDisplayComponent.html</anchorfile>
      <anchor>aa87b6c665ef3c4cd54f6bcfafe601aa4</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setSelectedFile</name>
      <anchorfile>classDirectoryContentsDisplayComponent.html</anchorfile>
      <anchor>a5e9eff1e74d231bcff622f09d80265d2</anchor>
      <arglist>(const File &amp;)=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addListener</name>
      <anchorfile>classDirectoryContentsDisplayComponent.html</anchorfile>
      <anchor>af2f2fe91f39fdc58d08be4d7537045f7</anchor>
      <arglist>(FileBrowserListener *listener)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeListener</name>
      <anchorfile>classDirectoryContentsDisplayComponent.html</anchorfile>
      <anchor>a1bde76a3657c81bedb923ed5b1e1a290</anchor>
      <arglist>(FileBrowserListener *listener)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sendSelectionChangeMessage</name>
      <anchorfile>classDirectoryContentsDisplayComponent.html</anchorfile>
      <anchor>a258a4d5cc97370c927a04dcfd1f16e7a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sendDoubleClickMessage</name>
      <anchorfile>classDirectoryContentsDisplayComponent.html</anchorfile>
      <anchor>ad07df8fccc59a5e38bb6a8604eacb8a7</anchor>
      <arglist>(const File &amp;file)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sendMouseClickMessage</name>
      <anchorfile>classDirectoryContentsDisplayComponent.html</anchorfile>
      <anchor>ade19bf62883c81f828eaac675fe6d6e3</anchor>
      <arglist>(const File &amp;file, const MouseEvent &amp;e)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>DirectoryContentsList &amp;</type>
      <name>fileList</name>
      <anchorfile>classDirectoryContentsDisplayComponent.html</anchorfile>
      <anchor>a5107067c830054515cd287dc3db2bc45</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ListenerList&lt; FileBrowserListener &gt;</type>
      <name>listeners</name>
      <anchorfile>classDirectoryContentsDisplayComponent.html</anchorfile>
      <anchor>a5f7300e0d637b48e8a2f3abd067a7144</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DirectoryContentsList</name>
    <filename>classDirectoryContentsList.html</filename>
    <base>ChangeBroadcaster</base>
    <base protection="private">TimeSliceClient</base>
    <class kind="struct">DirectoryContentsList::FileInfo</class>
    <member kind="function">
      <type></type>
      <name>DirectoryContentsList</name>
      <anchorfile>classDirectoryContentsList.html</anchorfile>
      <anchor>ae36fae5fbad4ae302ffed71120a554fc</anchor>
      <arglist>(const FileFilter *fileFilter, TimeSliceThread &amp;threadToUse)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~DirectoryContentsList</name>
      <anchorfile>classDirectoryContentsList.html</anchorfile>
      <anchor>aac2f7424bab5834eda64fcd9f63af9c8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const File &amp;</type>
      <name>getDirectory</name>
      <anchorfile>classDirectoryContentsList.html</anchorfile>
      <anchor>a13d247dcc28766b1ef1c2646976e402a</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDirectory</name>
      <anchorfile>classDirectoryContentsList.html</anchorfile>
      <anchor>a8bbc33107fede1f3925b40c73b43fe72</anchor>
      <arglist>(const File &amp;directory, bool includeDirectories, bool includeFiles)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isFindingDirectories</name>
      <anchorfile>classDirectoryContentsList.html</anchorfile>
      <anchor>a4ec1c329d1c2d5d7707b3c6d33633a44</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isFindingFiles</name>
      <anchorfile>classDirectoryContentsList.html</anchorfile>
      <anchor>a71c4285997939e2e5eddd5504c20b0b4</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classDirectoryContentsList.html</anchorfile>
      <anchor>a1155dd82a0abcaeae948869aea6834d9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>refresh</name>
      <anchorfile>classDirectoryContentsList.html</anchorfile>
      <anchor>ac7c096640fd74adbd9b20b38892fee48</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isStillLoading</name>
      <anchorfile>classDirectoryContentsList.html</anchorfile>
      <anchor>affdbc37bd9593dbabbd29814edcfde19</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIgnoresHiddenFiles</name>
      <anchorfile>classDirectoryContentsList.html</anchorfile>
      <anchor>ab143c4681db9f409c204d9a21ae3bced</anchor>
      <arglist>(bool shouldIgnoreHiddenFiles)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ignoresHiddenFiles</name>
      <anchorfile>classDirectoryContentsList.html</anchorfile>
      <anchor>a13805762d1b90055cdb363bd010225b2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFileFilter</name>
      <anchorfile>classDirectoryContentsList.html</anchorfile>
      <anchor>aad66e0f0c11c0796e219048747e92428</anchor>
      <arglist>(const FileFilter *newFileFilter)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumFiles</name>
      <anchorfile>classDirectoryContentsList.html</anchorfile>
      <anchor>afabd5e3cff95833e73d6f90359cf7e63</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getFileInfo</name>
      <anchorfile>classDirectoryContentsList.html</anchorfile>
      <anchor>a74b2f00f25fa733aba8ff1294a913d56</anchor>
      <arglist>(int index, FileInfo &amp;resultInfo) const </arglist>
    </member>
    <member kind="function">
      <type>File</type>
      <name>getFile</name>
      <anchorfile>classDirectoryContentsList.html</anchorfile>
      <anchor>ab264bb3a17d76ba5fcff9ca351545a0b</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function">
      <type>const FileFilter *</type>
      <name>getFilter</name>
      <anchorfile>classDirectoryContentsList.html</anchorfile>
      <anchor>a315cd1604c49dba2cd86a7906dfa14ba</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>classDirectoryContentsList.html</anchorfile>
      <anchor>adfaf512db80b808d00a6c14b70e1fe51</anchor>
      <arglist>(const File &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>TimeSliceThread &amp;</type>
      <name>getTimeSliceThread</name>
      <anchorfile>classDirectoryContentsList.html</anchorfile>
      <anchor>a415ce1f4dfe6b858099ea2c27b6d022d</anchor>
      <arglist>() const noexcept</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DirectoryContentsList::FileInfo</name>
    <filename>structDirectoryContentsList_1_1FileInfo.html</filename>
    <member kind="variable">
      <type>String</type>
      <name>filename</name>
      <anchorfile>structDirectoryContentsList_1_1FileInfo.html</anchorfile>
      <anchor>a14b9647b7281512bbedddb25ebeee1b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int64</type>
      <name>fileSize</name>
      <anchorfile>structDirectoryContentsList_1_1FileInfo.html</anchorfile>
      <anchor>a0ef892081704ac1b7d4de84854b60a3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Time</type>
      <name>modificationTime</name>
      <anchorfile>structDirectoryContentsList_1_1FileInfo.html</anchorfile>
      <anchor>a35f194ff92e35671d7616d1d9e1524b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Time</type>
      <name>creationTime</name>
      <anchorfile>structDirectoryContentsList_1_1FileInfo.html</anchorfile>
      <anchor>a903e1211fd14c33fe7af486e4e91b9b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>isDirectory</name>
      <anchorfile>structDirectoryContentsList_1_1FileInfo.html</anchorfile>
      <anchor>a493b51197cd6cc4042d9c8b13a0dbdab</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>isReadOnly</name>
      <anchorfile>structDirectoryContentsList_1_1FileInfo.html</anchorfile>
      <anchor>a73e256209bd193d238465977d4493114</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DirectoryIterator</name>
    <filename>classDirectoryIterator.html</filename>
    <member kind="function">
      <type></type>
      <name>DirectoryIterator</name>
      <anchorfile>classDirectoryIterator.html</anchorfile>
      <anchor>a524ffc16900daf13217680423458b328</anchor>
      <arglist>(const File &amp;directory, bool isRecursive, const String &amp;wildCard=&quot;*&quot;, int whatToLookFor=File::findFiles)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~DirectoryIterator</name>
      <anchorfile>classDirectoryIterator.html</anchorfile>
      <anchor>aa72fbf8139eb6b2446565cf89249071e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>next</name>
      <anchorfile>classDirectoryIterator.html</anchorfile>
      <anchor>a4d38dc126a3b4855dbbef96d8b31ae76</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>next</name>
      <anchorfile>classDirectoryIterator.html</anchorfile>
      <anchor>a544868520b233c98d4ecc8322aec8333</anchor>
      <arglist>(bool *isDirectory, bool *isHidden, int64 *fileSize, Time *modTime, Time *creationTime, bool *isReadOnly)</arglist>
    </member>
    <member kind="function">
      <type>const File &amp;</type>
      <name>getFile</name>
      <anchorfile>classDirectoryIterator.html</anchorfile>
      <anchor>a52d9bf42bc4208beaf708acefbb3d855</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getEstimatedProgress</name>
      <anchorfile>classDirectoryIterator.html</anchorfile>
      <anchor>a32667fc239e42f3db031ae2cc2646b3c</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DirectShowComponent</name>
    <filename>classDirectShowComponent.html</filename>
    <base>Component</base>
    <member kind="enumeration">
      <type></type>
      <name>VideoRendererType</name>
      <anchorfile>classDirectShowComponent.html</anchorfile>
      <anchor>aa3d9ec3787a0af2478c59ff11a830f75</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>dshowDefault</name>
      <anchorfile>classDirectShowComponent.html</anchorfile>
      <anchor>aa3d9ec3787a0af2478c59ff11a830f75a620a1e36deb4388aadeb49be5097867a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>dshowVMR7</name>
      <anchorfile>classDirectShowComponent.html</anchorfile>
      <anchor>aa3d9ec3787a0af2478c59ff11a830f75a5108392f04c0124e700030eb9b284830</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>dshowEVR</name>
      <anchorfile>classDirectShowComponent.html</anchorfile>
      <anchor>aa3d9ec3787a0af2478c59ff11a830f75a4bd766a5f5a12e8a4a0f07a8f41e6a60</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DirectShowComponent</name>
      <anchorfile>classDirectShowComponent.html</anchorfile>
      <anchor>af377e8270137e9905e93963acc49c2ea</anchor>
      <arglist>(VideoRendererType type=dshowDefault)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~DirectShowComponent</name>
      <anchorfile>classDirectShowComponent.html</anchorfile>
      <anchor>a3a031b3db994fcd730cc6a5899f76462</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>loadMovie</name>
      <anchorfile>classDirectShowComponent.html</anchorfile>
      <anchor>a0507e6218c2e5b3989cb1ecb7d8de6e5</anchor>
      <arglist>(const String &amp;fileOrURLPath)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>loadMovie</name>
      <anchorfile>classDirectShowComponent.html</anchorfile>
      <anchor>a2fa45b9cc38e2bb703993751a08f2ca4</anchor>
      <arglist>(const File &amp;videoFile)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>loadMovie</name>
      <anchorfile>classDirectShowComponent.html</anchorfile>
      <anchor>a38f8befa6cdbc6cfcd2cb90b8eb0a787</anchor>
      <arglist>(const URL &amp;videoURL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>closeMovie</name>
      <anchorfile>classDirectShowComponent.html</anchorfile>
      <anchor>aa67b15760af62bd603c21755875ede6b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>File</type>
      <name>getCurrentMoviePath</name>
      <anchorfile>classDirectShowComponent.html</anchorfile>
      <anchor>ad8d9681483157f588821bf46548e506f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isMovieOpen</name>
      <anchorfile>classDirectShowComponent.html</anchorfile>
      <anchor>a91155448dda4da76e0aa43d7edc7a273</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getMovieDuration</name>
      <anchorfile>classDirectShowComponent.html</anchorfile>
      <anchor>a703329107a31c9dcb9abf0e557f335e9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getMovieNormalSize</name>
      <anchorfile>classDirectShowComponent.html</anchorfile>
      <anchor>a480353733e58cf0c058fc9ea1c8389c6</anchor>
      <arglist>(int &amp;width, int &amp;height) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBoundsWithCorrectAspectRatio</name>
      <anchorfile>classDirectShowComponent.html</anchorfile>
      <anchor>a3b593cf1d96c52f68693375f1a9091e9</anchor>
      <arglist>(const Rectangle&lt; int &gt; &amp;spaceToFitWithin, RectanglePlacement placement)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>play</name>
      <anchorfile>classDirectShowComponent.html</anchorfile>
      <anchor>a3dc4bbafdac3d59bbc315acb702b5d5e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stop</name>
      <anchorfile>classDirectShowComponent.html</anchorfile>
      <anchor>aadf35a6d2c19a56daf048bb0b35fbdbe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isPlaying</name>
      <anchorfile>classDirectShowComponent.html</anchorfile>
      <anchor>a1a7a6acb5d1023b9d1a98c32a2d68f7e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>goToStart</name>
      <anchorfile>classDirectShowComponent.html</anchorfile>
      <anchor>a4085f670398f80f9fe1c9239031b6f2d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPosition</name>
      <anchorfile>classDirectShowComponent.html</anchorfile>
      <anchor>abb6c7953230480059531079f1b4d85e3</anchor>
      <arglist>(double seconds)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getPosition</name>
      <anchorfile>classDirectShowComponent.html</anchorfile>
      <anchor>a1fec1718a781ad2dc1a928c3de6e24b8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSpeed</name>
      <anchorfile>classDirectShowComponent.html</anchorfile>
      <anchor>a288657f65e80827b7bdfe66fe3e36f2e</anchor>
      <arglist>(float newSpeed)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMovieVolume</name>
      <anchorfile>classDirectShowComponent.html</anchorfile>
      <anchor>aed7c40f62febda7379a324426785fa55</anchor>
      <arglist>(float newVolume)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getMovieVolume</name>
      <anchorfile>classDirectShowComponent.html</anchorfile>
      <anchor>ad907cc2dd51b8cbc8190978e4dd70f97</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLooping</name>
      <anchorfile>classDirectShowComponent.html</anchorfile>
      <anchor>ae41e98c70c7054ff829f55804e577315</anchor>
      <arglist>(bool shouldLoop)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isLooping</name>
      <anchorfile>classDirectShowComponent.html</anchorfile>
      <anchor>a2d893091757b5af3d7ca22304a8e96dc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>paint</name>
      <anchorfile>classDirectShowComponent.html</anchorfile>
      <anchor>a88f8c1ca2cbd95adb30074bf7a7e2273</anchor>
      <arglist>(Graphics &amp;) override</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isDirectShowAvailable</name>
      <anchorfile>classDirectShowComponent.html</anchorfile>
      <anchor>a00bd500520826772c092c9c66db1440f</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DocumentWindow</name>
    <filename>classDocumentWindow.html</filename>
    <base>ResizableWindow</base>
    <class kind="struct">DocumentWindow::LookAndFeelMethods</class>
  </compound>
  <compound kind="struct">
    <name>DocumentWindow::LookAndFeelMethods</name>
    <filename>structDocumentWindow_1_1LookAndFeelMethods.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~LookAndFeelMethods</name>
      <anchorfile>structDocumentWindow_1_1LookAndFeelMethods.html</anchorfile>
      <anchor>ad759abf5ee6d5f110de7d994009ba35b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>drawDocumentWindowTitleBar</name>
      <anchorfile>structDocumentWindow_1_1LookAndFeelMethods.html</anchorfile>
      <anchor>aab7453a7d83cf659a6d89684857a52b5</anchor>
      <arglist>(DocumentWindow &amp;, Graphics &amp;, int w, int h, int titleSpaceX, int titleSpaceW, const Image *icon, bool drawTitleTextOnLeft)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Button *</type>
      <name>createDocumentWindowButton</name>
      <anchorfile>structDocumentWindow_1_1LookAndFeelMethods.html</anchorfile>
      <anchor>a2d3cfaf2765ecdfbf12ae6be52ba21fe</anchor>
      <arglist>(int buttonType)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>positionDocumentWindowButtons</name>
      <anchorfile>structDocumentWindow_1_1LookAndFeelMethods.html</anchorfile>
      <anchor>af1db65fa12e1f49caa2dd4ae1145a93a</anchor>
      <arglist>(DocumentWindow &amp;, int titleBarX, int titleBarY, int titleBarW, int titleBarH, Button *minimiseButton, Button *maximiseButton, Button *closeButton, bool positionTitleBarButtonsOnLeft)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DragAndDropContainer</name>
    <filename>classDragAndDropContainer.html</filename>
    <member kind="function">
      <type></type>
      <name>DragAndDropContainer</name>
      <anchorfile>classDragAndDropContainer.html</anchorfile>
      <anchor>af5236c188d64a8ac0103754ee676f339</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~DragAndDropContainer</name>
      <anchorfile>classDragAndDropContainer.html</anchorfile>
      <anchor>ade6447a100fab338176980f99fa04e8b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>startDragging</name>
      <anchorfile>classDragAndDropContainer.html</anchorfile>
      <anchor>a1f05c2d712f9cf0dd2a789817549bf60</anchor>
      <arglist>(const var &amp;sourceDescription, Component *sourceComponent, Image dragImage=Image(), bool allowDraggingToOtherJuceWindows=false, const Point&lt; int &gt; *imageOffsetFromMouse=nullptr)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isDragAndDropActive</name>
      <anchorfile>classDragAndDropContainer.html</anchorfile>
      <anchor>aa1929c259d62aac44d866abd3e52ef1d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>var</type>
      <name>getCurrentDragDescription</name>
      <anchorfile>classDragAndDropContainer.html</anchorfile>
      <anchor>a759a67a4c1efc0b88c707eb4cb2d2f47</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCurrentDragImage</name>
      <anchorfile>classDragAndDropContainer.html</anchorfile>
      <anchor>a0041c708ec4c348b719692d4c5963858</anchor>
      <arglist>(const Image &amp;newImage)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DragAndDropContainer *</type>
      <name>findParentDragContainerFor</name>
      <anchorfile>classDragAndDropContainer.html</anchorfile>
      <anchor>ab2862f4fe5815a2089c886ab96193949</anchor>
      <arglist>(Component *childComponent)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>performExternalDragDropOfFiles</name>
      <anchorfile>classDragAndDropContainer.html</anchorfile>
      <anchor>ae9e29e4a49717401e4631fc5864f0a04</anchor>
      <arglist>(const StringArray &amp;files, bool canMoveFiles)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>performExternalDragDropOfText</name>
      <anchorfile>classDragAndDropContainer.html</anchorfile>
      <anchor>a42446d76aa9b798d56936f6de6c270a5</anchor>
      <arglist>(const String &amp;text)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>shouldDropFilesWhenDraggedExternally</name>
      <anchorfile>classDragAndDropContainer.html</anchorfile>
      <anchor>a69b389d34bc9748eb5f82a8995aae28d</anchor>
      <arglist>(const DragAndDropTarget::SourceDetails &amp;sourceDetails, StringArray &amp;files, bool &amp;canMoveFiles)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>shouldDropTextWhenDraggedExternally</name>
      <anchorfile>classDragAndDropContainer.html</anchorfile>
      <anchor>ad6fe3741189a1158f451f77580bf452c</anchor>
      <arglist>(const DragAndDropTarget::SourceDetails &amp;sourceDetails, String &amp;text)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>dragOperationStarted</name>
      <anchorfile>classDragAndDropContainer.html</anchorfile>
      <anchor>a0ad3e13b0caaa4edc124fc2845e9ed71</anchor>
      <arglist>(const DragAndDropTarget::SourceDetails &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>dragOperationEnded</name>
      <anchorfile>classDragAndDropContainer.html</anchorfile>
      <anchor>a60b1119c294d76986cc00f9db9ca0616</anchor>
      <arglist>(const DragAndDropTarget::SourceDetails &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DragAndDropTarget</name>
    <filename>classDragAndDropTarget.html</filename>
    <class kind="class">DragAndDropTarget::SourceDetails</class>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~DragAndDropTarget</name>
      <anchorfile>classDragAndDropTarget.html</anchorfile>
      <anchor>ae38b4052c9fb331f52a5cf41d9e4efca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isInterestedInDragSource</name>
      <anchorfile>classDragAndDropTarget.html</anchorfile>
      <anchor>a53853ec7aac70f5590a590b84c3f4f12</anchor>
      <arglist>(const SourceDetails &amp;dragSourceDetails)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>itemDragEnter</name>
      <anchorfile>classDragAndDropTarget.html</anchorfile>
      <anchor>a116d963d936a6f1fff772d7d4bb6c811</anchor>
      <arglist>(const SourceDetails &amp;dragSourceDetails)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>itemDragMove</name>
      <anchorfile>classDragAndDropTarget.html</anchorfile>
      <anchor>a7f867a2c2d966cd80b0b6736a7ff96f1</anchor>
      <arglist>(const SourceDetails &amp;dragSourceDetails)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>itemDragExit</name>
      <anchorfile>classDragAndDropTarget.html</anchorfile>
      <anchor>a1b99d312afac5f1a84fe1ef84c94982e</anchor>
      <arglist>(const SourceDetails &amp;dragSourceDetails)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>itemDropped</name>
      <anchorfile>classDragAndDropTarget.html</anchorfile>
      <anchor>ac2240ffc2dd0ccf61670780a15b66017</anchor>
      <arglist>(const SourceDetails &amp;dragSourceDetails)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>shouldDrawDragImageWhenOver</name>
      <anchorfile>classDragAndDropTarget.html</anchorfile>
      <anchor>a160dc7a89ab43cd8d55c5e902bd0032c</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DragAndDropTarget::SourceDetails</name>
    <filename>classDragAndDropTarget_1_1SourceDetails.html</filename>
    <member kind="function">
      <type></type>
      <name>SourceDetails</name>
      <anchorfile>classDragAndDropTarget_1_1SourceDetails.html</anchorfile>
      <anchor>a97ab7bc3066f3366f4124c050af56c53</anchor>
      <arglist>(const var &amp;description, Component *sourceComponent, Point&lt; int &gt; localPosition) noexcept</arglist>
    </member>
    <member kind="variable">
      <type>var</type>
      <name>description</name>
      <anchorfile>classDragAndDropTarget_1_1SourceDetails.html</anchorfile>
      <anchor>a48087c787b2d1f08f84ba7bd6c5c6eec</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>WeakReference&lt; Component &gt;</type>
      <name>sourceComponent</name>
      <anchorfile>classDragAndDropTarget_1_1SourceDetails.html</anchorfile>
      <anchor>ad64cf556308af58fb6873d16f4a590de</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Point&lt; int &gt;</type>
      <name>localPosition</name>
      <anchorfile>classDragAndDropTarget_1_1SourceDetails.html</anchorfile>
      <anchor>ae56f0216335992ae66fdfacc3f4c6837</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Draggable3DOrientation</name>
    <filename>classDraggable3DOrientation.html</filename>
    <member kind="typedef">
      <type>Vector3D&lt; float &gt;</type>
      <name>VectorType</name>
      <anchorfile>classDraggable3DOrientation.html</anchorfile>
      <anchor>a90d8df29b27c60dc36909f3bff86226e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Quaternion&lt; float &gt;</type>
      <name>QuaternionType</name>
      <anchorfile>classDraggable3DOrientation.html</anchorfile>
      <anchor>a078d6c17248de2acffed6c3f60da419f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Draggable3DOrientation</name>
      <anchorfile>classDraggable3DOrientation.html</anchorfile>
      <anchor>a926f24463e2a332a31897be82726e780</anchor>
      <arglist>(float objectRadius=0.5f) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Draggable3DOrientation</name>
      <anchorfile>classDraggable3DOrientation.html</anchorfile>
      <anchor>a968881ef4fc0b522cb7dc33e8597de8a</anchor>
      <arglist>(const Quaternion&lt; float &gt; &amp;quaternionToUse, float objectRadius=0.5f) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classDraggable3DOrientation.html</anchorfile>
      <anchor>a044ceada7a836f33ed3b5359fdfd7117</anchor>
      <arglist>(const VectorType &amp;axis) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setViewport</name>
      <anchorfile>classDraggable3DOrientation.html</anchorfile>
      <anchor>aaf819f208f7b6f098a9d14084281f84c</anchor>
      <arglist>(const Rectangle&lt; int &gt; &amp;newArea) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRadius</name>
      <anchorfile>classDraggable3DOrientation.html</anchorfile>
      <anchor>aba3b29abef586953b0ab2dc709dc274c</anchor>
      <arglist>(float newRadius) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mouseDown</name>
      <anchorfile>classDraggable3DOrientation.html</anchorfile>
      <anchor>a42b621b62a71657a5b02bc12e75f5a97</anchor>
      <arglist>(Point&lt; Type &gt; mousePos) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mouseDrag</name>
      <anchorfile>classDraggable3DOrientation.html</anchorfile>
      <anchor>a9a163aa63b7b834b0cab05d898a062c4</anchor>
      <arglist>(Point&lt; Type &gt; mousePos) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Matrix3D&lt; float &gt;</type>
      <name>getRotationMatrix</name>
      <anchorfile>classDraggable3DOrientation.html</anchorfile>
      <anchor>a90081c7213402d585813ef0d022fe4bb</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>QuaternionType &amp;</type>
      <name>getQuaternion</name>
      <anchorfile>classDraggable3DOrientation.html</anchorfile>
      <anchor>a4db5f2d4b68cfc5826ba584893470970</anchor>
      <arglist>() noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Drawable</name>
    <filename>classDrawable.html</filename>
    <base>Component</base>
    <class kind="class">Drawable::ValueTreeWrapperBase</class>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Drawable</name>
      <anchorfile>classDrawable.html</anchorfile>
      <anchor>abdc2e2d82c51c1703656a2dfba0feabd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Drawable *</type>
      <name>createCopy</name>
      <anchorfile>classDrawable.html</anchorfile>
      <anchor>a4632f7ae2228fe64f4595291dcc813d6</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>draw</name>
      <anchorfile>classDrawable.html</anchorfile>
      <anchor>acce7399caa7c8c47568f9c0a64b81d60</anchor>
      <arglist>(Graphics &amp;g, float opacity, const AffineTransform &amp;transform=AffineTransform()) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawAt</name>
      <anchorfile>classDrawable.html</anchorfile>
      <anchor>a25ec80262ebef1fd06d01b51893cee10</anchor>
      <arglist>(Graphics &amp;g, float x, float y, float opacity) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawWithin</name>
      <anchorfile>classDrawable.html</anchorfile>
      <anchor>a484cfb917c5ea906c4fa50e5034d2511</anchor>
      <arglist>(Graphics &amp;g, const Rectangle&lt; float &gt; &amp;destArea, RectanglePlacement placement, float opacity) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOriginWithOriginalSize</name>
      <anchorfile>classDrawable.html</anchorfile>
      <anchor>a5ddf784e02a677cb65706f1d3d696d3b</anchor>
      <arglist>(Point&lt; float &gt; originWithinParent)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTransformToFit</name>
      <anchorfile>classDrawable.html</anchorfile>
      <anchor>acd7564edd1bd3d65bf7fffd0139c4235</anchor>
      <arglist>(const Rectangle&lt; float &gt; &amp;areaInParent, RectanglePlacement placement)</arglist>
    </member>
    <member kind="function">
      <type>DrawableComposite *</type>
      <name>getParent</name>
      <anchorfile>classDrawable.html</anchorfile>
      <anchor>a201ad5150a8a37b26a6587c6e51c75c6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ValueTree</type>
      <name>createValueTree</name>
      <anchorfile>classDrawable.html</anchorfile>
      <anchor>accf0372cb695f03099384f1dadcc5b0a</anchor>
      <arglist>(ComponentBuilder::ImageProvider *imageProvider) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Rectangle&lt; float &gt;</type>
      <name>getDrawableBounds</name>
      <anchorfile>classDrawable.html</anchorfile>
      <anchor>a96e6f740a809b93b9ecf5f6e0dd3e421</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>replaceColour</name>
      <anchorfile>classDrawable.html</anchorfile>
      <anchor>ac07d49a56bad30d130c7c1cd8f7a7fe2</anchor>
      <arglist>(Colour originalColour, Colour replacementColour)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Drawable *</type>
      <name>createFromImageData</name>
      <anchorfile>classDrawable.html</anchorfile>
      <anchor>a490039369111891979147bdfecf8d389</anchor>
      <arglist>(const void *data, size_t numBytes)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Drawable *</type>
      <name>createFromImageDataStream</name>
      <anchorfile>classDrawable.html</anchorfile>
      <anchor>a763ef7e95af00fb88b4c45a1c38bd942</anchor>
      <arglist>(InputStream &amp;dataSource)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Drawable *</type>
      <name>createFromImageFile</name>
      <anchorfile>classDrawable.html</anchorfile>
      <anchor>a71c90179ca2a582ef0814c983be41dc9</anchor>
      <arglist>(const File &amp;file)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Drawable *</type>
      <name>createFromSVG</name>
      <anchorfile>classDrawable.html</anchorfile>
      <anchor>af1fa4fa00c6e37bcaa7a9322a81bd2ec</anchor>
      <arglist>(const XmlElement &amp;svgDocument)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Path</type>
      <name>parseSVGPath</name>
      <anchorfile>classDrawable.html</anchorfile>
      <anchor>aebfffe1d689c9ab863c5c80526703d3f</anchor>
      <arglist>(const String &amp;svgPath)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Drawable *</type>
      <name>createFromValueTree</name>
      <anchorfile>classDrawable.html</anchorfile>
      <anchor>a59ef4e2922c93f3ec4cef7d11c980c69</anchor>
      <arglist>(const ValueTree &amp;tree, ComponentBuilder::ImageProvider *imageProvider)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>registerDrawableTypeHandlers</name>
      <anchorfile>classDrawable.html</anchorfile>
      <anchor>a53870971c976cb6a7f37b67bc1e1929c</anchor>
      <arglist>(ComponentBuilder &amp;componentBuilder)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Drawable</name>
      <anchorfile>classDrawable.html</anchorfile>
      <anchor>aac88608db6081da479c772c96636acb1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>transformContextToCorrectOrigin</name>
      <anchorfile>classDrawable.html</anchorfile>
      <anchor>a5677834b7ae237a1777080ff6d246c7a</anchor>
      <arglist>(Graphics &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>parentHierarchyChanged</name>
      <anchorfile>classDrawable.html</anchorfile>
      <anchor>a5a0e439f6bae4acaf6c38895533cf8a2</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setBoundsToEnclose</name>
      <anchorfile>classDrawable.html</anchorfile>
      <anchor>adcc45223d94b972f04d6734544df179e</anchor>
      <arglist>(const Rectangle&lt; float &gt; &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Point&lt; int &gt;</type>
      <name>originRelativeToComponent</name>
      <anchorfile>classDrawable.html</anchorfile>
      <anchor>a6f6686d94ab6c007bc89e97667fb1ef4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Drawable::ValueTreeWrapperBase</name>
    <filename>classDrawable_1_1ValueTreeWrapperBase.html</filename>
    <member kind="function">
      <type></type>
      <name>ValueTreeWrapperBase</name>
      <anchorfile>classDrawable_1_1ValueTreeWrapperBase.html</anchorfile>
      <anchor>a710b004f7226d58f3c95efce51f1c5b0</anchor>
      <arglist>(const ValueTree &amp;state)</arglist>
    </member>
    <member kind="function">
      <type>ValueTree &amp;</type>
      <name>getState</name>
      <anchorfile>classDrawable_1_1ValueTreeWrapperBase.html</anchorfile>
      <anchor>a2ba2dc4635c0beda683b7e12496ca92a</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>getID</name>
      <anchorfile>classDrawable_1_1ValueTreeWrapperBase.html</anchorfile>
      <anchor>ad7cea4e28a944fee27d80f32200f5f7b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setID</name>
      <anchorfile>classDrawable_1_1ValueTreeWrapperBase.html</anchorfile>
      <anchor>af25db11edf263f3e1ab7db410ebcd48b</anchor>
      <arglist>(const String &amp;newID)</arglist>
    </member>
    <member kind="variable">
      <type>ValueTree</type>
      <name>state</name>
      <anchorfile>classDrawable_1_1ValueTreeWrapperBase.html</anchorfile>
      <anchor>a2d6a64bfed533cc3ea54b334510856eb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DrawableButton</name>
    <filename>classDrawableButton.html</filename>
    <base>Button</base>
    <member kind="enumeration">
      <type></type>
      <name>ButtonStyle</name>
      <anchorfile>classDrawableButton.html</anchorfile>
      <anchor>a7da653337d7329405ef9865cc35f612e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>ImageFitted</name>
      <anchorfile>classDrawableButton.html</anchorfile>
      <anchor>a7da653337d7329405ef9865cc35f612ea79a05e8e03a639da1e34dd2bc76a4a26</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>ImageRaw</name>
      <anchorfile>classDrawableButton.html</anchorfile>
      <anchor>a7da653337d7329405ef9865cc35f612eadeca41061a457668e1b73bcea58f437f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>ImageAboveTextLabel</name>
      <anchorfile>classDrawableButton.html</anchorfile>
      <anchor>a7da653337d7329405ef9865cc35f612ea062ae670bdd4925a0a708dbaca8ebc2b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>ImageOnButtonBackground</name>
      <anchorfile>classDrawableButton.html</anchorfile>
      <anchor>a7da653337d7329405ef9865cc35f612eaff968e270892fae0fee459da811d6a03</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>ImageStretched</name>
      <anchorfile>classDrawableButton.html</anchorfile>
      <anchor>a7da653337d7329405ef9865cc35f612eab4f49e1f7275ae00388b7b18e0648976</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>ColourIds</name>
      <anchorfile>classDrawableButton.html</anchorfile>
      <anchor>a469961782a284aae38a2234a7f3fd37f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>textColourId</name>
      <anchorfile>classDrawableButton.html</anchorfile>
      <anchor>a469961782a284aae38a2234a7f3fd37fabc6adc2de607e8eae04f999765ecf4ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>textColourOnId</name>
      <anchorfile>classDrawableButton.html</anchorfile>
      <anchor>a469961782a284aae38a2234a7f3fd37fa5d46d566d68b0cafd0711ab6aa28bd9f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>backgroundColourId</name>
      <anchorfile>classDrawableButton.html</anchorfile>
      <anchor>a469961782a284aae38a2234a7f3fd37fa353e16cf4710b875cb88b374776e00d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>backgroundOnColourId</name>
      <anchorfile>classDrawableButton.html</anchorfile>
      <anchor>a469961782a284aae38a2234a7f3fd37fae1fbb02269d41c17e9a503a5b09e5d3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DrawableButton</name>
      <anchorfile>classDrawableButton.html</anchorfile>
      <anchor>a27adb65452ea50435a4a4e90c70e2cd0</anchor>
      <arglist>(const String &amp;buttonName, ButtonStyle buttonStyle)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~DrawableButton</name>
      <anchorfile>classDrawableButton.html</anchorfile>
      <anchor>a9703cbdd10a62d88f297b9e2ac321dfe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setImages</name>
      <anchorfile>classDrawableButton.html</anchorfile>
      <anchor>a234fdfb0b05c4b2fe42b22366377829a</anchor>
      <arglist>(const Drawable *normalImage, const Drawable *overImage=nullptr, const Drawable *downImage=nullptr, const Drawable *disabledImage=nullptr, const Drawable *normalImageOn=nullptr, const Drawable *overImageOn=nullptr, const Drawable *downImageOn=nullptr, const Drawable *disabledImageOn=nullptr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setButtonStyle</name>
      <anchorfile>classDrawableButton.html</anchorfile>
      <anchor>a5858b272f7062972f23eecfa4bb39362</anchor>
      <arglist>(ButtonStyle newStyle)</arglist>
    </member>
    <member kind="function">
      <type>ButtonStyle</type>
      <name>getStyle</name>
      <anchorfile>classDrawableButton.html</anchorfile>
      <anchor>a7e01fbd26e67d7359bd43f9902262295</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEdgeIndent</name>
      <anchorfile>classDrawableButton.html</anchorfile>
      <anchor>a92a1179fe613504e1c0286bea62f9d7b</anchor>
      <arglist>(int numPixelsIndent)</arglist>
    </member>
    <member kind="function">
      <type>Drawable *</type>
      <name>getCurrentImage</name>
      <anchorfile>classDrawableButton.html</anchorfile>
      <anchor>ad35d7da94a1e273ed5ac02d3591cfbb6</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Drawable *</type>
      <name>getNormalImage</name>
      <anchorfile>classDrawableButton.html</anchorfile>
      <anchor>aa7c619db8754f604683b142683ab3afa</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Drawable *</type>
      <name>getOverImage</name>
      <anchorfile>classDrawableButton.html</anchorfile>
      <anchor>a178db462442745dba519dd884c90e6da</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Drawable *</type>
      <name>getDownImage</name>
      <anchorfile>classDrawableButton.html</anchorfile>
      <anchor>a36fcdc9874414f34b173a2421a75c971</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Rectangle&lt; float &gt;</type>
      <name>getImageBounds</name>
      <anchorfile>classDrawableButton.html</anchorfile>
      <anchor>a458cb2e43dc021e5c59cccfc71ddff97</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>paintButton</name>
      <anchorfile>classDrawableButton.html</anchorfile>
      <anchor>ac18941a86b68ed899cd85081170b4af7</anchor>
      <arglist>(Graphics &amp;, bool isMouseOverButton, bool isButtonDown) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>buttonStateChanged</name>
      <anchorfile>classDrawableButton.html</anchorfile>
      <anchor>adb246419a6e6a07d9a82d97b18408953</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resized</name>
      <anchorfile>classDrawableButton.html</anchorfile>
      <anchor>a86aa54141e8e1117f979d87cc72cd2f2</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enablementChanged</name>
      <anchorfile>classDrawableButton.html</anchorfile>
      <anchor>a726b866e69adc70a147a2c59156da249</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>colourChanged</name>
      <anchorfile>classDrawableButton.html</anchorfile>
      <anchor>a48127b72c69cce38ba8e56b33da22a10</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DrawableComposite</name>
    <filename>classDrawableComposite.html</filename>
    <base>Drawable</base>
    <class kind="class">DrawableComposite::ValueTreeWrapper</class>
    <member kind="function">
      <type></type>
      <name>DrawableComposite</name>
      <anchorfile>classDrawableComposite.html</anchorfile>
      <anchor>a03de775754fc0adf53262a651c8ca536</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DrawableComposite</name>
      <anchorfile>classDrawableComposite.html</anchorfile>
      <anchor>a136ef18f274a5a630932f0f1c4eb6a65</anchor>
      <arglist>(const DrawableComposite &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~DrawableComposite</name>
      <anchorfile>classDrawableComposite.html</anchorfile>
      <anchor>a85ba7ab4bc45277ac96fa316b6fb91f1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBoundingBox</name>
      <anchorfile>classDrawableComposite.html</anchorfile>
      <anchor>a0270c53e717d85b48e543f643703ada0</anchor>
      <arglist>(const RelativeParallelogram &amp;newBoundingBox)</arglist>
    </member>
    <member kind="function">
      <type>const RelativeParallelogram &amp;</type>
      <name>getBoundingBox</name>
      <anchorfile>classDrawableComposite.html</anchorfile>
      <anchor>af9332218974c8f64403493a0e69013fe</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetBoundingBoxToContentArea</name>
      <anchorfile>classDrawableComposite.html</anchorfile>
      <anchor>a01762a42369e45a94d81c20bdc7e2d97</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>RelativeRectangle</type>
      <name>getContentArea</name>
      <anchorfile>classDrawableComposite.html</anchorfile>
      <anchor>af05ea57b78d785ae92b13148de6602ff</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setContentArea</name>
      <anchorfile>classDrawableComposite.html</anchorfile>
      <anchor>ae1e3ae693c61513ed066c8b7ee46cfdd</anchor>
      <arglist>(const RelativeRectangle &amp;newArea)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetContentAreaAndBoundingBoxToFitChildren</name>
      <anchorfile>classDrawableComposite.html</anchorfile>
      <anchor>a3f6167f97a85bfab740f819ba6dae9b6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Drawable *</type>
      <name>createCopy</name>
      <anchorfile>classDrawableComposite.html</anchorfile>
      <anchor>abe016ad9989b68a43f2cc32fba12a14c</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>refreshFromValueTree</name>
      <anchorfile>classDrawableComposite.html</anchorfile>
      <anchor>ace805b640d2aed7fadbeeff4aac26e2c</anchor>
      <arglist>(const ValueTree &amp;, ComponentBuilder &amp;)</arglist>
    </member>
    <member kind="function">
      <type>ValueTree</type>
      <name>createValueTree</name>
      <anchorfile>classDrawableComposite.html</anchorfile>
      <anchor>ae1187fd721b264e17baaba093b78d8bc</anchor>
      <arglist>(ComponentBuilder::ImageProvider *imageProvider) const override</arglist>
    </member>
    <member kind="function">
      <type>Rectangle&lt; float &gt;</type>
      <name>getDrawableBounds</name>
      <anchorfile>classDrawableComposite.html</anchorfile>
      <anchor>a16f80e6cbf84c850e91b436621076019</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>childBoundsChanged</name>
      <anchorfile>classDrawableComposite.html</anchorfile>
      <anchor>a291bed1a9aef208e90ff3f8b6e726be8</anchor>
      <arglist>(Component *) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>childrenChanged</name>
      <anchorfile>classDrawableComposite.html</anchorfile>
      <anchor>a8072353823bed53c18e3293bb1632094</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>parentHierarchyChanged</name>
      <anchorfile>classDrawableComposite.html</anchorfile>
      <anchor>a7cf871338dbd8a3f4b5b445cda80fbe3</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>MarkerList *</type>
      <name>getMarkers</name>
      <anchorfile>classDrawableComposite.html</anchorfile>
      <anchor>a3e27579fe6e7d79e6084fdc70e10a5a3</anchor>
      <arglist>(bool xAxis) override</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char *const</type>
      <name>contentLeftMarkerName</name>
      <anchorfile>classDrawableComposite.html</anchorfile>
      <anchor>aec7b41e0b8a05908a76dfef64c24696e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char *const</type>
      <name>contentRightMarkerName</name>
      <anchorfile>classDrawableComposite.html</anchorfile>
      <anchor>a8c5712364c56e60249a4733748bebff0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char *const</type>
      <name>contentTopMarkerName</name>
      <anchorfile>classDrawableComposite.html</anchorfile>
      <anchor>aca2862d596418e25a34e1331494171c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char *const</type>
      <name>contentBottomMarkerName</name>
      <anchorfile>classDrawableComposite.html</anchorfile>
      <anchor>ac2b79e5eba11fb1e28c4970f17ec4a97</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Identifier</type>
      <name>valueTreeType</name>
      <anchorfile>classDrawableComposite.html</anchorfile>
      <anchor>a79fcbf54418bd3ed7c361267e78dcb6a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DrawableComposite::ValueTreeWrapper</name>
    <filename>classDrawableComposite_1_1ValueTreeWrapper.html</filename>
    <base>Drawable::ValueTreeWrapperBase</base>
    <member kind="function">
      <type></type>
      <name>ValueTreeWrapper</name>
      <anchorfile>classDrawableComposite_1_1ValueTreeWrapper.html</anchorfile>
      <anchor>a226ea81b6d4fbc40ccbfd56b42196850</anchor>
      <arglist>(const ValueTree &amp;state)</arglist>
    </member>
    <member kind="function">
      <type>ValueTree</type>
      <name>getChildList</name>
      <anchorfile>classDrawableComposite_1_1ValueTreeWrapper.html</anchorfile>
      <anchor>a8450173efdb5e66a89ddfbdfb1a4e6b3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ValueTree</type>
      <name>getChildListCreating</name>
      <anchorfile>classDrawableComposite_1_1ValueTreeWrapper.html</anchorfile>
      <anchor>ae840e7be6efa39e431701021b2122d23</anchor>
      <arglist>(UndoManager *undoManager)</arglist>
    </member>
    <member kind="function">
      <type>RelativeParallelogram</type>
      <name>getBoundingBox</name>
      <anchorfile>classDrawableComposite_1_1ValueTreeWrapper.html</anchorfile>
      <anchor>aeb8248e07e781566a2e8d441391551cd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBoundingBox</name>
      <anchorfile>classDrawableComposite_1_1ValueTreeWrapper.html</anchorfile>
      <anchor>acf472a93be9ce2520bbb5adf967b1ac9</anchor>
      <arglist>(const RelativeParallelogram &amp;newBounds, UndoManager *undoManager)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetBoundingBoxToContentArea</name>
      <anchorfile>classDrawableComposite_1_1ValueTreeWrapper.html</anchorfile>
      <anchor>a27e459b1cc288fe3b9b69704b6a72be8</anchor>
      <arglist>(UndoManager *undoManager)</arglist>
    </member>
    <member kind="function">
      <type>RelativeRectangle</type>
      <name>getContentArea</name>
      <anchorfile>classDrawableComposite_1_1ValueTreeWrapper.html</anchorfile>
      <anchor>a9b3ce53ae0da24984199779f8763598c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setContentArea</name>
      <anchorfile>classDrawableComposite_1_1ValueTreeWrapper.html</anchorfile>
      <anchor>a56d6cde91c167fc948b479fa63191392</anchor>
      <arglist>(const RelativeRectangle &amp;newArea, UndoManager *undoManager)</arglist>
    </member>
    <member kind="function">
      <type>MarkerList::ValueTreeWrapper</type>
      <name>getMarkerList</name>
      <anchorfile>classDrawableComposite_1_1ValueTreeWrapper.html</anchorfile>
      <anchor>ae091784eb7137a5cc92364bc6e774594</anchor>
      <arglist>(bool xAxis) const </arglist>
    </member>
    <member kind="function">
      <type>MarkerList::ValueTreeWrapper</type>
      <name>getMarkerListCreating</name>
      <anchorfile>classDrawableComposite_1_1ValueTreeWrapper.html</anchorfile>
      <anchor>afebe568ce8bee588640594d061808606</anchor>
      <arglist>(bool xAxis, UndoManager *undoManager)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Identifier</type>
      <name>topLeft</name>
      <anchorfile>classDrawableComposite_1_1ValueTreeWrapper.html</anchorfile>
      <anchor>a0553ca238cf2927942ec8f9c2fc18dae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Identifier</type>
      <name>topRight</name>
      <anchorfile>classDrawableComposite_1_1ValueTreeWrapper.html</anchorfile>
      <anchor>ab7ac1253c570eefa862e9fd70138f384</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Identifier</type>
      <name>bottomLeft</name>
      <anchorfile>classDrawableComposite_1_1ValueTreeWrapper.html</anchorfile>
      <anchor>ad52741ce0a23d56efc8563a97e16a4d6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DrawableImage</name>
    <filename>classDrawableImage.html</filename>
    <base>Drawable</base>
    <class kind="class">DrawableImage::ValueTreeWrapper</class>
    <member kind="function">
      <type></type>
      <name>DrawableImage</name>
      <anchorfile>classDrawableImage.html</anchorfile>
      <anchor>a3d192dde1f7e9de122120f1824d5cd25</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DrawableImage</name>
      <anchorfile>classDrawableImage.html</anchorfile>
      <anchor>a568855cde08eba0bb72e6f22d8d3e4f4</anchor>
      <arglist>(const DrawableImage &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~DrawableImage</name>
      <anchorfile>classDrawableImage.html</anchorfile>
      <anchor>a7b34a12e946c0511bc534678461fdee2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setImage</name>
      <anchorfile>classDrawableImage.html</anchorfile>
      <anchor>a7d7980f2c8500b3224d1933cc8d65f86</anchor>
      <arglist>(const Image &amp;imageToUse)</arglist>
    </member>
    <member kind="function">
      <type>const Image &amp;</type>
      <name>getImage</name>
      <anchorfile>classDrawableImage.html</anchorfile>
      <anchor>a4504d733f0df8eaa04a379777e1115c3</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOpacity</name>
      <anchorfile>classDrawableImage.html</anchorfile>
      <anchor>a861406d16189ce7cb99128c0908daa03</anchor>
      <arglist>(float newOpacity)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getOpacity</name>
      <anchorfile>classDrawableImage.html</anchorfile>
      <anchor>a59963e5d33e6af788ce007b17f5fdc6e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOverlayColour</name>
      <anchorfile>classDrawableImage.html</anchorfile>
      <anchor>ae3fc9ea168142fe5bb7d51bc99bd19cf</anchor>
      <arglist>(Colour newOverlayColour)</arglist>
    </member>
    <member kind="function">
      <type>Colour</type>
      <name>getOverlayColour</name>
      <anchorfile>classDrawableImage.html</anchorfile>
      <anchor>aa806de491524504600a5e7964c0b3427</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBoundingBox</name>
      <anchorfile>classDrawableImage.html</anchorfile>
      <anchor>a0fd935358208c9c564ed5adbb25f73c3</anchor>
      <arglist>(const RelativeParallelogram &amp;newBounds)</arglist>
    </member>
    <member kind="function">
      <type>const RelativeParallelogram &amp;</type>
      <name>getBoundingBox</name>
      <anchorfile>classDrawableImage.html</anchorfile>
      <anchor>ac962ca5d26adbecd1e31e3f1a931d107</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>paint</name>
      <anchorfile>classDrawableImage.html</anchorfile>
      <anchor>a0c1dd682ea6f4bde7cc404c24ce9d31a</anchor>
      <arglist>(Graphics &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hitTest</name>
      <anchorfile>classDrawableImage.html</anchorfile>
      <anchor>a0a6bd602f7d8dd85366b11b7419209ed</anchor>
      <arglist>(int x, int y) override</arglist>
    </member>
    <member kind="function">
      <type>Drawable *</type>
      <name>createCopy</name>
      <anchorfile>classDrawableImage.html</anchorfile>
      <anchor>a39862bac6df6d0e11745106d6d5f3814</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>Rectangle&lt; float &gt;</type>
      <name>getDrawableBounds</name>
      <anchorfile>classDrawableImage.html</anchorfile>
      <anchor>ab89c15bf7596007b772a400a8d79c4e7</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>refreshFromValueTree</name>
      <anchorfile>classDrawableImage.html</anchorfile>
      <anchor>ae481510e400efee0c4e5ff128fa384ea</anchor>
      <arglist>(const ValueTree &amp;tree, ComponentBuilder &amp;)</arglist>
    </member>
    <member kind="function">
      <type>ValueTree</type>
      <name>createValueTree</name>
      <anchorfile>classDrawableImage.html</anchorfile>
      <anchor>a19f4df3e18af13ff8ed41de98cfdf4d4</anchor>
      <arglist>(ComponentBuilder::ImageProvider *) const override</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Identifier</type>
      <name>valueTreeType</name>
      <anchorfile>classDrawableImage.html</anchorfile>
      <anchor>af85b0cacc82d36803d92a07cb2245d32</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DrawableImage::ValueTreeWrapper</name>
    <filename>classDrawableImage_1_1ValueTreeWrapper.html</filename>
    <base>Drawable::ValueTreeWrapperBase</base>
    <member kind="function">
      <type></type>
      <name>ValueTreeWrapper</name>
      <anchorfile>classDrawableImage_1_1ValueTreeWrapper.html</anchorfile>
      <anchor>a2d75a11b7483fcb75236dc155f007bd0</anchor>
      <arglist>(const ValueTree &amp;state)</arglist>
    </member>
    <member kind="function">
      <type>var</type>
      <name>getImageIdentifier</name>
      <anchorfile>classDrawableImage_1_1ValueTreeWrapper.html</anchorfile>
      <anchor>aba81007fe62146ff1343499802c3b51b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setImageIdentifier</name>
      <anchorfile>classDrawableImage_1_1ValueTreeWrapper.html</anchorfile>
      <anchor>a87aba9ab932e6adb0da02dd77c2c29ec</anchor>
      <arglist>(const var &amp;, UndoManager *)</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>getImageIdentifierValue</name>
      <anchorfile>classDrawableImage_1_1ValueTreeWrapper.html</anchorfile>
      <anchor>acc8cf4ebf3922843b6abe4b5812b0afc</anchor>
      <arglist>(UndoManager *)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getOpacity</name>
      <anchorfile>classDrawableImage_1_1ValueTreeWrapper.html</anchorfile>
      <anchor>ad542679b725cea8595f6117d12fbdab8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOpacity</name>
      <anchorfile>classDrawableImage_1_1ValueTreeWrapper.html</anchorfile>
      <anchor>a78a6569e3dc26d01f1211ec68a2ed40f</anchor>
      <arglist>(float newOpacity, UndoManager *)</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>getOpacityValue</name>
      <anchorfile>classDrawableImage_1_1ValueTreeWrapper.html</anchorfile>
      <anchor>a8a8caec72f19a177b286244e7c9c8bdd</anchor>
      <arglist>(UndoManager *)</arglist>
    </member>
    <member kind="function">
      <type>Colour</type>
      <name>getOverlayColour</name>
      <anchorfile>classDrawableImage_1_1ValueTreeWrapper.html</anchorfile>
      <anchor>ac1823974d19694e77755d192b77f16bd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOverlayColour</name>
      <anchorfile>classDrawableImage_1_1ValueTreeWrapper.html</anchorfile>
      <anchor>a09a93e71983da0106a1add5772d36c14</anchor>
      <arglist>(Colour newColour, UndoManager *)</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>getOverlayColourValue</name>
      <anchorfile>classDrawableImage_1_1ValueTreeWrapper.html</anchorfile>
      <anchor>a3b203ce383a08f9fef4722cbb7ed2ac2</anchor>
      <arglist>(UndoManager *)</arglist>
    </member>
    <member kind="function">
      <type>RelativeParallelogram</type>
      <name>getBoundingBox</name>
      <anchorfile>classDrawableImage_1_1ValueTreeWrapper.html</anchorfile>
      <anchor>a519f7aaf04658a26b484aa944c1e3d12</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBoundingBox</name>
      <anchorfile>classDrawableImage_1_1ValueTreeWrapper.html</anchorfile>
      <anchor>a66269ba017eda1f5a12d928764a23507</anchor>
      <arglist>(const RelativeParallelogram &amp;, UndoManager *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Identifier</type>
      <name>opacity</name>
      <anchorfile>classDrawableImage_1_1ValueTreeWrapper.html</anchorfile>
      <anchor>a2eb3f522f2a263945932325aec6c8ffd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Identifier</type>
      <name>overlay</name>
      <anchorfile>classDrawableImage_1_1ValueTreeWrapper.html</anchorfile>
      <anchor>a87c038c00ada31d98fa53ff64e0372a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Identifier</type>
      <name>image</name>
      <anchorfile>classDrawableImage_1_1ValueTreeWrapper.html</anchorfile>
      <anchor>a2926330f303d36706fe0f2fa865bd798</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Identifier</type>
      <name>topLeft</name>
      <anchorfile>classDrawableImage_1_1ValueTreeWrapper.html</anchorfile>
      <anchor>ac57b823891f541423b30e71c5d49ed80</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Identifier</type>
      <name>topRight</name>
      <anchorfile>classDrawableImage_1_1ValueTreeWrapper.html</anchorfile>
      <anchor>a76a96fe668faeb05516a5733e7f145e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Identifier</type>
      <name>bottomLeft</name>
      <anchorfile>classDrawableImage_1_1ValueTreeWrapper.html</anchorfile>
      <anchor>a645b1394e866d6d7c3a32b85fc3c9c4f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DrawablePath</name>
    <filename>classDrawablePath.html</filename>
    <base>DrawableShape</base>
    <class kind="class">DrawablePath::ValueTreeWrapper</class>
    <member kind="function">
      <type></type>
      <name>DrawablePath</name>
      <anchorfile>classDrawablePath.html</anchorfile>
      <anchor>af685ace4640b8a33605587b25061095c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DrawablePath</name>
      <anchorfile>classDrawablePath.html</anchorfile>
      <anchor>a7cabecf00c1a305e67abdcf28badb413</anchor>
      <arglist>(const DrawablePath &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~DrawablePath</name>
      <anchorfile>classDrawablePath.html</anchorfile>
      <anchor>a421318896d790d59d43728ed81d47af2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPath</name>
      <anchorfile>classDrawablePath.html</anchorfile>
      <anchor>afc77b134d5d7920d8dc3028715c9b3ba</anchor>
      <arglist>(const Path &amp;newPath)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPath</name>
      <anchorfile>classDrawablePath.html</anchorfile>
      <anchor>a51d8c85c76107f04d55e693bfdb2c117</anchor>
      <arglist>(const RelativePointPath &amp;newPath)</arglist>
    </member>
    <member kind="function">
      <type>const Path &amp;</type>
      <name>getPath</name>
      <anchorfile>classDrawablePath.html</anchorfile>
      <anchor>ac93a6f37d524176cd1c94397a827656e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Path &amp;</type>
      <name>getStrokePath</name>
      <anchorfile>classDrawablePath.html</anchorfile>
      <anchor>a33b7a58c89c9e45d164e1faadf04ed39</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Drawable *</type>
      <name>createCopy</name>
      <anchorfile>classDrawablePath.html</anchorfile>
      <anchor>a3cbfe640cd411ee076429a5416c6db1a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>refreshFromValueTree</name>
      <anchorfile>classDrawablePath.html</anchorfile>
      <anchor>a3a0e354bc056708ed60d48328427385a</anchor>
      <arglist>(const ValueTree &amp;tree, ComponentBuilder &amp;builder)</arglist>
    </member>
    <member kind="function">
      <type>ValueTree</type>
      <name>createValueTree</name>
      <anchorfile>classDrawablePath.html</anchorfile>
      <anchor>a27fc29cae074fcd618cd47f9fc3dbfbd</anchor>
      <arglist>(ComponentBuilder::ImageProvider *imageProvider) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~DrawableShape</name>
      <anchorfile>classDrawableShape.html</anchorfile>
      <anchor>a320310cd3b48159d7994742d40c1a654</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFill</name>
      <anchorfile>classDrawableShape.html</anchorfile>
      <anchor>acac534a8806a58ad45fea910a022b0fc</anchor>
      <arglist>(const FillType &amp;newFill)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFill</name>
      <anchorfile>classDrawableShape.html</anchorfile>
      <anchor>a993e5bdb51adb90a18134ecf7a293566</anchor>
      <arglist>(const RelativeFillType &amp;newFill)</arglist>
    </member>
    <member kind="function">
      <type>const RelativeFillType &amp;</type>
      <name>getFill</name>
      <anchorfile>classDrawableShape.html</anchorfile>
      <anchor>adbe8f3b0aa43997ac4029485d87b4b88</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStrokeFill</name>
      <anchorfile>classDrawableShape.html</anchorfile>
      <anchor>aa74fc95e0a629aa77654e88141ce818e</anchor>
      <arglist>(const FillType &amp;newStrokeFill)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStrokeFill</name>
      <anchorfile>classDrawableShape.html</anchorfile>
      <anchor>ad595bc87395c5ee75dfcc8881b53ff65</anchor>
      <arglist>(const RelativeFillType &amp;newStrokeFill)</arglist>
    </member>
    <member kind="function">
      <type>const RelativeFillType &amp;</type>
      <name>getStrokeFill</name>
      <anchorfile>classDrawableShape.html</anchorfile>
      <anchor>aa9706720b417455b2f6f2c2f78ff2ffc</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStrokeType</name>
      <anchorfile>classDrawableShape.html</anchorfile>
      <anchor>a668a8cbaac3e95ff46daaf2510c28bd3</anchor>
      <arglist>(const PathStrokeType &amp;newStrokeType)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStrokeThickness</name>
      <anchorfile>classDrawableShape.html</anchorfile>
      <anchor>aecf3b3fedf3e0caadd910927d10940f9</anchor>
      <arglist>(float newThickness)</arglist>
    </member>
    <member kind="function">
      <type>const PathStrokeType &amp;</type>
      <name>getStrokeType</name>
      <anchorfile>classDrawableShape.html</anchorfile>
      <anchor>a9f774b60dc20e284865c5737686feec6</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDashLengths</name>
      <anchorfile>classDrawableShape.html</anchorfile>
      <anchor>a6ab7162eaee07524732aafd49a61bc74</anchor>
      <arglist>(const Array&lt; float &gt; &amp;newDashLengths)</arglist>
    </member>
    <member kind="function">
      <type>const Array&lt; float &gt; &amp;</type>
      <name>getDashLengths</name>
      <anchorfile>classDrawableShape.html</anchorfile>
      <anchor>af34d41ca638856c7c46c22ad570dab20</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Rectangle&lt; float &gt;</type>
      <name>getDrawableBounds</name>
      <anchorfile>classDrawableShape.html</anchorfile>
      <anchor>abfd0572d0693485010674b5743b31b99</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>paint</name>
      <anchorfile>classDrawableShape.html</anchorfile>
      <anchor>a9e4fb1bf71aeaa24fdc50a2a4a38c7f5</anchor>
      <arglist>(Graphics &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hitTest</name>
      <anchorfile>classDrawableShape.html</anchorfile>
      <anchor>ab5862ed42c7976a43791f56ae6173c27</anchor>
      <arglist>(int x, int y) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>replaceColour</name>
      <anchorfile>classDrawableShape.html</anchorfile>
      <anchor>a0b99604d0b25dac36aaf17c51a631450</anchor>
      <arglist>(Colour originalColour, Colour replacementColour) override</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Identifier</type>
      <name>valueTreeType</name>
      <anchorfile>classDrawablePath.html</anchorfile>
      <anchor>a8f7990a66e3691eda445ae155b24988c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>DrawableShape</name>
      <anchorfile>classDrawableShape.html</anchorfile>
      <anchor>a802d24377bfe9d86c0757d7cded7ad43</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>DrawableShape</name>
      <anchorfile>classDrawableShape.html</anchorfile>
      <anchor>ad39f6fc4cb38f727b473a9d36b8eee43</anchor>
      <arglist>(const DrawableShape &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>pathChanged</name>
      <anchorfile>classDrawableShape.html</anchorfile>
      <anchor>aa21557f80e4dbfede45bead0d53bf10c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>strokeChanged</name>
      <anchorfile>classDrawableShape.html</anchorfile>
      <anchor>ab7003952d3057045477be1cab834652e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>isStrokeVisible</name>
      <anchorfile>classDrawableShape.html</anchorfile>
      <anchor>a6f86229d1c51128bc47092ee7cf50f64</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>refreshFillTypes</name>
      <anchorfile>classDrawableShape.html</anchorfile>
      <anchor>acd67891c52a71792f90e2f6851f7fcfc</anchor>
      <arglist>(const FillAndStrokeState &amp;newState, ComponentBuilder::ImageProvider *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>writeTo</name>
      <anchorfile>classDrawableShape.html</anchorfile>
      <anchor>ac63d5cfc7a027d9c871d6bae60a955fc</anchor>
      <arglist>(FillAndStrokeState &amp;state, ComponentBuilder::ImageProvider *, UndoManager *) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>PathStrokeType</type>
      <name>strokeType</name>
      <anchorfile>classDrawableShape.html</anchorfile>
      <anchor>af636e2ff4b818d2b51994291facb30f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Array&lt; float &gt;</type>
      <name>dashLengths</name>
      <anchorfile>classDrawableShape.html</anchorfile>
      <anchor>a5c20c34a8e2f8de83cd9c83c3abd830d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Path</type>
      <name>path</name>
      <anchorfile>classDrawableShape.html</anchorfile>
      <anchor>a21fde06c1c09e9498575cbbfd36e7793</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Path</type>
      <name>strokePath</name>
      <anchorfile>classDrawableShape.html</anchorfile>
      <anchor>a9400e1628d38b4719c211da4158bc2ff</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DrawablePath::ValueTreeWrapper</name>
    <filename>classDrawablePath_1_1ValueTreeWrapper.html</filename>
    <base>DrawableShape::FillAndStrokeState</base>
    <class kind="class">DrawablePath::ValueTreeWrapper::Element</class>
    <member kind="function">
      <type></type>
      <name>ValueTreeWrapper</name>
      <anchorfile>classDrawablePath_1_1ValueTreeWrapper.html</anchorfile>
      <anchor>a60df26703971f4cf381b2d8ea8695538</anchor>
      <arglist>(const ValueTree &amp;state)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>usesNonZeroWinding</name>
      <anchorfile>classDrawablePath_1_1ValueTreeWrapper.html</anchorfile>
      <anchor>a520c193d536d0ab53cd5de356b6996be</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUsesNonZeroWinding</name>
      <anchorfile>classDrawablePath_1_1ValueTreeWrapper.html</anchorfile>
      <anchor>acdbb5580fcf38ccbe081755a80bf1570</anchor>
      <arglist>(bool b, UndoManager *undoManager)</arglist>
    </member>
    <member kind="function">
      <type>ValueTree</type>
      <name>getPathState</name>
      <anchorfile>classDrawablePath_1_1ValueTreeWrapper.html</anchorfile>
      <anchor>ad1fde4b7a140fef1f7d68b43625cca2d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>readFrom</name>
      <anchorfile>classDrawablePath_1_1ValueTreeWrapper.html</anchorfile>
      <anchor>a7bb8b0f1ab8276db874368de9887c580</anchor>
      <arglist>(const RelativePointPath &amp;relativePath, UndoManager *undoManager)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeTo</name>
      <anchorfile>classDrawablePath_1_1ValueTreeWrapper.html</anchorfile>
      <anchor>a265407367393d65668244c558c7b123d</anchor>
      <arglist>(RelativePointPath &amp;relativePath) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FillAndStrokeState</name>
      <anchorfile>classDrawableShape_1_1FillAndStrokeState.html</anchorfile>
      <anchor>adfecfeb667dfe2df233121ca4eaa8ed9</anchor>
      <arglist>(const ValueTree &amp;state)</arglist>
    </member>
    <member kind="function">
      <type>ValueTree</type>
      <name>getFillState</name>
      <anchorfile>classDrawableShape_1_1FillAndStrokeState.html</anchorfile>
      <anchor>a3e09291e14155308d7e0c419e6b92799</anchor>
      <arglist>(const Identifier &amp;fillOrStrokeType)</arglist>
    </member>
    <member kind="function">
      <type>RelativeFillType</type>
      <name>getFill</name>
      <anchorfile>classDrawableShape_1_1FillAndStrokeState.html</anchorfile>
      <anchor>a4bbfcc962666df3263f031a354f75742</anchor>
      <arglist>(const Identifier &amp;fillOrStrokeType, ComponentBuilder::ImageProvider *) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFill</name>
      <anchorfile>classDrawableShape_1_1FillAndStrokeState.html</anchorfile>
      <anchor>a89626ce36a1d7d8f0e19f52ecdac4af3</anchor>
      <arglist>(const Identifier &amp;fillOrStrokeType, const RelativeFillType &amp;newFill, ComponentBuilder::ImageProvider *, UndoManager *)</arglist>
    </member>
    <member kind="function">
      <type>PathStrokeType</type>
      <name>getStrokeType</name>
      <anchorfile>classDrawableShape_1_1FillAndStrokeState.html</anchorfile>
      <anchor>a7fdb2036ffce9db9c42d549145dcccad</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStrokeType</name>
      <anchorfile>classDrawableShape_1_1FillAndStrokeState.html</anchorfile>
      <anchor>a0ece5105599701ccdbfa1d65a4813c58</anchor>
      <arglist>(const PathStrokeType &amp;newStrokeType, UndoManager *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Identifier</type>
      <name>nonZeroWinding</name>
      <anchorfile>classDrawablePath_1_1ValueTreeWrapper.html</anchorfile>
      <anchor>a233cbbc5988e65e249c94820af5b6beb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Identifier</type>
      <name>point1</name>
      <anchorfile>classDrawablePath_1_1ValueTreeWrapper.html</anchorfile>
      <anchor>aea7b6ab1d84a3a683d07bd40ad82d0bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Identifier</type>
      <name>point2</name>
      <anchorfile>classDrawablePath_1_1ValueTreeWrapper.html</anchorfile>
      <anchor>a5376b890660e14bce30c42e3ec2d2f2e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Identifier</type>
      <name>point3</name>
      <anchorfile>classDrawablePath_1_1ValueTreeWrapper.html</anchorfile>
      <anchor>a5e1d8e76ec4f251fe8e41565baf70426</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Identifier</type>
      <name>type</name>
      <anchorfile>classDrawableShape_1_1FillAndStrokeState.html</anchorfile>
      <anchor>a6e88af5b0b69cf94ac15249483c0120a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Identifier</type>
      <name>colour</name>
      <anchorfile>classDrawableShape_1_1FillAndStrokeState.html</anchorfile>
      <anchor>a347134a3f729efb5db8bf99a8329564d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Identifier</type>
      <name>colours</name>
      <anchorfile>classDrawableShape_1_1FillAndStrokeState.html</anchorfile>
      <anchor>a76ee75c5e53e1af9ccfa7024e98d3e04</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Identifier</type>
      <name>fill</name>
      <anchorfile>classDrawableShape_1_1FillAndStrokeState.html</anchorfile>
      <anchor>a1e913c8ccb288008352c13e904e6eca0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Identifier</type>
      <name>stroke</name>
      <anchorfile>classDrawableShape_1_1FillAndStrokeState.html</anchorfile>
      <anchor>a08c950337bcb50805541ad8f393969bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Identifier</type>
      <name>path</name>
      <anchorfile>classDrawableShape_1_1FillAndStrokeState.html</anchorfile>
      <anchor>ae8ba259de68b9df6260e6ba9ce4cf584</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Identifier</type>
      <name>jointStyle</name>
      <anchorfile>classDrawableShape_1_1FillAndStrokeState.html</anchorfile>
      <anchor>adf99bd7ed361ea8c43d293ef7f868d3e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Identifier</type>
      <name>capStyle</name>
      <anchorfile>classDrawableShape_1_1FillAndStrokeState.html</anchorfile>
      <anchor>abab2633ea9f8a934e8507f4881d2aade</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Identifier</type>
      <name>strokeWidth</name>
      <anchorfile>classDrawableShape_1_1FillAndStrokeState.html</anchorfile>
      <anchor>a28ff0be92cf70bf907ddfa4ba15ad52b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Identifier</type>
      <name>gradientPoint1</name>
      <anchorfile>classDrawableShape_1_1FillAndStrokeState.html</anchorfile>
      <anchor>ad239f8729825e72b61aca6eb452c897a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Identifier</type>
      <name>gradientPoint2</name>
      <anchorfile>classDrawableShape_1_1FillAndStrokeState.html</anchorfile>
      <anchor>affa1e7b20c1a64869e2db4bb321b19e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Identifier</type>
      <name>gradientPoint3</name>
      <anchorfile>classDrawableShape_1_1FillAndStrokeState.html</anchorfile>
      <anchor>afd09b1ebb23a013d95477020d2e066ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Identifier</type>
      <name>radial</name>
      <anchorfile>classDrawableShape_1_1FillAndStrokeState.html</anchorfile>
      <anchor>a35b2d94ae6a13721f581b582400007bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Identifier</type>
      <name>imageId</name>
      <anchorfile>classDrawableShape_1_1FillAndStrokeState.html</anchorfile>
      <anchor>ad5d1a76e523f00264b9e44b26552772d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Identifier</type>
      <name>imageOpacity</name>
      <anchorfile>classDrawableShape_1_1FillAndStrokeState.html</anchorfile>
      <anchor>a5103d236724f9a2757d7ae78f058dbf6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DrawablePath::ValueTreeWrapper::Element</name>
    <filename>classDrawablePath_1_1ValueTreeWrapper_1_1Element.html</filename>
    <member kind="function">
      <type></type>
      <name>Element</name>
      <anchorfile>classDrawablePath_1_1ValueTreeWrapper_1_1Element.html</anchorfile>
      <anchor>a182bb0536be440f286655d58705ed912</anchor>
      <arglist>(const ValueTree &amp;state)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Element</name>
      <anchorfile>classDrawablePath_1_1ValueTreeWrapper_1_1Element.html</anchorfile>
      <anchor>a161eab4724ba67c2a24ec899f156231a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Identifier</type>
      <name>getType</name>
      <anchorfile>classDrawablePath_1_1ValueTreeWrapper_1_1Element.html</anchorfile>
      <anchor>ac8097562285b0095974394de4bc59551</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumControlPoints</name>
      <anchorfile>classDrawablePath_1_1ValueTreeWrapper_1_1Element.html</anchorfile>
      <anchor>ae4e38e3c66c5f1793f60161eb9194cbb</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>RelativePoint</type>
      <name>getControlPoint</name>
      <anchorfile>classDrawablePath_1_1ValueTreeWrapper_1_1Element.html</anchorfile>
      <anchor>ab908d4daa9ac7f8804b082585a07c482</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>getControlPointValue</name>
      <anchorfile>classDrawablePath_1_1ValueTreeWrapper_1_1Element.html</anchorfile>
      <anchor>a428356a0a4f8596d2eca4ba5770fc8c0</anchor>
      <arglist>(int index, UndoManager *)</arglist>
    </member>
    <member kind="function">
      <type>RelativePoint</type>
      <name>getStartPoint</name>
      <anchorfile>classDrawablePath_1_1ValueTreeWrapper_1_1Element.html</anchorfile>
      <anchor>a36dadd1daec35ed8be7224a3cdbdd249</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>RelativePoint</type>
      <name>getEndPoint</name>
      <anchorfile>classDrawablePath_1_1ValueTreeWrapper_1_1Element.html</anchorfile>
      <anchor>a4599e259116e17a57724a019f138ea34</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setControlPoint</name>
      <anchorfile>classDrawablePath_1_1ValueTreeWrapper_1_1Element.html</anchorfile>
      <anchor>ae67ec069b9614c5e9b3a63cc86ed0ba9</anchor>
      <arglist>(int index, const RelativePoint &amp;point, UndoManager *)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getLength</name>
      <anchorfile>classDrawablePath_1_1ValueTreeWrapper_1_1Element.html</anchorfile>
      <anchor>a9292f87d3691d854d9101cc6111d3cdd</anchor>
      <arglist>(Expression::Scope *) const </arglist>
    </member>
    <member kind="function">
      <type>ValueTreeWrapper</type>
      <name>getParent</name>
      <anchorfile>classDrawablePath_1_1ValueTreeWrapper_1_1Element.html</anchorfile>
      <anchor>ad4eee45337597489c6641a0348f6db4e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Element</type>
      <name>getPreviousElement</name>
      <anchorfile>classDrawablePath_1_1ValueTreeWrapper_1_1Element.html</anchorfile>
      <anchor>aaa0147fc39a843203d0a65d4f9be503d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>getModeOfEndPoint</name>
      <anchorfile>classDrawablePath_1_1ValueTreeWrapper_1_1Element.html</anchorfile>
      <anchor>a597cea5b170e400690358b5b00c4d5b5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setModeOfEndPoint</name>
      <anchorfile>classDrawablePath_1_1ValueTreeWrapper_1_1Element.html</anchorfile>
      <anchor>a7adf5df3a10f8624b4a9b57abb1224e0</anchor>
      <arglist>(const String &amp;newMode, UndoManager *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>convertToLine</name>
      <anchorfile>classDrawablePath_1_1ValueTreeWrapper_1_1Element.html</anchorfile>
      <anchor>ae2e323b120d273f239ed9e7667cfe819</anchor>
      <arglist>(UndoManager *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>convertToCubic</name>
      <anchorfile>classDrawablePath_1_1ValueTreeWrapper_1_1Element.html</anchorfile>
      <anchor>ace6be613e553e831b40e09198cb7d931</anchor>
      <arglist>(Expression::Scope *, UndoManager *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>convertToPathBreak</name>
      <anchorfile>classDrawablePath_1_1ValueTreeWrapper_1_1Element.html</anchorfile>
      <anchor>af3d3612f5664aa28830f63369fbb64f4</anchor>
      <arglist>(UndoManager *undoManager)</arglist>
    </member>
    <member kind="function">
      <type>ValueTree</type>
      <name>insertPoint</name>
      <anchorfile>classDrawablePath_1_1ValueTreeWrapper_1_1Element.html</anchorfile>
      <anchor>aeb4fe660bf352166e1e958dbe2273b25</anchor>
      <arglist>(Point&lt; float &gt; targetPoint, Expression::Scope *, UndoManager *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removePoint</name>
      <anchorfile>classDrawablePath_1_1ValueTreeWrapper_1_1Element.html</anchorfile>
      <anchor>a9e3f8061e154623859db61afa2497371</anchor>
      <arglist>(UndoManager *undoManager)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>findProportionAlongLine</name>
      <anchorfile>classDrawablePath_1_1ValueTreeWrapper_1_1Element.html</anchorfile>
      <anchor>a3c92652e30ece916909805945d2e711e</anchor>
      <arglist>(Point&lt; float &gt; targetPoint, Expression::Scope *) const </arglist>
    </member>
    <member kind="variable">
      <type>ValueTree</type>
      <name>state</name>
      <anchorfile>classDrawablePath_1_1ValueTreeWrapper_1_1Element.html</anchorfile>
      <anchor>a7661a9586364dfdbb02ba2908e34226e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Identifier</type>
      <name>mode</name>
      <anchorfile>classDrawablePath_1_1ValueTreeWrapper_1_1Element.html</anchorfile>
      <anchor>a911a7f8c73d60b650f815e64f6d2684f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Identifier</type>
      <name>startSubPathElement</name>
      <anchorfile>classDrawablePath_1_1ValueTreeWrapper_1_1Element.html</anchorfile>
      <anchor>a2b07436db001bf677a70b81eae3311ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Identifier</type>
      <name>closeSubPathElement</name>
      <anchorfile>classDrawablePath_1_1ValueTreeWrapper_1_1Element.html</anchorfile>
      <anchor>a7afc7b8afa97f1aa086fd2dd5e58e616</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Identifier</type>
      <name>lineToElement</name>
      <anchorfile>classDrawablePath_1_1ValueTreeWrapper_1_1Element.html</anchorfile>
      <anchor>a4675f4374c85907b4fe86d21ffe58116</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Identifier</type>
      <name>quadraticToElement</name>
      <anchorfile>classDrawablePath_1_1ValueTreeWrapper_1_1Element.html</anchorfile>
      <anchor>ab21ea7edef3d68b071eba53b3232cc65</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Identifier</type>
      <name>cubicToElement</name>
      <anchorfile>classDrawablePath_1_1ValueTreeWrapper_1_1Element.html</anchorfile>
      <anchor>a5c9f1dd9bbb59220239ffa238566eb19</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char *</type>
      <name>cornerMode</name>
      <anchorfile>classDrawablePath_1_1ValueTreeWrapper_1_1Element.html</anchorfile>
      <anchor>a35740e83f44d2420d298b73c6bee0f86</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char *</type>
      <name>roundedMode</name>
      <anchorfile>classDrawablePath_1_1ValueTreeWrapper_1_1Element.html</anchorfile>
      <anchor>ac0a638e6c79fa05a4ffd78efc2061d78</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char *</type>
      <name>symmetricMode</name>
      <anchorfile>classDrawablePath_1_1ValueTreeWrapper_1_1Element.html</anchorfile>
      <anchor>ad46a5846bf7817ae1524974836fc7d9b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DrawableRectangle</name>
    <filename>classDrawableRectangle.html</filename>
    <base>DrawableShape</base>
    <class kind="class">DrawableRectangle::ValueTreeWrapper</class>
    <member kind="function">
      <type></type>
      <name>DrawableRectangle</name>
      <anchorfile>classDrawableRectangle.html</anchorfile>
      <anchor>a2c89f32aec360f2bcbc14317d88995f2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DrawableRectangle</name>
      <anchorfile>classDrawableRectangle.html</anchorfile>
      <anchor>ac9df48f1eb9808cb9d8cc803659fba8e</anchor>
      <arglist>(const DrawableRectangle &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~DrawableRectangle</name>
      <anchorfile>classDrawableRectangle.html</anchorfile>
      <anchor>ad8515015ca9ca3cf54c0bfe2f004b2e1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRectangle</name>
      <anchorfile>classDrawableRectangle.html</anchorfile>
      <anchor>a8c1259882358487176efb8014a4ee6a0</anchor>
      <arglist>(const RelativeParallelogram &amp;newBounds)</arglist>
    </member>
    <member kind="function">
      <type>const RelativeParallelogram &amp;</type>
      <name>getRectangle</name>
      <anchorfile>classDrawableRectangle.html</anchorfile>
      <anchor>abc9e853d1ba2ad799e0259baef40207a</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const RelativePoint &amp;</type>
      <name>getCornerSize</name>
      <anchorfile>classDrawableRectangle.html</anchorfile>
      <anchor>a8c85f34dbaf2b42d2b2d12ad5b6e8c55</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCornerSize</name>
      <anchorfile>classDrawableRectangle.html</anchorfile>
      <anchor>a1aa94bb3b7d2ff53760e0287f4217c82</anchor>
      <arglist>(const RelativePoint &amp;newSize)</arglist>
    </member>
    <member kind="function">
      <type>Drawable *</type>
      <name>createCopy</name>
      <anchorfile>classDrawableRectangle.html</anchorfile>
      <anchor>a34af64455c0c362d49a340893571b8d0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>refreshFromValueTree</name>
      <anchorfile>classDrawableRectangle.html</anchorfile>
      <anchor>a4ecff8ac31c987e8120019ab8211ba0c</anchor>
      <arglist>(const ValueTree &amp;tree, ComponentBuilder &amp;builder)</arglist>
    </member>
    <member kind="function">
      <type>ValueTree</type>
      <name>createValueTree</name>
      <anchorfile>classDrawableRectangle.html</anchorfile>
      <anchor>a2be91d71b8822deb0c276a256dab0d18</anchor>
      <arglist>(ComponentBuilder::ImageProvider *imageProvider) const </arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Identifier</type>
      <name>valueTreeType</name>
      <anchorfile>classDrawableRectangle.html</anchorfile>
      <anchor>af8fb302856b2ce235256bb6a15b2e6ad</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DrawableRectangle::ValueTreeWrapper</name>
    <filename>classDrawableRectangle_1_1ValueTreeWrapper.html</filename>
    <base>DrawableShape::FillAndStrokeState</base>
    <member kind="function">
      <type></type>
      <name>ValueTreeWrapper</name>
      <anchorfile>classDrawableRectangle_1_1ValueTreeWrapper.html</anchorfile>
      <anchor>a2faf2ce3cefa520c517d68ca93963e56</anchor>
      <arglist>(const ValueTree &amp;state)</arglist>
    </member>
    <member kind="function">
      <type>RelativeParallelogram</type>
      <name>getRectangle</name>
      <anchorfile>classDrawableRectangle_1_1ValueTreeWrapper.html</anchorfile>
      <anchor>a0c1c6dd3125518c617290741e7f1f8c4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRectangle</name>
      <anchorfile>classDrawableRectangle_1_1ValueTreeWrapper.html</anchorfile>
      <anchor>a511d83577f6700b93259175031430ea3</anchor>
      <arglist>(const RelativeParallelogram &amp;newBounds, UndoManager *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCornerSize</name>
      <anchorfile>classDrawableRectangle_1_1ValueTreeWrapper.html</anchorfile>
      <anchor>a800c92b165c53698e3ba489c37143427</anchor>
      <arglist>(const RelativePoint &amp;cornerSize, UndoManager *)</arglist>
    </member>
    <member kind="function">
      <type>RelativePoint</type>
      <name>getCornerSize</name>
      <anchorfile>classDrawableRectangle_1_1ValueTreeWrapper.html</anchorfile>
      <anchor>ab96cc47ffb3914db90aab74c42eeddae</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>getCornerSizeValue</name>
      <anchorfile>classDrawableRectangle_1_1ValueTreeWrapper.html</anchorfile>
      <anchor>a895dd398ced7e8d71c74b459f21472f2</anchor>
      <arglist>(UndoManager *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Identifier</type>
      <name>topLeft</name>
      <anchorfile>classDrawableRectangle_1_1ValueTreeWrapper.html</anchorfile>
      <anchor>a3a2a5555be166a365df5cbdc07d879a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Identifier</type>
      <name>topRight</name>
      <anchorfile>classDrawableRectangle_1_1ValueTreeWrapper.html</anchorfile>
      <anchor>a48265bf9f33a9b5a5196fb9d8dee5c18</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Identifier</type>
      <name>bottomLeft</name>
      <anchorfile>classDrawableRectangle_1_1ValueTreeWrapper.html</anchorfile>
      <anchor>aa6b275efad14fda5688b27a786410c69</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Identifier</type>
      <name>cornerSize</name>
      <anchorfile>classDrawableRectangle_1_1ValueTreeWrapper.html</anchorfile>
      <anchor>a0f3d6a68566ca3aa73532e0d991d2801</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DrawableShape</name>
    <filename>classDrawableShape.html</filename>
    <base>Drawable</base>
    <class kind="class">DrawableShape::FillAndStrokeState</class>
    <class kind="class">DrawableShape::RelativeFillType</class>
  </compound>
  <compound kind="class">
    <name>DrawableShape::FillAndStrokeState</name>
    <filename>classDrawableShape_1_1FillAndStrokeState.html</filename>
    <base>Drawable::ValueTreeWrapperBase</base>
  </compound>
  <compound kind="class">
    <name>DrawableShape::RelativeFillType</name>
    <filename>classDrawableShape_1_1RelativeFillType.html</filename>
    <member kind="function">
      <type></type>
      <name>RelativeFillType</name>
      <anchorfile>classDrawableShape_1_1RelativeFillType.html</anchorfile>
      <anchor>a1d18b56e7bbf1d96851afba0ffc97361</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RelativeFillType</name>
      <anchorfile>classDrawableShape_1_1RelativeFillType.html</anchorfile>
      <anchor>ac8574376679be369466a65c181b7c3bc</anchor>
      <arglist>(const FillType &amp;fill)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RelativeFillType</name>
      <anchorfile>classDrawableShape_1_1RelativeFillType.html</anchorfile>
      <anchor>a57afe9e98af08368a187055a18fb638c</anchor>
      <arglist>(const RelativeFillType &amp;)</arglist>
    </member>
    <member kind="function">
      <type>RelativeFillType &amp;</type>
      <name>operator=</name>
      <anchorfile>classDrawableShape_1_1RelativeFillType.html</anchorfile>
      <anchor>a4ca1fd09ab43316cfbbda2cbf302dcce</anchor>
      <arglist>(const RelativeFillType &amp;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classDrawableShape_1_1RelativeFillType.html</anchorfile>
      <anchor>a4b8a53dd920df244638133e1ba264664</anchor>
      <arglist>(const RelativeFillType &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classDrawableShape_1_1RelativeFillType.html</anchorfile>
      <anchor>a4fc70b5afe16f64e73b84e54327ff503</anchor>
      <arglist>(const RelativeFillType &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isDynamic</name>
      <anchorfile>classDrawableShape_1_1RelativeFillType.html</anchorfile>
      <anchor>a8ce46992fd13ddf094e6a19dd5502fc8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>recalculateCoords</name>
      <anchorfile>classDrawableShape_1_1RelativeFillType.html</anchorfile>
      <anchor>a076d32c0ce212574c253038bc39d7e5f</anchor>
      <arglist>(Expression::Scope *scope)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeTo</name>
      <anchorfile>classDrawableShape_1_1RelativeFillType.html</anchorfile>
      <anchor>a2eec5d9af7ed0b5dd32832af415d9592</anchor>
      <arglist>(ValueTree &amp;v, ComponentBuilder::ImageProvider *, UndoManager *) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>readFrom</name>
      <anchorfile>classDrawableShape_1_1RelativeFillType.html</anchorfile>
      <anchor>aa1a99adfe5f82c9b3fa84c7c6aec6467</anchor>
      <arglist>(const ValueTree &amp;v, ComponentBuilder::ImageProvider *)</arglist>
    </member>
    <member kind="variable">
      <type>FillType</type>
      <name>fill</name>
      <anchorfile>classDrawableShape_1_1RelativeFillType.html</anchorfile>
      <anchor>a0026d1d9aa93d0ff94371b0d88dfd9e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RelativePoint</type>
      <name>gradientPoint1</name>
      <anchorfile>classDrawableShape_1_1RelativeFillType.html</anchorfile>
      <anchor>a4b47e3bf680f03d73acc176869420b6e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RelativePoint</type>
      <name>gradientPoint2</name>
      <anchorfile>classDrawableShape_1_1RelativeFillType.html</anchorfile>
      <anchor>a049a20063145853f8c9f3a470ed801e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RelativePoint</type>
      <name>gradientPoint3</name>
      <anchorfile>classDrawableShape_1_1RelativeFillType.html</anchorfile>
      <anchor>a5a8bbcff3b0d52baf70528f9cdc7a3cd</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DrawableText</name>
    <filename>classDrawableText.html</filename>
    <base>Drawable</base>
    <class kind="class">DrawableText::ValueTreeWrapper</class>
    <member kind="function">
      <type></type>
      <name>DrawableText</name>
      <anchorfile>classDrawableText.html</anchorfile>
      <anchor>a73580c842dc9e49ed090a14477e7c727</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DrawableText</name>
      <anchorfile>classDrawableText.html</anchorfile>
      <anchor>aedc0fd1cd3bd4d4945339021d9359ec0</anchor>
      <arglist>(const DrawableText &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~DrawableText</name>
      <anchorfile>classDrawableText.html</anchorfile>
      <anchor>a5b0c67303f17491c35e0377f6867b290</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setText</name>
      <anchorfile>classDrawableText.html</anchorfile>
      <anchor>a5c724f00d131228ecfc06694adca87b3</anchor>
      <arglist>(const String &amp;newText)</arglist>
    </member>
    <member kind="function">
      <type>const String &amp;</type>
      <name>getText</name>
      <anchorfile>classDrawableText.html</anchorfile>
      <anchor>ab3a4ef75f8f80049d5bfc8016e4e67ac</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setColour</name>
      <anchorfile>classDrawableText.html</anchorfile>
      <anchor>aa1d9dd7d1fb118da47498477566957c6</anchor>
      <arglist>(Colour newColour)</arglist>
    </member>
    <member kind="function">
      <type>Colour</type>
      <name>getColour</name>
      <anchorfile>classDrawableText.html</anchorfile>
      <anchor>a9ae4dc1e473c206245888050805dda15</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFont</name>
      <anchorfile>classDrawableText.html</anchorfile>
      <anchor>a2f2863123ab2a46c938394eb44585bf8</anchor>
      <arglist>(const Font &amp;newFont, bool applySizeAndScale)</arglist>
    </member>
    <member kind="function">
      <type>const Font &amp;</type>
      <name>getFont</name>
      <anchorfile>classDrawableText.html</anchorfile>
      <anchor>aeb7642db1da8de0468a595a12d9a407e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setJustification</name>
      <anchorfile>classDrawableText.html</anchorfile>
      <anchor>a264ef9ee67fef89b3743b95b38cf4509</anchor>
      <arglist>(Justification newJustification)</arglist>
    </member>
    <member kind="function">
      <type>Justification</type>
      <name>getJustification</name>
      <anchorfile>classDrawableText.html</anchorfile>
      <anchor>a28923fd8f51494bf3954ecd108fb04b2</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const RelativeParallelogram &amp;</type>
      <name>getBoundingBox</name>
      <anchorfile>classDrawableText.html</anchorfile>
      <anchor>a6616e9772907060e7a70ddffbfa1716c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBoundingBox</name>
      <anchorfile>classDrawableText.html</anchorfile>
      <anchor>a735a3721700a5c4e63b2c186ca6e0d41</anchor>
      <arglist>(const RelativeParallelogram &amp;newBounds)</arglist>
    </member>
    <member kind="function">
      <type>const RelativeCoordinate &amp;</type>
      <name>getFontHeight</name>
      <anchorfile>classDrawableText.html</anchorfile>
      <anchor>ac8c1a818aa015af5fc4402483752271f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFontHeight</name>
      <anchorfile>classDrawableText.html</anchorfile>
      <anchor>a401c60c9a4cf6a653c6ef1fef4ab9efc</anchor>
      <arglist>(const RelativeCoordinate &amp;newHeight)</arglist>
    </member>
    <member kind="function">
      <type>const RelativeCoordinate &amp;</type>
      <name>getFontHorizontalScale</name>
      <anchorfile>classDrawableText.html</anchorfile>
      <anchor>af2a9dc839402ee623e1b26a438de6b59</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFontHorizontalScale</name>
      <anchorfile>classDrawableText.html</anchorfile>
      <anchor>a7c013a7d6b861f75cf85f5fc9d0e7d93</anchor>
      <arglist>(const RelativeCoordinate &amp;newScale)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>paint</name>
      <anchorfile>classDrawableText.html</anchorfile>
      <anchor>a1971bea7e63338ca8fd7176a39c1c266</anchor>
      <arglist>(Graphics &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>Drawable *</type>
      <name>createCopy</name>
      <anchorfile>classDrawableText.html</anchorfile>
      <anchor>a78862e0739f3b4d79be4a407aab9383f</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>refreshFromValueTree</name>
      <anchorfile>classDrawableText.html</anchorfile>
      <anchor>a7ed3e0fe3ec79a41bd475172892f3eca</anchor>
      <arglist>(const ValueTree &amp;tree, ComponentBuilder &amp;builder)</arglist>
    </member>
    <member kind="function">
      <type>ValueTree</type>
      <name>createValueTree</name>
      <anchorfile>classDrawableText.html</anchorfile>
      <anchor>afa88fbc18ee75d2a0628e93c7f54cd0e</anchor>
      <arglist>(ComponentBuilder::ImageProvider *imageProvider) const override</arglist>
    </member>
    <member kind="function">
      <type>Rectangle&lt; float &gt;</type>
      <name>getDrawableBounds</name>
      <anchorfile>classDrawableText.html</anchorfile>
      <anchor>adaaf0906b78f3e723ae799b2296bfe58</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Identifier</type>
      <name>valueTreeType</name>
      <anchorfile>classDrawableText.html</anchorfile>
      <anchor>ad6de88be408a5940086cbb56891e1b5e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DrawableText::ValueTreeWrapper</name>
    <filename>classDrawableText_1_1ValueTreeWrapper.html</filename>
    <base>Drawable::ValueTreeWrapperBase</base>
    <member kind="function">
      <type></type>
      <name>ValueTreeWrapper</name>
      <anchorfile>classDrawableText_1_1ValueTreeWrapper.html</anchorfile>
      <anchor>aeaeb10047c8b037d7a15456da04769a7</anchor>
      <arglist>(const ValueTree &amp;state)</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>getText</name>
      <anchorfile>classDrawableText_1_1ValueTreeWrapper.html</anchorfile>
      <anchor>a52ee41015bb6c9f4ef6d9544e5a559a2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setText</name>
      <anchorfile>classDrawableText_1_1ValueTreeWrapper.html</anchorfile>
      <anchor>aeeb6cbe54ad3a2e6ff65ec97bdf014e5</anchor>
      <arglist>(const String &amp;newText, UndoManager *undoManager)</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>getTextValue</name>
      <anchorfile>classDrawableText_1_1ValueTreeWrapper.html</anchorfile>
      <anchor>a4909bf1667f8518156ed4b9683d3528c</anchor>
      <arglist>(UndoManager *undoManager)</arglist>
    </member>
    <member kind="function">
      <type>Colour</type>
      <name>getColour</name>
      <anchorfile>classDrawableText_1_1ValueTreeWrapper.html</anchorfile>
      <anchor>a8d53f6956c39a21f567397b4e624e29e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setColour</name>
      <anchorfile>classDrawableText_1_1ValueTreeWrapper.html</anchorfile>
      <anchor>aa96270a68198046a2b0b83d9856bb55a</anchor>
      <arglist>(Colour newColour, UndoManager *undoManager)</arglist>
    </member>
    <member kind="function">
      <type>Justification</type>
      <name>getJustification</name>
      <anchorfile>classDrawableText_1_1ValueTreeWrapper.html</anchorfile>
      <anchor>ac9bdcc2a651b7c4ab2e801fc14117188</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setJustification</name>
      <anchorfile>classDrawableText_1_1ValueTreeWrapper.html</anchorfile>
      <anchor>abc5121a2cc0c39107bd1e78b4fcd4a00</anchor>
      <arglist>(Justification newJustification, UndoManager *undoManager)</arglist>
    </member>
    <member kind="function">
      <type>Font</type>
      <name>getFont</name>
      <anchorfile>classDrawableText_1_1ValueTreeWrapper.html</anchorfile>
      <anchor>ad315746c06541231e8880abf442da325</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFont</name>
      <anchorfile>classDrawableText_1_1ValueTreeWrapper.html</anchorfile>
      <anchor>ade0fb00ee19f072454685d32a5f3063d</anchor>
      <arglist>(const Font &amp;newFont, UndoManager *undoManager)</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>getFontValue</name>
      <anchorfile>classDrawableText_1_1ValueTreeWrapper.html</anchorfile>
      <anchor>ae3f5a8078bd285b8dc0ba465cac0ec2a</anchor>
      <arglist>(UndoManager *undoManager)</arglist>
    </member>
    <member kind="function">
      <type>RelativeParallelogram</type>
      <name>getBoundingBox</name>
      <anchorfile>classDrawableText_1_1ValueTreeWrapper.html</anchorfile>
      <anchor>a56614741f509c5d73f797f61c43b189b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBoundingBox</name>
      <anchorfile>classDrawableText_1_1ValueTreeWrapper.html</anchorfile>
      <anchor>a6355eeabb6f4f2b85f29a2ea792f2c1f</anchor>
      <arglist>(const RelativeParallelogram &amp;newBounds, UndoManager *undoManager)</arglist>
    </member>
    <member kind="function">
      <type>RelativeCoordinate</type>
      <name>getFontHeight</name>
      <anchorfile>classDrawableText_1_1ValueTreeWrapper.html</anchorfile>
      <anchor>a9e33ab845a7176341eb11b857d835f99</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFontHeight</name>
      <anchorfile>classDrawableText_1_1ValueTreeWrapper.html</anchorfile>
      <anchor>a90771c9155be7eee5b3ff0d0ecab1981</anchor>
      <arglist>(const RelativeCoordinate &amp;newHeight, UndoManager *undoManager)</arglist>
    </member>
    <member kind="function">
      <type>RelativeCoordinate</type>
      <name>getFontHorizontalScale</name>
      <anchorfile>classDrawableText_1_1ValueTreeWrapper.html</anchorfile>
      <anchor>aec22e7bde043a1137c87d4122e6e08e5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFontHorizontalScale</name>
      <anchorfile>classDrawableText_1_1ValueTreeWrapper.html</anchorfile>
      <anchor>a0d9cc3512aca539de011270f968528cc</anchor>
      <arglist>(const RelativeCoordinate &amp;newScale, UndoManager *undoManager)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Identifier</type>
      <name>text</name>
      <anchorfile>classDrawableText_1_1ValueTreeWrapper.html</anchorfile>
      <anchor>a286747f134e7fe4579075f71781d62cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Identifier</type>
      <name>colour</name>
      <anchorfile>classDrawableText_1_1ValueTreeWrapper.html</anchorfile>
      <anchor>a38d4e6ba034789d76fc533e4950dc5ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Identifier</type>
      <name>font</name>
      <anchorfile>classDrawableText_1_1ValueTreeWrapper.html</anchorfile>
      <anchor>a58fc597095c77686d5eb2d97e539e64f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Identifier</type>
      <name>justification</name>
      <anchorfile>classDrawableText_1_1ValueTreeWrapper.html</anchorfile>
      <anchor>a568480e7695b8c4be65f179e34fc1b61</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Identifier</type>
      <name>topLeft</name>
      <anchorfile>classDrawableText_1_1ValueTreeWrapper.html</anchorfile>
      <anchor>af905ad717d903f7f7c6216e3588faa45</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Identifier</type>
      <name>topRight</name>
      <anchorfile>classDrawableText_1_1ValueTreeWrapper.html</anchorfile>
      <anchor>a4080580131c5dafed34ad920128d3c07</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Identifier</type>
      <name>bottomLeft</name>
      <anchorfile>classDrawableText_1_1ValueTreeWrapper.html</anchorfile>
      <anchor>a3ba68bedf56180c1563b22bc5cd1f8f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Identifier</type>
      <name>fontHeight</name>
      <anchorfile>classDrawableText_1_1ValueTreeWrapper.html</anchorfile>
      <anchor>a2b1cf90acc44a5ca2b9a7717962b44de</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Identifier</type>
      <name>fontHScale</name>
      <anchorfile>classDrawableText_1_1ValueTreeWrapper.html</anchorfile>
      <anchor>ac0a4ff12678830dd3a2cd0d1bd3c6e2d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DropShadow</name>
    <filename>structDropShadow.html</filename>
    <member kind="function">
      <type></type>
      <name>DropShadow</name>
      <anchorfile>structDropShadow.html</anchorfile>
      <anchor>a4ed8af89cfe25cfbd823ce0a70413aa3</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DropShadow</name>
      <anchorfile>structDropShadow.html</anchorfile>
      <anchor>a151588cf37044442a7ca07b0a80e70d3</anchor>
      <arglist>(Colour shadowColour, int radius, Point&lt; int &gt; offset) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawForImage</name>
      <anchorfile>structDropShadow.html</anchorfile>
      <anchor>aa0d35d4315229ffb6e6a14145efd2c03</anchor>
      <arglist>(Graphics &amp;g, const Image &amp;srcImage) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawForPath</name>
      <anchorfile>structDropShadow.html</anchorfile>
      <anchor>afa7eedb505b8e6e66bfa257875ac972a</anchor>
      <arglist>(Graphics &amp;g, const Path &amp;path) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawForRectangle</name>
      <anchorfile>structDropShadow.html</anchorfile>
      <anchor>a0aa6c6db73e4969bb055ae60f51309c4</anchor>
      <arglist>(Graphics &amp;g, const Rectangle&lt; int &gt; &amp;area) const </arglist>
    </member>
    <member kind="variable">
      <type>Colour</type>
      <name>colour</name>
      <anchorfile>structDropShadow.html</anchorfile>
      <anchor>ad8031be7a935da40c11f2ede9b9f2a44</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>radius</name>
      <anchorfile>structDropShadow.html</anchorfile>
      <anchor>a96cbbc37579f9a2627f342a7dc6be568</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Point&lt; int &gt;</type>
      <name>offset</name>
      <anchorfile>structDropShadow.html</anchorfile>
      <anchor>af2c204224ab00ac6614f1b67701ca68a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DropShadowEffect</name>
    <filename>classDropShadowEffect.html</filename>
    <base>ImageEffectFilter</base>
    <member kind="function">
      <type></type>
      <name>DropShadowEffect</name>
      <anchorfile>classDropShadowEffect.html</anchorfile>
      <anchor>a385d398423cf81f8e073195ea84473b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~DropShadowEffect</name>
      <anchorfile>classDropShadowEffect.html</anchorfile>
      <anchor>ab74475a46901a77353310c39c82af5bd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setShadowProperties</name>
      <anchorfile>classDropShadowEffect.html</anchorfile>
      <anchor>acf199925c902f335d7751eb568715b84</anchor>
      <arglist>(const DropShadow &amp;newShadow)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyEffect</name>
      <anchorfile>classDropShadowEffect.html</anchorfile>
      <anchor>aeee3f19864372e9c6ef4623df4e5a686</anchor>
      <arglist>(Image &amp;sourceImage, Graphics &amp;destContext, float scaleFactor, float alpha)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ImageEffectFilter</name>
      <anchorfile>classImageEffectFilter.html</anchorfile>
      <anchor>ac8eceef9cd72ea8f81f992e2db0ea791</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DropShadower</name>
    <filename>classDropShadower.html</filename>
    <base protection="private">ComponentListener</base>
    <member kind="function">
      <type></type>
      <name>DropShadower</name>
      <anchorfile>classDropShadower.html</anchorfile>
      <anchor>a14c45e01c95902e0a8f5a975c1519d69</anchor>
      <arglist>(const DropShadow &amp;shadowType)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~DropShadower</name>
      <anchorfile>classDropShadower.html</anchorfile>
      <anchor>ab4880dc6ddeae4e94bdb9e36e4f59ae0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOwner</name>
      <anchorfile>classDropShadower.html</anchorfile>
      <anchor>aa66afaff8ac325df14206e274589769f</anchor>
      <arglist>(Component *componentToFollow)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DrumPadGridProgram</name>
    <filename>structDrumPadGridProgram.html</filename>
    <base>LEDGrid::Program</base>
    <class kind="struct">DrumPadGridProgram::GridFill</class>
    <member kind="enumeration">
      <type></type>
      <name>SlideDirection</name>
      <anchorfile>structDrumPadGridProgram.html</anchorfile>
      <anchor>ae0883fdca11734f26ab431b89c52255f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>up</name>
      <anchorfile>structDrumPadGridProgram.html</anchorfile>
      <anchor>ae0883fdca11734f26ab431b89c52255fac78595093d85411cd8dd90149f7f5b85</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>down</name>
      <anchorfile>structDrumPadGridProgram.html</anchorfile>
      <anchor>ae0883fdca11734f26ab431b89c52255fac484ce03a21cd3a465ce6fb5f163ee1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>left</name>
      <anchorfile>structDrumPadGridProgram.html</anchorfile>
      <anchor>ae0883fdca11734f26ab431b89c52255fa4aecd6f161fbd8d38e6d8e185785b061</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>right</name>
      <anchorfile>structDrumPadGridProgram.html</anchorfile>
      <anchor>ae0883fdca11734f26ab431b89c52255fa8eb83796a8fa97e284669a0d9e1375d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>none</name>
      <anchorfile>structDrumPadGridProgram.html</anchorfile>
      <anchor>ae0883fdca11734f26ab431b89c52255fa05a98c29c432e8cc6958ada6f0d6733f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DrumPadGridProgram</name>
      <anchorfile>structDrumPadGridProgram.html</anchorfile>
      <anchor>ab9181eafba45350a054d55d2d94d7d8e</anchor>
      <arglist>(LEDGrid &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>startTouch</name>
      <anchorfile>structDrumPadGridProgram.html</anchorfile>
      <anchor>aaba3011385a30eb961683e83e7909d23</anchor>
      <arglist>(float startX, float startY)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>endTouch</name>
      <anchorfile>structDrumPadGridProgram.html</anchorfile>
      <anchor>a3ea6a2eae6eb61d2fbbfc84469003755</anchor>
      <arglist>(float startX, float startY)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sendTouch</name>
      <anchorfile>structDrumPadGridProgram.html</anchorfile>
      <anchor>a2c0f1dd7b3a912720598088c2ba5b882</anchor>
      <arglist>(float x, float y, float z, LEDColour)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPadAnimationState</name>
      <anchorfile>structDrumPadGridProgram.html</anchorfile>
      <anchor>aca33909f2f8032971748769f945abe68</anchor>
      <arglist>(uint32 padIdx, double loopTimeSecs, double currentProgress)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>suspendAnimations</name>
      <anchorfile>structDrumPadGridProgram.html</anchorfile>
      <anchor>a9e64f0b336e1cdaf95ff7825cef4c7ee</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resumeAnimations</name>
      <anchorfile>structDrumPadGridProgram.html</anchorfile>
      <anchor>aa9a509afc238bb4063fbb50a71c7e401</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGridFills</name>
      <anchorfile>structDrumPadGridProgram.html</anchorfile>
      <anchor>a00dff0bc8385c3ab4c0d14734bc17ed3</anchor>
      <arglist>(int numColumns, int numRows, const juce::Array&lt; GridFill &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>triggerSlideTransition</name>
      <anchorfile>structDrumPadGridProgram.html</anchorfile>
      <anchor>a7c7035a252b8f5b960fa647599e67d78</anchor>
      <arglist>(int newNumColumns, int newNumRows, const juce::Array&lt; GridFill &gt; &amp;newFills, SlideDirection)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DrumPadGridProgram::GridFill</name>
    <filename>structDrumPadGridProgram_1_1GridFill.html</filename>
    <member kind="enumeration">
      <type></type>
      <name>FillType</name>
      <anchorfile>structDrumPadGridProgram_1_1GridFill.html</anchorfile>
      <anchor>ae8c97bf48e8f16e99118f2d12dab6948</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>gradient</name>
      <anchorfile>structDrumPadGridProgram_1_1GridFill.html</anchorfile>
      <anchor>ae8c97bf48e8f16e99118f2d12dab6948a0ba4f78b5be6309f64cc2bee8a063fa5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>filled</name>
      <anchorfile>structDrumPadGridProgram_1_1GridFill.html</anchorfile>
      <anchor>ae8c97bf48e8f16e99118f2d12dab6948a91d5fae0bf535125fb7d392050f37790</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>hollow</name>
      <anchorfile>structDrumPadGridProgram_1_1GridFill.html</anchorfile>
      <anchor>ae8c97bf48e8f16e99118f2d12dab6948a52fd84059bd308d6a783b09b0d1b4af3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>hollowPlus</name>
      <anchorfile>structDrumPadGridProgram_1_1GridFill.html</anchorfile>
      <anchor>ae8c97bf48e8f16e99118f2d12dab6948a864352425ee15a656b54e8c4b851c654</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>dotPulsing</name>
      <anchorfile>structDrumPadGridProgram_1_1GridFill.html</anchorfile>
      <anchor>ae8c97bf48e8f16e99118f2d12dab6948a45c91f6a77d1d35d07130c0613a64631</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>dotBlinking</name>
      <anchorfile>structDrumPadGridProgram_1_1GridFill.html</anchorfile>
      <anchor>ae8c97bf48e8f16e99118f2d12dab6948a17d62997dfdcc6e7487ca030b482e791</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>pizzaFilled</name>
      <anchorfile>structDrumPadGridProgram_1_1GridFill.html</anchorfile>
      <anchor>ae8c97bf48e8f16e99118f2d12dab6948a1f34beab56825fc51724f25f87f64f62</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>pizzaHollow</name>
      <anchorfile>structDrumPadGridProgram_1_1GridFill.html</anchorfile>
      <anchor>ae8c97bf48e8f16e99118f2d12dab6948af11bdf1204be6860e201a3eac606b771</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>LEDColour</type>
      <name>colour</name>
      <anchorfile>structDrumPadGridProgram_1_1GridFill.html</anchorfile>
      <anchor>a8209446ba4218dbc59e899bf8e29107b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FillType</type>
      <name>fillType</name>
      <anchorfile>structDrumPadGridProgram_1_1GridFill.html</anchorfile>
      <anchor>a4ee0f13cd4b8f02d3e909d681a24194b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DummyCriticalSection</name>
    <filename>classDummyCriticalSection.html</filename>
    <class kind="struct">DummyCriticalSection::ScopedLockType</class>
    <member kind="typedef">
      <type>ScopedLockType</type>
      <name>ScopedUnlockType</name>
      <anchorfile>classDummyCriticalSection.html</anchorfile>
      <anchor>a455be3752f5f32c56fabe0b7b477b6f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DummyCriticalSection</name>
      <anchorfile>classDummyCriticalSection.html</anchorfile>
      <anchor>aed067ef6b51dcca1f25f19231a99b595</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~DummyCriticalSection</name>
      <anchorfile>classDummyCriticalSection.html</anchorfile>
      <anchor>aae13b7a18e9cf77c6d85792a151f2d1c</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enter</name>
      <anchorfile>classDummyCriticalSection.html</anchorfile>
      <anchor>a3511e9f002535174e24aa2e0983b60d9</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>tryEnter</name>
      <anchorfile>classDummyCriticalSection.html</anchorfile>
      <anchor>a55f19ff3a0b0f91a1d025939d1c03a3c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>exit</name>
      <anchorfile>classDummyCriticalSection.html</anchorfile>
      <anchor>a00630497a7c9a449eca4630abf115fa6</anchor>
      <arglist>() const noexcept</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DummyCriticalSection::ScopedLockType</name>
    <filename>structDummyCriticalSection_1_1ScopedLockType.html</filename>
    <member kind="function">
      <type></type>
      <name>ScopedLockType</name>
      <anchorfile>structDummyCriticalSection_1_1ScopedLockType.html</anchorfile>
      <anchor>af14a852a564837bcd71ad5592dec3b2d</anchor>
      <arglist>(const DummyCriticalSection &amp;) noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DynamicLibrary</name>
    <filename>classDynamicLibrary.html</filename>
    <member kind="function">
      <type></type>
      <name>DynamicLibrary</name>
      <anchorfile>classDynamicLibrary.html</anchorfile>
      <anchor>a7c6a13e65177869af7116175c7745e2e</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DynamicLibrary</name>
      <anchorfile>classDynamicLibrary.html</anchorfile>
      <anchor>af9ad02ee239000e67ff664ef4b5dfe2c</anchor>
      <arglist>(const String &amp;name)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~DynamicLibrary</name>
      <anchorfile>classDynamicLibrary.html</anchorfile>
      <anchor>a25dd7a7cd386fbc1c8abde597c39c881</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>open</name>
      <anchorfile>classDynamicLibrary.html</anchorfile>
      <anchor>ab64b6f35270c87d0c69b422854683674</anchor>
      <arglist>(const String &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>close</name>
      <anchorfile>classDynamicLibrary.html</anchorfile>
      <anchor>ac894163d2ef226237fd6d6cfaeb77fce</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>getFunction</name>
      <anchorfile>classDynamicLibrary.html</anchorfile>
      <anchor>a278ed4824af45759270b5c1eeba9dcb6</anchor>
      <arglist>(const String &amp;functionName) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>getNativeHandle</name>
      <anchorfile>classDynamicLibrary.html</anchorfile>
      <anchor>acf0128264e0070e40f1be2eac26073e4</anchor>
      <arglist>() const noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DynamicObject</name>
    <filename>classDynamicObject.html</filename>
    <base>ReferenceCountedObject</base>
    <member kind="typedef">
      <type>ReferenceCountedObjectPtr&lt; DynamicObject &gt;</type>
      <name>Ptr</name>
      <anchorfile>classDynamicObject.html</anchorfile>
      <anchor>a794f16134686a9283cd0a8c6a07d963f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DynamicObject</name>
      <anchorfile>classDynamicObject.html</anchorfile>
      <anchor>a50a7adf3d7d1f411ed2aa9a663bfe275</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DynamicObject</name>
      <anchorfile>classDynamicObject.html</anchorfile>
      <anchor>afd2d04d5cb0612b22afcd6ba2a1c8f15</anchor>
      <arglist>(const DynamicObject &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~DynamicObject</name>
      <anchorfile>classDynamicObject.html</anchorfile>
      <anchor>a149b612e1f0288b115178874bd0cba93</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>hasProperty</name>
      <anchorfile>classDynamicObject.html</anchorfile>
      <anchor>aed8e9e391f64fd8ed239ebf63c9b61c8</anchor>
      <arglist>(const Identifier &amp;propertyName) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const var &amp;</type>
      <name>getProperty</name>
      <anchorfile>classDynamicObject.html</anchorfile>
      <anchor>a122365ea1bb6b19ff84fd8fe18f8d68e</anchor>
      <arglist>(const Identifier &amp;propertyName) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setProperty</name>
      <anchorfile>classDynamicObject.html</anchorfile>
      <anchor>a837de05269dd0b343fd238cd95edca2a</anchor>
      <arglist>(const Identifier &amp;propertyName, const var &amp;newValue)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>removeProperty</name>
      <anchorfile>classDynamicObject.html</anchorfile>
      <anchor>ab79f3693cafde34db5040e3d364fc1bf</anchor>
      <arglist>(const Identifier &amp;propertyName)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>hasMethod</name>
      <anchorfile>classDynamicObject.html</anchorfile>
      <anchor>a59cee4cadee9ea933a33629237aba3b7</anchor>
      <arglist>(const Identifier &amp;methodName) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual var</type>
      <name>invokeMethod</name>
      <anchorfile>classDynamicObject.html</anchorfile>
      <anchor>a8fe197fff56356d10158744ee33d2e22</anchor>
      <arglist>(Identifier methodName, const var::NativeFunctionArgs &amp;args)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMethod</name>
      <anchorfile>classDynamicObject.html</anchorfile>
      <anchor>a33a5deff9b3da3e4d84dfbbf5bc408d5</anchor>
      <arglist>(Identifier methodName, var::NativeFunction function)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classDynamicObject.html</anchorfile>
      <anchor>a2512456cd96acf25a48af969b9269944</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>NamedValueSet &amp;</type>
      <name>getProperties</name>
      <anchorfile>classDynamicObject.html</anchorfile>
      <anchor>a88367bccf6d0520f53283812ecdc10c9</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cloneAllProperties</name>
      <anchorfile>classDynamicObject.html</anchorfile>
      <anchor>a98df6114a279bb62c7720fa4eb0f3566</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Ptr</type>
      <name>clone</name>
      <anchorfile>classDynamicObject.html</anchorfile>
      <anchor>ab149c5346a8edbc969f1d7a4dd161817</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>writeAsJSON</name>
      <anchorfile>classDynamicObject.html</anchorfile>
      <anchor>aed11473dde7a39682ae17938d53b2840</anchor>
      <arglist>(OutputStream &amp;, int indentLevel, bool allOnOneLine)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>EdgeTable</name>
    <filename>classEdgeTable.html</filename>
    <member kind="function">
      <type></type>
      <name>EdgeTable</name>
      <anchorfile>classEdgeTable.html</anchorfile>
      <anchor>aa220ed166fa71ac953d39c6512588464</anchor>
      <arglist>(const Rectangle&lt; int &gt; &amp;clipLimits, const Path &amp;pathToAdd, const AffineTransform &amp;transform)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EdgeTable</name>
      <anchorfile>classEdgeTable.html</anchorfile>
      <anchor>af1255353604f678892577a84414c7fe0</anchor>
      <arglist>(const Rectangle&lt; int &gt; &amp;rectangleToAdd)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EdgeTable</name>
      <anchorfile>classEdgeTable.html</anchorfile>
      <anchor>ae8f971e5f529f4e8b7c5793c9bba065f</anchor>
      <arglist>(const RectangleList&lt; int &gt; &amp;rectanglesToAdd)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EdgeTable</name>
      <anchorfile>classEdgeTable.html</anchorfile>
      <anchor>a07a8a1a0f7a97e73e41ea30405160c3d</anchor>
      <arglist>(const RectangleList&lt; float &gt; &amp;rectanglesToAdd)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EdgeTable</name>
      <anchorfile>classEdgeTable.html</anchorfile>
      <anchor>ad1edf1a5e85ef52cddd76bfba0ad6014</anchor>
      <arglist>(const Rectangle&lt; float &gt; &amp;rectangleToAdd)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EdgeTable</name>
      <anchorfile>classEdgeTable.html</anchorfile>
      <anchor>a33569f32fa9ef5ef8054bb8bf763a82f</anchor>
      <arglist>(const EdgeTable &amp;)</arglist>
    </member>
    <member kind="function">
      <type>EdgeTable &amp;</type>
      <name>operator=</name>
      <anchorfile>classEdgeTable.html</anchorfile>
      <anchor>addd8e437e36dafb549ce1ce107fdc624</anchor>
      <arglist>(const EdgeTable &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~EdgeTable</name>
      <anchorfile>classEdgeTable.html</anchorfile>
      <anchor>abd3d8878df1c4510d5e682fd0aabe465</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clipToRectangle</name>
      <anchorfile>classEdgeTable.html</anchorfile>
      <anchor>a8b4f654ca67629b18fd7bcfb181089db</anchor>
      <arglist>(const Rectangle&lt; int &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>excludeRectangle</name>
      <anchorfile>classEdgeTable.html</anchorfile>
      <anchor>ace4a4713af3e35ed6276ebc176e078e1</anchor>
      <arglist>(const Rectangle&lt; int &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clipToEdgeTable</name>
      <anchorfile>classEdgeTable.html</anchorfile>
      <anchor>ae97f9c60cc5f74f391088689e5b959c7</anchor>
      <arglist>(const EdgeTable &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clipLineToMask</name>
      <anchorfile>classEdgeTable.html</anchorfile>
      <anchor>a65f05a5b115733ef69094e865987d295</anchor>
      <arglist>(int x, int y, const uint8 *mask, int maskStride, int numPixels)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEmpty</name>
      <anchorfile>classEdgeTable.html</anchorfile>
      <anchor>a858bd89f50cccb6d7276e6afa2796cb5</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const Rectangle&lt; int &gt; &amp;</type>
      <name>getMaximumBounds</name>
      <anchorfile>classEdgeTable.html</anchorfile>
      <anchor>ae8103c8b428695ba7a436eee2d801a40</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>translate</name>
      <anchorfile>classEdgeTable.html</anchorfile>
      <anchor>acd16cc78f5d70567ef0fe0f6f29bd9a5</anchor>
      <arglist>(float dx, int dy) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>multiplyLevels</name>
      <anchorfile>classEdgeTable.html</anchorfile>
      <anchor>ae6babbc5825dd5031618bf60a1d3ac72</anchor>
      <arglist>(float factor)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>optimiseTable</name>
      <anchorfile>classEdgeTable.html</anchorfile>
      <anchor>a776538a2ee908e46769e6c4b56dbf5df</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>iterate</name>
      <anchorfile>classEdgeTable.html</anchorfile>
      <anchor>af2a5e19d16658853b61684af190e03f6</anchor>
      <arglist>(EdgeTableIterationCallback &amp;iterationCallback) const noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Expression</name>
    <filename>classExpression.html</filename>
    <class kind="class">Expression::Scope</class>
    <class kind="struct">Expression::Symbol</class>
    <member kind="enumeration">
      <type></type>
      <name>Type</name>
      <anchorfile>classExpression.html</anchorfile>
      <anchor>aa416ac50fdbe8bdea9c59f5c78f0c85b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>constantType</name>
      <anchorfile>classExpression.html</anchorfile>
      <anchor>aa416ac50fdbe8bdea9c59f5c78f0c85ba4c05ef0368ceb383ecdd4933ddb3b5db</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>functionType</name>
      <anchorfile>classExpression.html</anchorfile>
      <anchor>aa416ac50fdbe8bdea9c59f5c78f0c85ba4af6ecec6a8598073b3f70f7f1c10eb5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>operatorType</name>
      <anchorfile>classExpression.html</anchorfile>
      <anchor>aa416ac50fdbe8bdea9c59f5c78f0c85ba222a2fd6162d6870e34cd9f8e6dc4dc5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>symbolType</name>
      <anchorfile>classExpression.html</anchorfile>
      <anchor>aa416ac50fdbe8bdea9c59f5c78f0c85baef74a77024f2e22f163d3b2346b99162</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Expression</name>
      <anchorfile>classExpression.html</anchorfile>
      <anchor>afcf87716bf0abfe8d414c92529e1564a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Expression</name>
      <anchorfile>classExpression.html</anchorfile>
      <anchor>a3e99570b177da619eeb2c5787cbb148e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Expression</name>
      <anchorfile>classExpression.html</anchorfile>
      <anchor>a568506b67cd65c7f8c2885c9146c98bd</anchor>
      <arglist>(const Expression &amp;)</arglist>
    </member>
    <member kind="function">
      <type>Expression &amp;</type>
      <name>operator=</name>
      <anchorfile>classExpression.html</anchorfile>
      <anchor>aeec8bdd655b0dc89c8205e67884f091b</anchor>
      <arglist>(const Expression &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Expression</name>
      <anchorfile>classExpression.html</anchorfile>
      <anchor>a29b040da8e934faeb1efa47f0beeec77</anchor>
      <arglist>(Expression &amp;&amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Expression &amp;</type>
      <name>operator=</name>
      <anchorfile>classExpression.html</anchorfile>
      <anchor>a680c8e41ee22156ded3e55ad67d67a21</anchor>
      <arglist>(Expression &amp;&amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Expression</name>
      <anchorfile>classExpression.html</anchorfile>
      <anchor>a342898044343143057a6a7f1b0db0286</anchor>
      <arglist>(double constant)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Expression</name>
      <anchorfile>classExpression.html</anchorfile>
      <anchor>a2c3dc1d26f9bfd463c3ef228bf7c39c9</anchor>
      <arglist>(const String &amp;stringToParse, String &amp;parseError)</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>toString</name>
      <anchorfile>classExpression.html</anchorfile>
      <anchor>a5eecd6f1f48d2baf2ce47d7fedc85d88</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Expression</type>
      <name>operator+</name>
      <anchorfile>classExpression.html</anchorfile>
      <anchor>a40c9b2cd79f3fbc50061ef58cf0ff2e9</anchor>
      <arglist>(const Expression &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>Expression</type>
      <name>operator-</name>
      <anchorfile>classExpression.html</anchorfile>
      <anchor>a51b77b4d24439fac414a71d2f2b64763</anchor>
      <arglist>(const Expression &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>Expression</type>
      <name>operator*</name>
      <anchorfile>classExpression.html</anchorfile>
      <anchor>ac9e52e1387429ed384ffd48f926774e6</anchor>
      <arglist>(const Expression &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>Expression</type>
      <name>operator/</name>
      <anchorfile>classExpression.html</anchorfile>
      <anchor>aa1baebaac6d629c30370719bc60ed12a</anchor>
      <arglist>(const Expression &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>Expression</type>
      <name>operator-</name>
      <anchorfile>classExpression.html</anchorfile>
      <anchor>a47885c5097dde4aa49e59c6949a73413</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate</name>
      <anchorfile>classExpression.html</anchorfile>
      <anchor>a4321a7ad5078d5a8af0991f5580b3f99</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate</name>
      <anchorfile>classExpression.html</anchorfile>
      <anchor>a2a09ff11f4ffaebdcc3f7bf62c77bbf8</anchor>
      <arglist>(const Scope &amp;scope) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate</name>
      <anchorfile>classExpression.html</anchorfile>
      <anchor>a32d7e977a1f77939f78b6c5b803f15e3</anchor>
      <arglist>(const Scope &amp;scope, String &amp;evaluationError) const </arglist>
    </member>
    <member kind="function">
      <type>Expression</type>
      <name>adjustedToGiveNewResult</name>
      <anchorfile>classExpression.html</anchorfile>
      <anchor>acc82cfe769a77bbf86288990d1bdc817</anchor>
      <arglist>(double targetValue, const Scope &amp;scope) const </arglist>
    </member>
    <member kind="function">
      <type>Expression</type>
      <name>withRenamedSymbol</name>
      <anchorfile>classExpression.html</anchorfile>
      <anchor>a598b92aa6528a3c3d25a54095b0b9595</anchor>
      <arglist>(const Symbol &amp;oldSymbol, const String &amp;newName, const Scope &amp;scope) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>referencesSymbol</name>
      <anchorfile>classExpression.html</anchorfile>
      <anchor>a88ebc272c8f91d59c3d994386fe10583</anchor>
      <arglist>(const Symbol &amp;symbol, const Scope &amp;scope) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>usesAnySymbols</name>
      <anchorfile>classExpression.html</anchorfile>
      <anchor>a0d3a456e6890d85965d6c78be8df7bc9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>findReferencedSymbols</name>
      <anchorfile>classExpression.html</anchorfile>
      <anchor>a861cfe56ec5791117e8b7ff7ae530db0</anchor>
      <arglist>(Array&lt; Symbol &gt; &amp;results, const Scope &amp;scope) const </arglist>
    </member>
    <member kind="function">
      <type>Type</type>
      <name>getType</name>
      <anchorfile>classExpression.html</anchorfile>
      <anchor>a460d4ee7e0480e3980390d18833ea97a</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>getSymbolOrFunction</name>
      <anchorfile>classExpression.html</anchorfile>
      <anchor>ac469273e306b0c6526f3befc47594116</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumInputs</name>
      <anchorfile>classExpression.html</anchorfile>
      <anchor>a7c32d3b8d87eef9dfc13fe2490923813</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Expression</type>
      <name>getInput</name>
      <anchorfile>classExpression.html</anchorfile>
      <anchor>a48f1108d034f6b762528322f6749e4f3</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Expression</type>
      <name>symbol</name>
      <anchorfile>classExpression.html</anchorfile>
      <anchor>a596e6864c20b0d6ac5f42014103e6349</anchor>
      <arglist>(const String &amp;symbol)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Expression</type>
      <name>function</name>
      <anchorfile>classExpression.html</anchorfile>
      <anchor>afd58f776e343213a4e488db47faadcb2</anchor>
      <arglist>(const String &amp;functionName, const Array&lt; Expression &gt; &amp;parameters)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Expression</type>
      <name>parse</name>
      <anchorfile>classExpression.html</anchorfile>
      <anchor>a39b81caf983688a8b3d57444f318a624</anchor>
      <arglist>(String::CharPointerType &amp;stringToParse, String &amp;parseError)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Expression::Scope</name>
    <filename>classExpression_1_1Scope.html</filename>
    <class kind="class">Expression::Scope::Visitor</class>
    <member kind="function">
      <type></type>
      <name>Scope</name>
      <anchorfile>classExpression_1_1Scope.html</anchorfile>
      <anchor>a270a255a97e5315bf08862e4c4a9fecb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Scope</name>
      <anchorfile>classExpression_1_1Scope.html</anchorfile>
      <anchor>a134d89a4582e099b5dec71641fc3f193</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual String</type>
      <name>getScopeUID</name>
      <anchorfile>classExpression_1_1Scope.html</anchorfile>
      <anchor>a572a6d2b5a3638c4c79afc4e9ca3161d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Expression</type>
      <name>getSymbolValue</name>
      <anchorfile>classExpression_1_1Scope.html</anchorfile>
      <anchor>a4d8a192d01556547d0681897a457b52e</anchor>
      <arglist>(const String &amp;symbol) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>evaluateFunction</name>
      <anchorfile>classExpression_1_1Scope.html</anchorfile>
      <anchor>a04568143f34090043d9d2fcc81a3c2c6</anchor>
      <arglist>(const String &amp;functionName, const double *parameters, int numParameters) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>visitRelativeScope</name>
      <anchorfile>classExpression_1_1Scope.html</anchorfile>
      <anchor>af8f9ce49ed1a0b9ee7848cc4b0308687</anchor>
      <arglist>(const String &amp;scopeName, Visitor &amp;visitor) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Expression::Scope::Visitor</name>
    <filename>classExpression_1_1Scope_1_1Visitor.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Visitor</name>
      <anchorfile>classExpression_1_1Scope_1_1Visitor.html</anchorfile>
      <anchor>a7567c04f75c80935764c4aa15f85b254</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>visit</name>
      <anchorfile>classExpression_1_1Scope_1_1Visitor.html</anchorfile>
      <anchor>a843db0686a8680c7108985b18dd8c4b6</anchor>
      <arglist>(const Scope &amp;)=0</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Expression::Symbol</name>
    <filename>structExpression_1_1Symbol.html</filename>
    <member kind="function">
      <type></type>
      <name>Symbol</name>
      <anchorfile>structExpression_1_1Symbol.html</anchorfile>
      <anchor>a5c3008e4a646591306842c148af8c2d5</anchor>
      <arglist>(const String &amp;scopeUID, const String &amp;symbolName)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>structExpression_1_1Symbol.html</anchorfile>
      <anchor>a16efdcb0149bab86497e495ce9bada85</anchor>
      <arglist>(const Symbol &amp;) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>structExpression_1_1Symbol.html</anchorfile>
      <anchor>ae052f0d2429a36a390531ad7d067943c</anchor>
      <arglist>(const Symbol &amp;) const noexcept</arglist>
    </member>
    <member kind="variable">
      <type>String</type>
      <name>scopeUID</name>
      <anchorfile>structExpression_1_1Symbol.html</anchorfile>
      <anchor>aaddddb4fd2bad7fcce78adce69ba91d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>String</type>
      <name>symbolName</name>
      <anchorfile>structExpression_1_1Symbol.html</anchorfile>
      <anchor>a8ea461b91478b99e10a04956c38f5d68</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ExtraLookAndFeelBaseClasses</name>
    <filename>structExtraLookAndFeelBaseClasses.html</filename>
    <class kind="struct">ExtraLookAndFeelBaseClasses::AudioDeviceSelectorComponentMethods</class>
    <class kind="struct">ExtraLookAndFeelBaseClasses::KeyMappingEditorComponentMethods</class>
    <class kind="struct">ExtraLookAndFeelBaseClasses::LassoComponentMethods</class>
  </compound>
  <compound kind="struct">
    <name>ExtraLookAndFeelBaseClasses::AudioDeviceSelectorComponentMethods</name>
    <filename>structExtraLookAndFeelBaseClasses_1_1AudioDeviceSelectorComponentMethods.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~AudioDeviceSelectorComponentMethods</name>
      <anchorfile>structExtraLookAndFeelBaseClasses_1_1AudioDeviceSelectorComponentMethods.html</anchorfile>
      <anchor>aca1aeef4721af95ea1d410d2716bec20</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>drawLevelMeter</name>
      <anchorfile>structExtraLookAndFeelBaseClasses_1_1AudioDeviceSelectorComponentMethods.html</anchorfile>
      <anchor>a733fe85bd7c5c9b7a3c4e40b55bf0645</anchor>
      <arglist>(Graphics &amp;, int width, int height, float level)=0</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ExtraLookAndFeelBaseClasses::KeyMappingEditorComponentMethods</name>
    <filename>structExtraLookAndFeelBaseClasses_1_1KeyMappingEditorComponentMethods.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~KeyMappingEditorComponentMethods</name>
      <anchorfile>structExtraLookAndFeelBaseClasses_1_1KeyMappingEditorComponentMethods.html</anchorfile>
      <anchor>a41e9902739d09f1e5bb67026a2df8a84</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>drawKeymapChangeButton</name>
      <anchorfile>structExtraLookAndFeelBaseClasses_1_1KeyMappingEditorComponentMethods.html</anchorfile>
      <anchor>a68a78b177524e7aff9d9b0129e67094d</anchor>
      <arglist>(Graphics &amp;, int width, int height, Button &amp;, const String &amp;keyDescription)=0</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ExtraLookAndFeelBaseClasses::LassoComponentMethods</name>
    <filename>structExtraLookAndFeelBaseClasses_1_1LassoComponentMethods.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~LassoComponentMethods</name>
      <anchorfile>structExtraLookAndFeelBaseClasses_1_1LassoComponentMethods.html</anchorfile>
      <anchor>a97fb8ecbe0e0af040cb032813d278a49</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>drawLasso</name>
      <anchorfile>structExtraLookAndFeelBaseClasses_1_1LassoComponentMethods.html</anchorfile>
      <anchor>affab7a04781a3b4177d3dff73ea28424</anchor>
      <arglist>(Graphics &amp;, Component &amp;lassoComp)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>FakeMouseMoveGenerator</name>
    <filename>classFakeMouseMoveGenerator.html</filename>
    <base protection="private">Timer</base>
    <member kind="function">
      <type></type>
      <name>FakeMouseMoveGenerator</name>
      <anchorfile>classFakeMouseMoveGenerator.html</anchorfile>
      <anchor>a0abab3f56b571ae115caf33eb5c9c596</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>timerCallback</name>
      <anchorfile>classFakeMouseMoveGenerator.html</anchorfile>
      <anchor>a9b66aec9e060556136c605f018f01786</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>FFT</name>
    <filename>classFFT.html</filename>
    <class kind="struct">FFT::Complex</class>
    <member kind="function">
      <type></type>
      <name>FFT</name>
      <anchorfile>classFFT.html</anchorfile>
      <anchor>a4351b09df7fff4082f371b7f4753bd45</anchor>
      <arglist>(int order, bool isInverse)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~FFT</name>
      <anchorfile>classFFT.html</anchorfile>
      <anchor>a69b8b0fb23ec45833952992d7f9ad2ad</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>perform</name>
      <anchorfile>classFFT.html</anchorfile>
      <anchor>ae48bdedde84a2bd47f897945ba5a04f7</anchor>
      <arglist>(const Complex *input, Complex *output) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>performRealOnlyForwardTransform</name>
      <anchorfile>classFFT.html</anchorfile>
      <anchor>a879d3e58058eb37b81f647fa8d9f63ff</anchor>
      <arglist>(float *inputOutputData) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>performRealOnlyInverseTransform</name>
      <anchorfile>classFFT.html</anchorfile>
      <anchor>a8713f9b3a469d255b21229904d78fd94</anchor>
      <arglist>(float *inputOutputData) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>performFrequencyOnlyForwardTransform</name>
      <anchorfile>classFFT.html</anchorfile>
      <anchor>a88d0d847721d5dfc1a3c583d3340f946</anchor>
      <arglist>(float *inputOutputData) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getSize</name>
      <anchorfile>classFFT.html</anchorfile>
      <anchor>ad31b8261ecd82dda721df4705b57940f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>FFT::Complex</name>
    <filename>structFFT_1_1Complex.html</filename>
    <member kind="variable">
      <type>float</type>
      <name>r</name>
      <anchorfile>structFFT_1_1Complex.html</anchorfile>
      <anchor>aacf60a9d5fb15df15ba49171e337bf90</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>i</name>
      <anchorfile>structFFT_1_1Complex.html</anchorfile>
      <anchor>a19a9cf233a26fc6c1abaed083222de4a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>File</name>
    <filename>classFile.html</filename>
    <class kind="struct">File::NaturalFileComparator</class>
    <member kind="enumeration">
      <type></type>
      <name>TypesOfFileToFind</name>
      <anchorfile>classFile.html</anchorfile>
      <anchor>a2e3d1ed8a9022434f3ddb7d34b24198c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>findDirectories</name>
      <anchorfile>classFile.html</anchorfile>
      <anchor>a2e3d1ed8a9022434f3ddb7d34b24198ca35b223e26e0f30ee49e320b60af41965</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>findFiles</name>
      <anchorfile>classFile.html</anchorfile>
      <anchor>a2e3d1ed8a9022434f3ddb7d34b24198ca0804ff838a8bfd66eaa300e5e0a3884a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>findFilesAndDirectories</name>
      <anchorfile>classFile.html</anchorfile>
      <anchor>a2e3d1ed8a9022434f3ddb7d34b24198ca5bdd66baa4579bd9b698162bed951793</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>ignoreHiddenFiles</name>
      <anchorfile>classFile.html</anchorfile>
      <anchor>a2e3d1ed8a9022434f3ddb7d34b24198ca7913a92e21bc03cb18cecf6aa21221bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>SpecialLocationType</name>
      <anchorfile>classFile.html</anchorfile>
      <anchor>a3e19cafabb03c5838160263a6e76313d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>userHomeDirectory</name>
      <anchorfile>classFile.html</anchorfile>
      <anchor>a3e19cafabb03c5838160263a6e76313da8620eabc38cfbd921a52d10157463c5e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>userDocumentsDirectory</name>
      <anchorfile>classFile.html</anchorfile>
      <anchor>a3e19cafabb03c5838160263a6e76313da72c8fbf94445ccce6b01470265c8f397</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>userDesktopDirectory</name>
      <anchorfile>classFile.html</anchorfile>
      <anchor>a3e19cafabb03c5838160263a6e76313da4776bc5e304bf2857ed5ede0fbbc4060</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>userMusicDirectory</name>
      <anchorfile>classFile.html</anchorfile>
      <anchor>a3e19cafabb03c5838160263a6e76313dad0662607d7763c1940693b9f80673567</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>userMoviesDirectory</name>
      <anchorfile>classFile.html</anchorfile>
      <anchor>a3e19cafabb03c5838160263a6e76313dadcb6e6c19c350d8020615417b0505da8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>userPicturesDirectory</name>
      <anchorfile>classFile.html</anchorfile>
      <anchor>a3e19cafabb03c5838160263a6e76313daa8e7ec352e54ab4efcae250eba502313</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>userApplicationDataDirectory</name>
      <anchorfile>classFile.html</anchorfile>
      <anchor>a3e19cafabb03c5838160263a6e76313da0c9f89d8dc9f9f32c9eb42428385351d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>commonApplicationDataDirectory</name>
      <anchorfile>classFile.html</anchorfile>
      <anchor>a3e19cafabb03c5838160263a6e76313da18566f0ca926c8f6db1e178ba5f403c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>commonDocumentsDirectory</name>
      <anchorfile>classFile.html</anchorfile>
      <anchor>a3e19cafabb03c5838160263a6e76313dada45b7958b5fc77f30e313f8dab12b23</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>tempDirectory</name>
      <anchorfile>classFile.html</anchorfile>
      <anchor>a3e19cafabb03c5838160263a6e76313da08818a8233a97db2e3c54a917adf4954</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>currentExecutableFile</name>
      <anchorfile>classFile.html</anchorfile>
      <anchor>a3e19cafabb03c5838160263a6e76313dab960741272c75e94482f295a516aae62</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>currentApplicationFile</name>
      <anchorfile>classFile.html</anchorfile>
      <anchor>a3e19cafabb03c5838160263a6e76313da8292b316ce9eb8ebc0d0980b788a877c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>invokedExecutableFile</name>
      <anchorfile>classFile.html</anchorfile>
      <anchor>a3e19cafabb03c5838160263a6e76313dafdae061dc559a8e9ac3a9623d2cd8081</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>hostApplicationPath</name>
      <anchorfile>classFile.html</anchorfile>
      <anchor>a3e19cafabb03c5838160263a6e76313dafab1d75c642d3f8eb23564f1cfb408a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>globalApplicationsDirectory</name>
      <anchorfile>classFile.html</anchorfile>
      <anchor>a3e19cafabb03c5838160263a6e76313dad4f66736251eab2cdaa21dd5a709ed21</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>File</name>
      <anchorfile>classFile.html</anchorfile>
      <anchor>a51dc22c62ddf2fbeef8335300fc8e56a</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>File</name>
      <anchorfile>classFile.html</anchorfile>
      <anchor>ab803ce7daf2eb1194a562a7912d96967</anchor>
      <arglist>(const String &amp;absolutePath)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>File</name>
      <anchorfile>classFile.html</anchorfile>
      <anchor>afe6451b8ade2452f5bea23a9fe02fa45</anchor>
      <arglist>(const File &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~File</name>
      <anchorfile>classFile.html</anchorfile>
      <anchor>a5222c06f8d809438b51a7bd528760aaa</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>File &amp;</type>
      <name>operator=</name>
      <anchorfile>classFile.html</anchorfile>
      <anchor>a230ffab15720487b5ed9ab4f428718a0</anchor>
      <arglist>(const String &amp;newAbsolutePath)</arglist>
    </member>
    <member kind="function">
      <type>File &amp;</type>
      <name>operator=</name>
      <anchorfile>classFile.html</anchorfile>
      <anchor>a64fde399af107b07eed297920172e836</anchor>
      <arglist>(const File &amp;otherFile)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>File</name>
      <anchorfile>classFile.html</anchorfile>
      <anchor>aabf6419e697648b93761840e1e14b190</anchor>
      <arglist>(File &amp;&amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>File &amp;</type>
      <name>operator=</name>
      <anchorfile>classFile.html</anchorfile>
      <anchor>a60431129891109a0d15bb98e186155bb</anchor>
      <arglist>(File &amp;&amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>exists</name>
      <anchorfile>classFile.html</anchorfile>
      <anchor>a44ecfb6abf4c56065e773785787f2fb0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>existsAsFile</name>
      <anchorfile>classFile.html</anchorfile>
      <anchor>a2810f7ad22c4cb4e8927dae25bd53345</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isDirectory</name>
      <anchorfile>classFile.html</anchorfile>
      <anchor>a0d02d044cfec9c218a57bd7f00ff71f1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>getSize</name>
      <anchorfile>classFile.html</anchorfile>
      <anchor>a4e368252255a9310aceac2aca02ed238</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const String &amp;</type>
      <name>getFullPathName</name>
      <anchorfile>classFile.html</anchorfile>
      <anchor>a317effd2ea56513feec717102676a718</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>getFileName</name>
      <anchorfile>classFile.html</anchorfile>
      <anchor>aef4bc6319861669081767d0efcd427db</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>getRelativePathFrom</name>
      <anchorfile>classFile.html</anchorfile>
      <anchor>a634ce2ebe99d6d64b18b9d557b389350</anchor>
      <arglist>(const File &amp;directoryToBeRelativeTo) const </arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>getFileExtension</name>
      <anchorfile>classFile.html</anchorfile>
      <anchor>a309e7dcfc0253ddde75f68b2a4f729d7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasFileExtension</name>
      <anchorfile>classFile.html</anchorfile>
      <anchor>ac6020c20cb04f00bd0b5aa00926ab1fb</anchor>
      <arglist>(StringRef extensionToTest) const </arglist>
    </member>
    <member kind="function">
      <type>File</type>
      <name>withFileExtension</name>
      <anchorfile>classFile.html</anchorfile>
      <anchor>ae84337989b37fa922ae2af28ff243096</anchor>
      <arglist>(StringRef newExtension) const </arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>getFileNameWithoutExtension</name>
      <anchorfile>classFile.html</anchorfile>
      <anchor>a93ab669b92bba0ca0517c2b54e98242a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>hashCode</name>
      <anchorfile>classFile.html</anchorfile>
      <anchor>a990e6e4a166c52186b69f572c4dfc328</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>hashCode64</name>
      <anchorfile>classFile.html</anchorfile>
      <anchor>a0584182ef19bf00394df96731bceaa8f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>File</type>
      <name>getChildFile</name>
      <anchorfile>classFile.html</anchorfile>
      <anchor>a0885161c1d05eedd980e3dfe4d057545</anchor>
      <arglist>(StringRef relativeOrAbsolutePath) const </arglist>
    </member>
    <member kind="function">
      <type>File</type>
      <name>getSiblingFile</name>
      <anchorfile>classFile.html</anchorfile>
      <anchor>ab81e5772ac5932f51cfd74518f6329d4</anchor>
      <arglist>(StringRef siblingFileName) const </arglist>
    </member>
    <member kind="function">
      <type>File</type>
      <name>getParentDirectory</name>
      <anchorfile>classFile.html</anchorfile>
      <anchor>aab4c9f30b63c3714d601ed33324e6b33</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isAChildOf</name>
      <anchorfile>classFile.html</anchorfile>
      <anchor>abf31d130e6661ca5ee63d33c808b4f93</anchor>
      <arglist>(const File &amp;potentialParentDirectory) const </arglist>
    </member>
    <member kind="function">
      <type>File</type>
      <name>getNonexistentChildFile</name>
      <anchorfile>classFile.html</anchorfile>
      <anchor>a44c390f65190f3a0dfdee29a615f0413</anchor>
      <arglist>(const String &amp;prefix, const String &amp;suffix, bool putNumbersInBrackets=true) const </arglist>
    </member>
    <member kind="function">
      <type>File</type>
      <name>getNonexistentSibling</name>
      <anchorfile>classFile.html</anchorfile>
      <anchor>ad02ceff2de4491ebd52869e43d9599e3</anchor>
      <arglist>(bool putNumbersInBrackets=true) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classFile.html</anchorfile>
      <anchor>a8a70db544b5867816b3c1f214d208fdd</anchor>
      <arglist>(const File &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classFile.html</anchorfile>
      <anchor>abe739bc29dcbb4d38853649ad3bb5124</anchor>
      <arglist>(const File &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>classFile.html</anchorfile>
      <anchor>aa6f43fe56047802a4de786fc4848d388</anchor>
      <arglist>(const File &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>classFile.html</anchorfile>
      <anchor>a9a1e5c9c4dcdaca522d230a167123eb6</anchor>
      <arglist>(const File &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasWriteAccess</name>
      <anchorfile>classFile.html</anchorfile>
      <anchor>a11825b7fffe497f31c15c4a35e1e0353</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setReadOnly</name>
      <anchorfile>classFile.html</anchorfile>
      <anchor>aaa0a3838942816c19fbffbffeb687272</anchor>
      <arglist>(bool shouldBeReadOnly, bool applyRecursively=false) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setExecutePermission</name>
      <anchorfile>classFile.html</anchorfile>
      <anchor>aff4831339fdfec0ad2a54be970b83e31</anchor>
      <arglist>(bool shouldBeExecutable) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isHidden</name>
      <anchorfile>classFile.html</anchorfile>
      <anchor>adf74fb4603dfd5684a6fd68cbb5fa8ce</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>uint64</type>
      <name>getFileIdentifier</name>
      <anchorfile>classFile.html</anchorfile>
      <anchor>aa081bbcf3c3b9bac62237f8f00b0c8a2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Time</type>
      <name>getLastModificationTime</name>
      <anchorfile>classFile.html</anchorfile>
      <anchor>a2af6e4e6ce8d74bb39b7f3a9a6feedf2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Time</type>
      <name>getLastAccessTime</name>
      <anchorfile>classFile.html</anchorfile>
      <anchor>a19c99f020760b21e6354298857e163a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Time</type>
      <name>getCreationTime</name>
      <anchorfile>classFile.html</anchorfile>
      <anchor>a788021729da0be1169c05079b39e2943</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setLastModificationTime</name>
      <anchorfile>classFile.html</anchorfile>
      <anchor>a5c6f95fe9ef415487b8bfd66953db9cf</anchor>
      <arglist>(Time newTime) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setLastAccessTime</name>
      <anchorfile>classFile.html</anchorfile>
      <anchor>a21773066a534172236adf24ee14f0327</anchor>
      <arglist>(Time newTime) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setCreationTime</name>
      <anchorfile>classFile.html</anchorfile>
      <anchor>ab21ad7981f0afab524171e10d8122657</anchor>
      <arglist>(Time newTime) const </arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>getVersion</name>
      <anchorfile>classFile.html</anchorfile>
      <anchor>a0a365147cb5fbd2d5c70b94b4151c6aa</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Result</type>
      <name>create</name>
      <anchorfile>classFile.html</anchorfile>
      <anchor>a074cbfd1833a3c88ade4529d59c392b1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Result</type>
      <name>createDirectory</name>
      <anchorfile>classFile.html</anchorfile>
      <anchor>abf66b1a134ee14b98006e85fede901f9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>deleteFile</name>
      <anchorfile>classFile.html</anchorfile>
      <anchor>acca30337faecf8c3d97a1e70c725db23</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>deleteRecursively</name>
      <anchorfile>classFile.html</anchorfile>
      <anchor>a45a371d70965e5efc1566c0a51d9042c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>moveToTrash</name>
      <anchorfile>classFile.html</anchorfile>
      <anchor>ad5657b8a600ed241a204656811c9522f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>moveFileTo</name>
      <anchorfile>classFile.html</anchorfile>
      <anchor>a43a7e37203ed65b036a2c54f0f260857</anchor>
      <arglist>(const File &amp;targetLocation) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>copyFileTo</name>
      <anchorfile>classFile.html</anchorfile>
      <anchor>a101f3d5cbcc6a6ef91cf9331802010a6</anchor>
      <arglist>(const File &amp;targetLocation) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>replaceFileIn</name>
      <anchorfile>classFile.html</anchorfile>
      <anchor>a67ddffd6b845882e490a4fc63fdb2b60</anchor>
      <arglist>(const File &amp;targetLocation) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>copyDirectoryTo</name>
      <anchorfile>classFile.html</anchorfile>
      <anchor>a1bef0d97a327689afa9d95151cca542f</anchor>
      <arglist>(const File &amp;newDirectory) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>findChildFiles</name>
      <anchorfile>classFile.html</anchorfile>
      <anchor>a6b382c3eb3cbbbfd7ef5550e42b5260a</anchor>
      <arglist>(Array&lt; File &gt; &amp;results, int whatToLookFor, bool searchRecursively, const String &amp;wildCardPattern=&quot;*&quot;) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumberOfChildFiles</name>
      <anchorfile>classFile.html</anchorfile>
      <anchor>a07e0af731f18680d32dd74043784a073</anchor>
      <arglist>(int whatToLookFor, const String &amp;wildCardPattern=&quot;*&quot;) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>containsSubDirectories</name>
      <anchorfile>classFile.html</anchorfile>
      <anchor>a14db3982beea141ca7492a093bf4588c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>FileInputStream *</type>
      <name>createInputStream</name>
      <anchorfile>classFile.html</anchorfile>
      <anchor>aebd0de51f5df7da86749c90b68e5bc53</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>FileOutputStream *</type>
      <name>createOutputStream</name>
      <anchorfile>classFile.html</anchorfile>
      <anchor>a76236d56eb47e3b4ab554b09ac2872a3</anchor>
      <arglist>(size_t bufferSize=0x8000) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>loadFileAsData</name>
      <anchorfile>classFile.html</anchorfile>
      <anchor>a0fa017212282bc314ec2eab9dce135d0</anchor>
      <arglist>(MemoryBlock &amp;result) const </arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>loadFileAsString</name>
      <anchorfile>classFile.html</anchorfile>
      <anchor>aac8775e3a91375fe12ebe068194a2812</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>readLines</name>
      <anchorfile>classFile.html</anchorfile>
      <anchor>a155785c6bd5e36a11be9c2451f8bb8f2</anchor>
      <arglist>(StringArray &amp;destLines) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>appendData</name>
      <anchorfile>classFile.html</anchorfile>
      <anchor>a1f2ea9b52874cb710b3d3f27e7722cc6</anchor>
      <arglist>(const void *dataToAppend, size_t numberOfBytes) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>replaceWithData</name>
      <anchorfile>classFile.html</anchorfile>
      <anchor>ac1828d341ded515c7606984aabd4614f</anchor>
      <arglist>(const void *dataToWrite, size_t numberOfBytes) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>appendText</name>
      <anchorfile>classFile.html</anchorfile>
      <anchor>a7908b0272d7564eb1f5a7505a5bc7351</anchor>
      <arglist>(const String &amp;textToAppend, bool asUnicode=false, bool writeUnicodeHeaderBytes=false) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>replaceWithText</name>
      <anchorfile>classFile.html</anchorfile>
      <anchor>ab3476536a97b787f00b5988cdb326816</anchor>
      <arglist>(const String &amp;textToWrite, bool asUnicode=false, bool writeUnicodeHeaderBytes=false) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasIdenticalContentTo</name>
      <anchorfile>classFile.html</anchorfile>
      <anchor>ae8dbcb9e8bbce004d015688840423fa8</anchor>
      <arglist>(const File &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>getVolumeLabel</name>
      <anchorfile>classFile.html</anchorfile>
      <anchor>ae7c2f4704800071207afdbcaf4fad0ad</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getVolumeSerialNumber</name>
      <anchorfile>classFile.html</anchorfile>
      <anchor>ae07267c9417d77ef094253ecb206d842</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>getBytesFreeOnVolume</name>
      <anchorfile>classFile.html</anchorfile>
      <anchor>a881a4b5846c746c58c7dc1c7893e3ee5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>getVolumeTotalSize</name>
      <anchorfile>classFile.html</anchorfile>
      <anchor>a9737848d54ead1fe75cf289e37d1f95f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isOnCDRomDrive</name>
      <anchorfile>classFile.html</anchorfile>
      <anchor>a4c71649a114a7f475599cbfa91af0f60</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isOnHardDisk</name>
      <anchorfile>classFile.html</anchorfile>
      <anchor>a8342584e08db6ffa9a0def1308d8030f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isOnRemovableDrive</name>
      <anchorfile>classFile.html</anchorfile>
      <anchor>ad04995c68c992916f0ba3c35dd1731ff</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>startAsProcess</name>
      <anchorfile>classFile.html</anchorfile>
      <anchor>af66813ec798e644fdbe606414b0d2953</anchor>
      <arglist>(const String &amp;parameters=String()) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>revealToUser</name>
      <anchorfile>classFile.html</anchorfile>
      <anchor>a1e5beaaa04e6944be45c90fe331e0531</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setAsCurrentWorkingDirectory</name>
      <anchorfile>classFile.html</anchorfile>
      <anchor>a65e0278d019871c800bc334d5dd7c7eb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>createSymbolicLink</name>
      <anchorfile>classFile.html</anchorfile>
      <anchor>a9ddd05eb042be6391e2904f830834f80</anchor>
      <arglist>(const File &amp;linkFileToCreate, bool overwriteExisting) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSymbolicLink</name>
      <anchorfile>classFile.html</anchorfile>
      <anchor>a6e92c30149f5cd0647c7c5c5a7ad9b07</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>File</type>
      <name>getLinkedTarget</name>
      <anchorfile>classFile.html</anchorfile>
      <anchor>a6bbe2fbfc5436894574380b185fc2f87</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>OSType</type>
      <name>getMacOSType</name>
      <anchorfile>classFile.html</anchorfile>
      <anchor>a4e68c24206a274e21ce7777aa2a0d295</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isBundle</name>
      <anchorfile>classFile.html</anchorfile>
      <anchor>ad4b60fb8cb686a14d5a34dd669f9df5a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addToDock</name>
      <anchorfile>classFile.html</anchorfile>
      <anchor>aa8128493715ac5a6fb5255cb626e6472</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static String</type>
      <name>descriptionOfSizeInBytes</name>
      <anchorfile>classFile.html</anchorfile>
      <anchor>a589498af00c1eb8f7bffb628944462e2</anchor>
      <arglist>(int64 bytes)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>findFileSystemRoots</name>
      <anchorfile>classFile.html</anchorfile>
      <anchor>a694de291d70096e9d31d0c95b432bcb6</anchor>
      <arglist>(Array&lt; File &gt; &amp;results)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static File JUCE_CALLTYPE</type>
      <name>getSpecialLocation</name>
      <anchorfile>classFile.html</anchorfile>
      <anchor>a2a4396bc0e6f8b0430f6f54d029899e5</anchor>
      <arglist>(const SpecialLocationType type)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static File</type>
      <name>createTempFile</name>
      <anchorfile>classFile.html</anchorfile>
      <anchor>aad0d4592378fa8c773ca13c4c99feb2d</anchor>
      <arglist>(StringRef fileNameEnding)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static File</type>
      <name>getCurrentWorkingDirectory</name>
      <anchorfile>classFile.html</anchorfile>
      <anchor>a5801c94dd6dad89aeaf6e9ae10b81d9e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static String</type>
      <name>createLegalFileName</name>
      <anchorfile>classFile.html</anchorfile>
      <anchor>ab5d6af755153f8af3d34912c7e498121</anchor>
      <arglist>(const String &amp;fileNameToFix)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static String</type>
      <name>createLegalPathName</name>
      <anchorfile>classFile.html</anchorfile>
      <anchor>a40c39e2a1ce3dc25baea509eb40fe97c</anchor>
      <arglist>(const String &amp;pathNameToFix)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>areFileNamesCaseSensitive</name>
      <anchorfile>classFile.html</anchorfile>
      <anchor>a35111cb43b1e49c523b67c65a337764c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isAbsolutePath</name>
      <anchorfile>classFile.html</anchorfile>
      <anchor>a166f7fcdc5375012db300c746b55fe85</anchor>
      <arglist>(StringRef path)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static File</type>
      <name>createFileWithoutCheckingPath</name>
      <anchorfile>classFile.html</anchorfile>
      <anchor>af441ce0a253b9d4f2d4219171f561324</anchor>
      <arglist>(const String &amp;absolutePath) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static String</type>
      <name>addTrailingSeparator</name>
      <anchorfile>classFile.html</anchorfile>
      <anchor>a7093f18070f9aec99e3bfd2857761514</anchor>
      <arglist>(const String &amp;path)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const juce_wchar</type>
      <name>separator</name>
      <anchorfile>classFile.html</anchorfile>
      <anchor>a03d104ec7dd9600dbfb8cfdd25585135</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const String</type>
      <name>separatorString</name>
      <anchorfile>classFile.html</anchorfile>
      <anchor>a66e8bff47d42f5b093b88eacacb573ce</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>File::NaturalFileComparator</name>
    <filename>structFile_1_1NaturalFileComparator.html</filename>
    <member kind="function">
      <type></type>
      <name>NaturalFileComparator</name>
      <anchorfile>structFile_1_1NaturalFileComparator.html</anchorfile>
      <anchor>adf4f4af4bc21c7efbc6d20d89b233f0e</anchor>
      <arglist>(bool shouldPutFoldersFirst) noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>compareElements</name>
      <anchorfile>structFile_1_1NaturalFileComparator.html</anchorfile>
      <anchor>a9450d36ba8fbad91b35144761058e9a6</anchor>
      <arglist>(const File &amp;firstFile, const File &amp;secondFile) const </arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>foldersFirst</name>
      <anchorfile>structFile_1_1NaturalFileComparator.html</anchorfile>
      <anchor>a531f83d3078a594f5ebc87a7fe7ad28a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>FileBasedDocument</name>
    <filename>classFileBasedDocument.html</filename>
    <base>ChangeBroadcaster</base>
    <member kind="enumeration">
      <type></type>
      <name>SaveResult</name>
      <anchorfile>classFileBasedDocument.html</anchorfile>
      <anchor>a89d417326aed46fb561c599265e426d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>savedOk</name>
      <anchorfile>classFileBasedDocument.html</anchorfile>
      <anchor>a89d417326aed46fb561c599265e426d2aa0f8eec65cc59595a5e7d665c2a2efeb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>userCancelledSave</name>
      <anchorfile>classFileBasedDocument.html</anchorfile>
      <anchor>a89d417326aed46fb561c599265e426d2a29ad285f4aa606eb17b9f7f0de211f5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>failedToWriteToFile</name>
      <anchorfile>classFileBasedDocument.html</anchorfile>
      <anchor>a89d417326aed46fb561c599265e426d2a7b2f3f4edd3dc5b02d1578ef4594f394</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FileBasedDocument</name>
      <anchorfile>classFileBasedDocument.html</anchorfile>
      <anchor>a67651e24e6e4bd15b08edb2d101910aa</anchor>
      <arglist>(const String &amp;fileExtension, const String &amp;fileWildCard, const String &amp;openFileDialogTitle, const String &amp;saveFileDialogTitle)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~FileBasedDocument</name>
      <anchorfile>classFileBasedDocument.html</anchorfile>
      <anchor>a030915656fbe64df18d25b67fb7c0268</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasChangedSinceSaved</name>
      <anchorfile>classFileBasedDocument.html</anchorfile>
      <anchor>a8a12cf36feeaec35c7d9cf4d7823bf72</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>changed</name>
      <anchorfile>classFileBasedDocument.html</anchorfile>
      <anchor>a3a058b73776404d76b828205ca058e42</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setChangedFlag</name>
      <anchorfile>classFileBasedDocument.html</anchorfile>
      <anchor>a60543bfd5b8889f23714e1b5cc72c44a</anchor>
      <arglist>(bool hasChanged)</arglist>
    </member>
    <member kind="function">
      <type>Result</type>
      <name>loadFrom</name>
      <anchorfile>classFileBasedDocument.html</anchorfile>
      <anchor>abcf1958f689b229b309f7486854cc7d7</anchor>
      <arglist>(const File &amp;fileToLoadFrom, bool showMessageOnFailure)</arglist>
    </member>
    <member kind="function">
      <type>Result</type>
      <name>loadFromUserSpecifiedFile</name>
      <anchorfile>classFileBasedDocument.html</anchorfile>
      <anchor>aa9d239ddcfbe0ede54b3a1051ef6d8b5</anchor>
      <arglist>(bool showMessageOnFailure)</arglist>
    </member>
    <member kind="function">
      <type>SaveResult</type>
      <name>save</name>
      <anchorfile>classFileBasedDocument.html</anchorfile>
      <anchor>a8059227774bee831db9ca4d402c68321</anchor>
      <arglist>(bool askUserForFileIfNotSpecified, bool showMessageOnFailure)</arglist>
    </member>
    <member kind="function">
      <type>SaveResult</type>
      <name>saveIfNeededAndUserAgrees</name>
      <anchorfile>classFileBasedDocument.html</anchorfile>
      <anchor>a619ff6ed84d0c0471c5bf7cf98b82d85</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SaveResult</type>
      <name>saveAs</name>
      <anchorfile>classFileBasedDocument.html</anchorfile>
      <anchor>a6e2943c148904e4d5357353034e69614</anchor>
      <arglist>(const File &amp;newFile, bool warnAboutOverwritingExistingFiles, bool askUserForFileIfNotSpecified, bool showMessageOnFailure)</arglist>
    </member>
    <member kind="function">
      <type>SaveResult</type>
      <name>saveAsInteractive</name>
      <anchorfile>classFileBasedDocument.html</anchorfile>
      <anchor>aa57557b32e2d2c61ef31f202e74521ad</anchor>
      <arglist>(bool warnAboutOverwritingExistingFiles)</arglist>
    </member>
    <member kind="function">
      <type>const File &amp;</type>
      <name>getFile</name>
      <anchorfile>classFileBasedDocument.html</anchorfile>
      <anchor>ac9711c4d28ffcb0397409cfe072e203f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFile</name>
      <anchorfile>classFileBasedDocument.html</anchorfile>
      <anchor>ae9831c5ca4576665d1876c129976a3f8</anchor>
      <arglist>(const File &amp;newFile)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual String</type>
      <name>getDocumentTitle</name>
      <anchorfile>classFileBasedDocument.html</anchorfile>
      <anchor>abf86feb0316f1d010c956bd687bc2bf8</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual Result</type>
      <name>loadDocument</name>
      <anchorfile>classFileBasedDocument.html</anchorfile>
      <anchor>a88999864b31dbda9bb0be1e593428cef</anchor>
      <arglist>(const File &amp;file)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual Result</type>
      <name>saveDocument</name>
      <anchorfile>classFileBasedDocument.html</anchorfile>
      <anchor>a2042b565e85118d3a2b34f677f61cbd8</anchor>
      <arglist>(const File &amp;file)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual File</type>
      <name>getLastDocumentOpened</name>
      <anchorfile>classFileBasedDocument.html</anchorfile>
      <anchor>a5d71efccf45d29de2c2dcbb801e8021a</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>setLastDocumentOpened</name>
      <anchorfile>classFileBasedDocument.html</anchorfile>
      <anchor>ad8fa1517b5af884e0213ee365dcf65f4</anchor>
      <arglist>(const File &amp;file)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual File</type>
      <name>getSuggestedSaveAsFile</name>
      <anchorfile>classFileBasedDocument.html</anchorfile>
      <anchor>a8eea22697f626904d28cee0082d3d076</anchor>
      <arglist>(const File &amp;defaultFile)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>FileBrowserComponent</name>
    <filename>classFileBrowserComponent.html</filename>
    <base>Component</base>
    <base protection="private">FileBrowserListener</base>
    <base protection="private">TextEditor::Listener</base>
    <base protection="private">ComboBox::Listener</base>
    <base protection="private">FileFilter</base>
    <base protection="private">Timer</base>
    <class kind="struct">FileBrowserComponent::LookAndFeelMethods</class>
    <member kind="enumeration">
      <type></type>
      <name>FileChooserFlags</name>
      <anchorfile>classFileBrowserComponent.html</anchorfile>
      <anchor>a32888a950cc0e51c8e1350f53bea43d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>openMode</name>
      <anchorfile>classFileBrowserComponent.html</anchorfile>
      <anchor>a32888a950cc0e51c8e1350f53bea43d6a15f4871e1610d912885cc6de504e13e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>saveMode</name>
      <anchorfile>classFileBrowserComponent.html</anchorfile>
      <anchor>a32888a950cc0e51c8e1350f53bea43d6aca3d0a66bd4fc606ab874b3da93a4d89</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>canSelectFiles</name>
      <anchorfile>classFileBrowserComponent.html</anchorfile>
      <anchor>a32888a950cc0e51c8e1350f53bea43d6a07878819a9559235bff2789c1fdbd8e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>canSelectDirectories</name>
      <anchorfile>classFileBrowserComponent.html</anchorfile>
      <anchor>a32888a950cc0e51c8e1350f53bea43d6ab7e808e7b8a33afb0150e9ea6047c2dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>canSelectMultipleItems</name>
      <anchorfile>classFileBrowserComponent.html</anchorfile>
      <anchor>a32888a950cc0e51c8e1350f53bea43d6a0eacc483cb1561acdce859beed28364f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>useTreeView</name>
      <anchorfile>classFileBrowserComponent.html</anchorfile>
      <anchor>a32888a950cc0e51c8e1350f53bea43d6ab8a34263300c3e493f2a00deee6fc933</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>filenameBoxIsReadOnly</name>
      <anchorfile>classFileBrowserComponent.html</anchorfile>
      <anchor>a32888a950cc0e51c8e1350f53bea43d6ab3724f30e884acc493ed9cb6bd064971</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>warnAboutOverwriting</name>
      <anchorfile>classFileBrowserComponent.html</anchorfile>
      <anchor>a32888a950cc0e51c8e1350f53bea43d6ac6b00d0e1c61e4d69a8573652a104fe6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>doNotClearFileNameOnRootChange</name>
      <anchorfile>classFileBrowserComponent.html</anchorfile>
      <anchor>a32888a950cc0e51c8e1350f53bea43d6adc75e7af7e6f7a5df0c9abb8c2e2252e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FileBrowserComponent</name>
      <anchorfile>classFileBrowserComponent.html</anchorfile>
      <anchor>a280d477349b38219b4870775aa4f67a2</anchor>
      <arglist>(int flags, const File &amp;initialFileOrDirectory, const FileFilter *fileFilter, FilePreviewComponent *previewComp)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~FileBrowserComponent</name>
      <anchorfile>classFileBrowserComponent.html</anchorfile>
      <anchor>a7b829347edb8c65bcffaee2035ace1a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumSelectedFiles</name>
      <anchorfile>classFileBrowserComponent.html</anchorfile>
      <anchor>ad2f75dac028494d765401422825bfcd6</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>File</type>
      <name>getSelectedFile</name>
      <anchorfile>classFileBrowserComponent.html</anchorfile>
      <anchor>aa57cddd48bff6a59d68f43e11995dc8f</anchor>
      <arglist>(int index) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deselectAllFiles</name>
      <anchorfile>classFileBrowserComponent.html</anchorfile>
      <anchor>a88106ef1df177798550e93fb58ebe1d0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>currentFileIsValid</name>
      <anchorfile>classFileBrowserComponent.html</anchorfile>
      <anchor>a9eddd1d64c2fe4d710a7c9fc607dca3c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>File</type>
      <name>getHighlightedFile</name>
      <anchorfile>classFileBrowserComponent.html</anchorfile>
      <anchor>a71f3c0e207d80c7cd3893cb1b58fae9f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const File &amp;</type>
      <name>getRoot</name>
      <anchorfile>classFileBrowserComponent.html</anchorfile>
      <anchor>a729b016025a4fc277285e1419e9702a9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRoot</name>
      <anchorfile>classFileBrowserComponent.html</anchorfile>
      <anchor>a8537220a265903e339112794b2740f4c</anchor>
      <arglist>(const File &amp;newRootDirectory)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFileName</name>
      <anchorfile>classFileBrowserComponent.html</anchorfile>
      <anchor>a4f4670732c403b2ceb280146fbd724eb</anchor>
      <arglist>(const String &amp;newName)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>goUp</name>
      <anchorfile>classFileBrowserComponent.html</anchorfile>
      <anchor>a7c7382598466ef33dfc1cceb33bb60cb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>refresh</name>
      <anchorfile>classFileBrowserComponent.html</anchorfile>
      <anchor>ad8f5511627f790847298053874cb2e39</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFileFilter</name>
      <anchorfile>classFileBrowserComponent.html</anchorfile>
      <anchor>a217409df05fadaf15cae2715107b9894</anchor>
      <arglist>(const FileFilter *newFileFilter)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual String</type>
      <name>getActionVerb</name>
      <anchorfile>classFileBrowserComponent.html</anchorfile>
      <anchor>a7e5e11247182aef630cec072d2945d0b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSaveMode</name>
      <anchorfile>classFileBrowserComponent.html</anchorfile>
      <anchor>ab1e3e064f521e76b62bf169aea69f23f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFilenameBoxLabel</name>
      <anchorfile>classFileBrowserComponent.html</anchorfile>
      <anchor>a388d30921f63f1581f227d62dcd4dea9</anchor>
      <arglist>(const String &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addListener</name>
      <anchorfile>classFileBrowserComponent.html</anchorfile>
      <anchor>ace96c9461921628b0668a0c38184d5e7</anchor>
      <arglist>(FileBrowserListener *listener)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeListener</name>
      <anchorfile>classFileBrowserComponent.html</anchorfile>
      <anchor>a92160e65690ad6288ef9eff9da052ae9</anchor>
      <arglist>(FileBrowserListener *listener)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resized</name>
      <anchorfile>classFileBrowserComponent.html</anchorfile>
      <anchor>a2be160fd2d593e77edd60b056160ca76</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>buttonClicked</name>
      <anchorfile>classFileBrowserComponent.html</anchorfile>
      <anchor>a9c9216ed18ca568412170c89dd709d86</anchor>
      <arglist>(Button *) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>comboBoxChanged</name>
      <anchorfile>classFileBrowserComponent.html</anchorfile>
      <anchor>a8e55a512b35b04dce0a9c16ef5028487</anchor>
      <arglist>(ComboBox *) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>textEditorTextChanged</name>
      <anchorfile>classFileBrowserComponent.html</anchorfile>
      <anchor>a8b3f399150b4fa13d03135e4e97c0d2e</anchor>
      <arglist>(TextEditor &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>textEditorReturnKeyPressed</name>
      <anchorfile>classFileBrowserComponent.html</anchorfile>
      <anchor>a466f09c30ac4e40ffbc33189f03c027a</anchor>
      <arglist>(TextEditor &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>textEditorEscapeKeyPressed</name>
      <anchorfile>classFileBrowserComponent.html</anchorfile>
      <anchor>a6e215b7b8cd85889d81270bc27b24f2b</anchor>
      <arglist>(TextEditor &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>textEditorFocusLost</name>
      <anchorfile>classFileBrowserComponent.html</anchorfile>
      <anchor>a3be55d8a9c7becff69a750241b27acc7</anchor>
      <arglist>(TextEditor &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>keyPressed</name>
      <anchorfile>classFileBrowserComponent.html</anchorfile>
      <anchor>aa6335d52f0fb467156c3633026b7ee45</anchor>
      <arglist>(const KeyPress &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>selectionChanged</name>
      <anchorfile>classFileBrowserComponent.html</anchorfile>
      <anchor>a04105aa5bb1770282e31ed852d3beee9</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fileClicked</name>
      <anchorfile>classFileBrowserComponent.html</anchorfile>
      <anchor>ab1bf1cac052ec8443d7741d0cfed72f3</anchor>
      <arglist>(const File &amp;, const MouseEvent &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fileDoubleClicked</name>
      <anchorfile>classFileBrowserComponent.html</anchorfile>
      <anchor>a5ced8044e12535ac25a553b27e467fe0</anchor>
      <arglist>(const File &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>browserRootChanged</name>
      <anchorfile>classFileBrowserComponent.html</anchorfile>
      <anchor>ac6d459f5785fd31ff9f54f81d6384e7f</anchor>
      <arglist>(const File &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isFileSuitable</name>
      <anchorfile>classFileBrowserComponent.html</anchorfile>
      <anchor>a16fae186279e68173c154caa7e925176</anchor>
      <arglist>(const File &amp;) const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isDirectorySuitable</name>
      <anchorfile>classFileBrowserComponent.html</anchorfile>
      <anchor>a1a523fd029f96c4346083b72f616f3b8</anchor>
      <arglist>(const File &amp;) const override</arglist>
    </member>
    <member kind="function">
      <type>FilePreviewComponent *</type>
      <name>getPreviewComponent</name>
      <anchorfile>classFileBrowserComponent.html</anchorfile>
      <anchor>a163416d7506eee6741d86f08b9691e82</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>DirectoryContentsDisplayComponent *</type>
      <name>getDisplayComponent</name>
      <anchorfile>classFileBrowserComponent.html</anchorfile>
      <anchor>a77af9e6ac9eb656c0aede422b07beb9a</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>getDefaultRoots</name>
      <anchorfile>classFileBrowserComponent.html</anchorfile>
      <anchor>a4d539c798017ab094d8fe54f9d87611c</anchor>
      <arglist>(StringArray &amp;rootNames, StringArray &amp;rootPaths)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>getRoots</name>
      <anchorfile>classFileBrowserComponent.html</anchorfile>
      <anchor>afc2c700b18e55f58693696e861f484a4</anchor>
      <arglist>(StringArray &amp;rootNames, StringArray &amp;rootPaths)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>resetRecentPaths</name>
      <anchorfile>classFileBrowserComponent.html</anchorfile>
      <anchor>aa7de2c3418a52ac04d7d357cf6881b9f</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>FileBrowserComponent::LookAndFeelMethods</name>
    <filename>structFileBrowserComponent_1_1LookAndFeelMethods.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~LookAndFeelMethods</name>
      <anchorfile>structFileBrowserComponent_1_1LookAndFeelMethods.html</anchorfile>
      <anchor>a934f73e7eca0f87b718f09971859a2c3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const Drawable *</type>
      <name>getDefaultFolderImage</name>
      <anchorfile>structFileBrowserComponent_1_1LookAndFeelMethods.html</anchorfile>
      <anchor>a64fd24d9d69a1493b023f7a1145cafc7</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const Drawable *</type>
      <name>getDefaultDocumentFileImage</name>
      <anchorfile>structFileBrowserComponent_1_1LookAndFeelMethods.html</anchorfile>
      <anchor>a4d6c44f0e67ed4823925d924d16a5c50</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual AttributedString</type>
      <name>createFileChooserHeaderText</name>
      <anchorfile>structFileBrowserComponent_1_1LookAndFeelMethods.html</anchorfile>
      <anchor>af5d72bc0fb76a5ccae4fe2430dbc99e4</anchor>
      <arglist>(const String &amp;title, const String &amp;instructions)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>drawFileBrowserRow</name>
      <anchorfile>structFileBrowserComponent_1_1LookAndFeelMethods.html</anchorfile>
      <anchor>affa014bf2d85d751e3deac3d1cf881e0</anchor>
      <arglist>(Graphics &amp;, int width, int height, const String &amp;filename, Image *optionalIcon, const String &amp;fileSizeDescription, const String &amp;fileTimeDescription, bool isDirectory, bool isItemSelected, int itemIndex, DirectoryContentsDisplayComponent &amp;)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Button *</type>
      <name>createFileBrowserGoUpButton</name>
      <anchorfile>structFileBrowserComponent_1_1LookAndFeelMethods.html</anchorfile>
      <anchor>a47d1670327d0312f43e2d1dd8788066c</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>layoutFileBrowserComponent</name>
      <anchorfile>structFileBrowserComponent_1_1LookAndFeelMethods.html</anchorfile>
      <anchor>a4a95e3d406af1c06a040db56701daa7e</anchor>
      <arglist>(FileBrowserComponent &amp;browserComp, DirectoryContentsDisplayComponent *fileListComponent, FilePreviewComponent *previewComp, ComboBox *currentPathBox, TextEditor *filenameBox, Button *goUpButton)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>FileBrowserListener</name>
    <filename>classFileBrowserListener.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~FileBrowserListener</name>
      <anchorfile>classFileBrowserListener.html</anchorfile>
      <anchor>a5b66c7c2bd94c9a2ae5a48d6fb287346</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>selectionChanged</name>
      <anchorfile>classFileBrowserListener.html</anchorfile>
      <anchor>a70f633952496b13ef6f2c054615affd9</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>fileClicked</name>
      <anchorfile>classFileBrowserListener.html</anchorfile>
      <anchor>a16d17e5c9097cc3ed9794edfdfe838c4</anchor>
      <arglist>(const File &amp;file, const MouseEvent &amp;e)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>fileDoubleClicked</name>
      <anchorfile>classFileBrowserListener.html</anchorfile>
      <anchor>ac2a06208299afcdf60dc7ea2f4dcd450</anchor>
      <arglist>(const File &amp;file)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>browserRootChanged</name>
      <anchorfile>classFileBrowserListener.html</anchorfile>
      <anchor>aa113aeb21edd4ac76d0f205aa5b4218c</anchor>
      <arglist>(const File &amp;newRoot)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>FileChooser</name>
    <filename>classFileChooser.html</filename>
    <member kind="function">
      <type></type>
      <name>FileChooser</name>
      <anchorfile>classFileChooser.html</anchorfile>
      <anchor>af8529e1ff1b0356734fcfcce139b92d1</anchor>
      <arglist>(const String &amp;dialogBoxTitle, const File &amp;initialFileOrDirectory=File(), const String &amp;filePatternsAllowed=String(), bool useOSNativeDialogBox=true, bool treatFilePackagesAsDirectories=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~FileChooser</name>
      <anchorfile>classFileChooser.html</anchorfile>
      <anchor>a67c94ae24fad94cf464d1283f33175d4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>browseForFileToOpen</name>
      <anchorfile>classFileChooser.html</anchorfile>
      <anchor>a546ef74bcd139b67a90e4459cd591d21</anchor>
      <arglist>(FilePreviewComponent *previewComponent=nullptr)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>browseForMultipleFilesToOpen</name>
      <anchorfile>classFileChooser.html</anchorfile>
      <anchor>a5088972374f57336e534539f404e517e</anchor>
      <arglist>(FilePreviewComponent *previewComponent=nullptr)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>browseForFileToSave</name>
      <anchorfile>classFileChooser.html</anchorfile>
      <anchor>a1ccbbb48aefc471ea70c34f9ab18fcd1</anchor>
      <arglist>(bool warnAboutOverwritingExistingFiles)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>browseForDirectory</name>
      <anchorfile>classFileChooser.html</anchorfile>
      <anchor>afdbce2d962f0c6c117d897e9e8687116</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>browseForMultipleFilesOrDirectories</name>
      <anchorfile>classFileChooser.html</anchorfile>
      <anchor>add78111ba95fce8ad0f3ab22a0338b30</anchor>
      <arglist>(FilePreviewComponent *previewComponent=nullptr)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>showDialog</name>
      <anchorfile>classFileChooser.html</anchorfile>
      <anchor>a2510d29a867b3f9f5adfa90e17c88068</anchor>
      <arglist>(int flags, FilePreviewComponent *previewComponent)</arglist>
    </member>
    <member kind="function">
      <type>File</type>
      <name>getResult</name>
      <anchorfile>classFileChooser.html</anchorfile>
      <anchor>a83beadbc2806f8c8945d672af96fc671</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Array&lt; File &gt; &amp;</type>
      <name>getResults</name>
      <anchorfile>classFileChooser.html</anchorfile>
      <anchor>a3d8bd26e64a0af0b8d97c6ac2cabc1e2</anchor>
      <arglist>() const noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>FileChooserDialogBox</name>
    <filename>classFileChooserDialogBox.html</filename>
    <base>ResizableWindow</base>
    <base protection="private">FileBrowserListener</base>
    <member kind="enumeration">
      <type></type>
      <name>ColourIds</name>
      <anchorfile>classFileChooserDialogBox.html</anchorfile>
      <anchor>aec403ffe26c5b7e34b6811cfb063df75</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>titleTextColourId</name>
      <anchorfile>classFileChooserDialogBox.html</anchorfile>
      <anchor>aec403ffe26c5b7e34b6811cfb063df75acafefa55a6db4bba4a908e5ea63b3a1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FileChooserDialogBox</name>
      <anchorfile>classFileChooserDialogBox.html</anchorfile>
      <anchor>a7eba417d4a07ad97673693dd9d5e6c56</anchor>
      <arglist>(const String &amp;title, const String &amp;instructions, FileBrowserComponent &amp;browserComponent, bool warnAboutOverwritingExistingFiles, Colour backgroundColour)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~FileChooserDialogBox</name>
      <anchorfile>classFileChooserDialogBox.html</anchorfile>
      <anchor>a96980634d76e05ebc454ecfb5f020176</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>show</name>
      <anchorfile>classFileChooserDialogBox.html</anchorfile>
      <anchor>abeddc88741bc4e9661ce96e26ba3590c</anchor>
      <arglist>(int width=0, int height=0)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>showAt</name>
      <anchorfile>classFileChooserDialogBox.html</anchorfile>
      <anchor>a038683131a8efafe2b22484211043fb1</anchor>
      <arglist>(int x, int y, int width, int height)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>centreWithDefaultSize</name>
      <anchorfile>classFileChooserDialogBox.html</anchorfile>
      <anchor>adc36f20b224f7fd0d399a83394a83d0f</anchor>
      <arglist>(Component *componentToCentreAround=nullptr)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>FileDragAndDropTarget</name>
    <filename>classFileDragAndDropTarget.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~FileDragAndDropTarget</name>
      <anchorfile>classFileDragAndDropTarget.html</anchorfile>
      <anchor>ac2dd4bc23ee0e715943c90bfb12cfb92</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isInterestedInFileDrag</name>
      <anchorfile>classFileDragAndDropTarget.html</anchorfile>
      <anchor>a44fa7f7e69dec8119c6b3a6ff9d2ddce</anchor>
      <arglist>(const StringArray &amp;files)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>fileDragEnter</name>
      <anchorfile>classFileDragAndDropTarget.html</anchorfile>
      <anchor>a474150f8eb50c1272ea3eef9e30522e6</anchor>
      <arglist>(const StringArray &amp;files, int x, int y)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>fileDragMove</name>
      <anchorfile>classFileDragAndDropTarget.html</anchorfile>
      <anchor>ae07df070efc3dfcd54c7b97b36dc1b8e</anchor>
      <arglist>(const StringArray &amp;files, int x, int y)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>fileDragExit</name>
      <anchorfile>classFileDragAndDropTarget.html</anchorfile>
      <anchor>a218984a4bb2fa6d33418c0f519e4685b</anchor>
      <arglist>(const StringArray &amp;files)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>filesDropped</name>
      <anchorfile>classFileDragAndDropTarget.html</anchorfile>
      <anchor>adc7848885ab2d9380f242c6445b019d4</anchor>
      <arglist>(const StringArray &amp;files, int x, int y)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>FileFilter</name>
    <filename>classFileFilter.html</filename>
    <member kind="function">
      <type></type>
      <name>FileFilter</name>
      <anchorfile>classFileFilter.html</anchorfile>
      <anchor>a3f90501257450a3f88b3d143dec7946b</anchor>
      <arglist>(const String &amp;filterDescription)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~FileFilter</name>
      <anchorfile>classFileFilter.html</anchorfile>
      <anchor>a969a3ec83a59362beeee0e4325dbdb6d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const String &amp;</type>
      <name>getDescription</name>
      <anchorfile>classFileFilter.html</anchorfile>
      <anchor>a46a7289c4a5fa272f730d1c890a7ca5f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isFileSuitable</name>
      <anchorfile>classFileFilter.html</anchorfile>
      <anchor>aeda6e37c3d5696fec7cb77970706deff</anchor>
      <arglist>(const File &amp;file) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isDirectorySuitable</name>
      <anchorfile>classFileFilter.html</anchorfile>
      <anchor>ac133687fcf57ee26643d17af7df85e0a</anchor>
      <arglist>(const File &amp;file) const =0</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>String</type>
      <name>description</name>
      <anchorfile>classFileFilter.html</anchorfile>
      <anchor>a405f80abc17801d969bbaab30b4cec10</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>FileInputSource</name>
    <filename>classFileInputSource.html</filename>
    <base>InputSource</base>
    <member kind="function">
      <type></type>
      <name>FileInputSource</name>
      <anchorfile>classFileInputSource.html</anchorfile>
      <anchor>a9bf6fb87e9675c644bc98ccb141c8508</anchor>
      <arglist>(const File &amp;file, bool useFileTimeInHashGeneration=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~FileInputSource</name>
      <anchorfile>classFileInputSource.html</anchorfile>
      <anchor>a02931f6b2178aaf377f014e279677793</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>InputStream *</type>
      <name>createInputStream</name>
      <anchorfile>classFileInputSource.html</anchorfile>
      <anchor>a0da92ee54e577fbd14352bc121d13c11</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>InputStream *</type>
      <name>createInputStreamFor</name>
      <anchorfile>classFileInputSource.html</anchorfile>
      <anchor>ac01db04a5397f2bd4da7f2bd9582ebae</anchor>
      <arglist>(const String &amp;relatedItemPath)</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>hashCode</name>
      <anchorfile>classFileInputSource.html</anchorfile>
      <anchor>ad502d2d89937525cce7179cee2104be8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>InputSource</name>
      <anchorfile>classInputSource.html</anchorfile>
      <anchor>af7e98cfaf3512fbae4f691c715b24383</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~InputSource</name>
      <anchorfile>classInputSource.html</anchorfile>
      <anchor>a09958a0275a39a619a5b64b3e86e76ed</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>FileInputStream</name>
    <filename>classFileInputStream.html</filename>
    <base>InputStream</base>
    <member kind="function">
      <type></type>
      <name>FileInputStream</name>
      <anchorfile>classFileInputStream.html</anchorfile>
      <anchor>a277a7370f2a2f038e9258de395122510</anchor>
      <arglist>(const File &amp;fileToRead)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~FileInputStream</name>
      <anchorfile>classFileInputStream.html</anchorfile>
      <anchor>a48dfa318f2d5ebefc1489ac44edefde5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const File &amp;</type>
      <name>getFile</name>
      <anchorfile>classFileInputStream.html</anchorfile>
      <anchor>a4f162d294de9de866f6ef74313faef68</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const Result &amp;</type>
      <name>getStatus</name>
      <anchorfile>classFileInputStream.html</anchorfile>
      <anchor>ace9aedfff3f4e9f375f6b5cd1bb056dd</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>failedToOpen</name>
      <anchorfile>classFileInputStream.html</anchorfile>
      <anchor>a203bfaf432beeac638b8d6ec5bbce2c3</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>openedOk</name>
      <anchorfile>classFileInputStream.html</anchorfile>
      <anchor>a45dc57c8101f565e505fed847723eb5d</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>getTotalLength</name>
      <anchorfile>classFileInputStream.html</anchorfile>
      <anchor>aaa9728f1553ac87d4185cda8c71868d5</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>read</name>
      <anchorfile>classFileInputStream.html</anchorfile>
      <anchor>a1b78ed4e0bd123ef3996154ec6d89252</anchor>
      <arglist>(void *, int) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isExhausted</name>
      <anchorfile>classFileInputStream.html</anchorfile>
      <anchor>ac325ed1556edf2ea959b1c05f6f1fb2a</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>getPosition</name>
      <anchorfile>classFileInputStream.html</anchorfile>
      <anchor>af6dddfc6ee214e6e7ac32b891c5d7209</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setPosition</name>
      <anchorfile>classFileInputStream.html</anchorfile>
      <anchor>a204dabd8c94c480fecdd55276f7125e7</anchor>
      <arglist>(int64) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual String</type>
      <name>readString</name>
      <anchorfile>classInputStream.html</anchorfile>
      <anchor>abff18ad6e416d45f19d347abd3433665</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>FileListComponent</name>
    <filename>classFileListComponent.html</filename>
    <base>ListBox</base>
    <base>DirectoryContentsDisplayComponent</base>
    <base protection="private">ListBoxModel</base>
    <base protection="private">ChangeListener</base>
    <member kind="function">
      <type></type>
      <name>FileListComponent</name>
      <anchorfile>classFileListComponent.html</anchorfile>
      <anchor>adbd638f9975ed562d987ffc9425ea397</anchor>
      <arglist>(DirectoryContentsList &amp;listToShow)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~FileListComponent</name>
      <anchorfile>classFileListComponent.html</anchorfile>
      <anchor>addb0d8acf1582da5e55386321ff71895</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumSelectedFiles</name>
      <anchorfile>classFileListComponent.html</anchorfile>
      <anchor>a731270725164cfb59b84294683976ef9</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>File</type>
      <name>getSelectedFile</name>
      <anchorfile>classFileListComponent.html</anchorfile>
      <anchor>a026952f4ad5778362cd04c1d8280fe9b</anchor>
      <arglist>(int index=0) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deselectAllFiles</name>
      <anchorfile>classFileListComponent.html</anchorfile>
      <anchor>a387c741f3a68196226178a035619effe</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scrollToTop</name>
      <anchorfile>classFileListComponent.html</anchorfile>
      <anchor>a4eed466d935ddc22f82589d32ed0ea37</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSelectedFile</name>
      <anchorfile>classFileListComponent.html</anchorfile>
      <anchor>a5998bfc18776a08513520e06e292c5c7</anchor>
      <arglist>(const File &amp;) override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ListBox</name>
      <anchorfile>classListBox.html</anchorfile>
      <anchor>a729e2a200adacf4e08978e33398337bc</anchor>
      <arglist>(const String &amp;componentName=String(), ListBoxModel *model=nullptr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ListBox</name>
      <anchorfile>classListBox.html</anchorfile>
      <anchor>a71376a469c4b6a97b100d227fd8704ce</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setModel</name>
      <anchorfile>classListBox.html</anchorfile>
      <anchor>a4d47ad39b0125f2ef5c35ce945c9b529</anchor>
      <arglist>(ListBoxModel *newModel)</arglist>
    </member>
    <member kind="function">
      <type>ListBoxModel *</type>
      <name>getModel</name>
      <anchorfile>classListBox.html</anchorfile>
      <anchor>a3c71b8c2d45739b4860194c57148a135</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateContent</name>
      <anchorfile>classListBox.html</anchorfile>
      <anchor>a3e8cb20434a462c1a102cf62e112e16d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMultipleSelectionEnabled</name>
      <anchorfile>classListBox.html</anchorfile>
      <anchor>a9582ec297c14961573f0f4eb62e0036d</anchor>
      <arglist>(bool shouldBeEnabled) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setClickingTogglesRowSelection</name>
      <anchorfile>classListBox.html</anchorfile>
      <anchor>af5786085edf1fe73417049e74c4c7823</anchor>
      <arglist>(bool flipRowSelection) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRowSelectedOnMouseDown</name>
      <anchorfile>classListBox.html</anchorfile>
      <anchor>a2289f266f495e78400c04ecd39d46b19</anchor>
      <arglist>(bool isSelectedOnMouseDown) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMouseMoveSelectsRows</name>
      <anchorfile>classListBox.html</anchorfile>
      <anchor>aaaff40d6a0a564eda13a1a34d5daca15</anchor>
      <arglist>(bool shouldSelect)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>selectRow</name>
      <anchorfile>classListBox.html</anchorfile>
      <anchor>ac56613db03adf964a683e184f7248640</anchor>
      <arglist>(int rowNumber, bool dontScrollToShowThisRow=false, bool deselectOthersFirst=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>selectRangeOfRows</name>
      <anchorfile>classListBox.html</anchorfile>
      <anchor>a786b9ec6034f59000e20f90653cd0719</anchor>
      <arglist>(int firstRow, int lastRow, bool dontScrollToShowThisRange=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deselectRow</name>
      <anchorfile>classListBox.html</anchorfile>
      <anchor>a55db77bbc9e90e83b1f137fa1e565b55</anchor>
      <arglist>(int rowNumber)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deselectAllRows</name>
      <anchorfile>classListBox.html</anchorfile>
      <anchor>a60b4c8ea8a51c04d43899fd51f349794</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>flipRowSelection</name>
      <anchorfile>classListBox.html</anchorfile>
      <anchor>adb559ca08ef51c4a81160a235172eae8</anchor>
      <arglist>(int rowNumber)</arglist>
    </member>
    <member kind="function">
      <type>SparseSet&lt; int &gt;</type>
      <name>getSelectedRows</name>
      <anchorfile>classListBox.html</anchorfile>
      <anchor>aa70bd5b2e4c8731b54d0dafe2a59b5bc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSelectedRows</name>
      <anchorfile>classListBox.html</anchorfile>
      <anchor>af2be6ee5e6ca7fad64f9caa35b7010d0</anchor>
      <arglist>(const SparseSet&lt; int &gt; &amp;setOfRowsToBeSelected, NotificationType sendNotificationEventToModel=sendNotification)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isRowSelected</name>
      <anchorfile>classListBox.html</anchorfile>
      <anchor>ae2a4e8b0468e2adaeedf571cb1aa0cc0</anchor>
      <arglist>(int rowNumber) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumSelectedRows</name>
      <anchorfile>classListBox.html</anchorfile>
      <anchor>abd6d17d979e1f30c5f305fc3d248ea0c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getSelectedRow</name>
      <anchorfile>classListBox.html</anchorfile>
      <anchor>a7539693edfefdf90f4e6562e4cebb6b8</anchor>
      <arglist>(int index=0) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getLastRowSelected</name>
      <anchorfile>classListBox.html</anchorfile>
      <anchor>a8fc23c975d4c66b24b4233df57262bbd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>selectRowsBasedOnModifierKeys</name>
      <anchorfile>classListBox.html</anchorfile>
      <anchor>a2e7c7e7fb931c36ee9e41a2d99a9eca9</anchor>
      <arglist>(int rowThatWasClickedOn, ModifierKeys modifiers, bool isMouseUpEvent)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVerticalPosition</name>
      <anchorfile>classListBox.html</anchorfile>
      <anchor>a250df6a39059fde46b37fcf17fb982db</anchor>
      <arglist>(double newProportion)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getVerticalPosition</name>
      <anchorfile>classListBox.html</anchorfile>
      <anchor>ad9924ff85a8ec56761fdbd90a8b25bf5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scrollToEnsureRowIsOnscreen</name>
      <anchorfile>classListBox.html</anchorfile>
      <anchor>a743f9159c7d4bd49390e43559e933fa0</anchor>
      <arglist>(int row)</arglist>
    </member>
    <member kind="function">
      <type>ScrollBar *</type>
      <name>getVerticalScrollBar</name>
      <anchorfile>classListBox.html</anchorfile>
      <anchor>afe55a57c6b24f05383a3e1fc5766cedd</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>ScrollBar *</type>
      <name>getHorizontalScrollBar</name>
      <anchorfile>classListBox.html</anchorfile>
      <anchor>a34f3e83f581aefca741e801314f39594</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getRowContainingPosition</name>
      <anchorfile>classListBox.html</anchorfile>
      <anchor>a5e832a5db1d2601b70711f4fe1c7e79e</anchor>
      <arglist>(int x, int y) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getInsertionIndexForPosition</name>
      <anchorfile>classListBox.html</anchorfile>
      <anchor>a0fde453ad2b8090d2406a960b4433435</anchor>
      <arglist>(int x, int y) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Rectangle&lt; int &gt;</type>
      <name>getRowPosition</name>
      <anchorfile>classListBox.html</anchorfile>
      <anchor>a6c7836b55e7d5a39f2fa60e47e0612c3</anchor>
      <arglist>(int rowNumber, bool relativeToComponentTopLeft) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Component *</type>
      <name>getComponentForRowNumber</name>
      <anchorfile>classListBox.html</anchorfile>
      <anchor>ad18fef6d775866379e631e5a669776cc</anchor>
      <arglist>(int rowNumber) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getRowNumberOfComponent</name>
      <anchorfile>classListBox.html</anchorfile>
      <anchor>ae6af3bb596848fcdaa2763760f1536e1</anchor>
      <arglist>(Component *rowComponent) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getVisibleRowWidth</name>
      <anchorfile>classListBox.html</anchorfile>
      <anchor>a5aeb18048979c0ead80497efc515cbaa</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRowHeight</name>
      <anchorfile>classListBox.html</anchorfile>
      <anchor>ab9c8c47afd94fbfd4cf84edcab71acb2</anchor>
      <arglist>(int newHeight)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getRowHeight</name>
      <anchorfile>classListBox.html</anchorfile>
      <anchor>a522aa72c0c35bb8689f160498bd101b1</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumRowsOnScreen</name>
      <anchorfile>classListBox.html</anchorfile>
      <anchor>a83f3eb25a49724dbf05f14af307371bd</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOutlineThickness</name>
      <anchorfile>classListBox.html</anchorfile>
      <anchor>a621d125d3338ff769bfcac1ca057e66b</anchor>
      <arglist>(int outlineThickness)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getOutlineThickness</name>
      <anchorfile>classListBox.html</anchorfile>
      <anchor>a233cede0e16b37229b7f4a6a42e26f3c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setHeaderComponent</name>
      <anchorfile>classListBox.html</anchorfile>
      <anchor>ab36777ae5cce2b2fc5008504117f6cc9</anchor>
      <arglist>(Component *newHeaderComponent)</arglist>
    </member>
    <member kind="function">
      <type>Component *</type>
      <name>getHeaderComponent</name>
      <anchorfile>classListBox.html</anchorfile>
      <anchor>aa3198592cab0552b2924b4e8499c9810</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMinimumContentWidth</name>
      <anchorfile>classListBox.html</anchorfile>
      <anchor>addb9bd64ab337e3d8a50b199a93d3840</anchor>
      <arglist>(int newMinimumWidth)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getVisibleContentWidth</name>
      <anchorfile>classListBox.html</anchorfile>
      <anchor>ab31f0d60daffd2359ec0d6cb3aeec0b9</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>repaintRow</name>
      <anchorfile>classListBox.html</anchorfile>
      <anchor>a0a89c76d3b62e0bc8cd2b41bfcfe3337</anchor>
      <arglist>(int rowNumber) noexcept</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Image</type>
      <name>createSnapshotOfRows</name>
      <anchorfile>classListBox.html</anchorfile>
      <anchor>a637da264f6371f1883c308ea6708c176</anchor>
      <arglist>(const SparseSet&lt; int &gt; &amp;rows, int &amp;x, int &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>Viewport *</type>
      <name>getViewport</name>
      <anchorfile>classListBox.html</anchorfile>
      <anchor>a43f8dacc6d109e009e06fcf49ba6dcf3</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>keyPressed</name>
      <anchorfile>classListBox.html</anchorfile>
      <anchor>a9e40ffc84bcf1fe7a036f7978b744c23</anchor>
      <arglist>(const KeyPress &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>keyStateChanged</name>
      <anchorfile>classListBox.html</anchorfile>
      <anchor>a84e49fbbf1ddf3af400f06e741ee0910</anchor>
      <arglist>(bool isKeyDown) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>paint</name>
      <anchorfile>classListBox.html</anchorfile>
      <anchor>ac6b78a9082a56fc683a12efbde1b4a2c</anchor>
      <arglist>(Graphics &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>paintOverChildren</name>
      <anchorfile>classListBox.html</anchorfile>
      <anchor>a5797c000ce38f73c2d45e0bf0e283141</anchor>
      <arglist>(Graphics &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resized</name>
      <anchorfile>classListBox.html</anchorfile>
      <anchor>aa74082b69e31dfea83fa83e65b7ccf52</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visibilityChanged</name>
      <anchorfile>classListBox.html</anchorfile>
      <anchor>a1e93681a034ff90140f0fa596487a8d9</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mouseWheelMove</name>
      <anchorfile>classListBox.html</anchorfile>
      <anchor>a2e80ef131eb8e538d1047c4545a63d52</anchor>
      <arglist>(const MouseEvent &amp;, const MouseWheelDetails &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mouseUp</name>
      <anchorfile>classListBox.html</anchorfile>
      <anchor>a452c0964666dc96b97c20475f258a54c</anchor>
      <arglist>(const MouseEvent &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>colourChanged</name>
      <anchorfile>classListBox.html</anchorfile>
      <anchor>aa032947d2e79144f4607cc61cda3f6bb</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>parentHierarchyChanged</name>
      <anchorfile>classListBox.html</anchorfile>
      <anchor>a63ecfa3bd387a5d55dd33af67903cd9d</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>startDragAndDrop</name>
      <anchorfile>classListBox.html</anchorfile>
      <anchor>ac417b0b10f2f9da1c5c430461f571a00</anchor>
      <arglist>(const MouseEvent &amp;, const SparseSet&lt; int &gt; &amp;rowsToDrag, const var &amp;dragDescription, bool allowDraggingToOtherWindows)</arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>ColourIds</name>
      <anchorfile>classListBox.html</anchorfile>
      <anchor>a08423950677e2e4efe521b32184708cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>backgroundColourId</name>
      <anchorfile>classListBox.html</anchorfile>
      <anchor>a08423950677e2e4efe521b32184708cbaf183e449ae9c8c100dd383198dab361b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>outlineColourId</name>
      <anchorfile>classListBox.html</anchorfile>
      <anchor>a08423950677e2e4efe521b32184708cbad8efb08c0307b5e7e87d2590af10ef1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>textColourId</name>
      <anchorfile>classListBox.html</anchorfile>
      <anchor>a08423950677e2e4efe521b32184708cbae4c8cdf2403dbc1feb8c9fe1d91281ef</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>FileLogger</name>
    <filename>classFileLogger.html</filename>
    <base>Logger</base>
    <member kind="function">
      <type></type>
      <name>FileLogger</name>
      <anchorfile>classFileLogger.html</anchorfile>
      <anchor>a708694692a4ab44a1436c8a55e6549f2</anchor>
      <arglist>(const File &amp;fileToWriteTo, const String &amp;welcomeMessage, const int64 maxInitialFileSizeBytes=128 *1024)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~FileLogger</name>
      <anchorfile>classFileLogger.html</anchorfile>
      <anchor>ab08af44f2de3fe1b51158132f9a399dd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const File &amp;</type>
      <name>getLogFile</name>
      <anchorfile>classFileLogger.html</anchorfile>
      <anchor>aa2dae5bcd0746287b8c5076019ea741c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>logMessage</name>
      <anchorfile>classFileLogger.html</anchorfile>
      <anchor>aaf1bc4062f89bc56c9926bb1af268bb4</anchor>
      <arglist>(const String &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Logger</name>
      <anchorfile>classLogger.html</anchorfile>
      <anchor>ae93f62ca3e47716b7120acb032a260f3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static FileLogger *</type>
      <name>createDefaultAppLogger</name>
      <anchorfile>classFileLogger.html</anchorfile>
      <anchor>a6ddf300bd192744a4767fc88a78b2dd9</anchor>
      <arglist>(const String &amp;logFileSubDirectoryName, const String &amp;logFileName, const String &amp;welcomeMessage, const int64 maxInitialFileSizeBytes=128 *1024)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static FileLogger *</type>
      <name>createDateStampedLogger</name>
      <anchorfile>classFileLogger.html</anchorfile>
      <anchor>a6278d0c047edb99196e6fa1c72bc91f5</anchor>
      <arglist>(const String &amp;logFileSubDirectoryName, const String &amp;logFileNameRoot, const String &amp;logFileNameSuffix, const String &amp;welcomeMessage)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static File</type>
      <name>getSystemLogFileFolder</name>
      <anchorfile>classFileLogger.html</anchorfile>
      <anchor>addb33c331b16dca4b732558b44c1fab7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>trimFileSize</name>
      <anchorfile>classFileLogger.html</anchorfile>
      <anchor>a0224c141681c9fd2ec850aed189b65f8</anchor>
      <arglist>(const File &amp;file, int64 maxFileSize)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void JUCE_CALLTYPE</type>
      <name>setCurrentLogger</name>
      <anchorfile>classLogger.html</anchorfile>
      <anchor>a5855a0341fc4f6ceb5418879fd685277</anchor>
      <arglist>(Logger *newLogger) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Logger *JUCE_CALLTYPE</type>
      <name>getCurrentLogger</name>
      <anchorfile>classLogger.html</anchorfile>
      <anchor>a679b3df20cc6b55d7d1309df641e1e1e</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void JUCE_CALLTYPE</type>
      <name>writeToLog</name>
      <anchorfile>classLogger.html</anchorfile>
      <anchor>a037cd16034c0663805f301b0e95c0be6</anchor>
      <arglist>(const String &amp;message)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void JUCE_CALLTYPE</type>
      <name>outputDebugString</name>
      <anchorfile>classLogger.html</anchorfile>
      <anchor>a54273b4faf398b4da464d21bb6abac59</anchor>
      <arglist>(const String &amp;text)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Logger</name>
      <anchorfile>classLogger.html</anchorfile>
      <anchor>abc41bfb031d896170c7675fa96a6b30c</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>FilenameComponent</name>
    <filename>classFilenameComponent.html</filename>
    <base>Component</base>
    <base>SettableTooltipClient</base>
    <base>FileDragAndDropTarget</base>
    <base protection="private">AsyncUpdater</base>
    <base protection="private">ComboBox::Listener</base>
    <class kind="struct">FilenameComponent::LookAndFeelMethods</class>
    <member kind="function">
      <type></type>
      <name>FilenameComponent</name>
      <anchorfile>classFilenameComponent.html</anchorfile>
      <anchor>af7e0ceb90d37ff9a92f453d9c59212d9</anchor>
      <arglist>(const String &amp;name, const File &amp;currentFile, bool canEditFilename, bool isDirectory, bool isForSaving, const String &amp;fileBrowserWildcard, const String &amp;enforcedSuffix, const String &amp;textWhenNothingSelected)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~FilenameComponent</name>
      <anchorfile>classFilenameComponent.html</anchorfile>
      <anchor>afb93c7681259b25567f0b78008794ee0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>File</type>
      <name>getCurrentFile</name>
      <anchorfile>classFilenameComponent.html</anchorfile>
      <anchor>abefc290967f8808c6bd42f5baaf97bf0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>getCurrentFileText</name>
      <anchorfile>classFilenameComponent.html</anchorfile>
      <anchor>a88eff3be27bbdc018166a355eaa2665d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCurrentFile</name>
      <anchorfile>classFilenameComponent.html</anchorfile>
      <anchor>ae251549ddd0e542132a9debe57300ec6</anchor>
      <arglist>(File newFile, bool addToRecentlyUsedList, NotificationType notification=sendNotificationAsync)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFilenameIsEditable</name>
      <anchorfile>classFilenameComponent.html</anchorfile>
      <anchor>a2b3bbfd73bd1f071a5c511f8782266d8</anchor>
      <arglist>(bool shouldBeEditable)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDefaultBrowseTarget</name>
      <anchorfile>classFilenameComponent.html</anchorfile>
      <anchor>a79934b297889977649251cae1afd323e</anchor>
      <arglist>(const File &amp;newDefaultDirectory)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual File</type>
      <name>getLocationToBrowse</name>
      <anchorfile>classFilenameComponent.html</anchorfile>
      <anchor>a35dd86bf26d306ebd80df1811cc092fa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>StringArray</type>
      <name>getRecentlyUsedFilenames</name>
      <anchorfile>classFilenameComponent.html</anchorfile>
      <anchor>a13a4a367ac633583eedae376b73373e9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRecentlyUsedFilenames</name>
      <anchorfile>classFilenameComponent.html</anchorfile>
      <anchor>a740fcb632383c83c32b744f16191e7cd</anchor>
      <arglist>(const StringArray &amp;filenames)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addRecentlyUsedFile</name>
      <anchorfile>classFilenameComponent.html</anchorfile>
      <anchor>a4a49fee3ac243a55e7ef7db10535b432</anchor>
      <arglist>(const File &amp;file)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaxNumberOfRecentFiles</name>
      <anchorfile>classFilenameComponent.html</anchorfile>
      <anchor>a6c0e43582a1abe9542b8382592f3e515</anchor>
      <arglist>(int newMaximum)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBrowseButtonText</name>
      <anchorfile>classFilenameComponent.html</anchorfile>
      <anchor>af3f994d7a7e5591322f01288b4a2000c</anchor>
      <arglist>(const String &amp;browseButtonText)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addListener</name>
      <anchorfile>classFilenameComponent.html</anchorfile>
      <anchor>a68d23410011d95128c87ad14dfca04f8</anchor>
      <arglist>(FilenameComponentListener *listener)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeListener</name>
      <anchorfile>classFilenameComponent.html</anchorfile>
      <anchor>a37affd68e94d2099914b142bc6a5bc0d</anchor>
      <arglist>(FilenameComponentListener *listener)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTooltip</name>
      <anchorfile>classFilenameComponent.html</anchorfile>
      <anchor>a64ba9890d9ce60735c942a08ad9538d2</anchor>
      <arglist>(const String &amp;newTooltip) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>paintOverChildren</name>
      <anchorfile>classFilenameComponent.html</anchorfile>
      <anchor>a761edbba6892fbdd396eb02dd356cdac</anchor>
      <arglist>(Graphics &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resized</name>
      <anchorfile>classFilenameComponent.html</anchorfile>
      <anchor>ab37d289009be54a5fd8fe34c0e30df0c</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lookAndFeelChanged</name>
      <anchorfile>classFilenameComponent.html</anchorfile>
      <anchor>a66b7092a26a7d8bf9274e168b5e10cdf</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isInterestedInFileDrag</name>
      <anchorfile>classFilenameComponent.html</anchorfile>
      <anchor>a62c18fb60b1efe4913dc12e5c8da144f</anchor>
      <arglist>(const StringArray &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>filesDropped</name>
      <anchorfile>classFilenameComponent.html</anchorfile>
      <anchor>a2051b45db8ca9671e09d2e7c30a367ca</anchor>
      <arglist>(const StringArray &amp;, int, int) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fileDragEnter</name>
      <anchorfile>classFilenameComponent.html</anchorfile>
      <anchor>a66841d54561cec5728495aa4a7f21533</anchor>
      <arglist>(const StringArray &amp;, int, int) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fileDragExit</name>
      <anchorfile>classFilenameComponent.html</anchorfile>
      <anchor>abedf0bb6daf0bd9663bafabc30a2d3e7</anchor>
      <arglist>(const StringArray &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>KeyboardFocusTraverser *</type>
      <name>createFocusTraverser</name>
      <anchorfile>classFilenameComponent.html</anchorfile>
      <anchor>a1afd05ccefa1239c8afcb037f2b90214</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>FilenameComponent::LookAndFeelMethods</name>
    <filename>structFilenameComponent_1_1LookAndFeelMethods.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~LookAndFeelMethods</name>
      <anchorfile>structFilenameComponent_1_1LookAndFeelMethods.html</anchorfile>
      <anchor>a6e5917a5173606f13b1aba19718cd74d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Button *</type>
      <name>createFilenameComponentBrowseButton</name>
      <anchorfile>structFilenameComponent_1_1LookAndFeelMethods.html</anchorfile>
      <anchor>a4c7ce033b323fcbc4ce1548493823406</anchor>
      <arglist>(const String &amp;text)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>layoutFilenameComponent</name>
      <anchorfile>structFilenameComponent_1_1LookAndFeelMethods.html</anchorfile>
      <anchor>a09460ac540ddcd9e215e91498631003d</anchor>
      <arglist>(FilenameComponent &amp;, ComboBox *filenameBox, Button *browseButton)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>FilenameComponentListener</name>
    <filename>classFilenameComponentListener.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~FilenameComponentListener</name>
      <anchorfile>classFilenameComponentListener.html</anchorfile>
      <anchor>ae6b8bb26e3daf19d3b935cd5bea2e707</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>filenameComponentChanged</name>
      <anchorfile>classFilenameComponentListener.html</anchorfile>
      <anchor>ab004f18f2a17ca43a7c153f8680a11f4</anchor>
      <arglist>(FilenameComponent *fileComponentThatHasChanged)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>FileOutputStream</name>
    <filename>classFileOutputStream.html</filename>
    <base>OutputStream</base>
    <member kind="function">
      <type></type>
      <name>FileOutputStream</name>
      <anchorfile>classFileOutputStream.html</anchorfile>
      <anchor>ab324bca74c6f7cc5c9180302daa7497f</anchor>
      <arglist>(const File &amp;fileToWriteTo, size_t bufferSizeToUse=16384)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~FileOutputStream</name>
      <anchorfile>classFileOutputStream.html</anchorfile>
      <anchor>aa0423041bf20194144689440ed94ade3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const File &amp;</type>
      <name>getFile</name>
      <anchorfile>classFileOutputStream.html</anchorfile>
      <anchor>aaefbc546f0a295eea4abc66c4b1e1409</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Result &amp;</type>
      <name>getStatus</name>
      <anchorfile>classFileOutputStream.html</anchorfile>
      <anchor>a042b69b37a81a6e51bb5f45b18cce067</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>failedToOpen</name>
      <anchorfile>classFileOutputStream.html</anchorfile>
      <anchor>a616887c2791a85e35f00b6e38436d4be</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>openedOk</name>
      <anchorfile>classFileOutputStream.html</anchorfile>
      <anchor>a5b0c2bc1b12469f38d4a2929711b66d9</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Result</type>
      <name>truncate</name>
      <anchorfile>classFileOutputStream.html</anchorfile>
      <anchor>a663c7e264306c74ed58f2639acec5797</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>flush</name>
      <anchorfile>classFileOutputStream.html</anchorfile>
      <anchor>afc63785b8744278d51814c4892207414</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>getPosition</name>
      <anchorfile>classFileOutputStream.html</anchorfile>
      <anchor>ad9c8bd54d832a6739a9a4af57f4b8254</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setPosition</name>
      <anchorfile>classFileOutputStream.html</anchorfile>
      <anchor>adfaac72947e3a9bf5bf99669d253219f</anchor>
      <arglist>(int64) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>write</name>
      <anchorfile>classFileOutputStream.html</anchorfile>
      <anchor>ae2028e7cfc77d246d160f316db61f60f</anchor>
      <arglist>(const void *, size_t) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>writeRepeatedByte</name>
      <anchorfile>classFileOutputStream.html</anchorfile>
      <anchor>a8b8d8a24b6e3eb021a5cb333c22a5de8</anchor>
      <arglist>(uint8 byte, size_t numTimesToRepeat) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~OutputStream</name>
      <anchorfile>classOutputStream.html</anchorfile>
      <anchor>a3c3286bd6c6c8fb6b16ce7f88745075b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>writeByte</name>
      <anchorfile>classOutputStream.html</anchorfile>
      <anchor>aaa3aee845d1cd8db87533313c12c0963</anchor>
      <arglist>(char byte)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>writeBool</name>
      <anchorfile>classOutputStream.html</anchorfile>
      <anchor>aac4bd355924dfb91aa71aa5c6c251924</anchor>
      <arglist>(bool boolValue)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>writeShort</name>
      <anchorfile>classOutputStream.html</anchorfile>
      <anchor>aa0c31878ffe72db678ad2df92f977b79</anchor>
      <arglist>(short value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>writeShortBigEndian</name>
      <anchorfile>classOutputStream.html</anchorfile>
      <anchor>a2f5dec34d9771edea9c0535eb5b58860</anchor>
      <arglist>(short value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>writeInt</name>
      <anchorfile>classOutputStream.html</anchorfile>
      <anchor>a75f455e1a6e4da9190cd77bc01657622</anchor>
      <arglist>(int value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>writeIntBigEndian</name>
      <anchorfile>classOutputStream.html</anchorfile>
      <anchor>ac42573016fc3f343dc9692d55d455f1b</anchor>
      <arglist>(int value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>writeInt64</name>
      <anchorfile>classOutputStream.html</anchorfile>
      <anchor>a078351d61263e8e8141ccde1a0c07816</anchor>
      <arglist>(int64 value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>writeInt64BigEndian</name>
      <anchorfile>classOutputStream.html</anchorfile>
      <anchor>a5962dcaca71153338180ef0c17e11152</anchor>
      <arglist>(int64 value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>writeFloat</name>
      <anchorfile>classOutputStream.html</anchorfile>
      <anchor>a0a1d967388deb957e573a8bfa0aede56</anchor>
      <arglist>(float value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>writeFloatBigEndian</name>
      <anchorfile>classOutputStream.html</anchorfile>
      <anchor>a84cb925582b87dc5c1f5e6d569a74208</anchor>
      <arglist>(float value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>writeDouble</name>
      <anchorfile>classOutputStream.html</anchorfile>
      <anchor>af48e3b3934bf5b4624dcbe00989581a0</anchor>
      <arglist>(double value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>writeDoubleBigEndian</name>
      <anchorfile>classOutputStream.html</anchorfile>
      <anchor>a03a42d49d4a1aba31b38a2069cbe18b0</anchor>
      <arglist>(double value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>writeCompressedInt</name>
      <anchorfile>classOutputStream.html</anchorfile>
      <anchor>ac01d789588295c52ce4034bf792d9b20</anchor>
      <arglist>(int value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>writeString</name>
      <anchorfile>classOutputStream.html</anchorfile>
      <anchor>a63a79aac70bc3ad976cd3fb3a6d57ffd</anchor>
      <arglist>(const String &amp;text)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>writeText</name>
      <anchorfile>classOutputStream.html</anchorfile>
      <anchor>a94dd75c2e93c3ae9239e2d9479586876</anchor>
      <arglist>(const String &amp;text, bool asUTF16, bool writeUTF16ByteOrderMark)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int64</type>
      <name>writeFromInputStream</name>
      <anchorfile>classOutputStream.html</anchorfile>
      <anchor>a9f80423e8a780f4124d9b7910d712cb1</anchor>
      <arglist>(InputStream &amp;source, int64 maxNumBytesToWrite)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNewLineString</name>
      <anchorfile>classOutputStream.html</anchorfile>
      <anchor>a3cd9133af8d3e6a04b8c983290649909</anchor>
      <arglist>(const String &amp;newLineString)</arglist>
    </member>
    <member kind="function">
      <type>const String &amp;</type>
      <name>getNewLineString</name>
      <anchorfile>classOutputStream.html</anchorfile>
      <anchor>a9ca663ec96b69491053385b6c26e6572</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>OutputStream</name>
      <anchorfile>classOutputStream.html</anchorfile>
      <anchor>a1159b7032e052493fdec603a3deeff70</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>FilePreviewComponent</name>
    <filename>classFilePreviewComponent.html</filename>
    <base>Component</base>
    <member kind="function">
      <type></type>
      <name>FilePreviewComponent</name>
      <anchorfile>classFilePreviewComponent.html</anchorfile>
      <anchor>a1d368e3ea93da423b44da9001d63cd5d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~FilePreviewComponent</name>
      <anchorfile>classFilePreviewComponent.html</anchorfile>
      <anchor>aa2f2047c589d8aee5f4e92973c16e00c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>selectedFileChanged</name>
      <anchorfile>classFilePreviewComponent.html</anchorfile>
      <anchor>aa89507ce51322a1462bb12d1fd07715a</anchor>
      <arglist>(const File &amp;newSelectedFile)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>FileSearchPath</name>
    <filename>classFileSearchPath.html</filename>
    <member kind="function">
      <type></type>
      <name>FileSearchPath</name>
      <anchorfile>classFileSearchPath.html</anchorfile>
      <anchor>a37b486aaabdae9e71f69310bcd32de79</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FileSearchPath</name>
      <anchorfile>classFileSearchPath.html</anchorfile>
      <anchor>a55b79d55adaa7a4635063088eb00dd2c</anchor>
      <arglist>(const String &amp;path)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FileSearchPath</name>
      <anchorfile>classFileSearchPath.html</anchorfile>
      <anchor>aaf195d380fc36f55aee083319546611e</anchor>
      <arglist>(const FileSearchPath &amp;)</arglist>
    </member>
    <member kind="function">
      <type>FileSearchPath &amp;</type>
      <name>operator=</name>
      <anchorfile>classFileSearchPath.html</anchorfile>
      <anchor>ad5d93b9e93c1e3d9ea54737bd10a28f3</anchor>
      <arglist>(const FileSearchPath &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~FileSearchPath</name>
      <anchorfile>classFileSearchPath.html</anchorfile>
      <anchor>aefab78766a187af30986836b9ba1f70d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>FileSearchPath &amp;</type>
      <name>operator=</name>
      <anchorfile>classFileSearchPath.html</anchorfile>
      <anchor>a663c28591c30e3f2f3c9ce07bdb680f9</anchor>
      <arglist>(const String &amp;path)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumPaths</name>
      <anchorfile>classFileSearchPath.html</anchorfile>
      <anchor>ac23a53aa33f559222421ac4d17321804</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>File</type>
      <name>operator[]</name>
      <anchorfile>classFileSearchPath.html</anchorfile>
      <anchor>ab83cfa4d96cc23f1a2000bd054f5f786</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>toString</name>
      <anchorfile>classFileSearchPath.html</anchorfile>
      <anchor>ae9bc3fdeef9af732d51ec8dd7d4ab08e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>classFileSearchPath.html</anchorfile>
      <anchor>a045b18e60858ac874c9fbf4b28c4f52f</anchor>
      <arglist>(const File &amp;directoryToAdd, int insertIndex=-1)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addIfNotAlreadyThere</name>
      <anchorfile>classFileSearchPath.html</anchorfile>
      <anchor>ac9866aba263d485fb846a8867f0aa7f8</anchor>
      <arglist>(const File &amp;directoryToAdd)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove</name>
      <anchorfile>classFileSearchPath.html</anchorfile>
      <anchor>ad560bd8c08782e3eb0ead50ee2793161</anchor>
      <arglist>(int indexToRemove)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addPath</name>
      <anchorfile>classFileSearchPath.html</anchorfile>
      <anchor>aba4ddf6a796bd97a7254f1019b3af9f5</anchor>
      <arglist>(const FileSearchPath &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeRedundantPaths</name>
      <anchorfile>classFileSearchPath.html</anchorfile>
      <anchor>ada0f0c385326ce152cf1b23c39b31516</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeNonExistentPaths</name>
      <anchorfile>classFileSearchPath.html</anchorfile>
      <anchor>a9a3170aadec6b3dd9b2d5c263f87b9bf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>findChildFiles</name>
      <anchorfile>classFileSearchPath.html</anchorfile>
      <anchor>a4ba70d62200ad57a85b1cb0ade33b1cf</anchor>
      <arglist>(Array&lt; File &gt; &amp;results, int whatToLookFor, bool searchRecursively, const String &amp;wildCardPattern=&quot;*&quot;) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isFileInPath</name>
      <anchorfile>classFileSearchPath.html</anchorfile>
      <anchor>a9b866d5ab02e3677c375bf1e3fa935f6</anchor>
      <arglist>(const File &amp;fileToCheck, bool checkRecursively) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>FileSearchPathListComponent</name>
    <filename>classFileSearchPathListComponent.html</filename>
    <base>Component</base>
    <base>SettableTooltipClient</base>
    <base>FileDragAndDropTarget</base>
    <base protection="private">ListBoxModel</base>
    <member kind="enumeration">
      <type></type>
      <name>ColourIds</name>
      <anchorfile>classFileSearchPathListComponent.html</anchorfile>
      <anchor>ad490e320611ac10c29f5c07e0c6aa30f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>backgroundColourId</name>
      <anchorfile>classFileSearchPathListComponent.html</anchorfile>
      <anchor>ad490e320611ac10c29f5c07e0c6aa30faaeb38822be9df0511374d2f6c0684790</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FileSearchPathListComponent</name>
      <anchorfile>classFileSearchPathListComponent.html</anchorfile>
      <anchor>a5e41ab33f6ec3c92c65d5ccbf6b1735a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~FileSearchPathListComponent</name>
      <anchorfile>classFileSearchPathListComponent.html</anchorfile>
      <anchor>aa19c5cc1e545558434fdd65239f38318</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const FileSearchPath &amp;</type>
      <name>getPath</name>
      <anchorfile>classFileSearchPathListComponent.html</anchorfile>
      <anchor>af58876df760a2f3c4096abd4b9454b50</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPath</name>
      <anchorfile>classFileSearchPathListComponent.html</anchorfile>
      <anchor>a04ad4d49fa2871532c5d66a682ef03a9</anchor>
      <arglist>(const FileSearchPath &amp;newPath)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDefaultBrowseTarget</name>
      <anchorfile>classFileSearchPathListComponent.html</anchorfile>
      <anchor>aac07a5d2f748148ca278a8d8826e6e43</anchor>
      <arglist>(const File &amp;newDefaultDirectory)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumRows</name>
      <anchorfile>classFileSearchPathListComponent.html</anchorfile>
      <anchor>a98511f87abb780e9f53f7d684fa0b20a</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>paintListBoxItem</name>
      <anchorfile>classFileSearchPathListComponent.html</anchorfile>
      <anchor>a47190b102a53d8c25eb81db64d29a2e6</anchor>
      <arglist>(int rowNumber, Graphics &amp;g, int width, int height, bool rowIsSelected) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deleteKeyPressed</name>
      <anchorfile>classFileSearchPathListComponent.html</anchorfile>
      <anchor>ace140fd2d45192c23045808085657b3a</anchor>
      <arglist>(int lastRowSelected) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>returnKeyPressed</name>
      <anchorfile>classFileSearchPathListComponent.html</anchorfile>
      <anchor>a0668eaacb767fc7cbb07b9ccb253c49e</anchor>
      <arglist>(int lastRowSelected) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>listBoxItemDoubleClicked</name>
      <anchorfile>classFileSearchPathListComponent.html</anchorfile>
      <anchor>abb53ee7a3126ca1635bf22692575d165</anchor>
      <arglist>(int row, const MouseEvent &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>selectedRowsChanged</name>
      <anchorfile>classFileSearchPathListComponent.html</anchorfile>
      <anchor>ab08231967ff065e928334f4e6b580388</anchor>
      <arglist>(int lastRowSelected) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resized</name>
      <anchorfile>classFileSearchPathListComponent.html</anchorfile>
      <anchor>af317f2a16e3490434e882e25edf3fecd</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>paint</name>
      <anchorfile>classFileSearchPathListComponent.html</anchorfile>
      <anchor>a4d576510d8df940b993558e7d710d0ca</anchor>
      <arglist>(Graphics &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isInterestedInFileDrag</name>
      <anchorfile>classFileSearchPathListComponent.html</anchorfile>
      <anchor>aa3b2399586c8004e521ec1c0f5245d15</anchor>
      <arglist>(const StringArray &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>filesDropped</name>
      <anchorfile>classFileSearchPathListComponent.html</anchorfile>
      <anchor>a4cf163995fee93469999d6be23122749</anchor>
      <arglist>(const StringArray &amp;files, int, int) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>buttonClicked</name>
      <anchorfile>classFileSearchPathListComponent.html</anchorfile>
      <anchor>a3510267893458769f58e68ffc73d2f33</anchor>
      <arglist>(Button *) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>FileTreeComponent</name>
    <filename>classFileTreeComponent.html</filename>
    <base>TreeView</base>
    <base>DirectoryContentsDisplayComponent</base>
    <member kind="function">
      <type></type>
      <name>FileTreeComponent</name>
      <anchorfile>classFileTreeComponent.html</anchorfile>
      <anchor>ac2d6da93dff837221552e684749ce508</anchor>
      <arglist>(DirectoryContentsList &amp;listToShow)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~FileTreeComponent</name>
      <anchorfile>classFileTreeComponent.html</anchorfile>
      <anchor>a23f8e7a313601b0cba09ced9bdcc2dd1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumSelectedFiles</name>
      <anchorfile>classFileTreeComponent.html</anchorfile>
      <anchor>a3b781bbf4f33ad4e818b851b169d4c93</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>File</type>
      <name>getSelectedFile</name>
      <anchorfile>classFileTreeComponent.html</anchorfile>
      <anchor>a26965d24d3f81957cd2da53f9cdb90ed</anchor>
      <arglist>(int index=0) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deselectAllFiles</name>
      <anchorfile>classFileTreeComponent.html</anchorfile>
      <anchor>ad3406efa6e5d03b8edce96f84ea346cc</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scrollToTop</name>
      <anchorfile>classFileTreeComponent.html</anchorfile>
      <anchor>a8a151fbcc2c7b0ed02779a0d9a9997fe</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSelectedFile</name>
      <anchorfile>classFileTreeComponent.html</anchorfile>
      <anchor>a65d12b1e3e8120c05444f7109b8c93c3</anchor>
      <arglist>(const File &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>refresh</name>
      <anchorfile>classFileTreeComponent.html</anchorfile>
      <anchor>aacc76f2cb6f1857df9898250751c5463</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDragAndDropDescription</name>
      <anchorfile>classFileTreeComponent.html</anchorfile>
      <anchor>acf0d725ef9505914f37e60ab433c84d4</anchor>
      <arglist>(const String &amp;description)</arglist>
    </member>
    <member kind="function">
      <type>const String &amp;</type>
      <name>getDragAndDropDescription</name>
      <anchorfile>classFileTreeComponent.html</anchorfile>
      <anchor>ad5ae34f6647c564e3555ac5684954230</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setItemHeight</name>
      <anchorfile>classFileTreeComponent.html</anchorfile>
      <anchor>a1a439a1239b427c02708ae2331fae6a4</anchor>
      <arglist>(int newHeight)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getItemHeight</name>
      <anchorfile>classFileTreeComponent.html</anchorfile>
      <anchor>ad6b5088956a220667a2013ffed14dbb1</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TreeView</name>
      <anchorfile>classTreeView.html</anchorfile>
      <anchor>a5e042100dbfdb9868e0c36e4c786d331</anchor>
      <arglist>(const String &amp;componentName=String())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TreeView</name>
      <anchorfile>classTreeView.html</anchorfile>
      <anchor>a9131ac3d332c721b2aa8e3202e7cc305</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRootItem</name>
      <anchorfile>classTreeView.html</anchorfile>
      <anchor>a14b78e4691e3155d1a55ea7edf743596</anchor>
      <arglist>(TreeViewItem *newRootItem)</arglist>
    </member>
    <member kind="function">
      <type>TreeViewItem *</type>
      <name>getRootItem</name>
      <anchorfile>classTreeView.html</anchorfile>
      <anchor>a1cab55fed1d8dc6064307acdbbcba9b4</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deleteRootItem</name>
      <anchorfile>classTreeView.html</anchorfile>
      <anchor>ad5245e71c0684de6cf942238da54b9cc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRootItemVisible</name>
      <anchorfile>classTreeView.html</anchorfile>
      <anchor>a3c28114193951c8079fdfeb95738f410</anchor>
      <arglist>(bool shouldBeVisible)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isRootItemVisible</name>
      <anchorfile>classTreeView.html</anchorfile>
      <anchor>a8a6f74ca5b60ecd97451e32bf386e419</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDefaultOpenness</name>
      <anchorfile>classTreeView.html</anchorfile>
      <anchor>a5a9030dae554634352b2c4f2ed2db5b9</anchor>
      <arglist>(bool isOpenByDefault)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>areItemsOpenByDefault</name>
      <anchorfile>classTreeView.html</anchorfile>
      <anchor>a1d29f3b4c3d964171d03744409cf5692</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMultiSelectEnabled</name>
      <anchorfile>classTreeView.html</anchorfile>
      <anchor>acf2e695dbd3a01343d1c69b022650e97</anchor>
      <arglist>(bool canMultiSelect)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isMultiSelectEnabled</name>
      <anchorfile>classTreeView.html</anchorfile>
      <anchor>a026e6738d51c3a40abb38438b4966fe0</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOpenCloseButtonsVisible</name>
      <anchorfile>classTreeView.html</anchorfile>
      <anchor>abe04eaa5b5df3a1d37187d002c174e24</anchor>
      <arglist>(bool shouldBeVisible)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>areOpenCloseButtonsVisible</name>
      <anchorfile>classTreeView.html</anchorfile>
      <anchor>a3524e12c2137fdbee1b83b12c870b40b</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearSelectedItems</name>
      <anchorfile>classTreeView.html</anchorfile>
      <anchor>ae64500dc9c423669798ab1bd81952f57</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumSelectedItems</name>
      <anchorfile>classTreeView.html</anchorfile>
      <anchor>ac5bd87369462f67797996dc8bb9cf4e4</anchor>
      <arglist>(int maximumDepthToSearchTo=-1) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>TreeViewItem *</type>
      <name>getSelectedItem</name>
      <anchorfile>classTreeView.html</anchorfile>
      <anchor>a08a92231c68c4133a87a0ec087b3d5dc</anchor>
      <arglist>(int index) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>moveSelectedRow</name>
      <anchorfile>classTreeView.html</anchorfile>
      <anchor>afa5d4e6ec7da7b1de06784094fedfc63</anchor>
      <arglist>(int deltaRows)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumRowsInTree</name>
      <anchorfile>classTreeView.html</anchorfile>
      <anchor>a352eb21745885abb3d8032d5e1469338</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>TreeViewItem *</type>
      <name>getItemOnRow</name>
      <anchorfile>classTreeView.html</anchorfile>
      <anchor>ac5a7d7f1cbe8b4ac166ef16851c53835</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function">
      <type>TreeViewItem *</type>
      <name>getItemAt</name>
      <anchorfile>classTreeView.html</anchorfile>
      <anchor>a452ed1febce895cda7a8ff50a28ac946</anchor>
      <arglist>(int yPosition) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scrollToKeepItemVisible</name>
      <anchorfile>classTreeView.html</anchorfile>
      <anchor>adff5344f0cbd0053553335d2a9397fd6</anchor>
      <arglist>(TreeViewItem *item)</arglist>
    </member>
    <member kind="function">
      <type>Viewport *</type>
      <name>getViewport</name>
      <anchorfile>classTreeView.html</anchorfile>
      <anchor>a3dc7dcc7f57e32e402ffcfae1eabbdb9</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getIndentSize</name>
      <anchorfile>classTreeView.html</anchorfile>
      <anchor>ae2c670ee3063b96ff5f6d7b81e05ee06</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIndentSize</name>
      <anchorfile>classTreeView.html</anchorfile>
      <anchor>a9baf9e5fc5fa8474ba09ebbf3076a500</anchor>
      <arglist>(int newIndentSize)</arglist>
    </member>
    <member kind="function">
      <type>TreeViewItem *</type>
      <name>findItemFromIdentifierString</name>
      <anchorfile>classTreeView.html</anchorfile>
      <anchor>aef07872429f7bd1807ecf5c7186fa608</anchor>
      <arglist>(const String &amp;identifierString) const </arglist>
    </member>
    <member kind="function">
      <type>XmlElement *</type>
      <name>getOpennessState</name>
      <anchorfile>classTreeView.html</anchorfile>
      <anchor>ae442d9c17f9dddbf745ddb57b9332919</anchor>
      <arglist>(bool alsoIncludeScrollPosition) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>restoreOpennessState</name>
      <anchorfile>classTreeView.html</anchorfile>
      <anchor>a0e88906665c57b672def512e355af4f8</anchor>
      <arglist>(const XmlElement &amp;newState, bool restoreStoredSelection)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>paint</name>
      <anchorfile>classTreeView.html</anchorfile>
      <anchor>ad212873bb6cb74f44c423cbf3aad1b66</anchor>
      <arglist>(Graphics &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resized</name>
      <anchorfile>classTreeView.html</anchorfile>
      <anchor>a6653345fa423e3969cfecb804f8b1886</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>keyPressed</name>
      <anchorfile>classTreeView.html</anchorfile>
      <anchor>a5906c1e51ba5de9e849c79015c48f3a0</anchor>
      <arglist>(const KeyPress &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>colourChanged</name>
      <anchorfile>classTreeView.html</anchorfile>
      <anchor>adb597c4a208016276c11da563f2e0672</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enablementChanged</name>
      <anchorfile>classTreeView.html</anchorfile>
      <anchor>a25ee8644a3b0d300f33178c87d13fcfa</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isInterestedInFileDrag</name>
      <anchorfile>classTreeView.html</anchorfile>
      <anchor>aef2f83d071863ec00db59450d746c3a4</anchor>
      <arglist>(const StringArray &amp;files) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fileDragEnter</name>
      <anchorfile>classTreeView.html</anchorfile>
      <anchor>a23da6d4d8f6844fa49b137e319aed77d</anchor>
      <arglist>(const StringArray &amp;files, int x, int y) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fileDragMove</name>
      <anchorfile>classTreeView.html</anchorfile>
      <anchor>ab85b634b58ffa73eb90190a7e3f4f20e</anchor>
      <arglist>(const StringArray &amp;files, int x, int y) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fileDragExit</name>
      <anchorfile>classTreeView.html</anchorfile>
      <anchor>a978978d39f7f3c3f24e073b4332d57bc</anchor>
      <arglist>(const StringArray &amp;files) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>filesDropped</name>
      <anchorfile>classTreeView.html</anchorfile>
      <anchor>a884bd3d9658450751ced2165b77d800f</anchor>
      <arglist>(const StringArray &amp;files, int x, int y) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isInterestedInDragSource</name>
      <anchorfile>classTreeView.html</anchorfile>
      <anchor>afbfa354c5869c63a4c101e492c28c48a</anchor>
      <arglist>(const SourceDetails &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>itemDragEnter</name>
      <anchorfile>classTreeView.html</anchorfile>
      <anchor>aeb8f828cfdbc9ea9fcdb96defac80a69</anchor>
      <arglist>(const SourceDetails &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>itemDragMove</name>
      <anchorfile>classTreeView.html</anchorfile>
      <anchor>a473067477127fb1e66f51000588eb06a</anchor>
      <arglist>(const SourceDetails &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>itemDragExit</name>
      <anchorfile>classTreeView.html</anchorfile>
      <anchor>a7e994c0a2e560228bdce393acefab088</anchor>
      <arglist>(const SourceDetails &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>itemDropped</name>
      <anchorfile>classTreeView.html</anchorfile>
      <anchor>a1dddbf29a676760f6ba45bde53e952e9</anchor>
      <arglist>(const SourceDetails &amp;) override</arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>ColourIds</name>
      <anchorfile>classTreeView.html</anchorfile>
      <anchor>abeebe6dbdc6ae466495aabc64eb51d6a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>backgroundColourId</name>
      <anchorfile>classTreeView.html</anchorfile>
      <anchor>abeebe6dbdc6ae466495aabc64eb51d6aafe6141938ba7ca482d4bfd990c9972a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>linesColourId</name>
      <anchorfile>classTreeView.html</anchorfile>
      <anchor>abeebe6dbdc6ae466495aabc64eb51d6aa129ebbdc625406f6dd26047aaa3f082a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>dragAndDropIndicatorColourId</name>
      <anchorfile>classTreeView.html</anchorfile>
      <anchor>abeebe6dbdc6ae466495aabc64eb51d6aad580cdecf3960d0d68904675383bb2ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>selectedItemBackgroundColourId</name>
      <anchorfile>classTreeView.html</anchorfile>
      <anchor>abeebe6dbdc6ae466495aabc64eb51d6aa70c4477c7945a15d0fc8e5c5f75cdb71</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>oddItemsColourId</name>
      <anchorfile>classTreeView.html</anchorfile>
      <anchor>abeebe6dbdc6ae466495aabc64eb51d6aae28e90557dcf45d9ab9f18d22cd01269</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>evenItemsColourId</name>
      <anchorfile>classTreeView.html</anchorfile>
      <anchor>abeebe6dbdc6ae466495aabc64eb51d6aa5a4f2c34d4e792ee21c085596555b069</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>FillType</name>
    <filename>classFillType.html</filename>
    <member kind="function">
      <type></type>
      <name>FillType</name>
      <anchorfile>classFillType.html</anchorfile>
      <anchor>a118c51580928b701c7c3a1976d5b5133</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FillType</name>
      <anchorfile>classFillType.html</anchorfile>
      <anchor>aee433a67f43ead1180f8ccde3507ed1f</anchor>
      <arglist>(Colour colour) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FillType</name>
      <anchorfile>classFillType.html</anchorfile>
      <anchor>a5be046ef5a18f2a136a9b33b2486e58d</anchor>
      <arglist>(const ColourGradient &amp;gradient)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FillType</name>
      <anchorfile>classFillType.html</anchorfile>
      <anchor>a3f67b8d794cafa66ccf9f60a80bfc6d2</anchor>
      <arglist>(const Image &amp;image, const AffineTransform &amp;transform) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FillType</name>
      <anchorfile>classFillType.html</anchorfile>
      <anchor>a858b3504cc4cdc3fc60fb71898ba1c26</anchor>
      <arglist>(const FillType &amp;)</arglist>
    </member>
    <member kind="function">
      <type>FillType &amp;</type>
      <name>operator=</name>
      <anchorfile>classFillType.html</anchorfile>
      <anchor>ae74ca89eeec03034b27a94221a4e81ac</anchor>
      <arglist>(const FillType &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FillType</name>
      <anchorfile>classFillType.html</anchorfile>
      <anchor>a0829ffa02b245d68bb159798bd5b8644</anchor>
      <arglist>(FillType &amp;&amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>FillType &amp;</type>
      <name>operator=</name>
      <anchorfile>classFillType.html</anchorfile>
      <anchor>a4b62e8966739836cd5b1b8701d6bd7da</anchor>
      <arglist>(FillType &amp;&amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~FillType</name>
      <anchorfile>classFillType.html</anchorfile>
      <anchor>a45a28cb87d8faf5789c14c88087852e0</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isColour</name>
      <anchorfile>classFillType.html</anchorfile>
      <anchor>ae816ef1788db62d88a9ea251fd7abdf4</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isGradient</name>
      <anchorfile>classFillType.html</anchorfile>
      <anchor>adf38a922717b83a0f9ed9b9d0b294efc</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isTiledImage</name>
      <anchorfile>classFillType.html</anchorfile>
      <anchor>aaaee9279ba52466501e9a231e02b3358</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setColour</name>
      <anchorfile>classFillType.html</anchorfile>
      <anchor>a55bae86d03db42bbdbca0187183db448</anchor>
      <arglist>(Colour newColour) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGradient</name>
      <anchorfile>classFillType.html</anchorfile>
      <anchor>a56bd20de45bbd44cd262245ea1ff3615</anchor>
      <arglist>(const ColourGradient &amp;newGradient)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTiledImage</name>
      <anchorfile>classFillType.html</anchorfile>
      <anchor>a37f1ace7dcffb397803ee1d0cdb51749</anchor>
      <arglist>(const Image &amp;image, const AffineTransform &amp;transform) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOpacity</name>
      <anchorfile>classFillType.html</anchorfile>
      <anchor>a4c05ac05e816cecabba0971b3840ba40</anchor>
      <arglist>(float newOpacity) noexcept</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getOpacity</name>
      <anchorfile>classFillType.html</anchorfile>
      <anchor>a257456c1f1541722a4ef662520670c2b</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isInvisible</name>
      <anchorfile>classFillType.html</anchorfile>
      <anchor>ae94ec364686ded07aa207a91fe33941d</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>FillType</type>
      <name>transformed</name>
      <anchorfile>classFillType.html</anchorfile>
      <anchor>a5750bc2f18b31abf87555c132334056b</anchor>
      <arglist>(const AffineTransform &amp;transform) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classFillType.html</anchorfile>
      <anchor>a26519d44e5975e65f92cd5d3e96d822a</anchor>
      <arglist>(const FillType &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classFillType.html</anchorfile>
      <anchor>ac8213225296328518a94ae5112ff4145</anchor>
      <arglist>(const FillType &amp;) const </arglist>
    </member>
    <member kind="variable">
      <type>Colour</type>
      <name>colour</name>
      <anchorfile>classFillType.html</anchorfile>
      <anchor>a6eb1907c0b75fccfbf45ede3b3b490d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ScopedPointer&lt; ColourGradient &gt;</type>
      <name>gradient</name>
      <anchorfile>classFillType.html</anchorfile>
      <anchor>a62d382f59a2bf0720245908a4269a805</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Image</type>
      <name>image</name>
      <anchorfile>classFillType.html</anchorfile>
      <anchor>a10bd0d13433133545b26ea3894b3c641</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>AffineTransform</type>
      <name>transform</name>
      <anchorfile>classFillType.html</anchorfile>
      <anchor>a6302124b870bccda6a55b13a37a69744</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>FlacAudioFormat</name>
    <filename>classFlacAudioFormat.html</filename>
    <base>AudioFormat</base>
    <member kind="function">
      <type></type>
      <name>FlacAudioFormat</name>
      <anchorfile>classFlacAudioFormat.html</anchorfile>
      <anchor>a767df3502e290183216370447d1dc7ee</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~FlacAudioFormat</name>
      <anchorfile>classFlacAudioFormat.html</anchorfile>
      <anchor>a71a95d6ee4ba2c401b82fc253be3c99b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Array&lt; int &gt;</type>
      <name>getPossibleSampleRates</name>
      <anchorfile>classFlacAudioFormat.html</anchorfile>
      <anchor>a212827e4fd98fc9cd925fa8a0a5c1cc1</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>Array&lt; int &gt;</type>
      <name>getPossibleBitDepths</name>
      <anchorfile>classFlacAudioFormat.html</anchorfile>
      <anchor>a6990076714a2301d8a2e36d5b4801f8a</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>canDoStereo</name>
      <anchorfile>classFlacAudioFormat.html</anchorfile>
      <anchor>a4c753931010deb63b5219b3b3bc460d0</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>canDoMono</name>
      <anchorfile>classFlacAudioFormat.html</anchorfile>
      <anchor>a48e6a22a2438cfbb7e5b3632a636ab60</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isCompressed</name>
      <anchorfile>classFlacAudioFormat.html</anchorfile>
      <anchor>aa6eecbf03ffb8b95d40e778f87a45ebb</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>StringArray</type>
      <name>getQualityOptions</name>
      <anchorfile>classFlacAudioFormat.html</anchorfile>
      <anchor>a50d353da797032fc84510e6420906e63</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>AudioFormatReader *</type>
      <name>createReaderFor</name>
      <anchorfile>classFlacAudioFormat.html</anchorfile>
      <anchor>a7dfb22a4c459d5d31a29d28f21962fb2</anchor>
      <arglist>(InputStream *sourceStream, bool deleteStreamIfOpeningFails) override</arglist>
    </member>
    <member kind="function">
      <type>AudioFormatWriter *</type>
      <name>createWriterFor</name>
      <anchorfile>classFlacAudioFormat.html</anchorfile>
      <anchor>a168c4d0687340ba96b4bf199be2df428</anchor>
      <arglist>(OutputStream *streamToWriteTo, double sampleRateToUse, unsigned int numberOfChannels, int bitsPerSample, const StringPairArray &amp;metadataValues, int qualityOptionIndex) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>FlexBox</name>
    <filename>classFlexBox.html</filename>
    <member kind="enumeration">
      <type></type>
      <name>Direction</name>
      <anchorfile>classFlexBox.html</anchorfile>
      <anchor>a674e8e1e731b68c17d600715fca63015</anchor>
      <arglist></arglist>
      <enumvalue file="classFlexBox.html" anchor="a674e8e1e731b68c17d600715fca63015af1965a857bc285d26fe22023aa5ab50d">row</enumvalue>
      <enumvalue file="classFlexBox.html" anchor="a674e8e1e731b68c17d600715fca63015ac6376864f7e71e1685d440473eace55b">rowReverse</enumvalue>
      <enumvalue file="classFlexBox.html" anchor="a674e8e1e731b68c17d600715fca63015a1afd32818d1c9525f82aff4c09efd254">column</enumvalue>
      <enumvalue file="classFlexBox.html" anchor="a674e8e1e731b68c17d600715fca63015af6ee385127321f0a2c579444f938bc7f">columnReverse</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>Wrap</name>
      <anchorfile>classFlexBox.html</anchorfile>
      <anchor>a252f351ef4317467a58ad25922f64e63</anchor>
      <arglist></arglist>
      <enumvalue file="classFlexBox.html" anchor="a252f351ef4317467a58ad25922f64e63a7c6a2ecda2b948866fc1326a2ae5aad7">noWrap</enumvalue>
      <enumvalue file="classFlexBox.html" anchor="a252f351ef4317467a58ad25922f64e63accfc59a528a109fa4204e8ea06e8b68b">wrap</enumvalue>
      <enumvalue file="classFlexBox.html" anchor="a252f351ef4317467a58ad25922f64e63ab12e4e95d6f64f54dc5bb5de8dbe2d49">wrapReverse</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>AlignContent</name>
      <anchorfile>classFlexBox.html</anchorfile>
      <anchor>a11793a1ebd50cc74be89f720f4a05084</anchor>
      <arglist></arglist>
      <enumvalue file="classFlexBox.html" anchor="a11793a1ebd50cc74be89f720f4a05084a7e84944493e379c33782eb1c9ecb82c3">stretch</enumvalue>
      <enumvalue file="classFlexBox.html" anchor="a11793a1ebd50cc74be89f720f4a05084ac32cab448eddaf94fa5338db29c7cf89">flexStart</enumvalue>
      <enumvalue file="classFlexBox.html" anchor="a11793a1ebd50cc74be89f720f4a05084ab1369607fa32fa98d1a6ba62ce8bc573">flexEnd</enumvalue>
      <enumvalue file="classFlexBox.html" anchor="a11793a1ebd50cc74be89f720f4a05084aadb115059e28d960fa8badfac5516667">center</enumvalue>
      <enumvalue file="classFlexBox.html" anchor="a11793a1ebd50cc74be89f720f4a05084ab0b1ef0af30aa79cf07b1cf39953f029">spaceBetween</enumvalue>
      <enumvalue file="classFlexBox.html" anchor="a11793a1ebd50cc74be89f720f4a05084ab5c5f6071beee84263c99a6015c4accf">spaceAround</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>AlignItems</name>
      <anchorfile>classFlexBox.html</anchorfile>
      <anchor>ae187b70583f1446fb017cfeea7a91c09</anchor>
      <arglist></arglist>
      <enumvalue file="classFlexBox.html" anchor="ae187b70583f1446fb017cfeea7a91c09a7e84944493e379c33782eb1c9ecb82c3">stretch</enumvalue>
      <enumvalue file="classFlexBox.html" anchor="ae187b70583f1446fb017cfeea7a91c09ac32cab448eddaf94fa5338db29c7cf89">flexStart</enumvalue>
      <enumvalue file="classFlexBox.html" anchor="ae187b70583f1446fb017cfeea7a91c09ab1369607fa32fa98d1a6ba62ce8bc573">flexEnd</enumvalue>
      <enumvalue file="classFlexBox.html" anchor="ae187b70583f1446fb017cfeea7a91c09aadb115059e28d960fa8badfac5516667">center</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>JustifyContent</name>
      <anchorfile>classFlexBox.html</anchorfile>
      <anchor>afa615fca8a66bca45dc4b7ecdb75c3fd</anchor>
      <arglist></arglist>
      <enumvalue file="classFlexBox.html" anchor="afa615fca8a66bca45dc4b7ecdb75c3fdac32cab448eddaf94fa5338db29c7cf89">flexStart</enumvalue>
      <enumvalue file="classFlexBox.html" anchor="afa615fca8a66bca45dc4b7ecdb75c3fdab1369607fa32fa98d1a6ba62ce8bc573">flexEnd</enumvalue>
      <enumvalue file="classFlexBox.html" anchor="afa615fca8a66bca45dc4b7ecdb75c3fdaadb115059e28d960fa8badfac5516667">center</enumvalue>
      <enumvalue file="classFlexBox.html" anchor="afa615fca8a66bca45dc4b7ecdb75c3fdab0b1ef0af30aa79cf07b1cf39953f029">spaceBetween</enumvalue>
      <enumvalue file="classFlexBox.html" anchor="afa615fca8a66bca45dc4b7ecdb75c3fdab5c5f6071beee84263c99a6015c4accf">spaceAround</enumvalue>
    </member>
    <member kind="function">
      <type></type>
      <name>FlexBox</name>
      <anchorfile>classFlexBox.html</anchorfile>
      <anchor>a32d79a379f90380322a59083fbf32ed3</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FlexBox</name>
      <anchorfile>classFlexBox.html</anchorfile>
      <anchor>a4c44bc8d44580b62d02e42ee4b53b9d5</anchor>
      <arglist>(Direction, Wrap, AlignContent, AlignItems, JustifyContent) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FlexBox</name>
      <anchorfile>classFlexBox.html</anchorfile>
      <anchor>aadf556076d93c4796bf9aca3d4aa9c8c</anchor>
      <arglist>(JustifyContent) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~FlexBox</name>
      <anchorfile>classFlexBox.html</anchorfile>
      <anchor>a8acaf64b1e4f64d76d6707b2e22f127a</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>performLayout</name>
      <anchorfile>classFlexBox.html</anchorfile>
      <anchor>a191d589377bc55d4fb9a545bad12e2c9</anchor>
      <arglist>(Rectangle&lt; float &gt; targetArea)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>performLayout</name>
      <anchorfile>classFlexBox.html</anchorfile>
      <anchor>a2f6ce4f070aade2cf13d5de9ad9da11e</anchor>
      <arglist>(Rectangle&lt; int &gt; targetArea)</arglist>
    </member>
    <member kind="variable">
      <type>Direction</type>
      <name>flexDirection</name>
      <anchorfile>classFlexBox.html</anchorfile>
      <anchor>a6fff1e86d4ae97ed4a0dd5face653914</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Wrap</type>
      <name>flexWrap</name>
      <anchorfile>classFlexBox.html</anchorfile>
      <anchor>a58870e7df132cee2eda6d7586d026303</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>AlignContent</type>
      <name>alignContent</name>
      <anchorfile>classFlexBox.html</anchorfile>
      <anchor>a8e1ae8a873d7ff198f439d3088192bcf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>AlignItems</type>
      <name>alignItems</name>
      <anchorfile>classFlexBox.html</anchorfile>
      <anchor>a9e928c10773d54e50e4bfcfc2814f541</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>JustifyContent</type>
      <name>justifyContent</name>
      <anchorfile>classFlexBox.html</anchorfile>
      <anchor>a20627d266f82422c5e72152ba07e5bc1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Array&lt; FlexItem &gt;</type>
      <name>items</name>
      <anchorfile>classFlexBox.html</anchorfile>
      <anchor>aebe0aeb88e2a044a737df0f5ac26bc3b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>FlexItem</name>
    <filename>classFlexItem.html</filename>
    <class kind="struct">FlexItem::Margin</class>
    <member kind="enumeration">
      <type></type>
      <name>AlignSelf</name>
      <anchorfile>classFlexItem.html</anchorfile>
      <anchor>a8bba729fda8779a2d3dfc576b2fc77fa</anchor>
      <arglist></arglist>
      <enumvalue file="classFlexItem.html" anchor="a8bba729fda8779a2d3dfc576b2fc77faae8ecba5781c140da302cca2e4996b4fd">autoAlign</enumvalue>
      <enumvalue file="classFlexItem.html" anchor="a8bba729fda8779a2d3dfc576b2fc77faac32cab448eddaf94fa5338db29c7cf89">flexStart</enumvalue>
      <enumvalue file="classFlexItem.html" anchor="a8bba729fda8779a2d3dfc576b2fc77faab1369607fa32fa98d1a6ba62ce8bc573">flexEnd</enumvalue>
      <enumvalue file="classFlexItem.html" anchor="a8bba729fda8779a2d3dfc576b2fc77faaadb115059e28d960fa8badfac5516667">center</enumvalue>
      <enumvalue file="classFlexItem.html" anchor="a8bba729fda8779a2d3dfc576b2fc77faa7e84944493e379c33782eb1c9ecb82c3">stretch</enumvalue>
    </member>
    <member kind="function">
      <type></type>
      <name>FlexItem</name>
      <anchorfile>classFlexItem.html</anchorfile>
      <anchor>ad17a0d212116208fc1759172eee98cb3</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FlexItem</name>
      <anchorfile>classFlexItem.html</anchorfile>
      <anchor>ac88477dbf5c9b39f273d4562ac3cd210</anchor>
      <arglist>(float width, float height) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FlexItem</name>
      <anchorfile>classFlexItem.html</anchorfile>
      <anchor>a3df829013d540b32460f0d4376420953</anchor>
      <arglist>(float width, float height, Component &amp;targetComponent) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FlexItem</name>
      <anchorfile>classFlexItem.html</anchorfile>
      <anchor>a8afd8bf254c79ca96f51f657f2715ddd</anchor>
      <arglist>(float width, float height, FlexBox &amp;flexBoxToControl) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FlexItem</name>
      <anchorfile>classFlexItem.html</anchorfile>
      <anchor>ac0c15786413c6e3b056fa6c719afe7a0</anchor>
      <arglist>(Component &amp;componentToControl) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FlexItem</name>
      <anchorfile>classFlexItem.html</anchorfile>
      <anchor>a27f373e7ca89e747adbb6befcf1fdb71</anchor>
      <arglist>(FlexBox &amp;flexBoxToControl) noexcept</arglist>
    </member>
    <member kind="function">
      <type>FlexItem</type>
      <name>withFlex</name>
      <anchorfile>classFlexItem.html</anchorfile>
      <anchor>a3b7a1861012a43637121b80b12491c48</anchor>
      <arglist>(float newFlexGrow) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>FlexItem</type>
      <name>withFlex</name>
      <anchorfile>classFlexItem.html</anchorfile>
      <anchor>a3c931366e20bfaf23fefc35bbd95156a</anchor>
      <arglist>(float newFlexGrow, float newFlexShrink) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>FlexItem</type>
      <name>withFlex</name>
      <anchorfile>classFlexItem.html</anchorfile>
      <anchor>a476bca8c6fad10563ff78bcbe2e3ed06</anchor>
      <arglist>(float newFlexGrow, float newFlexShrink, float newFlexBasis) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>FlexItem</type>
      <name>withWidth</name>
      <anchorfile>classFlexItem.html</anchorfile>
      <anchor>a9c763185fbebb6cd7f7ccef9f6dab4fc</anchor>
      <arglist>(float newWidth) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>FlexItem</type>
      <name>withMinWidth</name>
      <anchorfile>classFlexItem.html</anchorfile>
      <anchor>a615d216f3af0de65b34cc1da628a673f</anchor>
      <arglist>(float newMinWidth) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>FlexItem</type>
      <name>withMaxWidth</name>
      <anchorfile>classFlexItem.html</anchorfile>
      <anchor>a87660b7a54b701bbf1301757cc3b26d2</anchor>
      <arglist>(float newMaxWidth) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>FlexItem</type>
      <name>withHeight</name>
      <anchorfile>classFlexItem.html</anchorfile>
      <anchor>a7bc47fcc65e9d321c418b27c308e02ad</anchor>
      <arglist>(float newHeight) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>FlexItem</type>
      <name>withMinHeight</name>
      <anchorfile>classFlexItem.html</anchorfile>
      <anchor>a25fbad6471a495f3f0e02cc7fdfb06e5</anchor>
      <arglist>(float newMinHeight) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>FlexItem</type>
      <name>withMaxHeight</name>
      <anchorfile>classFlexItem.html</anchorfile>
      <anchor>a05d7572270d059f040478f364cf23137</anchor>
      <arglist>(float newMaxHeight) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>FlexItem</type>
      <name>withMargin</name>
      <anchorfile>classFlexItem.html</anchorfile>
      <anchor>a13e192e7981da37cceaa5a72232c55b6</anchor>
      <arglist>(Margin) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>FlexItem</type>
      <name>withOrder</name>
      <anchorfile>classFlexItem.html</anchorfile>
      <anchor>af85d008100e1919ce4868f0c7070fc28</anchor>
      <arglist>(int newOrder) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>FlexItem</type>
      <name>withAlignSelf</name>
      <anchorfile>classFlexItem.html</anchorfile>
      <anchor>a2560af46435f2fe6c263a81f39eaa614</anchor>
      <arglist>(AlignSelf newAlignSelf) const noexcept</arglist>
    </member>
    <member kind="variable">
      <type>Rectangle&lt; float &gt;</type>
      <name>currentBounds</name>
      <anchorfile>classFlexItem.html</anchorfile>
      <anchor>aa8c1424c9e12c6b08a29c4767ec06704</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Component *</type>
      <name>associatedComponent</name>
      <anchorfile>classFlexItem.html</anchorfile>
      <anchor>a844775f34c346b8e807c66d3623d9ea8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FlexBox *</type>
      <name>associatedFlexBox</name>
      <anchorfile>classFlexItem.html</anchorfile>
      <anchor>ae91dba1ed2ad5a26f0b2733060dbd5ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>order</name>
      <anchorfile>classFlexItem.html</anchorfile>
      <anchor>a65a0d2e16a904472eaa9ada3cdfcbf13</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>flexGrow</name>
      <anchorfile>classFlexItem.html</anchorfile>
      <anchor>ae2ac46ab80a5a81da22d6f4a2f0debe1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>flexShrink</name>
      <anchorfile>classFlexItem.html</anchorfile>
      <anchor>a67fdfe4ec6cdd882057e8ed39994fb93</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>flexBasis</name>
      <anchorfile>classFlexItem.html</anchorfile>
      <anchor>a893ec8b92e7bb576da0f8637f51686f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>AlignSelf</type>
      <name>alignSelf</name>
      <anchorfile>classFlexItem.html</anchorfile>
      <anchor>a7b9190e838f5ee0d70d1cac494621fd7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>width</name>
      <anchorfile>classFlexItem.html</anchorfile>
      <anchor>a87d745f6e6a2a000cc25b51bfd5c6572</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>minWidth</name>
      <anchorfile>classFlexItem.html</anchorfile>
      <anchor>ac4c4db40e054ed849f115a4b4ec89b1e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>maxWidth</name>
      <anchorfile>classFlexItem.html</anchorfile>
      <anchor>ae1b6c839d1aefdedd7e3a3c4fa3667aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>height</name>
      <anchorfile>classFlexItem.html</anchorfile>
      <anchor>ab3c3e66c4869d3a05ecdf7ae8eaf3ef1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>minHeight</name>
      <anchorfile>classFlexItem.html</anchorfile>
      <anchor>ae2ea8deb9f2f112b791c03e80bfdfd63</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>maxHeight</name>
      <anchorfile>classFlexItem.html</anchorfile>
      <anchor>a166fa48e4268692cce0419f8ed5ad56a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Margin</type>
      <name>margin</name>
      <anchorfile>classFlexItem.html</anchorfile>
      <anchor>a995f3c4d01fc78a564a2d4db0e909532</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>autoValue</name>
      <anchorfile>classFlexItem.html</anchorfile>
      <anchor>af32603bdf7f814f6d73a999b54a34df6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>notAssigned</name>
      <anchorfile>classFlexItem.html</anchorfile>
      <anchor>ae610cab6b383c97d0fc4363cbd22adcb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>FlexItem::Margin</name>
    <filename>structFlexItem_1_1Margin.html</filename>
    <member kind="function">
      <type></type>
      <name>Margin</name>
      <anchorfile>structFlexItem_1_1Margin.html</anchorfile>
      <anchor>a5072b1155fd3195768e04bbc0b49921b</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Margin</name>
      <anchorfile>structFlexItem_1_1Margin.html</anchorfile>
      <anchor>a2adf829c2d6070c7383fe8476902e74d</anchor>
      <arglist>(float size) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Margin</name>
      <anchorfile>structFlexItem_1_1Margin.html</anchorfile>
      <anchor>a71f9a0f6a63d444376ab9e7ecd42a304</anchor>
      <arglist>(float top, float right, float bottom, float left) noexcept</arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>left</name>
      <anchorfile>structFlexItem_1_1Margin.html</anchorfile>
      <anchor>a7db889eb288018455d37a9da2591a354</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>right</name>
      <anchorfile>structFlexItem_1_1Margin.html</anchorfile>
      <anchor>a162fe662f55f930a611297e2b85c56ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>top</name>
      <anchorfile>structFlexItem_1_1Margin.html</anchorfile>
      <anchor>a017733eb0a8f5a34036bb92b43a60b41</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>bottom</name>
      <anchorfile>structFlexItem_1_1Margin.html</anchorfile>
      <anchor>a536dd94d80a74fdb271b3c57943d90d8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>FloatVectorOperations</name>
    <filename>classFloatVectorOperations.html</filename>
    <member kind="function" static="yes">
      <type>static void JUCE_CALLTYPE</type>
      <name>clear</name>
      <anchorfile>classFloatVectorOperations.html</anchorfile>
      <anchor>acce802be6e02529420e3d0d66a39af5c</anchor>
      <arglist>(float *dest, int numValues) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void JUCE_CALLTYPE</type>
      <name>clear</name>
      <anchorfile>classFloatVectorOperations.html</anchorfile>
      <anchor>a1919939f23e894f084af5b3390e2679b</anchor>
      <arglist>(double *dest, int numValues) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void JUCE_CALLTYPE</type>
      <name>fill</name>
      <anchorfile>classFloatVectorOperations.html</anchorfile>
      <anchor>ae0e5dd44851eb99ecb03b666e1b53b18</anchor>
      <arglist>(float *dest, float valueToFill, int numValues) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void JUCE_CALLTYPE</type>
      <name>fill</name>
      <anchorfile>classFloatVectorOperations.html</anchorfile>
      <anchor>ac954c6285fe26e299c35b2239e42b622</anchor>
      <arglist>(double *dest, double valueToFill, int numValues) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void JUCE_CALLTYPE</type>
      <name>copy</name>
      <anchorfile>classFloatVectorOperations.html</anchorfile>
      <anchor>a4aba32ea681f35f01db2c8623dd67ebe</anchor>
      <arglist>(float *dest, const float *src, int numValues) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void JUCE_CALLTYPE</type>
      <name>copy</name>
      <anchorfile>classFloatVectorOperations.html</anchorfile>
      <anchor>aafcde646a4e03af6e319b3d22cc6029e</anchor>
      <arglist>(double *dest, const double *src, int numValues) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void JUCE_CALLTYPE</type>
      <name>copyWithMultiply</name>
      <anchorfile>classFloatVectorOperations.html</anchorfile>
      <anchor>a2d44be13812240cc6ab5127be5be92f7</anchor>
      <arglist>(float *dest, const float *src, float multiplier, int numValues) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void JUCE_CALLTYPE</type>
      <name>copyWithMultiply</name>
      <anchorfile>classFloatVectorOperations.html</anchorfile>
      <anchor>aa175a0a6c59325fa631d6d10a2d422da</anchor>
      <arglist>(double *dest, const double *src, double multiplier, int numValues) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void JUCE_CALLTYPE</type>
      <name>add</name>
      <anchorfile>classFloatVectorOperations.html</anchorfile>
      <anchor>a8933515e05caeee7c55909cd7da94395</anchor>
      <arglist>(float *dest, float amountToAdd, int numValues) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void JUCE_CALLTYPE</type>
      <name>add</name>
      <anchorfile>classFloatVectorOperations.html</anchorfile>
      <anchor>abcc3b2237f76e8e9f9983b1ff2002632</anchor>
      <arglist>(double *dest, double amountToAdd, int numValues) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void JUCE_CALLTYPE</type>
      <name>add</name>
      <anchorfile>classFloatVectorOperations.html</anchorfile>
      <anchor>a4f26234e33cbf7e3c4faeb63085c098e</anchor>
      <arglist>(float *dest, const float *src, float amount, int numValues) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void JUCE_CALLTYPE</type>
      <name>add</name>
      <anchorfile>classFloatVectorOperations.html</anchorfile>
      <anchor>a245c5fd266b7ff9fefd6d47abf79c6bc</anchor>
      <arglist>(double *dest, const double *src, double amount, int numValues) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void JUCE_CALLTYPE</type>
      <name>add</name>
      <anchorfile>classFloatVectorOperations.html</anchorfile>
      <anchor>a6888f9da21f5039da7e4c386382bf59b</anchor>
      <arglist>(float *dest, const float *src, int numValues) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void JUCE_CALLTYPE</type>
      <name>add</name>
      <anchorfile>classFloatVectorOperations.html</anchorfile>
      <anchor>aba97fe548c8b241907ffdae530a868e0</anchor>
      <arglist>(double *dest, const double *src, int numValues) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void JUCE_CALLTYPE</type>
      <name>add</name>
      <anchorfile>classFloatVectorOperations.html</anchorfile>
      <anchor>a7ff7224caeb29aea19a87823cbc5a11a</anchor>
      <arglist>(float *dest, const float *src1, const float *src2, int num) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void JUCE_CALLTYPE</type>
      <name>add</name>
      <anchorfile>classFloatVectorOperations.html</anchorfile>
      <anchor>ad9b573d8a2cd0928b62f08edfbdab857</anchor>
      <arglist>(double *dest, const double *src1, const double *src2, int num) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void JUCE_CALLTYPE</type>
      <name>subtract</name>
      <anchorfile>classFloatVectorOperations.html</anchorfile>
      <anchor>a84fc0e2af67681183064f05699b538de</anchor>
      <arglist>(float *dest, const float *src, int numValues) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void JUCE_CALLTYPE</type>
      <name>subtract</name>
      <anchorfile>classFloatVectorOperations.html</anchorfile>
      <anchor>a1e6e85bc85ecaac7ce15f15ace73b9d7</anchor>
      <arglist>(double *dest, const double *src, int numValues) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void JUCE_CALLTYPE</type>
      <name>subtract</name>
      <anchorfile>classFloatVectorOperations.html</anchorfile>
      <anchor>a80c147b6e4be53203014629063883337</anchor>
      <arglist>(float *dest, const float *src1, const float *src2, int num) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void JUCE_CALLTYPE</type>
      <name>subtract</name>
      <anchorfile>classFloatVectorOperations.html</anchorfile>
      <anchor>a937c3235abc41ec11e7ad7109f976fc0</anchor>
      <arglist>(double *dest, const double *src1, const double *src2, int num) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void JUCE_CALLTYPE</type>
      <name>addWithMultiply</name>
      <anchorfile>classFloatVectorOperations.html</anchorfile>
      <anchor>a484eb10ffdaeaef2c3b2714efab54111</anchor>
      <arglist>(float *dest, const float *src, float multiplier, int numValues) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void JUCE_CALLTYPE</type>
      <name>addWithMultiply</name>
      <anchorfile>classFloatVectorOperations.html</anchorfile>
      <anchor>a00287415638fc8b33d1a165a3a294cff</anchor>
      <arglist>(double *dest, const double *src, double multiplier, int numValues) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void JUCE_CALLTYPE</type>
      <name>addWithMultiply</name>
      <anchorfile>classFloatVectorOperations.html</anchorfile>
      <anchor>a1bc9175313f7f8bd0cf7d504520b6a52</anchor>
      <arglist>(float *dest, const float *src1, const float *src2, int num) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void JUCE_CALLTYPE</type>
      <name>addWithMultiply</name>
      <anchorfile>classFloatVectorOperations.html</anchorfile>
      <anchor>a35ef8fa562cb2a7c086e0c687a405119</anchor>
      <arglist>(double *dest, const double *src1, const double *src2, int num) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void JUCE_CALLTYPE</type>
      <name>multiply</name>
      <anchorfile>classFloatVectorOperations.html</anchorfile>
      <anchor>aa655bab2fa60a261dbd8d540c71e23f4</anchor>
      <arglist>(float *dest, const float *src, int numValues) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void JUCE_CALLTYPE</type>
      <name>multiply</name>
      <anchorfile>classFloatVectorOperations.html</anchorfile>
      <anchor>a58e2cfe07ff7ead73264b7df03a0d352</anchor>
      <arglist>(double *dest, const double *src, int numValues) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void JUCE_CALLTYPE</type>
      <name>multiply</name>
      <anchorfile>classFloatVectorOperations.html</anchorfile>
      <anchor>aec850a0a830e6bf7c940c9db38333f0f</anchor>
      <arglist>(float *dest, const float *src1, const float *src2, int numValues) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void JUCE_CALLTYPE</type>
      <name>multiply</name>
      <anchorfile>classFloatVectorOperations.html</anchorfile>
      <anchor>ad23749ec1838e04b252405460e252990</anchor>
      <arglist>(double *dest, const double *src1, const double *src2, int numValues) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void JUCE_CALLTYPE</type>
      <name>multiply</name>
      <anchorfile>classFloatVectorOperations.html</anchorfile>
      <anchor>a0d5002b7d345f8a2dd06cb0bc251ddc5</anchor>
      <arglist>(float *dest, float multiplier, int numValues) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void JUCE_CALLTYPE</type>
      <name>multiply</name>
      <anchorfile>classFloatVectorOperations.html</anchorfile>
      <anchor>a727cf97301d8ef49088173b048eecede</anchor>
      <arglist>(double *dest, double multiplier, int numValues) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void JUCE_CALLTYPE</type>
      <name>multiply</name>
      <anchorfile>classFloatVectorOperations.html</anchorfile>
      <anchor>ace1479735bacf1af6dac5e1eb09edde5</anchor>
      <arglist>(float *dest, const float *src, float multiplier, int num) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void JUCE_CALLTYPE</type>
      <name>multiply</name>
      <anchorfile>classFloatVectorOperations.html</anchorfile>
      <anchor>a1e2ca18eeaf488bd62a599ffe3b5fbb3</anchor>
      <arglist>(double *dest, const double *src, double multiplier, int num) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void JUCE_CALLTYPE</type>
      <name>negate</name>
      <anchorfile>classFloatVectorOperations.html</anchorfile>
      <anchor>ac9ea8d3e460667b69be7c9f0e7590299</anchor>
      <arglist>(float *dest, const float *src, int numValues) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void JUCE_CALLTYPE</type>
      <name>negate</name>
      <anchorfile>classFloatVectorOperations.html</anchorfile>
      <anchor>a32ea0fd222be354458651ed99739adf1</anchor>
      <arglist>(double *dest, const double *src, int numValues) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void JUCE_CALLTYPE</type>
      <name>abs</name>
      <anchorfile>classFloatVectorOperations.html</anchorfile>
      <anchor>a7dff842371bb11e03ec29233765a9996</anchor>
      <arglist>(float *dest, const float *src, int numValues) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void JUCE_CALLTYPE</type>
      <name>abs</name>
      <anchorfile>classFloatVectorOperations.html</anchorfile>
      <anchor>a98870adab184d5543850921d8ba70b48</anchor>
      <arglist>(double *dest, const double *src, int numValues) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void JUCE_CALLTYPE</type>
      <name>convertFixedToFloat</name>
      <anchorfile>classFloatVectorOperations.html</anchorfile>
      <anchor>ac6bede830cbeff0b93b6998b5b603000</anchor>
      <arglist>(float *dest, const int *src, float multiplier, int numValues) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void JUCE_CALLTYPE</type>
      <name>min</name>
      <anchorfile>classFloatVectorOperations.html</anchorfile>
      <anchor>aa42b4603c0a21aa4c93cde3daba84c3c</anchor>
      <arglist>(float *dest, const float *src, float comp, int num) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void JUCE_CALLTYPE</type>
      <name>min</name>
      <anchorfile>classFloatVectorOperations.html</anchorfile>
      <anchor>a93ecba1d7986cd09f55afa10a0fda433</anchor>
      <arglist>(double *dest, const double *src, double comp, int num) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void JUCE_CALLTYPE</type>
      <name>min</name>
      <anchorfile>classFloatVectorOperations.html</anchorfile>
      <anchor>acc11116bd9bac4abcd5b4e8cc30cff1a</anchor>
      <arglist>(float *dest, const float *src1, const float *src2, int num) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void JUCE_CALLTYPE</type>
      <name>min</name>
      <anchorfile>classFloatVectorOperations.html</anchorfile>
      <anchor>a9224474ad1cea16562b2a82bf0c19ea6</anchor>
      <arglist>(double *dest, const double *src1, const double *src2, int num) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void JUCE_CALLTYPE</type>
      <name>max</name>
      <anchorfile>classFloatVectorOperations.html</anchorfile>
      <anchor>a55d161a9071b91740f6b96435fe93e65</anchor>
      <arglist>(float *dest, const float *src, float comp, int num) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void JUCE_CALLTYPE</type>
      <name>max</name>
      <anchorfile>classFloatVectorOperations.html</anchorfile>
      <anchor>abd11c8fda6694a12611f7df44f890a14</anchor>
      <arglist>(double *dest, const double *src, double comp, int num) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void JUCE_CALLTYPE</type>
      <name>max</name>
      <anchorfile>classFloatVectorOperations.html</anchorfile>
      <anchor>aab76622b229704008d50e53caaa14b68</anchor>
      <arglist>(float *dest, const float *src1, const float *src2, int num) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void JUCE_CALLTYPE</type>
      <name>max</name>
      <anchorfile>classFloatVectorOperations.html</anchorfile>
      <anchor>a5568a93bc2fc32e85cf1a4b4882bdc4c</anchor>
      <arglist>(double *dest, const double *src1, const double *src2, int num) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void JUCE_CALLTYPE</type>
      <name>clip</name>
      <anchorfile>classFloatVectorOperations.html</anchorfile>
      <anchor>a572fb76624c3a2cb1b4bcacdb8a2d00b</anchor>
      <arglist>(float *dest, const float *src, float low, float high, int num) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void JUCE_CALLTYPE</type>
      <name>clip</name>
      <anchorfile>classFloatVectorOperations.html</anchorfile>
      <anchor>afec773ea3b77c863f3eb1a7fc5946793</anchor>
      <arglist>(double *dest, const double *src, double low, double high, int num) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Range&lt; float &gt; JUCE_CALLTYPE</type>
      <name>findMinAndMax</name>
      <anchorfile>classFloatVectorOperations.html</anchorfile>
      <anchor>a64fab4fdbde9d2604ee37a66e7a0024b</anchor>
      <arglist>(const float *src, int numValues) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Range&lt; double &gt; JUCE_CALLTYPE</type>
      <name>findMinAndMax</name>
      <anchorfile>classFloatVectorOperations.html</anchorfile>
      <anchor>ab0b1ef30de0a730d675ce398ac68c911</anchor>
      <arglist>(const double *src, int numValues) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static float JUCE_CALLTYPE</type>
      <name>findMinimum</name>
      <anchorfile>classFloatVectorOperations.html</anchorfile>
      <anchor>a8776f62dc4a1a4dcb7bccdb54a34b33c</anchor>
      <arglist>(const float *src, int numValues) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double JUCE_CALLTYPE</type>
      <name>findMinimum</name>
      <anchorfile>classFloatVectorOperations.html</anchorfile>
      <anchor>a96e16bca7790ce471f846c35847fda68</anchor>
      <arglist>(const double *src, int numValues) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static float JUCE_CALLTYPE</type>
      <name>findMaximum</name>
      <anchorfile>classFloatVectorOperations.html</anchorfile>
      <anchor>a5ce3d7b606c5bc6f87bdd808f3a432c6</anchor>
      <arglist>(const float *src, int numValues) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double JUCE_CALLTYPE</type>
      <name>findMaximum</name>
      <anchorfile>classFloatVectorOperations.html</anchorfile>
      <anchor>ad181db95392492da6b95e188ff953767</anchor>
      <arglist>(const double *src, int numValues) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void JUCE_CALLTYPE</type>
      <name>enableFlushToZeroMode</name>
      <anchorfile>classFloatVectorOperations.html</anchorfile>
      <anchor>a65f85dc11b1c553add2d46d84ba814e7</anchor>
      <arglist>(bool shouldEnable) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void JUCE_CALLTYPE</type>
      <name>disableDenormalisedNumberSupport</name>
      <anchorfile>classFloatVectorOperations.html</anchorfile>
      <anchor>aff6d068c58da16b48dbf738a48ecd400</anchor>
      <arglist>() noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>FocusChangeListener</name>
    <filename>classFocusChangeListener.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~FocusChangeListener</name>
      <anchorfile>classFocusChangeListener.html</anchorfile>
      <anchor>aa63a86374b76c70ecc0bbae3977f17a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>globalFocusChanged</name>
      <anchorfile>classFocusChangeListener.html</anchorfile>
      <anchor>aea1c72e9c4d918e41c729d79592fa956</anchor>
      <arglist>(Component *focusedComponent)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Font</name>
    <filename>classFont.html</filename>
    <member kind="enumeration">
      <type></type>
      <name>FontStyleFlags</name>
      <anchorfile>classFont.html</anchorfile>
      <anchor>a52a35b5dc1e6f782e25283c9283bae4f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>plain</name>
      <anchorfile>classFont.html</anchorfile>
      <anchor>a52a35b5dc1e6f782e25283c9283bae4fa99039e6bb438434f9bccde132132dd99</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>bold</name>
      <anchorfile>classFont.html</anchorfile>
      <anchor>a52a35b5dc1e6f782e25283c9283bae4fa1af8035a650d8a663a3f67b3b6208eed</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>italic</name>
      <anchorfile>classFont.html</anchorfile>
      <anchor>a52a35b5dc1e6f782e25283c9283bae4fa1d2b466ff0cbcf7e762558b847b99a01</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>underlined</name>
      <anchorfile>classFont.html</anchorfile>
      <anchor>a52a35b5dc1e6f782e25283c9283bae4fa3bb23d4d794ac926cd255a886aa37190</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Font</name>
      <anchorfile>classFont.html</anchorfile>
      <anchor>a15524cff0cecb0d9525c786678a7935c</anchor>
      <arglist>(float fontHeight, int styleFlags=plain)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Font</name>
      <anchorfile>classFont.html</anchorfile>
      <anchor>ae41e6b5cf9c3c368aaace76f7208c2fa</anchor>
      <arglist>(const String &amp;typefaceName, float fontHeight, int styleFlags)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Font</name>
      <anchorfile>classFont.html</anchorfile>
      <anchor>ab41a1accb2fbbd96b2e35d5ef4c548c9</anchor>
      <arglist>(const String &amp;typefaceName, const String &amp;typefaceStyle, float fontHeight)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Font</name>
      <anchorfile>classFont.html</anchorfile>
      <anchor>a3b40611ef144d05c0126f7c69890b32b</anchor>
      <arglist>(const Font &amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Font</name>
      <anchorfile>classFont.html</anchorfile>
      <anchor>a9524428484b892673994cd74f964a089</anchor>
      <arglist>(const Typeface::Ptr &amp;typeface)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Font</name>
      <anchorfile>classFont.html</anchorfile>
      <anchor>a4e6a119206f505522100221c1fafde45</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Font</name>
      <anchorfile>classFont.html</anchorfile>
      <anchor>add41c62835913dbc8abcaa44a63286b4</anchor>
      <arglist>(Font &amp;&amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Font &amp;</type>
      <name>operator=</name>
      <anchorfile>classFont.html</anchorfile>
      <anchor>a3836f76e5326608387d5c5a7df619099</anchor>
      <arglist>(Font &amp;&amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Font &amp;</type>
      <name>operator=</name>
      <anchorfile>classFont.html</anchorfile>
      <anchor>a55edb0fa67d9ddcd87be622f3f9031c8</anchor>
      <arglist>(const Font &amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classFont.html</anchorfile>
      <anchor>a56d28dff0503d6ee86ee1bac2fb371e7</anchor>
      <arglist>(const Font &amp;other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classFont.html</anchorfile>
      <anchor>a81ce76953397ead163002ed82380b7e9</anchor>
      <arglist>(const Font &amp;other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Font</name>
      <anchorfile>classFont.html</anchorfile>
      <anchor>af7a69b535952054cd42b65000d8182f4</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTypefaceName</name>
      <anchorfile>classFont.html</anchorfile>
      <anchor>a79a3169e0685ade146aefe20b2250745</anchor>
      <arglist>(const String &amp;faceName)</arglist>
    </member>
    <member kind="function">
      <type>const String &amp;</type>
      <name>getTypefaceName</name>
      <anchorfile>classFont.html</anchorfile>
      <anchor>a66d068f203550181d57353649f8f694f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const String &amp;</type>
      <name>getTypefaceStyle</name>
      <anchorfile>classFont.html</anchorfile>
      <anchor>a5c7bb70dc22a35c23ebc4b685b679556</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTypefaceStyle</name>
      <anchorfile>classFont.html</anchorfile>
      <anchor>a844b7f87922aabf01971921f44d2662f</anchor>
      <arglist>(const String &amp;newStyle)</arglist>
    </member>
    <member kind="function">
      <type>Font</type>
      <name>withTypefaceStyle</name>
      <anchorfile>classFont.html</anchorfile>
      <anchor>a26442e5b4da40871d16a35497bb3126b</anchor>
      <arglist>(const String &amp;newStyle) const </arglist>
    </member>
    <member kind="function">
      <type>StringArray</type>
      <name>getAvailableStyles</name>
      <anchorfile>classFont.html</anchorfile>
      <anchor>ae381cbed77eed2b1e69f735906b3bf26</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Font</type>
      <name>withHeight</name>
      <anchorfile>classFont.html</anchorfile>
      <anchor>a27bd3773032ababc77e6c2d4b73b2026</anchor>
      <arglist>(float height) const </arglist>
    </member>
    <member kind="function">
      <type>Font</type>
      <name>withPointHeight</name>
      <anchorfile>classFont.html</anchorfile>
      <anchor>a88283e79e56f4ec57dfe66f174996f2f</anchor>
      <arglist>(float heightInPoints) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setHeight</name>
      <anchorfile>classFont.html</anchorfile>
      <anchor>a3dc7a6f8ab92c63a7a3551434806aebf</anchor>
      <arglist>(float newHeight)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setHeightWithoutChangingWidth</name>
      <anchorfile>classFont.html</anchorfile>
      <anchor>a704ed07aafcb44d99cf5724e08893316</anchor>
      <arglist>(float newHeight)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getHeight</name>
      <anchorfile>classFont.html</anchorfile>
      <anchor>a96e4ccc975ce4180c10107aa77ea8c7d</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getHeightInPoints</name>
      <anchorfile>classFont.html</anchorfile>
      <anchor>a6b468a52c8b38aa05bbfe8eac41cb080</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getAscent</name>
      <anchorfile>classFont.html</anchorfile>
      <anchor>adf2c00fbf24a05b02b5b8e6cf41f37b8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getAscentInPoints</name>
      <anchorfile>classFont.html</anchorfile>
      <anchor>aa19b31cce6d823c00bb99a1b5e9c3a80</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getDescent</name>
      <anchorfile>classFont.html</anchorfile>
      <anchor>afb12eaca61c64310775518f68ad7cf35</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getDescentInPoints</name>
      <anchorfile>classFont.html</anchorfile>
      <anchor>a6cd796e1c102e2b003ff3c71ca74849d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getStyleFlags</name>
      <anchorfile>classFont.html</anchorfile>
      <anchor>a62ed83b1c35f63287c8e792c4a3a46cf</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Font</type>
      <name>withStyle</name>
      <anchorfile>classFont.html</anchorfile>
      <anchor>a0b9fb0ca73a2e9c8296d6203070a4b37</anchor>
      <arglist>(int styleFlags) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStyleFlags</name>
      <anchorfile>classFont.html</anchorfile>
      <anchor>a6e4e89d5c6b92af16360307ea8b0a905</anchor>
      <arglist>(int newFlags)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBold</name>
      <anchorfile>classFont.html</anchorfile>
      <anchor>a46c360f86677fda0471d61c22eb82a3a</anchor>
      <arglist>(bool shouldBeBold)</arglist>
    </member>
    <member kind="function">
      <type>Font</type>
      <name>boldened</name>
      <anchorfile>classFont.html</anchorfile>
      <anchor>a02ac6e93c1de92fdb7959d9367608ea2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isBold</name>
      <anchorfile>classFont.html</anchorfile>
      <anchor>a4edbda1c220656c7f2cea27e06464c15</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setItalic</name>
      <anchorfile>classFont.html</anchorfile>
      <anchor>a4c72d0b30c88f8119f285306acbb4344</anchor>
      <arglist>(bool shouldBeItalic)</arglist>
    </member>
    <member kind="function">
      <type>Font</type>
      <name>italicised</name>
      <anchorfile>classFont.html</anchorfile>
      <anchor>afe493fc7743d0311adb2b96d3fe49718</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isItalic</name>
      <anchorfile>classFont.html</anchorfile>
      <anchor>a5523f05c4ae0df0375e538d8053f0679</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUnderline</name>
      <anchorfile>classFont.html</anchorfile>
      <anchor>af107c023ff440651ae9291cdf058b7c1</anchor>
      <arglist>(bool shouldBeUnderlined)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isUnderlined</name>
      <anchorfile>classFont.html</anchorfile>
      <anchor>a8246621b771e73832156cad3c1ba66d6</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getHorizontalScale</name>
      <anchorfile>classFont.html</anchorfile>
      <anchor>a1e44cb15a955d489c0bb980fe7bcdda5</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Font</type>
      <name>withHorizontalScale</name>
      <anchorfile>classFont.html</anchorfile>
      <anchor>a1d23c59274334f004505169596de4029</anchor>
      <arglist>(float scaleFactor) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setHorizontalScale</name>
      <anchorfile>classFont.html</anchorfile>
      <anchor>a305977210a0e621b8c36bbce58d665aa</anchor>
      <arglist>(float scaleFactor)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getExtraKerningFactor</name>
      <anchorfile>classFont.html</anchorfile>
      <anchor>ad9e47ffcaf3ed0cc8d81cc088a55a8a6</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Font</type>
      <name>withExtraKerningFactor</name>
      <anchorfile>classFont.html</anchorfile>
      <anchor>a1f5951b14ebdedafc548f0ee2b69fcba</anchor>
      <arglist>(float extraKerning) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setExtraKerningFactor</name>
      <anchorfile>classFont.html</anchorfile>
      <anchor>a996b7095b0956f62b71f24893e72a914</anchor>
      <arglist>(float extraKerning)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSizeAndStyle</name>
      <anchorfile>classFont.html</anchorfile>
      <anchor>adda175db2fae3b56a41d59db82b26ab8</anchor>
      <arglist>(float newHeight, int newStyleFlags, float newHorizontalScale, float newKerningAmount)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSizeAndStyle</name>
      <anchorfile>classFont.html</anchorfile>
      <anchor>a405732674d98d90cb2948ea20ccbe67c</anchor>
      <arglist>(float newHeight, const String &amp;newStyle, float newHorizontalScale, float newKerningAmount)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getStringWidth</name>
      <anchorfile>classFont.html</anchorfile>
      <anchor>aed4d0579fb11ca1bba6c68e5bd02e1b2</anchor>
      <arglist>(const String &amp;text) const </arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getStringWidthFloat</name>
      <anchorfile>classFont.html</anchorfile>
      <anchor>a9fac3d0ffd0163d9063047d78db7781c</anchor>
      <arglist>(const String &amp;text) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getGlyphPositions</name>
      <anchorfile>classFont.html</anchorfile>
      <anchor>a6040a5e844539fb75c720b1d6d0ae053</anchor>
      <arglist>(const String &amp;text, Array&lt; int &gt; &amp;glyphs, Array&lt; float &gt; &amp;xOffsets) const </arglist>
    </member>
    <member kind="function">
      <type>Typeface *</type>
      <name>getTypeface</name>
      <anchorfile>classFont.html</anchorfile>
      <anchor>a7b3902ae5dde1ad8cd5f5cd5c6fb3960</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>toString</name>
      <anchorfile>classFont.html</anchorfile>
      <anchor>ab087e90d7aa1d13ffc7de7c477dfa0c6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const String &amp;</type>
      <name>getDefaultSansSerifFontName</name>
      <anchorfile>classFont.html</anchorfile>
      <anchor>affc37b5ccde3bccea8108d25307b2fe5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const String &amp;</type>
      <name>getDefaultSerifFontName</name>
      <anchorfile>classFont.html</anchorfile>
      <anchor>a85320a4e022c86097ad17e844fab13c6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const String &amp;</type>
      <name>getDefaultMonospacedFontName</name>
      <anchorfile>classFont.html</anchorfile>
      <anchor>aa515d2236ce4c270785e5391ac3c8514</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const String &amp;</type>
      <name>getDefaultStyle</name>
      <anchorfile>classFont.html</anchorfile>
      <anchor>a7f0dad8086009fad6e3d43b72442dc6a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Typeface::Ptr</type>
      <name>getDefaultTypefaceForFont</name>
      <anchorfile>classFont.html</anchorfile>
      <anchor>a46b174245c0324ceab50fbeec45cc288</anchor>
      <arglist>(const Font &amp;font)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static float</type>
      <name>getDefaultMinimumHorizontalScaleFactor</name>
      <anchorfile>classFont.html</anchorfile>
      <anchor>a20e5975330a528691e8ed74c43d5a159</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setDefaultMinimumHorizontalScaleFactor</name>
      <anchorfile>classFont.html</anchorfile>
      <anchor>a9e4fc070f64248bce9138264e4aa4ee9</anchor>
      <arglist>(float newMinimumScaleFactor) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>findFonts</name>
      <anchorfile>classFont.html</anchorfile>
      <anchor>a95f7587d2f1bb76329f4f09444b09cdb</anchor>
      <arglist>(Array&lt; Font &gt; &amp;results)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StringArray</type>
      <name>findAllTypefaceNames</name>
      <anchorfile>classFont.html</anchorfile>
      <anchor>a8dd330a501635eb452c07c0f3e937c31</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StringArray</type>
      <name>findAllTypefaceStyles</name>
      <anchorfile>classFont.html</anchorfile>
      <anchor>a4504ff88b0af4aec852736d267f837cc</anchor>
      <arglist>(const String &amp;family)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const String &amp;</type>
      <name>getFallbackFontName</name>
      <anchorfile>classFont.html</anchorfile>
      <anchor>a9d672fdb986d1fc4ddb5207d08d3bcb5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setFallbackFontName</name>
      <anchorfile>classFont.html</anchorfile>
      <anchor>ad898e9741496ae8fe48aa27198732733</anchor>
      <arglist>(const String &amp;name)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const String &amp;</type>
      <name>getFallbackFontStyle</name>
      <anchorfile>classFont.html</anchorfile>
      <anchor>a51defec01a1b77bd50b70c452cc6e658</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setFallbackFontStyle</name>
      <anchorfile>classFont.html</anchorfile>
      <anchor>aa58cbc471e7b0a24568526dabffc3672</anchor>
      <arglist>(const String &amp;style)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Font</type>
      <name>fromString</name>
      <anchorfile>classFont.html</anchorfile>
      <anchor>a9ce8c13a7877c1a0e6cb78163fb6aefd</anchor>
      <arglist>(const String &amp;fontDescription)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GenericAudioProcessorEditor</name>
    <filename>classGenericAudioProcessorEditor.html</filename>
    <base>AudioProcessorEditor</base>
    <member kind="function">
      <type></type>
      <name>GenericAudioProcessorEditor</name>
      <anchorfile>classGenericAudioProcessorEditor.html</anchorfile>
      <anchor>ab1b348342e9a7fdf916637cb3efca990</anchor>
      <arglist>(AudioProcessor *owner)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~GenericAudioProcessorEditor</name>
      <anchorfile>classGenericAudioProcessorEditor.html</anchorfile>
      <anchor>a3a06a90ce44f2715a2741eed8636c5ab</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>paint</name>
      <anchorfile>classGenericAudioProcessorEditor.html</anchorfile>
      <anchor>a4de4e8f8ef35efdd32d7f504c88b095e</anchor>
      <arglist>(Graphics &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resized</name>
      <anchorfile>classGenericAudioProcessorEditor.html</anchorfile>
      <anchor>a74a6e5cca9abdcdb34058de23e2b91d6</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GenericScopedLock</name>
    <filename>classGenericScopedLock.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>GenericScopedLock</name>
      <anchorfile>classGenericScopedLock.html</anchorfile>
      <anchor>acb13a2d16339b721c40951ce85005eeb</anchor>
      <arglist>(const LockType &amp;lock) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~GenericScopedLock</name>
      <anchorfile>classGenericScopedLock.html</anchorfile>
      <anchor>a02234589cd2f1c0ff057d4d64beb12e1</anchor>
      <arglist>() noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GenericScopedTryLock</name>
    <filename>classGenericScopedTryLock.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>GenericScopedTryLock</name>
      <anchorfile>classGenericScopedTryLock.html</anchorfile>
      <anchor>a2d8b85eb72c754b7d2162c3cc296f30a</anchor>
      <arglist>(const LockType &amp;lock) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~GenericScopedTryLock</name>
      <anchorfile>classGenericScopedTryLock.html</anchorfile>
      <anchor>aa552ec1121d42230080f6dbc614ead99</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isLocked</name>
      <anchorfile>classGenericScopedTryLock.html</anchorfile>
      <anchor>a0504fe1e14b9a246e5e6018132578b94</anchor>
      <arglist>() const noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GenericScopedUnlock</name>
    <filename>classGenericScopedUnlock.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>GenericScopedUnlock</name>
      <anchorfile>classGenericScopedUnlock.html</anchorfile>
      <anchor>ab2dc89287c459355d6a04fb5d58d9ce3</anchor>
      <arglist>(const LockType &amp;lock) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~GenericScopedUnlock</name>
      <anchorfile>classGenericScopedUnlock.html</anchorfile>
      <anchor>ab979a8270fadb8bd835ef693cb5ad474</anchor>
      <arglist>() noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GIFImageFormat</name>
    <filename>classGIFImageFormat.html</filename>
    <base>ImageFileFormat</base>
    <member kind="function">
      <type></type>
      <name>GIFImageFormat</name>
      <anchorfile>classGIFImageFormat.html</anchorfile>
      <anchor>a59f51435522dcbc617840c3e94173922</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~GIFImageFormat</name>
      <anchorfile>classGIFImageFormat.html</anchorfile>
      <anchor>ac2e0d532b3adb1e119163d35f85230cc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>getFormatName</name>
      <anchorfile>classGIFImageFormat.html</anchorfile>
      <anchor>a4ab7fdbc4d2ba521a3ddb7984711190e</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>usesFileExtension</name>
      <anchorfile>classGIFImageFormat.html</anchorfile>
      <anchor>a34c4b425944129a609bc03869ace660e</anchor>
      <arglist>(const File &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>canUnderstand</name>
      <anchorfile>classGIFImageFormat.html</anchorfile>
      <anchor>a8604699a3e5d864bf5b1c00c1e64ef1a</anchor>
      <arglist>(InputStream &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>Image</type>
      <name>decodeImage</name>
      <anchorfile>classGIFImageFormat.html</anchorfile>
      <anchor>a3d590bd7724eb6bbbc66874c64ebc60e</anchor>
      <arglist>(InputStream &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>writeImageToStream</name>
      <anchorfile>classGIFImageFormat.html</anchorfile>
      <anchor>acba165859a1abe11b0db5ef73fd2b47a</anchor>
      <arglist>(const Image &amp;, OutputStream &amp;) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ImageFileFormat</name>
      <anchorfile>classImageFileFormat.html</anchorfile>
      <anchor>adb530fe6617767ac78c26baf179e78d2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ImageFileFormat *</type>
      <name>findImageFormatForStream</name>
      <anchorfile>classImageFileFormat.html</anchorfile>
      <anchor>a7fcb93b4c52f931ec437674c731c9c04</anchor>
      <arglist>(InputStream &amp;input)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ImageFileFormat *</type>
      <name>findImageFormatForFileExtension</name>
      <anchorfile>classImageFileFormat.html</anchorfile>
      <anchor>ae8ffab7e17eaf28a09d4248d9dec1a70</anchor>
      <arglist>(const File &amp;file)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Image</type>
      <name>loadFrom</name>
      <anchorfile>classImageFileFormat.html</anchorfile>
      <anchor>a1ce6ae82e06b40e9149d1ab73951ce1c</anchor>
      <arglist>(InputStream &amp;input)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Image</type>
      <name>loadFrom</name>
      <anchorfile>classImageFileFormat.html</anchorfile>
      <anchor>a9e32b679760095924f3240372f2648b6</anchor>
      <arglist>(const File &amp;file)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Image</type>
      <name>loadFrom</name>
      <anchorfile>classImageFileFormat.html</anchorfile>
      <anchor>a5a0d38a154faccbc0bbe245dadede62c</anchor>
      <arglist>(const void *rawData, size_t numBytesOfData)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ImageFileFormat</name>
      <anchorfile>classImageFileFormat.html</anchorfile>
      <anchor>ac2e60288a31b4d2a963b0350f72c4483</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GlowEffect</name>
    <filename>classGlowEffect.html</filename>
    <base>ImageEffectFilter</base>
    <member kind="function">
      <type></type>
      <name>GlowEffect</name>
      <anchorfile>classGlowEffect.html</anchorfile>
      <anchor>a8ffa8313feae185387d68af2983cdeea</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~GlowEffect</name>
      <anchorfile>classGlowEffect.html</anchorfile>
      <anchor>a15493b06f02825726df3e69c6a5e4a40</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGlowProperties</name>
      <anchorfile>classGlowEffect.html</anchorfile>
      <anchor>a3136cfcbf3a1da48ffce8f70ac3d885d</anchor>
      <arglist>(float newRadius, Colour newColour)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyEffect</name>
      <anchorfile>classGlowEffect.html</anchorfile>
      <anchor>a1addc87c44d02d6c864dd8d7c1cadf35</anchor>
      <arglist>(Image &amp;sourceImage, Graphics &amp;destContext, float scaleFactor, float alpha)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GlyphArrangement</name>
    <filename>classGlyphArrangement.html</filename>
    <member kind="function">
      <type></type>
      <name>GlyphArrangement</name>
      <anchorfile>classGlyphArrangement.html</anchorfile>
      <anchor>ab05924e6a7eded55ad3d030fbc55d5ac</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GlyphArrangement</name>
      <anchorfile>classGlyphArrangement.html</anchorfile>
      <anchor>aba37fe1432fb6396fa4ba188aa7064d8</anchor>
      <arglist>(const GlyphArrangement &amp;)</arglist>
    </member>
    <member kind="function">
      <type>GlyphArrangement &amp;</type>
      <name>operator=</name>
      <anchorfile>classGlyphArrangement.html</anchorfile>
      <anchor>a5be440b2e09596e4844cc5c30d8a90d8</anchor>
      <arglist>(const GlyphArrangement &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~GlyphArrangement</name>
      <anchorfile>classGlyphArrangement.html</anchorfile>
      <anchor>aa6a89d95ae356910d04d56121f44d693</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumGlyphs</name>
      <anchorfile>classGlyphArrangement.html</anchorfile>
      <anchor>a65842effc25470c117a8a623e888e19b</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>PositionedGlyph &amp;</type>
      <name>getGlyph</name>
      <anchorfile>classGlyphArrangement.html</anchorfile>
      <anchor>a1de5322443e538fdd34c46b3fa570df6</anchor>
      <arglist>(int index) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classGlyphArrangement.html</anchorfile>
      <anchor>a910c2396f3737e63dbf6d0ce4e8fdf94</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addLineOfText</name>
      <anchorfile>classGlyphArrangement.html</anchorfile>
      <anchor>a0ace103d7c4b6600dcea7aff1f26811d</anchor>
      <arglist>(const Font &amp;font, const String &amp;text, float x, float y)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addCurtailedLineOfText</name>
      <anchorfile>classGlyphArrangement.html</anchorfile>
      <anchor>a7bd1c1d0e03dfd9ecc19a826b78975aa</anchor>
      <arglist>(const Font &amp;font, const String &amp;text, float x, float y, float maxWidthPixels, bool useEllipsis)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addJustifiedText</name>
      <anchorfile>classGlyphArrangement.html</anchorfile>
      <anchor>ada407e56eab976b046f880729411771f</anchor>
      <arglist>(const Font &amp;font, const String &amp;text, float x, float y, float maxLineWidth, Justification horizontalLayout)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addFittedText</name>
      <anchorfile>classGlyphArrangement.html</anchorfile>
      <anchor>a96a7fd525bab5cc2330c1c4e9f13d6d5</anchor>
      <arglist>(const Font &amp;font, const String &amp;text, float x, float y, float width, float height, Justification layout, int maximumLinesToUse, float minimumHorizontalScale=0.0f)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addGlyphArrangement</name>
      <anchorfile>classGlyphArrangement.html</anchorfile>
      <anchor>a1202486067e30a21b94afb2e666c82ab</anchor>
      <arglist>(const GlyphArrangement &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addGlyph</name>
      <anchorfile>classGlyphArrangement.html</anchorfile>
      <anchor>a6ee1aff76094f829a0d817a9bc863185</anchor>
      <arglist>(const PositionedGlyph &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>draw</name>
      <anchorfile>classGlyphArrangement.html</anchorfile>
      <anchor>afb6c8f5441c5660b699b5d32e255e304</anchor>
      <arglist>(const Graphics &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>draw</name>
      <anchorfile>classGlyphArrangement.html</anchorfile>
      <anchor>acde87267486e2a9c3ca372ade66f77d7</anchor>
      <arglist>(const Graphics &amp;, const AffineTransform &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>createPath</name>
      <anchorfile>classGlyphArrangement.html</anchorfile>
      <anchor>a35cd45ff7bd974e0c4876142eef16c90</anchor>
      <arglist>(Path &amp;path) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>findGlyphIndexAt</name>
      <anchorfile>classGlyphArrangement.html</anchorfile>
      <anchor>aca23d4051cb4934df16f76a128798e01</anchor>
      <arglist>(float x, float y) const </arglist>
    </member>
    <member kind="function">
      <type>Rectangle&lt; float &gt;</type>
      <name>getBoundingBox</name>
      <anchorfile>classGlyphArrangement.html</anchorfile>
      <anchor>a90d447c048d1e490bce6c796baed8a75</anchor>
      <arglist>(int startIndex, int numGlyphs, bool includeWhitespace) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>moveRangeOfGlyphs</name>
      <anchorfile>classGlyphArrangement.html</anchorfile>
      <anchor>a56badaeaf0b5dbeed1920757fd8c9a05</anchor>
      <arglist>(int startIndex, int numGlyphs, float deltaX, float deltaY)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeRangeOfGlyphs</name>
      <anchorfile>classGlyphArrangement.html</anchorfile>
      <anchor>ad3fcc973e64f466911320e90ca57a322</anchor>
      <arglist>(int startIndex, int numGlyphs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stretchRangeOfGlyphs</name>
      <anchorfile>classGlyphArrangement.html</anchorfile>
      <anchor>a70fb63a9d205a4af5f3cb258f2b8b501</anchor>
      <arglist>(int startIndex, int numGlyphs, float horizontalScaleFactor)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>justifyGlyphs</name>
      <anchorfile>classGlyphArrangement.html</anchorfile>
      <anchor>a713bcc714c1e8c7fb8ec64dc91adfce3</anchor>
      <arglist>(int startIndex, int numGlyphs, float x, float y, float width, float height, Justification justification)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Graphics</name>
    <filename>classGraphics.html</filename>
    <class kind="class">Graphics::ScopedSaveState</class>
    <member kind="enumeration">
      <type></type>
      <name>ResamplingQuality</name>
      <anchorfile>classGraphics.html</anchorfile>
      <anchor>a5da218e649d1b5ac3d67443ae77caf87</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>lowResamplingQuality</name>
      <anchorfile>classGraphics.html</anchorfile>
      <anchor>a5da218e649d1b5ac3d67443ae77caf87a4eb9cfa2e544befd2d50708e3316b28e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>mediumResamplingQuality</name>
      <anchorfile>classGraphics.html</anchorfile>
      <anchor>a5da218e649d1b5ac3d67443ae77caf87a5d8dfbf84457e91eb309b1402562f2af</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>highResamplingQuality</name>
      <anchorfile>classGraphics.html</anchorfile>
      <anchor>a5da218e649d1b5ac3d67443ae77caf87ae3c4b3cdf28f0aefc035977522675e8e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Graphics</name>
      <anchorfile>classGraphics.html</anchorfile>
      <anchor>ada6375a2e6bf68758a2191acb4d62c65</anchor>
      <arglist>(const Image &amp;imageToDrawOnto)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Graphics</name>
      <anchorfile>classGraphics.html</anchorfile>
      <anchor>a7841c9a961ac9bca33bd30ddf8066cdb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setColour</name>
      <anchorfile>classGraphics.html</anchorfile>
      <anchor>a9a944a0006b7277fda473f0b1b4f028f</anchor>
      <arglist>(Colour newColour)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOpacity</name>
      <anchorfile>classGraphics.html</anchorfile>
      <anchor>a1ce91a31ec1258a73ace93b6c337dbb2</anchor>
      <arglist>(float newOpacity)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGradientFill</name>
      <anchorfile>classGraphics.html</anchorfile>
      <anchor>a57478bc2496ebb84696e5ba64b455965</anchor>
      <arglist>(const ColourGradient &amp;gradient)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTiledImageFill</name>
      <anchorfile>classGraphics.html</anchorfile>
      <anchor>a675cd4c4715165f0a0aec0bd8c3fe390</anchor>
      <arglist>(const Image &amp;imageToUse, int anchorX, int anchorY, float opacity)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFillType</name>
      <anchorfile>classGraphics.html</anchorfile>
      <anchor>a763ea233d7b7c8e45e33c7ea8030ff48</anchor>
      <arglist>(const FillType &amp;newFill)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFont</name>
      <anchorfile>classGraphics.html</anchorfile>
      <anchor>a1fbdb321975d90c45243027a61ac2be9</anchor>
      <arglist>(const Font &amp;newFont)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFont</name>
      <anchorfile>classGraphics.html</anchorfile>
      <anchor>a8c9a73240eab843cbf93393956910e72</anchor>
      <arglist>(float newFontHeight)</arglist>
    </member>
    <member kind="function">
      <type>Font</type>
      <name>getCurrentFont</name>
      <anchorfile>classGraphics.html</anchorfile>
      <anchor>abb972f0d801630b6e02d335cfa9da28a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawSingleLineText</name>
      <anchorfile>classGraphics.html</anchorfile>
      <anchor>a26aeb5bf3f4b96e2734e89f0833dd074</anchor>
      <arglist>(const String &amp;text, int startX, int baselineY, Justification justification=Justification::left) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawMultiLineText</name>
      <anchorfile>classGraphics.html</anchorfile>
      <anchor>a37c017a9d2f32bcd677f61f5de97ab9a</anchor>
      <arglist>(const String &amp;text, int startX, int baselineY, int maximumLineWidth) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawText</name>
      <anchorfile>classGraphics.html</anchorfile>
      <anchor>a6a2beaa33dfc054153510789338d5ba9</anchor>
      <arglist>(const String &amp;text, int x, int y, int width, int height, Justification justificationType, bool useEllipsesIfTooBig=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawText</name>
      <anchorfile>classGraphics.html</anchorfile>
      <anchor>a20a8b98e68ca3ec3a3c46c065371ae5b</anchor>
      <arglist>(const String &amp;text, Rectangle&lt; int &gt; area, Justification justificationType, bool useEllipsesIfTooBig=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawText</name>
      <anchorfile>classGraphics.html</anchorfile>
      <anchor>a905dba45900ca55e27363b58fb309ff9</anchor>
      <arglist>(const String &amp;text, Rectangle&lt; float &gt; area, Justification justificationType, bool useEllipsesIfTooBig=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawFittedText</name>
      <anchorfile>classGraphics.html</anchorfile>
      <anchor>ae8e28ce4b7d0c63f0cd1f4e38dfc7151</anchor>
      <arglist>(const String &amp;text, int x, int y, int width, int height, Justification justificationFlags, int maximumNumberOfLines, float minimumHorizontalScale=0.0f) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawFittedText</name>
      <anchorfile>classGraphics.html</anchorfile>
      <anchor>af844063111fbcc7023507c429eb1fadc</anchor>
      <arglist>(const String &amp;text, Rectangle&lt; int &gt; area, Justification justificationFlags, int maximumNumberOfLines, float minimumHorizontalScale=0.0f) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fillAll</name>
      <anchorfile>classGraphics.html</anchorfile>
      <anchor>a516a7795e6e0c6c70eb982a83ea0b8c3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fillAll</name>
      <anchorfile>classGraphics.html</anchorfile>
      <anchor>ac31f52c617f614ab85afa99319eb8110</anchor>
      <arglist>(Colour colourToUse) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fillRect</name>
      <anchorfile>classGraphics.html</anchorfile>
      <anchor>aa58790a4516599a8c45478a307955c06</anchor>
      <arglist>(Rectangle&lt; int &gt; rectangle) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fillRect</name>
      <anchorfile>classGraphics.html</anchorfile>
      <anchor>ad4552a2819b734b197e659eab6ba59e4</anchor>
      <arglist>(Rectangle&lt; float &gt; rectangle) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fillRect</name>
      <anchorfile>classGraphics.html</anchorfile>
      <anchor>ac2202ef993b53d77d8646ed4ce3ea9d1</anchor>
      <arglist>(int x, int y, int width, int height) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fillRect</name>
      <anchorfile>classGraphics.html</anchorfile>
      <anchor>a018bffc13a318cb5e59d29b258313b8b</anchor>
      <arglist>(float x, float y, float width, float height) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fillRectList</name>
      <anchorfile>classGraphics.html</anchorfile>
      <anchor>a2aef23d8a0c15d4e44a43bf7f6bf3598</anchor>
      <arglist>(const RectangleList&lt; float &gt; &amp;rectangles) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fillRectList</name>
      <anchorfile>classGraphics.html</anchorfile>
      <anchor>a25b0360ba453ab7f8d952a4b31a9fcd4</anchor>
      <arglist>(const RectangleList&lt; int &gt; &amp;rectangles) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fillRoundedRectangle</name>
      <anchorfile>classGraphics.html</anchorfile>
      <anchor>a1049a2dae8a1ae3e5e57238f2fd36a84</anchor>
      <arglist>(float x, float y, float width, float height, float cornerSize) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fillRoundedRectangle</name>
      <anchorfile>classGraphics.html</anchorfile>
      <anchor>a3bce8b0c358dfa161a3a156ee78bce29</anchor>
      <arglist>(Rectangle&lt; float &gt; rectangle, float cornerSize) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fillCheckerBoard</name>
      <anchorfile>classGraphics.html</anchorfile>
      <anchor>ad9267dcd42c88fbef416b516ca150b85</anchor>
      <arglist>(Rectangle&lt; int &gt; area, int checkWidth, int checkHeight, Colour colour1, Colour colour2) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawRect</name>
      <anchorfile>classGraphics.html</anchorfile>
      <anchor>a28baf90f8e11ec6f96c349f45e09a9d0</anchor>
      <arglist>(int x, int y, int width, int height, int lineThickness=1) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawRect</name>
      <anchorfile>classGraphics.html</anchorfile>
      <anchor>a7b8a15c73c5d797cd169852224236f4f</anchor>
      <arglist>(float x, float y, float width, float height, float lineThickness=1.0f) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawRect</name>
      <anchorfile>classGraphics.html</anchorfile>
      <anchor>a7bdc51aaa121ce2116b6ee9b52896cb2</anchor>
      <arglist>(Rectangle&lt; int &gt; rectangle, int lineThickness=1) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawRect</name>
      <anchorfile>classGraphics.html</anchorfile>
      <anchor>af9de9561eb82103354adaa6286ddd066</anchor>
      <arglist>(Rectangle&lt; float &gt; rectangle, float lineThickness=1.0f) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawRoundedRectangle</name>
      <anchorfile>classGraphics.html</anchorfile>
      <anchor>a78541e36136eb040c4b8c81d4b8db8dd</anchor>
      <arglist>(float x, float y, float width, float height, float cornerSize, float lineThickness) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawRoundedRectangle</name>
      <anchorfile>classGraphics.html</anchorfile>
      <anchor>adc8e3441564c3e29d03ce8dd7127bf37</anchor>
      <arglist>(Rectangle&lt; float &gt; rectangle, float cornerSize, float lineThickness) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPixel</name>
      <anchorfile>classGraphics.html</anchorfile>
      <anchor>a69e70db1afc03d58f9055f8f45d8e5d1</anchor>
      <arglist>(int x, int y) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fillEllipse</name>
      <anchorfile>classGraphics.html</anchorfile>
      <anchor>ab6fdfd1cb32b32d52b6b30df36321f70</anchor>
      <arglist>(float x, float y, float width, float height) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fillEllipse</name>
      <anchorfile>classGraphics.html</anchorfile>
      <anchor>a15f15854471108b8469985f9f63f8038</anchor>
      <arglist>(Rectangle&lt; float &gt; area) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawEllipse</name>
      <anchorfile>classGraphics.html</anchorfile>
      <anchor>ac88110d5407539aa1be841a89d5170b0</anchor>
      <arglist>(float x, float y, float width, float height, float lineThickness) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawEllipse</name>
      <anchorfile>classGraphics.html</anchorfile>
      <anchor>a6477ca2e2f1eda8c083bca7b04fe0f0d</anchor>
      <arglist>(Rectangle&lt; float &gt; area, float lineThickness) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawLine</name>
      <anchorfile>classGraphics.html</anchorfile>
      <anchor>a0911bf63fd6c0d3e35b2b701fcbc7728</anchor>
      <arglist>(float startX, float startY, float endX, float endY) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawLine</name>
      <anchorfile>classGraphics.html</anchorfile>
      <anchor>a664643f9fef3c8b37b0620c28ec4bb76</anchor>
      <arglist>(float startX, float startY, float endX, float endY, float lineThickness) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawLine</name>
      <anchorfile>classGraphics.html</anchorfile>
      <anchor>a94cf6a3a058ad1a36dc836b34916ef0d</anchor>
      <arglist>(const Line&lt; float &gt; &amp;line) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawLine</name>
      <anchorfile>classGraphics.html</anchorfile>
      <anchor>ace7c180c66f119399acb69ad966057e3</anchor>
      <arglist>(const Line&lt; float &gt; &amp;line, float lineThickness) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawDashedLine</name>
      <anchorfile>classGraphics.html</anchorfile>
      <anchor>ab24a3f2ba3d648285fcad7c97fb8270f</anchor>
      <arglist>(const Line&lt; float &gt; &amp;line, const float *dashLengths, int numDashLengths, float lineThickness=1.0f, int dashIndexToStartFrom=0) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawVerticalLine</name>
      <anchorfile>classGraphics.html</anchorfile>
      <anchor>a042d4f7223a63212ae1d9452e26cbd7a</anchor>
      <arglist>(int x, float top, float bottom) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawHorizontalLine</name>
      <anchorfile>classGraphics.html</anchorfile>
      <anchor>aeea9ba47ff90bb7643038692bf647738</anchor>
      <arglist>(int y, float left, float right) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fillPath</name>
      <anchorfile>classGraphics.html</anchorfile>
      <anchor>ae34e322a6bdd48be717bbce609224188</anchor>
      <arglist>(const Path &amp;path) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fillPath</name>
      <anchorfile>classGraphics.html</anchorfile>
      <anchor>a73d3f13b31a8711dd31008393962b2f5</anchor>
      <arglist>(const Path &amp;path, const AffineTransform &amp;transform) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>strokePath</name>
      <anchorfile>classGraphics.html</anchorfile>
      <anchor>aa566a2b901a6e582c39166c19a7c8497</anchor>
      <arglist>(const Path &amp;path, const PathStrokeType &amp;strokeType, const AffineTransform &amp;transform=AffineTransform()) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawArrow</name>
      <anchorfile>classGraphics.html</anchorfile>
      <anchor>ab1484b102f99384c443cfb5881d68fa9</anchor>
      <arglist>(const Line&lt; float &gt; &amp;line, float lineThickness, float arrowheadWidth, float arrowheadLength) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setImageResamplingQuality</name>
      <anchorfile>classGraphics.html</anchorfile>
      <anchor>a0f8160f9b0a6866e40cf1a2b45c3b892</anchor>
      <arglist>(const ResamplingQuality newQuality)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawImageAt</name>
      <anchorfile>classGraphics.html</anchorfile>
      <anchor>ab754b6a67c6964be2d27b1ba82bdae56</anchor>
      <arglist>(const Image &amp;imageToDraw, int topLeftX, int topLeftY, bool fillAlphaChannelWithCurrentBrush=false) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawImage</name>
      <anchorfile>classGraphics.html</anchorfile>
      <anchor>a6e09218805a3eb3f7d4973433647d0e9</anchor>
      <arglist>(const Image &amp;imageToDraw, int destX, int destY, int destWidth, int destHeight, int sourceX, int sourceY, int sourceWidth, int sourceHeight, bool fillAlphaChannelWithCurrentBrush=false) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawImageTransformed</name>
      <anchorfile>classGraphics.html</anchorfile>
      <anchor>a79c4f544cd7fcada2be7d24691e157a3</anchor>
      <arglist>(const Image &amp;imageToDraw, const AffineTransform &amp;transform, bool fillAlphaChannelWithCurrentBrush=false) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawImage</name>
      <anchorfile>classGraphics.html</anchorfile>
      <anchor>a90ce44fda0da1c2664a4ea884d95b38a</anchor>
      <arglist>(const Image &amp;imageToDraw, Rectangle&lt; float &gt; targetArea, RectanglePlacement placementWithinTarget=RectanglePlacement::stretchToFit, bool fillAlphaChannelWithCurrentBrush=false) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawImageWithin</name>
      <anchorfile>classGraphics.html</anchorfile>
      <anchor>a3029f38ff98de2b5a44d3f0038d37351</anchor>
      <arglist>(const Image &amp;imageToDraw, int destX, int destY, int destWidth, int destHeight, RectanglePlacement placementWithinTarget, bool fillAlphaChannelWithCurrentBrush=false) const </arglist>
    </member>
    <member kind="function">
      <type>Rectangle&lt; int &gt;</type>
      <name>getClipBounds</name>
      <anchorfile>classGraphics.html</anchorfile>
      <anchor>a34942cbdbd743d7fd332c218ea7e4c5d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>clipRegionIntersects</name>
      <anchorfile>classGraphics.html</anchorfile>
      <anchor>a90ce5006c55347d11caf9745eb775560</anchor>
      <arglist>(Rectangle&lt; int &gt; area) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>reduceClipRegion</name>
      <anchorfile>classGraphics.html</anchorfile>
      <anchor>ad97e058fcff2bc0e634eacc4ef1d7a5f</anchor>
      <arglist>(int x, int y, int width, int height)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>reduceClipRegion</name>
      <anchorfile>classGraphics.html</anchorfile>
      <anchor>aaa6ccd6208c16ea4cf569120bad1a64d</anchor>
      <arglist>(Rectangle&lt; int &gt; area)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>reduceClipRegion</name>
      <anchorfile>classGraphics.html</anchorfile>
      <anchor>a2d2bde76da1377ab9a22df09f7aadbe7</anchor>
      <arglist>(const RectangleList&lt; int &gt; &amp;clipRegion)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>reduceClipRegion</name>
      <anchorfile>classGraphics.html</anchorfile>
      <anchor>ab3718c74592ec0c1d0cb4e6fc5cec0f6</anchor>
      <arglist>(const Path &amp;path, const AffineTransform &amp;transform=AffineTransform())</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>reduceClipRegion</name>
      <anchorfile>classGraphics.html</anchorfile>
      <anchor>a735b5096ea063020134fdf1c570dec9a</anchor>
      <arglist>(const Image &amp;image, const AffineTransform &amp;transform)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>excludeClipRegion</name>
      <anchorfile>classGraphics.html</anchorfile>
      <anchor>a50949e3315daf0cb8c3c0abbdb272720</anchor>
      <arglist>(Rectangle&lt; int &gt; rectangleToExclude)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isClipEmpty</name>
      <anchorfile>classGraphics.html</anchorfile>
      <anchor>a6ae806601e19bc1631085d6e2a7f5d74</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>saveState</name>
      <anchorfile>classGraphics.html</anchorfile>
      <anchor>ab4df35938684890f7adac0439e900ca8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>restoreState</name>
      <anchorfile>classGraphics.html</anchorfile>
      <anchor>ac724e99c9a7bcd8b2987a484e269a368</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>beginTransparencyLayer</name>
      <anchorfile>classGraphics.html</anchorfile>
      <anchor>ab8d8ee1c6bb810074eff904fd3c21fc4</anchor>
      <arglist>(float layerOpacity)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>endTransparencyLayer</name>
      <anchorfile>classGraphics.html</anchorfile>
      <anchor>ae6b36ef8295dd83d33287a328e88ef9c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOrigin</name>
      <anchorfile>classGraphics.html</anchorfile>
      <anchor>aa9bb2542780177c4d8ace477241a83b6</anchor>
      <arglist>(Point&lt; int &gt; newOrigin)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOrigin</name>
      <anchorfile>classGraphics.html</anchorfile>
      <anchor>a9f6c05af33aefe49851d0d1eb9294bea</anchor>
      <arglist>(int newOriginX, int newOriginY)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addTransform</name>
      <anchorfile>classGraphics.html</anchorfile>
      <anchor>a7d9d400fdb96d3c6bbb640fb94b54d06</anchor>
      <arglist>(const AffineTransform &amp;transform)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetToDefaultState</name>
      <anchorfile>classGraphics.html</anchorfile>
      <anchor>ab8b7cd49bf1ff738c5ff848727e3bc75</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isVectorDevice</name>
      <anchorfile>classGraphics.html</anchorfile>
      <anchor>ae584e8878455891d9010addb384425cd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Graphics</name>
      <anchorfile>classGraphics.html</anchorfile>
      <anchor>a83d19d1d12f7cff6ed9eada236516a63</anchor>
      <arglist>(LowLevelGraphicsContext &amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>LowLevelGraphicsContext &amp;</type>
      <name>getInternalContext</name>
      <anchorfile>classGraphics.html</anchorfile>
      <anchor>a504995c303f45cce740dda9fa67f1a64</anchor>
      <arglist>() const noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Graphics::ScopedSaveState</name>
    <filename>classGraphics_1_1ScopedSaveState.html</filename>
    <member kind="function">
      <type></type>
      <name>ScopedSaveState</name>
      <anchorfile>classGraphics_1_1ScopedSaveState.html</anchorfile>
      <anchor>a7c4999b18096c05aefaa72ead0cd9d6a</anchor>
      <arglist>(Graphics &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ScopedSaveState</name>
      <anchorfile>classGraphics_1_1ScopedSaveState.html</anchorfile>
      <anchor>a3330e087bb4afe184909a96725563665</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GroupComponent</name>
    <filename>classGroupComponent.html</filename>
    <base>Component</base>
    <class kind="struct">GroupComponent::LookAndFeelMethods</class>
    <member kind="enumeration">
      <type></type>
      <name>ColourIds</name>
      <anchorfile>classGroupComponent.html</anchorfile>
      <anchor>a78ec5941214fc9f9cc82447ae04db082</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>outlineColourId</name>
      <anchorfile>classGroupComponent.html</anchorfile>
      <anchor>a78ec5941214fc9f9cc82447ae04db082a25fccffcfe6b20840ac84a5dab932f01</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>textColourId</name>
      <anchorfile>classGroupComponent.html</anchorfile>
      <anchor>a78ec5941214fc9f9cc82447ae04db082a979b6f395a45c23d357f5687bdd74a95</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GroupComponent</name>
      <anchorfile>classGroupComponent.html</anchorfile>
      <anchor>a64f022d0df29802bce309aa431fedcf6</anchor>
      <arglist>(const String &amp;componentName=String(), const String &amp;labelText=String())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~GroupComponent</name>
      <anchorfile>classGroupComponent.html</anchorfile>
      <anchor>a558f46ecb72027cdac88676f98a1d649</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setText</name>
      <anchorfile>classGroupComponent.html</anchorfile>
      <anchor>ad71b970bb527c75f7dfa568902ef6977</anchor>
      <arglist>(const String &amp;newText)</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>getText</name>
      <anchorfile>classGroupComponent.html</anchorfile>
      <anchor>aa18e2435f8faeea30c6c3a62c6ec4364</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTextLabelPosition</name>
      <anchorfile>classGroupComponent.html</anchorfile>
      <anchor>a5fe2992e7dbcabe59bbcaabb05cb7b9c</anchor>
      <arglist>(Justification justification)</arglist>
    </member>
    <member kind="function">
      <type>Justification</type>
      <name>getTextLabelPosition</name>
      <anchorfile>classGroupComponent.html</anchorfile>
      <anchor>ae7f4863c4bb760dbea197bcc39ae1f64</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>paint</name>
      <anchorfile>classGroupComponent.html</anchorfile>
      <anchor>a632a0daf4e96de1ccceeb375a8d59732</anchor>
      <arglist>(Graphics &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enablementChanged</name>
      <anchorfile>classGroupComponent.html</anchorfile>
      <anchor>a41a11e08ba69af80e571e84c084feba7</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>colourChanged</name>
      <anchorfile>classGroupComponent.html</anchorfile>
      <anchor>a858bea5ba1c4f9f1082a1be9ce93e209</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>GroupComponent::LookAndFeelMethods</name>
    <filename>structGroupComponent_1_1LookAndFeelMethods.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~LookAndFeelMethods</name>
      <anchorfile>structGroupComponent_1_1LookAndFeelMethods.html</anchorfile>
      <anchor>a34d0b72d823ae7138f279dd9669ecfe8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>drawGroupComponentOutline</name>
      <anchorfile>structGroupComponent_1_1LookAndFeelMethods.html</anchorfile>
      <anchor>a52aaf628970951234f823aa8cd0c8931</anchor>
      <arglist>(Graphics &amp;, int w, int h, const String &amp;text, const Justification &amp;, GroupComponent &amp;)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GZIPCompressorOutputStream</name>
    <filename>classGZIPCompressorOutputStream.html</filename>
    <base>OutputStream</base>
    <member kind="enumeration">
      <type></type>
      <name>WindowBitsValues</name>
      <anchorfile>classGZIPCompressorOutputStream.html</anchorfile>
      <anchor>ae5aaccd93a4e2389b1a6aa6862b671da</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>windowBitsRaw</name>
      <anchorfile>classGZIPCompressorOutputStream.html</anchorfile>
      <anchor>ae5aaccd93a4e2389b1a6aa6862b671daa5a830100618fccabd9dd5dcdd0b71276</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>windowBitsGZIP</name>
      <anchorfile>classGZIPCompressorOutputStream.html</anchorfile>
      <anchor>ae5aaccd93a4e2389b1a6aa6862b671daaaa8b14e2775fa3de96c140b001c01cf6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GZIPCompressorOutputStream</name>
      <anchorfile>classGZIPCompressorOutputStream.html</anchorfile>
      <anchor>aa445af101582747f35c1a4bcc2d824d3</anchor>
      <arglist>(OutputStream *destStream, int compressionLevel=-1, bool deleteDestStreamWhenDestroyed=false, int windowBits=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~GZIPCompressorOutputStream</name>
      <anchorfile>classGZIPCompressorOutputStream.html</anchorfile>
      <anchor>a7e77d9225c8d3b44d7a55fd328f710d5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>flush</name>
      <anchorfile>classGZIPCompressorOutputStream.html</anchorfile>
      <anchor>a4b2e3135b2b9707edaf8fac8d74d557a</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>getPosition</name>
      <anchorfile>classGZIPCompressorOutputStream.html</anchorfile>
      <anchor>a2c4af78b2fe5d6499acbb59516417055</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setPosition</name>
      <anchorfile>classGZIPCompressorOutputStream.html</anchorfile>
      <anchor>a5d41bcadc8a2604935f0614ee83d1252</anchor>
      <arglist>(int64) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>write</name>
      <anchorfile>classGZIPCompressorOutputStream.html</anchorfile>
      <anchor>a65127167237b8f998cbad09622edec3a</anchor>
      <arglist>(const void *, size_t) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>writeRepeatedByte</name>
      <anchorfile>classOutputStream.html</anchorfile>
      <anchor>a2971fbd11a1c278f85ae02726c20d3be</anchor>
      <arglist>(uint8 byte, size_t numTimesToRepeat)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GZIPDecompressorInputStream</name>
    <filename>classGZIPDecompressorInputStream.html</filename>
    <base>InputStream</base>
    <member kind="enumeration">
      <type></type>
      <name>Format</name>
      <anchorfile>classGZIPDecompressorInputStream.html</anchorfile>
      <anchor>a293d005b03d528a89ec13cfb07e31f94</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>zlibFormat</name>
      <anchorfile>classGZIPDecompressorInputStream.html</anchorfile>
      <anchor>a293d005b03d528a89ec13cfb07e31f94a38e3cd57b01d42c10cd866e71343f742</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>deflateFormat</name>
      <anchorfile>classGZIPDecompressorInputStream.html</anchorfile>
      <anchor>a293d005b03d528a89ec13cfb07e31f94adbc6da051e28e255c2574026684fc2b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>gzipFormat</name>
      <anchorfile>classGZIPDecompressorInputStream.html</anchorfile>
      <anchor>a293d005b03d528a89ec13cfb07e31f94a1a578314b467b8f06a116da9d8cc52eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GZIPDecompressorInputStream</name>
      <anchorfile>classGZIPDecompressorInputStream.html</anchorfile>
      <anchor>a212aeebd5a55b921b0ce5475d756d79a</anchor>
      <arglist>(InputStream *sourceStream, bool deleteSourceWhenDestroyed, Format sourceFormat=zlibFormat, int64 uncompressedStreamLength=-1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GZIPDecompressorInputStream</name>
      <anchorfile>classGZIPDecompressorInputStream.html</anchorfile>
      <anchor>a3beb8232d0d81935fa78d75e30ba8e01</anchor>
      <arglist>(InputStream &amp;sourceStream)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~GZIPDecompressorInputStream</name>
      <anchorfile>classGZIPDecompressorInputStream.html</anchorfile>
      <anchor>a4bcf594ac091cb9def1938a8aa85e448</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>getPosition</name>
      <anchorfile>classGZIPDecompressorInputStream.html</anchorfile>
      <anchor>ac4c50d82834c802afbc17d9bb027fc04</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setPosition</name>
      <anchorfile>classGZIPDecompressorInputStream.html</anchorfile>
      <anchor>a3e24dc42a69696d11d5ec8b79fe5cd91</anchor>
      <arglist>(int64 pos) override</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>getTotalLength</name>
      <anchorfile>classGZIPDecompressorInputStream.html</anchorfile>
      <anchor>a42cdcb3cd546cb0cbbffe52f8763a5c0</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isExhausted</name>
      <anchorfile>classGZIPDecompressorInputStream.html</anchorfile>
      <anchor>a9ee15e46115074b0bccb9029480b5c22</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>read</name>
      <anchorfile>classGZIPDecompressorInputStream.html</anchorfile>
      <anchor>a1b8deaae7ddf6028c7ddf5619c5489e6</anchor>
      <arglist>(void *destBuffer, int maxBytesToRead) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>HashMap</name>
    <filename>classHashMap.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <class kind="struct">HashMap::Iterator</class>
    <member kind="typedef">
      <type>TypeOfCriticalSectionToUse::ScopedLockType</type>
      <name>ScopedLockType</name>
      <anchorfile>classHashMap.html</anchorfile>
      <anchor>adc9bae72a08bd95e9e030b76d101e215</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HashMap</name>
      <anchorfile>classHashMap.html</anchorfile>
      <anchor>a4d6d41cfc524ccc0a73f0251d7fc1fab</anchor>
      <arglist>(int numberOfSlots=defaultHashTableSize, HashFunctionType hashFunction=HashFunctionType())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~HashMap</name>
      <anchorfile>classHashMap.html</anchorfile>
      <anchor>a33001fb7329c32bdca37d969984f1e58</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classHashMap.html</anchorfile>
      <anchor>a2922931b85fa384901d82de2b46b0845</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>classHashMap.html</anchorfile>
      <anchor>a79c34c9f6a0799d6cae1b84ff61b7a34</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>operator[]</name>
      <anchorfile>classHashMap.html</anchorfile>
      <anchor>aad123e7a5d4d6a0fef5196d5e0475c21</anchor>
      <arglist>(KeyTypeParameter keyToLookFor) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>classHashMap.html</anchorfile>
      <anchor>a76ea6487128a798b22e3937731cab111</anchor>
      <arglist>(KeyTypeParameter keyToLookFor) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>containsValue</name>
      <anchorfile>classHashMap.html</anchorfile>
      <anchor>aa18110ae5d5de81f4e64efcc117e43d8</anchor>
      <arglist>(ValueTypeParameter valueToLookFor) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classHashMap.html</anchorfile>
      <anchor>a875c55a3b720118cd6687fd6494f7afd</anchor>
      <arglist>(KeyTypeParameter newKey, ValueTypeParameter newValue)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove</name>
      <anchorfile>classHashMap.html</anchorfile>
      <anchor>ac308687ea47efa4d1559ec1b35505ad2</anchor>
      <arglist>(KeyTypeParameter keyToRemove)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeValue</name>
      <anchorfile>classHashMap.html</anchorfile>
      <anchor>a7c7e68766babe36a8ae07033d3652f2f</anchor>
      <arglist>(ValueTypeParameter valueToRemove)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remapTable</name>
      <anchorfile>classHashMap.html</anchorfile>
      <anchor>aadd0f7eaeacd996eed49440b27d9f308</anchor>
      <arglist>(int newNumberOfSlots)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumSlots</name>
      <anchorfile>classHashMap.html</anchorfile>
      <anchor>a28c5938ec533466631b98451c6b78072</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swapWith</name>
      <anchorfile>classHashMap.html</anchorfile>
      <anchor>a885345c5f15712041e6e46d38d6e564b</anchor>
      <arglist>(OtherHashMapType &amp;otherHashMap) noexcept</arglist>
    </member>
    <member kind="function">
      <type>const TypeOfCriticalSectionToUse &amp;</type>
      <name>getLock</name>
      <anchorfile>classHashMap.html</anchorfile>
      <anchor>a539b127c2f399e4d5f6c235222fb7bf2</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>begin</name>
      <anchorfile>classHashMap.html</anchorfile>
      <anchor>a877ab31364ccaf45379d018a0b126fe1</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>end</name>
      <anchorfile>classHashMap.html</anchorfile>
      <anchor>a42a1631cad1bf4b1bd74f3429359e415</anchor>
      <arglist>() const noexcept</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>HashMap::Iterator</name>
    <filename>structHashMap_1_1Iterator.html</filename>
    <member kind="function">
      <type></type>
      <name>Iterator</name>
      <anchorfile>structHashMap_1_1Iterator.html</anchorfile>
      <anchor>a1f638b01f90ece3081f6456a57f9991e</anchor>
      <arglist>(const HashMap &amp;hashMapToIterate) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Iterator</name>
      <anchorfile>structHashMap_1_1Iterator.html</anchorfile>
      <anchor>a1e2e802a4f40adec1120079695142869</anchor>
      <arglist>(const Iterator &amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>next</name>
      <anchorfile>structHashMap_1_1Iterator.html</anchorfile>
      <anchor>a4266d184eebca2ad08e4b72025a98804</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>KeyType</type>
      <name>getKey</name>
      <anchorfile>structHashMap_1_1Iterator.html</anchorfile>
      <anchor>a3509d1d0273f3583e358f6687f3fdb2b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>getValue</name>
      <anchorfile>structHashMap_1_1Iterator.html</anchorfile>
      <anchor>a93c4afaa305453d5c6727d09ebc212ac</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>structHashMap_1_1Iterator.html</anchorfile>
      <anchor>a341bf8a8ebd064bccb0739fc73b48fa7</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>Iterator &amp;</type>
      <name>operator++</name>
      <anchorfile>structHashMap_1_1Iterator.html</anchorfile>
      <anchor>a7033c902782841d334d6f95ea725658c</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>operator*</name>
      <anchorfile>structHashMap_1_1Iterator.html</anchorfile>
      <anchor>a460f1aba01f517f9a887f101a2fa28e3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>structHashMap_1_1Iterator.html</anchorfile>
      <anchor>ae9131d21611dc5bdcd15020930c76744</anchor>
      <arglist>(const Iterator &amp;other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetToEnd</name>
      <anchorfile>structHashMap_1_1Iterator.html</anchorfile>
      <anchor>a23667db4b0294862723097ed5230fb3e</anchor>
      <arglist>() noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>HeapBlock</name>
    <filename>classHeapBlock.html</filename>
    <templarg>ElementType</templarg>
    <templarg>throwOnFailure</templarg>
    <member kind="typedef">
      <type>ElementType</type>
      <name>Type</name>
      <anchorfile>classHeapBlock.html</anchorfile>
      <anchor>a5757b5bd325d4addb907186b08e6849e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HeapBlock</name>
      <anchorfile>classHeapBlock.html</anchorfile>
      <anchor>ab7643beefa078bb4692dbfff40f6f3bb</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HeapBlock</name>
      <anchorfile>classHeapBlock.html</anchorfile>
      <anchor>a31427ded49cc996e6f894f124c4aa5ba</anchor>
      <arglist>(const size_t numElements)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HeapBlock</name>
      <anchorfile>classHeapBlock.html</anchorfile>
      <anchor>adcd966a89c09b50e2fa4efc1a7b20ca6</anchor>
      <arglist>(const size_t numElements, const bool initialiseToZero)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~HeapBlock</name>
      <anchorfile>classHeapBlock.html</anchorfile>
      <anchor>abf392fafab8530d45132eaeb81ff372d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HeapBlock</name>
      <anchorfile>classHeapBlock.html</anchorfile>
      <anchor>a43e44081c3cbef5f634dd5a2a58cd1bd</anchor>
      <arglist>(HeapBlock &amp;&amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>HeapBlock &amp;</type>
      <name>operator=</name>
      <anchorfile>classHeapBlock.html</anchorfile>
      <anchor>a877202b3a190fecfc309e43cd706822a</anchor>
      <arglist>(HeapBlock &amp;&amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator ElementType *</name>
      <anchorfile>classHeapBlock.html</anchorfile>
      <anchor>af6d00012477feaaab90bcf100d05d08a</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>ElementType *</type>
      <name>getData</name>
      <anchorfile>classHeapBlock.html</anchorfile>
      <anchor>a30a00ad8520b7b4b5f58c063a7247a7f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator void *</name>
      <anchorfile>classHeapBlock.html</anchorfile>
      <anchor>a912268a681322c1234753bd580bf1f89</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const void *</name>
      <anchorfile>classHeapBlock.html</anchorfile>
      <anchor>af51c07aad68df37e185d1f452a5ace97</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>ElementType *</type>
      <name>operator-&gt;</name>
      <anchorfile>classHeapBlock.html</anchorfile>
      <anchor>ad7d495cdad2d794c5fc544e54d43caa2</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>ElementType &amp;</type>
      <name>operator[]</name>
      <anchorfile>classHeapBlock.html</anchorfile>
      <anchor>a4fde2d780504edd9e7a33efe0c24ab9c</anchor>
      <arglist>(IndexType index) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>ElementType *</type>
      <name>operator+</name>
      <anchorfile>classHeapBlock.html</anchorfile>
      <anchor>ae5769755baa56702235ecf2edc68f808</anchor>
      <arglist>(IndexType index) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classHeapBlock.html</anchorfile>
      <anchor>a4e298218cf588337359db82edd07e497</anchor>
      <arglist>(const ElementType *const otherPointer) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classHeapBlock.html</anchorfile>
      <anchor>a02ba60581374bc14ffc29d208937d0ae</anchor>
      <arglist>(const ElementType *const otherPointer) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>malloc</name>
      <anchorfile>classHeapBlock.html</anchorfile>
      <anchor>a1a196c4ebdb6a5ff9517e262b91894cf</anchor>
      <arglist>(const size_t newNumElements, const size_t elementSize=sizeof(ElementType))</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>calloc</name>
      <anchorfile>classHeapBlock.html</anchorfile>
      <anchor>a59dc4dfb0d05906164f4362b2086cd50</anchor>
      <arglist>(const size_t newNumElements, const size_t elementSize=sizeof(ElementType))</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>allocate</name>
      <anchorfile>classHeapBlock.html</anchorfile>
      <anchor>a4e999ff1f7ed59dd4546596447059cc7</anchor>
      <arglist>(const size_t newNumElements, bool initialiseToZero)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>realloc</name>
      <anchorfile>classHeapBlock.html</anchorfile>
      <anchor>a75f22feaa5bb7278e6a6234ec5d19778</anchor>
      <arglist>(const size_t newNumElements, const size_t elementSize=sizeof(ElementType))</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>free</name>
      <anchorfile>classHeapBlock.html</anchorfile>
      <anchor>a8ec3fb69997d6f530d60cb5e0969f97f</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swapWith</name>
      <anchorfile>classHeapBlock.html</anchorfile>
      <anchor>a7ebc384a5d3f8ccfb56229688a0a273c</anchor>
      <arglist>(HeapBlock&lt; ElementType, otherBlockThrows &gt; &amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classHeapBlock.html</anchorfile>
      <anchor>a658838e2b07f498b169c87c73040b509</anchor>
      <arglist>(size_t numElements) noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>HighResolutionTimer</name>
    <filename>classHighResolutionTimer.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~HighResolutionTimer</name>
      <anchorfile>classHighResolutionTimer.html</anchorfile>
      <anchor>a5eb450755a308ebc74e30085af52082b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>hiResTimerCallback</name>
      <anchorfile>classHighResolutionTimer.html</anchorfile>
      <anchor>a38fac5960301220b28b687817e4e7598</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>startTimer</name>
      <anchorfile>classHighResolutionTimer.html</anchorfile>
      <anchor>a9d3709eee45c33f0d2095ab80121a965</anchor>
      <arglist>(int intervalInMilliseconds)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stopTimer</name>
      <anchorfile>classHighResolutionTimer.html</anchorfile>
      <anchor>a141251dfd58c8564709a15da52dffd3a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isTimerRunning</name>
      <anchorfile>classHighResolutionTimer.html</anchorfile>
      <anchor>a628e5e8a30df147af372818baa96cf96</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getTimerInterval</name>
      <anchorfile>classHighResolutionTimer.html</anchorfile>
      <anchor>a96e6af2a70291b57cba40155cb4cbc01</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>HighResolutionTimer</name>
      <anchorfile>classHighResolutionTimer.html</anchorfile>
      <anchor>ac79eb2389b1d52cd4a387836fe9ce860</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>HostPacketBuilder</name>
    <filename>structHostPacketBuilder.html</filename>
    <templarg>maxPacketBytes</templarg>
    <member kind="function">
      <type></type>
      <name>HostPacketBuilder</name>
      <anchorfile>structHostPacketBuilder.html</anchorfile>
      <anchor>a70ed9f4d5fb06209824811edac4b6354</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HostPacketBuilder</name>
      <anchorfile>structHostPacketBuilder.html</anchorfile>
      <anchor>ab5a0ff6bdbd083a60fd4a370bc829ee6</anchor>
      <arglist>(const HostPacketBuilder &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HostPacketBuilder</name>
      <anchorfile>structHostPacketBuilder.html</anchorfile>
      <anchor>a2dd5a2c34f257749917adcd84e840d00</anchor>
      <arglist>(HostPacketBuilder &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>const void *</type>
      <name>getData</name>
      <anchorfile>structHostPacketBuilder.html</anchorfile>
      <anchor>a4aff99c088b81fcfc901d141d07ab3ec</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>structHostPacketBuilder.html</anchorfile>
      <anchor>a07e6f1ab371debd068bf7581d8fa565a</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writePacketSysexHeaderBytes</name>
      <anchorfile>structHostPacketBuilder.html</anchorfile>
      <anchor>a692baf188523028e7d077c8ee72f0264</anchor>
      <arglist>(TopologyIndex deviceIndex) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writePacketSysexFooter</name>
      <anchorfile>structHostPacketBuilder.html</anchorfile>
      <anchor>a60d5bfd156cc649722b3e2777078be5e</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>deviceControlMessage</name>
      <anchorfile>structHostPacketBuilder.html</anchorfile>
      <anchor>ad16121671401b725b707ece5f525c47f</anchor>
      <arglist>(DeviceCommand command) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>beginDataChanges</name>
      <anchorfile>structHostPacketBuilder.html</anchorfile>
      <anchor>a5576434f5b7717ee1cd12e5e3d05cca5</anchor>
      <arglist>(PacketIndex packetIndex) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>endDataChanges</name>
      <anchorfile>structHostPacketBuilder.html</anchorfile>
      <anchor>ad83184ca419b1e325fd1a80ae0ceda54</anchor>
      <arglist>(bool isLastChange) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>skipBytes</name>
      <anchorfile>structHostPacketBuilder.html</anchorfile>
      <anchor>a83205fbadf4fb1110838c6c88a328d70</anchor>
      <arglist>(int numToSkip) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setMultipleBytes</name>
      <anchorfile>structHostPacketBuilder.html</anchorfile>
      <anchor>a17551c66fb73514a5e476d665a6b3f34</anchor>
      <arglist>(const uint8 *values, int num) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setMultipleBytes</name>
      <anchorfile>structHostPacketBuilder.html</anchorfile>
      <anchor>a13040e62a239975495bc628593c1b203</anchor>
      <arglist>(uint8 value, uint8 lastValue, int num) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addProgramEventMessage</name>
      <anchorfile>structHostPacketBuilder.html</anchorfile>
      <anchor>af69d0b848cbad07b164705a3bf2a872f</anchor>
      <arglist>(const int32 *messageData)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>HostPacketDecoder</name>
    <filename>structHostPacketDecoder.html</filename>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>processNextPacket</name>
      <anchorfile>structHostPacketDecoder.html</anchorfile>
      <anchor>aa4f6e63e352311d0dbe6a87cb180ca9b</anchor>
      <arglist>(Handler &amp;handler, TopologyIndex deviceIndex, const void *data, int size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>processNextMessage</name>
      <anchorfile>structHostPacketDecoder.html</anchorfile>
      <anchor>a038d84662c34a3e0a72ab33288b5794d</anchor>
      <arglist>(Handler &amp;handler, Packed7BitArrayReader &amp;reader, TopologyIndex deviceIndex, PacketTimestamp packetTimestamp)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>handleTopology</name>
      <anchorfile>structHostPacketDecoder.html</anchorfile>
      <anchor>acc256d98d681a9e5638e8a4dcb11477c</anchor>
      <arglist>(Handler &amp;handler, Packed7BitArrayReader &amp;reader)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>handleTopologyDevice</name>
      <anchorfile>structHostPacketDecoder.html</anchorfile>
      <anchor>a5f8e3fe82240d62f72e1de0edb17244a</anchor>
      <arglist>(Handler &amp;handler, Packed7BitArrayReader &amp;reader)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>handleTopologyConnection</name>
      <anchorfile>structHostPacketDecoder.html</anchorfile>
      <anchor>a66bafbd398a5978a56cae79ca943fd6b</anchor>
      <arglist>(Handler &amp;handler, Packed7BitArrayReader &amp;reader)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>handleTouch</name>
      <anchorfile>structHostPacketDecoder.html</anchorfile>
      <anchor>a5399035cb5f56629c451ea2f7a9c5436</anchor>
      <arglist>(Handler &amp;handler, Packed7BitArrayReader &amp;reader, TopologyIndex deviceIndex, PacketTimestamp packetTimestamp, bool isStart, bool isEnd)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>handleTouchWithVelocity</name>
      <anchorfile>structHostPacketDecoder.html</anchorfile>
      <anchor>a4301b98e5911f74c30ea6cd598928217</anchor>
      <arglist>(Handler &amp;handler, Packed7BitArrayReader &amp;reader, TopologyIndex deviceIndex, PacketTimestamp packetTimestamp, bool isStart, bool isEnd)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>handleTouch</name>
      <anchorfile>structHostPacketDecoder.html</anchorfile>
      <anchor>adcd576683bdd4ec9b18b12496e9b0e4c</anchor>
      <arglist>(Handler &amp;handler, TopologyIndex deviceIndex, uint32 timestamp, TouchIndex touchIndex, TouchPosition position, TouchVelocity velocity, bool isStart, bool isEnd)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>handleButtonDownOrUp</name>
      <anchorfile>structHostPacketDecoder.html</anchorfile>
      <anchor>a265efe26ad890365d596cb2ed291f07f</anchor>
      <arglist>(Handler &amp;handler, Packed7BitArrayReader &amp;reader, TopologyIndex deviceIndex, PacketTimestamp packetTimestamp, bool isDown)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>handlePacketACK</name>
      <anchorfile>structHostPacketDecoder.html</anchorfile>
      <anchor>a967b2cdd6f583ac93baa6093a71fdd87</anchor>
      <arglist>(Handler &amp;handler, Packed7BitArrayReader &amp;reader, TopologyIndex deviceIndex)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>HyperlinkButton</name>
    <filename>classHyperlinkButton.html</filename>
    <base>Button</base>
    <member kind="enumeration">
      <type></type>
      <name>ColourIds</name>
      <anchorfile>classHyperlinkButton.html</anchorfile>
      <anchor>a7e5d7db9e3d3665d349ec2582eb48d5b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>textColourId</name>
      <anchorfile>classHyperlinkButton.html</anchorfile>
      <anchor>a7e5d7db9e3d3665d349ec2582eb48d5badc8e65be7955e88ddfe56e9555246d2c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HyperlinkButton</name>
      <anchorfile>classHyperlinkButton.html</anchorfile>
      <anchor>aab8c9244ad8e28df8d012bbb3fb5b89f</anchor>
      <arglist>(const String &amp;linkText, const URL &amp;linkURL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HyperlinkButton</name>
      <anchorfile>classHyperlinkButton.html</anchorfile>
      <anchor>a6248ace276d2aade28ae1c61f33e76fa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~HyperlinkButton</name>
      <anchorfile>classHyperlinkButton.html</anchorfile>
      <anchor>a277791602a973667098c9bcdbfed251b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFont</name>
      <anchorfile>classHyperlinkButton.html</anchorfile>
      <anchor>aa57e103707cf51c06cec4663d8217609</anchor>
      <arglist>(const Font &amp;newFont, bool resizeToMatchComponentHeight, Justification justificationType=Justification::horizontallyCentred)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setURL</name>
      <anchorfile>classHyperlinkButton.html</anchorfile>
      <anchor>af822610fabccf3a135936de178b6b1ac</anchor>
      <arglist>(const URL &amp;newURL) noexcept</arglist>
    </member>
    <member kind="function">
      <type>const URL &amp;</type>
      <name>getURL</name>
      <anchorfile>classHyperlinkButton.html</anchorfile>
      <anchor>ae0af7b706d9881125f005817a115307f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>changeWidthToFitText</name>
      <anchorfile>classHyperlinkButton.html</anchorfile>
      <anchor>adab11697af1e6c4c886537e03cedd8ef</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>clicked</name>
      <anchorfile>classHyperlinkButton.html</anchorfile>
      <anchor>a0d4c984d5108f962a6c6db6f97c95215</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>colourChanged</name>
      <anchorfile>classHyperlinkButton.html</anchorfile>
      <anchor>a79670643a7d6e57c2db3cc39bc3b2ad6</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>paintButton</name>
      <anchorfile>classHyperlinkButton.html</anchorfile>
      <anchor>a890fcc9c1fdf049f3e3a8e6038c6ff80</anchor>
      <arglist>(Graphics &amp;, bool isMouseOver, bool isButtonDown) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Identifier</name>
    <filename>classIdentifier.html</filename>
    <member kind="function">
      <type></type>
      <name>Identifier</name>
      <anchorfile>classIdentifier.html</anchorfile>
      <anchor>a1c1912edf41af15a4e1d51798d6bb895</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Identifier</name>
      <anchorfile>classIdentifier.html</anchorfile>
      <anchor>a694f45d87dd86efb3d5f412e777f32c7</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Identifier</name>
      <anchorfile>classIdentifier.html</anchorfile>
      <anchor>ab607b123ad36c57c0e81cf0818fe1d9c</anchor>
      <arglist>(const String &amp;name)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Identifier</name>
      <anchorfile>classIdentifier.html</anchorfile>
      <anchor>a79d06ddf3e797be87110e561fcd92150</anchor>
      <arglist>(String::CharPointerType nameStart, String::CharPointerType nameEnd)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Identifier</name>
      <anchorfile>classIdentifier.html</anchorfile>
      <anchor>abc24d2cc68eb9728bd88c5889cc2949a</anchor>
      <arglist>(const Identifier &amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Identifier &amp;</type>
      <name>operator=</name>
      <anchorfile>classIdentifier.html</anchorfile>
      <anchor>afc7c01762a98ef336ada6587b9e16697</anchor>
      <arglist>(const Identifier &amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Identifier</name>
      <anchorfile>classIdentifier.html</anchorfile>
      <anchor>a8dfea4beaa943af65f6e9e3809819063</anchor>
      <arglist>(Identifier &amp;&amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Identifier &amp;</type>
      <name>operator=</name>
      <anchorfile>classIdentifier.html</anchorfile>
      <anchor>af354fdada63fbfc3f8fddb63d369470a</anchor>
      <arglist>(Identifier &amp;&amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Identifier</name>
      <anchorfile>classIdentifier.html</anchorfile>
      <anchor>a1adbff731160d315bc940efe9535ffb6</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classIdentifier.html</anchorfile>
      <anchor>a9ddc8e162da333db929220659ebbfdd8</anchor>
      <arglist>(const Identifier &amp;other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classIdentifier.html</anchorfile>
      <anchor>ae05b1735aa748cd28ce1d2d3bed7f13d</anchor>
      <arglist>(const Identifier &amp;other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classIdentifier.html</anchorfile>
      <anchor>a89d4fadd40a2585d49c4f5fc00c3b9e3</anchor>
      <arglist>(StringRef other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classIdentifier.html</anchorfile>
      <anchor>a6eb6d01ea80b5e6e3bae0b1de374db00</anchor>
      <arglist>(StringRef other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>classIdentifier.html</anchorfile>
      <anchor>a9be2af82ad1b7f4800bf81fe24f51946</anchor>
      <arglist>(StringRef other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>classIdentifier.html</anchorfile>
      <anchor>a3f4930bc22c3f24c91d1c77c6dc76d5b</anchor>
      <arglist>(StringRef other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>classIdentifier.html</anchorfile>
      <anchor>a93267b29f686698e2699dd31055d8e87</anchor>
      <arglist>(StringRef other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>classIdentifier.html</anchorfile>
      <anchor>a3a507de11499ef20d39eb01d610931d8</anchor>
      <arglist>(StringRef other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const String &amp;</type>
      <name>toString</name>
      <anchorfile>classIdentifier.html</anchorfile>
      <anchor>a2f7825d6bfda334260110453327c4f07</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator String::CharPointerType</name>
      <anchorfile>classIdentifier.html</anchorfile>
      <anchor>ae5ef972983c99050e88f3e29cd5e4a4f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>String::CharPointerType</type>
      <name>getCharPointer</name>
      <anchorfile>classIdentifier.html</anchorfile>
      <anchor>a7993832a5f43fb629065b7d5308b0866</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator StringRef</name>
      <anchorfile>classIdentifier.html</anchorfile>
      <anchor>a874632465b5d001d1b1e9cbd06ace01f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>classIdentifier.html</anchorfile>
      <anchor>a2715e2deec78691c79af8ea81d5e6628</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNull</name>
      <anchorfile>classIdentifier.html</anchorfile>
      <anchor>a7917ad4ed89e4442b950a7fcf37df170</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isValidIdentifier</name>
      <anchorfile>classIdentifier.html</anchorfile>
      <anchor>a84834b24c111e28ecd4a8b68ec57ad1e</anchor>
      <arglist>(const String &amp;possibleIdentifier) noexcept</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static Identifier</type>
      <name>null</name>
      <anchorfile>classIdentifier.html</anchorfile>
      <anchor>affc07b70676ba6a79773c2beb696e9de</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IIRCoefficients</name>
    <filename>classIIRCoefficients.html</filename>
    <member kind="function">
      <type></type>
      <name>IIRCoefficients</name>
      <anchorfile>classIIRCoefficients.html</anchorfile>
      <anchor>aa86ed4118a0fabee324f3d38cb68e4c0</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IIRCoefficients</name>
      <anchorfile>classIIRCoefficients.html</anchorfile>
      <anchor>a0861ca4179cd306c4b606daf86fba39a</anchor>
      <arglist>(double c1, double c2, double c3, double c4, double c5, double c6) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IIRCoefficients</name>
      <anchorfile>classIIRCoefficients.html</anchorfile>
      <anchor>a0a68c3c06e275c4241e43fe80c6091a8</anchor>
      <arglist>(const IIRCoefficients &amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>IIRCoefficients &amp;</type>
      <name>operator=</name>
      <anchorfile>classIIRCoefficients.html</anchorfile>
      <anchor>ad356af95ebf00b5dcdc7d0705314e756</anchor>
      <arglist>(const IIRCoefficients &amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~IIRCoefficients</name>
      <anchorfile>classIIRCoefficients.html</anchorfile>
      <anchor>a5f9d92fe4b4d5805bb7d7407bed1c6b3</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static IIRCoefficients</type>
      <name>makeLowPass</name>
      <anchorfile>classIIRCoefficients.html</anchorfile>
      <anchor>a789e5863ae22b5a1c817c7156e406874</anchor>
      <arglist>(double sampleRate, double frequency) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static IIRCoefficients</type>
      <name>makeLowPass</name>
      <anchorfile>classIIRCoefficients.html</anchorfile>
      <anchor>aef6098714db7af1d1503bf06a1204c83</anchor>
      <arglist>(double sampleRate, double frequency, double Q) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static IIRCoefficients</type>
      <name>makeHighPass</name>
      <anchorfile>classIIRCoefficients.html</anchorfile>
      <anchor>a19027ed08d1483e83aafc7aa287cdcb0</anchor>
      <arglist>(double sampleRate, double frequency) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static IIRCoefficients</type>
      <name>makeHighPass</name>
      <anchorfile>classIIRCoefficients.html</anchorfile>
      <anchor>a0a24688254a51da88c03fb4fcb40eb2a</anchor>
      <arglist>(double sampleRate, double frequency, double Q) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static IIRCoefficients</type>
      <name>makeBandPass</name>
      <anchorfile>classIIRCoefficients.html</anchorfile>
      <anchor>aebc0e9faf8427c89dce2ec10f4a8260d</anchor>
      <arglist>(double sampleRate, double frequency) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static IIRCoefficients</type>
      <name>makeBandPass</name>
      <anchorfile>classIIRCoefficients.html</anchorfile>
      <anchor>a7122fd1b9948d39a977f3c8b1d389c8a</anchor>
      <arglist>(double sampleRate, double frequency, double Q) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static IIRCoefficients</type>
      <name>makeNotchFilter</name>
      <anchorfile>classIIRCoefficients.html</anchorfile>
      <anchor>a8661296bf7fd42b19a5278a04226196b</anchor>
      <arglist>(double sampleRate, double frequency) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static IIRCoefficients</type>
      <name>makeNotchFilter</name>
      <anchorfile>classIIRCoefficients.html</anchorfile>
      <anchor>ae6909b825f09e3808f9fabc9cc338ffe</anchor>
      <arglist>(double sampleRate, double frequency, double Q) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static IIRCoefficients</type>
      <name>makeAllPass</name>
      <anchorfile>classIIRCoefficients.html</anchorfile>
      <anchor>a46168ce2c80a2fa8be089d9ec63d1996</anchor>
      <arglist>(double sampleRate, double frequency) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static IIRCoefficients</type>
      <name>makeAllPass</name>
      <anchorfile>classIIRCoefficients.html</anchorfile>
      <anchor>a19d7ee5f5c0ac036ada8f3f2ade79fc0</anchor>
      <arglist>(double sampleRate, double frequency, double Q) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static IIRCoefficients</type>
      <name>makeLowShelf</name>
      <anchorfile>classIIRCoefficients.html</anchorfile>
      <anchor>a06e37145a98d041c6452b8517ab35aeb</anchor>
      <arglist>(double sampleRate, double cutOffFrequency, double Q, float gainFactor) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static IIRCoefficients</type>
      <name>makeHighShelf</name>
      <anchorfile>classIIRCoefficients.html</anchorfile>
      <anchor>aa92f69d1d2321d4768cebf1fad2a30cc</anchor>
      <arglist>(double sampleRate, double cutOffFrequency, double Q, float gainFactor) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static IIRCoefficients</type>
      <name>makePeakFilter</name>
      <anchorfile>classIIRCoefficients.html</anchorfile>
      <anchor>a6808579f4ab3b137832f7da0776d765d</anchor>
      <arglist>(double sampleRate, double centreFrequency, double Q, float gainFactor) noexcept</arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>coefficients</name>
      <anchorfile>classIIRCoefficients.html</anchorfile>
      <anchor>a657c88078e4415353e6e987ce7a0f252</anchor>
      <arglist>[5]</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IIRFilter</name>
    <filename>classIIRFilter.html</filename>
    <member kind="function">
      <type></type>
      <name>IIRFilter</name>
      <anchorfile>classIIRFilter.html</anchorfile>
      <anchor>a3bf7ebe92dd2b99fcc4d29f63973f02e</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IIRFilter</name>
      <anchorfile>classIIRFilter.html</anchorfile>
      <anchor>a337d888e6999c569e38646d85fe7edc4</anchor>
      <arglist>(const IIRFilter &amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~IIRFilter</name>
      <anchorfile>classIIRFilter.html</anchorfile>
      <anchor>a7923eca7a011d457f23f16c59a9618fa</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>makeInactive</name>
      <anchorfile>classIIRFilter.html</anchorfile>
      <anchor>a5c72ccd292a66e9e53b845362c700094</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCoefficients</name>
      <anchorfile>classIIRFilter.html</anchorfile>
      <anchor>a12ec86c2ba7f3259494bcff509fc6436</anchor>
      <arglist>(const IIRCoefficients &amp;newCoefficients) noexcept</arglist>
    </member>
    <member kind="function">
      <type>IIRCoefficients</type>
      <name>getCoefficients</name>
      <anchorfile>classIIRFilter.html</anchorfile>
      <anchor>ae30d5788742849c12a7d0e467c6c3387</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classIIRFilter.html</anchorfile>
      <anchor>ad393cad59b722523a6a10a4db579fbf7</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>processSamples</name>
      <anchorfile>classIIRFilter.html</anchorfile>
      <anchor>a49057fbc71f621e06d1074af44ce90e8</anchor>
      <arglist>(float *samples, int numSamples) noexcept</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>processSingleSampleRaw</name>
      <anchorfile>classIIRFilter.html</anchorfile>
      <anchor>afcd358671fc2fdd9bcd531dc7f1156d6</anchor>
      <arglist>(float sample) noexcept</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>IIRFilter &amp;</type>
      <name>operator=</name>
      <anchorfile>classIIRFilter.html</anchorfile>
      <anchor>afba9f11078d1258454da525fc5557e8d</anchor>
      <arglist>(const IIRFilter &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SpinLock</type>
      <name>processLock</name>
      <anchorfile>classIIRFilter.html</anchorfile>
      <anchor>ab20e1698e56ae7426fcbd1f22157a695</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IIRCoefficients</type>
      <name>coefficients</name>
      <anchorfile>classIIRFilter.html</anchorfile>
      <anchor>a4501466bfaa9cd5fc44108d725a378f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>float</type>
      <name>v1</name>
      <anchorfile>classIIRFilter.html</anchorfile>
      <anchor>a7aa25ce1b24889707d4a46c88f8d8239</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>float</type>
      <name>v2</name>
      <anchorfile>classIIRFilter.html</anchorfile>
      <anchor>aee6db1a4d494f69514c430796d419ef5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>active</name>
      <anchorfile>classIIRFilter.html</anchorfile>
      <anchor>ace0c7930049d2cca00bebc4b7f9c3a82</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IIRFilterAudioSource</name>
    <filename>classIIRFilterAudioSource.html</filename>
    <base>AudioSource</base>
    <member kind="function">
      <type></type>
      <name>IIRFilterAudioSource</name>
      <anchorfile>classIIRFilterAudioSource.html</anchorfile>
      <anchor>aad6e3a6a2bb8a6c600b848a102ef45d0</anchor>
      <arglist>(AudioSource *inputSource, bool deleteInputWhenDeleted)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~IIRFilterAudioSource</name>
      <anchorfile>classIIRFilterAudioSource.html</anchorfile>
      <anchor>ae32c8faf7d8c4b95fc389bad73902fb4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCoefficients</name>
      <anchorfile>classIIRFilterAudioSource.html</anchorfile>
      <anchor>ada4d48186cef9de1b651b1428c73e967</anchor>
      <arglist>(const IIRCoefficients &amp;newCoefficients)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>makeInactive</name>
      <anchorfile>classIIRFilterAudioSource.html</anchorfile>
      <anchor>ade5b554766046678cfe027d0449cb15a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>prepareToPlay</name>
      <anchorfile>classIIRFilterAudioSource.html</anchorfile>
      <anchor>a136fa8f34b9f2f82dd8de3547a00f6a2</anchor>
      <arglist>(int samplesPerBlockExpected, double sampleRate) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>releaseResources</name>
      <anchorfile>classIIRFilterAudioSource.html</anchorfile>
      <anchor>a1a4939d75cdf79c7a1bdb5cd601e88aa</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getNextAudioBlock</name>
      <anchorfile>classIIRFilterAudioSource.html</anchorfile>
      <anchor>a30dd0315f98655cca03e578e115742de</anchor>
      <arglist>(const AudioSourceChannelInfo &amp;) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Image</name>
    <filename>classImage.html</filename>
    <class kind="class">Image::BitmapData</class>
    <member kind="enumeration">
      <type></type>
      <name>PixelFormat</name>
      <anchorfile>classImage.html</anchorfile>
      <anchor>ab47b5746d2df286ae6f8da6af5463c01</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>UnknownFormat</name>
      <anchorfile>classImage.html</anchorfile>
      <anchor>ab47b5746d2df286ae6f8da6af5463c01a54eec5e1c5371ae7ad7242c6a2be067d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>RGB</name>
      <anchorfile>classImage.html</anchorfile>
      <anchor>ab47b5746d2df286ae6f8da6af5463c01a03a8b8bb3246ef72c98b01e711d61425</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>ARGB</name>
      <anchorfile>classImage.html</anchorfile>
      <anchor>ab47b5746d2df286ae6f8da6af5463c01a9adefc17fe4663de8e3fc9621c891b8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>SingleChannel</name>
      <anchorfile>classImage.html</anchorfile>
      <anchor>ab47b5746d2df286ae6f8da6af5463c01ab8bd2ed5df42fd15bd349195d81b64b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Image</name>
      <anchorfile>classImage.html</anchorfile>
      <anchor>a5d47b71f7afd9f5df61145abb857455c</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Image</name>
      <anchorfile>classImage.html</anchorfile>
      <anchor>aa51549669248091773ee494737abdc24</anchor>
      <arglist>(PixelFormat format, int imageWidth, int imageHeight, bool clearImage)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Image</name>
      <anchorfile>classImage.html</anchorfile>
      <anchor>ac9e7f47996c7b81190e6cf151bc31fa0</anchor>
      <arglist>(PixelFormat format, int imageWidth, int imageHeight, bool clearImage, const ImageType &amp;type)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Image</name>
      <anchorfile>classImage.html</anchorfile>
      <anchor>a5333c440b8f5637a3c7878e9b8d1ad21</anchor>
      <arglist>(const Image &amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Image &amp;</type>
      <name>operator=</name>
      <anchorfile>classImage.html</anchorfile>
      <anchor>a1a50d3d1da8a95f7c74af4ef8d4eda6f</anchor>
      <arglist>(const Image &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Image</name>
      <anchorfile>classImage.html</anchorfile>
      <anchor>a02801f5341319e941b10a9a291b30a62</anchor>
      <arglist>(Image &amp;&amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Image &amp;</type>
      <name>operator=</name>
      <anchorfile>classImage.html</anchorfile>
      <anchor>ad111c269be3c7915306645b1eb46a3a8</anchor>
      <arglist>(Image &amp;&amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Image</name>
      <anchorfile>classImage.html</anchorfile>
      <anchor>a0294f63700543e11c0f0da85601c7ae5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classImage.html</anchorfile>
      <anchor>aa0b558cf4f55b47b15f11094f4fa84cc</anchor>
      <arglist>(const Image &amp;other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classImage.html</anchorfile>
      <anchor>a9f6d8eea11bc8e8129e313e63f312802</anchor>
      <arglist>(const Image &amp;other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>classImage.html</anchorfile>
      <anchor>a761214d2fa016e3e793b5a2d6b8b85ec</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNull</name>
      <anchorfile>classImage.html</anchorfile>
      <anchor>a4084a24d1034249f29a7781ef44159d8</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getWidth</name>
      <anchorfile>classImage.html</anchorfile>
      <anchor>a3c540187e754adb5beac244b64df70af</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getHeight</name>
      <anchorfile>classImage.html</anchorfile>
      <anchor>a717b9cde54f44af0ea68e87729c1365f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Rectangle&lt; int &gt;</type>
      <name>getBounds</name>
      <anchorfile>classImage.html</anchorfile>
      <anchor>a6b9f151177766fae7679c7994161ceba</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>PixelFormat</type>
      <name>getFormat</name>
      <anchorfile>classImage.html</anchorfile>
      <anchor>a73ceedb27674d0ad6611356147344677</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isARGB</name>
      <anchorfile>classImage.html</anchorfile>
      <anchor>a14441f64b47e4d881c399e07a2718de1</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isRGB</name>
      <anchorfile>classImage.html</anchorfile>
      <anchor>a53b8b72f6cf08ce6d6179666250aedc7</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSingleChannel</name>
      <anchorfile>classImage.html</anchorfile>
      <anchor>a1176ae108a31a0f4b7b4be6b86bc6181</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasAlphaChannel</name>
      <anchorfile>classImage.html</anchorfile>
      <anchor>abb862a4402074ef0dc0382e2c6267a32</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classImage.html</anchorfile>
      <anchor>a2e8dc6de9ca6b4181658d0144579fb2f</anchor>
      <arglist>(const Rectangle&lt; int &gt; &amp;area, Colour colourToClearTo=Colour(0x00000000))</arglist>
    </member>
    <member kind="function">
      <type>Image</type>
      <name>rescaled</name>
      <anchorfile>classImage.html</anchorfile>
      <anchor>ae2355def370dff47cb627fa6419a6ac6</anchor>
      <arglist>(int newWidth, int newHeight, Graphics::ResamplingQuality quality=Graphics::mediumResamplingQuality) const </arglist>
    </member>
    <member kind="function">
      <type>Image</type>
      <name>createCopy</name>
      <anchorfile>classImage.html</anchorfile>
      <anchor>ace65de369620555550026debef672bff</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Image</type>
      <name>convertedToFormat</name>
      <anchorfile>classImage.html</anchorfile>
      <anchor>a1822e722596488f04d51ae8166a02921</anchor>
      <arglist>(PixelFormat newFormat) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>duplicateIfShared</name>
      <anchorfile>classImage.html</anchorfile>
      <anchor>ad995cd253234063d22b604984e83489d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Image</type>
      <name>getClippedImage</name>
      <anchorfile>classImage.html</anchorfile>
      <anchor>a23f8ff9b07d67f2c60776d4031c27417</anchor>
      <arglist>(const Rectangle&lt; int &gt; &amp;area) const </arglist>
    </member>
    <member kind="function">
      <type>Colour</type>
      <name>getPixelAt</name>
      <anchorfile>classImage.html</anchorfile>
      <anchor>a667728516fe03d6c9e29ec696e4d5bdd</anchor>
      <arglist>(int x, int y) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPixelAt</name>
      <anchorfile>classImage.html</anchorfile>
      <anchor>a1521d7dd860ccdecc9a1ba27952d5f88</anchor>
      <arglist>(int x, int y, Colour colour)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>multiplyAlphaAt</name>
      <anchorfile>classImage.html</anchorfile>
      <anchor>a795ef04008dc17e60231eb6bf0618946</anchor>
      <arglist>(int x, int y, float multiplier)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>multiplyAllAlphas</name>
      <anchorfile>classImage.html</anchorfile>
      <anchor>a9d1febd93213f92b50af58ce731cdabf</anchor>
      <arglist>(float amountToMultiplyBy)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>desaturate</name>
      <anchorfile>classImage.html</anchorfile>
      <anchor>a038f9f882f1829362c23c22a9577e22d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>moveImageSection</name>
      <anchorfile>classImage.html</anchorfile>
      <anchor>a5e90b1777a505f16e3f9d2a6da674a36</anchor>
      <arglist>(int destX, int destY, int sourceX, int sourceY, int width, int height)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>createSolidAreaMask</name>
      <anchorfile>classImage.html</anchorfile>
      <anchor>ab908ba678a35f9df7d6d6093346768b3</anchor>
      <arglist>(RectangleList&lt; int &gt; &amp;result, float alphaThreshold) const </arglist>
    </member>
    <member kind="function">
      <type>NamedValueSet *</type>
      <name>getProperties</name>
      <anchorfile>classImage.html</anchorfile>
      <anchor>a7d92d7dc5d490da7f2dee52dfd787ba6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>LowLevelGraphicsContext *</type>
      <name>createLowLevelContext</name>
      <anchorfile>classImage.html</anchorfile>
      <anchor>aa7465ae26c9af5f0bdf8d759c53886e8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getReferenceCount</name>
      <anchorfile>classImage.html</anchorfile>
      <anchor>abd88aa52bedce6d7def13d4b39e7f954</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>ImagePixelData *</type>
      <name>getPixelData</name>
      <anchorfile>classImage.html</anchorfile>
      <anchor>a8b47b5735561b3949f462ecc0a9fe7ca</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Image</name>
      <anchorfile>classImage.html</anchorfile>
      <anchor>a3eee6d546718138b39186c50de6704f9</anchor>
      <arglist>(ImagePixelData *) noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Image::BitmapData</name>
    <filename>classImage_1_1BitmapData.html</filename>
    <class kind="class">Image::BitmapData::BitmapDataReleaser</class>
    <member kind="enumeration">
      <type></type>
      <name>ReadWriteMode</name>
      <anchorfile>classImage_1_1BitmapData.html</anchorfile>
      <anchor>aef68f9fb2440dd6a56a3c0b8c8b6fc13</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>readOnly</name>
      <anchorfile>classImage_1_1BitmapData.html</anchorfile>
      <anchor>aef68f9fb2440dd6a56a3c0b8c8b6fc13a97c870458227b8f45385b81515b25534</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>writeOnly</name>
      <anchorfile>classImage_1_1BitmapData.html</anchorfile>
      <anchor>aef68f9fb2440dd6a56a3c0b8c8b6fc13a5cf46bf61ad8fd0449364d4e0a0eeac7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>readWrite</name>
      <anchorfile>classImage_1_1BitmapData.html</anchorfile>
      <anchor>aef68f9fb2440dd6a56a3c0b8c8b6fc13ad55b50039ed1f7483753714d5a92e7df</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BitmapData</name>
      <anchorfile>classImage_1_1BitmapData.html</anchorfile>
      <anchor>a3a1e71986fb37cbd7ce981352032122b</anchor>
      <arglist>(Image &amp;image, int x, int y, int w, int h, ReadWriteMode mode)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BitmapData</name>
      <anchorfile>classImage_1_1BitmapData.html</anchorfile>
      <anchor>a3710b2251c4c56fa36a1f999ea6b2fdd</anchor>
      <arglist>(const Image &amp;image, int x, int y, int w, int h)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BitmapData</name>
      <anchorfile>classImage_1_1BitmapData.html</anchorfile>
      <anchor>a781088bb00a4a9b3925c5f67ebf05cff</anchor>
      <arglist>(const Image &amp;image, ReadWriteMode mode)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~BitmapData</name>
      <anchorfile>classImage_1_1BitmapData.html</anchorfile>
      <anchor>a0398d1e66c0d7ebdac9a373d516dad82</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>uint8 *</type>
      <name>getLinePointer</name>
      <anchorfile>classImage_1_1BitmapData.html</anchorfile>
      <anchor>a12e054792c046149198ab3c821a1e09d</anchor>
      <arglist>(int y) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>uint8 *</type>
      <name>getPixelPointer</name>
      <anchorfile>classImage_1_1BitmapData.html</anchorfile>
      <anchor>a1d66ad5f9cedfd56e18e480ee23d5b90</anchor>
      <arglist>(int x, int y) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Colour</type>
      <name>getPixelColour</name>
      <anchorfile>classImage_1_1BitmapData.html</anchorfile>
      <anchor>ae2a2c5b5c9aeb01e0098da19c5057d48</anchor>
      <arglist>(int x, int y) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPixelColour</name>
      <anchorfile>classImage_1_1BitmapData.html</anchorfile>
      <anchor>ad76af08dda45202751c3a6103cd42030</anchor>
      <arglist>(int x, int y, Colour colour) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Rectangle&lt; int &gt;</type>
      <name>getBounds</name>
      <anchorfile>classImage_1_1BitmapData.html</anchorfile>
      <anchor>a6eb8ae898ff48b27b7c4fd4551326f9d</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="variable">
      <type>uint8 *</type>
      <name>data</name>
      <anchorfile>classImage_1_1BitmapData.html</anchorfile>
      <anchor>a20783df25b604990685fe8cbb0f1cf91</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>PixelFormat</type>
      <name>pixelFormat</name>
      <anchorfile>classImage_1_1BitmapData.html</anchorfile>
      <anchor>aae26ad39defa124117e3a7d8da499e6b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>lineStride</name>
      <anchorfile>classImage_1_1BitmapData.html</anchorfile>
      <anchor>a0c9d05e29235f0b395fa57b26b13d67a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>pixelStride</name>
      <anchorfile>classImage_1_1BitmapData.html</anchorfile>
      <anchor>a7fc1d9da2a609dd67e8e9ad70e5f38f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>width</name>
      <anchorfile>classImage_1_1BitmapData.html</anchorfile>
      <anchor>a9eea8066d52a09fb2fce0ae4dd49df1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>height</name>
      <anchorfile>classImage_1_1BitmapData.html</anchorfile>
      <anchor>ac81ba5621e83a0bc7d090bf2a17dcc8a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ScopedPointer&lt; BitmapDataReleaser &gt;</type>
      <name>dataReleaser</name>
      <anchorfile>classImage_1_1BitmapData.html</anchorfile>
      <anchor>af6357aea98c90de8dcbbaadbd4969d2a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Image::BitmapData::BitmapDataReleaser</name>
    <filename>classImage_1_1BitmapData_1_1BitmapDataReleaser.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BitmapDataReleaser</name>
      <anchorfile>classImage_1_1BitmapData_1_1BitmapDataReleaser.html</anchorfile>
      <anchor>a1991252530e1120d7e380c5147eaf347</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BitmapDataReleaser</name>
      <anchorfile>classImage_1_1BitmapData_1_1BitmapDataReleaser.html</anchorfile>
      <anchor>a9e5c771b4c6e5fd29ca21709ace1bafa</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ImageButton</name>
    <filename>classImageButton.html</filename>
    <base>Button</base>
    <class kind="struct">ImageButton::LookAndFeelMethods</class>
    <member kind="function">
      <type></type>
      <name>ImageButton</name>
      <anchorfile>classImageButton.html</anchorfile>
      <anchor>ac9cec34cf28423496c0f46cd0ad21657</anchor>
      <arglist>(const String &amp;name=String())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ImageButton</name>
      <anchorfile>classImageButton.html</anchorfile>
      <anchor>afbbc63233e45f52a269cca07cbd18d94</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setImages</name>
      <anchorfile>classImageButton.html</anchorfile>
      <anchor>a6c9fb81ba5c272dc033b3d8035874c14</anchor>
      <arglist>(bool resizeButtonNowToFitThisImage, bool rescaleImagesWhenButtonSizeChanges, bool preserveImageProportions, const Image &amp;normalImage, float imageOpacityWhenNormal, Colour overlayColourWhenNormal, const Image &amp;overImage, float imageOpacityWhenOver, Colour overlayColourWhenOver, const Image &amp;downImage, float imageOpacityWhenDown, Colour overlayColourWhenDown, float hitTestAlphaThreshold=0.0f)</arglist>
    </member>
    <member kind="function">
      <type>Image</type>
      <name>getNormalImage</name>
      <anchorfile>classImageButton.html</anchorfile>
      <anchor>af87734afe617eb9f4fcc7d397577e882</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Image</type>
      <name>getOverImage</name>
      <anchorfile>classImageButton.html</anchorfile>
      <anchor>af6a5ccb3cfe987cb3cc0ec90d0a3747f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Image</type>
      <name>getDownImage</name>
      <anchorfile>classImageButton.html</anchorfile>
      <anchor>adb12b3d33c65d8022e4fe12c235ebb36</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>hitTest</name>
      <anchorfile>classImageButton.html</anchorfile>
      <anchor>a646b175c55ac588b8ffed117f213e8e2</anchor>
      <arglist>(int x, int y) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>paintButton</name>
      <anchorfile>classImageButton.html</anchorfile>
      <anchor>a332442c51fdc2530552e20cf411ed7ed</anchor>
      <arglist>(Graphics &amp;, bool isMouseOver, bool isButtonDown) override</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ImageButton::LookAndFeelMethods</name>
    <filename>structImageButton_1_1LookAndFeelMethods.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~LookAndFeelMethods</name>
      <anchorfile>structImageButton_1_1LookAndFeelMethods.html</anchorfile>
      <anchor>ae6f7d76915b391f9e48f5ec36ab23b78</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>drawImageButton</name>
      <anchorfile>structImageButton_1_1LookAndFeelMethods.html</anchorfile>
      <anchor>aae3383d8e5ff4c446683b4fa4cafeb73</anchor>
      <arglist>(Graphics &amp;, Image *, int imageX, int imageY, int imageW, int imageH, const Colour &amp;overlayColour, float imageOpacity, ImageButton &amp;)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ImageCache</name>
    <filename>classImageCache.html</filename>
    <member kind="function" static="yes">
      <type>static Image</type>
      <name>getFromFile</name>
      <anchorfile>classImageCache.html</anchorfile>
      <anchor>acc266a65cf61dd0a2f68e68840b4a5c4</anchor>
      <arglist>(const File &amp;file)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Image</type>
      <name>getFromMemory</name>
      <anchorfile>classImageCache.html</anchorfile>
      <anchor>ac3e80d35b973c3cb47a031185ff56c06</anchor>
      <arglist>(const void *imageData, int dataSize)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Image</type>
      <name>getFromHashCode</name>
      <anchorfile>classImageCache.html</anchorfile>
      <anchor>a4ebcfbc2287268f4312c8137a913bca4</anchor>
      <arglist>(int64 hashCode)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>addImageToCache</name>
      <anchorfile>classImageCache.html</anchorfile>
      <anchor>aba7b8b9196a99296dc3900fb6d01f04a</anchor>
      <arglist>(const Image &amp;image, int64 hashCode)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setCacheTimeout</name>
      <anchorfile>classImageCache.html</anchorfile>
      <anchor>a7e8f2a2260acf7ca4f4a62c36ce99332</anchor>
      <arglist>(int millisecs)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>releaseUnusedImages</name>
      <anchorfile>classImageCache.html</anchorfile>
      <anchor>a59842f582bd240a820fb5e44b956b121</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ImageComponent</name>
    <filename>classImageComponent.html</filename>
    <base>Component</base>
    <base>SettableTooltipClient</base>
    <member kind="function">
      <type></type>
      <name>ImageComponent</name>
      <anchorfile>classImageComponent.html</anchorfile>
      <anchor>a9883292ed2a8968e5b6a6099084b4d39</anchor>
      <arglist>(const String &amp;componentName=String())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ImageComponent</name>
      <anchorfile>classImageComponent.html</anchorfile>
      <anchor>a80d6f915909d151df0c785b803f1aafa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setImage</name>
      <anchorfile>classImageComponent.html</anchorfile>
      <anchor>a262dd9eba5bb2626134fa9771eead654</anchor>
      <arglist>(const Image &amp;newImage)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setImage</name>
      <anchorfile>classImageComponent.html</anchorfile>
      <anchor>a4539437b3d91fee345dd1591c646d2e4</anchor>
      <arglist>(const Image &amp;newImage, RectanglePlacement placementToUse)</arglist>
    </member>
    <member kind="function">
      <type>const Image &amp;</type>
      <name>getImage</name>
      <anchorfile>classImageComponent.html</anchorfile>
      <anchor>a74e7161c2da4f7262717fb0aa5e5b3fa</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setImagePlacement</name>
      <anchorfile>classImageComponent.html</anchorfile>
      <anchor>a3ae8afb2d7fae2d7e0f8728e3be4cfd5</anchor>
      <arglist>(RectanglePlacement newPlacement)</arglist>
    </member>
    <member kind="function">
      <type>RectanglePlacement</type>
      <name>getImagePlacement</name>
      <anchorfile>classImageComponent.html</anchorfile>
      <anchor>a3c9db6cdf0cec2237efcb72455e30ec2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>paint</name>
      <anchorfile>classImageComponent.html</anchorfile>
      <anchor>abc860641ae65cc6486721d6d84b984d5</anchor>
      <arglist>(Graphics &amp;) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ImageConvolutionKernel</name>
    <filename>classImageConvolutionKernel.html</filename>
    <member kind="function">
      <type></type>
      <name>ImageConvolutionKernel</name>
      <anchorfile>classImageConvolutionKernel.html</anchorfile>
      <anchor>a291ce213057a0e0cad9559b349426b44</anchor>
      <arglist>(int size)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ImageConvolutionKernel</name>
      <anchorfile>classImageConvolutionKernel.html</anchorfile>
      <anchor>ae80e9785cc4cfa1458d6c4da4b40af58</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classImageConvolutionKernel.html</anchorfile>
      <anchor>ad9a4fd22ec090082e020872213193253</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getKernelValue</name>
      <anchorfile>classImageConvolutionKernel.html</anchorfile>
      <anchor>a98bbf0e40749584bc07038d17e9ee031</anchor>
      <arglist>(int x, int y) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setKernelValue</name>
      <anchorfile>classImageConvolutionKernel.html</anchorfile>
      <anchor>ad615fc9a3faa8f6d0bc8f83b20288711</anchor>
      <arglist>(int x, int y, float value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOverallSum</name>
      <anchorfile>classImageConvolutionKernel.html</anchorfile>
      <anchor>ac71dbeddeb4565e410f5fed1a8216902</anchor>
      <arglist>(float desiredTotalSum)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rescaleAllValues</name>
      <anchorfile>classImageConvolutionKernel.html</anchorfile>
      <anchor>adff3c9b24817bd16ffa56df9af129641</anchor>
      <arglist>(float multiplier)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>createGaussianBlur</name>
      <anchorfile>classImageConvolutionKernel.html</anchorfile>
      <anchor>a622a69a6e139de9ccc3bf8f15b841dfe</anchor>
      <arglist>(float blurRadius)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getKernelSize</name>
      <anchorfile>classImageConvolutionKernel.html</anchorfile>
      <anchor>a429c15723be0603d5d0cb0f3f242b148</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyToImage</name>
      <anchorfile>classImageConvolutionKernel.html</anchorfile>
      <anchor>af797442e1d75b9780ef4c992e39dceac</anchor>
      <arglist>(Image &amp;destImage, const Image &amp;sourceImage, const Rectangle&lt; int &gt; &amp;destinationArea) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ImageEffectFilter</name>
    <filename>classImageEffectFilter.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>applyEffect</name>
      <anchorfile>classImageEffectFilter.html</anchorfile>
      <anchor>afcdcb809146e0774b8d7ca24591771ad</anchor>
      <arglist>(Image &amp;sourceImage, Graphics &amp;destContext, float scaleFactor, float alpha)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ImageFileFormat</name>
    <filename>classImageFileFormat.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual String</type>
      <name>getFormatName</name>
      <anchorfile>classImageFileFormat.html</anchorfile>
      <anchor>a141e61162c688d5497e1b6391970fa7a</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>canUnderstand</name>
      <anchorfile>classImageFileFormat.html</anchorfile>
      <anchor>a5ff3f240860ae444a7eaafb708b563e2</anchor>
      <arglist>(InputStream &amp;input)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>usesFileExtension</name>
      <anchorfile>classImageFileFormat.html</anchorfile>
      <anchor>a9eb5f897a01aa14b136944eee2c7f684</anchor>
      <arglist>(const File &amp;possibleFile)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Image</type>
      <name>decodeImage</name>
      <anchorfile>classImageFileFormat.html</anchorfile>
      <anchor>a7ece13108d27014ff96e67ce80dd4092</anchor>
      <arglist>(InputStream &amp;input)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>writeImageToStream</name>
      <anchorfile>classImageFileFormat.html</anchorfile>
      <anchor>af70bdf60c3cea3a6806d225706670a63</anchor>
      <arglist>(const Image &amp;sourceImage, OutputStream &amp;destStream)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ImagePixelData</name>
    <filename>classImagePixelData.html</filename>
    <base>ReferenceCountedObject</base>
    <class kind="struct">ImagePixelData::Listener</class>
    <member kind="typedef">
      <type>ReferenceCountedObjectPtr&lt; ImagePixelData &gt;</type>
      <name>Ptr</name>
      <anchorfile>classImagePixelData.html</anchorfile>
      <anchor>a527acdc2f531f479fc535f1137f06ad0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ImagePixelData</name>
      <anchorfile>classImagePixelData.html</anchorfile>
      <anchor>a2146dc3531e1beea8138e36b883edb0d</anchor>
      <arglist>(Image::PixelFormat, int width, int height)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ImagePixelData</name>
      <anchorfile>classImagePixelData.html</anchorfile>
      <anchor>ac0118555ec7bade25b1873aeaf1f8e97</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual LowLevelGraphicsContext *</type>
      <name>createLowLevelContext</name>
      <anchorfile>classImagePixelData.html</anchorfile>
      <anchor>a7c445af05c23a94c1ea844ff1350bebc</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Ptr</type>
      <name>clone</name>
      <anchorfile>classImagePixelData.html</anchorfile>
      <anchor>a5f10581017cfd34a36e83216d263d4c7</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ImageType *</type>
      <name>createType</name>
      <anchorfile>classImagePixelData.html</anchorfile>
      <anchor>a4c9b23625405aad26d3b6a4682d39c50</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>initialiseBitmapData</name>
      <anchorfile>classImagePixelData.html</anchorfile>
      <anchor>a775f806a9a4b8cef306304ff81a1a47b</anchor>
      <arglist>(Image::BitmapData &amp;, int x, int y, Image::BitmapData::ReadWriteMode)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getSharedCount</name>
      <anchorfile>classImagePixelData.html</anchorfile>
      <anchor>aabbb06a344a464236dcb2670f48aecd7</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sendDataChangeMessage</name>
      <anchorfile>classImagePixelData.html</anchorfile>
      <anchor>ab5812081b0e7580eb22c2e6fcddf6b50</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>const Image::PixelFormat</type>
      <name>pixelFormat</name>
      <anchorfile>classImagePixelData.html</anchorfile>
      <anchor>a7af8920b587eebc3d94a0883375ca08f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>width</name>
      <anchorfile>classImagePixelData.html</anchorfile>
      <anchor>ac31ea8f068a17b9ee554261069b20a38</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>height</name>
      <anchorfile>classImagePixelData.html</anchorfile>
      <anchor>af792076cc5a5339766f1efb20592943c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>NamedValueSet</type>
      <name>userData</name>
      <anchorfile>classImagePixelData.html</anchorfile>
      <anchor>a881fd3f8939e4994ca95c052b27221ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ListenerList&lt; Listener &gt;</type>
      <name>listeners</name>
      <anchorfile>classImagePixelData.html</anchorfile>
      <anchor>ad5691cb6ebf342c88985e139e8891b85</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ImagePixelData::Listener</name>
    <filename>structImagePixelData_1_1Listener.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Listener</name>
      <anchorfile>structImagePixelData_1_1Listener.html</anchorfile>
      <anchor>aa99b1a7859fda334a52f4d2bb332a222</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>imageDataChanged</name>
      <anchorfile>structImagePixelData_1_1Listener.html</anchorfile>
      <anchor>ae2f693750b28bbd55af556fa99273297</anchor>
      <arglist>(ImagePixelData *)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>imageDataBeingDeleted</name>
      <anchorfile>structImagePixelData_1_1Listener.html</anchorfile>
      <anchor>a1c388112a4c5e9a0e31889ca4af6872f</anchor>
      <arglist>(ImagePixelData *)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ImagePreviewComponent</name>
    <filename>classImagePreviewComponent.html</filename>
    <base>FilePreviewComponent</base>
    <base protection="private">Timer</base>
    <member kind="function">
      <type></type>
      <name>ImagePreviewComponent</name>
      <anchorfile>classImagePreviewComponent.html</anchorfile>
      <anchor>aea25f0e8e764235c53ef1842294ba66e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ImagePreviewComponent</name>
      <anchorfile>classImagePreviewComponent.html</anchorfile>
      <anchor>a3ff657921827907d142d96b6539ca3d7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>selectedFileChanged</name>
      <anchorfile>classImagePreviewComponent.html</anchorfile>
      <anchor>abf2d15288a60b46083397245001fd2c3</anchor>
      <arglist>(const File &amp;newSelectedFile) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>paint</name>
      <anchorfile>classImagePreviewComponent.html</anchorfile>
      <anchor>aebfe92b48f052c5512f273fefc88060d</anchor>
      <arglist>(Graphics &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>timerCallback</name>
      <anchorfile>classImagePreviewComponent.html</anchorfile>
      <anchor>ad2a20bfff150cf417ded4f90eab0fe56</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ImageType</name>
    <filename>classImageType.html</filename>
    <member kind="function">
      <type></type>
      <name>ImageType</name>
      <anchorfile>classImageType.html</anchorfile>
      <anchor>acd073c0347c16656a21210f29563f3c8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ImageType</name>
      <anchorfile>classImageType.html</anchorfile>
      <anchor>a35b3b765a517eac3b617d014764cda35</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ImagePixelData::Ptr</type>
      <name>create</name>
      <anchorfile>classImageType.html</anchorfile>
      <anchor>a9ac22bf0c3a9e2e7ba54c2b4c15727bf</anchor>
      <arglist>(Image::PixelFormat, int width, int height, bool shouldClearImage) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getTypeID</name>
      <anchorfile>classImageType.html</anchorfile>
      <anchor>a7329724dfcd2de39b2ad45142dab632d</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Image</type>
      <name>convert</name>
      <anchorfile>classImageType.html</anchorfile>
      <anchor>a858baa050bbb2711ad15e53eecbcddc3</anchor>
      <arglist>(const Image &amp;source) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>InputSource</name>
    <filename>classInputSource.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual InputStream *</type>
      <name>createInputStream</name>
      <anchorfile>classInputSource.html</anchorfile>
      <anchor>a600038277a388345be98e0a71000cc47</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual InputStream *</type>
      <name>createInputStreamFor</name>
      <anchorfile>classInputSource.html</anchorfile>
      <anchor>a45470c84b437855c2cdefce6aae2fcfa</anchor>
      <arglist>(const String &amp;relatedItemPath)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int64</type>
      <name>hashCode</name>
      <anchorfile>classInputSource.html</anchorfile>
      <anchor>a1fe754d44724da8eaef055c496ca4140</anchor>
      <arglist>() const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>InputStream</name>
    <filename>classInputStream.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual int64</type>
      <name>getTotalLength</name>
      <anchorfile>classInputStream.html</anchorfile>
      <anchor>aebacb933570264e9697f6c984e348d01</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isExhausted</name>
      <anchorfile>classInputStream.html</anchorfile>
      <anchor>aabacc50cde9fcabe4752c796648fde49</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>read</name>
      <anchorfile>classInputStream.html</anchorfile>
      <anchor>aa5350c414bad6b97ae3b463a3401c0d6</anchor>
      <arglist>(void *destBuffer, int maxBytesToRead)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int64</type>
      <name>getPosition</name>
      <anchorfile>classInputStream.html</anchorfile>
      <anchor>abf909e2de145df97221ab4deb2824c5c</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>setPosition</name>
      <anchorfile>classInputStream.html</anchorfile>
      <anchor>ad7b4e8cec1e383657900e27bbcb3b06c</anchor>
      <arglist>(int64 newPosition)=0</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>IntegerWithBitSize</name>
    <filename>structIntegerWithBitSize.html</filename>
    <templarg>numBits</templarg>
    <member kind="enumvalue">
      <type>@</type>
      <name>bits</name>
      <anchorfile>structIntegerWithBitSize.html</anchorfile>
      <anchor>a99378c5403d6b4d6dde69e410681d436ac75ed2706ec532de316e420d3cfcf20c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>maxValue</name>
      <anchorfile>structIntegerWithBitSize.html</anchorfile>
      <anchor>a99378c5403d6b4d6dde69e410681d436a84dc35fa7acdf4c6d989d29fa2a0d3a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IntegerWithBitSize</name>
      <anchorfile>structIntegerWithBitSize.html</anchorfile>
      <anchor>a494e9fcf325c2a2e8b27aa68b0f1a2bf</anchor>
      <arglist>() noexcept=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IntegerWithBitSize</name>
      <anchorfile>structIntegerWithBitSize.html</anchorfile>
      <anchor>af9cfb826fb47987cecb4693c76b10de9</anchor>
      <arglist>(const IntegerWithBitSize &amp;) noexcept=default</arglist>
    </member>
    <member kind="function">
      <type>IntegerWithBitSize &amp;</type>
      <name>operator=</name>
      <anchorfile>structIntegerWithBitSize.html</anchorfile>
      <anchor>abe1da25ad7616f3251f6765be12f120b</anchor>
      <arglist>(const IntegerWithBitSize &amp;) noexcept=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IntegerWithBitSize</name>
      <anchorfile>structIntegerWithBitSize.html</anchorfile>
      <anchor>a94acbca428732bf5fb2935cfe4043171</anchor>
      <arglist>(uint32 v) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator uint32</name>
      <anchorfile>structIntegerWithBitSize.html</anchorfile>
      <anchor>a5004304450f704b7e9b3862aaecdae2c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>uint32</type>
      <name>get</name>
      <anchorfile>structIntegerWithBitSize.html</anchorfile>
      <anchor>a5acca6d541f72c50cd4f8f83fbed633f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>uint8</type>
      <name>getScaledToByte</name>
      <anchorfile>structIntegerWithBitSize.html</anchorfile>
      <anchor>ae5f8c8b73ecd335d0a8838486cdd6bdf</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>toUnipolarFloat</name>
      <anchorfile>structIntegerWithBitSize.html</anchorfile>
      <anchor>a4729b9abe1ce2ae6c43aa3b8a8af14b2</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>toBipolarFloat</name>
      <anchorfile>structIntegerWithBitSize.html</anchorfile>
      <anchor>a4a4bb97f730168d6c875b6e4dc14f859</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static IntegerWithBitSize</type>
      <name>fromUnipolarFloat</name>
      <anchorfile>structIntegerWithBitSize.html</anchorfile>
      <anchor>aa74cf64ced365b63c04b31f92c677e00</anchor>
      <arglist>(float value) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static IntegerWithBitSize</type>
      <name>fromBipolarFloat</name>
      <anchorfile>structIntegerWithBitSize.html</anchorfile>
      <anchor>a02905dd90e67d00a10f880951bac6eb4</anchor>
      <arglist>(float value) noexcept</arglist>
    </member>
    <member kind="variable">
      <type>uint32</type>
      <name>value</name>
      <anchorfile>structIntegerWithBitSize.html</anchorfile>
      <anchor>a454996946915e8f10bb6299061a52b66</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>InterprocessConnection</name>
    <filename>classInterprocessConnection.html</filename>
    <member kind="function">
      <type></type>
      <name>InterprocessConnection</name>
      <anchorfile>classInterprocessConnection.html</anchorfile>
      <anchor>a31dc05e077ee562d5ca96ecea09c3663</anchor>
      <arglist>(bool callbacksOnMessageThread=true, uint32 magicMessageHeaderNumber=0xf2b49e2c)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~InterprocessConnection</name>
      <anchorfile>classInterprocessConnection.html</anchorfile>
      <anchor>a04a6ad194ee3b4a4aaac4fcd531f2a6d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>connectToSocket</name>
      <anchorfile>classInterprocessConnection.html</anchorfile>
      <anchor>a007450a6ca6dc60bb48d384479d9a49d</anchor>
      <arglist>(const String &amp;hostName, int portNumber, int timeOutMillisecs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>connectToPipe</name>
      <anchorfile>classInterprocessConnection.html</anchorfile>
      <anchor>abafb2228ed136a2b34e2de03709eb9a7</anchor>
      <arglist>(const String &amp;pipeName, int pipeReceiveMessageTimeoutMs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>createPipe</name>
      <anchorfile>classInterprocessConnection.html</anchorfile>
      <anchor>a0e073a6609a68de2e4fcc892c1d003c0</anchor>
      <arglist>(const String &amp;pipeName, int pipeReceiveMessageTimeoutMs, bool mustNotExist=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>disconnect</name>
      <anchorfile>classInterprocessConnection.html</anchorfile>
      <anchor>a16959b067e088c75663fcff8633d600f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isConnected</name>
      <anchorfile>classInterprocessConnection.html</anchorfile>
      <anchor>a2c3d425edefb392a174f01a4e8e4c83a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>StreamingSocket *</type>
      <name>getSocket</name>
      <anchorfile>classInterprocessConnection.html</anchorfile>
      <anchor>a1bee6edc518378ac8c5639ae517535eb</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>NamedPipe *</type>
      <name>getPipe</name>
      <anchorfile>classInterprocessConnection.html</anchorfile>
      <anchor>abc220aa35a0b727979279f5557c0f2d1</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>getConnectedHostName</name>
      <anchorfile>classInterprocessConnection.html</anchorfile>
      <anchor>a5878989beffd3680d6d5b93fa8b61baa</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>sendMessage</name>
      <anchorfile>classInterprocessConnection.html</anchorfile>
      <anchor>a6fc9e7b55c25eac48baebd131ded9d4f</anchor>
      <arglist>(const MemoryBlock &amp;message)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>connectionMade</name>
      <anchorfile>classInterprocessConnection.html</anchorfile>
      <anchor>a6491a1c39849ecbdb6093965cfd47b03</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>connectionLost</name>
      <anchorfile>classInterprocessConnection.html</anchorfile>
      <anchor>a83bf2f27d14ea3a9c7e1a88e18e31351</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>messageReceived</name>
      <anchorfile>classInterprocessConnection.html</anchorfile>
      <anchor>a69549dd1bda0584d212940d3faf7457a</anchor>
      <arglist>(const MemoryBlock &amp;message)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>InterprocessConnectionServer</name>
    <filename>classInterprocessConnectionServer.html</filename>
    <base protection="private">Thread</base>
    <member kind="function">
      <type></type>
      <name>InterprocessConnectionServer</name>
      <anchorfile>classInterprocessConnectionServer.html</anchorfile>
      <anchor>af1449e1e8da7ad7a7a30a15e3edea59f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~InterprocessConnectionServer</name>
      <anchorfile>classInterprocessConnectionServer.html</anchorfile>
      <anchor>ac5a60a85820e4c6344a2225b81cf630d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>beginWaitingForSocket</name>
      <anchorfile>classInterprocessConnectionServer.html</anchorfile>
      <anchor>a2f4fb097909c5baeaf1646d88a54c695</anchor>
      <arglist>(int portNumber, const String &amp;bindAddress=String())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stop</name>
      <anchorfile>classInterprocessConnectionServer.html</anchorfile>
      <anchor>ac8a4c37b9e77848e48b499f441749324</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual InterprocessConnection *</type>
      <name>createConnectionObject</name>
      <anchorfile>classInterprocessConnectionServer.html</anchorfile>
      <anchor>af0f9bee85542b7adc149270ad779b415</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>InterProcessLock</name>
    <filename>classInterProcessLock.html</filename>
    <class kind="class">InterProcessLock::ScopedLockType</class>
    <member kind="function">
      <type></type>
      <name>InterProcessLock</name>
      <anchorfile>classInterProcessLock.html</anchorfile>
      <anchor>aa4bb20ad9b280ba608e570f8ece8351e</anchor>
      <arglist>(const String &amp;name)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~InterProcessLock</name>
      <anchorfile>classInterProcessLock.html</anchorfile>
      <anchor>a464f2a7c6a841b37534f1d1cbe5c1571</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>enter</name>
      <anchorfile>classInterProcessLock.html</anchorfile>
      <anchor>a00d7b9e49bf365eedc923f622e330179</anchor>
      <arglist>(int timeOutMillisecs=-1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>exit</name>
      <anchorfile>classInterProcessLock.html</anchorfile>
      <anchor>a3387e77951f1777be407cf76d2691bd0</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>InterProcessLock::ScopedLockType</name>
    <filename>classInterProcessLock_1_1ScopedLockType.html</filename>
    <member kind="function">
      <type></type>
      <name>ScopedLockType</name>
      <anchorfile>classInterProcessLock_1_1ScopedLockType.html</anchorfile>
      <anchor>a8ce60f7f55e0ca70f0e288e9000ed0c7</anchor>
      <arglist>(InterProcessLock &amp;l)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ScopedLockType</name>
      <anchorfile>classInterProcessLock_1_1ScopedLockType.html</anchorfile>
      <anchor>a2517d70321d5acabdfe5a96f11ef9c8f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isLocked</name>
      <anchorfile>classInterProcessLock_1_1ScopedLockType.html</anchorfile>
      <anchor>ab4c0eda7e9ab3196721f5707e36f4b4a</anchor>
      <arglist>() const noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IPAddress</name>
    <filename>classIPAddress.html</filename>
    <member kind="function">
      <type></type>
      <name>IPAddress</name>
      <anchorfile>classIPAddress.html</anchorfile>
      <anchor>acf18c22125de7729d909ada993e17635</anchor>
      <arglist>(bool IPv6=false) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IPAddress</name>
      <anchorfile>classIPAddress.html</anchorfile>
      <anchor>a2c9421007e1e61475e7f29e839230b4e</anchor>
      <arglist>(const uint8 bytes[], bool IPv6=false) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IPAddress</name>
      <anchorfile>classIPAddress.html</anchorfile>
      <anchor>aa4cb0b9e75cf4d8b795e71c366e25aef</anchor>
      <arglist>(const uint16 bytes[8]) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IPAddress</name>
      <anchorfile>classIPAddress.html</anchorfile>
      <anchor>ac61fbc4181689f99b34fdf24db4e8662</anchor>
      <arglist>(uint8 address1, uint8 address2, uint8 address3, uint8 address4) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IPAddress</name>
      <anchorfile>classIPAddress.html</anchorfile>
      <anchor>a16f75c483d702e4309219974a56028b5</anchor>
      <arglist>(uint16 address1, uint16 address2, uint16 address3, uint16 address4, uint16 address5, uint16 address6, uint16 address7, uint16 address8) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IPAddress</name>
      <anchorfile>classIPAddress.html</anchorfile>
      <anchor>a07673bc6d15ec31efd76f53fef2b0cbe</anchor>
      <arglist>(uint32 asNativeEndian32Bit) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IPAddress</name>
      <anchorfile>classIPAddress.html</anchorfile>
      <anchor>aa9e8ce01e8530d0f5fb53b6b8a433925</anchor>
      <arglist>(const String &amp;address)</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>toString</name>
      <anchorfile>classIPAddress.html</anchorfile>
      <anchor>aa3287fa0e563f2a8ee199e11913bc008</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classIPAddress.html</anchorfile>
      <anchor>a4289b6bb4f0ae08f2223128a726a4c5c</anchor>
      <arglist>(const IPAddress &amp;other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classIPAddress.html</anchorfile>
      <anchor>aa7fc6e8fccbada5ca523349534156467</anchor>
      <arglist>(const IPAddress &amp;other) const noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>findAllAddresses</name>
      <anchorfile>classIPAddress.html</anchorfile>
      <anchor>a1c887efc3893fdf2baaab7199578f217</anchor>
      <arglist>(Array&lt; IPAddress &gt; &amp;results, bool includeIPv6=false)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static IPAddress</type>
      <name>any</name>
      <anchorfile>classIPAddress.html</anchorfile>
      <anchor>a5b84e8520c49431dc06368c36ad100d3</anchor>
      <arglist>(bool IPv6=false) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static IPAddress</type>
      <name>broadcast</name>
      <anchorfile>classIPAddress.html</anchorfile>
      <anchor>aac219a18652ad5a4b39d76c401bcd0bc</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static IPAddress</type>
      <name>local</name>
      <anchorfile>classIPAddress.html</anchorfile>
      <anchor>ad66c4a32144c7dd4ccb8d21e10e19472</anchor>
      <arglist>(bool IPv6=false) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static String</type>
      <name>getFormattedAddress</name>
      <anchorfile>classIPAddress.html</anchorfile>
      <anchor>aa2fd467911c3e65627ee2d6b488cc8d7</anchor>
      <arglist>(const String &amp;unformattedAddress)</arglist>
    </member>
    <member kind="variable">
      <type>uint8</type>
      <name>address</name>
      <anchorfile>classIPAddress.html</anchorfile>
      <anchor>a2be5eab7b1b7d2e39d8d5367642f3004</anchor>
      <arglist>[16]</arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>isIPv6</name>
      <anchorfile>classIPAddress.html</anchorfile>
      <anchor>a06b9fe2fa973d89d0e91137fa7cc8f94</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>JavascriptEngine</name>
    <filename>classJavascriptEngine.html</filename>
    <member kind="function">
      <type></type>
      <name>JavascriptEngine</name>
      <anchorfile>classJavascriptEngine.html</anchorfile>
      <anchor>a4982557880163aadbad5337751057269</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~JavascriptEngine</name>
      <anchorfile>classJavascriptEngine.html</anchorfile>
      <anchor>af7b279a3ee909a2324804a73f16a6708</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Result</type>
      <name>execute</name>
      <anchorfile>classJavascriptEngine.html</anchorfile>
      <anchor>a0726c85d9bad8b676f9820a36135b203</anchor>
      <arglist>(const String &amp;javascriptCode)</arglist>
    </member>
    <member kind="function">
      <type>var</type>
      <name>evaluate</name>
      <anchorfile>classJavascriptEngine.html</anchorfile>
      <anchor>a0cf3bac2ba4e208b69b09777f84a3f8c</anchor>
      <arglist>(const String &amp;javascriptCode, Result *errorMessage=nullptr)</arglist>
    </member>
    <member kind="function">
      <type>var</type>
      <name>callFunction</name>
      <anchorfile>classJavascriptEngine.html</anchorfile>
      <anchor>a875997c4f7e2ac48977b04d707253851</anchor>
      <arglist>(const Identifier &amp;function, const var::NativeFunctionArgs &amp;args, Result *errorMessage=nullptr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>registerNativeObject</name>
      <anchorfile>classJavascriptEngine.html</anchorfile>
      <anchor>a0c9f43562e6e82084d5e92a714bfa5eb</anchor>
      <arglist>(const Identifier &amp;objectName, DynamicObject *object)</arglist>
    </member>
    <member kind="function">
      <type>const NamedValueSet &amp;</type>
      <name>getRootObjectProperties</name>
      <anchorfile>classJavascriptEngine.html</anchorfile>
      <anchor>abc067f3103d266c44d417cbac8380f56</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="variable">
      <type>RelativeTime</type>
      <name>maximumExecutionTime</name>
      <anchorfile>classJavascriptEngine.html</anchorfile>
      <anchor>a4a08635cda469509d851264f9fcf2c46</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>JPEGImageFormat</name>
    <filename>classJPEGImageFormat.html</filename>
    <base>ImageFileFormat</base>
    <member kind="function">
      <type></type>
      <name>JPEGImageFormat</name>
      <anchorfile>classJPEGImageFormat.html</anchorfile>
      <anchor>a3e000b303a2a2d90dca7be44ace102c3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~JPEGImageFormat</name>
      <anchorfile>classJPEGImageFormat.html</anchorfile>
      <anchor>a92189a737ac849a79b0950b42bf03142</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setQuality</name>
      <anchorfile>classJPEGImageFormat.html</anchorfile>
      <anchor>ad4388095c291a86f073d511ddfa8607e</anchor>
      <arglist>(float newQuality)</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>getFormatName</name>
      <anchorfile>classJPEGImageFormat.html</anchorfile>
      <anchor>a580438021f8ee14513a972e3b0e8acee</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>usesFileExtension</name>
      <anchorfile>classJPEGImageFormat.html</anchorfile>
      <anchor>af1222e40615be2b2b4a0aafa0c0f2e63</anchor>
      <arglist>(const File &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>canUnderstand</name>
      <anchorfile>classJPEGImageFormat.html</anchorfile>
      <anchor>a46d7cc60e66d9dbbd1f49e13fff643d8</anchor>
      <arglist>(InputStream &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>Image</type>
      <name>decodeImage</name>
      <anchorfile>classJPEGImageFormat.html</anchorfile>
      <anchor>a5e8ca3478c69a084e03ec544ce6dfd46</anchor>
      <arglist>(InputStream &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>writeImageToStream</name>
      <anchorfile>classJPEGImageFormat.html</anchorfile>
      <anchor>a6f21e23fcacb223986c35e6d30e78d1b</anchor>
      <arglist>(const Image &amp;, OutputStream &amp;) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>JSON</name>
    <filename>classJSON.html</filename>
    <member kind="function" static="yes">
      <type>static Result</type>
      <name>parse</name>
      <anchorfile>classJSON.html</anchorfile>
      <anchor>a04abe8e9f60ea6ef8d54151947cafdb4</anchor>
      <arglist>(const String &amp;text, var &amp;parsedResult)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static var</type>
      <name>parse</name>
      <anchorfile>classJSON.html</anchorfile>
      <anchor>a0ef8e7d4c113ec4d4a3ecbb11670d019</anchor>
      <arglist>(const String &amp;text)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static var</type>
      <name>parse</name>
      <anchorfile>classJSON.html</anchorfile>
      <anchor>aa8073c7491473c44b995de10b961f7b8</anchor>
      <arglist>(const File &amp;file)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static var</type>
      <name>parse</name>
      <anchorfile>classJSON.html</anchorfile>
      <anchor>ac4c2776e3251bccd24e2ead35235777b</anchor>
      <arglist>(InputStream &amp;input)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static String</type>
      <name>toString</name>
      <anchorfile>classJSON.html</anchorfile>
      <anchor>a2939ffbe0e0ee5a03eac1cd3f3d9a9d0</anchor>
      <arglist>(const var &amp;objectToFormat, bool allOnOneLine=false)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static var</type>
      <name>fromString</name>
      <anchorfile>classJSON.html</anchorfile>
      <anchor>ae810f0f1951773a387acfc63c8f04a39</anchor>
      <arglist>(StringRef)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>writeToStream</name>
      <anchorfile>classJSON.html</anchorfile>
      <anchor>a9614ceea2dcd1e6c9f3bba86e273d024</anchor>
      <arglist>(OutputStream &amp;output, const var &amp;objectToFormat, bool allOnOneLine=false)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static String</type>
      <name>escapeString</name>
      <anchorfile>classJSON.html</anchorfile>
      <anchor>ab2bcb2faacb867a91a841a6d8f137f2a</anchor>
      <arglist>(StringRef)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Result</type>
      <name>parseQuotedString</name>
      <anchorfile>classJSON.html</anchorfile>
      <anchor>ada4d75848bea4b8d988d670996d89ab1</anchor>
      <arglist>(String::CharPointerType &amp;text, var &amp;result)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>JUCEApplication</name>
    <filename>classJUCEApplication.html</filename>
    <base>JUCEApplicationBase</base>
    <base>ApplicationCommandTarget</base>
    <member kind="function">
      <type></type>
      <name>JUCEApplication</name>
      <anchorfile>classJUCEApplication.html</anchorfile>
      <anchor>a80e6dadf35b6954df90f2e11bb25ad8b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~JUCEApplication</name>
      <anchorfile>classJUCEApplication.html</anchorfile>
      <anchor>add71c71bdb57bd2cfdf159e50b8fd680</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const String</type>
      <name>getApplicationName</name>
      <anchorfile>classJUCEApplication.html</anchorfile>
      <anchor>a6d0ce92edbfcc864e69faeed9bde92bd</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const String</type>
      <name>getApplicationVersion</name>
      <anchorfile>classJUCEApplication.html</anchorfile>
      <anchor>a4d429c838740667370e1439bc0905471</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>moreThanOneInstanceAllowed</name>
      <anchorfile>classJUCEApplication.html</anchorfile>
      <anchor>ae7f9d8176003e18a1b6f4c30a63fdbf6</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>anotherInstanceStarted</name>
      <anchorfile>classJUCEApplication.html</anchorfile>
      <anchor>adf79c71599bd3848e3d676ed4d95424e</anchor>
      <arglist>(const String &amp;commandLine) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>systemRequestedQuit</name>
      <anchorfile>classJUCEApplication.html</anchorfile>
      <anchor>a8e9b08200268216a791326635ec9321c</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>suspended</name>
      <anchorfile>classJUCEApplication.html</anchorfile>
      <anchor>a6cadf3017be03ed3141f1b166599cb35</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resumed</name>
      <anchorfile>classJUCEApplication.html</anchorfile>
      <anchor>a292fcde28c3270c5d3afa84dba14feab</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unhandledException</name>
      <anchorfile>classJUCEApplication.html</anchorfile>
      <anchor>af7939b3650dbba8e9abcaa9600f107d6</anchor>
      <arglist>(const std::exception *e, const String &amp;sourceFilename, int lineNumber) override</arglist>
    </member>
    <member kind="function">
      <type>ApplicationCommandTarget *</type>
      <name>getNextCommandTarget</name>
      <anchorfile>classJUCEApplication.html</anchorfile>
      <anchor>ad1c117f0c85adf4cd41cbd3a629a0d80</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getCommandInfo</name>
      <anchorfile>classJUCEApplication.html</anchorfile>
      <anchor>ae3222d0245de1d1baf346addf9d00f2e</anchor>
      <arglist>(CommandID, ApplicationCommandInfo &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getAllCommands</name>
      <anchorfile>classJUCEApplication.html</anchorfile>
      <anchor>a72ea0c210591a07bee0bb47a1a3a0db2</anchor>
      <arglist>(Array&lt; CommandID &gt; &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>perform</name>
      <anchorfile>classJUCEApplication.html</anchorfile>
      <anchor>a039df30ba3fa0291a8d0c0cde1e80312</anchor>
      <arglist>(const InvocationInfo &amp;) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~JUCEApplicationBase</name>
      <anchorfile>classJUCEApplicationBase.html</anchorfile>
      <anchor>a98ba445960e64ae6314626cd14659bd5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>initialise</name>
      <anchorfile>classJUCEApplicationBase.html</anchorfile>
      <anchor>ad584bed05116674a1e68f60a1ac546f5</anchor>
      <arglist>(const String &amp;commandLineParameters)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>shutdown</name>
      <anchorfile>classJUCEApplicationBase.html</anchorfile>
      <anchor>a318021f86bf379caeb4cb27c32f0f229</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setApplicationReturnValue</name>
      <anchorfile>classJUCEApplicationBase.html</anchorfile>
      <anchor>aa8eff5c3954a4a4f09153cc10165a588</anchor>
      <arglist>(int newReturnValue) noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getApplicationReturnValue</name>
      <anchorfile>classJUCEApplicationBase.html</anchorfile>
      <anchor>a7f483c8b97ddec5a4dcdf7ae7b4b0088</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isInitialising</name>
      <anchorfile>classJUCEApplicationBase.html</anchorfile>
      <anchor>a50aeb95b30fa9f4859777ca5474dce09</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static JUCEApplication *JUCE_CALLTYPE</type>
      <name>getInstance</name>
      <anchorfile>classJUCEApplication.html</anchorfile>
      <anchor>ad15f6ff030ab610313c31aa8323383f8</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static JUCEApplicationBase *</type>
      <name>getInstance</name>
      <anchorfile>classJUCEApplicationBase.html</anchorfile>
      <anchor>a7beddd11441f0657d771d897ca864005</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>quit</name>
      <anchorfile>classJUCEApplicationBase.html</anchorfile>
      <anchor>a542e212605f0aa693f687d8798998615</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StringArray JUCE_CALLTYPE</type>
      <name>getCommandLineParameterArray</name>
      <anchorfile>classJUCEApplicationBase.html</anchorfile>
      <anchor>a61eedb3499aba883c3e4822a6c2c8973</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static String JUCE_CALLTYPE</type>
      <name>getCommandLineParameters</name>
      <anchorfile>classJUCEApplicationBase.html</anchorfile>
      <anchor>adee64be174cace396ba05ce3bbb6a280</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isStandaloneApp</name>
      <anchorfile>classJUCEApplicationBase.html</anchorfile>
      <anchor>ab37b7899d09c4bd2b6f38a3ae13dcb33</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>JUCEApplicationBase</name>
      <anchorfile>classJUCEApplicationBase.html</anchorfile>
      <anchor>a3b64c47474ca9bf96c4ad7c0ee8cb3f5</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>JUCEApplicationBase</name>
    <filename>classJUCEApplicationBase.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual const String</type>
      <name>getApplicationName</name>
      <anchorfile>classJUCEApplicationBase.html</anchorfile>
      <anchor>afa035ff6f164652542e7084f56f940fe</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const String</type>
      <name>getApplicationVersion</name>
      <anchorfile>classJUCEApplicationBase.html</anchorfile>
      <anchor>a364c4e6df0c1b21f38a95be61589978c</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>moreThanOneInstanceAllowed</name>
      <anchorfile>classJUCEApplicationBase.html</anchorfile>
      <anchor>a8b0b428b93e6972f3efae78bdda0fac6</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>anotherInstanceStarted</name>
      <anchorfile>classJUCEApplicationBase.html</anchorfile>
      <anchor>a77dc328a5400d0866b03a96684c0d9c4</anchor>
      <arglist>(const String &amp;commandLine)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>systemRequestedQuit</name>
      <anchorfile>classJUCEApplicationBase.html</anchorfile>
      <anchor>aa4ae0dcc3467f4927d8365b4814b1396</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>suspended</name>
      <anchorfile>classJUCEApplicationBase.html</anchorfile>
      <anchor>ac641cfe5fd77b0f7ffb7b21e0d30f114</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>resumed</name>
      <anchorfile>classJUCEApplicationBase.html</anchorfile>
      <anchor>a3d6b5a8c46caa068a61fa775df38d014</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>unhandledException</name>
      <anchorfile>classJUCEApplicationBase.html</anchorfile>
      <anchor>adb182f77016ee90f8d5443abcb0bb3f0</anchor>
      <arglist>(const std::exception *, const String &amp;sourceFilename, int lineNumber)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Justification</name>
    <filename>classJustification.html</filename>
    <member kind="enumeration">
      <type></type>
      <name>Flags</name>
      <anchorfile>classJustification.html</anchorfile>
      <anchor>a1f8c07756c56fe8f31ed44964e51bfbc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>left</name>
      <anchorfile>classJustification.html</anchorfile>
      <anchor>a1f8c07756c56fe8f31ed44964e51bfbca56156bb2892e32febf8011af9c5da653</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>right</name>
      <anchorfile>classJustification.html</anchorfile>
      <anchor>a1f8c07756c56fe8f31ed44964e51bfbca92d0fe0a466b35d67e1b7b91f971d7bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>horizontallyCentred</name>
      <anchorfile>classJustification.html</anchorfile>
      <anchor>a1f8c07756c56fe8f31ed44964e51bfbcac9fd148cf8547fab0e3aeee306223ab2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>top</name>
      <anchorfile>classJustification.html</anchorfile>
      <anchor>a1f8c07756c56fe8f31ed44964e51bfbcaba34337f0f6a8cfcaf472a72f6d46649</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>bottom</name>
      <anchorfile>classJustification.html</anchorfile>
      <anchor>a1f8c07756c56fe8f31ed44964e51bfbcac77cede28d3cecdc46227f503446207b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>verticallyCentred</name>
      <anchorfile>classJustification.html</anchorfile>
      <anchor>a1f8c07756c56fe8f31ed44964e51bfbca8a4ec09c32a9a1111e72ec7a9b6f9411</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>horizontallyJustified</name>
      <anchorfile>classJustification.html</anchorfile>
      <anchor>a1f8c07756c56fe8f31ed44964e51bfbca0881c08fa2d58e9d6f36ab8bbea4b800</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>centred</name>
      <anchorfile>classJustification.html</anchorfile>
      <anchor>a1f8c07756c56fe8f31ed44964e51bfbcaf9d9adde20dce1aa38ff9a69be2b4384</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>centredLeft</name>
      <anchorfile>classJustification.html</anchorfile>
      <anchor>a1f8c07756c56fe8f31ed44964e51bfbca66eba21caedb3d6bfbeff74c610628b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>centredRight</name>
      <anchorfile>classJustification.html</anchorfile>
      <anchor>a1f8c07756c56fe8f31ed44964e51bfbcaea1dc507ac46f0c7417666ba14d9ad5e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>centredTop</name>
      <anchorfile>classJustification.html</anchorfile>
      <anchor>a1f8c07756c56fe8f31ed44964e51bfbca3a44a2451bf933ef23b99d19c53db3a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>centredBottom</name>
      <anchorfile>classJustification.html</anchorfile>
      <anchor>a1f8c07756c56fe8f31ed44964e51bfbca392a10b2805345384ac0589b1261cea9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>topLeft</name>
      <anchorfile>classJustification.html</anchorfile>
      <anchor>a1f8c07756c56fe8f31ed44964e51bfbcaf2d7cc575db9d4d9a1305407625b7afd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>topRight</name>
      <anchorfile>classJustification.html</anchorfile>
      <anchor>a1f8c07756c56fe8f31ed44964e51bfbca36ad3c72f605613650333cc78d1e0b44</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>bottomLeft</name>
      <anchorfile>classJustification.html</anchorfile>
      <anchor>a1f8c07756c56fe8f31ed44964e51bfbca3597930eb27b2d7aed0a929816a10ec0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>bottomRight</name>
      <anchorfile>classJustification.html</anchorfile>
      <anchor>a1f8c07756c56fe8f31ed44964e51bfbca397027445c8ee878b4f4871f10ba58d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Justification</name>
      <anchorfile>classJustification.html</anchorfile>
      <anchor>a98e01ea7f8af9ea1cbf27bf8c8139b76</anchor>
      <arglist>(int justificationFlags) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Justification</name>
      <anchorfile>classJustification.html</anchorfile>
      <anchor>a04002a24d0dea5eb7b893e364a12d0e7</anchor>
      <arglist>(const Justification &amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Justification &amp;</type>
      <name>operator=</name>
      <anchorfile>classJustification.html</anchorfile>
      <anchor>a747e830f3478823948d1f5f109ade4f9</anchor>
      <arglist>(const Justification &amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classJustification.html</anchorfile>
      <anchor>a975c2fdf40e8243fac17861e179240ed</anchor>
      <arglist>(const Justification &amp;other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classJustification.html</anchorfile>
      <anchor>adcdcb4a8ca5ea6da52244114256eea6f</anchor>
      <arglist>(const Justification &amp;other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getFlags</name>
      <anchorfile>classJustification.html</anchorfile>
      <anchor>aa34a4685b36f9cbc012c7682d1688fd4</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>testFlags</name>
      <anchorfile>classJustification.html</anchorfile>
      <anchor>afdcebb7ecc5434a82f7e282d9f17c39f</anchor>
      <arglist>(int flagsToTest) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getOnlyVerticalFlags</name>
      <anchorfile>classJustification.html</anchorfile>
      <anchor>ab92d64608943bf4ddfc71c456f2af147</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getOnlyHorizontalFlags</name>
      <anchorfile>classJustification.html</anchorfile>
      <anchor>a8318bc37f42d5296c334770fd9edd4e3</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyToRectangle</name>
      <anchorfile>classJustification.html</anchorfile>
      <anchor>a2ec608d8a7cf43d431ae2eb8c0e21597</anchor>
      <arglist>(ValueType &amp;x, ValueType &amp;y, ValueType w, ValueType h, ValueType spaceX, ValueType spaceY, ValueType spaceW, ValueType spaceH) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const Rectangle&lt; ValueType &gt;</type>
      <name>appliedToRectangle</name>
      <anchorfile>classJustification.html</anchorfile>
      <anchor>a11cb23fcc90a17ef4f5ac888e44d5bf6</anchor>
      <arglist>(const Rectangle&lt; ValueType &gt; &amp;areaToAdjust, const Rectangle&lt; ValueType &gt; &amp;targetSpace) const noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>KeyboardFocusTraverser</name>
    <filename>classKeyboardFocusTraverser.html</filename>
    <member kind="function">
      <type></type>
      <name>KeyboardFocusTraverser</name>
      <anchorfile>classKeyboardFocusTraverser.html</anchorfile>
      <anchor>a275c834346e37c782d74f08365f1a06f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~KeyboardFocusTraverser</name>
      <anchorfile>classKeyboardFocusTraverser.html</anchorfile>
      <anchor>ac8dafe9d30ce2fbc9fb3163d1d16b2e7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Component *</type>
      <name>getNextComponent</name>
      <anchorfile>classKeyboardFocusTraverser.html</anchorfile>
      <anchor>a7e353323ae96807e5f9cc903e49ca839</anchor>
      <arglist>(Component *current)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Component *</type>
      <name>getPreviousComponent</name>
      <anchorfile>classKeyboardFocusTraverser.html</anchorfile>
      <anchor>ab452631402fb9031651434f2e94b252c</anchor>
      <arglist>(Component *current)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Component *</type>
      <name>getDefaultComponent</name>
      <anchorfile>classKeyboardFocusTraverser.html</anchorfile>
      <anchor>a2c21be5bdf95b97b501e595955c7d75b</anchor>
      <arglist>(Component *parentComponent)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>KeyGeneration</name>
    <filename>classKeyGeneration.html</filename>
    <member kind="function" static="yes">
      <type>static String JUCE_CALLTYPE</type>
      <name>generateKeyFile</name>
      <anchorfile>classKeyGeneration.html</anchorfile>
      <anchor>a8554134a97627178203b3f288c90eee0</anchor>
      <arglist>(const String &amp;appName, const String &amp;userEmail, const String &amp;userName, const String &amp;machineNumbers, const RSAKey &amp;privateKey)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static String JUCE_CALLTYPE</type>
      <name>generateExpiringKeyFile</name>
      <anchorfile>classKeyGeneration.html</anchorfile>
      <anchor>a5652ee792c95a217a4394ce13fbf93e2</anchor>
      <arglist>(const String &amp;appName, const String &amp;userEmail, const String &amp;userName, const String &amp;machineNumbers, const Time expiryTime, const RSAKey &amp;privateKey)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>keyGenerationAppMain</name>
      <anchorfile>classKeyGeneration.html</anchorfile>
      <anchor>a608c4ffe01796eba24a5ab563b5d488e</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>KeyListener</name>
    <filename>classKeyListener.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~KeyListener</name>
      <anchorfile>classKeyListener.html</anchorfile>
      <anchor>a3b63a69dab82d70acb71939a4c05b869</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>keyPressed</name>
      <anchorfile>classKeyListener.html</anchorfile>
      <anchor>ae69d788cbada2ae5069a9e725db0baf7</anchor>
      <arglist>(const KeyPress &amp;key, Component *originatingComponent)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>keyStateChanged</name>
      <anchorfile>classKeyListener.html</anchorfile>
      <anchor>aa3efa1c9c4ebfb754c9d68180a40b6c7</anchor>
      <arglist>(bool isKeyDown, Component *originatingComponent)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>KeyMappingEditorComponent</name>
    <filename>classKeyMappingEditorComponent.html</filename>
    <base>Component</base>
    <member kind="enumeration">
      <type></type>
      <name>ColourIds</name>
      <anchorfile>classKeyMappingEditorComponent.html</anchorfile>
      <anchor>a5621ed52a0934c85301ded0696798a42</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>backgroundColourId</name>
      <anchorfile>classKeyMappingEditorComponent.html</anchorfile>
      <anchor>a5621ed52a0934c85301ded0696798a42a41dc42d5069bfbae08a65ae57066f836</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>textColourId</name>
      <anchorfile>classKeyMappingEditorComponent.html</anchorfile>
      <anchor>a5621ed52a0934c85301ded0696798a42a83eb0e6141d7afb10f1392784575d617</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>KeyMappingEditorComponent</name>
      <anchorfile>classKeyMappingEditorComponent.html</anchorfile>
      <anchor>ad82af2e52efb94bd1f48aba770e068fb</anchor>
      <arglist>(KeyPressMappingSet &amp;mappingSet, bool showResetToDefaultButton)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~KeyMappingEditorComponent</name>
      <anchorfile>classKeyMappingEditorComponent.html</anchorfile>
      <anchor>a30b6340e01c937cdfa5e9732bdfb8ecd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setColours</name>
      <anchorfile>classKeyMappingEditorComponent.html</anchorfile>
      <anchor>aaa8e66282bf7d9567b677d7b4e2e2347</anchor>
      <arglist>(Colour mainBackground, Colour textColour)</arglist>
    </member>
    <member kind="function">
      <type>KeyPressMappingSet &amp;</type>
      <name>getMappings</name>
      <anchorfile>classKeyMappingEditorComponent.html</anchorfile>
      <anchor>a07e566d197bbb1d14296fbb7a755674a</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>ApplicationCommandManager &amp;</type>
      <name>getCommandManager</name>
      <anchorfile>classKeyMappingEditorComponent.html</anchorfile>
      <anchor>a292897de17b50fe7b10df202705a4914</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>shouldCommandBeIncluded</name>
      <anchorfile>classKeyMappingEditorComponent.html</anchorfile>
      <anchor>abb52cedae53b4d9b12d7f084b688cbed</anchor>
      <arglist>(CommandID commandID)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isCommandReadOnly</name>
      <anchorfile>classKeyMappingEditorComponent.html</anchorfile>
      <anchor>aa62cc07cddf842c855c577fbd118958c</anchor>
      <arglist>(CommandID commandID)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual String</type>
      <name>getDescriptionForKeyPress</name>
      <anchorfile>classKeyMappingEditorComponent.html</anchorfile>
      <anchor>a9b7f50c2171670f5d5908a48e5ebbcfb</anchor>
      <arglist>(const KeyPress &amp;key)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>parentHierarchyChanged</name>
      <anchorfile>classKeyMappingEditorComponent.html</anchorfile>
      <anchor>a213bd76375d21b35f5b012502bea9ada</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resized</name>
      <anchorfile>classKeyMappingEditorComponent.html</anchorfile>
      <anchor>a5a53bfe81621c258183660f6e748619d</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>KeyPress</name>
    <filename>classKeyPress.html</filename>
    <member kind="function">
      <type></type>
      <name>KeyPress</name>
      <anchorfile>classKeyPress.html</anchorfile>
      <anchor>a7d40630120c945017e8e3fbc30bb3499</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>KeyPress</name>
      <anchorfile>classKeyPress.html</anchorfile>
      <anchor>a6a8910ee5ba637b23af8550eac1c301a</anchor>
      <arglist>(int keyCode, ModifierKeys modifiers, juce_wchar textCharacter) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>KeyPress</name>
      <anchorfile>classKeyPress.html</anchorfile>
      <anchor>aee4f777a405880b975b96dc7738c151d</anchor>
      <arglist>(int keyCode) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>KeyPress</name>
      <anchorfile>classKeyPress.html</anchorfile>
      <anchor>a748bef397e6bc4ba452a98dd67d43f97</anchor>
      <arglist>(const KeyPress &amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>KeyPress &amp;</type>
      <name>operator=</name>
      <anchorfile>classKeyPress.html</anchorfile>
      <anchor>a6257c6ee69898f561ccd4e2af8c66e8d</anchor>
      <arglist>(const KeyPress &amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classKeyPress.html</anchorfile>
      <anchor>af0f5939d677fd996b3d25f9a8fb50643</anchor>
      <arglist>(const KeyPress &amp;other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classKeyPress.html</anchorfile>
      <anchor>afb86f08e6db034fbd3f143ffa31e4777</anchor>
      <arglist>(const KeyPress &amp;other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classKeyPress.html</anchorfile>
      <anchor>a9957d43aaa85003e6e0da06cdf874582</anchor>
      <arglist>(int keyCode) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classKeyPress.html</anchorfile>
      <anchor>aff3aa01ed93293ecbc3b13ca910532fe</anchor>
      <arglist>(int keyCode) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>classKeyPress.html</anchorfile>
      <anchor>ab4f51e1cc6e423380fa7e77f105eef0c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getKeyCode</name>
      <anchorfile>classKeyPress.html</anchorfile>
      <anchor>a4cfa514c624628995ce687dcdc6518fe</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>ModifierKeys</type>
      <name>getModifiers</name>
      <anchorfile>classKeyPress.html</anchorfile>
      <anchor>a1bc9306994b77cccb0055618ce8d355c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>juce_wchar</type>
      <name>getTextCharacter</name>
      <anchorfile>classKeyPress.html</anchorfile>
      <anchor>acc9672e1abfbb01f150b3282775c71fd</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isKeyCode</name>
      <anchorfile>classKeyPress.html</anchorfile>
      <anchor>ac443b8024725e24f0da796cbac8d7fff</anchor>
      <arglist>(int keyCodeToCompare) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>getTextDescription</name>
      <anchorfile>classKeyPress.html</anchorfile>
      <anchor>a551a1ee0911f6d73d176848f8cbfd3a8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>getTextDescriptionWithIcons</name>
      <anchorfile>classKeyPress.html</anchorfile>
      <anchor>a4ff9a0b14d9dbf35f1146f801ec8679f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isCurrentlyDown</name>
      <anchorfile>classKeyPress.html</anchorfile>
      <anchor>abbe7f5207ac72fbda3be3ac287c16a88</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static KeyPress</type>
      <name>createFromDescription</name>
      <anchorfile>classKeyPress.html</anchorfile>
      <anchor>a9370e54ba688baf761a8ec78a3a61269</anchor>
      <arglist>(const String &amp;textVersion)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isKeyCurrentlyDown</name>
      <anchorfile>classKeyPress.html</anchorfile>
      <anchor>a94c2aecc867e4dba1382c31c377523d2</anchor>
      <arglist>(int keyCode)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>spaceKey</name>
      <anchorfile>classKeyPress.html</anchorfile>
      <anchor>a60f802af5aff465d7ff910009608e343</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>escapeKey</name>
      <anchorfile>classKeyPress.html</anchorfile>
      <anchor>a565ec13ad662d05392b609fad31b8f01</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>returnKey</name>
      <anchorfile>classKeyPress.html</anchorfile>
      <anchor>a1cfe46412c3af08250ddc14bfaef1205</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>tabKey</name>
      <anchorfile>classKeyPress.html</anchorfile>
      <anchor>a2a3d96e0f2602106a3855a34a2e1dbb8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>deleteKey</name>
      <anchorfile>classKeyPress.html</anchorfile>
      <anchor>ae568c9aba033acf0c24390f24304b9e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>backspaceKey</name>
      <anchorfile>classKeyPress.html</anchorfile>
      <anchor>a035471d297e6f91fc8e86d91539da361</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>insertKey</name>
      <anchorfile>classKeyPress.html</anchorfile>
      <anchor>af62c3ffd333fc440eca6596b56df48b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>upKey</name>
      <anchorfile>classKeyPress.html</anchorfile>
      <anchor>a97fcf796ea92d9ff3818ee17cdbafa80</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>downKey</name>
      <anchorfile>classKeyPress.html</anchorfile>
      <anchor>aeb9a20dd50b39f66d7d778d31b6b5f88</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>leftKey</name>
      <anchorfile>classKeyPress.html</anchorfile>
      <anchor>ad2961244072158eee77e11844a968f61</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>rightKey</name>
      <anchorfile>classKeyPress.html</anchorfile>
      <anchor>aff89b4c5876819968ff83a6c6ee15416</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>pageUpKey</name>
      <anchorfile>classKeyPress.html</anchorfile>
      <anchor>aed878a6382f57cca1617d923b236ea1c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>pageDownKey</name>
      <anchorfile>classKeyPress.html</anchorfile>
      <anchor>ac30e9e5628a043cfac1c601540b1ef01</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>homeKey</name>
      <anchorfile>classKeyPress.html</anchorfile>
      <anchor>ae811d47e771f147a949d1bb818d9c9bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>endKey</name>
      <anchorfile>classKeyPress.html</anchorfile>
      <anchor>a54ced410db4096610651498e85e63b1e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>F1Key</name>
      <anchorfile>classKeyPress.html</anchorfile>
      <anchor>a4718eab842ed4cfef54b2538941fd7cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>F2Key</name>
      <anchorfile>classKeyPress.html</anchorfile>
      <anchor>a68ef806408eb7ad6a13923d8244771f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>F3Key</name>
      <anchorfile>classKeyPress.html</anchorfile>
      <anchor>ad8eef2e261d82cfb2957fd6b6b27e421</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>F4Key</name>
      <anchorfile>classKeyPress.html</anchorfile>
      <anchor>a962505a345c199485480f3a87e33968e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>F5Key</name>
      <anchorfile>classKeyPress.html</anchorfile>
      <anchor>a41256ebbfdcd285a06baab285bb24f8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>F6Key</name>
      <anchorfile>classKeyPress.html</anchorfile>
      <anchor>a6fc8b94cc4fc53cd0dd8a60ab1275e30</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>F7Key</name>
      <anchorfile>classKeyPress.html</anchorfile>
      <anchor>a1600c88c7f1d109d1c098b89ed399eb7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>F8Key</name>
      <anchorfile>classKeyPress.html</anchorfile>
      <anchor>a33c505fcea9f343a0682ea8b9ac38361</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>F9Key</name>
      <anchorfile>classKeyPress.html</anchorfile>
      <anchor>ab2826f73bf6f9851a03908984e9ef85a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>F10Key</name>
      <anchorfile>classKeyPress.html</anchorfile>
      <anchor>acc93115bcbc62c2d6f6410bd953048b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>F11Key</name>
      <anchorfile>classKeyPress.html</anchorfile>
      <anchor>aba680314581f58ae805b8ca6db4cd7e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>F12Key</name>
      <anchorfile>classKeyPress.html</anchorfile>
      <anchor>a8d2b24133ac5f7be8968dc6f76ad290d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>F13Key</name>
      <anchorfile>classKeyPress.html</anchorfile>
      <anchor>aae831dec3e60af238a7691365fbca521</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>F14Key</name>
      <anchorfile>classKeyPress.html</anchorfile>
      <anchor>af81fbf2d5a9848bfae5344cf9daa01ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>F15Key</name>
      <anchorfile>classKeyPress.html</anchorfile>
      <anchor>af08f015ab55e816151f061946a86922f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>F16Key</name>
      <anchorfile>classKeyPress.html</anchorfile>
      <anchor>ab22e575b32683a1dc7b8ca3c578dc402</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>numberPad0</name>
      <anchorfile>classKeyPress.html</anchorfile>
      <anchor>a4a44bab251df2712330effd9358968b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>numberPad1</name>
      <anchorfile>classKeyPress.html</anchorfile>
      <anchor>af8c69449943e82aac0a728d2ba4dd016</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>numberPad2</name>
      <anchorfile>classKeyPress.html</anchorfile>
      <anchor>a25a781888b24650884cb41a70a2f1b59</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>numberPad3</name>
      <anchorfile>classKeyPress.html</anchorfile>
      <anchor>aa020cb0e8d6661d2d38476c96524b542</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>numberPad4</name>
      <anchorfile>classKeyPress.html</anchorfile>
      <anchor>ae49578eec3c953038ec269380fddc032</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>numberPad5</name>
      <anchorfile>classKeyPress.html</anchorfile>
      <anchor>af5ff94b47c44d1e41e80dc581a872a19</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>numberPad6</name>
      <anchorfile>classKeyPress.html</anchorfile>
      <anchor>a5d362149cc5a341c24b74644d0812f30</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>numberPad7</name>
      <anchorfile>classKeyPress.html</anchorfile>
      <anchor>a8b9053c4da94ae7a5d8f7d171adb6853</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>numberPad8</name>
      <anchorfile>classKeyPress.html</anchorfile>
      <anchor>af941a0797b78b1429f20497d4c16b4bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>numberPad9</name>
      <anchorfile>classKeyPress.html</anchorfile>
      <anchor>af5c16e7d95c0cc6b5e0739c2021b7f72</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>numberPadAdd</name>
      <anchorfile>classKeyPress.html</anchorfile>
      <anchor>a070c217aebfc2af7c511a12623db59e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>numberPadSubtract</name>
      <anchorfile>classKeyPress.html</anchorfile>
      <anchor>a3587df27be497fb3d805dc6ac8eadc5b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>numberPadMultiply</name>
      <anchorfile>classKeyPress.html</anchorfile>
      <anchor>aec3e249cbc1b42e0917131c64c5a3042</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>numberPadDivide</name>
      <anchorfile>classKeyPress.html</anchorfile>
      <anchor>a3261a5f6e1231d0dc55294c38ae67108</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>numberPadSeparator</name>
      <anchorfile>classKeyPress.html</anchorfile>
      <anchor>a53df5e582959f3ae2e3c75f383f251e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>numberPadDecimalPoint</name>
      <anchorfile>classKeyPress.html</anchorfile>
      <anchor>a599c6a65c651b40c667d369e58a31d0e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>numberPadEquals</name>
      <anchorfile>classKeyPress.html</anchorfile>
      <anchor>ac52dd54c9ba617eb2075d0769238d9ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>numberPadDelete</name>
      <anchorfile>classKeyPress.html</anchorfile>
      <anchor>a98053d001402ac0a14ba101f9fd98615</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>playKey</name>
      <anchorfile>classKeyPress.html</anchorfile>
      <anchor>a08e1a3281e1a772f1e6227f70d117622</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>stopKey</name>
      <anchorfile>classKeyPress.html</anchorfile>
      <anchor>a4ebc694e95335f25418c99eb2235d815</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>fastForwardKey</name>
      <anchorfile>classKeyPress.html</anchorfile>
      <anchor>a5818ad479163ff4ee7d191b5c125a5ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>rewindKey</name>
      <anchorfile>classKeyPress.html</anchorfile>
      <anchor>a135d25e32e2493d0e58a61ae3e476121</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>KeyPressMappingSet</name>
    <filename>classKeyPressMappingSet.html</filename>
    <base>KeyListener</base>
    <base>ChangeBroadcaster</base>
    <base protection="private">FocusChangeListener</base>
    <member kind="function">
      <type></type>
      <name>KeyPressMappingSet</name>
      <anchorfile>classKeyPressMappingSet.html</anchorfile>
      <anchor>a809a42cae8d2bfaf754c369f01a03870</anchor>
      <arglist>(ApplicationCommandManager &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>KeyPressMappingSet</name>
      <anchorfile>classKeyPressMappingSet.html</anchorfile>
      <anchor>af094b874c041df2b6ba52855573e2437</anchor>
      <arglist>(const KeyPressMappingSet &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~KeyPressMappingSet</name>
      <anchorfile>classKeyPressMappingSet.html</anchorfile>
      <anchor>adae95f518172adb938d30d38cf361743</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ApplicationCommandManager &amp;</type>
      <name>getCommandManager</name>
      <anchorfile>classKeyPressMappingSet.html</anchorfile>
      <anchor>ad8c3bf18eddf7d637934cf1c4e271791</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Array&lt; KeyPress &gt;</type>
      <name>getKeyPressesAssignedToCommand</name>
      <anchorfile>classKeyPressMappingSet.html</anchorfile>
      <anchor>abbe0438da9067d9ebc5a0406ccea3c98</anchor>
      <arglist>(CommandID commandID) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addKeyPress</name>
      <anchorfile>classKeyPressMappingSet.html</anchorfile>
      <anchor>ac2adbad788cddf223990617e00fbd7f1</anchor>
      <arglist>(CommandID commandID, const KeyPress &amp;newKeyPress, int insertIndex=-1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetToDefaultMappings</name>
      <anchorfile>classKeyPressMappingSet.html</anchorfile>
      <anchor>a11ec4b86290489da987e2fcc3455b140</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetToDefaultMapping</name>
      <anchorfile>classKeyPressMappingSet.html</anchorfile>
      <anchor>a60fb5f6f71f8d4b9ef04627c625fb5b5</anchor>
      <arglist>(CommandID commandID)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearAllKeyPresses</name>
      <anchorfile>classKeyPressMappingSet.html</anchorfile>
      <anchor>a16e2d91480adcd22ee5dbfdce01c0156</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearAllKeyPresses</name>
      <anchorfile>classKeyPressMappingSet.html</anchorfile>
      <anchor>a9f3803440dd3d36fd79680c8dc2cc779</anchor>
      <arglist>(CommandID commandID)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeKeyPress</name>
      <anchorfile>classKeyPressMappingSet.html</anchorfile>
      <anchor>a69386f2e687ced9630b24a745b6fa33a</anchor>
      <arglist>(CommandID commandID, int keyPressIndex)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeKeyPress</name>
      <anchorfile>classKeyPressMappingSet.html</anchorfile>
      <anchor>a0626523ca6a55cc5948531f0382e2ad8</anchor>
      <arglist>(const KeyPress &amp;keypress)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>containsMapping</name>
      <anchorfile>classKeyPressMappingSet.html</anchorfile>
      <anchor>a452b1dd8851dd760fb52f97637f387a5</anchor>
      <arglist>(CommandID commandID, const KeyPress &amp;keyPress) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>CommandID</type>
      <name>findCommandForKeyPress</name>
      <anchorfile>classKeyPressMappingSet.html</anchorfile>
      <anchor>a748d3657cb192844b1ff7cfa1044231d</anchor>
      <arglist>(const KeyPress &amp;keyPress) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>restoreFromXml</name>
      <anchorfile>classKeyPressMappingSet.html</anchorfile>
      <anchor>acd0da647bbd350e6daebcd8705a8b11e</anchor>
      <arglist>(const XmlElement &amp;xmlVersion)</arglist>
    </member>
    <member kind="function">
      <type>XmlElement *</type>
      <name>createXml</name>
      <anchorfile>classKeyPressMappingSet.html</anchorfile>
      <anchor>ab1f065bf0a2035046b35d84080a7c42d</anchor>
      <arglist>(bool saveDifferencesFromDefaultSet) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>keyPressed</name>
      <anchorfile>classKeyPressMappingSet.html</anchorfile>
      <anchor>ab92a471a8cfc20ad036750cd3c19d5c5</anchor>
      <arglist>(const KeyPress &amp;, Component *) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>keyStateChanged</name>
      <anchorfile>classKeyPressMappingSet.html</anchorfile>
      <anchor>a0329856dd3e6ec50d64114f197045491</anchor>
      <arglist>(bool isKeyDown, Component *) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>globalFocusChanged</name>
      <anchorfile>classKeyPressMappingSet.html</anchorfile>
      <anchor>a9a87b7a4ae2b7365723e47e29cf48500</anchor>
      <arglist>(Component *) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>KnownPluginList</name>
    <filename>classKnownPluginList.html</filename>
    <base>ChangeBroadcaster</base>
    <class kind="class">KnownPluginList::CustomScanner</class>
    <class kind="struct">KnownPluginList::PluginTree</class>
    <member kind="enumeration">
      <type></type>
      <name>SortMethod</name>
      <anchorfile>classKnownPluginList.html</anchorfile>
      <anchor>a6beabfccc86796527f663f30f3514098</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>defaultOrder</name>
      <anchorfile>classKnownPluginList.html</anchorfile>
      <anchor>a6beabfccc86796527f663f30f3514098a095b33c1920322812d2f98874fa647c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>sortAlphabetically</name>
      <anchorfile>classKnownPluginList.html</anchorfile>
      <anchor>a6beabfccc86796527f663f30f3514098a13fa4bc46bb8b6c70670f13fa2a8ad4e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>sortByCategory</name>
      <anchorfile>classKnownPluginList.html</anchorfile>
      <anchor>a6beabfccc86796527f663f30f3514098a2a27fc73f320a500d812f660663eee11</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>sortByManufacturer</name>
      <anchorfile>classKnownPluginList.html</anchorfile>
      <anchor>a6beabfccc86796527f663f30f3514098acf0c4ac83301f91cb2eb1ac54fb32222</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>sortByFormat</name>
      <anchorfile>classKnownPluginList.html</anchorfile>
      <anchor>a6beabfccc86796527f663f30f3514098a72b3147bbc8e818e0ece96b463c07bcc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>sortByFileSystemLocation</name>
      <anchorfile>classKnownPluginList.html</anchorfile>
      <anchor>a6beabfccc86796527f663f30f3514098a7da9f1486befa583139ced7d449a6b9d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>sortByInfoUpdateTime</name>
      <anchorfile>classKnownPluginList.html</anchorfile>
      <anchor>a6beabfccc86796527f663f30f3514098adb393814782fdd73fad2836d78200f9b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>KnownPluginList</name>
      <anchorfile>classKnownPluginList.html</anchorfile>
      <anchor>a9e42fc0a1b1819ad21a734f6380fb1a9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~KnownPluginList</name>
      <anchorfile>classKnownPluginList.html</anchorfile>
      <anchor>a62cbb85f1fe910f1197f078b90dfac61</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classKnownPluginList.html</anchorfile>
      <anchor>af0066ed9002767c229a86e18407ddd7b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumTypes</name>
      <anchorfile>classKnownPluginList.html</anchorfile>
      <anchor>af887b51cf7d3b8c4f44f2475c8109888</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>PluginDescription *</type>
      <name>getType</name>
      <anchorfile>classKnownPluginList.html</anchorfile>
      <anchor>a98c2c30f15758fbf36f7f73b36fc2e49</anchor>
      <arglist>(int index) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>PluginDescription **</type>
      <name>begin</name>
      <anchorfile>classKnownPluginList.html</anchorfile>
      <anchor>ae2d094830d3adc5fa79e078b979d5be3</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>PluginDescription **</type>
      <name>end</name>
      <anchorfile>classKnownPluginList.html</anchorfile>
      <anchor>ad222aeee57ef96a3a4cb15132ae1f62a</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>PluginDescription *</type>
      <name>getTypeForFile</name>
      <anchorfile>classKnownPluginList.html</anchorfile>
      <anchor>a2d4b52e7433bf90ddb5b8c7a0e73564f</anchor>
      <arglist>(const String &amp;fileOrIdentifier) const </arglist>
    </member>
    <member kind="function">
      <type>PluginDescription *</type>
      <name>getTypeForIdentifierString</name>
      <anchorfile>classKnownPluginList.html</anchorfile>
      <anchor>ab9bc09ac3eb4efb14cefbc3a390acc95</anchor>
      <arglist>(const String &amp;identifierString) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addType</name>
      <anchorfile>classKnownPluginList.html</anchorfile>
      <anchor>a3ca7b930d503c7a4f56198603ff82215</anchor>
      <arglist>(const PluginDescription &amp;type)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeType</name>
      <anchorfile>classKnownPluginList.html</anchorfile>
      <anchor>a4ec98afce586dfbef03a3098b8c73038</anchor>
      <arglist>(int index)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>scanAndAddFile</name>
      <anchorfile>classKnownPluginList.html</anchorfile>
      <anchor>a8364ba510d676c59677c997a7f89235c</anchor>
      <arglist>(const String &amp;possiblePluginFileOrIdentifier, bool dontRescanIfAlreadyInList, OwnedArray&lt; PluginDescription &gt; &amp;typesFound, AudioPluginFormat &amp;formatToUse)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scanFinished</name>
      <anchorfile>classKnownPluginList.html</anchorfile>
      <anchor>ac594126087b7b6569d622cf5caef92fb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isListingUpToDate</name>
      <anchorfile>classKnownPluginList.html</anchorfile>
      <anchor>aa91b773056dbfff532f0e044ab091da8</anchor>
      <arglist>(const String &amp;possiblePluginFileOrIdentifier, AudioPluginFormat &amp;formatToUse) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scanAndAddDragAndDroppedFiles</name>
      <anchorfile>classKnownPluginList.html</anchorfile>
      <anchor>ac7eeaf55798843613c61e44204ac4b83</anchor>
      <arglist>(AudioPluginFormatManager &amp;formatManager, const StringArray &amp;filenames, OwnedArray&lt; PluginDescription &gt; &amp;typesFound)</arglist>
    </member>
    <member kind="function">
      <type>const StringArray &amp;</type>
      <name>getBlacklistedFiles</name>
      <anchorfile>classKnownPluginList.html</anchorfile>
      <anchor>ad68c90f8aa49a1b61d36ed3eb1aafe12</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addToBlacklist</name>
      <anchorfile>classKnownPluginList.html</anchorfile>
      <anchor>a1f99f1fe2cee88552502ee525a93f3aa</anchor>
      <arglist>(const String &amp;pluginID)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeFromBlacklist</name>
      <anchorfile>classKnownPluginList.html</anchorfile>
      <anchor>a8d68033f56b0ae4fdf9d438cc193d7b5</anchor>
      <arglist>(const String &amp;pluginID)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearBlacklistedFiles</name>
      <anchorfile>classKnownPluginList.html</anchorfile>
      <anchor>a55f576f2392346c191ec6735f68a1996</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addToMenu</name>
      <anchorfile>classKnownPluginList.html</anchorfile>
      <anchor>adfe296d699a8ad95e8b51ba78f127500</anchor>
      <arglist>(PopupMenu &amp;menu, SortMethod sortMethod, const String &amp;currentlyTickedPluginID=String()) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getIndexChosenByMenu</name>
      <anchorfile>classKnownPluginList.html</anchorfile>
      <anchor>a39129b712d42d4ae13b9a2209014e88b</anchor>
      <arglist>(int menuResultCode) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sort</name>
      <anchorfile>classKnownPluginList.html</anchorfile>
      <anchor>a7e5269bf0c0340917dfb30801c25f717</anchor>
      <arglist>(SortMethod method, bool forwards)</arglist>
    </member>
    <member kind="function">
      <type>XmlElement *</type>
      <name>createXml</name>
      <anchorfile>classKnownPluginList.html</anchorfile>
      <anchor>ad89793da82742e90ca4226d2e93aa946</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>recreateFromXml</name>
      <anchorfile>classKnownPluginList.html</anchorfile>
      <anchor>a3914fddc79074744a1a7b7d7a0e8201f</anchor>
      <arglist>(const XmlElement &amp;xml)</arglist>
    </member>
    <member kind="function">
      <type>PluginTree *</type>
      <name>createTree</name>
      <anchorfile>classKnownPluginList.html</anchorfile>
      <anchor>aab81e726db7bc78b8c8515ce225781c9</anchor>
      <arglist>(const SortMethod sortMethod) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCustomScanner</name>
      <anchorfile>classKnownPluginList.html</anchorfile>
      <anchor>a1099d02b42eabe2d99dbce1ab3393026</anchor>
      <arglist>(CustomScanner *)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>KnownPluginList::CustomScanner</name>
    <filename>classKnownPluginList_1_1CustomScanner.html</filename>
    <member kind="function">
      <type></type>
      <name>CustomScanner</name>
      <anchorfile>classKnownPluginList_1_1CustomScanner.html</anchorfile>
      <anchor>a8c25f60710b16529a0f27371c6a93d72</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CustomScanner</name>
      <anchorfile>classKnownPluginList_1_1CustomScanner.html</anchorfile>
      <anchor>a2960e71d8cb4d7738a212e579e4d4475</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>findPluginTypesFor</name>
      <anchorfile>classKnownPluginList_1_1CustomScanner.html</anchorfile>
      <anchor>a3af43036c1db3c52075e5cb268f34631</anchor>
      <arglist>(AudioPluginFormat &amp;format, OwnedArray&lt; PluginDescription &gt; &amp;result, const String &amp;fileOrIdentifier)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>scanFinished</name>
      <anchorfile>classKnownPluginList_1_1CustomScanner.html</anchorfile>
      <anchor>a0cd070fa9301148afe02672e67d075a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>shouldExit</name>
      <anchorfile>classKnownPluginList_1_1CustomScanner.html</anchorfile>
      <anchor>ae540e81f211be934d0a628e25f80bf96</anchor>
      <arglist>() const noexcept</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>KnownPluginList::PluginTree</name>
    <filename>structKnownPluginList_1_1PluginTree.html</filename>
    <member kind="variable">
      <type>String</type>
      <name>folder</name>
      <anchorfile>structKnownPluginList_1_1PluginTree.html</anchorfile>
      <anchor>ac9560e7c8295f7967b7a4f1b62a30d1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>OwnedArray&lt; PluginTree &gt;</type>
      <name>subFolders</name>
      <anchorfile>structKnownPluginList_1_1PluginTree.html</anchorfile>
      <anchor>a46a202981e3ec6943e51ddbe2866a8d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Array&lt; const PluginDescription * &gt;</type>
      <name>plugins</name>
      <anchorfile>structKnownPluginList_1_1PluginTree.html</anchorfile>
      <anchor>a6e1ef3fe0e6dbfd59363889dceed0ef7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Label</name>
    <filename>classLabel.html</filename>
    <base>Component</base>
    <base>SettableTooltipClient</base>
    <base protection="protected">TextEditor::Listener</base>
    <base protection="private">ComponentListener</base>
    <base protection="private">Value::Listener</base>
    <class kind="class">Label::Listener</class>
    <class kind="struct">Label::LookAndFeelMethods</class>
    <member kind="enumeration">
      <type></type>
      <name>ColourIds</name>
      <anchorfile>classLabel.html</anchorfile>
      <anchor>a41756012394513222e1323bb432fa701</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>backgroundColourId</name>
      <anchorfile>classLabel.html</anchorfile>
      <anchor>a41756012394513222e1323bb432fa701a80bf4bb58a466a4debb994f3ee2c8cab</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>textColourId</name>
      <anchorfile>classLabel.html</anchorfile>
      <anchor>a41756012394513222e1323bb432fa701a1f25238374bf53d43f8c73e68c8e937c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>outlineColourId</name>
      <anchorfile>classLabel.html</anchorfile>
      <anchor>a41756012394513222e1323bb432fa701ab67bf6af853bcef12b41b3e81f7d18bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>backgroundWhenEditingColourId</name>
      <anchorfile>classLabel.html</anchorfile>
      <anchor>a41756012394513222e1323bb432fa701a6ccfd805ecc818013ea4bdde69d4258b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>textWhenEditingColourId</name>
      <anchorfile>classLabel.html</anchorfile>
      <anchor>a41756012394513222e1323bb432fa701adb6284340066b8c4d9ea389087c7d69d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>outlineWhenEditingColourId</name>
      <anchorfile>classLabel.html</anchorfile>
      <anchor>a41756012394513222e1323bb432fa701a6c7adfce6c830c9faa94efd3445f78cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Label</name>
      <anchorfile>classLabel.html</anchorfile>
      <anchor>ad6d7e15decfae7d38cc9396037f9b220</anchor>
      <arglist>(const String &amp;componentName=String(), const String &amp;labelText=String())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Label</name>
      <anchorfile>classLabel.html</anchorfile>
      <anchor>a39e1167a9b5827afd888780973d88894</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setText</name>
      <anchorfile>classLabel.html</anchorfile>
      <anchor>a3f0ca22cb63e924d3db23da48c210790</anchor>
      <arglist>(const String &amp;newText, NotificationType notification)</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>getText</name>
      <anchorfile>classLabel.html</anchorfile>
      <anchor>ade230ed2c7caf91abbf27f8b023f99e7</anchor>
      <arglist>(bool returnActiveEditorContents=false) const </arglist>
    </member>
    <member kind="function">
      <type>Value &amp;</type>
      <name>getTextValue</name>
      <anchorfile>classLabel.html</anchorfile>
      <anchor>a117f308959d8a3030e0179a9f1d0e40b</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFont</name>
      <anchorfile>classLabel.html</anchorfile>
      <anchor>af590df032e89790278b1b00ce4083d1d</anchor>
      <arglist>(const Font &amp;newFont)</arglist>
    </member>
    <member kind="function">
      <type>Font</type>
      <name>getFont</name>
      <anchorfile>classLabel.html</anchorfile>
      <anchor>a1838303b4908130292e7526413d0832c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setJustificationType</name>
      <anchorfile>classLabel.html</anchorfile>
      <anchor>a9d857b984a1762b70424f4893efe99d2</anchor>
      <arglist>(Justification justification)</arglist>
    </member>
    <member kind="function">
      <type>Justification</type>
      <name>getJustificationType</name>
      <anchorfile>classLabel.html</anchorfile>
      <anchor>ad640f4583b4c76cffaff3082b50cc505</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBorderSize</name>
      <anchorfile>classLabel.html</anchorfile>
      <anchor>ad48c4e405722b36328ec68ff7fb7cf42</anchor>
      <arglist>(BorderSize&lt; int &gt; newBorderSize)</arglist>
    </member>
    <member kind="function">
      <type>BorderSize&lt; int &gt;</type>
      <name>getBorderSize</name>
      <anchorfile>classLabel.html</anchorfile>
      <anchor>a9799b134639a23c75ac4659e622fde21</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>attachToComponent</name>
      <anchorfile>classLabel.html</anchorfile>
      <anchor>a3c2397c0da1249f9e27e2279e0f2d4eb</anchor>
      <arglist>(Component *owner, bool onLeft)</arglist>
    </member>
    <member kind="function">
      <type>Component *</type>
      <name>getAttachedComponent</name>
      <anchorfile>classLabel.html</anchorfile>
      <anchor>aa632b228291a4bc21e6ad21c675099e2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isAttachedOnLeft</name>
      <anchorfile>classLabel.html</anchorfile>
      <anchor>a4a36509a1bc34089dfdf1828dc87d23d</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMinimumHorizontalScale</name>
      <anchorfile>classLabel.html</anchorfile>
      <anchor>a3529019ec38b097daec0fb97fe7218d1</anchor>
      <arglist>(float newScale)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getMinimumHorizontalScale</name>
      <anchorfile>classLabel.html</anchorfile>
      <anchor>ab0d9138c10c41be554779d0c41aff70d</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setKeyboardType</name>
      <anchorfile>classLabel.html</anchorfile>
      <anchor>a24803c95b633f0828f5496bb0aff0b83</anchor>
      <arglist>(TextInputTarget::VirtualKeyboardType type) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addListener</name>
      <anchorfile>classLabel.html</anchorfile>
      <anchor>a05dc02ef40bf0244c928bff8c7cf904e</anchor>
      <arglist>(Listener *listener)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeListener</name>
      <anchorfile>classLabel.html</anchorfile>
      <anchor>a7dd9288cdac6891c5c3a4c38df30c2b9</anchor>
      <arglist>(Listener *listener)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEditable</name>
      <anchorfile>classLabel.html</anchorfile>
      <anchor>a9342a397932d82bb1d196ebf9a8969d8</anchor>
      <arglist>(bool editOnSingleClick, bool editOnDoubleClick=false, bool lossOfFocusDiscardsChanges=false)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEditableOnSingleClick</name>
      <anchorfile>classLabel.html</anchorfile>
      <anchor>a466283689e98cc6d1d3d521ab8d383e2</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEditableOnDoubleClick</name>
      <anchorfile>classLabel.html</anchorfile>
      <anchor>a05a999148537f67b9cb676f3940bb3f7</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>doesLossOfFocusDiscardChanges</name>
      <anchorfile>classLabel.html</anchorfile>
      <anchor>aac0b01b91b21112f397fcde2d5942bc9</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEditable</name>
      <anchorfile>classLabel.html</anchorfile>
      <anchor>a4531c2784a8896eaa50d6461ccc764c2</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>showEditor</name>
      <anchorfile>classLabel.html</anchorfile>
      <anchor>a7e8a44e4664b3d3e774e78d29b4b558b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>hideEditor</name>
      <anchorfile>classLabel.html</anchorfile>
      <anchor>a6f5fd9653da51af4720d1ac5e54f18d8</anchor>
      <arglist>(bool discardCurrentEditorContents)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isBeingEdited</name>
      <anchorfile>classLabel.html</anchorfile>
      <anchor>a4a96b4b788e9bc056b513d6f7f89686e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>TextEditor *</type>
      <name>getCurrentTextEditor</name>
      <anchorfile>classLabel.html</anchorfile>
      <anchor>ab1eba9211050f83bcbddd2e35db222cd</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual TextEditor *</type>
      <name>createEditorComponent</name>
      <anchorfile>classLabel.html</anchorfile>
      <anchor>a87b2717e5c855b64346b70a908eabc13</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>textWasEdited</name>
      <anchorfile>classLabel.html</anchorfile>
      <anchor>ac25aabade178c65badaaf2773e0c26b4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>textWasChanged</name>
      <anchorfile>classLabel.html</anchorfile>
      <anchor>a2bc26840c05560b6c17a719c0a2537b7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>editorShown</name>
      <anchorfile>classLabel.html</anchorfile>
      <anchor>a5260dfecf51d5f4822ea7072cb2d4cb6</anchor>
      <arglist>(TextEditor *)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>editorAboutToBeHidden</name>
      <anchorfile>classLabel.html</anchorfile>
      <anchor>a94b4571677d5ac3c0ebfc7d171aa9ba6</anchor>
      <arglist>(TextEditor *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>paint</name>
      <anchorfile>classLabel.html</anchorfile>
      <anchor>a5afd583115f3a166cdd586d735d4d7a0</anchor>
      <arglist>(Graphics &amp;) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>resized</name>
      <anchorfile>classLabel.html</anchorfile>
      <anchor>a440739a97aa7875bb5311f96379c81ff</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>mouseUp</name>
      <anchorfile>classLabel.html</anchorfile>
      <anchor>a714eeb3f14b09c6b09ceb20c046a6e8f</anchor>
      <arglist>(const MouseEvent &amp;) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>mouseDoubleClick</name>
      <anchorfile>classLabel.html</anchorfile>
      <anchor>ac8aa7b000471890ddfb5a9997b6ceb11</anchor>
      <arglist>(const MouseEvent &amp;) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>componentMovedOrResized</name>
      <anchorfile>classLabel.html</anchorfile>
      <anchor>a691d25ca6ed6e80cd30b61b349897d85</anchor>
      <arglist>(Component &amp;, bool wasMoved, bool wasResized) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>componentParentHierarchyChanged</name>
      <anchorfile>classLabel.html</anchorfile>
      <anchor>a78853c28a79a761fd277e86fd8f39c81</anchor>
      <arglist>(Component &amp;) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>componentVisibilityChanged</name>
      <anchorfile>classLabel.html</anchorfile>
      <anchor>a844fcbd42dcf40feab0088f9aa523c52</anchor>
      <arglist>(Component &amp;) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>inputAttemptWhenModal</name>
      <anchorfile>classLabel.html</anchorfile>
      <anchor>a4e7ed73ce2c147cf045731dc301d670d</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>focusGained</name>
      <anchorfile>classLabel.html</anchorfile>
      <anchor>a08684a511d241fd952e05dbc71ce06dc</anchor>
      <arglist>(FocusChangeType) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>enablementChanged</name>
      <anchorfile>classLabel.html</anchorfile>
      <anchor>ad6c81f949fd72d2382ffcd336f1a5923</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>KeyboardFocusTraverser *</type>
      <name>createFocusTraverser</name>
      <anchorfile>classLabel.html</anchorfile>
      <anchor>a22e74241a90a25c4ec47ae64af14a5f0</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>textEditorTextChanged</name>
      <anchorfile>classLabel.html</anchorfile>
      <anchor>af019563a1e06485cee9b947867de7d73</anchor>
      <arglist>(TextEditor &amp;) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>textEditorReturnKeyPressed</name>
      <anchorfile>classLabel.html</anchorfile>
      <anchor>a6dbf00eb577fc65595068d23985af112</anchor>
      <arglist>(TextEditor &amp;) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>textEditorEscapeKeyPressed</name>
      <anchorfile>classLabel.html</anchorfile>
      <anchor>a2daea86f33ae6262f3cc7db6e666bf1a</anchor>
      <arglist>(TextEditor &amp;) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>textEditorFocusLost</name>
      <anchorfile>classLabel.html</anchorfile>
      <anchor>ad3c55077a50ca145811f2b153306168c</anchor>
      <arglist>(TextEditor &amp;) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>colourChanged</name>
      <anchorfile>classLabel.html</anchorfile>
      <anchor>a441417e0a0e0edfdc71702375f9bb939</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>valueChanged</name>
      <anchorfile>classLabel.html</anchorfile>
      <anchor>af5ee3b0734e87192e31364b42dc36e85</anchor>
      <arglist>(Value &amp;) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>callChangeListeners</name>
      <anchorfile>classLabel.html</anchorfile>
      <anchor>a7252208413c499f399608db08ea92a5d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Listener</name>
      <anchorfile>classTextEditor_1_1Listener.html</anchorfile>
      <anchor>af26fd4a47039d06e28e9663e717e7bc4</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Label::Listener</name>
    <filename>classLabel_1_1Listener.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>labelTextChanged</name>
      <anchorfile>classLabel_1_1Listener.html</anchorfile>
      <anchor>ad2a3e79ba106bfa64cab523e197b1514</anchor>
      <arglist>(Label *labelThatHasChanged)=0</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Label::LookAndFeelMethods</name>
    <filename>structLabel_1_1LookAndFeelMethods.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~LookAndFeelMethods</name>
      <anchorfile>structLabel_1_1LookAndFeelMethods.html</anchorfile>
      <anchor>a5ec106f025bc7673597cb0ff530399a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>drawLabel</name>
      <anchorfile>structLabel_1_1LookAndFeelMethods.html</anchorfile>
      <anchor>ad5fa0afa8c84f7c763f9c645e51cba78</anchor>
      <arglist>(Graphics &amp;, Label &amp;)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Font</type>
      <name>getLabelFont</name>
      <anchorfile>structLabel_1_1LookAndFeelMethods.html</anchorfile>
      <anchor>a0eb798ec3b1fe4d101fee9945f94764d</anchor>
      <arglist>(Label &amp;)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>LADSPAPluginFormat</name>
    <filename>classLADSPAPluginFormat.html</filename>
    <base>AudioPluginFormat</base>
    <member kind="function">
      <type></type>
      <name>LADSPAPluginFormat</name>
      <anchorfile>classLADSPAPluginFormat.html</anchorfile>
      <anchor>ae3cc50623da55617adb06af890421929</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~LADSPAPluginFormat</name>
      <anchorfile>classLADSPAPluginFormat.html</anchorfile>
      <anchor>a86480a9868978f31bd989fa07b15c6c0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>getName</name>
      <anchorfile>classLADSPAPluginFormat.html</anchorfile>
      <anchor>a0315eb49c774d5ec385912e18511c66a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>findAllTypesForFile</name>
      <anchorfile>classLADSPAPluginFormat.html</anchorfile>
      <anchor>a76711d244ec5279f43d4a9340429824e</anchor>
      <arglist>(OwnedArray&lt; PluginDescription &gt; &amp;, const String &amp;fileOrIdentifier) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>fileMightContainThisPluginType</name>
      <anchorfile>classLADSPAPluginFormat.html</anchorfile>
      <anchor>ad7c0ffecd11041df2a986b01ac8562cb</anchor>
      <arglist>(const String &amp;fileOrIdentifier) override</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>getNameOfPluginFromIdentifier</name>
      <anchorfile>classLADSPAPluginFormat.html</anchorfile>
      <anchor>ae3be940ce14f65c1b06d31048fc34fa1</anchor>
      <arglist>(const String &amp;fileOrIdentifier) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>pluginNeedsRescanning</name>
      <anchorfile>classLADSPAPluginFormat.html</anchorfile>
      <anchor>a11961b8d55691cc11d58e03bbf39d34d</anchor>
      <arglist>(const PluginDescription &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>StringArray</type>
      <name>searchPathsForPlugins</name>
      <anchorfile>classLADSPAPluginFormat.html</anchorfile>
      <anchor>ae50bc8230d388164bffa34c1687eecf0</anchor>
      <arglist>(const FileSearchPath &amp;, bool recursive, bool) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>doesPluginStillExist</name>
      <anchorfile>classLADSPAPluginFormat.html</anchorfile>
      <anchor>a3627d4ab900d9d19ce3ce20b7573f51a</anchor>
      <arglist>(const PluginDescription &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>FileSearchPath</type>
      <name>getDefaultLocationsToSearch</name>
      <anchorfile>classLADSPAPluginFormat.html</anchorfile>
      <anchor>aa7ebae259391c1b3d3b65b5f9c3fa71a</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>canScanForPlugins</name>
      <anchorfile>classLADSPAPluginFormat.html</anchorfile>
      <anchor>a3bedb50abd3adc51d545aa51a56df41b</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>LagrangeInterpolator</name>
    <filename>classLagrangeInterpolator.html</filename>
    <member kind="function">
      <type></type>
      <name>LagrangeInterpolator</name>
      <anchorfile>classLagrangeInterpolator.html</anchorfile>
      <anchor>a5ab3665c8906de897990d2db77cc88ca</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~LagrangeInterpolator</name>
      <anchorfile>classLagrangeInterpolator.html</anchorfile>
      <anchor>ae8870c0cc6ad4f9da2f258c10a344756</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classLagrangeInterpolator.html</anchorfile>
      <anchor>a49ec82f24dd5f286ab518ee694c92104</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>process</name>
      <anchorfile>classLagrangeInterpolator.html</anchorfile>
      <anchor>a5ff714ff9e0431addd2270956dd17cef</anchor>
      <arglist>(double speedRatio, const float *inputSamples, float *outputSamples, int numOutputSamplesToProduce) noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>processAdding</name>
      <anchorfile>classLagrangeInterpolator.html</anchorfile>
      <anchor>a9a742fafa453e8484df89e5d102aaaf4</anchor>
      <arglist>(double speedRatio, const float *inputSamples, float *outputSamples, int numOutputSamplesToProduce, float gain) noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>LAMEEncoderAudioFormat</name>
    <filename>classLAMEEncoderAudioFormat.html</filename>
    <base>AudioFormat</base>
    <member kind="function">
      <type></type>
      <name>LAMEEncoderAudioFormat</name>
      <anchorfile>classLAMEEncoderAudioFormat.html</anchorfile>
      <anchor>a92122ede38e85507553663faa3f85e57</anchor>
      <arglist>(const File &amp;lameExecutableToUse)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~LAMEEncoderAudioFormat</name>
      <anchorfile>classLAMEEncoderAudioFormat.html</anchorfile>
      <anchor>aa610c6c67b9c705b8ed3977f67f5f14d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>canHandleFile</name>
      <anchorfile>classLAMEEncoderAudioFormat.html</anchorfile>
      <anchor>aaeb1f06dc54381080e50a174f31990be</anchor>
      <arglist>(const File &amp;)</arglist>
    </member>
    <member kind="function">
      <type>Array&lt; int &gt;</type>
      <name>getPossibleSampleRates</name>
      <anchorfile>classLAMEEncoderAudioFormat.html</anchorfile>
      <anchor>a3d7ba6e7d836733b06575d0bf1f4391b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Array&lt; int &gt;</type>
      <name>getPossibleBitDepths</name>
      <anchorfile>classLAMEEncoderAudioFormat.html</anchorfile>
      <anchor>a9a3c84270cad7dbe059a71af56ba2d8b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>canDoStereo</name>
      <anchorfile>classLAMEEncoderAudioFormat.html</anchorfile>
      <anchor>ae53022f719bd92c593449f87ae562ab2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>canDoMono</name>
      <anchorfile>classLAMEEncoderAudioFormat.html</anchorfile>
      <anchor>ae31119ed0d0c13262c91584e109e23de</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isCompressed</name>
      <anchorfile>classLAMEEncoderAudioFormat.html</anchorfile>
      <anchor>a75bc8ced0ea8e325eadf5ceb161730f5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>StringArray</type>
      <name>getQualityOptions</name>
      <anchorfile>classLAMEEncoderAudioFormat.html</anchorfile>
      <anchor>a91379e05dd594eba578ef71b6d68e175</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>AudioFormatReader *</type>
      <name>createReaderFor</name>
      <anchorfile>classLAMEEncoderAudioFormat.html</anchorfile>
      <anchor>a18664dcab19b860ce12cf54e4526d966</anchor>
      <arglist>(InputStream *, bool deleteStreamIfOpeningFails)</arglist>
    </member>
    <member kind="function">
      <type>AudioFormatWriter *</type>
      <name>createWriterFor</name>
      <anchorfile>classLAMEEncoderAudioFormat.html</anchorfile>
      <anchor>a882715f53756d88a718cceddf359ef2b</anchor>
      <arglist>(OutputStream *, double sampleRateToUse, unsigned int numberOfChannels, int bitsPerSample, const StringPairArray &amp;metadataValues, int qualityOptionIndex)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>LassoComponent</name>
    <filename>classLassoComponent.html</filename>
    <templarg></templarg>
    <base>Component</base>
    <member kind="enumeration">
      <type></type>
      <name>ColourIds</name>
      <anchorfile>classLassoComponent.html</anchorfile>
      <anchor>aee298dc93b3481d6cef3b0884a9c4790</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>lassoFillColourId</name>
      <anchorfile>classLassoComponent.html</anchorfile>
      <anchor>aee298dc93b3481d6cef3b0884a9c4790ae8e91c39fc10151d1ed7c9312f090522</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>lassoOutlineColourId</name>
      <anchorfile>classLassoComponent.html</anchorfile>
      <anchor>aee298dc93b3481d6cef3b0884a9c4790a55fc81e2446917181ae96167d1e10fdf</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LassoComponent</name>
      <anchorfile>classLassoComponent.html</anchorfile>
      <anchor>aafd85f80827d8ca420fe6cfbb2c4ad68</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>beginLasso</name>
      <anchorfile>classLassoComponent.html</anchorfile>
      <anchor>af9d043865ee8f7db2989e7200d13dfd2</anchor>
      <arglist>(const MouseEvent &amp;e, LassoSource&lt; SelectableItemType &gt; *lassoSource)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dragLasso</name>
      <anchorfile>classLassoComponent.html</anchorfile>
      <anchor>a4aca7f9f28ecef2834bfabe648ba6959</anchor>
      <arglist>(const MouseEvent &amp;e)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>endLasso</name>
      <anchorfile>classLassoComponent.html</anchorfile>
      <anchor>a77e7463330941cd3ef81fa41209387f0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>paint</name>
      <anchorfile>classLassoComponent.html</anchorfile>
      <anchor>a0d9415c5dd551e76336ca1d952d5f6f9</anchor>
      <arglist>(Graphics &amp;g) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hitTest</name>
      <anchorfile>classLassoComponent.html</anchorfile>
      <anchor>ab67925a4436687bc41437c8460de710d</anchor>
      <arglist>(int, int) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>LassoSource</name>
    <filename>classLassoSource.html</filename>
    <templarg>SelectableItemType</templarg>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~LassoSource</name>
      <anchorfile>classLassoSource.html</anchorfile>
      <anchor>a852e8a3012d3590f1eaaa4d01683fc99</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>findLassoItemsInArea</name>
      <anchorfile>classLassoSource.html</anchorfile>
      <anchor>af15851c6dc40e3931659c665b87bdf34</anchor>
      <arglist>(Array&lt; SelectableItemType &gt; &amp;itemsFound, const Rectangle&lt; int &gt; &amp;area)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual SelectedItemSet&lt; SelectableItemType &gt; &amp;</type>
      <name>getLassoSelection</name>
      <anchorfile>classLassoSource.html</anchorfile>
      <anchor>a24cf96f354570daf9478658f79c0c1b1</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>LeakedObjectDetector</name>
    <filename>classLeakedObjectDetector.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>LeakedObjectDetector</name>
      <anchorfile>classLeakedObjectDetector.html</anchorfile>
      <anchor>a33b0ca6504a300f0c321e89f28512aab</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LeakedObjectDetector</name>
      <anchorfile>classLeakedObjectDetector.html</anchorfile>
      <anchor>ab474ac40a76a5d47b39d8a68b983767f</anchor>
      <arglist>(const LeakedObjectDetector &amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~LeakedObjectDetector</name>
      <anchorfile>classLeakedObjectDetector.html</anchorfile>
      <anchor>a8ea749cb2c38ee245dabf0dd4876a023</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>LEDColour</name>
    <filename>structLEDColour.html</filename>
    <member kind="function">
      <type></type>
      <name>LEDColour</name>
      <anchorfile>structLEDColour.html</anchorfile>
      <anchor>a60074da2c591b42d80d676e7c44c2884</anchor>
      <arglist>() noexcept=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LEDColour</name>
      <anchorfile>structLEDColour.html</anchorfile>
      <anchor>a98877a6cdc8b72ce8e294405380bbea5</anchor>
      <arglist>(const LEDColour &amp;) noexcept=default</arglist>
    </member>
    <member kind="function">
      <type>LEDColour &amp;</type>
      <name>operator=</name>
      <anchorfile>structLEDColour.html</anchorfile>
      <anchor>ae4769e574b7af69af8cb62a14f2e2687</anchor>
      <arglist>(const LEDColour &amp;) noexcept=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LEDColour</name>
      <anchorfile>structLEDColour.html</anchorfile>
      <anchor>a777508d51729a19893de16f861269f1d</anchor>
      <arglist>(uint32 argbColour) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LEDColour</name>
      <anchorfile>structLEDColour.html</anchorfile>
      <anchor>af13bd344ee6e0cb390b79e7ce281ae73</anchor>
      <arglist>(const ColourType &amp;colour)</arglist>
    </member>
    <member kind="function">
      <type>uint8</type>
      <name>getAlpha</name>
      <anchorfile>structLEDColour.html</anchorfile>
      <anchor>aa40d5dcbe1c087c364f8b36962bbd74a</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>uint8</type>
      <name>getRed</name>
      <anchorfile>structLEDColour.html</anchorfile>
      <anchor>abfb1ea7976d55e859920c3d652c1f0fd</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>uint8</type>
      <name>getGreen</name>
      <anchorfile>structLEDColour.html</anchorfile>
      <anchor>a12f400c26447dfb12dcfb9d1ae451c10</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>uint8</type>
      <name>getBlue</name>
      <anchorfile>structLEDColour.html</anchorfile>
      <anchor>a537f33b13bd5e21d4fe5b7502f1c2214</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>uint32</type>
      <name>getARGB</name>
      <anchorfile>structLEDColour.html</anchorfile>
      <anchor>a139038d65e1c7d45d7840b3277141cab</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="variable">
      <type>uint32</type>
      <name>argb</name>
      <anchorfile>structLEDColour.html</anchorfile>
      <anchor>a7570ba255dade5c96450c9d7b0e3dba4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>LEDGrid</name>
    <filename>classLEDGrid.html</filename>
    <class kind="struct">LEDGrid::Program</class>
    <class kind="struct">LEDGrid::ProgramEventMessage</class>
    <class kind="struct">LEDGrid::Renderer</class>
    <member kind="function">
      <type></type>
      <name>LEDGrid</name>
      <anchorfile>classLEDGrid.html</anchorfile>
      <anchor>a5378ea30d5b29c7430738eff5e361b20</anchor>
      <arglist>(Block &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~LEDGrid</name>
      <anchorfile>classLEDGrid.html</anchorfile>
      <anchor>aa71709d344e8fe339c298baead4a83b8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getNumColumns</name>
      <anchorfile>classLEDGrid.html</anchorfile>
      <anchor>a8079d1c0c8fa98fd92eb51a6ba0a5429</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getNumRows</name>
      <anchorfile>classLEDGrid.html</anchorfile>
      <anchor>a43229e88d085a33b8bd9159eb0acab01</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual juce::Result</type>
      <name>setProgram</name>
      <anchorfile>classLEDGrid.html</anchorfile>
      <anchor>a54c1d6f1afd20958c0cb0bebace26ac9</anchor>
      <arglist>(Program *)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Program *</type>
      <name>getProgram</name>
      <anchorfile>classLEDGrid.html</anchorfile>
      <anchor>a0c7325f84585e7643749a00f61ab84cd</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>sendProgramEvent</name>
      <anchorfile>classLEDGrid.html</anchorfile>
      <anchor>a912196d177130b8442306f4e16f9d249</anchor>
      <arglist>(const ProgramEventMessage &amp;)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setDataByte</name>
      <anchorfile>classLEDGrid.html</anchorfile>
      <anchor>a5720ee29e46908d71b9f9f1492adf968</anchor>
      <arglist>(size_t offset, uint8 value)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setDataBytes</name>
      <anchorfile>classLEDGrid.html</anchorfile>
      <anchor>af034afafa3334cb684a360cff0f95a8f</anchor>
      <arglist>(size_t offset, const void *data, size_t num)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setDataBits</name>
      <anchorfile>classLEDGrid.html</anchorfile>
      <anchor>aee67342ec95e61b027c9c30e0938c19a</anchor>
      <arglist>(uint32 startBit, uint32 numBits, uint32 value)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual uint8</type>
      <name>getDataByte</name>
      <anchorfile>classLEDGrid.html</anchorfile>
      <anchor>a8aafbd8d9ac756df365f43b7e9ffb67d</anchor>
      <arglist>(size_t offset)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>saveProgramAsDefault</name>
      <anchorfile>classLEDGrid.html</anchorfile>
      <anchor>a484cc57fb7df8ca865bf8058989af0fd</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRenderer</name>
      <anchorfile>classLEDGrid.html</anchorfile>
      <anchor>a09e84751f5d4dbd1215f81b945fc67e4</anchor>
      <arglist>(Renderer *newRenderer) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Renderer *</type>
      <name>getRenderer</name>
      <anchorfile>classLEDGrid.html</anchorfile>
      <anchor>a173034705c3d488c2cf83a54fd8f1288</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="variable">
      <type>Block &amp;</type>
      <name>block</name>
      <anchorfile>classLEDGrid.html</anchorfile>
      <anchor>a4c4acb32d76e95e6791ef629e8000bd8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>LEDGrid::Program</name>
    <filename>structLEDGrid_1_1Program.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual juce::String</type>
      <name>getLittleFootProgram</name>
      <anchorfile>structLEDGrid_1_1Program.html</anchorfile>
      <anchor>a5c6d09fe219b65f37f17614ef6671070</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual uint32</type>
      <name>getHeapSize</name>
      <anchorfile>structLEDGrid_1_1Program.html</anchorfile>
      <anchor>a0f953f11445bb80efcf71b3a9d1e0b02</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>LEDGrid::ProgramEventMessage</name>
    <filename>structLEDGrid_1_1ProgramEventMessage.html</filename>
    <member kind="variable">
      <type>int32</type>
      <name>values</name>
      <anchorfile>structLEDGrid_1_1ProgramEventMessage.html</anchorfile>
      <anchor>a6adc3a64de3418ad908c601798fec8e7</anchor>
      <arglist>[2]</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>LEDGrid::Renderer</name>
    <filename>structLEDGrid_1_1Renderer.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Renderer</name>
      <anchorfile>structLEDGrid_1_1Renderer.html</anchorfile>
      <anchor>a82ee11704af00871c98d28283352fbd2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>renderLEDGrid</name>
      <anchorfile>structLEDGrid_1_1Renderer.html</anchorfile>
      <anchor>a86a75c295a69fcdfe7c37cf651b73c5b</anchor>
      <arglist>(LEDGrid &amp;)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>LEDRow</name>
    <filename>classLEDRow.html</filename>
    <member kind="function">
      <type></type>
      <name>LEDRow</name>
      <anchorfile>classLEDRow.html</anchorfile>
      <anchor>a849996e9b63f2200d82d439f55b0758e</anchor>
      <arglist>(Block &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~LEDRow</name>
      <anchorfile>classLEDRow.html</anchorfile>
      <anchor>a8df9d0225f67c6395400ebf2afe7ce19</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getNumLEDs</name>
      <anchorfile>classLEDRow.html</anchorfile>
      <anchor>a3da4dfcbd1cc121741d9e68d962ca3d4</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setLEDColour</name>
      <anchorfile>classLEDRow.html</anchorfile>
      <anchor>a69589380cf5242c93743f6510609cb1a</anchor>
      <arglist>(int index, LEDColour newColour)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setOverlayColour</name>
      <anchorfile>classLEDRow.html</anchorfile>
      <anchor>ac2ec368db4c1e58aae2d08ff5fdfb842</anchor>
      <arglist>(LEDColour newColour)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>resetOverlayColour</name>
      <anchorfile>classLEDRow.html</anchorfile>
      <anchor>a9c1abf9789f227b9f43a4545a2e7a84a</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="variable">
      <type>Block &amp;</type>
      <name>block</name>
      <anchorfile>classLEDRow.html</anchorfile>
      <anchor>a7045a32380f8f6b030273c9af5150f8d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Line</name>
    <filename>classLine.html</filename>
    <templarg>ValueType</templarg>
    <member kind="function">
      <type></type>
      <name>Line</name>
      <anchorfile>classLine.html</anchorfile>
      <anchor>a460e27482a530ff771edb7b90ef339bf</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Line</name>
      <anchorfile>classLine.html</anchorfile>
      <anchor>a5f1e08e5f7347ec68e2744f4736ff362</anchor>
      <arglist>(const Line &amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Line</name>
      <anchorfile>classLine.html</anchorfile>
      <anchor>a0c5c5fb238000700acbba2857ca3e26a</anchor>
      <arglist>(ValueType startX, ValueType startY, ValueType endX, ValueType endY) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Line</name>
      <anchorfile>classLine.html</anchorfile>
      <anchor>ad8d12c83ae24e1a1c5ce11d85f4502c4</anchor>
      <arglist>(Point&lt; ValueType &gt; startPoint, Point&lt; ValueType &gt; endPoint) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Line &amp;</type>
      <name>operator=</name>
      <anchorfile>classLine.html</anchorfile>
      <anchor>a6248c53667ef464babfc2a6b4456465e</anchor>
      <arglist>(const Line &amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Line</name>
      <anchorfile>classLine.html</anchorfile>
      <anchor>a61b0f32593c8fb3621276544769cbfcf</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>getStartX</name>
      <anchorfile>classLine.html</anchorfile>
      <anchor>ae6357ca5be4c752771200880cea28dec</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>getStartY</name>
      <anchorfile>classLine.html</anchorfile>
      <anchor>abcb613b81630dbc4c1f155293f5bb738</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>getEndX</name>
      <anchorfile>classLine.html</anchorfile>
      <anchor>ac35f5f251652247e74ece5b36dee794f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>getEndY</name>
      <anchorfile>classLine.html</anchorfile>
      <anchor>a5db26e9e2834a8dcba4b08f7436fefb6</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Point&lt; ValueType &gt;</type>
      <name>getStart</name>
      <anchorfile>classLine.html</anchorfile>
      <anchor>a53ff8584eea7da29c31e407079211e08</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Point&lt; ValueType &gt;</type>
      <name>getEnd</name>
      <anchorfile>classLine.html</anchorfile>
      <anchor>a424444a7dad34f414a247c38bff9f177</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStart</name>
      <anchorfile>classLine.html</anchorfile>
      <anchor>a81b142801ed7a97edc10eefb5193d0b2</anchor>
      <arglist>(ValueType newStartX, ValueType newStartY) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEnd</name>
      <anchorfile>classLine.html</anchorfile>
      <anchor>a8d5aa926b6361e15842f6e916d27af54</anchor>
      <arglist>(ValueType newEndX, ValueType newEndY) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStart</name>
      <anchorfile>classLine.html</anchorfile>
      <anchor>aba454bcfc80c51361703281c4b0c4801</anchor>
      <arglist>(const Point&lt; ValueType &gt; newStart) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEnd</name>
      <anchorfile>classLine.html</anchorfile>
      <anchor>a8733c8206ff4252566cb0548b6e5f005</anchor>
      <arglist>(const Point&lt; ValueType &gt; newEnd) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Line</type>
      <name>reversed</name>
      <anchorfile>classLine.html</anchorfile>
      <anchor>a28ca79adfb725968117ffef397edcd5d</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyTransform</name>
      <anchorfile>classLine.html</anchorfile>
      <anchor>a3529809adcfc1833215ee01318e1f40e</anchor>
      <arglist>(const AffineTransform &amp;transform) noexcept</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>getLength</name>
      <anchorfile>classLine.html</anchorfile>
      <anchor>ac47e36fae13dc1baa6b11b2b545946c0</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>getLengthSquared</name>
      <anchorfile>classLine.html</anchorfile>
      <anchor>a8c6b3c5af83152067defc0fc1eab5c20</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isVertical</name>
      <anchorfile>classLine.html</anchorfile>
      <anchor>acf1d4f45d3f48b6d3540e19ecd9897c5</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isHorizontal</name>
      <anchorfile>classLine.html</anchorfile>
      <anchor>a3f5dbfbf321eed9048d94635ff2457ab</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Point&lt; ValueType &gt;::FloatType</type>
      <name>getAngle</name>
      <anchorfile>classLine.html</anchorfile>
      <anchor>ac4843d9a7d9cc7481c6d2b6cd5af3f7e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Line&lt; float &gt;</type>
      <name>toFloat</name>
      <anchorfile>classLine.html</anchorfile>
      <anchor>accd599a7394efc17cde02c3df1ff6eb7</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Line&lt; double &gt;</type>
      <name>toDouble</name>
      <anchorfile>classLine.html</anchorfile>
      <anchor>adbfed230f1a83b399812a4889122ef68</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classLine.html</anchorfile>
      <anchor>a6ada5afce00914e2897d91d39e1e47eb</anchor>
      <arglist>(Line other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classLine.html</anchorfile>
      <anchor>a63b3c1fd0059d2a08a38fcd7c917064e</anchor>
      <arglist>(Line other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Point&lt; ValueType &gt;</type>
      <name>getIntersection</name>
      <anchorfile>classLine.html</anchorfile>
      <anchor>a2d14062da1753acfba9b8335935e218a</anchor>
      <arglist>(Line line) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>intersects</name>
      <anchorfile>classLine.html</anchorfile>
      <anchor>ab65eb5685ecd0cfa39bee23c3d4f36d7</anchor>
      <arglist>(Line line, Point&lt; ValueType &gt; &amp;intersection) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>intersects</name>
      <anchorfile>classLine.html</anchorfile>
      <anchor>a3b34a1d8d21e50aea59b1b814267f705</anchor>
      <arglist>(Line other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Point&lt; ValueType &gt;</type>
      <name>getPointAlongLine</name>
      <anchorfile>classLine.html</anchorfile>
      <anchor>ae09b929efc5c12defda7715092ff0c05</anchor>
      <arglist>(ValueType distanceFromStart) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Point&lt; ValueType &gt;</type>
      <name>getPointAlongLine</name>
      <anchorfile>classLine.html</anchorfile>
      <anchor>a77bc36673f43fd4e4e966fe3294a9db5</anchor>
      <arglist>(ValueType distanceFromStart, ValueType perpendicularDistance) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Point&lt; ValueType &gt;</type>
      <name>getPointAlongLineProportionally</name>
      <anchorfile>classLine.html</anchorfile>
      <anchor>ab557ce9e66f5cfbf826c0d3955e23d03</anchor>
      <arglist>(typename Point&lt; ValueType &gt;::FloatType proportionOfLength) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>getDistanceFromPoint</name>
      <anchorfile>classLine.html</anchorfile>
      <anchor>a9909c1e4eb4b19deb15c3a095749d8ec</anchor>
      <arglist>(Point&lt; ValueType &gt; targetPoint, Point&lt; ValueType &gt; &amp;pointOnLine) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>findNearestProportionalPositionTo</name>
      <anchorfile>classLine.html</anchorfile>
      <anchor>a9ba815aa4892ee565bee43a8ff5b01e6</anchor>
      <arglist>(Point&lt; ValueType &gt; point) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Point&lt; ValueType &gt;</type>
      <name>findNearestPointTo</name>
      <anchorfile>classLine.html</anchorfile>
      <anchor>a71846fb5d0a9526d14165bc43c6aee43</anchor>
      <arglist>(Point&lt; ValueType &gt; point) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isPointAbove</name>
      <anchorfile>classLine.html</anchorfile>
      <anchor>a946bf1dddfffa5d4429b7f0d7323eb63</anchor>
      <arglist>(Point&lt; ValueType &gt; point) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Line</type>
      <name>withShortenedStart</name>
      <anchorfile>classLine.html</anchorfile>
      <anchor>a7cbccb4467b3a80464db2c5d51d6280f</anchor>
      <arglist>(ValueType distanceToShortenBy) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Line</type>
      <name>withShortenedEnd</name>
      <anchorfile>classLine.html</anchorfile>
      <anchor>ab153135d534455fb2d3a04bd347a1790</anchor>
      <arglist>(ValueType distanceToShortenBy) const noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Line</type>
      <name>fromStartAndAngle</name>
      <anchorfile>classLine.html</anchorfile>
      <anchor>aa3f92ac1df630fc18acb4b3a4ba5b635</anchor>
      <arglist>(Point&lt; ValueType &gt; startPoint, ValueType length, ValueType angle) noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>LinearSmoothedValue</name>
    <filename>classLinearSmoothedValue.html</filename>
    <templarg>FloatType</templarg>
    <member kind="function">
      <type></type>
      <name>LinearSmoothedValue</name>
      <anchorfile>classLinearSmoothedValue.html</anchorfile>
      <anchor>a6eaaa4985fd1975a4af8107325c0456a</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LinearSmoothedValue</name>
      <anchorfile>classLinearSmoothedValue.html</anchorfile>
      <anchor>a6cc025f0d2de6ac18dc15368a31e893c</anchor>
      <arglist>(FloatType initialValue) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classLinearSmoothedValue.html</anchorfile>
      <anchor>a437e2033bee8c4c610b4fd0086b47042</anchor>
      <arglist>(double sampleRate, double rampLengthInSeconds) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>classLinearSmoothedValue.html</anchorfile>
      <anchor>aa7def206e183499e27803d5ff4e6b303</anchor>
      <arglist>(FloatType newValue) noexcept</arglist>
    </member>
    <member kind="function">
      <type>FloatType</type>
      <name>getNextValue</name>
      <anchorfile>classLinearSmoothedValue.html</anchorfile>
      <anchor>a1e4fb08705169e714862724ae75745f0</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSmoothing</name>
      <anchorfile>classLinearSmoothedValue.html</anchorfile>
      <anchor>af79754c985489391bc1a88fb871854f8</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>FloatType</type>
      <name>getTargetValue</name>
      <anchorfile>classLinearSmoothedValue.html</anchorfile>
      <anchor>a3ba8bb37cd75cd07953577e3bd549aa3</anchor>
      <arglist>() const noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>LinkedListPointer</name>
    <filename>classLinkedListPointer.html</filename>
    <templarg>ObjectType</templarg>
    <class kind="class">LinkedListPointer::Appender</class>
    <member kind="function">
      <type></type>
      <name>LinkedListPointer</name>
      <anchorfile>classLinkedListPointer.html</anchorfile>
      <anchor>a044598f5b6b8ac53a221fb934fa41724</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LinkedListPointer</name>
      <anchorfile>classLinkedListPointer.html</anchorfile>
      <anchor>ac971f23361914ad4adef583e766e9d7f</anchor>
      <arglist>(ObjectType *const headItem) noexcept</arglist>
    </member>
    <member kind="function">
      <type>LinkedListPointer &amp;</type>
      <name>operator=</name>
      <anchorfile>classLinkedListPointer.html</anchorfile>
      <anchor>a5437ec0b943e77c01966131940946c7c</anchor>
      <arglist>(ObjectType *const newItem) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LinkedListPointer</name>
      <anchorfile>classLinkedListPointer.html</anchorfile>
      <anchor>a0e6a6fd8444c8d3abefe4a4ddb22e82f</anchor>
      <arglist>(LinkedListPointer &amp;&amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>LinkedListPointer &amp;</type>
      <name>operator=</name>
      <anchorfile>classLinkedListPointer.html</anchorfile>
      <anchor>a44c8d403e553150d1b51f53c8bccb176</anchor>
      <arglist>(LinkedListPointer &amp;&amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator ObjectType *</name>
      <anchorfile>classLinkedListPointer.html</anchorfile>
      <anchor>a248a5c3438640cb2ce0ac3115c9d90d8</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>ObjectType *</type>
      <name>get</name>
      <anchorfile>classLinkedListPointer.html</anchorfile>
      <anchor>a7567b9c57a22c2977a65845cf5cdce98</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>LinkedListPointer &amp;</type>
      <name>getLast</name>
      <anchorfile>classLinkedListPointer.html</anchorfile>
      <anchor>a4770930165d9058d405edc5a31186a25</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>classLinkedListPointer.html</anchorfile>
      <anchor>a167753863d2e10d5ae5e98fbd7b1cfa4</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>LinkedListPointer &amp;</type>
      <name>operator[]</name>
      <anchorfile>classLinkedListPointer.html</anchorfile>
      <anchor>a098a7e36d30ebc62a9ae3a146021116c</anchor>
      <arglist>(int index) noexcept</arglist>
    </member>
    <member kind="function">
      <type>const LinkedListPointer &amp;</type>
      <name>operator[]</name>
      <anchorfile>classLinkedListPointer.html</anchorfile>
      <anchor>ae5716fd33afa27433373f11e475c94d2</anchor>
      <arglist>(int index) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>classLinkedListPointer.html</anchorfile>
      <anchor>a3cc7650c325a2661c02eb5b08219ff92</anchor>
      <arglist>(const ObjectType *const itemToLookFor) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insertNext</name>
      <anchorfile>classLinkedListPointer.html</anchorfile>
      <anchor>aec30ea7b65a22847a91011e7a413a7f5</anchor>
      <arglist>(ObjectType *const newItem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insertAtIndex</name>
      <anchorfile>classLinkedListPointer.html</anchorfile>
      <anchor>ace9638977f9007c5de6d705dd0698d72</anchor>
      <arglist>(int index, ObjectType *newItem)</arglist>
    </member>
    <member kind="function">
      <type>ObjectType *</type>
      <name>replaceNext</name>
      <anchorfile>classLinkedListPointer.html</anchorfile>
      <anchor>a52ef66e128a22c2f2f89b2090320312d</anchor>
      <arglist>(ObjectType *const newItem) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>append</name>
      <anchorfile>classLinkedListPointer.html</anchorfile>
      <anchor>a7d3e9a4e9bfed23ecb63a534cf84772d</anchor>
      <arglist>(ObjectType *const newItem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addCopyOfList</name>
      <anchorfile>classLinkedListPointer.html</anchorfile>
      <anchor>a471a609ef0b2d61ccfdada1aaf5eb73f</anchor>
      <arglist>(const LinkedListPointer &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>ObjectType *</type>
      <name>removeNext</name>
      <anchorfile>classLinkedListPointer.html</anchorfile>
      <anchor>a45a025cb179d7dd8494ff045adc64d88</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove</name>
      <anchorfile>classLinkedListPointer.html</anchorfile>
      <anchor>a45793c4207bcab206c31e281a7593d9d</anchor>
      <arglist>(ObjectType *const itemToRemove)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deleteAll</name>
      <anchorfile>classLinkedListPointer.html</anchorfile>
      <anchor>a2762ae9b67186e39883a9b1bd0a1d4af</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>LinkedListPointer *</type>
      <name>findPointerTo</name>
      <anchorfile>classLinkedListPointer.html</anchorfile>
      <anchor>a3fd8303ecfdb2a5e449342fd772f24ea</anchor>
      <arglist>(ObjectType *const itemToLookFor) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyToArray</name>
      <anchorfile>classLinkedListPointer.html</anchorfile>
      <anchor>a2474d1f6e6156e9d5ffdcd3bb873b7c9</anchor>
      <arglist>(ObjectType **destArray) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swapWith</name>
      <anchorfile>classLinkedListPointer.html</anchorfile>
      <anchor>a32fe51ed00c010d04a24f36a6b39ce16</anchor>
      <arglist>(LinkedListPointer &amp;other) noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>LinkedListPointer::Appender</name>
    <filename>classLinkedListPointer_1_1Appender.html</filename>
    <member kind="function">
      <type></type>
      <name>Appender</name>
      <anchorfile>classLinkedListPointer_1_1Appender.html</anchorfile>
      <anchor>a752b6c9da32ac7a17eb2a50c62cf9233</anchor>
      <arglist>(LinkedListPointer &amp;endOfListPointer) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>append</name>
      <anchorfile>classLinkedListPointer_1_1Appender.html</anchorfile>
      <anchor>a9cdd44669fe1fb53b54e0dfc30833c2b</anchor>
      <arglist>(ObjectType *const newItem) noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ListBox</name>
    <filename>classListBox.html</filename>
    <base>Component</base>
    <base>SettableTooltipClient</base>
  </compound>
  <compound kind="class">
    <name>ListBoxModel</name>
    <filename>classListBoxModel.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ListBoxModel</name>
      <anchorfile>classListBoxModel.html</anchorfile>
      <anchor>aab4876cf1091ee05b32a39a485f1a4fc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getNumRows</name>
      <anchorfile>classListBoxModel.html</anchorfile>
      <anchor>aa34d0f88948722ae16c8ce6a7874bcfd</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>paintListBoxItem</name>
      <anchorfile>classListBoxModel.html</anchorfile>
      <anchor>a255cf47783413c4f3fa71008a34cb776</anchor>
      <arglist>(int rowNumber, Graphics &amp;g, int width, int height, bool rowIsSelected)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Component *</type>
      <name>refreshComponentForRow</name>
      <anchorfile>classListBoxModel.html</anchorfile>
      <anchor>af049aa731e43557c107b1285ca7e3d88</anchor>
      <arglist>(int rowNumber, bool isRowSelected, Component *existingComponentToUpdate)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>listBoxItemClicked</name>
      <anchorfile>classListBoxModel.html</anchorfile>
      <anchor>ac895521cd611ed46a2ac931f8c6d71bc</anchor>
      <arglist>(int row, const MouseEvent &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>listBoxItemDoubleClicked</name>
      <anchorfile>classListBoxModel.html</anchorfile>
      <anchor>a268722ca472258275ed85d3616b54505</anchor>
      <arglist>(int row, const MouseEvent &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>backgroundClicked</name>
      <anchorfile>classListBoxModel.html</anchorfile>
      <anchor>aa81d02ba605aafaee3ed21bc57f3a985</anchor>
      <arglist>(const MouseEvent &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>selectedRowsChanged</name>
      <anchorfile>classListBoxModel.html</anchorfile>
      <anchor>a869cb29e1b605e7312806f0ee7449fa2</anchor>
      <arglist>(int lastRowSelected)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>deleteKeyPressed</name>
      <anchorfile>classListBoxModel.html</anchorfile>
      <anchor>acc840517aac4398dd378ce1e5bd668ac</anchor>
      <arglist>(int lastRowSelected)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>returnKeyPressed</name>
      <anchorfile>classListBoxModel.html</anchorfile>
      <anchor>a713c3007875a4473feafdd81fc8d58fc</anchor>
      <arglist>(int lastRowSelected)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>listWasScrolled</name>
      <anchorfile>classListBoxModel.html</anchorfile>
      <anchor>aec88952fecefb30febf11ed9f172ba40</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual var</type>
      <name>getDragSourceDescription</name>
      <anchorfile>classListBoxModel.html</anchorfile>
      <anchor>a64f2ffd8522586cd78a3f5ad7c27553b</anchor>
      <arglist>(const SparseSet&lt; int &gt; &amp;rowsToDescribe)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual String</type>
      <name>getTooltipForRow</name>
      <anchorfile>classListBoxModel.html</anchorfile>
      <anchor>ab00efad30db9008960012e8194a2452e</anchor>
      <arglist>(int row)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual MouseCursor</type>
      <name>getMouseCursorForRow</name>
      <anchorfile>classListBoxModel.html</anchorfile>
      <anchor>a1cee39f8cb6ce1bccea45a319713b7b3</anchor>
      <arglist>(int row)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ListenerList</name>
    <filename>classListenerList.html</filename>
    <templarg>ListenerClass</templarg>
    <templarg>ArrayType</templarg>
    <class kind="struct">ListenerList::DummyBailOutChecker</class>
    <class kind="class">ListenerList::Iterator</class>
    <member kind="typedef">
      <type>ListenerList&lt; ListenerClass, ArrayType &gt;</type>
      <name>ThisType</name>
      <anchorfile>classListenerList.html</anchorfile>
      <anchor>a3b96ee4d2b3e77dfddce53f2451c4556</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ListenerClass</type>
      <name>ListenerType</name>
      <anchorfile>classListenerList.html</anchorfile>
      <anchor>aa03db5b04e4fe0dda6e95bd9055c9705</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ListenerList</name>
      <anchorfile>classListenerList.html</anchorfile>
      <anchor>a809baedf6e32eaaf1696e85e1149389f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ListenerList</name>
      <anchorfile>classListenerList.html</anchorfile>
      <anchor>a3b3b8138506855e80b9ebf61a032f540</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>classListenerList.html</anchorfile>
      <anchor>aad67eee9d64815b62ad8ea11f6812e75</anchor>
      <arglist>(ListenerClass *const listenerToAdd)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove</name>
      <anchorfile>classListenerList.html</anchorfile>
      <anchor>ac7d5795fb151d7470e1fb2226c7d4676</anchor>
      <arglist>(ListenerClass *const listenerToRemove)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>classListenerList.html</anchorfile>
      <anchor>a4ced7631daac418522719e14a1d35b7d</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEmpty</name>
      <anchorfile>classListenerList.html</anchorfile>
      <anchor>ac35c41903fa2ee45cb8f5666b6724d06</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classListenerList.html</anchorfile>
      <anchor>a8e777917d86ac8f06c6ce97e00d3ef54</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>classListenerList.html</anchorfile>
      <anchor>aa57ce8e754fd494260dd68a3ba23fb3a</anchor>
      <arglist>(ListenerClass *const listener) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>call</name>
      <anchorfile>classListenerList.html</anchorfile>
      <anchor>adb25c4b3880d1004072305edf2e08766</anchor>
      <arglist>(void(ListenerClass::*callbackFunction)())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>callExcluding</name>
      <anchorfile>classListenerList.html</anchorfile>
      <anchor>a77b70d2c36e1bab9a707bed97a17653c</anchor>
      <arglist>(ListenerClass &amp;listenerToExclude, void(ListenerClass::*callbackFunction)())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>callChecked</name>
      <anchorfile>classListenerList.html</anchorfile>
      <anchor>a5757f573480b5f86416f2c85bb985d7a</anchor>
      <arglist>(const BailOutCheckerType &amp;bailOutChecker, void(ListenerClass::*callbackFunction)())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>callCheckedExcluding</name>
      <anchorfile>classListenerList.html</anchorfile>
      <anchor>a57b707f3d08e69fa5fe346da93b89ed2</anchor>
      <arglist>(ListenerClass &amp;listenerToExclude, const BailOutCheckerType &amp;bailOutChecker, void(ListenerClass::*callbackFunction)())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>call</name>
      <anchorfile>classListenerList.html</anchorfile>
      <anchor>a02ed7b864a523d0f3a015c0cb131564e</anchor>
      <arglist>(void(ListenerClass::*callbackFunction)(P1), LL_PARAM(1))</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>callExcluding</name>
      <anchorfile>classListenerList.html</anchorfile>
      <anchor>a842d85beb3ee7e2721c96bf1fe173202</anchor>
      <arglist>(ListenerClass &amp;listenerToExclude, void(ListenerClass::*callbackFunction)(P1), LL_PARAM(1))</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>callChecked</name>
      <anchorfile>classListenerList.html</anchorfile>
      <anchor>adfa011223fefc9446a4e1a68fd163233</anchor>
      <arglist>(const BailOutCheckerType &amp;bailOutChecker, void(ListenerClass::*callbackFunction)(P1), LL_PARAM(1))</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>callCheckedExcluding</name>
      <anchorfile>classListenerList.html</anchorfile>
      <anchor>a45350c9c1450551b21829833eb0c38b3</anchor>
      <arglist>(ListenerClass &amp;listenerToExclude, const BailOutCheckerType &amp;bailOutChecker, void(ListenerClass::*callbackFunction)(P1), LL_PARAM(1))</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>call</name>
      <anchorfile>classListenerList.html</anchorfile>
      <anchor>af27a26ed368214fa92f7f31497a7bc9a</anchor>
      <arglist>(void(ListenerClass::*callbackFunction)(P1, P2), LL_PARAM(1), LL_PARAM(2))</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>callExcluding</name>
      <anchorfile>classListenerList.html</anchorfile>
      <anchor>a175032777084686c2106cb42e50d2618</anchor>
      <arglist>(ListenerClass &amp;listenerToExclude, void(ListenerClass::*callbackFunction)(P1, P2), LL_PARAM(1), LL_PARAM(2))</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>callChecked</name>
      <anchorfile>classListenerList.html</anchorfile>
      <anchor>a016324817b14abe106980929a8ad20b3</anchor>
      <arglist>(const BailOutCheckerType &amp;bailOutChecker, void(ListenerClass::*callbackFunction)(P1, P2), LL_PARAM(1), LL_PARAM(2))</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>callCheckedExcluding</name>
      <anchorfile>classListenerList.html</anchorfile>
      <anchor>a02b915332aed668579682ab0fabb8dc4</anchor>
      <arglist>(ListenerClass &amp;listenerToExclude, const BailOutCheckerType &amp;bailOutChecker, void(ListenerClass::*callbackFunction)(P1, P2), LL_PARAM(1), LL_PARAM(2))</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>call</name>
      <anchorfile>classListenerList.html</anchorfile>
      <anchor>a3135456a9b63353c4ac4de9fcbd214dd</anchor>
      <arglist>(void(ListenerClass::*callbackFunction)(P1, P2, P3), LL_PARAM(1), LL_PARAM(2), LL_PARAM(3))</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>callExcluding</name>
      <anchorfile>classListenerList.html</anchorfile>
      <anchor>a358369bb074cdca768059c3bfa007c4a</anchor>
      <arglist>(ListenerClass &amp;listenerToExclude, void(ListenerClass::*callbackFunction)(P1, P2, P3), LL_PARAM(1), LL_PARAM(2), LL_PARAM(3))</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>callChecked</name>
      <anchorfile>classListenerList.html</anchorfile>
      <anchor>a105833e18f32cd00ee0a4aca5b35a0b3</anchor>
      <arglist>(const BailOutCheckerType &amp;bailOutChecker, void(ListenerClass::*callbackFunction)(P1, P2, P3), LL_PARAM(1), LL_PARAM(2), LL_PARAM(3))</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>callCheckedExcluding</name>
      <anchorfile>classListenerList.html</anchorfile>
      <anchor>a2130d4c317306606d5b509fa7de6d473</anchor>
      <arglist>(ListenerClass &amp;listenerToExclude, const BailOutCheckerType &amp;bailOutChecker, void(ListenerClass::*callbackFunction)(P1, P2, P3), LL_PARAM(1), LL_PARAM(2), LL_PARAM(3))</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>call</name>
      <anchorfile>classListenerList.html</anchorfile>
      <anchor>a5396917f4ce69ff81b3779e9ce64c751</anchor>
      <arglist>(void(ListenerClass::*callbackFunction)(P1, P2, P3, P4), LL_PARAM(1), LL_PARAM(2), LL_PARAM(3), LL_PARAM(4))</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>callExcluding</name>
      <anchorfile>classListenerList.html</anchorfile>
      <anchor>a0b9ebd1126493146a22e10b0a77d3ddf</anchor>
      <arglist>(ListenerClass &amp;listenerToExclude, void(ListenerClass::*callbackFunction)(P1, P2, P3, P4), LL_PARAM(1), LL_PARAM(2), LL_PARAM(3), LL_PARAM(4))</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>callChecked</name>
      <anchorfile>classListenerList.html</anchorfile>
      <anchor>a18c5f7f2f18d054bbbe516e33c6a7d13</anchor>
      <arglist>(const BailOutCheckerType &amp;bailOutChecker, void(ListenerClass::*callbackFunction)(P1, P2, P3, P4), LL_PARAM(1), LL_PARAM(2), LL_PARAM(3), LL_PARAM(4))</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>callCheckedExcluding</name>
      <anchorfile>classListenerList.html</anchorfile>
      <anchor>ae23b32f91ff09fb3333c8a168fda0f04</anchor>
      <arglist>(ListenerClass &amp;listenerToExclude, const BailOutCheckerType &amp;bailOutChecker, void(ListenerClass::*callbackFunction)(P1, P2, P3, P4), LL_PARAM(1), LL_PARAM(2), LL_PARAM(3), LL_PARAM(4))</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>call</name>
      <anchorfile>classListenerList.html</anchorfile>
      <anchor>a1e8137450a357ee0c57627d6ff963b22</anchor>
      <arglist>(void(ListenerClass::*callbackFunction)(P1, P2, P3, P4, P5), LL_PARAM(1), LL_PARAM(2), LL_PARAM(3), LL_PARAM(4), LL_PARAM(5))</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>callExcluding</name>
      <anchorfile>classListenerList.html</anchorfile>
      <anchor>a267162b2e1e0aadf1ebbe63ebd4d7563</anchor>
      <arglist>(ListenerClass &amp;listenerToExclude, void(ListenerClass::*callbackFunction)(P1, P2, P3, P4, P5), LL_PARAM(1), LL_PARAM(2), LL_PARAM(3), LL_PARAM(4), LL_PARAM(5))</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>callChecked</name>
      <anchorfile>classListenerList.html</anchorfile>
      <anchor>a72225f7871a1ae12c2a4ffd978aa5b5a</anchor>
      <arglist>(const BailOutCheckerType &amp;bailOutChecker, void(ListenerClass::*callbackFunction)(P1, P2, P3, P4, P5), LL_PARAM(1), LL_PARAM(2), LL_PARAM(3), LL_PARAM(4), LL_PARAM(5))</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>callCheckedExcluding</name>
      <anchorfile>classListenerList.html</anchorfile>
      <anchor>a09058bf5d7d946428d1c3bb3bb7472c9</anchor>
      <arglist>(ListenerClass &amp;listenerToExclude, const BailOutCheckerType &amp;bailOutChecker, void(ListenerClass::*callbackFunction)(P1, P2, P3, P4, P5), LL_PARAM(1), LL_PARAM(2), LL_PARAM(3), LL_PARAM(4), LL_PARAM(5))</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>call</name>
      <anchorfile>classListenerList.html</anchorfile>
      <anchor>a1fac37f29e7c2470f3b3b72296858ba3</anchor>
      <arglist>(void(ListenerClass::*callbackFunction)(P1, P2, P3, P4, P5, P6), LL_PARAM(1), LL_PARAM(2), LL_PARAM(3), LL_PARAM(4), LL_PARAM(5), LL_PARAM(6))</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>callExcluding</name>
      <anchorfile>classListenerList.html</anchorfile>
      <anchor>a9d13fa831fd59b6e92bbaf03185f8a5d</anchor>
      <arglist>(ListenerClass &amp;listenerToExclude, void(ListenerClass::*callbackFunction)(P1, P2, P3, P4, P5, P6), LL_PARAM(1), LL_PARAM(2), LL_PARAM(3), LL_PARAM(4), LL_PARAM(5), LL_PARAM(6))</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>callChecked</name>
      <anchorfile>classListenerList.html</anchorfile>
      <anchor>a860a681326b1953803a0fc4788435596</anchor>
      <arglist>(const BailOutCheckerType &amp;bailOutChecker, void(ListenerClass::*callbackFunction)(P1, P2, P3, P4, P5, P6), LL_PARAM(1), LL_PARAM(2), LL_PARAM(3), LL_PARAM(4), LL_PARAM(5), LL_PARAM(6))</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>callCheckedExcluding</name>
      <anchorfile>classListenerList.html</anchorfile>
      <anchor>a925fca48c6049ae81f2cd309c05cb3a7</anchor>
      <arglist>(ListenerClass &amp;listenerToExclude, const BailOutCheckerType &amp;bailOutChecker, void(ListenerClass::*callbackFunction)(P1, P2, P3, P4, P5, P6), LL_PARAM(1), LL_PARAM(2), LL_PARAM(3), LL_PARAM(4), LL_PARAM(5), LL_PARAM(6))</arglist>
    </member>
    <member kind="function">
      <type>const ArrayType &amp;</type>
      <name>getListeners</name>
      <anchorfile>classListenerList.html</anchorfile>
      <anchor>aae7f9efd24496a8284f6f1df4b9065bb</anchor>
      <arglist>() const noexcept</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ListenerList::DummyBailOutChecker</name>
    <filename>structListenerList_1_1DummyBailOutChecker.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>shouldBailOut</name>
      <anchorfile>structListenerList_1_1DummyBailOutChecker.html</anchorfile>
      <anchor>a8d8093b22c3d503e1aae0a5cd59766e3</anchor>
      <arglist>() const noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ListenerList::Iterator</name>
    <filename>classListenerList_1_1Iterator.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>Iterator</name>
      <anchorfile>classListenerList_1_1Iterator.html</anchorfile>
      <anchor>aec6ff5dcf548392d46dd38b26168c79d</anchor>
      <arglist>(const ListType &amp;listToIterate) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Iterator</name>
      <anchorfile>classListenerList_1_1Iterator.html</anchorfile>
      <anchor>a6d090aa6025bf1955b936cfa24cf2057</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>next</name>
      <anchorfile>classListenerList_1_1Iterator.html</anchorfile>
      <anchor>a9791ff087b9d8f7978fd9e3a68d713b6</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>next</name>
      <anchorfile>classListenerList_1_1Iterator.html</anchorfile>
      <anchor>ae1c1247ae0215416f493b46f4a386eb9</anchor>
      <arglist>(const BailOutCheckerType &amp;bailOutChecker) noexcept</arglist>
    </member>
    <member kind="function">
      <type>ListType::ListenerType *</type>
      <name>getListener</name>
      <anchorfile>classListenerList_1_1Iterator.html</anchorfile>
      <anchor>a4b5bd0f27cb7b70b294b233584c8fd63</anchor>
      <arglist>() const noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>LocalisedStrings</name>
    <filename>classLocalisedStrings.html</filename>
    <member kind="function">
      <type></type>
      <name>LocalisedStrings</name>
      <anchorfile>classLocalisedStrings.html</anchorfile>
      <anchor>afaa3a94f9ca94eb11b519f734e2adc08</anchor>
      <arglist>(const String &amp;fileContents, bool ignoreCaseOfKeys)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LocalisedStrings</name>
      <anchorfile>classLocalisedStrings.html</anchorfile>
      <anchor>a7227cbea1f200fe77615c6a39bd3a2f8</anchor>
      <arglist>(const File &amp;fileToLoad, bool ignoreCaseOfKeys)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LocalisedStrings</name>
      <anchorfile>classLocalisedStrings.html</anchorfile>
      <anchor>a781d562968f3cc492816751d7b91bdfe</anchor>
      <arglist>(const LocalisedStrings &amp;)</arglist>
    </member>
    <member kind="function">
      <type>LocalisedStrings &amp;</type>
      <name>operator=</name>
      <anchorfile>classLocalisedStrings.html</anchorfile>
      <anchor>af19c7ad780aadf0881da80c11d4ef6c6</anchor>
      <arglist>(const LocalisedStrings &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~LocalisedStrings</name>
      <anchorfile>classLocalisedStrings.html</anchorfile>
      <anchor>aba56315c628fc24aee1fb9c41e0e4fca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>translate</name>
      <anchorfile>classLocalisedStrings.html</anchorfile>
      <anchor>af13a0ba50d4e1a4d2116824eb6e0183a</anchor>
      <arglist>(const String &amp;text) const </arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>translate</name>
      <anchorfile>classLocalisedStrings.html</anchorfile>
      <anchor>ae113b9ff57e82b03f5430da8ad009192</anchor>
      <arglist>(const String &amp;text, const String &amp;resultIfNotFound) const </arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>getLanguageName</name>
      <anchorfile>classLocalisedStrings.html</anchorfile>
      <anchor>a46d409862744c0276d9f35226af285de</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const StringArray &amp;</type>
      <name>getCountryCodes</name>
      <anchorfile>classLocalisedStrings.html</anchorfile>
      <anchor>aea4a5e0684f629680ef934ac593a2697</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const StringPairArray &amp;</type>
      <name>getMappings</name>
      <anchorfile>classLocalisedStrings.html</anchorfile>
      <anchor>a8a37ae831572c36ae00dc0f6200b5da2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addStrings</name>
      <anchorfile>classLocalisedStrings.html</anchorfile>
      <anchor>a50e7ac83c272b655123821397b87549d</anchor>
      <arglist>(const LocalisedStrings &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFallback</name>
      <anchorfile>classLocalisedStrings.html</anchorfile>
      <anchor>a7d31b6c45aa1317612f2bc2466357651</anchor>
      <arglist>(LocalisedStrings *fallbackStrings)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setCurrentMappings</name>
      <anchorfile>classLocalisedStrings.html</anchorfile>
      <anchor>a4916d09e4d881362a6d35d753d902bf5</anchor>
      <arglist>(LocalisedStrings *newTranslations)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static LocalisedStrings *</type>
      <name>getCurrentMappings</name>
      <anchorfile>classLocalisedStrings.html</anchorfile>
      <anchor>a0131361dde468bffc6c76a6f97b768eb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static String</type>
      <name>translateWithCurrentMappings</name>
      <anchorfile>classLocalisedStrings.html</anchorfile>
      <anchor>adbb25081e75842b43db17d585cf00c6d</anchor>
      <arglist>(const String &amp;text)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static String</type>
      <name>translateWithCurrentMappings</name>
      <anchorfile>classLocalisedStrings.html</anchorfile>
      <anchor>af6fe719801fc2c136e408d9392e45384</anchor>
      <arglist>(const char *text)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Logger</name>
    <filename>classLogger.html</filename>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>logMessage</name>
      <anchorfile>classLogger.html</anchorfile>
      <anchor>ab2ef7f6552d425bf729b7d1a7ed5160f</anchor>
      <arglist>(const String &amp;message)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>LookAndFeel</name>
    <filename>classLookAndFeel.html</filename>
    <base>ScrollBar::LookAndFeelMethods</base>
    <base>Button::LookAndFeelMethods</base>
    <base>ImageButton::LookAndFeelMethods</base>
    <base>TextEditor::LookAndFeelMethods</base>
    <base>FileBrowserComponent::LookAndFeelMethods</base>
    <base>TreeView::LookAndFeelMethods</base>
    <base>BubbleComponent::LookAndFeelMethods</base>
    <base>AlertWindow::LookAndFeelMethods</base>
    <base>PopupMenu::LookAndFeelMethods</base>
    <base>ComboBox::LookAndFeelMethods</base>
    <base>Label::LookAndFeelMethods</base>
    <base>Slider::LookAndFeelMethods</base>
    <base>ResizableWindow::LookAndFeelMethods</base>
    <base>DocumentWindow::LookAndFeelMethods</base>
    <base>TooltipWindow::LookAndFeelMethods</base>
    <base>TabbedButtonBar::LookAndFeelMethods</base>
    <base>PropertyComponent::LookAndFeelMethods</base>
    <base>FilenameComponent::LookAndFeelMethods</base>
    <base>GroupComponent::LookAndFeelMethods</base>
    <base>TableHeaderComponent::LookAndFeelMethods</base>
    <base>CallOutBox::LookAndFeelMethods</base>
    <base>Toolbar::LookAndFeelMethods</base>
    <base>ConcertinaPanel::LookAndFeelMethods</base>
    <base>ProgressBar::LookAndFeelMethods</base>
    <base>StretchableLayoutResizerBar::LookAndFeelMethods</base>
    <base>ExtraLookAndFeelBaseClasses::KeyMappingEditorComponentMethods</base>
    <base>ExtraLookAndFeelBaseClasses::AudioDeviceSelectorComponentMethods</base>
    <base>ExtraLookAndFeelBaseClasses::LassoComponentMethods</base>
    <member kind="function">
      <type></type>
      <name>LookAndFeel</name>
      <anchorfile>classLookAndFeel.html</anchorfile>
      <anchor>ac3c8e3057a825febbdf7fcff31d0cb99</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~LookAndFeel</name>
      <anchorfile>classLookAndFeel.html</anchorfile>
      <anchor>a377c52537b71e079dba7568f35af6520</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Colour</type>
      <name>findColour</name>
      <anchorfile>classLookAndFeel.html</anchorfile>
      <anchor>aa7f9faa480c9ec9d61b66672425f380b</anchor>
      <arglist>(int colourId) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setColour</name>
      <anchorfile>classLookAndFeel.html</anchorfile>
      <anchor>a167a1e914771f32e433a0d45aaba45e3</anchor>
      <arglist>(int colourId, Colour colour) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isColourSpecified</name>
      <anchorfile>classLookAndFeel.html</anchorfile>
      <anchor>a01bc0ae6a79f5e89413284856944c133</anchor>
      <arglist>(int colourId) const noexcept</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Typeface::Ptr</type>
      <name>getTypefaceForFont</name>
      <anchorfile>classLookAndFeel.html</anchorfile>
      <anchor>a4c685400fda42257842ea75b0b675b83</anchor>
      <arglist>(const Font &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDefaultSansSerifTypefaceName</name>
      <anchorfile>classLookAndFeel.html</anchorfile>
      <anchor>a15a3d2e1c913bc68859d29945f40a51a</anchor>
      <arglist>(const String &amp;newName)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual MouseCursor</type>
      <name>getMouseCursorFor</name>
      <anchorfile>classLookAndFeel.html</anchorfile>
      <anchor>adb12611e5d5edb99d44cd404bcb77543</anchor>
      <arglist>(Component &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual LowLevelGraphicsContext *</type>
      <name>createGraphicsContext</name>
      <anchorfile>classLookAndFeel.html</anchorfile>
      <anchor>a41151fa0e1d0ef87d26f1bf17c457e7c</anchor>
      <arglist>(const Image &amp;imageToRenderOn, const Point&lt; int &gt; &amp;origin, const RectangleList&lt; int &gt; &amp;initialClip)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUsingNativeAlertWindows</name>
      <anchorfile>classLookAndFeel.html</anchorfile>
      <anchor>a4b0aa92ddc422d660d162dd2e304c35f</anchor>
      <arglist>(bool shouldUseNativeAlerts)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isUsingNativeAlertWindows</name>
      <anchorfile>classLookAndFeel.html</anchorfile>
      <anchor>a08905a5fe3fa51ec2cd99010a1042007</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>drawSpinningWaitAnimation</name>
      <anchorfile>classLookAndFeel.html</anchorfile>
      <anchor>a558d24770ac7c38d77405b616b73152e</anchor>
      <arglist>(Graphics &amp;, const Colour &amp;colour, int x, int y, int w, int h)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Path</type>
      <name>getTickShape</name>
      <anchorfile>classLookAndFeel.html</anchorfile>
      <anchor>aab2d6ec4d998a23295edf15db9264ea4</anchor>
      <arglist>(float height)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Path</type>
      <name>getCrossShape</name>
      <anchorfile>classLookAndFeel.html</anchorfile>
      <anchor>a15086002cbf1386d1988f9b34c0395c5</anchor>
      <arglist>(float height)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual DropShadower *</type>
      <name>createDropShadowerForComponent</name>
      <anchorfile>classLookAndFeel.html</anchorfile>
      <anchor>a33a14287194e0afab5e17252c03d5ad8</anchor>
      <arglist>(Component *)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>playAlertSound</name>
      <anchorfile>classLookAndFeel.html</anchorfile>
      <anchor>ac8619d01580cde12075b229490ab2f97</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~LookAndFeelMethods</name>
      <anchorfile>structScrollBar_1_1LookAndFeelMethods.html</anchorfile>
      <anchor>aa56c6ea86cae4b6610a229433c01efda</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>areScrollbarButtonsVisible</name>
      <anchorfile>structScrollBar_1_1LookAndFeelMethods.html</anchorfile>
      <anchor>ae0fada1aa2636e2845b137f08ae0ede5</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>drawScrollbarButton</name>
      <anchorfile>structScrollBar_1_1LookAndFeelMethods.html</anchorfile>
      <anchor>a0520365d8aed2fc4391503629eb09d7d</anchor>
      <arglist>(Graphics &amp;g, ScrollBar &amp;scrollbar, int width, int height, int buttonDirection, bool isScrollbarVertical, bool isMouseOverButton, bool isButtonDown)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>drawScrollbar</name>
      <anchorfile>structScrollBar_1_1LookAndFeelMethods.html</anchorfile>
      <anchor>ad096796eb73636308c4cdc884a2dc244</anchor>
      <arglist>(Graphics &amp;g, ScrollBar &amp;scrollbar, int x, int y, int width, int height, bool isScrollbarVertical, int thumbStartPosition, int thumbSize, bool isMouseOver, bool isMouseDown)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ImageEffectFilter *</type>
      <name>getScrollbarEffect</name>
      <anchorfile>structScrollBar_1_1LookAndFeelMethods.html</anchorfile>
      <anchor>a62442900ce50bbef5c847cb1270aefbc</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getMinimumScrollbarThumbSize</name>
      <anchorfile>structScrollBar_1_1LookAndFeelMethods.html</anchorfile>
      <anchor>ac783295f6f863a9303261e624660828e</anchor>
      <arglist>(ScrollBar &amp;)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getDefaultScrollbarWidth</name>
      <anchorfile>structScrollBar_1_1LookAndFeelMethods.html</anchorfile>
      <anchor>a368b37f896619b1c65efc8dc53d42dde</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getScrollbarButtonSize</name>
      <anchorfile>structScrollBar_1_1LookAndFeelMethods.html</anchorfile>
      <anchor>ae0ec1c556eda3ccfc40b58ed4b999cee</anchor>
      <arglist>(ScrollBar &amp;)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~LookAndFeelMethods</name>
      <anchorfile>structTextEditor_1_1LookAndFeelMethods.html</anchorfile>
      <anchor>a1390ccb0646017e9b6c329c8a7a36f0f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>fillTextEditorBackground</name>
      <anchorfile>structTextEditor_1_1LookAndFeelMethods.html</anchorfile>
      <anchor>a6299d5ea71ce9aa65b1e6ccfd185ff38</anchor>
      <arglist>(Graphics &amp;, int width, int height, TextEditor &amp;)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>drawTextEditorOutline</name>
      <anchorfile>structTextEditor_1_1LookAndFeelMethods.html</anchorfile>
      <anchor>a2d619d802bcbd3180522714a795f5328</anchor>
      <arglist>(Graphics &amp;, int width, int height, TextEditor &amp;)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual CaretComponent *</type>
      <name>createCaretComponent</name>
      <anchorfile>structTextEditor_1_1LookAndFeelMethods.html</anchorfile>
      <anchor>acf72f14ef3ff1aabca0750afc7569ca0</anchor>
      <arglist>(Component *keyFocusOwner)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~LookAndFeelMethods</name>
      <anchorfile>structTreeView_1_1LookAndFeelMethods.html</anchorfile>
      <anchor>a656cc00b1b5c35785526b5413691fe98</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>drawTreeviewPlusMinusBox</name>
      <anchorfile>structTreeView_1_1LookAndFeelMethods.html</anchorfile>
      <anchor>afd3c7002207226d973a7d2082dadd409</anchor>
      <arglist>(Graphics &amp;, const Rectangle&lt; float &gt; &amp;area, Colour backgroundColour, bool isItemOpen, bool isMouseOver)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>areLinesDrawnForTreeView</name>
      <anchorfile>structTreeView_1_1LookAndFeelMethods.html</anchorfile>
      <anchor>ad7490df2393ac611eeef8b86438e5133</anchor>
      <arglist>(TreeView &amp;)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getTreeViewIndentSize</name>
      <anchorfile>structTreeView_1_1LookAndFeelMethods.html</anchorfile>
      <anchor>ae229002cf7ab755b46e55b60a191bf1c</anchor>
      <arglist>(TreeView &amp;)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~LookAndFeelMethods</name>
      <anchorfile>structPopupMenu_1_1LookAndFeelMethods.html</anchorfile>
      <anchor>ace1f165135c8ec9fdbf4c21141a2b97e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>drawPopupMenuBackground</name>
      <anchorfile>structPopupMenu_1_1LookAndFeelMethods.html</anchorfile>
      <anchor>ab823f47d9caecbd4b7a2e7ed242601b7</anchor>
      <arglist>(Graphics &amp;, int width, int height)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>drawPopupMenuItem</name>
      <anchorfile>structPopupMenu_1_1LookAndFeelMethods.html</anchorfile>
      <anchor>a5c55a3dfd56dad4837f39041a6aef959</anchor>
      <arglist>(Graphics &amp;, const Rectangle&lt; int &gt; &amp;area, bool isSeparator, bool isActive, bool isHighlighted, bool isTicked, bool hasSubMenu, const String &amp;text, const String &amp;shortcutKeyText, const Drawable *icon, const Colour *textColour)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>drawPopupMenuSectionHeader</name>
      <anchorfile>structPopupMenu_1_1LookAndFeelMethods.html</anchorfile>
      <anchor>a8e0503bc8d93343ea36b74ffb8431cd2</anchor>
      <arglist>(Graphics &amp;, const Rectangle&lt; int &gt; &amp;area, const String &amp;sectionName)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Font</type>
      <name>getPopupMenuFont</name>
      <anchorfile>structPopupMenu_1_1LookAndFeelMethods.html</anchorfile>
      <anchor>a32129ecc327d609f0ff2f5f1b871b21b</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>drawPopupMenuUpDownArrow</name>
      <anchorfile>structPopupMenu_1_1LookAndFeelMethods.html</anchorfile>
      <anchor>a87db760522ca2d9da2bf0e04c5656ac8</anchor>
      <arglist>(Graphics &amp;, int width, int height, bool isScrollUpArrow)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>getIdealPopupMenuItemSize</name>
      <anchorfile>structPopupMenu_1_1LookAndFeelMethods.html</anchorfile>
      <anchor>a20bbb2c45105c534538db6f99f606a84</anchor>
      <arglist>(const String &amp;text, bool isSeparator, int standardMenuItemHeight, int &amp;idealWidth, int &amp;idealHeight)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getMenuWindowFlags</name>
      <anchorfile>structPopupMenu_1_1LookAndFeelMethods.html</anchorfile>
      <anchor>ae20e23517e52de59bf2c2f98dca71428</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>drawMenuBarBackground</name>
      <anchorfile>structPopupMenu_1_1LookAndFeelMethods.html</anchorfile>
      <anchor>a064a07dc28e4b19fcb5c86bbc48ac1c4</anchor>
      <arglist>(Graphics &amp;, int width, int height, bool isMouseOverBar, MenuBarComponent &amp;)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getDefaultMenuBarHeight</name>
      <anchorfile>structPopupMenu_1_1LookAndFeelMethods.html</anchorfile>
      <anchor>a2e003680abbe4a5921bf5ce815edce09</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getMenuBarItemWidth</name>
      <anchorfile>structPopupMenu_1_1LookAndFeelMethods.html</anchorfile>
      <anchor>ae49bae1238608f1c09c79f52900e2fe7</anchor>
      <arglist>(MenuBarComponent &amp;, int itemIndex, const String &amp;itemText)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Font</type>
      <name>getMenuBarFont</name>
      <anchorfile>structPopupMenu_1_1LookAndFeelMethods.html</anchorfile>
      <anchor>aff7e64aa7c9125b1106c3cadc8502364</anchor>
      <arglist>(MenuBarComponent &amp;, int itemIndex, const String &amp;itemText)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>drawMenuBarItem</name>
      <anchorfile>structPopupMenu_1_1LookAndFeelMethods.html</anchorfile>
      <anchor>afc0d10c5808f2fcb37d6d692c8d93ce3</anchor>
      <arglist>(Graphics &amp;, int width, int height, int itemIndex, const String &amp;itemText, bool isMouseOverItem, bool isMenuOpen, bool isMouseOverBar, MenuBarComponent &amp;)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Component *</type>
      <name>getParentComponentForMenuOptions</name>
      <anchorfile>structPopupMenu_1_1LookAndFeelMethods.html</anchorfile>
      <anchor>ab4cc8d01e5ca1517ababd36fb3b23771</anchor>
      <arglist>(const PopupMenu::Options &amp;options)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>preparePopupMenuWindow</name>
      <anchorfile>structPopupMenu_1_1LookAndFeelMethods.html</anchorfile>
      <anchor>a1767e4e85c7dce5560a3621345ebdfc4</anchor>
      <arglist>(Component &amp;newWindow)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~LookAndFeelMethods</name>
      <anchorfile>structSlider_1_1LookAndFeelMethods.html</anchorfile>
      <anchor>a9dfa63c789d18a298f13a04a018fa095</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>drawLinearSlider</name>
      <anchorfile>structSlider_1_1LookAndFeelMethods.html</anchorfile>
      <anchor>a92784d178fa74a9bce8223f248362f60</anchor>
      <arglist>(Graphics &amp;, int x, int y, int width, int height, float sliderPos, float minSliderPos, float maxSliderPos, const Slider::SliderStyle, Slider &amp;)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>drawLinearSliderBackground</name>
      <anchorfile>structSlider_1_1LookAndFeelMethods.html</anchorfile>
      <anchor>a7aafae027e7ee643180231f86d0fe71d</anchor>
      <arglist>(Graphics &amp;, int x, int y, int width, int height, float sliderPos, float minSliderPos, float maxSliderPos, const Slider::SliderStyle style, Slider &amp;)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>drawLinearSliderThumb</name>
      <anchorfile>structSlider_1_1LookAndFeelMethods.html</anchorfile>
      <anchor>a471ede4b5797371acf26638f135acc3a</anchor>
      <arglist>(Graphics &amp;, int x, int y, int width, int height, float sliderPos, float minSliderPos, float maxSliderPos, const Slider::SliderStyle, Slider &amp;)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getSliderThumbRadius</name>
      <anchorfile>structSlider_1_1LookAndFeelMethods.html</anchorfile>
      <anchor>a71905c89182698a67da8929077e768f8</anchor>
      <arglist>(Slider &amp;)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>drawRotarySlider</name>
      <anchorfile>structSlider_1_1LookAndFeelMethods.html</anchorfile>
      <anchor>ae63a9d8adce084cd5dbe02b960c73a9a</anchor>
      <arglist>(Graphics &amp;, int x, int y, int width, int height, float sliderPosProportional, float rotaryStartAngle, float rotaryEndAngle, Slider &amp;)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Button *</type>
      <name>createSliderButton</name>
      <anchorfile>structSlider_1_1LookAndFeelMethods.html</anchorfile>
      <anchor>a9b84363e304b319807991b7f59c6b06e</anchor>
      <arglist>(Slider &amp;, bool isIncrement)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Label *</type>
      <name>createSliderTextBox</name>
      <anchorfile>structSlider_1_1LookAndFeelMethods.html</anchorfile>
      <anchor>a6d5aba1db39aa6669f090efc120dfc6c</anchor>
      <arglist>(Slider &amp;)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ImageEffectFilter *</type>
      <name>getSliderEffect</name>
      <anchorfile>structSlider_1_1LookAndFeelMethods.html</anchorfile>
      <anchor>a05b8151ed21a7ab1ee440f676432b063</anchor>
      <arglist>(Slider &amp;)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Font</type>
      <name>getSliderPopupFont</name>
      <anchorfile>structSlider_1_1LookAndFeelMethods.html</anchorfile>
      <anchor>a9545cdf02ae98a209d7fc0f3c94014ca</anchor>
      <arglist>(Slider &amp;)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getSliderPopupPlacement</name>
      <anchorfile>structSlider_1_1LookAndFeelMethods.html</anchorfile>
      <anchor>a26a4070f7f7bff420aac6116d02f44ae</anchor>
      <arglist>(Slider &amp;)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual SliderLayout</type>
      <name>getSliderLayout</name>
      <anchorfile>structSlider_1_1LookAndFeelMethods.html</anchorfile>
      <anchor>afba725a1d8fff70b63fa51775c556d3a</anchor>
      <arglist>(Slider &amp;)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~LookAndFeelMethods</name>
      <anchorfile>structResizableWindow_1_1LookAndFeelMethods.html</anchorfile>
      <anchor>a3b97a2f55cf7316a19532bfafe9f6215</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>drawCornerResizer</name>
      <anchorfile>structResizableWindow_1_1LookAndFeelMethods.html</anchorfile>
      <anchor>ad7ae780c6ed41cd55055509b2796c49b</anchor>
      <arglist>(Graphics &amp;, int w, int h, bool isMouseOver, bool isMouseDragging)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>drawResizableFrame</name>
      <anchorfile>structResizableWindow_1_1LookAndFeelMethods.html</anchorfile>
      <anchor>a5d367d0a5ce0f3580beb72aeb907428f</anchor>
      <arglist>(Graphics &amp;, int w, int h, const BorderSize&lt; int &gt; &amp;)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>fillResizableWindowBackground</name>
      <anchorfile>structResizableWindow_1_1LookAndFeelMethods.html</anchorfile>
      <anchor>afeaa42ac1924bc8d43c175f495d2464a</anchor>
      <arglist>(Graphics &amp;, int w, int h, const BorderSize&lt; int &gt; &amp;, ResizableWindow &amp;)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>drawResizableWindowBorder</name>
      <anchorfile>structResizableWindow_1_1LookAndFeelMethods.html</anchorfile>
      <anchor>a20df7edabfe9d04147a8db3a84a99ee6</anchor>
      <arglist>(Graphics &amp;, int w, int h, const BorderSize&lt; int &gt; &amp;border, ResizableWindow &amp;)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~LookAndFeelMethods</name>
      <anchorfile>structTooltipWindow_1_1LookAndFeelMethods.html</anchorfile>
      <anchor>ad951f0d7f1a9b752e2e3276f34b0b415</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Rectangle&lt; int &gt;</type>
      <name>getTooltipBounds</name>
      <anchorfile>structTooltipWindow_1_1LookAndFeelMethods.html</anchorfile>
      <anchor>aeca0a514a44df60b371692ae5da8fc83</anchor>
      <arglist>(const String &amp;tipText, Point&lt; int &gt; screenPos, Rectangle&lt; int &gt; parentArea)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>drawTooltip</name>
      <anchorfile>structTooltipWindow_1_1LookAndFeelMethods.html</anchorfile>
      <anchor>aeb1f238df8c5ae6e4201985f50ffd8f2</anchor>
      <arglist>(Graphics &amp;, const String &amp;text, int width, int height)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~LookAndFeelMethods</name>
      <anchorfile>structTabbedButtonBar_1_1LookAndFeelMethods.html</anchorfile>
      <anchor>aed03faac56eaf2d45c760890b491c029</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getTabButtonSpaceAroundImage</name>
      <anchorfile>structTabbedButtonBar_1_1LookAndFeelMethods.html</anchorfile>
      <anchor>a9150fd16917df5db0204edbd6bfd6bb7</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getTabButtonOverlap</name>
      <anchorfile>structTabbedButtonBar_1_1LookAndFeelMethods.html</anchorfile>
      <anchor>aa8d0d826e6f764f473cfa2e35f019554</anchor>
      <arglist>(int tabDepth)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getTabButtonBestWidth</name>
      <anchorfile>structTabbedButtonBar_1_1LookAndFeelMethods.html</anchorfile>
      <anchor>a89714f892890029f488aad7f82abee66</anchor>
      <arglist>(TabBarButton &amp;, int tabDepth)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Rectangle&lt; int &gt;</type>
      <name>getTabButtonExtraComponentBounds</name>
      <anchorfile>structTabbedButtonBar_1_1LookAndFeelMethods.html</anchorfile>
      <anchor>a094cd8c72f59b234c3733dac40a0e739</anchor>
      <arglist>(const TabBarButton &amp;, Rectangle&lt; int &gt; &amp;textArea, Component &amp;extraComp)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>drawTabButton</name>
      <anchorfile>structTabbedButtonBar_1_1LookAndFeelMethods.html</anchorfile>
      <anchor>a689f495a286b9b14aa59d0442a9cac34</anchor>
      <arglist>(TabBarButton &amp;, Graphics &amp;, bool isMouseOver, bool isMouseDown)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>drawTabButtonText</name>
      <anchorfile>structTabbedButtonBar_1_1LookAndFeelMethods.html</anchorfile>
      <anchor>a455fcef70836215747c092a5bac8c004</anchor>
      <arglist>(TabBarButton &amp;, Graphics &amp;, bool isMouseOver, bool isMouseDown)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>drawTabbedButtonBarBackground</name>
      <anchorfile>structTabbedButtonBar_1_1LookAndFeelMethods.html</anchorfile>
      <anchor>a5509f088235cba8aeca8be9127cbe227</anchor>
      <arglist>(TabbedButtonBar &amp;, Graphics &amp;)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>drawTabAreaBehindFrontButton</name>
      <anchorfile>structTabbedButtonBar_1_1LookAndFeelMethods.html</anchorfile>
      <anchor>a3df073e3563805f3f9eb5f8cd11f3549</anchor>
      <arglist>(TabbedButtonBar &amp;, Graphics &amp;, int w, int h)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>createTabButtonShape</name>
      <anchorfile>structTabbedButtonBar_1_1LookAndFeelMethods.html</anchorfile>
      <anchor>a36bc68636baadb2f40237a7d8fb52cea</anchor>
      <arglist>(TabBarButton &amp;, Path &amp;path, bool isMouseOver, bool isMouseDown)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>fillTabButtonShape</name>
      <anchorfile>structTabbedButtonBar_1_1LookAndFeelMethods.html</anchorfile>
      <anchor>a0118bd1695d153f69da1568e883b7788</anchor>
      <arglist>(TabBarButton &amp;, Graphics &amp;, const Path &amp;path, bool isMouseOver, bool isMouseDown)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Button *</type>
      <name>createTabBarExtrasButton</name>
      <anchorfile>structTabbedButtonBar_1_1LookAndFeelMethods.html</anchorfile>
      <anchor>aec238a27457f2777c729332bb08ca01f</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~LookAndFeelMethods</name>
      <anchorfile>structPropertyComponent_1_1LookAndFeelMethods.html</anchorfile>
      <anchor>a56c555c32b99375f65f54ec2342dbfde</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>drawPropertyPanelSectionHeader</name>
      <anchorfile>structPropertyComponent_1_1LookAndFeelMethods.html</anchorfile>
      <anchor>af30f97b360e9c8895a90cc94e230a98b</anchor>
      <arglist>(Graphics &amp;, const String &amp;name, bool isOpen, int width, int height)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>drawPropertyComponentBackground</name>
      <anchorfile>structPropertyComponent_1_1LookAndFeelMethods.html</anchorfile>
      <anchor>a9730271b6426228434086bb9ef9f1f9c</anchor>
      <arglist>(Graphics &amp;, int width, int height, PropertyComponent &amp;)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>drawPropertyComponentLabel</name>
      <anchorfile>structPropertyComponent_1_1LookAndFeelMethods.html</anchorfile>
      <anchor>a62c481ae078dd15c2905017fa15d5f4b</anchor>
      <arglist>(Graphics &amp;, int width, int height, PropertyComponent &amp;)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Rectangle&lt; int &gt;</type>
      <name>getPropertyComponentContentPosition</name>
      <anchorfile>structPropertyComponent_1_1LookAndFeelMethods.html</anchorfile>
      <anchor>a5efb79c33eb74c5a41ff2f6b8f37c8de</anchor>
      <arglist>(PropertyComponent &amp;)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~LookAndFeelMethods</name>
      <anchorfile>structTableHeaderComponent_1_1LookAndFeelMethods.html</anchorfile>
      <anchor>a85e6a47aab0c852d09b914b9099a04c6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>drawTableHeaderBackground</name>
      <anchorfile>structTableHeaderComponent_1_1LookAndFeelMethods.html</anchorfile>
      <anchor>a128f5aee0753e6c802c6dd73643fb5da</anchor>
      <arglist>(Graphics &amp;, TableHeaderComponent &amp;)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>drawTableHeaderColumn</name>
      <anchorfile>structTableHeaderComponent_1_1LookAndFeelMethods.html</anchorfile>
      <anchor>ac6eb2eb291ddaf6489f82626f947ae5d</anchor>
      <arglist>(Graphics &amp;, const String &amp;columnName, int columnId, int width, int height, bool isMouseOver, bool isMouseDown, int columnFlags)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~LookAndFeelMethods</name>
      <anchorfile>structToolbar_1_1LookAndFeelMethods.html</anchorfile>
      <anchor>add198f5fe74c3b9964d5aaea55f18008</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>paintToolbarBackground</name>
      <anchorfile>structToolbar_1_1LookAndFeelMethods.html</anchorfile>
      <anchor>a28d91f9093c6949a8ce428da23b45955</anchor>
      <arglist>(Graphics &amp;, int width, int height, Toolbar &amp;)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Button *</type>
      <name>createToolbarMissingItemsButton</name>
      <anchorfile>structToolbar_1_1LookAndFeelMethods.html</anchorfile>
      <anchor>acfd7cf8742c33d28dd694e3fd919555c</anchor>
      <arglist>(Toolbar &amp;)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>paintToolbarButtonBackground</name>
      <anchorfile>structToolbar_1_1LookAndFeelMethods.html</anchorfile>
      <anchor>abe194c3b6afb643649f6ad6b521d142a</anchor>
      <arglist>(Graphics &amp;, int width, int height, bool isMouseOver, bool isMouseDown, ToolbarItemComponent &amp;)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>paintToolbarButtonLabel</name>
      <anchorfile>structToolbar_1_1LookAndFeelMethods.html</anchorfile>
      <anchor>a2daf165955413ea688c1b76c248f1179</anchor>
      <arglist>(Graphics &amp;, int x, int y, int width, int height, const String &amp;text, ToolbarItemComponent &amp;)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~LookAndFeelMethods</name>
      <anchorfile>structProgressBar_1_1LookAndFeelMethods.html</anchorfile>
      <anchor>a4560e90121f993207653722924c01490</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>drawProgressBar</name>
      <anchorfile>structProgressBar_1_1LookAndFeelMethods.html</anchorfile>
      <anchor>a122aff7bf66df1a32b8d1f3973415e0f</anchor>
      <arglist>(Graphics &amp;, ProgressBar &amp;, int width, int height, double progress, const String &amp;textToShow)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~LookAndFeelMethods</name>
      <anchorfile>structStretchableLayoutResizerBar_1_1LookAndFeelMethods.html</anchorfile>
      <anchor>a68ab181181449f9eb2d11d92454a70e0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>drawStretchableLayoutResizerBar</name>
      <anchorfile>structStretchableLayoutResizerBar_1_1LookAndFeelMethods.html</anchorfile>
      <anchor>afdaeff2729666c66c29ce54044e66c22</anchor>
      <arglist>(Graphics &amp;, int w, int h, bool isVerticalBar, bool isMouseOver, bool isMouseDragging)=0</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static LookAndFeel &amp;</type>
      <name>getDefaultLookAndFeel</name>
      <anchorfile>classLookAndFeel.html</anchorfile>
      <anchor>aacb8588072823d7e67dada5ff8f6dbb3</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setDefaultLookAndFeel</name>
      <anchorfile>classLookAndFeel.html</anchorfile>
      <anchor>a0d2cc7f39cb3804d68a6fd2a723d05a4</anchor>
      <arglist>(LookAndFeel *newDefaultLookAndFeel) noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>LookAndFeel_V1</name>
    <filename>classLookAndFeel__V1.html</filename>
    <base>LookAndFeel_V2</base>
    <member kind="function">
      <type></type>
      <name>LookAndFeel_V1</name>
      <anchorfile>classLookAndFeel__V1.html</anchorfile>
      <anchor>af6ff8c924ec8b28343683fb3f1517f94</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~LookAndFeel_V1</name>
      <anchorfile>classLookAndFeel__V1.html</anchorfile>
      <anchor>ab7ac68c9af70569e4122244e7c18eca3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawButtonBackground</name>
      <anchorfile>classLookAndFeel__V1.html</anchorfile>
      <anchor>a416e5a168cb8f74d248dddff979c2915</anchor>
      <arglist>(Graphics &amp;, Button &amp;, const Colour &amp;backgroundColour, bool isMouseOverButton, bool isButtonDown) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawToggleButton</name>
      <anchorfile>classLookAndFeel__V1.html</anchorfile>
      <anchor>ae09e2b7b31afe687e26917cd123c8805</anchor>
      <arglist>(Graphics &amp;, ToggleButton &amp;, bool isMouseOverButton, bool isButtonDown) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawTickBox</name>
      <anchorfile>classLookAndFeel__V1.html</anchorfile>
      <anchor>a5dab43c3be883d543461ccf1fbbf02f5</anchor>
      <arglist>(Graphics &amp;, Component &amp;, float x, float y, float w, float h, bool ticked, bool isEnabled, bool isMouseOverButton, bool isButtonDown) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawProgressBar</name>
      <anchorfile>classLookAndFeel__V1.html</anchorfile>
      <anchor>a0bf7b1196e9fbada7c1accecc4572039</anchor>
      <arglist>(Graphics &amp;, ProgressBar &amp;, int width, int height, double progress, const String &amp;textToShow) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawScrollbarButton</name>
      <anchorfile>classLookAndFeel__V1.html</anchorfile>
      <anchor>acc39f2e3f125772f22768306ea4669b8</anchor>
      <arglist>(Graphics &amp;, ScrollBar &amp;, int width, int height, int buttonDirection, bool isScrollbarVertical, bool isMouseOverButton, bool isButtonDown) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawScrollbar</name>
      <anchorfile>classLookAndFeel__V1.html</anchorfile>
      <anchor>ac09ec7f53b69518b1f35c63c560ea4d2</anchor>
      <arglist>(Graphics &amp;, ScrollBar &amp;, int x, int y, int width, int height, bool isScrollbarVertical, int thumbStartPosition, int thumbSize, bool isMouseOver, bool isMouseDown) override</arglist>
    </member>
    <member kind="function">
      <type>ImageEffectFilter *</type>
      <name>getScrollbarEffect</name>
      <anchorfile>classLookAndFeel__V1.html</anchorfile>
      <anchor>a8e4bc1e8b4e7474ba3f4d1bcd77303d8</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawTextEditorOutline</name>
      <anchorfile>classLookAndFeel__V1.html</anchorfile>
      <anchor>af32787327ec229e66e67f5b733333ea5</anchor>
      <arglist>(Graphics &amp;, int width, int height, TextEditor &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawPopupMenuBackground</name>
      <anchorfile>classLookAndFeel__V1.html</anchorfile>
      <anchor>a3cb791dde09cd432a30fe7e956efcae7</anchor>
      <arglist>(Graphics &amp;, int width, int height) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawMenuBarBackground</name>
      <anchorfile>classLookAndFeel__V1.html</anchorfile>
      <anchor>a6a7aa7d4a8548a2af08bfb3fa5211bbe</anchor>
      <arglist>(Graphics &amp;, int width, int height, bool isMouseOverBar, MenuBarComponent &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawComboBox</name>
      <anchorfile>classLookAndFeel__V1.html</anchorfile>
      <anchor>a24b73b5065f1dc9a55b296f59ee606ac</anchor>
      <arglist>(Graphics &amp;, int width, int height, bool isButtonDown, int buttonX, int buttonY, int buttonW, int buttonH, ComboBox &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>Font</type>
      <name>getComboBoxFont</name>
      <anchorfile>classLookAndFeel__V1.html</anchorfile>
      <anchor>adf1d85617a1ddf97799f72fb8c1f3ea2</anchor>
      <arglist>(ComboBox &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawLinearSlider</name>
      <anchorfile>classLookAndFeel__V1.html</anchorfile>
      <anchor>a3cbe4c113dbbf8eeac0012ada532d487</anchor>
      <arglist>(Graphics &amp;, int x, int y, int width, int height, float sliderPos, float minSliderPos, float maxSliderPos, const Slider::SliderStyle, Slider &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getSliderThumbRadius</name>
      <anchorfile>classLookAndFeel__V1.html</anchorfile>
      <anchor>a99cedd269787b5e78e2e7ddb5d43de71</anchor>
      <arglist>(Slider &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>Button *</type>
      <name>createSliderButton</name>
      <anchorfile>classLookAndFeel__V1.html</anchorfile>
      <anchor>a8cdceb9e653caf7ef0ecfe106e8d47ec</anchor>
      <arglist>(Slider &amp;, bool isIncrement) override</arglist>
    </member>
    <member kind="function">
      <type>ImageEffectFilter *</type>
      <name>getSliderEffect</name>
      <anchorfile>classLookAndFeel__V1.html</anchorfile>
      <anchor>aedcba2ac79b589488709d8ad138c37d9</anchor>
      <arglist>(Slider &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawCornerResizer</name>
      <anchorfile>classLookAndFeel__V1.html</anchorfile>
      <anchor>af3adc6f2113b1ce2a27309a52002f13f</anchor>
      <arglist>(Graphics &amp;, int w, int h, bool isMouseOver, bool isMouseDragging) override</arglist>
    </member>
    <member kind="function">
      <type>Button *</type>
      <name>createDocumentWindowButton</name>
      <anchorfile>classLookAndFeel__V1.html</anchorfile>
      <anchor>a632499ef99657fe72302dfddebe66b11</anchor>
      <arglist>(int buttonType) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>positionDocumentWindowButtons</name>
      <anchorfile>classLookAndFeel__V1.html</anchorfile>
      <anchor>aead2e59cf6e362c164173d33df56b47b</anchor>
      <arglist>(DocumentWindow &amp;, int titleBarX, int titleBarY, int titleBarW, int titleBarH, Button *minimiseButton, Button *maximiseButton, Button *closeButton, bool positionTitleBarButtonsOnLeft) override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LookAndFeel_V2</name>
      <anchorfile>classLookAndFeel__V2.html</anchorfile>
      <anchor>a69781385359c670cb1be66681121ad08</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~LookAndFeel_V2</name>
      <anchorfile>classLookAndFeel__V2.html</anchorfile>
      <anchor>af1af641a8961544caac001032bd73f70</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawButtonBackground</name>
      <anchorfile>classLookAndFeel__V2.html</anchorfile>
      <anchor>ad3ebbc9a47266d694cf8e2df69efb584</anchor>
      <arglist>(Graphics &amp;, Button &amp;, const Colour &amp;backgroundColour, bool isMouseOverButton, bool isButtonDown) override</arglist>
    </member>
    <member kind="function">
      <type>Font</type>
      <name>getTextButtonFont</name>
      <anchorfile>classLookAndFeel__V2.html</anchorfile>
      <anchor>a256b261cab5ddb423432701fd65848db</anchor>
      <arglist>(TextButton &amp;, int buttonHeight) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawButtonText</name>
      <anchorfile>classLookAndFeel__V2.html</anchorfile>
      <anchor>afc80d6b673590a29f99aab46748a5f93</anchor>
      <arglist>(Graphics &amp;, TextButton &amp;, bool isMouseOverButton, bool isButtonDown) override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getTextButtonWidthToFitText</name>
      <anchorfile>classLookAndFeel__V2.html</anchorfile>
      <anchor>ac504ed7063a8213b539e973e456d06b3</anchor>
      <arglist>(TextButton &amp;, int buttonHeight) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawToggleButton</name>
      <anchorfile>classLookAndFeel__V2.html</anchorfile>
      <anchor>ad2a0d9eb1e8a3cee3917a3f0623c6e56</anchor>
      <arglist>(Graphics &amp;, ToggleButton &amp;, bool isMouseOverButton, bool isButtonDown) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>changeToggleButtonWidthToFitText</name>
      <anchorfile>classLookAndFeel__V2.html</anchorfile>
      <anchor>a36348746bdedec3abbe65a4c9c4c29e6</anchor>
      <arglist>(ToggleButton &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawTickBox</name>
      <anchorfile>classLookAndFeel__V2.html</anchorfile>
      <anchor>a42ab374ce5878d6e3277fbd69da24f14</anchor>
      <arglist>(Graphics &amp;, Component &amp;, float x, float y, float w, float h, bool ticked, bool isEnabled, bool isMouseOverButton, bool isButtonDown) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawDrawableButton</name>
      <anchorfile>classLookAndFeel__V2.html</anchorfile>
      <anchor>acb92d092510f3031c0f67db9a87588b5</anchor>
      <arglist>(Graphics &amp;, DrawableButton &amp;, bool isMouseOverButton, bool isButtonDown) override</arglist>
    </member>
    <member kind="function">
      <type>AlertWindow *</type>
      <name>createAlertWindow</name>
      <anchorfile>classLookAndFeel__V2.html</anchorfile>
      <anchor>aefb0c11d37ae40590330d24a58c9d50d</anchor>
      <arglist>(const String &amp;title, const String &amp;message, const String &amp;button1, const String &amp;button2, const String &amp;button3, AlertWindow::AlertIconType iconType, int numButtons, Component *associatedComponent) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawAlertBox</name>
      <anchorfile>classLookAndFeel__V2.html</anchorfile>
      <anchor>ad3e082a34ac51b2b1f9f7f1429bdf939</anchor>
      <arglist>(Graphics &amp;, AlertWindow &amp;, const Rectangle&lt; int &gt; &amp;textArea, TextLayout &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getAlertBoxWindowFlags</name>
      <anchorfile>classLookAndFeel__V2.html</anchorfile>
      <anchor>a0f9e3b00e60dd2a2a0ea8233ca75bfa0</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>Array&lt; int &gt;</type>
      <name>getWidthsForTextButtons</name>
      <anchorfile>classLookAndFeel__V2.html</anchorfile>
      <anchor>a5599c2df5af15d6a8b7adb22313ef195</anchor>
      <arglist>(AlertWindow &amp;, const Array&lt; TextButton * &gt; &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getAlertWindowButtonHeight</name>
      <anchorfile>classLookAndFeel__V2.html</anchorfile>
      <anchor>a2b75974dd11df7ec1a30b153d38f79fe</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>Font</type>
      <name>getAlertWindowTitleFont</name>
      <anchorfile>classLookAndFeel__V2.html</anchorfile>
      <anchor>a646f0af59c220e83de4e060e00baad83</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>Font</type>
      <name>getAlertWindowMessageFont</name>
      <anchorfile>classLookAndFeel__V2.html</anchorfile>
      <anchor>a2a883ef9b505dec279cbb16b1c54564a</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>Font</type>
      <name>getAlertWindowFont</name>
      <anchorfile>classLookAndFeel__V2.html</anchorfile>
      <anchor>afa3b4bc1101112c03708fcb6d554f529</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawProgressBar</name>
      <anchorfile>classLookAndFeel__V2.html</anchorfile>
      <anchor>ae968747b08e6d281a5e0fb51619b7a7c</anchor>
      <arglist>(Graphics &amp;, ProgressBar &amp;, int width, int height, double progress, const String &amp;textToShow) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawSpinningWaitAnimation</name>
      <anchorfile>classLookAndFeel__V2.html</anchorfile>
      <anchor>a5fc937274d84f3ab5cb885903a55f037</anchor>
      <arglist>(Graphics &amp;, const Colour &amp;colour, int x, int y, int w, int h) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>areScrollbarButtonsVisible</name>
      <anchorfile>classLookAndFeel__V2.html</anchorfile>
      <anchor>a6afa9e5fd74c83752da6f1bc6e886d23</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawScrollbarButton</name>
      <anchorfile>classLookAndFeel__V2.html</anchorfile>
      <anchor>a1fe2a08e9036de022cfde6ad7f415531</anchor>
      <arglist>(Graphics &amp;, ScrollBar &amp;, int width, int height, int buttonDirection, bool isScrollbarVertical, bool isMouseOverButton, bool isButtonDown) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawScrollbar</name>
      <anchorfile>classLookAndFeel__V2.html</anchorfile>
      <anchor>abe63a2bfd932502ca3fb091b77fc28f7</anchor>
      <arglist>(Graphics &amp;, ScrollBar &amp;, int x, int y, int width, int height, bool isScrollbarVertical, int thumbStartPosition, int thumbSize, bool isMouseOver, bool isMouseDown) override</arglist>
    </member>
    <member kind="function">
      <type>ImageEffectFilter *</type>
      <name>getScrollbarEffect</name>
      <anchorfile>classLookAndFeel__V2.html</anchorfile>
      <anchor>aa1ff7db2b533e412273198d01a4af7ff</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getMinimumScrollbarThumbSize</name>
      <anchorfile>classLookAndFeel__V2.html</anchorfile>
      <anchor>aa326c31a960e201755271c4aeac4dfc2</anchor>
      <arglist>(ScrollBar &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getDefaultScrollbarWidth</name>
      <anchorfile>classLookAndFeel__V2.html</anchorfile>
      <anchor>a63f62e9864c96f47f7a4eb593b786214</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getScrollbarButtonSize</name>
      <anchorfile>classLookAndFeel__V2.html</anchorfile>
      <anchor>a69b5891ea2f7f2fec906e8e55afdc241</anchor>
      <arglist>(ScrollBar &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>Path</type>
      <name>getTickShape</name>
      <anchorfile>classLookAndFeel__V2.html</anchorfile>
      <anchor>a66e0aec30282cee33f6e0b86ed5624f1</anchor>
      <arglist>(float height) override</arglist>
    </member>
    <member kind="function">
      <type>Path</type>
      <name>getCrossShape</name>
      <anchorfile>classLookAndFeel__V2.html</anchorfile>
      <anchor>ad1afb3b936b037b1a187ba25d0344888</anchor>
      <arglist>(float height) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawTreeviewPlusMinusBox</name>
      <anchorfile>classLookAndFeel__V2.html</anchorfile>
      <anchor>ace35b76307c2ae05ea3c70fbe1708cf9</anchor>
      <arglist>(Graphics &amp;, const Rectangle&lt; float &gt; &amp;area, Colour backgroundColour, bool isOpen, bool isMouseOver) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>areLinesDrawnForTreeView</name>
      <anchorfile>classLookAndFeel__V2.html</anchorfile>
      <anchor>adab13be37b596ca1e899a3923e4d5263</anchor>
      <arglist>(TreeView &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getTreeViewIndentSize</name>
      <anchorfile>classLookAndFeel__V2.html</anchorfile>
      <anchor>aa213709f8c39a2cbba36fea29b69ca35</anchor>
      <arglist>(TreeView &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fillTextEditorBackground</name>
      <anchorfile>classLookAndFeel__V2.html</anchorfile>
      <anchor>a359d99fb5590ac6a03a998f3c3ed89e5</anchor>
      <arglist>(Graphics &amp;, int width, int height, TextEditor &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawTextEditorOutline</name>
      <anchorfile>classLookAndFeel__V2.html</anchorfile>
      <anchor>a9589962bcf56e1b45c7391e0d920bd16</anchor>
      <arglist>(Graphics &amp;, int width, int height, TextEditor &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>CaretComponent *</type>
      <name>createCaretComponent</name>
      <anchorfile>classLookAndFeel__V2.html</anchorfile>
      <anchor>a8dbedf25e46dffd17384ae01e822dac4</anchor>
      <arglist>(Component *keyFocusOwner) override</arglist>
    </member>
    <member kind="function">
      <type>const Drawable *</type>
      <name>getDefaultFolderImage</name>
      <anchorfile>classLookAndFeel__V2.html</anchorfile>
      <anchor>af4c3946ee5576e094f1abf94944ad22b</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>const Drawable *</type>
      <name>getDefaultDocumentFileImage</name>
      <anchorfile>classLookAndFeel__V2.html</anchorfile>
      <anchor>acb5795d1570a3662b34c61268224e99f</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>AttributedString</type>
      <name>createFileChooserHeaderText</name>
      <anchorfile>classLookAndFeel__V2.html</anchorfile>
      <anchor>aaab59472e497f5a304616d9744683b69</anchor>
      <arglist>(const String &amp;title, const String &amp;instructions) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawFileBrowserRow</name>
      <anchorfile>classLookAndFeel__V2.html</anchorfile>
      <anchor>a0d8a70183cd3db5e05bb9009e34487b8</anchor>
      <arglist>(Graphics &amp;, int width, int height, const String &amp;filename, Image *icon, const String &amp;fileSizeDescription, const String &amp;fileTimeDescription, bool isDirectory, bool isItemSelected, int itemIndex, DirectoryContentsDisplayComponent &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>Button *</type>
      <name>createFileBrowserGoUpButton</name>
      <anchorfile>classLookAndFeel__V2.html</anchorfile>
      <anchor>ae99cfd3eddff4b3e8fd52b80ff86216b</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>layoutFileBrowserComponent</name>
      <anchorfile>classLookAndFeel__V2.html</anchorfile>
      <anchor>ab4aafa08b43adc287dd3f5dd1b0e42f5</anchor>
      <arglist>(FileBrowserComponent &amp;, DirectoryContentsDisplayComponent *, FilePreviewComponent *, ComboBox *currentPathBox, TextEditor *filenameBox, Button *goUpButton) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawBubble</name>
      <anchorfile>classLookAndFeel__V2.html</anchorfile>
      <anchor>a28f4d0d531043e90e8b0884eaa642d20</anchor>
      <arglist>(Graphics &amp;, BubbleComponent &amp;, const Point&lt; float &gt; &amp;tip, const Rectangle&lt; float &gt; &amp;body) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawLasso</name>
      <anchorfile>classLookAndFeel__V2.html</anchorfile>
      <anchor>a170742e582295e89e2918a01f419e24c</anchor>
      <arglist>(Graphics &amp;, Component &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawPopupMenuBackground</name>
      <anchorfile>classLookAndFeel__V2.html</anchorfile>
      <anchor>ab0fb70597eebd426cf5ce4a6c4fce36a</anchor>
      <arglist>(Graphics &amp;, int width, int height) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawPopupMenuItem</name>
      <anchorfile>classLookAndFeel__V2.html</anchorfile>
      <anchor>a397e8ce8c241dbbe1702673bc83691c8</anchor>
      <arglist>(Graphics &amp;, const Rectangle&lt; int &gt; &amp;area, bool isSeparator, bool isActive, bool isHighlighted, bool isTicked, bool hasSubMenu, const String &amp;text, const String &amp;shortcutKeyText, const Drawable *icon, const Colour *textColour) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawPopupMenuSectionHeader</name>
      <anchorfile>classLookAndFeel__V2.html</anchorfile>
      <anchor>a8a5b24e2aa647e3737b7db0f1da36951</anchor>
      <arglist>(Graphics &amp;, const Rectangle&lt; int &gt; &amp;area, const String &amp;sectionName) override</arglist>
    </member>
    <member kind="function">
      <type>Font</type>
      <name>getPopupMenuFont</name>
      <anchorfile>classLookAndFeel__V2.html</anchorfile>
      <anchor>a6efa1257bb689e6de99f51abbf913984</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawPopupMenuUpDownArrow</name>
      <anchorfile>classLookAndFeel__V2.html</anchorfile>
      <anchor>a5f570f5d8cb3169e0bbc566c6723c6f4</anchor>
      <arglist>(Graphics &amp;, int width, int height, bool isScrollUpArrow) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getIdealPopupMenuItemSize</name>
      <anchorfile>classLookAndFeel__V2.html</anchorfile>
      <anchor>a6e52715c2e320e53ee3032ff5a7c6482</anchor>
      <arglist>(const String &amp;text, bool isSeparator, int standardMenuItemHeight, int &amp;idealWidth, int &amp;idealHeight) override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getMenuWindowFlags</name>
      <anchorfile>classLookAndFeel__V2.html</anchorfile>
      <anchor>a6fb91b019531cb707f6739f7dc1221f2</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>preparePopupMenuWindow</name>
      <anchorfile>classLookAndFeel__V2.html</anchorfile>
      <anchor>a44210a4874aecd1c8f09d99fe2291e7f</anchor>
      <arglist>(Component &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawMenuBarBackground</name>
      <anchorfile>classLookAndFeel__V2.html</anchorfile>
      <anchor>a079942f7e956bc081b3c838848ce96de</anchor>
      <arglist>(Graphics &amp;, int width, int height, bool isMouseOverBar, MenuBarComponent &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getMenuBarItemWidth</name>
      <anchorfile>classLookAndFeel__V2.html</anchorfile>
      <anchor>a1b5755c2b90e5e5acf5550a8212f02b4</anchor>
      <arglist>(MenuBarComponent &amp;, int itemIndex, const String &amp;itemText) override</arglist>
    </member>
    <member kind="function">
      <type>Font</type>
      <name>getMenuBarFont</name>
      <anchorfile>classLookAndFeel__V2.html</anchorfile>
      <anchor>ad6787704cca21760169002051bda3fd6</anchor>
      <arglist>(MenuBarComponent &amp;, int itemIndex, const String &amp;itemText) override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getDefaultMenuBarHeight</name>
      <anchorfile>classLookAndFeel__V2.html</anchorfile>
      <anchor>a54b4f0e2455bebdfa6950f46045c3907</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawMenuBarItem</name>
      <anchorfile>classLookAndFeel__V2.html</anchorfile>
      <anchor>aab95999ea94bed43aa989e682cbc94c6</anchor>
      <arglist>(Graphics &amp;, int width, int height, int itemIndex, const String &amp;itemText, bool isMouseOverItem, bool isMenuOpen, bool isMouseOverBar, MenuBarComponent &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>Component *</type>
      <name>getParentComponentForMenuOptions</name>
      <anchorfile>classLookAndFeel__V2.html</anchorfile>
      <anchor>a8e33a2a72238adb3099c09b6113aea13</anchor>
      <arglist>(const PopupMenu::Options &amp;options) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawComboBox</name>
      <anchorfile>classLookAndFeel__V2.html</anchorfile>
      <anchor>afdb2791512cd4fb8609b044686ed5c55</anchor>
      <arglist>(Graphics &amp;, int width, int height, bool isButtonDown, int buttonX, int buttonY, int buttonW, int buttonH, ComboBox &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>Font</type>
      <name>getComboBoxFont</name>
      <anchorfile>classLookAndFeel__V2.html</anchorfile>
      <anchor>a4076050f06f686b3f74908e888936c1a</anchor>
      <arglist>(ComboBox &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>Label *</type>
      <name>createComboBoxTextBox</name>
      <anchorfile>classLookAndFeel__V2.html</anchorfile>
      <anchor>af30e34dca52d3a5ede15af61d3518586</anchor>
      <arglist>(ComboBox &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>positionComboBoxText</name>
      <anchorfile>classLookAndFeel__V2.html</anchorfile>
      <anchor>a6a00c54f02ae13be98c90979b9683bac</anchor>
      <arglist>(ComboBox &amp;, Label &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawLabel</name>
      <anchorfile>classLookAndFeel__V2.html</anchorfile>
      <anchor>ad5e69736e989b58ad32e2f98d3dfa044</anchor>
      <arglist>(Graphics &amp;, Label &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>Font</type>
      <name>getLabelFont</name>
      <anchorfile>classLookAndFeel__V2.html</anchorfile>
      <anchor>a6f7d84ed6514c03bdf5cb2d4846a39f1</anchor>
      <arglist>(Label &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawLinearSlider</name>
      <anchorfile>classLookAndFeel__V2.html</anchorfile>
      <anchor>a693bad791dab5a6bf2cd9392b88c47f6</anchor>
      <arglist>(Graphics &amp;, int x, int y, int width, int height, float sliderPos, float minSliderPos, float maxSliderPos, const Slider::SliderStyle, Slider &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawLinearSliderBackground</name>
      <anchorfile>classLookAndFeel__V2.html</anchorfile>
      <anchor>aade059d1f6edacf7452ffde450c3f440</anchor>
      <arglist>(Graphics &amp;, int x, int y, int width, int height, float sliderPos, float minSliderPos, float maxSliderPos, const Slider::SliderStyle, Slider &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawLinearSliderThumb</name>
      <anchorfile>classLookAndFeel__V2.html</anchorfile>
      <anchor>ae7827b9717981ca84af3513cbfeac35d</anchor>
      <arglist>(Graphics &amp;, int x, int y, int width, int height, float sliderPos, float minSliderPos, float maxSliderPos, const Slider::SliderStyle, Slider &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawRotarySlider</name>
      <anchorfile>classLookAndFeel__V2.html</anchorfile>
      <anchor>a2f8bd6754cfeddba496438119ee2c25c</anchor>
      <arglist>(Graphics &amp;, int x, int y, int width, int height, float sliderPosProportional, float rotaryStartAngle, float rotaryEndAngle, Slider &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getSliderThumbRadius</name>
      <anchorfile>classLookAndFeel__V2.html</anchorfile>
      <anchor>ae514defd3f51c0af1ca3ba00d2341242</anchor>
      <arglist>(Slider &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>Button *</type>
      <name>createSliderButton</name>
      <anchorfile>classLookAndFeel__V2.html</anchorfile>
      <anchor>aa65e595f2058a2ac3d38394653efa137</anchor>
      <arglist>(Slider &amp;, bool isIncrement) override</arglist>
    </member>
    <member kind="function">
      <type>Label *</type>
      <name>createSliderTextBox</name>
      <anchorfile>classLookAndFeel__V2.html</anchorfile>
      <anchor>ac70ab8e20f4b27f5c9c7ac3fec5c3ce9</anchor>
      <arglist>(Slider &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>ImageEffectFilter *</type>
      <name>getSliderEffect</name>
      <anchorfile>classLookAndFeel__V2.html</anchorfile>
      <anchor>a0764eae8122c157f783a7875676366b1</anchor>
      <arglist>(Slider &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>Font</type>
      <name>getSliderPopupFont</name>
      <anchorfile>classLookAndFeel__V2.html</anchorfile>
      <anchor>a0aa4080c8487a4617da6337c14596966</anchor>
      <arglist>(Slider &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getSliderPopupPlacement</name>
      <anchorfile>classLookAndFeel__V2.html</anchorfile>
      <anchor>af9dbd7c1125462a1d3c8ea548f3f7fa3</anchor>
      <arglist>(Slider &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>Slider::SliderLayout</type>
      <name>getSliderLayout</name>
      <anchorfile>classLookAndFeel__V2.html</anchorfile>
      <anchor>a5bdac020795c695459eefdd7b911814e</anchor>
      <arglist>(Slider &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>Rectangle&lt; int &gt;</type>
      <name>getTooltipBounds</name>
      <anchorfile>classLookAndFeel__V2.html</anchorfile>
      <anchor>a6af715d801db915d661e103603a2e721</anchor>
      <arglist>(const String &amp;tipText, Point&lt; int &gt; screenPos, Rectangle&lt; int &gt; parentArea) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawTooltip</name>
      <anchorfile>classLookAndFeel__V2.html</anchorfile>
      <anchor>a562db08c89200d6232c92e5b89d33d7d</anchor>
      <arglist>(Graphics &amp;, const String &amp;text, int width, int height) override</arglist>
    </member>
    <member kind="function">
      <type>Button *</type>
      <name>createFilenameComponentBrowseButton</name>
      <anchorfile>classLookAndFeel__V2.html</anchorfile>
      <anchor>aaf8e525e887962916aa1e2b4d6c85c9c</anchor>
      <arglist>(const String &amp;text) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>layoutFilenameComponent</name>
      <anchorfile>classLookAndFeel__V2.html</anchorfile>
      <anchor>a06b8c0b7b8143f28cbf4671d67d51c11</anchor>
      <arglist>(FilenameComponent &amp;, ComboBox *filenameBox, Button *browseButton) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawConcertinaPanelHeader</name>
      <anchorfile>classLookAndFeel__V2.html</anchorfile>
      <anchor>a280ad0e673c89e4cf48312c7329a92f5</anchor>
      <arglist>(Graphics &amp;, const Rectangle&lt; int &gt; &amp;area, bool isMouseOver, bool isMouseDown, ConcertinaPanel &amp;, Component &amp;panel) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawCornerResizer</name>
      <anchorfile>classLookAndFeel__V2.html</anchorfile>
      <anchor>a38e789cd65e11d1cb4c23e4aa2a2f718</anchor>
      <arglist>(Graphics &amp;, int w, int h, bool isMouseOver, bool isMouseDragging) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawResizableFrame</name>
      <anchorfile>classLookAndFeel__V2.html</anchorfile>
      <anchor>a33e2beeafc36e0c2835f819d6ede10dc</anchor>
      <arglist>(Graphics &amp;, int w, int h, const BorderSize&lt; int &gt; &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fillResizableWindowBackground</name>
      <anchorfile>classLookAndFeel__V2.html</anchorfile>
      <anchor>a2354ed00a4d591bd18dadbe9431afd3b</anchor>
      <arglist>(Graphics &amp;, int w, int h, const BorderSize&lt; int &gt; &amp;, ResizableWindow &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawResizableWindowBorder</name>
      <anchorfile>classLookAndFeel__V2.html</anchorfile>
      <anchor>a69e11fa4cff3c0db156d0a20b01d0633</anchor>
      <arglist>(Graphics &amp;, int w, int h, const BorderSize&lt; int &gt; &amp;border, ResizableWindow &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawDocumentWindowTitleBar</name>
      <anchorfile>classLookAndFeel__V2.html</anchorfile>
      <anchor>ad17321be41d9e309fb444cb9879c3ecb</anchor>
      <arglist>(DocumentWindow &amp;, Graphics &amp;, int w, int h, int titleSpaceX, int titleSpaceW, const Image *icon, bool drawTitleTextOnLeft) override</arglist>
    </member>
    <member kind="function">
      <type>Button *</type>
      <name>createDocumentWindowButton</name>
      <anchorfile>classLookAndFeel__V2.html</anchorfile>
      <anchor>ae75601e6b57e568c2674d0cddcc0a7e1</anchor>
      <arglist>(int buttonType) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>positionDocumentWindowButtons</name>
      <anchorfile>classLookAndFeel__V2.html</anchorfile>
      <anchor>ac982dcb599f7c1c5d9814d69b74f7eb0</anchor>
      <arglist>(DocumentWindow &amp;, int titleBarX, int titleBarY, int titleBarW, int titleBarH, Button *minimiseButton, Button *maximiseButton, Button *closeButton, bool positionTitleBarButtonsOnLeft) override</arglist>
    </member>
    <member kind="function">
      <type>DropShadower *</type>
      <name>createDropShadowerForComponent</name>
      <anchorfile>classLookAndFeel__V2.html</anchorfile>
      <anchor>ab4da18475f694e30b00fe75537aca2ab</anchor>
      <arglist>(Component *) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawStretchableLayoutResizerBar</name>
      <anchorfile>classLookAndFeel__V2.html</anchorfile>
      <anchor>ad5a741103c0a134bb71715017254cce2</anchor>
      <arglist>(Graphics &amp;, int w, int h, bool isVerticalBar, bool isMouseOver, bool isMouseDragging) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawGroupComponentOutline</name>
      <anchorfile>classLookAndFeel__V2.html</anchorfile>
      <anchor>a2cae30fe176dc5982617d200046a7000</anchor>
      <arglist>(Graphics &amp;, int w, int h, const String &amp;text, const Justification &amp;, GroupComponent &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getTabButtonSpaceAroundImage</name>
      <anchorfile>classLookAndFeel__V2.html</anchorfile>
      <anchor>ab7f2df54f2b9c1fc540456ee2c2e97f9</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getTabButtonOverlap</name>
      <anchorfile>classLookAndFeel__V2.html</anchorfile>
      <anchor>a72ad543ffc1c462aea67474da4fb3726</anchor>
      <arglist>(int tabDepth) override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getTabButtonBestWidth</name>
      <anchorfile>classLookAndFeel__V2.html</anchorfile>
      <anchor>aea33844c9431082ceedce61ee4d94ac5</anchor>
      <arglist>(TabBarButton &amp;, int tabDepth) override</arglist>
    </member>
    <member kind="function">
      <type>Rectangle&lt; int &gt;</type>
      <name>getTabButtonExtraComponentBounds</name>
      <anchorfile>classLookAndFeel__V2.html</anchorfile>
      <anchor>a7aa86a50d2b87e9ee9c7909fed3b5168</anchor>
      <arglist>(const TabBarButton &amp;, Rectangle&lt; int &gt; &amp;textArea, Component &amp;extraComp) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawTabButton</name>
      <anchorfile>classLookAndFeel__V2.html</anchorfile>
      <anchor>ac7675df0a45b42593078e20f090081e3</anchor>
      <arglist>(TabBarButton &amp;, Graphics &amp;, bool isMouseOver, bool isMouseDown) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawTabButtonText</name>
      <anchorfile>classLookAndFeel__V2.html</anchorfile>
      <anchor>aed4e8dfe8df41b8c272bac4bf0990ac4</anchor>
      <arglist>(TabBarButton &amp;, Graphics &amp;, bool isMouseOver, bool isMouseDown) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawTabbedButtonBarBackground</name>
      <anchorfile>classLookAndFeel__V2.html</anchorfile>
      <anchor>a10e14aab70ef5c83ab6ba74a1c24d312</anchor>
      <arglist>(TabbedButtonBar &amp;, Graphics &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawTabAreaBehindFrontButton</name>
      <anchorfile>classLookAndFeel__V2.html</anchorfile>
      <anchor>a83fd639e315d19b44b974451fec65b98</anchor>
      <arglist>(TabbedButtonBar &amp;, Graphics &amp;, int w, int h) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>createTabButtonShape</name>
      <anchorfile>classLookAndFeel__V2.html</anchorfile>
      <anchor>ab4f065f30269b7356d0e4353c2c0a826</anchor>
      <arglist>(TabBarButton &amp;, Path &amp;, bool isMouseOver, bool isMouseDown) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fillTabButtonShape</name>
      <anchorfile>classLookAndFeel__V2.html</anchorfile>
      <anchor>a1ba3028eb6e44a5eb12a994eac5d115c</anchor>
      <arglist>(TabBarButton &amp;, Graphics &amp;, const Path &amp;, bool isMouseOver, bool isMouseDown) override</arglist>
    </member>
    <member kind="function">
      <type>Button *</type>
      <name>createTabBarExtrasButton</name>
      <anchorfile>classLookAndFeel__V2.html</anchorfile>
      <anchor>a0f86e2114dbb5e782e819ad6b9739456</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawImageButton</name>
      <anchorfile>classLookAndFeel__V2.html</anchorfile>
      <anchor>a576d74e2d7f881b2901abfd4f91636e1</anchor>
      <arglist>(Graphics &amp;, Image *, int imageX, int imageY, int imageW, int imageH, const Colour &amp;overlayColour, float imageOpacity, ImageButton &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawTableHeaderBackground</name>
      <anchorfile>classLookAndFeel__V2.html</anchorfile>
      <anchor>a99d19f41f6ab9eb826bfcab625bc9359</anchor>
      <arglist>(Graphics &amp;, TableHeaderComponent &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawTableHeaderColumn</name>
      <anchorfile>classLookAndFeel__V2.html</anchorfile>
      <anchor>a19f618976a391253e9213862a8b2329c</anchor>
      <arglist>(Graphics &amp;, const String &amp;columnName, int columnId, int width, int height, bool isMouseOver, bool isMouseDown, int columnFlags) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>paintToolbarBackground</name>
      <anchorfile>classLookAndFeel__V2.html</anchorfile>
      <anchor>aa7946eae13b61465706cde65eff2aefd</anchor>
      <arglist>(Graphics &amp;, int width, int height, Toolbar &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>Button *</type>
      <name>createToolbarMissingItemsButton</name>
      <anchorfile>classLookAndFeel__V2.html</anchorfile>
      <anchor>ae8d75101edbc109e95ced5dbb781795d</anchor>
      <arglist>(Toolbar &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>paintToolbarButtonBackground</name>
      <anchorfile>classLookAndFeel__V2.html</anchorfile>
      <anchor>a88f46815e1ca478f6dc0e36fa46f4601</anchor>
      <arglist>(Graphics &amp;, int width, int height, bool isMouseOver, bool isMouseDown, ToolbarItemComponent &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>paintToolbarButtonLabel</name>
      <anchorfile>classLookAndFeel__V2.html</anchorfile>
      <anchor>a86122fd1c1ea518a559d9d902453cd4d</anchor>
      <arglist>(Graphics &amp;, int x, int y, int width, int height, const String &amp;text, ToolbarItemComponent &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawPropertyPanelSectionHeader</name>
      <anchorfile>classLookAndFeel__V2.html</anchorfile>
      <anchor>a3f80686dd914151f6f85792d381d19a5</anchor>
      <arglist>(Graphics &amp;, const String &amp;name, bool isOpen, int width, int height) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawPropertyComponentBackground</name>
      <anchorfile>classLookAndFeel__V2.html</anchorfile>
      <anchor>a85c7bce4160e6a7c9dd81dd51c2a7673</anchor>
      <arglist>(Graphics &amp;, int width, int height, PropertyComponent &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawPropertyComponentLabel</name>
      <anchorfile>classLookAndFeel__V2.html</anchorfile>
      <anchor>a624323f9e514d5020085912008346ccb</anchor>
      <arglist>(Graphics &amp;, int width, int height, PropertyComponent &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>Rectangle&lt; int &gt;</type>
      <name>getPropertyComponentContentPosition</name>
      <anchorfile>classLookAndFeel__V2.html</anchorfile>
      <anchor>a7c611cc888e92241b760273409d7d7a7</anchor>
      <arglist>(PropertyComponent &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawCallOutBoxBackground</name>
      <anchorfile>classLookAndFeel__V2.html</anchorfile>
      <anchor>ade3261abc1cff800a73ceff6273ec12e</anchor>
      <arglist>(CallOutBox &amp;, Graphics &amp;, const Path &amp;path, Image &amp;cachedImage) override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getCallOutBoxBorderSize</name>
      <anchorfile>classLookAndFeel__V2.html</anchorfile>
      <anchor>a0c4017eced71a17959e66194220471c5</anchor>
      <arglist>(const CallOutBox &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawLevelMeter</name>
      <anchorfile>classLookAndFeel__V2.html</anchorfile>
      <anchor>ab0ee2ad7d0731c89999b7eec07670b1b</anchor>
      <arglist>(Graphics &amp;, int width, int height, float level) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawKeymapChangeButton</name>
      <anchorfile>classLookAndFeel__V2.html</anchorfile>
      <anchor>aaf9c432c482b9b9c60d168215b3bc40c</anchor>
      <arglist>(Graphics &amp;, int width, int height, Button &amp;, const String &amp;keyDescription) override</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>drawBevel</name>
      <anchorfile>classLookAndFeel__V2.html</anchorfile>
      <anchor>a00feecb78a21e97b398b3a47c71f4805</anchor>
      <arglist>(Graphics &amp;, int x, int y, int width, int height, int bevelThickness, const Colour &amp;topLeftColour=Colours::white, const Colour &amp;bottomRightColour=Colours::black, bool useGradient=true, bool sharpEdgeOnOutside=true)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>drawGlassSphere</name>
      <anchorfile>classLookAndFeel__V2.html</anchorfile>
      <anchor>acaeb1ba53c73c7e58c91615904111604</anchor>
      <arglist>(Graphics &amp;, float x, float y, float diameter, const Colour &amp;, float outlineThickness) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>drawGlassPointer</name>
      <anchorfile>classLookAndFeel__V2.html</anchorfile>
      <anchor>a523fa69cb1faefce0296683cb03ded95</anchor>
      <arglist>(Graphics &amp;, float x, float y, float diameter, const Colour &amp;, float outlineThickness, int direction) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>drawGlassLozenge</name>
      <anchorfile>classLookAndFeel__V2.html</anchorfile>
      <anchor>a0558847e4843ed0bc96b934f462bf89d</anchor>
      <arglist>(Graphics &amp;, float x, float y, float width, float height, const Colour &amp;, float outlineThickness, float cornerSize, bool flatOnLeft, bool flatOnRight, bool flatOnTop, bool flatOnBottom) noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>LookAndFeel_V2</name>
    <filename>classLookAndFeel__V2.html</filename>
    <base>LookAndFeel</base>
  </compound>
  <compound kind="class">
    <name>LookAndFeel_V3</name>
    <filename>classLookAndFeel__V3.html</filename>
    <base>LookAndFeel_V2</base>
    <member kind="function">
      <type></type>
      <name>LookAndFeel_V3</name>
      <anchorfile>classLookAndFeel__V3.html</anchorfile>
      <anchor>aa857cb5f1fb8ef4a057c1eba9ad1f925</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~LookAndFeel_V3</name>
      <anchorfile>classLookAndFeel__V3.html</anchorfile>
      <anchor>a72266d63a9b2eaf12f8abb866b6ea8e7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawButtonBackground</name>
      <anchorfile>classLookAndFeel__V3.html</anchorfile>
      <anchor>ad61c38252a3344c0367064a0383cd6a9</anchor>
      <arglist>(Graphics &amp;, Button &amp;, const Colour &amp;backgroundColour, bool isMouseOverButton, bool isButtonDown) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawTableHeaderBackground</name>
      <anchorfile>classLookAndFeel__V3.html</anchorfile>
      <anchor>a1725147e26406405a2c37f272811ce8e</anchor>
      <arglist>(Graphics &amp;, TableHeaderComponent &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawTreeviewPlusMinusBox</name>
      <anchorfile>classLookAndFeel__V3.html</anchorfile>
      <anchor>ad872e20414d0c52da00c1a7b5722249d</anchor>
      <arglist>(Graphics &amp;, const Rectangle&lt; float &gt; &amp;area, Colour backgroundColour, bool isOpen, bool isMouseOver) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>areLinesDrawnForTreeView</name>
      <anchorfile>classLookAndFeel__V3.html</anchorfile>
      <anchor>a6b2e89617c2af983f9556c6f95ab35a5</anchor>
      <arglist>(TreeView &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getTreeViewIndentSize</name>
      <anchorfile>classLookAndFeel__V3.html</anchorfile>
      <anchor>ae8afecdd2acde7549a364386e9db3f65</anchor>
      <arglist>(TreeView &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>Button *</type>
      <name>createDocumentWindowButton</name>
      <anchorfile>classLookAndFeel__V3.html</anchorfile>
      <anchor>a8ea02f4c47ab16ea9e798df1105a0e65</anchor>
      <arglist>(int buttonType) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawComboBox</name>
      <anchorfile>classLookAndFeel__V3.html</anchorfile>
      <anchor>aca8e56bf541904d4991e339dbf57011c</anchor>
      <arglist>(Graphics &amp;, int width, int height, bool isButtonDown, int buttonX, int buttonY, int buttonW, int buttonH, ComboBox &amp;box) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawKeymapChangeButton</name>
      <anchorfile>classLookAndFeel__V3.html</anchorfile>
      <anchor>ab0e9dc7bacf2c8901f6c313c41d1683a</anchor>
      <arglist>(Graphics &amp;, int width, int height, Button &amp;button, const String &amp;keyDescription) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawPopupMenuBackground</name>
      <anchorfile>classLookAndFeel__V3.html</anchorfile>
      <anchor>a8e08e41f82eb7150a265815e78395c1b</anchor>
      <arglist>(Graphics &amp;, int width, int height) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawMenuBarBackground</name>
      <anchorfile>classLookAndFeel__V3.html</anchorfile>
      <anchor>abc286c47ed1ccee2eecce10a22f2face</anchor>
      <arglist>(Graphics &amp;, int width, int height, bool, MenuBarComponent &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getTabButtonOverlap</name>
      <anchorfile>classLookAndFeel__V3.html</anchorfile>
      <anchor>a4558a5ad24da013b858bbfb94575b1f1</anchor>
      <arglist>(int tabDepth) override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getTabButtonSpaceAroundImage</name>
      <anchorfile>classLookAndFeel__V3.html</anchorfile>
      <anchor>afafa048ca7871d9d23ef8ce98b02759f</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawTabButton</name>
      <anchorfile>classLookAndFeel__V3.html</anchorfile>
      <anchor>a669ce41395ec546fdbac64bbac4d9752</anchor>
      <arglist>(TabBarButton &amp;, Graphics &amp;, bool isMouseOver, bool isMouseDown) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawTabAreaBehindFrontButton</name>
      <anchorfile>classLookAndFeel__V3.html</anchorfile>
      <anchor>a5fd27af8479e49484a8cf00cc5b947b4</anchor>
      <arglist>(TabbedButtonBar &amp;bar, Graphics &amp;g, int w, int h) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawTextEditorOutline</name>
      <anchorfile>classLookAndFeel__V3.html</anchorfile>
      <anchor>a0b7a38d455aa7932c779538892fc120e</anchor>
      <arglist>(Graphics &amp;, int width, int height, TextEditor &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawStretchableLayoutResizerBar</name>
      <anchorfile>classLookAndFeel__V3.html</anchorfile>
      <anchor>a748fdb93f1cba0c8f1d3636c3937ed6d</anchor>
      <arglist>(Graphics &amp;, int w, int h, bool isVerticalBar, bool isMouseOver, bool isMouseDragging) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>areScrollbarButtonsVisible</name>
      <anchorfile>classLookAndFeel__V3.html</anchorfile>
      <anchor>a3b35e922f5f56dd1932c4ee7dc69098e</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawScrollbar</name>
      <anchorfile>classLookAndFeel__V3.html</anchorfile>
      <anchor>ae006b61af530f81db41e238c6fca093a</anchor>
      <arglist>(Graphics &amp;, ScrollBar &amp;, int x, int y, int width, int height, bool isScrollbarVertical, int thumbStartPosition, int thumbSize, bool isMouseOver, bool isMouseDown) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawLinearSlider</name>
      <anchorfile>classLookAndFeel__V3.html</anchorfile>
      <anchor>a21bd795e9bdaa44333018ec98c3a74b7</anchor>
      <arglist>(Graphics &amp;, int x, int y, int width, int height, float sliderPos, float minSliderPos, float maxSliderPos, const Slider::SliderStyle, Slider &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawLinearSliderBackground</name>
      <anchorfile>classLookAndFeel__V3.html</anchorfile>
      <anchor>a9bc360b2055d8e387dbb60718f6d62ad</anchor>
      <arglist>(Graphics &amp;, int x, int y, int width, int height, float sliderPos, float minSliderPos, float maxSliderPos, const Slider::SliderStyle, Slider &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawConcertinaPanelHeader</name>
      <anchorfile>classLookAndFeel__V3.html</anchorfile>
      <anchor>ae28231e59b5840c4a586f9dee90205a5</anchor>
      <arglist>(Graphics &amp;, const Rectangle&lt; int &gt; &amp;area, bool isMouseOver, bool isMouseDown, ConcertinaPanel &amp;, Component &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>Path</type>
      <name>getTickShape</name>
      <anchorfile>classLookAndFeel__V3.html</anchorfile>
      <anchor>a7f4548429a6b816775a111cda8d655a1</anchor>
      <arglist>(float height) override</arglist>
    </member>
    <member kind="function">
      <type>Path</type>
      <name>getCrossShape</name>
      <anchorfile>classLookAndFeel__V3.html</anchorfile>
      <anchor>a064814f31d79eb4fadb7dbacda579193</anchor>
      <arglist>(float height) override</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>createTabTextLayout</name>
      <anchorfile>classLookAndFeel__V3.html</anchorfile>
      <anchor>a33bd1c5cb3e6c9ffc2e34804c185dfa3</anchor>
      <arglist>(const TabBarButton &amp;button, float length, float depth, Colour colour, TextLayout &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>LowLevelGraphicsContext</name>
    <filename>classLowLevelGraphicsContext.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~LowLevelGraphicsContext</name>
      <anchorfile>classLowLevelGraphicsContext.html</anchorfile>
      <anchor>ae52dbd717d7336a5523e0e3106c2f8be</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isVectorDevice</name>
      <anchorfile>classLowLevelGraphicsContext.html</anchorfile>
      <anchor>a3065966f502492c5889429a13b5e45ab</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setOrigin</name>
      <anchorfile>classLowLevelGraphicsContext.html</anchorfile>
      <anchor>a882b6603af33c0ca3009542d1ec693a0</anchor>
      <arglist>(Point&lt; int &gt;)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>addTransform</name>
      <anchorfile>classLowLevelGraphicsContext.html</anchorfile>
      <anchor>acfa124281bb313900a2a84b8cfccd896</anchor>
      <arglist>(const AffineTransform &amp;)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual float</type>
      <name>getPhysicalPixelScaleFactor</name>
      <anchorfile>classLowLevelGraphicsContext.html</anchorfile>
      <anchor>ab669e2dc4e4ec570685fb92fe963b9bd</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>clipToRectangle</name>
      <anchorfile>classLowLevelGraphicsContext.html</anchorfile>
      <anchor>a14a6073347b0721a7b5646b5587d0ebc</anchor>
      <arglist>(const Rectangle&lt; int &gt; &amp;)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>clipToRectangleList</name>
      <anchorfile>classLowLevelGraphicsContext.html</anchorfile>
      <anchor>a454b5264190d357fa6d74877b478a91d</anchor>
      <arglist>(const RectangleList&lt; int &gt; &amp;)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>excludeClipRectangle</name>
      <anchorfile>classLowLevelGraphicsContext.html</anchorfile>
      <anchor>a3e116f9953846c0506f06bdc3db24822</anchor>
      <arglist>(const Rectangle&lt; int &gt; &amp;)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>clipToPath</name>
      <anchorfile>classLowLevelGraphicsContext.html</anchorfile>
      <anchor>a088c81d6d2bff0f952f990e7f673f020</anchor>
      <arglist>(const Path &amp;, const AffineTransform &amp;)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>clipToImageAlpha</name>
      <anchorfile>classLowLevelGraphicsContext.html</anchorfile>
      <anchor>a932fccae4d816596fcf137edfdeaae28</anchor>
      <arglist>(const Image &amp;, const AffineTransform &amp;)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>clipRegionIntersects</name>
      <anchorfile>classLowLevelGraphicsContext.html</anchorfile>
      <anchor>af51165492b65845517bf939db34d80ff</anchor>
      <arglist>(const Rectangle&lt; int &gt; &amp;)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Rectangle&lt; int &gt;</type>
      <name>getClipBounds</name>
      <anchorfile>classLowLevelGraphicsContext.html</anchorfile>
      <anchor>a3749b8130680e7f2f8e9f7ce313e0008</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isClipEmpty</name>
      <anchorfile>classLowLevelGraphicsContext.html</anchorfile>
      <anchor>a1bfb18f0f76a90bb5c2282777551acde</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>saveState</name>
      <anchorfile>classLowLevelGraphicsContext.html</anchorfile>
      <anchor>a254135b4a407bdbc47c4f25e70c3eaf5</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>restoreState</name>
      <anchorfile>classLowLevelGraphicsContext.html</anchorfile>
      <anchor>a873bad830decaf0de5a3a34027ce8519</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>beginTransparencyLayer</name>
      <anchorfile>classLowLevelGraphicsContext.html</anchorfile>
      <anchor>a7779642c9e50269e96906915f8dd833d</anchor>
      <arglist>(float opacity)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>endTransparencyLayer</name>
      <anchorfile>classLowLevelGraphicsContext.html</anchorfile>
      <anchor>a8ea588902423657839d8b7af248029da</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setFill</name>
      <anchorfile>classLowLevelGraphicsContext.html</anchorfile>
      <anchor>ae00e75c671efcfac2a8b395635dbfccc</anchor>
      <arglist>(const FillType &amp;)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setOpacity</name>
      <anchorfile>classLowLevelGraphicsContext.html</anchorfile>
      <anchor>aeb653f6b3473353352a0521971ee2bb7</anchor>
      <arglist>(float)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setInterpolationQuality</name>
      <anchorfile>classLowLevelGraphicsContext.html</anchorfile>
      <anchor>abf6874ef5e3a38a9d6038308385367e4</anchor>
      <arglist>(Graphics::ResamplingQuality)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>fillRect</name>
      <anchorfile>classLowLevelGraphicsContext.html</anchorfile>
      <anchor>a8ffe9daac3c6ddd2f15e47eb3d5cbc35</anchor>
      <arglist>(const Rectangle&lt; int &gt; &amp;, bool replaceExistingContents)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>fillRect</name>
      <anchorfile>classLowLevelGraphicsContext.html</anchorfile>
      <anchor>af471e989aff5bd3e4c86b4545d6216a6</anchor>
      <arglist>(const Rectangle&lt; float &gt; &amp;)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>fillRectList</name>
      <anchorfile>classLowLevelGraphicsContext.html</anchorfile>
      <anchor>acd34a9a421c19b976fa3ad5f47efe050</anchor>
      <arglist>(const RectangleList&lt; float &gt; &amp;)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>fillPath</name>
      <anchorfile>classLowLevelGraphicsContext.html</anchorfile>
      <anchor>aa0975c7b848611d85b8b86989b3715f7</anchor>
      <arglist>(const Path &amp;, const AffineTransform &amp;)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>drawImage</name>
      <anchorfile>classLowLevelGraphicsContext.html</anchorfile>
      <anchor>aef7729c9b6ae3947d94880db7158f6a3</anchor>
      <arglist>(const Image &amp;, const AffineTransform &amp;)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>drawLine</name>
      <anchorfile>classLowLevelGraphicsContext.html</anchorfile>
      <anchor>abafe1dd74afd171a2c2d9d63305d72fb</anchor>
      <arglist>(const Line&lt; float &gt; &amp;)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setFont</name>
      <anchorfile>classLowLevelGraphicsContext.html</anchorfile>
      <anchor>a526afdc4b1d087285625b272521e26d4</anchor>
      <arglist>(const Font &amp;)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const Font &amp;</type>
      <name>getFont</name>
      <anchorfile>classLowLevelGraphicsContext.html</anchorfile>
      <anchor>ad94eaf063959d06038a12ec80eeb5f84</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>drawGlyph</name>
      <anchorfile>classLowLevelGraphicsContext.html</anchorfile>
      <anchor>a3d3f13d9c087591e25f9b78da1a3ab2f</anchor>
      <arglist>(int glyphNumber, const AffineTransform &amp;)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>drawTextLayout</name>
      <anchorfile>classLowLevelGraphicsContext.html</anchorfile>
      <anchor>accf05124131ec30b12b88334b1cfd716</anchor>
      <arglist>(const AttributedString &amp;, const Rectangle&lt; float &gt; &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>LowLevelGraphicsContext</name>
      <anchorfile>classLowLevelGraphicsContext.html</anchorfile>
      <anchor>a7bc641020d6f44a15a10bde2f22a8bab</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>LowLevelGraphicsPostScriptRenderer</name>
    <filename>classLowLevelGraphicsPostScriptRenderer.html</filename>
    <base>LowLevelGraphicsContext</base>
    <class kind="struct">LowLevelGraphicsPostScriptRenderer::SavedState</class>
    <member kind="function">
      <type></type>
      <name>LowLevelGraphicsPostScriptRenderer</name>
      <anchorfile>classLowLevelGraphicsPostScriptRenderer.html</anchorfile>
      <anchor>a08206c409e9491668e7d929fd06d5391</anchor>
      <arglist>(OutputStream &amp;resultingPostScript, const String &amp;documentTitle, int totalWidth, int totalHeight)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~LowLevelGraphicsPostScriptRenderer</name>
      <anchorfile>classLowLevelGraphicsPostScriptRenderer.html</anchorfile>
      <anchor>a1fe792575e086f09de6b8b7a1d71d815</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isVectorDevice</name>
      <anchorfile>classLowLevelGraphicsPostScriptRenderer.html</anchorfile>
      <anchor>a02efb4b815121d6e7a511253ac306911</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOrigin</name>
      <anchorfile>classLowLevelGraphicsPostScriptRenderer.html</anchorfile>
      <anchor>ae901af5e1dacafeec3478d6be1b5caaa</anchor>
      <arglist>(Point&lt; int &gt;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addTransform</name>
      <anchorfile>classLowLevelGraphicsPostScriptRenderer.html</anchorfile>
      <anchor>ab923b750684b678008ec088676b08ff3</anchor>
      <arglist>(const AffineTransform &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getPhysicalPixelScaleFactor</name>
      <anchorfile>classLowLevelGraphicsPostScriptRenderer.html</anchorfile>
      <anchor>af8366e474ce8466bc4a5ef4be4881f17</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>clipToRectangle</name>
      <anchorfile>classLowLevelGraphicsPostScriptRenderer.html</anchorfile>
      <anchor>aa28d6c8e76c786d630d3ce190ab9c9e2</anchor>
      <arglist>(const Rectangle&lt; int &gt; &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>clipToRectangleList</name>
      <anchorfile>classLowLevelGraphicsPostScriptRenderer.html</anchorfile>
      <anchor>a056b46d8107a6ea8308321ef8220c7f8</anchor>
      <arglist>(const RectangleList&lt; int &gt; &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>excludeClipRectangle</name>
      <anchorfile>classLowLevelGraphicsPostScriptRenderer.html</anchorfile>
      <anchor>ad1e23e51c84641b7995b08ba56671e7c</anchor>
      <arglist>(const Rectangle&lt; int &gt; &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clipToPath</name>
      <anchorfile>classLowLevelGraphicsPostScriptRenderer.html</anchorfile>
      <anchor>a7cf0df369ea4f1a536d362f3a46d748f</anchor>
      <arglist>(const Path &amp;, const AffineTransform &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clipToImageAlpha</name>
      <anchorfile>classLowLevelGraphicsPostScriptRenderer.html</anchorfile>
      <anchor>a33fd55f843f7eb06aca5d3e97cbd5e41</anchor>
      <arglist>(const Image &amp;, const AffineTransform &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>saveState</name>
      <anchorfile>classLowLevelGraphicsPostScriptRenderer.html</anchorfile>
      <anchor>a3d64fc39281e84f48edddca560825127</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>restoreState</name>
      <anchorfile>classLowLevelGraphicsPostScriptRenderer.html</anchorfile>
      <anchor>a73c976316f90095c60465d8297bdaa10</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>beginTransparencyLayer</name>
      <anchorfile>classLowLevelGraphicsPostScriptRenderer.html</anchorfile>
      <anchor>aade6567b6bbde44f598f0c216cca1821</anchor>
      <arglist>(float) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>endTransparencyLayer</name>
      <anchorfile>classLowLevelGraphicsPostScriptRenderer.html</anchorfile>
      <anchor>aa1aeb8d03394c51f4bd9d3868dccba1f</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>clipRegionIntersects</name>
      <anchorfile>classLowLevelGraphicsPostScriptRenderer.html</anchorfile>
      <anchor>acc146f70b9ec65d9459b57424838827d</anchor>
      <arglist>(const Rectangle&lt; int &gt; &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>Rectangle&lt; int &gt;</type>
      <name>getClipBounds</name>
      <anchorfile>classLowLevelGraphicsPostScriptRenderer.html</anchorfile>
      <anchor>a2ab164ec843a33c4e5e3d2d6aa3904ed</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isClipEmpty</name>
      <anchorfile>classLowLevelGraphicsPostScriptRenderer.html</anchorfile>
      <anchor>ad35261736da9997f34161815c97b1140</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFill</name>
      <anchorfile>classLowLevelGraphicsPostScriptRenderer.html</anchorfile>
      <anchor>acb6148d8b5db2c6b0a36e2b398e78670</anchor>
      <arglist>(const FillType &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOpacity</name>
      <anchorfile>classLowLevelGraphicsPostScriptRenderer.html</anchorfile>
      <anchor>af737c0216f74bf7e7c633ea45abe859d</anchor>
      <arglist>(float) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setInterpolationQuality</name>
      <anchorfile>classLowLevelGraphicsPostScriptRenderer.html</anchorfile>
      <anchor>a530fd52322b586022407b8cfecfb2e5e</anchor>
      <arglist>(Graphics::ResamplingQuality) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fillRect</name>
      <anchorfile>classLowLevelGraphicsPostScriptRenderer.html</anchorfile>
      <anchor>a71ee3690cceec131045c430629a79c74</anchor>
      <arglist>(const Rectangle&lt; int &gt; &amp;, bool replaceExistingContents) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fillRect</name>
      <anchorfile>classLowLevelGraphicsPostScriptRenderer.html</anchorfile>
      <anchor>ada1906b99830742e6ab4948d151b9670</anchor>
      <arglist>(const Rectangle&lt; float &gt; &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fillRectList</name>
      <anchorfile>classLowLevelGraphicsPostScriptRenderer.html</anchorfile>
      <anchor>a6c0e8e73cc57b0acac180ee950e1da6e</anchor>
      <arglist>(const RectangleList&lt; float &gt; &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fillPath</name>
      <anchorfile>classLowLevelGraphicsPostScriptRenderer.html</anchorfile>
      <anchor>aaf54f92857e590dfebe93dc1ccc02509</anchor>
      <arglist>(const Path &amp;, const AffineTransform &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawImage</name>
      <anchorfile>classLowLevelGraphicsPostScriptRenderer.html</anchorfile>
      <anchor>a41143f3eb5c3215e6acf386bcd54f124</anchor>
      <arglist>(const Image &amp;, const AffineTransform &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawLine</name>
      <anchorfile>classLowLevelGraphicsPostScriptRenderer.html</anchorfile>
      <anchor>a31330c09b7ff3d94a884e8ab3ebd5015</anchor>
      <arglist>(const Line&lt; float &gt; &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>const Font &amp;</type>
      <name>getFont</name>
      <anchorfile>classLowLevelGraphicsPostScriptRenderer.html</anchorfile>
      <anchor>acfdf7fc9eb54be6f669b9e2f5530e205</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFont</name>
      <anchorfile>classLowLevelGraphicsPostScriptRenderer.html</anchorfile>
      <anchor>ab783e9bcf0fb7673839f1ef67f85e13c</anchor>
      <arglist>(const Font &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawGlyph</name>
      <anchorfile>classLowLevelGraphicsPostScriptRenderer.html</anchorfile>
      <anchor>abe714281edc8669aeb1488a057b35b7b</anchor>
      <arglist>(int glyphNumber, const AffineTransform &amp;) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>writeClip</name>
      <anchorfile>classLowLevelGraphicsPostScriptRenderer.html</anchorfile>
      <anchor>ad6a3a6f3041a02c5aac656dbd7ec2c5a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>writeColour</name>
      <anchorfile>classLowLevelGraphicsPostScriptRenderer.html</anchorfile>
      <anchor>a3960775e1e8284ca49187f19dc1f8353</anchor>
      <arglist>(Colour colour)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>writePath</name>
      <anchorfile>classLowLevelGraphicsPostScriptRenderer.html</anchorfile>
      <anchor>acf582b604ce77b776fad557ee70f84c0</anchor>
      <arglist>(const Path &amp;) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>writeXY</name>
      <anchorfile>classLowLevelGraphicsPostScriptRenderer.html</anchorfile>
      <anchor>aa55ce0492614b773c2250d7d1e37d954</anchor>
      <arglist>(float x, float y) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>writeTransform</name>
      <anchorfile>classLowLevelGraphicsPostScriptRenderer.html</anchorfile>
      <anchor>a24b9186633ea0c0db407d1c286ee9330</anchor>
      <arglist>(const AffineTransform &amp;) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>writeImage</name>
      <anchorfile>classLowLevelGraphicsPostScriptRenderer.html</anchorfile>
      <anchor>a885d39d9b28cd09538e07ba53ae005cc</anchor>
      <arglist>(const Image &amp;, int sx, int sy, int maxW, int maxH) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>OutputStream &amp;</type>
      <name>out</name>
      <anchorfile>classLowLevelGraphicsPostScriptRenderer.html</anchorfile>
      <anchor>abda44d72a9730c4b62ce3a7a2fbc8bcb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>totalWidth</name>
      <anchorfile>classLowLevelGraphicsPostScriptRenderer.html</anchorfile>
      <anchor>a0fa5658fdc5f8c2fb801ab7dba117f84</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>totalHeight</name>
      <anchorfile>classLowLevelGraphicsPostScriptRenderer.html</anchorfile>
      <anchor>a842f2dc876aeebb14cc27e3faee70735</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>needToClip</name>
      <anchorfile>classLowLevelGraphicsPostScriptRenderer.html</anchorfile>
      <anchor>a75772619fb8c5d185cd82b48ee46822e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Colour</type>
      <name>lastColour</name>
      <anchorfile>classLowLevelGraphicsPostScriptRenderer.html</anchorfile>
      <anchor>af380fa0611c3ca97a4cb2925a228bbd6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>OwnedArray&lt; SavedState &gt;</type>
      <name>stateStack</name>
      <anchorfile>classLowLevelGraphicsPostScriptRenderer.html</anchorfile>
      <anchor>a95a55fd1cd7588048a37ac86fa384849</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>LowLevelGraphicsPostScriptRenderer::SavedState</name>
    <filename>structLowLevelGraphicsPostScriptRenderer_1_1SavedState.html</filename>
    <member kind="function">
      <type></type>
      <name>SavedState</name>
      <anchorfile>structLowLevelGraphicsPostScriptRenderer_1_1SavedState.html</anchorfile>
      <anchor>a45d789ecb774106d92269b21cf1591c5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SavedState</name>
      <anchorfile>structLowLevelGraphicsPostScriptRenderer_1_1SavedState.html</anchorfile>
      <anchor>a94b080a2305995c6bb5796a705287bcd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>RectangleList&lt; int &gt;</type>
      <name>clip</name>
      <anchorfile>structLowLevelGraphicsPostScriptRenderer_1_1SavedState.html</anchorfile>
      <anchor>aa5fb5398ec25f56561c71a4792aa51fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>xOffset</name>
      <anchorfile>structLowLevelGraphicsPostScriptRenderer_1_1SavedState.html</anchorfile>
      <anchor>a10d46be69faae4c3c27ae95dfac5a713</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>yOffset</name>
      <anchorfile>structLowLevelGraphicsPostScriptRenderer_1_1SavedState.html</anchorfile>
      <anchor>a0f4d17295aea556882e47a9a8b07b9cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FillType</type>
      <name>fillType</name>
      <anchorfile>structLowLevelGraphicsPostScriptRenderer_1_1SavedState.html</anchorfile>
      <anchor>a36435de04c6937319a263ddbf37d3f2c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Font</type>
      <name>font</name>
      <anchorfile>structLowLevelGraphicsPostScriptRenderer_1_1SavedState.html</anchorfile>
      <anchor>a350201db969d79ab1783c0bde1030469</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>LowLevelGraphicsSoftwareRenderer</name>
    <filename>classLowLevelGraphicsSoftwareRenderer.html</filename>
    <member kind="function">
      <type></type>
      <name>LowLevelGraphicsSoftwareRenderer</name>
      <anchorfile>classLowLevelGraphicsSoftwareRenderer.html</anchorfile>
      <anchor>a96db3b90ab25c63c03481269f946789f</anchor>
      <arglist>(const Image &amp;imageToRenderOnto)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LowLevelGraphicsSoftwareRenderer</name>
      <anchorfile>classLowLevelGraphicsSoftwareRenderer.html</anchorfile>
      <anchor>a7aefed20c13bb541a35f168ccca5355d</anchor>
      <arglist>(const Image &amp;imageToRenderOnto, Point&lt; int &gt; origin, const RectangleList&lt; int &gt; &amp;initialClip)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~LowLevelGraphicsSoftwareRenderer</name>
      <anchorfile>classLowLevelGraphicsSoftwareRenderer.html</anchorfile>
      <anchor>aa1594e25b78ce4f55d1a4c785fdce3ba</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>LuaTokeniser</name>
    <filename>classLuaTokeniser.html</filename>
    <base>CodeTokeniser</base>
    <member kind="enumeration">
      <type></type>
      <name>TokenType</name>
      <anchorfile>classLuaTokeniser.html</anchorfile>
      <anchor>a6acf67b2015d8048909908ad2aa1f920</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>tokenType_error</name>
      <anchorfile>classLuaTokeniser.html</anchorfile>
      <anchor>a6acf67b2015d8048909908ad2aa1f920a17282505131d0a9a837809e7f443f420</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>tokenType_comment</name>
      <anchorfile>classLuaTokeniser.html</anchorfile>
      <anchor>a6acf67b2015d8048909908ad2aa1f920a0d0382908ad88fcce43d47be0d7c53c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>tokenType_keyword</name>
      <anchorfile>classLuaTokeniser.html</anchorfile>
      <anchor>a6acf67b2015d8048909908ad2aa1f920a49852afdfdd808773b7fbd6e8f9bb865</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>tokenType_operator</name>
      <anchorfile>classLuaTokeniser.html</anchorfile>
      <anchor>a6acf67b2015d8048909908ad2aa1f920a6a999c29fd794e2dca399bedad7c4377</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>tokenType_identifier</name>
      <anchorfile>classLuaTokeniser.html</anchorfile>
      <anchor>a6acf67b2015d8048909908ad2aa1f920a4aa7466a95690598977f4cd162fa0c98</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>tokenType_integer</name>
      <anchorfile>classLuaTokeniser.html</anchorfile>
      <anchor>a6acf67b2015d8048909908ad2aa1f920aeea9db8ac3df93a8f2bde4accea9fd2e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>tokenType_float</name>
      <anchorfile>classLuaTokeniser.html</anchorfile>
      <anchor>a6acf67b2015d8048909908ad2aa1f920a87705e20e39afe1f5ad1a3fb5f85b546</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>tokenType_string</name>
      <anchorfile>classLuaTokeniser.html</anchorfile>
      <anchor>a6acf67b2015d8048909908ad2aa1f920ad56af2611698619994f4e80eb87ef034</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>tokenType_bracket</name>
      <anchorfile>classLuaTokeniser.html</anchorfile>
      <anchor>a6acf67b2015d8048909908ad2aa1f920af33712d6ec0fa7160c7e8b822ca8d175</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>tokenType_punctuation</name>
      <anchorfile>classLuaTokeniser.html</anchorfile>
      <anchor>a6acf67b2015d8048909908ad2aa1f920a7b99505f4e5b35d48f69a60a3720b49a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LuaTokeniser</name>
      <anchorfile>classLuaTokeniser.html</anchorfile>
      <anchor>a0f35035e1fd1327e364add2fb243013a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~LuaTokeniser</name>
      <anchorfile>classLuaTokeniser.html</anchorfile>
      <anchor>a433abb5068dfd59fefdbaff4a56341ff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>readNextToken</name>
      <anchorfile>classLuaTokeniser.html</anchorfile>
      <anchor>a6ef2649f291445b2e21021bb5c3b00e1</anchor>
      <arglist>(CodeDocument::Iterator &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>CodeEditorComponent::ColourScheme</type>
      <name>getDefaultColourScheme</name>
      <anchorfile>classLuaTokeniser.html</anchorfile>
      <anchor>a386c3e788d6be438df257825f00f8774</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MACAddress</name>
    <filename>classMACAddress.html</filename>
    <member kind="function">
      <type></type>
      <name>MACAddress</name>
      <anchorfile>classMACAddress.html</anchorfile>
      <anchor>ac7f1c6ac15784eedec58c4d4113a6042</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MACAddress</name>
      <anchorfile>classMACAddress.html</anchorfile>
      <anchor>ae813dc932cc82e5687e45c77abb738c2</anchor>
      <arglist>(const MACAddress &amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>MACAddress &amp;</type>
      <name>operator=</name>
      <anchorfile>classMACAddress.html</anchorfile>
      <anchor>a5b6d32f19c98a86a270739e304a27c38</anchor>
      <arglist>(const MACAddress &amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MACAddress</name>
      <anchorfile>classMACAddress.html</anchorfile>
      <anchor>a8a8f0ab91c941fe7018b545500ef1f61</anchor>
      <arglist>(const uint8 bytes[6]) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MACAddress</name>
      <anchorfile>classMACAddress.html</anchorfile>
      <anchor>a6c5457952fdaedf5edde34d1bf3fdbf2</anchor>
      <arglist>(StringRef address)</arglist>
    </member>
    <member kind="function">
      <type>const uint8 *</type>
      <name>getBytes</name>
      <anchorfile>classMACAddress.html</anchorfile>
      <anchor>abcfe7ffd43b048fb7ff09e5029898933</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>toString</name>
      <anchorfile>classMACAddress.html</anchorfile>
      <anchor>a2288e82d87329833ec16dacba2290540</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>toString</name>
      <anchorfile>classMACAddress.html</anchorfile>
      <anchor>ab2ca54a0ccb1b140c88cc095750d5416</anchor>
      <arglist>(StringRef separator) const </arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>toInt64</name>
      <anchorfile>classMACAddress.html</anchorfile>
      <anchor>a6f760036561796c4abf45a7f86454b33</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNull</name>
      <anchorfile>classMACAddress.html</anchorfile>
      <anchor>a999d550f9a74abb93229d00d5fb38aa7</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classMACAddress.html</anchorfile>
      <anchor>a9ef36653cdc13b8451e05ec11ae81918</anchor>
      <arglist>(const MACAddress &amp;) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classMACAddress.html</anchorfile>
      <anchor>a195582004cb5ac6f2c7127aad956f9c1</anchor>
      <arglist>(const MACAddress &amp;) const noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>findAllAddresses</name>
      <anchorfile>classMACAddress.html</anchorfile>
      <anchor>a85000063afc46f503a7a22d13cc49e3a</anchor>
      <arglist>(Array&lt; MACAddress &gt; &amp;results)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MarkerList</name>
    <filename>classMarkerList.html</filename>
    <class kind="class">MarkerList::Listener</class>
    <class kind="class">MarkerList::Marker</class>
    <class kind="class">MarkerList::ValueTreeWrapper</class>
    <member kind="function">
      <type></type>
      <name>MarkerList</name>
      <anchorfile>classMarkerList.html</anchorfile>
      <anchor>aec769d5fe4ed37fac5093d0b420a06c8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MarkerList</name>
      <anchorfile>classMarkerList.html</anchorfile>
      <anchor>a95679c0bfa25319d327173afc441c6bc</anchor>
      <arglist>(const MarkerList &amp;)</arglist>
    </member>
    <member kind="function">
      <type>MarkerList &amp;</type>
      <name>operator=</name>
      <anchorfile>classMarkerList.html</anchorfile>
      <anchor>a8c6f807e9053d155cf045edf2119fc72</anchor>
      <arglist>(const MarkerList &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~MarkerList</name>
      <anchorfile>classMarkerList.html</anchorfile>
      <anchor>a3c564a517aa72ffeee0f5c16f4b5f0e6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumMarkers</name>
      <anchorfile>classMarkerList.html</anchorfile>
      <anchor>a3e1a4fc0d6b65838f3f7a737aaec7ddc</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const Marker *</type>
      <name>getMarker</name>
      <anchorfile>classMarkerList.html</anchorfile>
      <anchor>a1388805e9a795035f016b5e48fad22c5</anchor>
      <arglist>(int index) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const Marker *</type>
      <name>getMarker</name>
      <anchorfile>classMarkerList.html</anchorfile>
      <anchor>ad5d509facf46e1333f9c0ade028e5356</anchor>
      <arglist>(const String &amp;name) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getMarkerPosition</name>
      <anchorfile>classMarkerList.html</anchorfile>
      <anchor>ab24986317f17d5d2f5a2a56a95f72154</anchor>
      <arglist>(const Marker &amp;marker, Component *parentComponent) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMarker</name>
      <anchorfile>classMarkerList.html</anchorfile>
      <anchor>a94cab6b8076345f32a65bdac9f5f0544</anchor>
      <arglist>(const String &amp;name, const RelativeCoordinate &amp;position)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeMarker</name>
      <anchorfile>classMarkerList.html</anchorfile>
      <anchor>ae03909a6ec94bb19d68567cc3d5dcea4</anchor>
      <arglist>(int index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeMarker</name>
      <anchorfile>classMarkerList.html</anchorfile>
      <anchor>a5590053217d116a36637c85e0029bdcc</anchor>
      <arglist>(const String &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classMarkerList.html</anchorfile>
      <anchor>a675e90dec70da027f29129428dbfa0a1</anchor>
      <arglist>(const MarkerList &amp;) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classMarkerList.html</anchorfile>
      <anchor>a9d9d951040b0accf3ed5924c94d26857</anchor>
      <arglist>(const MarkerList &amp;) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addListener</name>
      <anchorfile>classMarkerList.html</anchorfile>
      <anchor>a69ebc97778614b8abe46134f2bd4fe14</anchor>
      <arglist>(Listener *listener)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeListener</name>
      <anchorfile>classMarkerList.html</anchorfile>
      <anchor>a8b63e66800748ca8a426fb1a46ee078b</anchor>
      <arglist>(Listener *listener)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>markersHaveChanged</name>
      <anchorfile>classMarkerList.html</anchorfile>
      <anchor>a0b8a4773fabc9941f3b1cfd7edde342e</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MarkerList::Listener</name>
    <filename>classMarkerList_1_1Listener.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Listener</name>
      <anchorfile>classMarkerList_1_1Listener.html</anchorfile>
      <anchor>a784097c6e76bc9ccada894cc1746b3ba</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>markersChanged</name>
      <anchorfile>classMarkerList_1_1Listener.html</anchorfile>
      <anchor>ace4f10849b4f4d2d7c311ad9a2fad7c8</anchor>
      <arglist>(MarkerList *markerList)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>markerListBeingDeleted</name>
      <anchorfile>classMarkerList_1_1Listener.html</anchorfile>
      <anchor>a1366341c47f066cfb5798504fb75ff8c</anchor>
      <arglist>(MarkerList *markerList)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MarkerList::Marker</name>
    <filename>classMarkerList_1_1Marker.html</filename>
    <member kind="function">
      <type></type>
      <name>Marker</name>
      <anchorfile>classMarkerList_1_1Marker.html</anchorfile>
      <anchor>a99c9190cd11eecb615d20a93c38075b3</anchor>
      <arglist>(const Marker &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Marker</name>
      <anchorfile>classMarkerList_1_1Marker.html</anchorfile>
      <anchor>a5f504ecd66bdf1cfa2cd6350223bbc52</anchor>
      <arglist>(const String &amp;name, const RelativeCoordinate &amp;position)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classMarkerList_1_1Marker.html</anchorfile>
      <anchor>ad085731af17b15bcd128b9a970442145</anchor>
      <arglist>(const Marker &amp;) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classMarkerList_1_1Marker.html</anchorfile>
      <anchor>a7d4ba6d144551045511c75d4cf3f36b1</anchor>
      <arglist>(const Marker &amp;) const noexcept</arglist>
    </member>
    <member kind="variable">
      <type>String</type>
      <name>name</name>
      <anchorfile>classMarkerList_1_1Marker.html</anchorfile>
      <anchor>af3b200d9580dfe7fd665ee5820a5ed0d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RelativeCoordinate</type>
      <name>position</name>
      <anchorfile>classMarkerList_1_1Marker.html</anchorfile>
      <anchor>a22c96e38c72f6b18a164ed0fa0b0eb0b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MarkerList::ValueTreeWrapper</name>
    <filename>classMarkerList_1_1ValueTreeWrapper.html</filename>
    <member kind="function">
      <type></type>
      <name>ValueTreeWrapper</name>
      <anchorfile>classMarkerList_1_1ValueTreeWrapper.html</anchorfile>
      <anchor>ac07bbc3655da644dc6b5ab6fcfd8b6de</anchor>
      <arglist>(const ValueTree &amp;state)</arglist>
    </member>
    <member kind="function">
      <type>ValueTree &amp;</type>
      <name>getState</name>
      <anchorfile>classMarkerList_1_1ValueTreeWrapper.html</anchorfile>
      <anchor>a135fc8bc4723096d6f384eba5e8526a7</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumMarkers</name>
      <anchorfile>classMarkerList_1_1ValueTreeWrapper.html</anchorfile>
      <anchor>a7e41771a8473d0ff72ae07bd1a995043</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ValueTree</type>
      <name>getMarkerState</name>
      <anchorfile>classMarkerList_1_1ValueTreeWrapper.html</anchorfile>
      <anchor>a4b923a2d493b7a579656bf6108f3113f</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function">
      <type>ValueTree</type>
      <name>getMarkerState</name>
      <anchorfile>classMarkerList_1_1ValueTreeWrapper.html</anchorfile>
      <anchor>a866747fc701bd7d496a6a37639ee0b47</anchor>
      <arglist>(const String &amp;name) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>containsMarker</name>
      <anchorfile>classMarkerList_1_1ValueTreeWrapper.html</anchorfile>
      <anchor>a0f67689c093ff40a6d6fb469f0a2cb01</anchor>
      <arglist>(const ValueTree &amp;state) const </arglist>
    </member>
    <member kind="function">
      <type>MarkerList::Marker</type>
      <name>getMarker</name>
      <anchorfile>classMarkerList_1_1ValueTreeWrapper.html</anchorfile>
      <anchor>af7f1896cb986999a8fc773ea5b68ff06</anchor>
      <arglist>(const ValueTree &amp;state) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMarker</name>
      <anchorfile>classMarkerList_1_1ValueTreeWrapper.html</anchorfile>
      <anchor>a03a72327258884ba74656f088d71044f</anchor>
      <arglist>(const MarkerList::Marker &amp;marker, UndoManager *undoManager)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeMarker</name>
      <anchorfile>classMarkerList_1_1ValueTreeWrapper.html</anchorfile>
      <anchor>af6d105d45ded3ab7a10e984fecf2f547</anchor>
      <arglist>(const ValueTree &amp;state, UndoManager *undoManager)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyTo</name>
      <anchorfile>classMarkerList_1_1ValueTreeWrapper.html</anchorfile>
      <anchor>ac76fe73807d07580b66c4d64e23e516b</anchor>
      <arglist>(MarkerList &amp;markerList)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>readFrom</name>
      <anchorfile>classMarkerList_1_1ValueTreeWrapper.html</anchorfile>
      <anchor>a78d4f5624dcd2b9c5b03d09bbbc5689b</anchor>
      <arglist>(const MarkerList &amp;markerList, UndoManager *undoManager)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Identifier</type>
      <name>markerTag</name>
      <anchorfile>classMarkerList_1_1ValueTreeWrapper.html</anchorfile>
      <anchor>a6ee3f514e213161c74b047b9bc6011d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Identifier</type>
      <name>nameProperty</name>
      <anchorfile>classMarkerList_1_1ValueTreeWrapper.html</anchorfile>
      <anchor>a896618b21ad5b4670845cea9fa176920</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Identifier</type>
      <name>posProperty</name>
      <anchorfile>classMarkerList_1_1ValueTreeWrapper.html</anchorfile>
      <anchor>aea00685271d757b553f1e4796b07156c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Matrix3D</name>
    <filename>classMatrix3D.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>Matrix3D</name>
      <anchorfile>classMatrix3D.html</anchorfile>
      <anchor>abff2f7b90514911e716c28b4a45f62b1</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix3D</name>
      <anchorfile>classMatrix3D.html</anchorfile>
      <anchor>ab1217941d2532ab0576c592f64784e4b</anchor>
      <arglist>(const Matrix3D &amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Matrix3D &amp;</type>
      <name>operator=</name>
      <anchorfile>classMatrix3D.html</anchorfile>
      <anchor>ab862a0f5aa487664c87aa491e98f45c4</anchor>
      <arglist>(const Matrix3D &amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix3D</name>
      <anchorfile>classMatrix3D.html</anchorfile>
      <anchor>ada20a058ce0354f5c61aace9400a8a82</anchor>
      <arglist>(const Type &amp;m00, const Type &amp;m10, const Type &amp;m20, const Type &amp;m30, const Type &amp;m01, const Type &amp;m11, const Type &amp;m21, const Type &amp;m31, const Type &amp;m02, const Type &amp;m12, const Type &amp;m22, const Type &amp;m32, const Type &amp;m03, const Type &amp;m13, const Type &amp;m23, const Type &amp;m33) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix3D</name>
      <anchorfile>classMatrix3D.html</anchorfile>
      <anchor>adea8dbce2ba1c50f3a6da8ee7326f2ed</anchor>
      <arglist>(const Type *values) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix3D</name>
      <anchorfile>classMatrix3D.html</anchorfile>
      <anchor>a05918505e2adf83c18ea1e03e21d5b7b</anchor>
      <arglist>(const AffineTransform &amp;transform) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix3D</name>
      <anchorfile>classMatrix3D.html</anchorfile>
      <anchor>a72fe46a33ee86bd9496e8518915b525c</anchor>
      <arglist>(Vector3D&lt; Type &gt; vector) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Matrix3D &amp;</type>
      <name>operator*=</name>
      <anchorfile>classMatrix3D.html</anchorfile>
      <anchor>a16589b8c3b7982cd1365c113dd260268</anchor>
      <arglist>(const Matrix3D &amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Matrix3D</type>
      <name>operator*</name>
      <anchorfile>classMatrix3D.html</anchorfile>
      <anchor>af89a13390868a61a007cefc53907900e</anchor>
      <arglist>(const Matrix3D &amp;other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Matrix3D</type>
      <name>rotated</name>
      <anchorfile>classMatrix3D.html</anchorfile>
      <anchor>a6418dcab1627ad307aa5a1f71f77c071</anchor>
      <arglist>(Vector3D&lt; Type &gt; eulerAngleRadians) const noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Matrix3D</type>
      <name>fromFrustum</name>
      <anchorfile>classMatrix3D.html</anchorfile>
      <anchor>af40888ae716dfc6db996412e4322773c</anchor>
      <arglist>(Type left, Type right, Type bottom, Type top, Type nearDistance, Type farDistance) noexcept</arglist>
    </member>
    <member kind="variable">
      <type>Type</type>
      <name>mat</name>
      <anchorfile>classMatrix3D.html</anchorfile>
      <anchor>ad7e9eecc94c0a33a029a5de12c5c056b</anchor>
      <arglist>[16]</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MD5</name>
    <filename>classMD5.html</filename>
    <member kind="function">
      <type></type>
      <name>MD5</name>
      <anchorfile>classMD5.html</anchorfile>
      <anchor>af5ff29c71d5f4e3229158714ea86f991</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MD5</name>
      <anchorfile>classMD5.html</anchorfile>
      <anchor>a16d95bd9011aa55a0cce3afa4da53761</anchor>
      <arglist>(const MD5 &amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>MD5 &amp;</type>
      <name>operator=</name>
      <anchorfile>classMD5.html</anchorfile>
      <anchor>a444c20b317cd76d869a4a3e608cfc4b3</anchor>
      <arglist>(const MD5 &amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MD5</name>
      <anchorfile>classMD5.html</anchorfile>
      <anchor>a7fd71970b31ddbfd161f07667bad1c52</anchor>
      <arglist>(const MemoryBlock &amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MD5</name>
      <anchorfile>classMD5.html</anchorfile>
      <anchor>aa06bf7f26ba7ffcb27f8b7ab58f6656a</anchor>
      <arglist>(const void *data, size_t numBytes) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MD5</name>
      <anchorfile>classMD5.html</anchorfile>
      <anchor>aeace778a72301d24a79b8519e1dcedbd</anchor>
      <arglist>(InputStream &amp;input, int64 numBytesToRead=-1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MD5</name>
      <anchorfile>classMD5.html</anchorfile>
      <anchor>a01737d5089c406e950c828fb446988b2</anchor>
      <arglist>(const File &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MD5</name>
      <anchorfile>classMD5.html</anchorfile>
      <anchor>a2360f8a31ab690b853c18e6fa383b21b</anchor>
      <arglist>(CharPointer_UTF8 utf8Text) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~MD5</name>
      <anchorfile>classMD5.html</anchorfile>
      <anchor>ae8c0b386b7f6b7ac3e6f89a50884fe32</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>MemoryBlock</type>
      <name>getRawChecksumData</name>
      <anchorfile>classMD5.html</anchorfile>
      <anchor>ad69844e36b717ab29e2a11634453c6fe</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const uint8 *</type>
      <name>getChecksumDataArray</name>
      <anchorfile>classMD5.html</anchorfile>
      <anchor>a4b60fc21b3008e6ed75c20828b15cbb8</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>toHexString</name>
      <anchorfile>classMD5.html</anchorfile>
      <anchor>af1c9da20d349083318efcb7d988ab6b8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classMD5.html</anchorfile>
      <anchor>ac9e9dfb6104e724f92d97f42aa479bad</anchor>
      <arglist>(const MD5 &amp;) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classMD5.html</anchorfile>
      <anchor>a8329542849c3e6d453d3963f7ca8e118</anchor>
      <arglist>(const MD5 &amp;) const noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MD5</type>
      <name>fromUTF32</name>
      <anchorfile>classMD5.html</anchorfile>
      <anchor>a6d30a2d1a5e3ef9218ae8e3baca2d618</anchor>
      <arglist>(StringRef)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MemoryBlock</name>
    <filename>classMemoryBlock.html</filename>
    <member kind="function">
      <type></type>
      <name>MemoryBlock</name>
      <anchorfile>classMemoryBlock.html</anchorfile>
      <anchor>ac01749da15e7970e88e877a4dfac07bc</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MemoryBlock</name>
      <anchorfile>classMemoryBlock.html</anchorfile>
      <anchor>a922d11a5bf4d47cf31e224f98a9a3c79</anchor>
      <arglist>(const size_t initialSize, bool initialiseToZero=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MemoryBlock</name>
      <anchorfile>classMemoryBlock.html</anchorfile>
      <anchor>a098894f12a8754e0f464056689c7fefe</anchor>
      <arglist>(const MemoryBlock &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MemoryBlock</name>
      <anchorfile>classMemoryBlock.html</anchorfile>
      <anchor>aa338e73761a208455554559cf3336fab</anchor>
      <arglist>(const void *dataToInitialiseFrom, size_t sizeInBytes)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~MemoryBlock</name>
      <anchorfile>classMemoryBlock.html</anchorfile>
      <anchor>aa6d4a35c7a288f4333201f82ca52658b</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>MemoryBlock &amp;</type>
      <name>operator=</name>
      <anchorfile>classMemoryBlock.html</anchorfile>
      <anchor>a0c8684688e136ac2bb8491a46735577a</anchor>
      <arglist>(const MemoryBlock &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MemoryBlock</name>
      <anchorfile>classMemoryBlock.html</anchorfile>
      <anchor>ae323b3939e21add971c66c2aa45b21be</anchor>
      <arglist>(MemoryBlock &amp;&amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>MemoryBlock &amp;</type>
      <name>operator=</name>
      <anchorfile>classMemoryBlock.html</anchorfile>
      <anchor>afcdf73f0919bc3938006ba8fe4e397be</anchor>
      <arglist>(MemoryBlock &amp;&amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classMemoryBlock.html</anchorfile>
      <anchor>a308c24cd090e0a90752387fba08df7c3</anchor>
      <arglist>(const MemoryBlock &amp;other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classMemoryBlock.html</anchorfile>
      <anchor>a95e5067680bd24d97e988537d93c9530</anchor>
      <arglist>(const MemoryBlock &amp;other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>matches</name>
      <anchorfile>classMemoryBlock.html</anchorfile>
      <anchor>a5fca2456a2660c460077d73bbc7fb226</anchor>
      <arglist>(const void *data, size_t dataSize) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>getData</name>
      <anchorfile>classMemoryBlock.html</anchorfile>
      <anchor>ae3473f5770e3a31357c6eeb04f9cc7e8</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>char &amp;</type>
      <name>operator[]</name>
      <anchorfile>classMemoryBlock.html</anchorfile>
      <anchor>ae75cf1dc7703f2e00589d2bee9ba9de4</anchor>
      <arglist>(const Type offset) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>char *</type>
      <name>begin</name>
      <anchorfile>classMemoryBlock.html</anchorfile>
      <anchor>a123890120ed86978830b6374739fd166</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>char *</type>
      <name>end</name>
      <anchorfile>classMemoryBlock.html</anchorfile>
      <anchor>a564a48ee18de96ff8571e1ddfff9e898</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>getSize</name>
      <anchorfile>classMemoryBlock.html</anchorfile>
      <anchor>a7192f6e8a3f06c4476ddca1fe2ed7bfb</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSize</name>
      <anchorfile>classMemoryBlock.html</anchorfile>
      <anchor>a447eb5fbd59a587951fe0ef8b73f2a2f</anchor>
      <arglist>(const size_t newSize, bool initialiseNewSpaceToZero=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ensureSize</name>
      <anchorfile>classMemoryBlock.html</anchorfile>
      <anchor>a62cb5792aa70e8eb83d96fce1fa7a51d</anchor>
      <arglist>(const size_t minimumSize, bool initialiseNewSpaceToZero=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classMemoryBlock.html</anchorfile>
      <anchor>a6c08083ae75b47186d20c7b591c56073</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fillWith</name>
      <anchorfile>classMemoryBlock.html</anchorfile>
      <anchor>af1a5b9c93434edf34464d4fd5b046df5</anchor>
      <arglist>(uint8 valueToUse) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>append</name>
      <anchorfile>classMemoryBlock.html</anchorfile>
      <anchor>af54e9ebd64519e0b5e67ebc483a26200</anchor>
      <arglist>(const void *data, size_t numBytes)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>replaceWith</name>
      <anchorfile>classMemoryBlock.html</anchorfile>
      <anchor>ad396877d63f2a45095535895a9b5071f</anchor>
      <arglist>(const void *data, size_t numBytes)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insert</name>
      <anchorfile>classMemoryBlock.html</anchorfile>
      <anchor>af5c3c4addd27e9c7a9adfbc0466080e2</anchor>
      <arglist>(const void *dataToInsert, size_t numBytesToInsert, size_t insertPosition)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeSection</name>
      <anchorfile>classMemoryBlock.html</anchorfile>
      <anchor>a7fb654675288d40483f9150ffd38e16a</anchor>
      <arglist>(size_t startByte, size_t numBytesToRemove)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyFrom</name>
      <anchorfile>classMemoryBlock.html</anchorfile>
      <anchor>a31d3f1d7a0269229c5f0c36ab0b9dc40</anchor>
      <arglist>(const void *srcData, int destinationOffset, size_t numBytes) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyTo</name>
      <anchorfile>classMemoryBlock.html</anchorfile>
      <anchor>aacda2afa6101956c2c66ebca93c42c36</anchor>
      <arglist>(void *destData, int sourceOffset, size_t numBytes) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swapWith</name>
      <anchorfile>classMemoryBlock.html</anchorfile>
      <anchor>a9cfd6e1987101fb2903bd6988933f8ce</anchor>
      <arglist>(MemoryBlock &amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>toString</name>
      <anchorfile>classMemoryBlock.html</anchorfile>
      <anchor>ab1624f3d46df7c3568c81d08b9c62346</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>loadFromHexString</name>
      <anchorfile>classMemoryBlock.html</anchorfile>
      <anchor>a8440655ca6913fe607b44c6169af2273</anchor>
      <arglist>(StringRef sourceHexString)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBitRange</name>
      <anchorfile>classMemoryBlock.html</anchorfile>
      <anchor>af3c473a086ecae12702ef5094c4c06fa</anchor>
      <arglist>(size_t bitRangeStart, size_t numBits, int binaryNumberToApply) noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getBitRange</name>
      <anchorfile>classMemoryBlock.html</anchorfile>
      <anchor>afd81e1ac31bef25bbb2f4dc5a6865a15</anchor>
      <arglist>(size_t bitRangeStart, size_t numBitsToRead) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>toBase64Encoding</name>
      <anchorfile>classMemoryBlock.html</anchorfile>
      <anchor>a69724db38afce62092e39171edc77fea</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>fromBase64Encoding</name>
      <anchorfile>classMemoryBlock.html</anchorfile>
      <anchor>ae9b274b678bd4bdbfb64fec6c1c35e58</anchor>
      <arglist>(StringRef encodedString)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MemoryInputStream</name>
    <filename>classMemoryInputStream.html</filename>
    <base>InputStream</base>
    <member kind="function">
      <type></type>
      <name>MemoryInputStream</name>
      <anchorfile>classMemoryInputStream.html</anchorfile>
      <anchor>a31c23dcffd260d093e1393dc041c1645</anchor>
      <arglist>(const void *sourceData, size_t sourceDataSize, bool keepInternalCopyOfData)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MemoryInputStream</name>
      <anchorfile>classMemoryInputStream.html</anchorfile>
      <anchor>a27eb51bcd71517ffcc20c8f3c49481d7</anchor>
      <arglist>(const MemoryBlock &amp;data, bool keepInternalCopyOfData)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~MemoryInputStream</name>
      <anchorfile>classMemoryInputStream.html</anchorfile>
      <anchor>a9ed7a136a3c0b06d98eb79c4f02acaeb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const void *</type>
      <name>getData</name>
      <anchorfile>classMemoryInputStream.html</anchorfile>
      <anchor>a5a63ec1c561d4fc257b0ff65907f71a6</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>getDataSize</name>
      <anchorfile>classMemoryInputStream.html</anchorfile>
      <anchor>aca7db79c18dbd0d425249aef22b22ba3</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>getPosition</name>
      <anchorfile>classMemoryInputStream.html</anchorfile>
      <anchor>a31a7143622ba1c58be942b2c7d360a59</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setPosition</name>
      <anchorfile>classMemoryInputStream.html</anchorfile>
      <anchor>a2eca865569cbeef5200efa07ec015c2b</anchor>
      <arglist>(int64 pos) override</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>getTotalLength</name>
      <anchorfile>classMemoryInputStream.html</anchorfile>
      <anchor>ac1c6d007a1bb1812083558bb5d7878c4</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isExhausted</name>
      <anchorfile>classMemoryInputStream.html</anchorfile>
      <anchor>a7a8388329149a66a00e73734fbb303d5</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>read</name>
      <anchorfile>classMemoryInputStream.html</anchorfile>
      <anchor>a86d8876c0c32633f42e232435e21ebaa</anchor>
      <arglist>(void *destBuffer, int maxBytesToRead) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MemoryMappedAudioFormatReader</name>
    <filename>classMemoryMappedAudioFormatReader.html</filename>
    <base>AudioFormatReader</base>
    <member kind="function">
      <type>const File &amp;</type>
      <name>getFile</name>
      <anchorfile>classMemoryMappedAudioFormatReader.html</anchorfile>
      <anchor>af5804c8f3844dbc301748f97076f4113</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>mapEntireFile</name>
      <anchorfile>classMemoryMappedAudioFormatReader.html</anchorfile>
      <anchor>a857ab88ffdc45bb42ca1468ce2b17e35</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>mapSectionOfFile</name>
      <anchorfile>classMemoryMappedAudioFormatReader.html</anchorfile>
      <anchor>aee6db6421fa50c948b724fd362359bf9</anchor>
      <arglist>(Range&lt; int64 &gt; samplesToMap)</arglist>
    </member>
    <member kind="function">
      <type>Range&lt; int64 &gt;</type>
      <name>getMappedSection</name>
      <anchorfile>classMemoryMappedAudioFormatReader.html</anchorfile>
      <anchor>a540e94883cb7ba8eea8b079953df7950</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>touchSample</name>
      <anchorfile>classMemoryMappedAudioFormatReader.html</anchorfile>
      <anchor>aa0b7e5c5379211e77440b7b4203835d7</anchor>
      <arglist>(int64 sample) const noexcept</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>getSample</name>
      <anchorfile>classMemoryMappedAudioFormatReader.html</anchorfile>
      <anchor>aeda016469797c8ce16baaa7792edaf1a</anchor>
      <arglist>(int64 sampleIndex, float *result) const noexcept=0</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>getNumBytesUsed</name>
      <anchorfile>classMemoryMappedAudioFormatReader.html</anchorfile>
      <anchor>ad5e8029ea7f2d672ea0553cb3286d03e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>MemoryMappedAudioFormatReader</name>
      <anchorfile>classMemoryMappedAudioFormatReader.html</anchorfile>
      <anchor>a127960954592065ea578535aad801222</anchor>
      <arglist>(const File &amp;file, const AudioFormatReader &amp;details, int64 dataChunkStart, int64 dataChunkLength, int bytesPerFrame)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int64</type>
      <name>sampleToFilePos</name>
      <anchorfile>classMemoryMappedAudioFormatReader.html</anchorfile>
      <anchor>a7a2fef8b3633ab717fede24ed46b414f</anchor>
      <arglist>(int64 sample) const noexcept</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int64</type>
      <name>filePosToSample</name>
      <anchorfile>classMemoryMappedAudioFormatReader.html</anchorfile>
      <anchor>a61e9279c6d815d9be5b9cf177b8932c1</anchor>
      <arglist>(int64 filePos) const noexcept</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const void *</type>
      <name>sampleToPointer</name>
      <anchorfile>classMemoryMappedAudioFormatReader.html</anchorfile>
      <anchor>a24f42faedcc80c376351a60de55593e9</anchor>
      <arglist>(int64 sample) const noexcept</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Range&lt; float &gt;</type>
      <name>scanMinAndMaxInterleaved</name>
      <anchorfile>classMemoryMappedAudioFormatReader.html</anchorfile>
      <anchor>add131d9db2dfcdba098c4cc489797bb8</anchor>
      <arglist>(int channel, int64 startSampleInFile, int64 numSamples) const noexcept</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>File</type>
      <name>file</name>
      <anchorfile>classMemoryMappedAudioFormatReader.html</anchorfile>
      <anchor>ac4bebf9682f216abaf97e74ac3662c33</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Range&lt; int64 &gt;</type>
      <name>mappedSection</name>
      <anchorfile>classMemoryMappedAudioFormatReader.html</anchorfile>
      <anchor>a33d4ab9328d5a4e588053c894b7a8c45</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ScopedPointer&lt; MemoryMappedFile &gt;</type>
      <name>map</name>
      <anchorfile>classMemoryMappedAudioFormatReader.html</anchorfile>
      <anchor>a6b88bdb8bd8d5b5acf75cda6fac75f31</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int64</type>
      <name>dataChunkStart</name>
      <anchorfile>classMemoryMappedAudioFormatReader.html</anchorfile>
      <anchor>a50ccc5aaa756180f865ad1b6ff43bf0d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int64</type>
      <name>dataLength</name>
      <anchorfile>classMemoryMappedAudioFormatReader.html</anchorfile>
      <anchor>ac19c1cd6d4aff52e7820ec40e1e4d271</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>bytesPerFrame</name>
      <anchorfile>classMemoryMappedAudioFormatReader.html</anchorfile>
      <anchor>adb3838802e7d3633b1bf31095bf139e9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MemoryMappedFile</name>
    <filename>classMemoryMappedFile.html</filename>
    <member kind="enumeration">
      <type></type>
      <name>AccessMode</name>
      <anchorfile>classMemoryMappedFile.html</anchorfile>
      <anchor>a1fb6563237aaf7bd02f4b30f13b0e2d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>readOnly</name>
      <anchorfile>classMemoryMappedFile.html</anchorfile>
      <anchor>a1fb6563237aaf7bd02f4b30f13b0e2d0adcfba7d8c4095759d308001cd11cbdc4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>readWrite</name>
      <anchorfile>classMemoryMappedFile.html</anchorfile>
      <anchor>a1fb6563237aaf7bd02f4b30f13b0e2d0a600bfb19741145c6c13280a687797041</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MemoryMappedFile</name>
      <anchorfile>classMemoryMappedFile.html</anchorfile>
      <anchor>a210e16a18b078c6df3b506a3f9963fe5</anchor>
      <arglist>(const File &amp;file, AccessMode mode, bool exclusive=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MemoryMappedFile</name>
      <anchorfile>classMemoryMappedFile.html</anchorfile>
      <anchor>adb4bb69bc651e2039fb5fe74b653a1d8</anchor>
      <arglist>(const File &amp;file, const Range&lt; int64 &gt; &amp;fileRange, AccessMode mode, bool exclusive=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~MemoryMappedFile</name>
      <anchorfile>classMemoryMappedFile.html</anchorfile>
      <anchor>a50f37ae28ddf9c0e57823c0b75743878</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>getData</name>
      <anchorfile>classMemoryMappedFile.html</anchorfile>
      <anchor>a201023945c6c0f7d729fc68157430f41</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>getSize</name>
      <anchorfile>classMemoryMappedFile.html</anchorfile>
      <anchor>a98d9f4380b1343520779570fbe5bf2b0</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Range&lt; int64 &gt;</type>
      <name>getRange</name>
      <anchorfile>classMemoryMappedFile.html</anchorfile>
      <anchor>a581be9425c7e7256c4b7c9a80ad3bd16</anchor>
      <arglist>() const noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MemoryOutputStream</name>
    <filename>classMemoryOutputStream.html</filename>
    <base>OutputStream</base>
    <member kind="function">
      <type></type>
      <name>MemoryOutputStream</name>
      <anchorfile>classMemoryOutputStream.html</anchorfile>
      <anchor>ac57d1788ff3df4500ea7928900d5e8bf</anchor>
      <arglist>(size_t initialSize=256)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MemoryOutputStream</name>
      <anchorfile>classMemoryOutputStream.html</anchorfile>
      <anchor>a21a486f75eaef9c0f01783dac034a411</anchor>
      <arglist>(MemoryBlock &amp;memoryBlockToWriteTo, bool appendToExistingBlockContent)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MemoryOutputStream</name>
      <anchorfile>classMemoryOutputStream.html</anchorfile>
      <anchor>a3d161034e42080a8f7cccdc61c17e381</anchor>
      <arglist>(void *destBuffer, size_t destBufferSize)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~MemoryOutputStream</name>
      <anchorfile>classMemoryOutputStream.html</anchorfile>
      <anchor>a535d2b68d0309dfdf673618761d0891d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const void *</type>
      <name>getData</name>
      <anchorfile>classMemoryOutputStream.html</anchorfile>
      <anchor>ae55776d95c0ba0639e30145f7473602d</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>getDataSize</name>
      <anchorfile>classMemoryOutputStream.html</anchorfile>
      <anchor>abedf6ef0d5e12b672e5c8dcab75f0d33</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classMemoryOutputStream.html</anchorfile>
      <anchor>a48022a2ed05716333bcd8da5c26b4d59</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>preallocate</name>
      <anchorfile>classMemoryOutputStream.html</anchorfile>
      <anchor>ab178f1539081ad4ca0870bf9f94e592b</anchor>
      <arglist>(size_t bytesToPreallocate)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>appendUTF8Char</name>
      <anchorfile>classMemoryOutputStream.html</anchorfile>
      <anchor>adada24cf19575f5f170e294ddc8be7d6</anchor>
      <arglist>(juce_wchar character)</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>toUTF8</name>
      <anchorfile>classMemoryOutputStream.html</anchorfile>
      <anchor>ac148c479157c53b9c8133a3eef72c6e4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>toString</name>
      <anchorfile>classMemoryOutputStream.html</anchorfile>
      <anchor>a4260170787b7fe3ddf47468625898549</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>MemoryBlock</type>
      <name>getMemoryBlock</name>
      <anchorfile>classMemoryOutputStream.html</anchorfile>
      <anchor>a3e00b2923ee9a93e67cf26855b75e635</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>flush</name>
      <anchorfile>classMemoryOutputStream.html</anchorfile>
      <anchor>ac44c1c655acca94ee3a867eba6d31b5e</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>write</name>
      <anchorfile>classMemoryOutputStream.html</anchorfile>
      <anchor>a3aa6fc52e07213477bc68301267fa79c</anchor>
      <arglist>(const void *, size_t) override</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>getPosition</name>
      <anchorfile>classMemoryOutputStream.html</anchorfile>
      <anchor>a073726d692e159414b5c074f16dadeb9</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setPosition</name>
      <anchorfile>classMemoryOutputStream.html</anchorfile>
      <anchor>a4099015681b9cd1171f1ecd27443732b</anchor>
      <arglist>(int64) override</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>writeFromInputStream</name>
      <anchorfile>classMemoryOutputStream.html</anchorfile>
      <anchor>aae9401ec7495276cc1090cbf3937d2a5</anchor>
      <arglist>(InputStream &amp;, int64 maxNumBytesToWrite) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>writeRepeatedByte</name>
      <anchorfile>classMemoryOutputStream.html</anchorfile>
      <anchor>ab8029d0df31f60579d5fc2fbfc34c6ed</anchor>
      <arglist>(uint8 byte, size_t numTimesToRepeat) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MenuBarComponent</name>
    <filename>classMenuBarComponent.html</filename>
    <base>Component</base>
    <base protection="private">MenuBarModel::Listener</base>
    <base protection="private">Timer</base>
    <member kind="function">
      <type></type>
      <name>MenuBarComponent</name>
      <anchorfile>classMenuBarComponent.html</anchorfile>
      <anchor>abf1f80e5c336530b69eee23f84a56a38</anchor>
      <arglist>(MenuBarModel *model=nullptr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~MenuBarComponent</name>
      <anchorfile>classMenuBarComponent.html</anchorfile>
      <anchor>a41f0a0bf08a3d837ef5c82e447b3e199</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setModel</name>
      <anchorfile>classMenuBarComponent.html</anchorfile>
      <anchor>a3d2c0734ccc73dbb620e3576398aeb2d</anchor>
      <arglist>(MenuBarModel *newModel)</arglist>
    </member>
    <member kind="function">
      <type>MenuBarModel *</type>
      <name>getModel</name>
      <anchorfile>classMenuBarComponent.html</anchorfile>
      <anchor>aacd0c446393f9b02b27a478f0d464160</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>showMenu</name>
      <anchorfile>classMenuBarComponent.html</anchorfile>
      <anchor>af24eead5eca57b4f29544c40449a4b8e</anchor>
      <arglist>(int menuIndex)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>paint</name>
      <anchorfile>classMenuBarComponent.html</anchorfile>
      <anchor>a9118f5a24717914ae2d2090ef67303d8</anchor>
      <arglist>(Graphics &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resized</name>
      <anchorfile>classMenuBarComponent.html</anchorfile>
      <anchor>ade96b3d946c7edba58b71c58b5e03043</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mouseEnter</name>
      <anchorfile>classMenuBarComponent.html</anchorfile>
      <anchor>a40471464d733599a5715e507320b72ad</anchor>
      <arglist>(const MouseEvent &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mouseExit</name>
      <anchorfile>classMenuBarComponent.html</anchorfile>
      <anchor>ab5f2450d26d8d94988f65eee8933239c</anchor>
      <arglist>(const MouseEvent &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mouseDown</name>
      <anchorfile>classMenuBarComponent.html</anchorfile>
      <anchor>a3488abce70d4f83813a623957a0158cb</anchor>
      <arglist>(const MouseEvent &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mouseDrag</name>
      <anchorfile>classMenuBarComponent.html</anchorfile>
      <anchor>a8969603aeb5dbb880a1a85ebe084e26b</anchor>
      <arglist>(const MouseEvent &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mouseUp</name>
      <anchorfile>classMenuBarComponent.html</anchorfile>
      <anchor>a945b3ef7d65148defdb87a90fe0ebf11</anchor>
      <arglist>(const MouseEvent &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mouseMove</name>
      <anchorfile>classMenuBarComponent.html</anchorfile>
      <anchor>a0a98e1fe26f69de791e0ffce94297619</anchor>
      <arglist>(const MouseEvent &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>handleCommandMessage</name>
      <anchorfile>classMenuBarComponent.html</anchorfile>
      <anchor>ae5c5569ad0b47c72e234328f08326dff</anchor>
      <arglist>(int commandId) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>keyPressed</name>
      <anchorfile>classMenuBarComponent.html</anchorfile>
      <anchor>aabe6d7c83703dc91c16970a3c6b43637</anchor>
      <arglist>(const KeyPress &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>menuBarItemsChanged</name>
      <anchorfile>classMenuBarComponent.html</anchorfile>
      <anchor>a04b8d854da2c969e27c6baef29fb32c0</anchor>
      <arglist>(MenuBarModel *) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>menuCommandInvoked</name>
      <anchorfile>classMenuBarComponent.html</anchorfile>
      <anchor>a0386118df944f97f443239c53865d865</anchor>
      <arglist>(MenuBarModel *, const ApplicationCommandTarget::InvocationInfo &amp;) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MenuBarModel</name>
    <filename>classMenuBarModel.html</filename>
    <base protection="private">AsyncUpdater</base>
    <base protection="private">ApplicationCommandManagerListener</base>
    <class kind="class">MenuBarModel::Listener</class>
    <member kind="function">
      <type></type>
      <name>MenuBarModel</name>
      <anchorfile>classMenuBarModel.html</anchorfile>
      <anchor>a33991bb21a029647ec0db64ab5349eff</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MenuBarModel</name>
      <anchorfile>classMenuBarModel.html</anchorfile>
      <anchor>a7f7348e4e1de229386474baf63a6c4d7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>menuItemsChanged</name>
      <anchorfile>classMenuBarModel.html</anchorfile>
      <anchor>aac9cef411b80f8b5ab1dc4572ec90019</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setApplicationCommandManagerToWatch</name>
      <anchorfile>classMenuBarModel.html</anchorfile>
      <anchor>afb34b774a0e4a5575c0d4f744cf969bd</anchor>
      <arglist>(ApplicationCommandManager *manager) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addListener</name>
      <anchorfile>classMenuBarModel.html</anchorfile>
      <anchor>a0b4940acabc597922895c33aba06aacd</anchor>
      <arglist>(Listener *listenerToAdd) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeListener</name>
      <anchorfile>classMenuBarModel.html</anchorfile>
      <anchor>a2a7813e9ab8db041f974f42bf8e9695d</anchor>
      <arglist>(Listener *listenerToRemove) noexcept</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual StringArray</type>
      <name>getMenuBarNames</name>
      <anchorfile>classMenuBarModel.html</anchorfile>
      <anchor>a2a42b27dc2d8e42b21b130d72b8d10c4</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual PopupMenu</type>
      <name>getMenuForIndex</name>
      <anchorfile>classMenuBarModel.html</anchorfile>
      <anchor>a500e3714cf915d27cd37bf13a79511f4</anchor>
      <arglist>(int topLevelMenuIndex, const String &amp;menuName)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>menuItemSelected</name>
      <anchorfile>classMenuBarModel.html</anchorfile>
      <anchor>aa64b5b9bb4ea4e7bcdc49924659936cc</anchor>
      <arglist>(int menuItemID, int topLevelMenuIndex)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>menuBarActivated</name>
      <anchorfile>classMenuBarModel.html</anchorfile>
      <anchor>a5b76c306e7f4eaf8d7fc51b9be5cd5b1</anchor>
      <arglist>(bool isActive)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applicationCommandInvoked</name>
      <anchorfile>classMenuBarModel.html</anchorfile>
      <anchor>a4f5b6e2acfda45bd7748e8c0d5160608</anchor>
      <arglist>(const ApplicationCommandTarget::InvocationInfo &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applicationCommandListChanged</name>
      <anchorfile>classMenuBarModel.html</anchorfile>
      <anchor>aa996c527567f42f3c9063241520d1270</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>handleAsyncUpdate</name>
      <anchorfile>classMenuBarModel.html</anchorfile>
      <anchor>a0dddd32a4b5bd42c1313751bb13f882e</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>handleMenuBarActivate</name>
      <anchorfile>classMenuBarModel.html</anchorfile>
      <anchor>a982d30b7dc660bfd7f092a33bb54c063</anchor>
      <arglist>(bool isActive)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setMacMainMenu</name>
      <anchorfile>classMenuBarModel.html</anchorfile>
      <anchor>a052c0e132c619775f3f14af3aae44811</anchor>
      <arglist>(MenuBarModel *newMenuBarModel, const PopupMenu *extraAppleMenuItems=nullptr, const String &amp;recentItemsMenuName=String())</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MenuBarModel *</type>
      <name>getMacMainMenu</name>
      <anchorfile>classMenuBarModel.html</anchorfile>
      <anchor>a69b8ff2471d5dc4651c31326bdc3ee56</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const PopupMenu *</type>
      <name>getMacExtraAppleItemsMenu</name>
      <anchorfile>classMenuBarModel.html</anchorfile>
      <anchor>a9b1819d59a781c4aeb6e978940e224ba</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MenuBarModel::Listener</name>
    <filename>classMenuBarModel_1_1Listener.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Listener</name>
      <anchorfile>classMenuBarModel_1_1Listener.html</anchorfile>
      <anchor>a9485d7d7bbaba159d8407d02d38ba479</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>menuBarItemsChanged</name>
      <anchorfile>classMenuBarModel_1_1Listener.html</anchorfile>
      <anchor>a32ab03020b06798d01ff472ee7305e64</anchor>
      <arglist>(MenuBarModel *menuBarModel)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>menuCommandInvoked</name>
      <anchorfile>classMenuBarModel_1_1Listener.html</anchorfile>
      <anchor>a24a09292d83e8c60e34c3396060ef66a</anchor>
      <arglist>(MenuBarModel *menuBarModel, const ApplicationCommandTarget::InvocationInfo &amp;info)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>menuBarActivated</name>
      <anchorfile>classMenuBarModel_1_1Listener.html</anchorfile>
      <anchor>a601d4bfdb6bb82fa8cb9f84c37700c21</anchor>
      <arglist>(MenuBarModel *menuBarModel, bool isActive)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Message</name>
    <filename>classMessage.html</filename>
    <base>MessageManager::MessageBase</base>
    <member kind="typedef">
      <type>ReferenceCountedObjectPtr&lt; Message &gt;</type>
      <name>Ptr</name>
      <anchorfile>classMessage.html</anchorfile>
      <anchor>ab9d84d4a94fcfa0d345b54a7fc804977</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Message</name>
      <anchorfile>classMessage.html</anchorfile>
      <anchor>a223b9a5452992205c5afd647dc3faa25</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Message</name>
      <anchorfile>classMessage.html</anchorfile>
      <anchor>a3f7275462831f787a861271687bcad67</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MessageListener</name>
    <filename>classMessageListener.html</filename>
    <member kind="function">
      <type></type>
      <name>MessageListener</name>
      <anchorfile>classMessageListener.html</anchorfile>
      <anchor>ac9f7a08c985ea4a1b8c2e6e2caec20f1</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MessageListener</name>
      <anchorfile>classMessageListener.html</anchorfile>
      <anchor>a70778be12f8d64adbb571c610c412021</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>handleMessage</name>
      <anchorfile>classMessageListener.html</anchorfile>
      <anchor>a5174ef8bd8b5faedf4d7b96d1fd8eaf1</anchor>
      <arglist>(const Message &amp;message)=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>postMessage</name>
      <anchorfile>classMessageListener.html</anchorfile>
      <anchor>a70b99f10227be91c6768c07c19efec38</anchor>
      <arglist>(Message *message) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MessageManager</name>
    <filename>classMessageManager.html</filename>
    <class kind="class">MessageManager::MessageBase</class>
    <member kind="function">
      <type>void</type>
      <name>runDispatchLoop</name>
      <anchorfile>classMessageManager.html</anchorfile>
      <anchor>a3084a3a75717db0f7f05604f2956ff65</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stopDispatchLoop</name>
      <anchorfile>classMessageManager.html</anchorfile>
      <anchor>a283b20c2b3786537b31952670d2df7bf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasStopMessageBeenSent</name>
      <anchorfile>classMessageManager.html</anchorfile>
      <anchor>a3b51c7c37417fea8c4f47ebb7913ddba</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>runDispatchLoopUntil</name>
      <anchorfile>classMessageManager.html</anchorfile>
      <anchor>a0ddde5289b71c37a3a4a4bb9d673a0de</anchor>
      <arglist>(int millisecondsToRunFor)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>callFunctionOnMessageThread</name>
      <anchorfile>classMessageManager.html</anchorfile>
      <anchor>a554f81587d57127c9cb5be72aced11c1</anchor>
      <arglist>(MessageCallbackFunction *callback, void *userData)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isThisTheMessageThread</name>
      <anchorfile>classMessageManager.html</anchorfile>
      <anchor>accd7b539b31d809c30685b3d49327322</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCurrentThreadAsMessageThread</name>
      <anchorfile>classMessageManager.html</anchorfile>
      <anchor>af94f78debd3b3d70acade65f50c5058e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Thread::ThreadID</type>
      <name>getCurrentMessageThread</name>
      <anchorfile>classMessageManager.html</anchorfile>
      <anchor>aa64162d4d9711b2c299e66775b57f414</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>currentThreadHasLockedMessageManager</name>
      <anchorfile>classMessageManager.html</anchorfile>
      <anchor>aebd4b8896d7b6bdfa34d3cd8eb2e1777</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>registerBroadcastListener</name>
      <anchorfile>classMessageManager.html</anchorfile>
      <anchor>ad4ee5d1cae2b55eb45507b491489e5de</anchor>
      <arglist>(ActionListener *listener)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deregisterBroadcastListener</name>
      <anchorfile>classMessageManager.html</anchorfile>
      <anchor>a5a64dae92820a0ec102294d8ea7aa94f</anchor>
      <arglist>(ActionListener *listener)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MessageManager *</type>
      <name>getInstance</name>
      <anchorfile>classMessageManager.html</anchorfile>
      <anchor>aea95a541b6660b7cdcc79b675879f35d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MessageManager *</type>
      <name>getInstanceWithoutCreating</name>
      <anchorfile>classMessageManager.html</anchorfile>
      <anchor>ae890114c8f95bef376d498f633db4de2</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>deleteInstance</name>
      <anchorfile>classMessageManager.html</anchorfile>
      <anchor>a4bdcb8bd5ef27480b49d6b1ff6ecdaa9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>callAsync</name>
      <anchorfile>classMessageManager.html</anchorfile>
      <anchor>ad45b6558d8c58b3714a764b4238e3e5b</anchor>
      <arglist>(std::function&lt; void(void)&gt;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>broadcastMessage</name>
      <anchorfile>classMessageManager.html</anchorfile>
      <anchor>a252262c8bfe857ea77fe4e7b4b42ae80</anchor>
      <arglist>(const String &amp;messageText)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MessageManager::MessageBase</name>
    <filename>classMessageManager_1_1MessageBase.html</filename>
    <base>ReferenceCountedObject</base>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>messageCallback</name>
      <anchorfile>classMessageManager_1_1MessageBase.html</anchorfile>
      <anchor>a3cbc8f5a0aa7496a7653fa3c0fd49232</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MessageManagerLock</name>
    <filename>classMessageManagerLock.html</filename>
    <member kind="function">
      <type></type>
      <name>MessageManagerLock</name>
      <anchorfile>classMessageManagerLock.html</anchorfile>
      <anchor>a294fab36d4e9fe48cc2b52b36974111c</anchor>
      <arglist>(Thread *threadToCheckForExitSignal=nullptr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MessageManagerLock</name>
      <anchorfile>classMessageManagerLock.html</anchorfile>
      <anchor>ac6da971e61e376e8216da1f39ccb5582</anchor>
      <arglist>(ThreadPoolJob *jobToCheckForExitSignal)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~MessageManagerLock</name>
      <anchorfile>classMessageManagerLock.html</anchorfile>
      <anchor>a4d3e1ab142b50ad49e5fe60f8ae7d22f</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>lockWasGained</name>
      <anchorfile>classMessageManagerLock.html</anchorfile>
      <anchor>a5f3d8b6abc27aa324a882abc6e2d96ba</anchor>
      <arglist>() const noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MidiBuffer</name>
    <filename>classMidiBuffer.html</filename>
    <class kind="class">MidiBuffer::Iterator</class>
    <member kind="function">
      <type></type>
      <name>MidiBuffer</name>
      <anchorfile>classMidiBuffer.html</anchorfile>
      <anchor>ab65b3385b997f4f76d706687fb701f1a</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MidiBuffer</name>
      <anchorfile>classMidiBuffer.html</anchorfile>
      <anchor>a15df89fc8b402a82d99c73f3591dc0bb</anchor>
      <arglist>(const MidiMessage &amp;message) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MidiBuffer</name>
      <anchorfile>classMidiBuffer.html</anchorfile>
      <anchor>aba768294c22f4db918e5802c3f9afa9d</anchor>
      <arglist>(const MidiBuffer &amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>MidiBuffer &amp;</type>
      <name>operator=</name>
      <anchorfile>classMidiBuffer.html</anchorfile>
      <anchor>a950248f1e9fbdad529b9ab4b326ad795</anchor>
      <arglist>(const MidiBuffer &amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~MidiBuffer</name>
      <anchorfile>classMidiBuffer.html</anchorfile>
      <anchor>a169f3e58f12b15d73e1372f549fe6e1f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classMidiBuffer.html</anchorfile>
      <anchor>a220d909954450942ecd87a945a82e7aa</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classMidiBuffer.html</anchorfile>
      <anchor>aacd8382869c865bb8d15c0cfffe9dff1</anchor>
      <arglist>(int start, int numSamples)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEmpty</name>
      <anchorfile>classMidiBuffer.html</anchorfile>
      <anchor>a028cf0791d2afd0ec4d172017b6ff428</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumEvents</name>
      <anchorfile>classMidiBuffer.html</anchorfile>
      <anchor>a7ae34c5a596a27a6ec1e5a92552f0a1e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addEvent</name>
      <anchorfile>classMidiBuffer.html</anchorfile>
      <anchor>aee453648cab2b625eb222c40ec5fc37f</anchor>
      <arglist>(const MidiMessage &amp;midiMessage, int sampleNumber)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addEvent</name>
      <anchorfile>classMidiBuffer.html</anchorfile>
      <anchor>a196179c4d682c97aef13e18c1cf13f02</anchor>
      <arglist>(const void *rawMidiData, int maxBytesOfMidiData, int sampleNumber)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addEvents</name>
      <anchorfile>classMidiBuffer.html</anchorfile>
      <anchor>a9607fef1521aa115337f012cff244950</anchor>
      <arglist>(const MidiBuffer &amp;otherBuffer, int startSample, int numSamples, int sampleDeltaToAdd)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getFirstEventTime</name>
      <anchorfile>classMidiBuffer.html</anchorfile>
      <anchor>a2c1a7797666709cb58f0fb3bf079df21</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getLastEventTime</name>
      <anchorfile>classMidiBuffer.html</anchorfile>
      <anchor>aafb2fe191779749350ff2e9af66b5a12</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swapWith</name>
      <anchorfile>classMidiBuffer.html</anchorfile>
      <anchor>a7de76383992541bc7e66ff0738c13263</anchor>
      <arglist>(MidiBuffer &amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ensureSize</name>
      <anchorfile>classMidiBuffer.html</anchorfile>
      <anchor>aab971f45d6443204a4ac10fc79439467</anchor>
      <arglist>(size_t minimumNumBytes)</arglist>
    </member>
    <member kind="variable">
      <type>Array&lt; uint8 &gt;</type>
      <name>data</name>
      <anchorfile>classMidiBuffer.html</anchorfile>
      <anchor>a7982121d5b53cc1dd6371898d6472de7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MidiBuffer::Iterator</name>
    <filename>classMidiBuffer_1_1Iterator.html</filename>
    <member kind="function">
      <type></type>
      <name>Iterator</name>
      <anchorfile>classMidiBuffer_1_1Iterator.html</anchorfile>
      <anchor>a4a30662a2e2d79787da4cc7ff6f7df00</anchor>
      <arglist>(const MidiBuffer &amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Iterator</name>
      <anchorfile>classMidiBuffer_1_1Iterator.html</anchorfile>
      <anchor>a4b227176b60e4b8543c35da2765d7221</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNextSamplePosition</name>
      <anchorfile>classMidiBuffer_1_1Iterator.html</anchorfile>
      <anchor>a46525a78fde6e0a7657f2dadcb54186b</anchor>
      <arglist>(int samplePosition) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getNextEvent</name>
      <anchorfile>classMidiBuffer_1_1Iterator.html</anchorfile>
      <anchor>a895cab75c71293cf080c6b215ab3c1d9</anchor>
      <arglist>(MidiMessage &amp;result, int &amp;samplePosition) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getNextEvent</name>
      <anchorfile>classMidiBuffer_1_1Iterator.html</anchorfile>
      <anchor>aa3101f440255afdb667a5cb5f728c2ab</anchor>
      <arglist>(const uint8 *&amp;midiData, int &amp;numBytesOfMidiData, int &amp;samplePosition) noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MidiEventList</name>
    <filename>classMidiEventList.html</filename>
    <member kind="function">
      <type></type>
      <name>MidiEventList</name>
      <anchorfile>classMidiEventList.html</anchorfile>
      <anchor>a29fc01cfd20d4ba9d397d7302c81f64a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MidiEventList</name>
      <anchorfile>classMidiEventList.html</anchorfile>
      <anchor>afc14738834202a16a06ae501941536a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>JUCE_DECLARE_VST3_COM_REF_METHODS JUCE_DECLARE_VST3_COM_QUERY_METHODS void</type>
      <name>clear</name>
      <anchorfile>classMidiEventList.html</anchorfile>
      <anchor>ab2d507e21030ecf84d4df71d5da10bb9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Steinberg::int32 PLUGIN_API</type>
      <name>getEventCount</name>
      <anchorfile>classMidiEventList.html</anchorfile>
      <anchor>a7a961a80412fbaf35e7055b7fa784847</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>Steinberg::tresult PLUGIN_API</type>
      <name>getEvent</name>
      <anchorfile>classMidiEventList.html</anchorfile>
      <anchor>aa62ae834c05f755f2f723b4f1ded836e</anchor>
      <arglist>(Steinberg::int32 index, Steinberg::Vst::Event &amp;e) override</arglist>
    </member>
    <member kind="function">
      <type>Steinberg::tresult PLUGIN_API</type>
      <name>addEvent</name>
      <anchorfile>classMidiEventList.html</anchorfile>
      <anchor>af1860baf47d3fc7436eabd8e22393fae</anchor>
      <arglist>(Steinberg::Vst::Event &amp;e) override</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>toMidiBuffer</name>
      <anchorfile>classMidiEventList.html</anchorfile>
      <anchor>af1d1f8795ab050fc213aa84f97130d23</anchor>
      <arglist>(MidiBuffer &amp;result, Steinberg::Vst::IEventList &amp;eventList)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>toEventList</name>
      <anchorfile>classMidiEventList.html</anchorfile>
      <anchor>a9108b044536cf05b165390116718d398</anchor>
      <arglist>(Steinberg::Vst::IEventList &amp;result, MidiBuffer &amp;midiBuffer)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MidiFile</name>
    <filename>classMidiFile.html</filename>
    <member kind="function">
      <type></type>
      <name>MidiFile</name>
      <anchorfile>classMidiFile.html</anchorfile>
      <anchor>a989fec6d479c0ebf68ef72224e58e894</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~MidiFile</name>
      <anchorfile>classMidiFile.html</anchorfile>
      <anchor>a8d14e6df12f54918a8caf500f03fd78e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MidiFile</name>
      <anchorfile>classMidiFile.html</anchorfile>
      <anchor>a018012465eb84a3cd0edfa42aad670fb</anchor>
      <arglist>(const MidiFile &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>MidiFile &amp;</type>
      <name>operator=</name>
      <anchorfile>classMidiFile.html</anchorfile>
      <anchor>a6c89da51439945a1f15bdce6163cf970</anchor>
      <arglist>(const MidiFile &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumTracks</name>
      <anchorfile>classMidiFile.html</anchorfile>
      <anchor>a908f8db88d0740c8de225c31660d71a0</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const MidiMessageSequence *</type>
      <name>getTrack</name>
      <anchorfile>classMidiFile.html</anchorfile>
      <anchor>a334aa932bc738914eb3e1578a7ee1d7c</anchor>
      <arglist>(int index) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addTrack</name>
      <anchorfile>classMidiFile.html</anchorfile>
      <anchor>a9ff930286a6fa4531df163480b22a313</anchor>
      <arglist>(const MidiMessageSequence &amp;trackSequence)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classMidiFile.html</anchorfile>
      <anchor>ab676af68f56e7cc8b2e0a4afdaf52d20</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>short</type>
      <name>getTimeFormat</name>
      <anchorfile>classMidiFile.html</anchorfile>
      <anchor>a084eacf906fca71b2c9436aa1c14ed16</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTicksPerQuarterNote</name>
      <anchorfile>classMidiFile.html</anchorfile>
      <anchor>ab18143cad013db21a71735b01aef2a9f</anchor>
      <arglist>(int ticksPerQuarterNote) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSmpteTimeFormat</name>
      <anchorfile>classMidiFile.html</anchorfile>
      <anchor>ab63f442d05b8d7c2742de4515f6e8917</anchor>
      <arglist>(int framesPerSecond, int subframeResolution) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>findAllTempoEvents</name>
      <anchorfile>classMidiFile.html</anchorfile>
      <anchor>aab69b7b893078ffe67bc810f2685492d</anchor>
      <arglist>(MidiMessageSequence &amp;tempoChangeEvents) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>findAllTimeSigEvents</name>
      <anchorfile>classMidiFile.html</anchorfile>
      <anchor>adc010123e7ae3e80c33645a977fade24</anchor>
      <arglist>(MidiMessageSequence &amp;timeSigEvents) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>findAllKeySigEvents</name>
      <anchorfile>classMidiFile.html</anchorfile>
      <anchor>af5458ce7db6e99712cf6e8b1e4cb008b</anchor>
      <arglist>(MidiMessageSequence &amp;keySigEvents) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getLastTimestamp</name>
      <anchorfile>classMidiFile.html</anchorfile>
      <anchor>a122b40184ad0593df7d08e7691a604a7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>readFrom</name>
      <anchorfile>classMidiFile.html</anchorfile>
      <anchor>a541d03108b4bcbaf2124eee401b2d92f</anchor>
      <arglist>(InputStream &amp;sourceStream)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>writeTo</name>
      <anchorfile>classMidiFile.html</anchorfile>
      <anchor>a2673604f2af21a69361fa6b4c8c35949</anchor>
      <arglist>(OutputStream &amp;destStream, int midiFileType=1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>convertTimestampTicksToSeconds</name>
      <anchorfile>classMidiFile.html</anchorfile>
      <anchor>af66c3497ec6109a9c7c1cf1f474c8b95</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MidiInput</name>
    <filename>classMidiInput.html</filename>
    <member kind="function">
      <type></type>
      <name>~MidiInput</name>
      <anchorfile>classMidiInput.html</anchorfile>
      <anchor>ad7fbedb3f1d729145cb5d74cb82ea196</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const String &amp;</type>
      <name>getName</name>
      <anchorfile>classMidiInput.html</anchorfile>
      <anchor>a4ac389b52419c5b59a6e28f7bbf30301</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setName</name>
      <anchorfile>classMidiInput.html</anchorfile>
      <anchor>ad85cc3c81a13f0fae9924d6ca3881b21</anchor>
      <arglist>(const String &amp;newName) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>classMidiInput.html</anchorfile>
      <anchor>ae6095bfc60700f95534db37828c72f2b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stop</name>
      <anchorfile>classMidiInput.html</anchorfile>
      <anchor>a1e97664380c7764a0cdd909c2123f2f0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StringArray</type>
      <name>getDevices</name>
      <anchorfile>classMidiInput.html</anchorfile>
      <anchor>ab2e0e7bb96700f9e2ecd77bc3b96d42f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>getDefaultDeviceIndex</name>
      <anchorfile>classMidiInput.html</anchorfile>
      <anchor>a2c14fc7803134015ea3718f79d4e2d55</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MidiInput *</type>
      <name>openDevice</name>
      <anchorfile>classMidiInput.html</anchorfile>
      <anchor>ae7bb7e3f91dfe6bda7bce3e13a3efa8e</anchor>
      <arglist>(int deviceIndex, MidiInputCallback *callback)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MidiInput *</type>
      <name>createNewDevice</name>
      <anchorfile>classMidiInput.html</anchorfile>
      <anchor>af6053fd48f64d92cb2efb54c266d10c5</anchor>
      <arglist>(const String &amp;deviceName, MidiInputCallback *callback)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MidiInputCallback</name>
    <filename>classMidiInputCallback.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>handleIncomingMidiMessage</name>
      <anchorfile>classMidiInputCallback.html</anchorfile>
      <anchor>acdf6d7e27b96a50fe06922737f0d082e</anchor>
      <arglist>(MidiInput *source, const MidiMessage &amp;message)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MidiKeyboardComponent</name>
    <filename>classMidiKeyboardComponent.html</filename>
    <base>Component</base>
    <base>MidiKeyboardStateListener</base>
    <base>ChangeBroadcaster</base>
    <base protection="private">Timer</base>
    <member kind="enumeration">
      <type></type>
      <name>Orientation</name>
      <anchorfile>classMidiKeyboardComponent.html</anchorfile>
      <anchor>a6f6844672df93f8f631fa7e22cf0cdaf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>horizontalKeyboard</name>
      <anchorfile>classMidiKeyboardComponent.html</anchorfile>
      <anchor>a6f6844672df93f8f631fa7e22cf0cdafa0b62143bbab080673411400a14d6abd0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>verticalKeyboardFacingLeft</name>
      <anchorfile>classMidiKeyboardComponent.html</anchorfile>
      <anchor>a6f6844672df93f8f631fa7e22cf0cdafa9c90bd6998f744646d80f46f7dfa80a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>verticalKeyboardFacingRight</name>
      <anchorfile>classMidiKeyboardComponent.html</anchorfile>
      <anchor>a6f6844672df93f8f631fa7e22cf0cdafae068b9f8ab1fd8850cdd7e3f26f8eb1c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>ColourIds</name>
      <anchorfile>classMidiKeyboardComponent.html</anchorfile>
      <anchor>a75cb05395efc61c447dc93e8873ab05e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>whiteNoteColourId</name>
      <anchorfile>classMidiKeyboardComponent.html</anchorfile>
      <anchor>a75cb05395efc61c447dc93e8873ab05eabb77b95502c3687ed23bcda22e4c416d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>blackNoteColourId</name>
      <anchorfile>classMidiKeyboardComponent.html</anchorfile>
      <anchor>a75cb05395efc61c447dc93e8873ab05eadaf19e83bcd2d13a33a2e84d982b3506</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>keySeparatorLineColourId</name>
      <anchorfile>classMidiKeyboardComponent.html</anchorfile>
      <anchor>a75cb05395efc61c447dc93e8873ab05ea945be9fe34d15aea642b2ab53e2ac30e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>mouseOverKeyOverlayColourId</name>
      <anchorfile>classMidiKeyboardComponent.html</anchorfile>
      <anchor>a75cb05395efc61c447dc93e8873ab05ead204f469f2f66e619d2c8778ed83a5b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>keyDownOverlayColourId</name>
      <anchorfile>classMidiKeyboardComponent.html</anchorfile>
      <anchor>a75cb05395efc61c447dc93e8873ab05eaca2ce853f7e9341311ff237d17f5485f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>textLabelColourId</name>
      <anchorfile>classMidiKeyboardComponent.html</anchorfile>
      <anchor>a75cb05395efc61c447dc93e8873ab05ead3e09ed20f7c6c46a687e2c2e4f90fc5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>upDownButtonBackgroundColourId</name>
      <anchorfile>classMidiKeyboardComponent.html</anchorfile>
      <anchor>a75cb05395efc61c447dc93e8873ab05ea613cf60467dce390a9fe44ebed5e69fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>upDownButtonArrowColourId</name>
      <anchorfile>classMidiKeyboardComponent.html</anchorfile>
      <anchor>a75cb05395efc61c447dc93e8873ab05ea8d0d8a7ad3b1a2dd479172cad20839a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>shadowColourId</name>
      <anchorfile>classMidiKeyboardComponent.html</anchorfile>
      <anchor>a75cb05395efc61c447dc93e8873ab05eac149269e32db08853eb0c6d285b11f68</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MidiKeyboardComponent</name>
      <anchorfile>classMidiKeyboardComponent.html</anchorfile>
      <anchor>a8272936e0d5efbd6b756cfb7028597ea</anchor>
      <arglist>(MidiKeyboardState &amp;state, Orientation orientation)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~MidiKeyboardComponent</name>
      <anchorfile>classMidiKeyboardComponent.html</anchorfile>
      <anchor>abf2634c9e691e2174f86b77cf9998797</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVelocity</name>
      <anchorfile>classMidiKeyboardComponent.html</anchorfile>
      <anchor>a3e321405b2fa424dfe9679a23408fda3</anchor>
      <arglist>(float velocity, bool useMousePositionForVelocity)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMidiChannel</name>
      <anchorfile>classMidiKeyboardComponent.html</anchorfile>
      <anchor>a65d5ec3c781f5963c7b974c12d6aa8a2</anchor>
      <arglist>(int midiChannelNumber)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getMidiChannel</name>
      <anchorfile>classMidiKeyboardComponent.html</anchorfile>
      <anchor>aa992efe4cbe130f4b5d3b2ccb7f0b287</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMidiChannelsToDisplay</name>
      <anchorfile>classMidiKeyboardComponent.html</anchorfile>
      <anchor>a7c9b21f928db6a8a72b7e323169bad6b</anchor>
      <arglist>(int midiChannelMask)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getMidiChannelsToDisplay</name>
      <anchorfile>classMidiKeyboardComponent.html</anchorfile>
      <anchor>aa8614e0abb166b2f44c2614e4c12e503</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setKeyWidth</name>
      <anchorfile>classMidiKeyboardComponent.html</anchorfile>
      <anchor>a177b5c93b812c35498e6eeeefcb1de16</anchor>
      <arglist>(float widthInPixels)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getKeyWidth</name>
      <anchorfile>classMidiKeyboardComponent.html</anchorfile>
      <anchor>a805bf0fa23c79b5f5b98eef0fe1333c6</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOrientation</name>
      <anchorfile>classMidiKeyboardComponent.html</anchorfile>
      <anchor>a9d57fd0840c352b1db80c258b5d54fdf</anchor>
      <arglist>(Orientation newOrientation)</arglist>
    </member>
    <member kind="function">
      <type>Orientation</type>
      <name>getOrientation</name>
      <anchorfile>classMidiKeyboardComponent.html</anchorfile>
      <anchor>af067b7adcdf950c4615326186cbb7cff</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAvailableRange</name>
      <anchorfile>classMidiKeyboardComponent.html</anchorfile>
      <anchor>a8628c695cf83b8bea146722f653d12d9</anchor>
      <arglist>(int lowestNote, int highestNote)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getRangeStart</name>
      <anchorfile>classMidiKeyboardComponent.html</anchorfile>
      <anchor>a9cff573cd06fd8d1a7c37d9ea406a032</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getRangeEnd</name>
      <anchorfile>classMidiKeyboardComponent.html</anchorfile>
      <anchor>a9952f7894a0732a2dd97cebc8f571622</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLowestVisibleKey</name>
      <anchorfile>classMidiKeyboardComponent.html</anchorfile>
      <anchor>ac9cb4b2afee773e1d29d3a39fb79de8e</anchor>
      <arglist>(int noteNumber)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getLowestVisibleKey</name>
      <anchorfile>classMidiKeyboardComponent.html</anchorfile>
      <anchor>a65c3893f74b575906c2b4d09e7a03fa3</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBlackNoteLengthProportion</name>
      <anchorfile>classMidiKeyboardComponent.html</anchorfile>
      <anchor>a9f05a88e8026f3d423ef026d1170ebe9</anchor>
      <arglist>(float ratio) noexcept</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getBlackNoteLengthProportion</name>
      <anchorfile>classMidiKeyboardComponent.html</anchorfile>
      <anchor>ae0cc6ec03b64f99012979e2692f009ea</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getBlackNoteLength</name>
      <anchorfile>classMidiKeyboardComponent.html</anchorfile>
      <anchor>abe40c4bd99e138ee13dae7dcb77246b6</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setScrollButtonsVisible</name>
      <anchorfile>classMidiKeyboardComponent.html</anchorfile>
      <anchor>a209f55725a073395da946d8cb4652f0d</anchor>
      <arglist>(bool canScroll)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getKeyStartPosition</name>
      <anchorfile>classMidiKeyboardComponent.html</anchorfile>
      <anchor>a862c006640be0d0b28a670d8fdee1728</anchor>
      <arglist>(int midiNoteNumber) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getTotalKeyboardWidth</name>
      <anchorfile>classMidiKeyboardComponent.html</anchorfile>
      <anchor>a71c9934703f5e506539861735ba439c8</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNoteAtPosition</name>
      <anchorfile>classMidiKeyboardComponent.html</anchorfile>
      <anchor>ab027e69a01c5b6c46d71f37e5e1f617c</anchor>
      <arglist>(Point&lt; int &gt; position)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearKeyMappings</name>
      <anchorfile>classMidiKeyboardComponent.html</anchorfile>
      <anchor>a24880c249ce33326d3bc1636b2b116a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setKeyPressForNote</name>
      <anchorfile>classMidiKeyboardComponent.html</anchorfile>
      <anchor>ac72e50288986458d0f288f723edf9f69</anchor>
      <arglist>(const KeyPress &amp;key, int midiNoteOffsetFromC)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeKeyPressForNote</name>
      <anchorfile>classMidiKeyboardComponent.html</anchorfile>
      <anchor>a142da1db9d85ebdd107986d1725041e6</anchor>
      <arglist>(int midiNoteOffsetFromC)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setKeyPressBaseOctave</name>
      <anchorfile>classMidiKeyboardComponent.html</anchorfile>
      <anchor>ad79211e120662c2ce6079e78f724209f</anchor>
      <arglist>(int newOctaveNumber)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOctaveForMiddleC</name>
      <anchorfile>classMidiKeyboardComponent.html</anchorfile>
      <anchor>a0fa0517007dae385e61b92a938e5a030</anchor>
      <arglist>(int octaveNumForMiddleC)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getOctaveForMiddleC</name>
      <anchorfile>classMidiKeyboardComponent.html</anchorfile>
      <anchor>a4409af4c9ef645c3c1d91027c98a87d0</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>paint</name>
      <anchorfile>classMidiKeyboardComponent.html</anchorfile>
      <anchor>a5af0c8f29a491542ac068cff12141398</anchor>
      <arglist>(Graphics &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resized</name>
      <anchorfile>classMidiKeyboardComponent.html</anchorfile>
      <anchor>a4c7191a8e9e7b9f691ae660cb0f05ae2</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mouseMove</name>
      <anchorfile>classMidiKeyboardComponent.html</anchorfile>
      <anchor>ae5e206eec4d5c116d4b8956a29416853</anchor>
      <arglist>(const MouseEvent &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mouseDrag</name>
      <anchorfile>classMidiKeyboardComponent.html</anchorfile>
      <anchor>a19729bfda70c97a99a380792e1bfcb68</anchor>
      <arglist>(const MouseEvent &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mouseDown</name>
      <anchorfile>classMidiKeyboardComponent.html</anchorfile>
      <anchor>a359f60ca24f34735023808b115b8106c</anchor>
      <arglist>(const MouseEvent &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mouseUp</name>
      <anchorfile>classMidiKeyboardComponent.html</anchorfile>
      <anchor>a1d96697550d0fdc899c0224b2402d158</anchor>
      <arglist>(const MouseEvent &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mouseEnter</name>
      <anchorfile>classMidiKeyboardComponent.html</anchorfile>
      <anchor>af61001812475a88a62637f7b81242718</anchor>
      <arglist>(const MouseEvent &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mouseExit</name>
      <anchorfile>classMidiKeyboardComponent.html</anchorfile>
      <anchor>a7126629da11c5aaea1752fbc072cb9c5</anchor>
      <arglist>(const MouseEvent &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mouseWheelMove</name>
      <anchorfile>classMidiKeyboardComponent.html</anchorfile>
      <anchor>a270f042eb6b2eb022b97f8d0f926065d</anchor>
      <arglist>(const MouseEvent &amp;, const MouseWheelDetails &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>timerCallback</name>
      <anchorfile>classMidiKeyboardComponent.html</anchorfile>
      <anchor>a287ff0306d5f83f88aab4a512698b20f</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>keyStateChanged</name>
      <anchorfile>classMidiKeyboardComponent.html</anchorfile>
      <anchor>a6dd0d6d6b7a12124c1b9cd5d6b64c198</anchor>
      <arglist>(bool isKeyDown) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>keyPressed</name>
      <anchorfile>classMidiKeyboardComponent.html</anchorfile>
      <anchor>aff327756952b697c224fd3341ec7f376</anchor>
      <arglist>(const KeyPress &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>focusLost</name>
      <anchorfile>classMidiKeyboardComponent.html</anchorfile>
      <anchor>a9c017397bbf82eebabc5985d5c2ac766</anchor>
      <arglist>(FocusChangeType) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>handleNoteOn</name>
      <anchorfile>classMidiKeyboardComponent.html</anchorfile>
      <anchor>a92c81b4d77a09fbe9de21af2040d98d5</anchor>
      <arglist>(MidiKeyboardState *, int midiChannel, int midiNoteNumber, float velocity) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>handleNoteOff</name>
      <anchorfile>classMidiKeyboardComponent.html</anchorfile>
      <anchor>a808c146824bf5635e1e2c1a101e761b7</anchor>
      <arglist>(MidiKeyboardState *, int midiChannel, int midiNoteNumber, float velocity) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>colourChanged</name>
      <anchorfile>classMidiKeyboardComponent.html</anchorfile>
      <anchor>a87dd0407690c76449d25a3b9ffbaacb6</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MidiKeyboardStateListener</name>
      <anchorfile>classMidiKeyboardStateListener.html</anchorfile>
      <anchor>a657137415d4965118111ee4f1b75d9cb</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MidiKeyboardStateListener</name>
      <anchorfile>classMidiKeyboardStateListener.html</anchorfile>
      <anchor>afe4605c8d15e17cf8327078b6bcd2130</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>drawWhiteNote</name>
      <anchorfile>classMidiKeyboardComponent.html</anchorfile>
      <anchor>a4ea196a5f3da8336e7c7f6b3dbeae3e5</anchor>
      <arglist>(int midiNoteNumber, Graphics &amp;g, int x, int y, int w, int h, bool isDown, bool isOver, const Colour &amp;lineColour, const Colour &amp;textColour)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>drawBlackNote</name>
      <anchorfile>classMidiKeyboardComponent.html</anchorfile>
      <anchor>a5c8caf074328689d7d8d32885979d2ef</anchor>
      <arglist>(int midiNoteNumber, Graphics &amp;g, int x, int y, int w, int h, bool isDown, bool isOver, const Colour &amp;noteFillColour)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual String</type>
      <name>getWhiteNoteText</name>
      <anchorfile>classMidiKeyboardComponent.html</anchorfile>
      <anchor>a76583bdd62d53794c0fbdbea451a5121</anchor>
      <arglist>(const int midiNoteNumber)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>drawUpDownButton</name>
      <anchorfile>classMidiKeyboardComponent.html</anchorfile>
      <anchor>a1bcc397745486d1576b8b1440533cbd5</anchor>
      <arglist>(Graphics &amp;g, int w, int h, const bool isMouseOver, const bool isButtonPressed, const bool movesOctavesUp)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>mouseDownOnKey</name>
      <anchorfile>classMidiKeyboardComponent.html</anchorfile>
      <anchor>ae89f77de00ce176aa9196009bd58755c</anchor>
      <arglist>(int midiNoteNumber, const MouseEvent &amp;e)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>mouseDraggedToKey</name>
      <anchorfile>classMidiKeyboardComponent.html</anchorfile>
      <anchor>ad9ca06baaf1f9def867598e0f9ab0fff</anchor>
      <arglist>(int midiNoteNumber, const MouseEvent &amp;e)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>mouseUpOnKey</name>
      <anchorfile>classMidiKeyboardComponent.html</anchorfile>
      <anchor>a051aef9e1dbf55aa91dee30f7d7549c9</anchor>
      <arglist>(int midiNoteNumber, const MouseEvent &amp;e)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>getKeyPosition</name>
      <anchorfile>classMidiKeyboardComponent.html</anchorfile>
      <anchor>ad08b809c0e82d9f8de186fa96c72c60d</anchor>
      <arglist>(int midiNoteNumber, float keyWidth, int &amp;x, int &amp;w) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Rectangle&lt; int &gt;</type>
      <name>getRectangleForKey</name>
      <anchorfile>classMidiKeyboardComponent.html</anchorfile>
      <anchor>af11b3f0a8515c334c5da58d5f525e6ed</anchor>
      <arglist>(int midiNoteNumber) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MidiKeyboardState</name>
    <filename>classMidiKeyboardState.html</filename>
    <member kind="function">
      <type></type>
      <name>MidiKeyboardState</name>
      <anchorfile>classMidiKeyboardState.html</anchorfile>
      <anchor>a73da349edfd89275f5b26d20c9176238</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~MidiKeyboardState</name>
      <anchorfile>classMidiKeyboardState.html</anchorfile>
      <anchor>af2b02fd4e51714be242331000e8f3e11</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classMidiKeyboardState.html</anchorfile>
      <anchor>a32ba944d0ca8e29347abb96f24e56bf1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNoteOn</name>
      <anchorfile>classMidiKeyboardState.html</anchorfile>
      <anchor>ab99a7baab30f24ef183d08ebb0014a20</anchor>
      <arglist>(int midiChannel, int midiNoteNumber) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNoteOnForChannels</name>
      <anchorfile>classMidiKeyboardState.html</anchorfile>
      <anchor>ac4d6b358469d1765d5ee2fd7880b7d3a</anchor>
      <arglist>(int midiChannelMask, int midiNoteNumber) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>noteOn</name>
      <anchorfile>classMidiKeyboardState.html</anchorfile>
      <anchor>a60e0e629d485466360bded04ad35025a</anchor>
      <arglist>(int midiChannel, int midiNoteNumber, float velocity)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>noteOff</name>
      <anchorfile>classMidiKeyboardState.html</anchorfile>
      <anchor>aca0173180551f533327c1f8e4daa332e</anchor>
      <arglist>(int midiChannel, int midiNoteNumber, float velocity)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>allNotesOff</name>
      <anchorfile>classMidiKeyboardState.html</anchorfile>
      <anchor>a74515f3ac2b2f1bebd6fe5204e9eb203</anchor>
      <arglist>(int midiChannel)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>processNextMidiEvent</name>
      <anchorfile>classMidiKeyboardState.html</anchorfile>
      <anchor>a537775e3c3b13bbd6b3195c928aae5c4</anchor>
      <arglist>(const MidiMessage &amp;message)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>processNextMidiBuffer</name>
      <anchorfile>classMidiKeyboardState.html</anchorfile>
      <anchor>aa7afad38f581c129c407a4d7d069bbbb</anchor>
      <arglist>(MidiBuffer &amp;buffer, int startSample, int numSamples, bool injectIndirectEvents)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addListener</name>
      <anchorfile>classMidiKeyboardState.html</anchorfile>
      <anchor>ac802282e7fde631869c854c419c66018</anchor>
      <arglist>(MidiKeyboardStateListener *listener)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeListener</name>
      <anchorfile>classMidiKeyboardState.html</anchorfile>
      <anchor>a1a4eebcb383b1d4aa650757a5b2694ed</anchor>
      <arglist>(MidiKeyboardStateListener *listener)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MidiKeyboardStateListener</name>
    <filename>classMidiKeyboardStateListener.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>handleNoteOn</name>
      <anchorfile>classMidiKeyboardStateListener.html</anchorfile>
      <anchor>a0f4b54bd89239c0e184f155060a4397a</anchor>
      <arglist>(MidiKeyboardState *source, int midiChannel, int midiNoteNumber, float velocity)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>handleNoteOff</name>
      <anchorfile>classMidiKeyboardStateListener.html</anchorfile>
      <anchor>a11e569656febf461f2a3562d208ead61</anchor>
      <arglist>(MidiKeyboardState *source, int midiChannel, int midiNoteNumber, float velocity)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MidiMessage</name>
    <filename>classMidiMessage.html</filename>
    <member kind="enumeration">
      <type></type>
      <name>SmpteTimecodeType</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>a0e86db4d1186af858ad9f80d6abe96ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>fps24</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>a0e86db4d1186af858ad9f80d6abe96abade7bcfdca717ecd009d2a10c41e77485</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>fps25</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>a0e86db4d1186af858ad9f80d6abe96abab4a72d4e94a2431828188c3dd05df35a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>fps30drop</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>a0e86db4d1186af858ad9f80d6abe96aba16b56e3f81f4265ffc0d553e763f6a4f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>fps30</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>a0e86db4d1186af858ad9f80d6abe96aba91e489a4210c9f5cbe2a47c4d3e26194</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>MidiMachineControlCommand</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>aa95b060274257522d1af40794ad1631d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>mmc_stop</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>aa95b060274257522d1af40794ad1631da155f2d18fc89378f6cc9c4982db67bac</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>mmc_play</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>aa95b060274257522d1af40794ad1631da852c994c93716c792fd33ef2882174bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>mmc_deferredplay</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>aa95b060274257522d1af40794ad1631da07a0c0e0cc4d8a4e03b420bcdeb5e555</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>mmc_fastforward</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>aa95b060274257522d1af40794ad1631da2d6a145a51bd9090e99040cd90241318</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>mmc_rewind</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>aa95b060274257522d1af40794ad1631da8ab7de3ea5e060435d0d420630cdd40b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>mmc_recordStart</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>aa95b060274257522d1af40794ad1631da4f684774d0aa585b94f9e8aa447ce1a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>mmc_recordStop</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>aa95b060274257522d1af40794ad1631da2dde82123f4aba81c023d5a07e6732cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>mmc_pause</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>aa95b060274257522d1af40794ad1631daea66d5cf7abc74b30cf5d529057ff301</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MidiMessage</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>ab5b6fe39b57b4c39e4400b4d8e9bbbc9</anchor>
      <arglist>(int byte1, int byte2, int byte3, double timeStamp=0) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MidiMessage</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>a1e4f3637ec1968b34b0aa0e87dd30d03</anchor>
      <arglist>(int byte1, int byte2, double timeStamp=0) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MidiMessage</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>ac37614dc438a8adfaf335daa0c67e1db</anchor>
      <arglist>(int byte1, double timeStamp=0) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MidiMessage</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>a6adcb5182a0e1446f5b9d77c9e08c7b3</anchor>
      <arglist>(const void *data, int numBytes, double timeStamp=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MidiMessage</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>a5dccdd2d580003120f5cfe4aafd28ed9</anchor>
      <arglist>(const void *data, int maxBytesToUse, int &amp;numBytesUsed, uint8 lastStatusByte, double timeStamp=0, bool sysexHasEmbeddedLength=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MidiMessage</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>ad6e2e3e43fa78ef012bf87b5d7392e8a</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MidiMessage</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>a2d3e85112bf8b37d91b3aab0911cf5b6</anchor>
      <arglist>(const MidiMessage &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MidiMessage</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>ab0701cc3ca5c035b10c1f5f894e5276a</anchor>
      <arglist>(const MidiMessage &amp;, double newTimeStamp)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~MidiMessage</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>a914e3d004a3b62dfcdcf1c3f7e71b81c</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>MidiMessage &amp;</type>
      <name>operator=</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>a3ae9ac3c147ca7a1f66f15905e37412a</anchor>
      <arglist>(const MidiMessage &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MidiMessage</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>a024fc6e9466031a4ce14ce291059a9ee</anchor>
      <arglist>(MidiMessage &amp;&amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>MidiMessage &amp;</type>
      <name>operator=</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>aa2988146ea337ec12ce462514fd76a3f</anchor>
      <arglist>(MidiMessage &amp;&amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>const uint8 *</type>
      <name>getRawData</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>aee23b787f8439fe038079c38f6365521</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getRawDataSize</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>a5768889fe63a63c58755d9d2f05afbd0</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>getDescription</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>aa6cdb5124ab19e690824888fbed9fa93</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getTimeStamp</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>a9a942c96a776e80e3c512058b29011a8</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTimeStamp</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>ad5f9ceed74dd22e846ed0650d81f11a7</anchor>
      <arglist>(double newTimestamp) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addToTimeStamp</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>a49112e5cf324feff8c69e2a2d8963695</anchor>
      <arglist>(double delta) noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getChannel</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>a7d681b7417c52d29cb73c108ca2a83b7</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isForChannel</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>aaf63f62d38b5174c967164395bf05252</anchor>
      <arglist>(int channelNumber) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setChannel</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>ac35c11dba441d652e70720525cb2dc7f</anchor>
      <arglist>(int newChannelNumber) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSysEx</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>a8412d9b5f9d717d104537b96263dbdf5</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const uint8 *</type>
      <name>getSysExData</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>a473aec9f7d86b602e407e6d488122fd7</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getSysExDataSize</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>afb6ff5014531a80589756228fe637aaa</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNoteOn</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>a590da92c0536e23f9d3c90c99278d789</anchor>
      <arglist>(bool returnTrueForVelocity0=false) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNoteOff</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>af66814dee34738882ba39d8796b77be0</anchor>
      <arglist>(bool returnTrueForNoteOnVelocity0=true) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNoteOnOrOff</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>a0d1c1c5927eb898dbacb832f768299bc</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNoteNumber</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>a6a5f965e98254fb026c5a20b64edcbc1</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNoteNumber</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>a47583c88bed0ca4b30b0f86bc2afb48c</anchor>
      <arglist>(int newNoteNumber) noexcept</arglist>
    </member>
    <member kind="function">
      <type>uint8</type>
      <name>getVelocity</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>ad5483775a661b2176687303bc9c8aac6</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getFloatVelocity</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>a07210a8a79ef89e079be89ad6e1b98ae</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVelocity</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>afab2cc0f59531d4aba57a0f10e9dafc4</anchor>
      <arglist>(float newVelocity) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>multiplyVelocity</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>a12058e7e2cb2d287241824caf6c729c7</anchor>
      <arglist>(float scaleFactor) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSustainPedalOn</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>a2a0b1143c544e7a107c1d86e1ac7d4c3</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSustainPedalOff</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>abb4e431332e797a548092c16c37f5ccf</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSostenutoPedalOn</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>a3ddae770f33da071772f3570a9dbd119</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSostenutoPedalOff</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>aa5508f9280afa255ab17b5cfc7577a5c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSoftPedalOn</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>a37edc67c1113f68a3e9cb063ab7e2781</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSoftPedalOff</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>a3fa95632707d7540c705151421de13fe</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isProgramChange</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>a89035047ec5cc9b77d8d484d4a8c9a8d</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getProgramChangeNumber</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>a9c200619411c253b661acee5660e4b76</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isPitchWheel</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>aaa504ef83e8d0c5fd8f652bf0712c4e1</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getPitchWheelValue</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>aaa9675ccbce68b47067b512370e2ac20</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isAftertouch</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>a08acde3017ba958b404f1b5e191c88e6</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getAfterTouchValue</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>a623eb143fab4c07d18106c8e4e40316f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isChannelPressure</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>a49037c7f75318d83ab284708c682c843</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getChannelPressureValue</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>aa9dc36194c26bb72f35d8522f60b3ac1</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isController</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>ac059a2234b67e28464a519632a1b31db</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getControllerNumber</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>a772acb26aa7f2cdc1992210b6d2d496a</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getControllerValue</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>aa301aa18dace968d5ebb2f809fd52522</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isControllerOfType</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>af5f1b96eff37b0ca1fccfb67960e829b</anchor>
      <arglist>(int controllerType) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isAllNotesOff</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>a861beff07f9593a7711e773bcd81ba3c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isAllSoundOff</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>af87b936f883b459c1e9cb87c0bfec783</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isMetaEvent</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>ac1ec120f33d7cb7fc186f254493cf553</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getMetaEventType</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>ae46c134b2808500122c73347cc07014f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const uint8 *</type>
      <name>getMetaEventData</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>a7ae164759cabda66685b34961bf0073e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getMetaEventLength</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>a3e0156ec465f66b3333ecfbcdfe340f6</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isTrackMetaEvent</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>acecc7e99f8287e851d6d944a4babc08e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEndOfTrackMetaEvent</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>a17ea4a5fc3cb8e1b83a002797e1350e6</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isTrackNameEvent</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>aeb18602ea05f67cad490f8866e07c172</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isTextMetaEvent</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>afb44a1c54810b707eb0f6e108d3060f1</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>getTextFromTextMetaEvent</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>a0505068deffc2212e292144f73d44627</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isTempoMetaEvent</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>aa9654c52ea08da9d76a31c93006348f8</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getTempoMetaEventTickLength</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>abd90df7704a306f5186aa86f14978ae9</anchor>
      <arglist>(short timeFormat) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getTempoSecondsPerQuarterNote</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>ab4228aa759969257eae0dc29d76bd70c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isTimeSignatureMetaEvent</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>a0253a501abf4ee4d2a66dcc6e8ce433c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getTimeSignatureInfo</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>a35ab9435cfda308abd22f6d72a5fece1</anchor>
      <arglist>(int &amp;numerator, int &amp;denominator) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isKeySignatureMetaEvent</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>ae686c5d86fa7d04df268f56bbf853f23</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getKeySignatureNumberOfSharpsOrFlats</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>a13348f90ec60de09d242265d4652711c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isKeySignatureMajorKey</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>a9388bf7192568805515545ec31fa605b</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isMidiChannelMetaEvent</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>a15aa1d11ffbdfbe78b2a11bf6375f4f9</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getMidiChannelMetaEventChannel</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>a04730ebdec68d3db7501e8e2c68111e3</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isActiveSense</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>abfb16fe1f29aa68b21cbe3933c048606</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isMidiStart</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>aea49271c04e05ebad35131635935f469</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isMidiContinue</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>a8c5254f2b5450aaf1937395a7f162636</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isMidiStop</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>a54444e9d53fb321909cf0b5c9d1b5515</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isMidiClock</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>a0529f082f989c25373050f04e0df2b1f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSongPositionPointer</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>ae4ed73e5046837c640064c937c538a00</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getSongPositionPointerMidiBeat</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>a75823853d0f796d2671efa4a1b9876f1</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isQuarterFrame</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>a948318bbf7471f8e4ab857c43004b34c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getQuarterFrameSequenceNumber</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>a9eb49c9f42a98dfd8dd9c2eb55e33afd</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getQuarterFrameValue</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>acd7704a0c68987326fdd4127f77a9976</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isFullFrame</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>a79564ccd8e9e0a46591eb2daedea8cdb</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getFullFrameParameters</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>a47d3e7c684912a0c9993f227ef675198</anchor>
      <arglist>(int &amp;hours, int &amp;minutes, int &amp;seconds, int &amp;frames, SmpteTimecodeType &amp;timecodeType) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isMidiMachineControlMessage</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>af6fcf72f3bbbf104c63da61defa42bc9</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>MidiMachineControlCommand</type>
      <name>getMidiMachineControlCommand</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>a20f75c97a556334bce9db178c072dd27</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isMidiMachineControlGoto</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>aa9ce1a0076fb2e6c229a84bd6e2665d9</anchor>
      <arglist>(int &amp;hours, int &amp;minutes, int &amp;seconds, int &amp;frames) const noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MidiMessage</type>
      <name>noteOn</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>a24e09d2737c08842a6e4902554d2899c</anchor>
      <arglist>(int channel, int noteNumber, float velocity) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MidiMessage</type>
      <name>noteOn</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>a4858073a7bf29ce14fbb2f6ad7faeb86</anchor>
      <arglist>(int channel, int noteNumber, uint8 velocity) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MidiMessage</type>
      <name>noteOff</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>a8f2c46b2cf557f4e4f55174a68915587</anchor>
      <arglist>(int channel, int noteNumber, float velocity) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MidiMessage</type>
      <name>noteOff</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>ab1883b2f734103f1974b4a4364e9da4c</anchor>
      <arglist>(int channel, int noteNumber, uint8 velocity) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MidiMessage</type>
      <name>noteOff</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>aa5cc869d24c5115fd3936d958711c113</anchor>
      <arglist>(int channel, int noteNumber) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MidiMessage</type>
      <name>programChange</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>a72a62c7793c8f4a917bf060e7475a1e2</anchor>
      <arglist>(int channel, int programNumber) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MidiMessage</type>
      <name>pitchWheel</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>af0c5babd47c02dad8f8e2171e1cd662c</anchor>
      <arglist>(int channel, int position) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MidiMessage</type>
      <name>aftertouchChange</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>a650e86fdb73ee07e68594e9296edba45</anchor>
      <arglist>(int channel, int noteNumber, int aftertouchAmount) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MidiMessage</type>
      <name>channelPressureChange</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>af3100fb66d5fc20c8c0d458c51ddb309</anchor>
      <arglist>(int channel, int pressure) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MidiMessage</type>
      <name>controllerEvent</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>a7c776a7b6bfa0e4216e95ff236ff250c</anchor>
      <arglist>(int channel, int controllerType, int value) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MidiMessage</type>
      <name>allNotesOff</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>a8e4c49679c88dc562ca523060fffc11e</anchor>
      <arglist>(int channel) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MidiMessage</type>
      <name>allSoundOff</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>a3a56275d5dd5bebc9edba4e6ab8aa467</anchor>
      <arglist>(int channel) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MidiMessage</type>
      <name>allControllersOff</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>ac691395427e8cece84124508e8650387</anchor>
      <arglist>(int channel) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MidiMessage</type>
      <name>endOfTrack</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>ae6e0123d262c36aad45471dd85ed47d6</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MidiMessage</type>
      <name>textMetaEvent</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>a428ecbd96b14b60326c6c8b8863e0fd4</anchor>
      <arglist>(int type, StringRef text)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MidiMessage</type>
      <name>tempoMetaEvent</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>af9166392943b1905b39dc816aca1aa99</anchor>
      <arglist>(int microsecondsPerQuarterNote) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MidiMessage</type>
      <name>timeSignatureMetaEvent</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>a37f45d1509f385ab05b93c0795cc9fc1</anchor>
      <arglist>(int numerator, int denominator)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MidiMessage</type>
      <name>keySignatureMetaEvent</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>af293098dc762316469a0bb1edfa4f53c</anchor>
      <arglist>(int numberOfSharpsOrFlats, bool isMinorKey)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MidiMessage</type>
      <name>midiChannelMetaEvent</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>afd3fc870ce448791ea794d858062435a</anchor>
      <arglist>(int channel) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MidiMessage</type>
      <name>midiStart</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>a32256e3ed500d65199e931575b3c7f7f</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MidiMessage</type>
      <name>midiContinue</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>a2596bded93cb7d3d196ece8a7dee2d9b</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MidiMessage</type>
      <name>midiStop</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>a079571d3e3e25780fa2764c33c222249</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MidiMessage</type>
      <name>midiClock</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>ab5cd973a73b82153aea0329933a37306</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MidiMessage</type>
      <name>songPositionPointer</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>a0bbced4f538c6c9d1aedc03acd2fc4ab</anchor>
      <arglist>(int positionInMidiBeats) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MidiMessage</type>
      <name>quarterFrame</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>ab21def5ca28557f4d7df31c8425c3386</anchor>
      <arglist>(int sequenceNumber, int value) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MidiMessage</type>
      <name>fullFrame</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>a58a16ba76b5f789b238155359ba9379c</anchor>
      <arglist>(int hours, int minutes, int seconds, int frames, SmpteTimecodeType timecodeType)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MidiMessage</type>
      <name>midiMachineControlCommand</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>a196e608c9db1cddc57caebf241d89e1b</anchor>
      <arglist>(MidiMachineControlCommand command)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MidiMessage</type>
      <name>midiMachineControlGoto</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>a88a4e968bcde1ba571f3823edda75ab3</anchor>
      <arglist>(int hours, int minutes, int seconds, int frames)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MidiMessage</type>
      <name>masterVolume</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>a76e40b076f9b6790aa2a664e523f98f5</anchor>
      <arglist>(float volume)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MidiMessage</type>
      <name>createSysExMessage</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>aa7707f05f77f642659dd87275072f666</anchor>
      <arglist>(const void *sysexData, int dataSize)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>readVariableLengthVal</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>a7a9fc08ca4beba20e50afaf91c0c316b</anchor>
      <arglist>(const uint8 *data, int &amp;numBytesUsed) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>getMessageLengthFromFirstByte</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>abf97153b27393327bbf74847e67ebf7a</anchor>
      <arglist>(uint8 firstByte) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static String</type>
      <name>getMidiNoteName</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>aff9cacd221a092d203249a2c7435d9dc</anchor>
      <arglist>(int noteNumber, bool useSharps, bool includeOctaveNumber, int octaveNumForMiddleC)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>getMidiNoteInHertz</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>adad1aabd89993498baf26fc17ef1ff72</anchor>
      <arglist>(int noteNumber, double frequencyOfA=440.0) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isMidiNoteBlack</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>a7a8db55d5a134e808c5155fdecef025d</anchor>
      <arglist>(int noteNumber) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const char *</type>
      <name>getGMInstrumentName</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>a005a9e0c239b4a2e7f8e0a0b8b31c223</anchor>
      <arglist>(int midiInstrumentNumber)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const char *</type>
      <name>getGMInstrumentBankName</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>a016dc199f3232dd46b83bb5e0d73fcee</anchor>
      <arglist>(int midiBankNumber)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const char *</type>
      <name>getRhythmInstrumentName</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>a3c9df982a077de4e45362ea57a56da3a</anchor>
      <arglist>(int midiNoteNumber)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const char *</type>
      <name>getControllerName</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>a0a95699b23a2b077bb72f39d23e26680</anchor>
      <arglist>(int controllerNumber)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static uint8</type>
      <name>floatValueToMidiByte</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>af87c7c685ef37e1dc4163fdcf3bcd0ef</anchor>
      <arglist>(float valueBetween0and1) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static uint16</type>
      <name>pitchbendToPitchwheelPos</name>
      <anchorfile>classMidiMessage.html</anchorfile>
      <anchor>aaa9b7273ede328166d038587d871ba4c</anchor>
      <arglist>(float pitchbendInSemitones, float pitchbendRangeInSemitones) noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MidiMessageCollector</name>
    <filename>classMidiMessageCollector.html</filename>
    <base>MidiKeyboardStateListener</base>
    <base>MidiInputCallback</base>
    <member kind="function">
      <type></type>
      <name>MidiMessageCollector</name>
      <anchorfile>classMidiMessageCollector.html</anchorfile>
      <anchor>a81989229e6c29b6f3835a961195278d7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~MidiMessageCollector</name>
      <anchorfile>classMidiMessageCollector.html</anchorfile>
      <anchor>a2a3b28e921806211ad3d0109f09fd8a9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classMidiMessageCollector.html</anchorfile>
      <anchor>ab9f16c8ff3d5d1b45ec409a6fb297b51</anchor>
      <arglist>(double sampleRate)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addMessageToQueue</name>
      <anchorfile>classMidiMessageCollector.html</anchorfile>
      <anchor>ad1d42045ccbc9bbc4256d08a632a8fe2</anchor>
      <arglist>(const MidiMessage &amp;message)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeNextBlockOfMessages</name>
      <anchorfile>classMidiMessageCollector.html</anchorfile>
      <anchor>ac72b6cf4965e63b90d1a2402b73b1798</anchor>
      <arglist>(MidiBuffer &amp;destBuffer, int numSamples)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>handleNoteOn</name>
      <anchorfile>classMidiMessageCollector.html</anchorfile>
      <anchor>a0e6368630ea8c456c79f86d8aebcaeb6</anchor>
      <arglist>(MidiKeyboardState *, int midiChannel, int midiNoteNumber, float velocity) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>handleNoteOff</name>
      <anchorfile>classMidiMessageCollector.html</anchorfile>
      <anchor>a07e1a9bbeb9131dbe8d55431bb166ee8</anchor>
      <arglist>(MidiKeyboardState *, int midiChannel, int midiNoteNumber, float velocity) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>handleIncomingMidiMessage</name>
      <anchorfile>classMidiMessageCollector.html</anchorfile>
      <anchor>af76869b33248a78b2a580e63ec855773</anchor>
      <arglist>(MidiInput *, const MidiMessage &amp;) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MidiMessageSequence</name>
    <filename>classMidiMessageSequence.html</filename>
    <class kind="class">MidiMessageSequence::MidiEventHolder</class>
    <member kind="function">
      <type></type>
      <name>MidiMessageSequence</name>
      <anchorfile>classMidiMessageSequence.html</anchorfile>
      <anchor>a29929e2219c0e52cc7da1d0d9cef2c82</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MidiMessageSequence</name>
      <anchorfile>classMidiMessageSequence.html</anchorfile>
      <anchor>a89919c97af606bbe7b0dcdf77c4f9c3f</anchor>
      <arglist>(const MidiMessageSequence &amp;)</arglist>
    </member>
    <member kind="function">
      <type>MidiMessageSequence &amp;</type>
      <name>operator=</name>
      <anchorfile>classMidiMessageSequence.html</anchorfile>
      <anchor>a67fb24813234146636aeb309e2bb4354</anchor>
      <arglist>(const MidiMessageSequence &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MidiMessageSequence</name>
      <anchorfile>classMidiMessageSequence.html</anchorfile>
      <anchor>af537eeb78ee14af78034bc5661298c08</anchor>
      <arglist>(MidiMessageSequence &amp;&amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>MidiMessageSequence &amp;</type>
      <name>operator=</name>
      <anchorfile>classMidiMessageSequence.html</anchorfile>
      <anchor>a64800a707bf39517dfc6e5b0842683b1</anchor>
      <arglist>(MidiMessageSequence &amp;&amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~MidiMessageSequence</name>
      <anchorfile>classMidiMessageSequence.html</anchorfile>
      <anchor>a072fd14cf8b73d09cdb54373f74f294a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classMidiMessageSequence.html</anchorfile>
      <anchor>a9bf65342afa0261969d2d55834798763</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumEvents</name>
      <anchorfile>classMidiMessageSequence.html</anchorfile>
      <anchor>a54fba19a0c5a4ae97e16b4e8f1c2ddb7</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>MidiEventHolder *</type>
      <name>getEventPointer</name>
      <anchorfile>classMidiMessageSequence.html</anchorfile>
      <anchor>af5004c2160fdcf3cb4746f81388fa1f1</anchor>
      <arglist>(int index) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getTimeOfMatchingKeyUp</name>
      <anchorfile>classMidiMessageSequence.html</anchorfile>
      <anchor>a6d0aa2e9c4c4abad5fdf1c0c83a8b60d</anchor>
      <arglist>(int index) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getIndexOfMatchingKeyUp</name>
      <anchorfile>classMidiMessageSequence.html</anchorfile>
      <anchor>ad8a3d2903d373c73922de382b7d4542d</anchor>
      <arglist>(int index) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getIndexOf</name>
      <anchorfile>classMidiMessageSequence.html</anchorfile>
      <anchor>a58868f291be0de95375e3ecb11d30ba6</anchor>
      <arglist>(const MidiEventHolder *event) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNextIndexAtTime</name>
      <anchorfile>classMidiMessageSequence.html</anchorfile>
      <anchor>a8dcca263a16b99179fa3b7fdb9092acb</anchor>
      <arglist>(double timeStamp) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getStartTime</name>
      <anchorfile>classMidiMessageSequence.html</anchorfile>
      <anchor>a5b0fd95e0e378095a961ebd874fe7c8a</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getEndTime</name>
      <anchorfile>classMidiMessageSequence.html</anchorfile>
      <anchor>aef21c164edd0f9e09809725cbcc38adf</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getEventTime</name>
      <anchorfile>classMidiMessageSequence.html</anchorfile>
      <anchor>a5a873cd5ba67c7b1d9d1a2d39b983d01</anchor>
      <arglist>(int index) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>MidiEventHolder *</type>
      <name>addEvent</name>
      <anchorfile>classMidiMessageSequence.html</anchorfile>
      <anchor>abcfb3b7334ccd8bf72fc95e5019cddd6</anchor>
      <arglist>(const MidiMessage &amp;newMessage, double timeAdjustment=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deleteEvent</name>
      <anchorfile>classMidiMessageSequence.html</anchorfile>
      <anchor>a67b6db1465ea07fb7493909409d89a44</anchor>
      <arglist>(int index, bool deleteMatchingNoteUp)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addSequence</name>
      <anchorfile>classMidiMessageSequence.html</anchorfile>
      <anchor>a287c649d4618e657fe2fe3c54d16473a</anchor>
      <arglist>(const MidiMessageSequence &amp;other, double timeAdjustmentDelta, double firstAllowableDestTime, double endOfAllowableDestTimes)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addSequence</name>
      <anchorfile>classMidiMessageSequence.html</anchorfile>
      <anchor>a3cae20c271279cc719219edfadb944fe</anchor>
      <arglist>(const MidiMessageSequence &amp;other, double timeAdjustmentDelta)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateMatchedPairs</name>
      <anchorfile>classMidiMessageSequence.html</anchorfile>
      <anchor>a84c73c931fad6357ea81af0323109606</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sort</name>
      <anchorfile>classMidiMessageSequence.html</anchorfile>
      <anchor>a0b8079f18ac0e01d4bb1bc3c20114965</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>extractMidiChannelMessages</name>
      <anchorfile>classMidiMessageSequence.html</anchorfile>
      <anchor>aef3f5fde8115f9fd4b46603f54076038</anchor>
      <arglist>(int channelNumberToExtract, MidiMessageSequence &amp;destSequence, bool alsoIncludeMetaEvents) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>extractSysExMessages</name>
      <anchorfile>classMidiMessageSequence.html</anchorfile>
      <anchor>abf6f7bd5e449976caf1541a880d185b0</anchor>
      <arglist>(MidiMessageSequence &amp;destSequence) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deleteMidiChannelMessages</name>
      <anchorfile>classMidiMessageSequence.html</anchorfile>
      <anchor>a47466395fc2296b724defd56076cd5ed</anchor>
      <arglist>(int channelNumberToRemove)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deleteSysExMessages</name>
      <anchorfile>classMidiMessageSequence.html</anchorfile>
      <anchor>a9654788bd88928d6853d260d4e323e01</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addTimeToMessages</name>
      <anchorfile>classMidiMessageSequence.html</anchorfile>
      <anchor>ad19c814526207b0f38c12307f5588510</anchor>
      <arglist>(double deltaTime) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>createControllerUpdatesForTime</name>
      <anchorfile>classMidiMessageSequence.html</anchorfile>
      <anchor>a10b6a4cb06c33a2bc85c138ded7707ce</anchor>
      <arglist>(int channelNumber, double time, Array&lt; MidiMessage &gt; &amp;resultMessages)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swapWith</name>
      <anchorfile>classMidiMessageSequence.html</anchorfile>
      <anchor>a56ba1ede2962342760a6d5c4b0489bdf</anchor>
      <arglist>(MidiMessageSequence &amp;) noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MidiMessageSequence::MidiEventHolder</name>
    <filename>classMidiMessageSequence_1_1MidiEventHolder.html</filename>
    <member kind="function">
      <type></type>
      <name>~MidiEventHolder</name>
      <anchorfile>classMidiMessageSequence_1_1MidiEventHolder.html</anchorfile>
      <anchor>acd4dbc9ad72a8c2d114a4e3488d103a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>MidiMessage</type>
      <name>message</name>
      <anchorfile>classMidiMessageSequence_1_1MidiEventHolder.html</anchorfile>
      <anchor>a4d9cf307bd15a6abb4e98cfe03f8f580</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>MidiEventHolder *</type>
      <name>noteOffObject</name>
      <anchorfile>classMidiMessageSequence_1_1MidiEventHolder.html</anchorfile>
      <anchor>abd0fc0f7b71616c7a9f6f70b2a499de5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MidiOutput</name>
    <filename>classMidiOutput.html</filename>
    <base protection="private">Thread</base>
    <member kind="function">
      <type></type>
      <name>~MidiOutput</name>
      <anchorfile>classMidiOutput.html</anchorfile>
      <anchor>a5a2e715734b8b6bcf096eca26893125e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const String &amp;</type>
      <name>getName</name>
      <anchorfile>classMidiOutput.html</anchorfile>
      <anchor>a5662e29a58faebe2398b9be73728cf54</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sendMessageNow</name>
      <anchorfile>classMidiOutput.html</anchorfile>
      <anchor>a19c8d64553e0787c920f5b140f7267e9</anchor>
      <arglist>(const MidiMessage &amp;message)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sendBlockOfMessagesNow</name>
      <anchorfile>classMidiOutput.html</anchorfile>
      <anchor>ae54072205364d56260eaa11c7771289f</anchor>
      <arglist>(const MidiBuffer &amp;buffer)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sendBlockOfMessages</name>
      <anchorfile>classMidiOutput.html</anchorfile>
      <anchor>a1356a3303e8f56389ea52f98b56577b6</anchor>
      <arglist>(const MidiBuffer &amp;buffer, double millisecondCounterToStartAt, double samplesPerSecondForBuffer)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearAllPendingMessages</name>
      <anchorfile>classMidiOutput.html</anchorfile>
      <anchor>a9a93ddda8444806f3daf69c1486ae5be</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>startBackgroundThread</name>
      <anchorfile>classMidiOutput.html</anchorfile>
      <anchor>ab4037a74a2ba5206ea12bc706132e9c6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stopBackgroundThread</name>
      <anchorfile>classMidiOutput.html</anchorfile>
      <anchor>a250a8b0691928959e09b84f7bc7593a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StringArray</type>
      <name>getDevices</name>
      <anchorfile>classMidiOutput.html</anchorfile>
      <anchor>a59a303f5b44aa772903984818b6b7275</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>getDefaultDeviceIndex</name>
      <anchorfile>classMidiOutput.html</anchorfile>
      <anchor>a5459a18d9b1b9a5fe27e95e6e9e06a87</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MidiOutput *</type>
      <name>openDevice</name>
      <anchorfile>classMidiOutput.html</anchorfile>
      <anchor>add5366efd74e5c5ee665af4592c6b15e</anchor>
      <arglist>(int deviceIndex)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MidiOutput *</type>
      <name>createNewDevice</name>
      <anchorfile>classMidiOutput.html</anchorfile>
      <anchor>a04169caa4a0c533c57a55357f2e13cc8</anchor>
      <arglist>(const String &amp;deviceName)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MidiRPNDetector</name>
    <filename>classMidiRPNDetector.html</filename>
    <member kind="function">
      <type></type>
      <name>MidiRPNDetector</name>
      <anchorfile>classMidiRPNDetector.html</anchorfile>
      <anchor>aac89378f671f106a6b359ea1fb24487c</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~MidiRPNDetector</name>
      <anchorfile>classMidiRPNDetector.html</anchorfile>
      <anchor>ac174f0bb91d431b47e49201a50b22b15</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classMidiRPNDetector.html</anchorfile>
      <anchor>a2e0a21c1cd2ba5d529af947f7199aa79</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>parseControllerMessage</name>
      <anchorfile>classMidiRPNDetector.html</anchorfile>
      <anchor>a12bc6aeca8c5e8acd7e65cb610c13d19</anchor>
      <arglist>(int midiChannel, int controllerNumber, int controllerValue, MidiRPNMessage &amp;result) noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MidiRPNGenerator</name>
    <filename>classMidiRPNGenerator.html</filename>
    <member kind="function" static="yes">
      <type>static MidiBuffer</type>
      <name>generate</name>
      <anchorfile>classMidiRPNGenerator.html</anchorfile>
      <anchor>a3fe7a88e130891701e1d3bd7533311b0</anchor>
      <arglist>(MidiRPNMessage message)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MidiBuffer</type>
      <name>generate</name>
      <anchorfile>classMidiRPNGenerator.html</anchorfile>
      <anchor>af87d5c963c7d12bd4875359cc882630b</anchor>
      <arglist>(int channel, int parameterNumber, int value, bool isNRPN=false, bool use14BitValue=true)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>MidiRPNMessage</name>
    <filename>structMidiRPNMessage.html</filename>
    <member kind="variable">
      <type>int</type>
      <name>channel</name>
      <anchorfile>structMidiRPNMessage.html</anchorfile>
      <anchor>a06144aeca5c4cd011745881564329d16</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>parameterNumber</name>
      <anchorfile>structMidiRPNMessage.html</anchorfile>
      <anchor>adca04bc6a3cdbd8bd2fb70a15d8530ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>value</name>
      <anchorfile>structMidiRPNMessage.html</anchorfile>
      <anchor>ab0752b04a7c53924d33675bf769714c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>isNRPN</name>
      <anchorfile>structMidiRPNMessage.html</anchorfile>
      <anchor>ae4c0b2e8bf824e2f3f359ee680bf1642</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>is14BitValue</name>
      <anchorfile>structMidiRPNMessage.html</anchorfile>
      <anchor>a92cdc002bd727e2eb703e8e8b8683cfb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MixerAudioSource</name>
    <filename>classMixerAudioSource.html</filename>
    <base>AudioSource</base>
    <member kind="function">
      <type></type>
      <name>MixerAudioSource</name>
      <anchorfile>classMixerAudioSource.html</anchorfile>
      <anchor>aaca222da99166a5eaf439bdfd338dfca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~MixerAudioSource</name>
      <anchorfile>classMixerAudioSource.html</anchorfile>
      <anchor>acecfacbc1ce17d659e96ae4c39ac6f07</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addInputSource</name>
      <anchorfile>classMixerAudioSource.html</anchorfile>
      <anchor>a2f5ccbafaf3e746b1a219b750ddac7f2</anchor>
      <arglist>(AudioSource *newInput, bool deleteWhenRemoved)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeInputSource</name>
      <anchorfile>classMixerAudioSource.html</anchorfile>
      <anchor>abab39cc908793dc78dc7af23d1c516b2</anchor>
      <arglist>(AudioSource *input)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeAllInputs</name>
      <anchorfile>classMixerAudioSource.html</anchorfile>
      <anchor>ac2a2baaa8b0e941ae8ffe55d37cea176</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>prepareToPlay</name>
      <anchorfile>classMixerAudioSource.html</anchorfile>
      <anchor>af774982c4a8726436f3e505e459cdf18</anchor>
      <arglist>(int samplesPerBlockExpected, double sampleRate) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>releaseResources</name>
      <anchorfile>classMixerAudioSource.html</anchorfile>
      <anchor>aa4b64f534cadbd33e7aefcc6cee0f540</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getNextAudioBlock</name>
      <anchorfile>classMixerAudioSource.html</anchorfile>
      <anchor>a256583fd3a65353ec64910868c116e79</anchor>
      <arglist>(const AudioSourceChannelInfo &amp;) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ModalCallbackFunction</name>
    <filename>classModalCallbackFunction.html</filename>
    <member kind="function" static="yes">
      <type>static ModalComponentManager::Callback *</type>
      <name>create</name>
      <anchorfile>classModalCallbackFunction.html</anchorfile>
      <anchor>a47c2e0f447876fabf4644d1cae159a0f</anchor>
      <arglist>(void(*functionToCall)(int, ParamType), ParamType parameterValue)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ModalComponentManager::Callback *</type>
      <name>create</name>
      <anchorfile>classModalCallbackFunction.html</anchorfile>
      <anchor>a268ff83c12843270a3a07268c5a590f2</anchor>
      <arglist>(std::function&lt; void(int)&gt;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ModalComponentManager::Callback *</type>
      <name>withParam</name>
      <anchorfile>classModalCallbackFunction.html</anchorfile>
      <anchor>a2330d0069d39bbb844ec75cb09bc7868</anchor>
      <arglist>(void(*functionToCall)(int, ParamType1, ParamType2), ParamType1 parameterValue1, ParamType2 parameterValue2)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ModalComponentManager::Callback *</type>
      <name>forComponent</name>
      <anchorfile>classModalCallbackFunction.html</anchorfile>
      <anchor>a66fc6472aeb843617982fa7df9a83fc3</anchor>
      <arglist>(void(*functionToCall)(int, ComponentType *), ComponentType *component)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ModalComponentManager::Callback *</type>
      <name>forComponent</name>
      <anchorfile>classModalCallbackFunction.html</anchorfile>
      <anchor>a81ac9bb08f1700c1f5621339cae63f40</anchor>
      <arglist>(void(*functionToCall)(int, ComponentType *, ParamType), ComponentType *component, ParamType param)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ModalComponentManager</name>
    <filename>classModalComponentManager.html</filename>
    <base protection="private">AsyncUpdater</base>
    <base protection="private">DeletedAtShutdown</base>
    <class kind="class">ModalComponentManager::Callback</class>
    <member kind="function">
      <type></type>
      <name>juce_DeclareSingleton_SingleThreaded_Minimal</name>
      <anchorfile>classModalComponentManager.html</anchorfile>
      <anchor>ac848e9eda1b32ae944d58568af75ac36</anchor>
      <arglist>(ModalComponentManager) int getNumModalComponents() const </arglist>
    </member>
    <member kind="function">
      <type>Component *</type>
      <name>getModalComponent</name>
      <anchorfile>classModalComponentManager.html</anchorfile>
      <anchor>ae0cc69f288251b77294a0db2ae202259</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isModal</name>
      <anchorfile>classModalComponentManager.html</anchorfile>
      <anchor>a680e783f606445b929f266335fee5bd4</anchor>
      <arglist>(Component *component) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isFrontModalComponent</name>
      <anchorfile>classModalComponentManager.html</anchorfile>
      <anchor>abd4a81dfce7204dff84cb0c7b5c85d83</anchor>
      <arglist>(Component *component) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>attachCallback</name>
      <anchorfile>classModalComponentManager.html</anchorfile>
      <anchor>a2ce962253cf2c8e42d5575ad2a41d888</anchor>
      <arglist>(Component *component, Callback *callback)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>bringModalComponentsToFront</name>
      <anchorfile>classModalComponentManager.html</anchorfile>
      <anchor>a3e398829cf3016f4f370b21330686d1b</anchor>
      <arglist>(bool topOneShouldGrabFocus=true)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>cancelAllModalComponents</name>
      <anchorfile>classModalComponentManager.html</anchorfile>
      <anchor>a634c1a1fedcea4eeec1a17e778fa2aea</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>runEventLoopForCurrentComponent</name>
      <anchorfile>classModalComponentManager.html</anchorfile>
      <anchor>a7e32dd3b8d00f3b254f0d68cb57e2d90</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ModalComponentManager</name>
      <anchorfile>classModalComponentManager.html</anchorfile>
      <anchor>aaf0be23075467f26330a77781e1f3ed9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>~ModalComponentManager</name>
      <anchorfile>classModalComponentManager.html</anchorfile>
      <anchor>a02e3e222650d2b03105246b012e3b640</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleAsyncUpdate</name>
      <anchorfile>classModalComponentManager.html</anchorfile>
      <anchor>a47d303fb64f3ae02deb986d58bfeb893</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ModalComponentManager::Callback</name>
    <filename>classModalComponentManager_1_1Callback.html</filename>
    <member kind="function">
      <type></type>
      <name>Callback</name>
      <anchorfile>classModalComponentManager_1_1Callback.html</anchorfile>
      <anchor>aca24598e184879750980c40e96fa835e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Callback</name>
      <anchorfile>classModalComponentManager_1_1Callback.html</anchorfile>
      <anchor>a58db204caa63cdda1621ff605bb98b0c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>modalStateFinished</name>
      <anchorfile>classModalComponentManager_1_1Callback.html</anchorfile>
      <anchor>ad44cd3225753579084bdb3ba7bd8e625</anchor>
      <arglist>(int returnValue)=0</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ModifierKeyProvider</name>
    <filename>structModifierKeyProvider.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ModifierKeyProvider</name>
      <anchorfile>structModifierKeyProvider.html</anchorfile>
      <anchor>a6ab57fae78029918041a5a4f36bbc749</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getWin32Modifiers</name>
      <anchorfile>structModifierKeyProvider.html</anchorfile>
      <anchor>a2b9b949d1b0a682ea9c28c366e038386</anchor>
      <arglist>() const =0</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ModifierKeyReceiver</name>
    <filename>structModifierKeyReceiver.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ModifierKeyReceiver</name>
      <anchorfile>structModifierKeyReceiver.html</anchorfile>
      <anchor>a8beb9c0c143ad2e48c6387000a725104</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setModifierKeyProvider</name>
      <anchorfile>structModifierKeyReceiver.html</anchorfile>
      <anchor>a989688b421757a7bd7dcb2843c69a471</anchor>
      <arglist>(ModifierKeyProvider *)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>removeModifierKeyProvider</name>
      <anchorfile>structModifierKeyReceiver.html</anchorfile>
      <anchor>a5fcde0b5ecae94575ec7e8f22ba39e52</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ModifierKeys</name>
    <filename>classModifierKeys.html</filename>
    <member kind="enumeration">
      <type></type>
      <name>Flags</name>
      <anchorfile>classModifierKeys.html</anchorfile>
      <anchor>acdd2a85defa6a705d74e1a63d193678b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>noModifiers</name>
      <anchorfile>classModifierKeys.html</anchorfile>
      <anchor>acdd2a85defa6a705d74e1a63d193678bae42cb786cbb3c1d7d50c9c1f659838a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>shiftModifier</name>
      <anchorfile>classModifierKeys.html</anchorfile>
      <anchor>acdd2a85defa6a705d74e1a63d193678baafc1c1b745213b6915f1932ecf0ea042</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>ctrlModifier</name>
      <anchorfile>classModifierKeys.html</anchorfile>
      <anchor>acdd2a85defa6a705d74e1a63d193678ba1328b9c57c54ec51dbbfacb537cc737b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>altModifier</name>
      <anchorfile>classModifierKeys.html</anchorfile>
      <anchor>acdd2a85defa6a705d74e1a63d193678ba06a1a39ebe788d01c5d421f8f472347d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>leftButtonModifier</name>
      <anchorfile>classModifierKeys.html</anchorfile>
      <anchor>acdd2a85defa6a705d74e1a63d193678ba0248a87157fdf267a857b723d30f5c8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>rightButtonModifier</name>
      <anchorfile>classModifierKeys.html</anchorfile>
      <anchor>acdd2a85defa6a705d74e1a63d193678ba4676310fa50ddb14bb81722e1dd3bdd5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>middleButtonModifier</name>
      <anchorfile>classModifierKeys.html</anchorfile>
      <anchor>acdd2a85defa6a705d74e1a63d193678ba332cb354a7b1cb322e97c6678d94ee22</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>commandModifier</name>
      <anchorfile>classModifierKeys.html</anchorfile>
      <anchor>acdd2a85defa6a705d74e1a63d193678ba5e28f0dd247a86d9a21bdcabd644d058</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>popupMenuClickModifier</name>
      <anchorfile>classModifierKeys.html</anchorfile>
      <anchor>acdd2a85defa6a705d74e1a63d193678ba95a2100e9a4b1a5786b253c065936627</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>allKeyboardModifiers</name>
      <anchorfile>classModifierKeys.html</anchorfile>
      <anchor>acdd2a85defa6a705d74e1a63d193678bad234b97b656e78e1b0c500bff2618126</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>allMouseButtonModifiers</name>
      <anchorfile>classModifierKeys.html</anchorfile>
      <anchor>acdd2a85defa6a705d74e1a63d193678bac6eb27985ac385d33aa8c8ea9a261dc8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>ctrlAltCommandModifiers</name>
      <anchorfile>classModifierKeys.html</anchorfile>
      <anchor>acdd2a85defa6a705d74e1a63d193678ba2647f9ed4b2db164973d8b735f3b216a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ModifierKeys</name>
      <anchorfile>classModifierKeys.html</anchorfile>
      <anchor>adfcf4939ec180442da20992c50de24ae</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ModifierKeys</name>
      <anchorfile>classModifierKeys.html</anchorfile>
      <anchor>ab75d0460df15e0c4ba76fab270ea9623</anchor>
      <arglist>(int flags) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ModifierKeys</name>
      <anchorfile>classModifierKeys.html</anchorfile>
      <anchor>a617688714d7b3a91dc908ac9a20b249b</anchor>
      <arglist>(const ModifierKeys &amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>ModifierKeys &amp;</type>
      <name>operator=</name>
      <anchorfile>classModifierKeys.html</anchorfile>
      <anchor>a8b0bdca0950275c43b2aeef57885e66b</anchor>
      <arglist>(const ModifierKeys other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isCommandDown</name>
      <anchorfile>classModifierKeys.html</anchorfile>
      <anchor>a88f9e02beb40f6461d6ed8b655b7ebb3</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isPopupMenu</name>
      <anchorfile>classModifierKeys.html</anchorfile>
      <anchor>aedd7b0f26fdc0a2355947aadb7ecc650</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isLeftButtonDown</name>
      <anchorfile>classModifierKeys.html</anchorfile>
      <anchor>a38ab832ba987f15ec2ba6ba71b6c02b7</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isRightButtonDown</name>
      <anchorfile>classModifierKeys.html</anchorfile>
      <anchor>a25e86fa7211644350b4b946989d1623c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isMiddleButtonDown</name>
      <anchorfile>classModifierKeys.html</anchorfile>
      <anchor>a31d1d60335d49a8647cfc70a08f0ddbc</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isAnyMouseButtonDown</name>
      <anchorfile>classModifierKeys.html</anchorfile>
      <anchor>a70d85aa2a4b5908357ee626b54faff7c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isAnyModifierKeyDown</name>
      <anchorfile>classModifierKeys.html</anchorfile>
      <anchor>a0484a727ea9f8de0c2f3c9ac86a64108</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isShiftDown</name>
      <anchorfile>classModifierKeys.html</anchorfile>
      <anchor>afd9f4558046eccad2c3a3366c6bcf6b0</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isCtrlDown</name>
      <anchorfile>classModifierKeys.html</anchorfile>
      <anchor>a06514fc0170112636f4582b1f997de39</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isAltDown</name>
      <anchorfile>classModifierKeys.html</anchorfile>
      <anchor>a7cb1ec2ddb92d635e19397d485874d68</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>ModifierKeys</type>
      <name>withOnlyMouseButtons</name>
      <anchorfile>classModifierKeys.html</anchorfile>
      <anchor>a415c95f97a814d74e27e09665ee9ffb6</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>ModifierKeys</type>
      <name>withoutMouseButtons</name>
      <anchorfile>classModifierKeys.html</anchorfile>
      <anchor>a3721a2e2f7aa8f34a3c28caa804c8356</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classModifierKeys.html</anchorfile>
      <anchor>ac581198c60ed721b711c38c6ba71abcd</anchor>
      <arglist>(const ModifierKeys other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classModifierKeys.html</anchorfile>
      <anchor>acd41313d83aae5e1f00373d991bbec11</anchor>
      <arglist>(const ModifierKeys other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getRawFlags</name>
      <anchorfile>classModifierKeys.html</anchorfile>
      <anchor>ae503d7f23c5d3fa5b0318a090935d9ce</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>ModifierKeys</type>
      <name>withoutFlags</name>
      <anchorfile>classModifierKeys.html</anchorfile>
      <anchor>a00ef202e1fad8edda50b9f4632bb64e0</anchor>
      <arglist>(int rawFlagsToClear) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>ModifierKeys</type>
      <name>withFlags</name>
      <anchorfile>classModifierKeys.html</anchorfile>
      <anchor>a34d981c0d9431e661b84f4685f1e37ee</anchor>
      <arglist>(int rawFlagsToSet) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>testFlags</name>
      <anchorfile>classModifierKeys.html</anchorfile>
      <anchor>af45a4e42e28ad7a89679898d644fc38b</anchor>
      <arglist>(int flagsToTest) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumMouseButtonsDown</name>
      <anchorfile>classModifierKeys.html</anchorfile>
      <anchor>a2adc41db5a9ff04b6527bc6c1a656005</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ModifierKeys</type>
      <name>getCurrentModifiers</name>
      <anchorfile>classModifierKeys.html</anchorfile>
      <anchor>a69b1631db7f2ec0367bfe39d2eb57398</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ModifierKeys</type>
      <name>getCurrentModifiersRealtime</name>
      <anchorfile>classModifierKeys.html</anchorfile>
      <anchor>ad174aefc02f39bf4892ef79aeb23fec4</anchor>
      <arglist>() noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MountedVolumeListChangeDetector</name>
    <filename>classMountedVolumeListChangeDetector.html</filename>
    <member kind="function">
      <type></type>
      <name>MountedVolumeListChangeDetector</name>
      <anchorfile>classMountedVolumeListChangeDetector.html</anchorfile>
      <anchor>adde02e94569ad24a86f8345fe1c2d329</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MountedVolumeListChangeDetector</name>
      <anchorfile>classMountedVolumeListChangeDetector.html</anchorfile>
      <anchor>a6cbefd72d4f139f814b7a9340bb3dbe5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>mountedVolumeListChanged</name>
      <anchorfile>classMountedVolumeListChangeDetector.html</anchorfile>
      <anchor>a9232af7fbfdb36142813132e386551c2</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MouseCursor</name>
    <filename>classMouseCursor.html</filename>
    <member kind="enumeration">
      <type></type>
      <name>StandardCursorType</name>
      <anchorfile>classMouseCursor.html</anchorfile>
      <anchor>a5de22a8c3eb06827ac11352e76eb9a97</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>ParentCursor</name>
      <anchorfile>classMouseCursor.html</anchorfile>
      <anchor>a5de22a8c3eb06827ac11352e76eb9a97a3364299bb07ea51c887232310feb8b36</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>NoCursor</name>
      <anchorfile>classMouseCursor.html</anchorfile>
      <anchor>a5de22a8c3eb06827ac11352e76eb9a97a765994c253a794c44b2a919f39738917</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>NormalCursor</name>
      <anchorfile>classMouseCursor.html</anchorfile>
      <anchor>a5de22a8c3eb06827ac11352e76eb9a97aa05a8960e2a3e32bfad68fdcb31a1511</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>WaitCursor</name>
      <anchorfile>classMouseCursor.html</anchorfile>
      <anchor>a5de22a8c3eb06827ac11352e76eb9a97a42461326b47b05238177df410c2245f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>IBeamCursor</name>
      <anchorfile>classMouseCursor.html</anchorfile>
      <anchor>a5de22a8c3eb06827ac11352e76eb9a97ab6611ff9b703b9a53c45745936c66393</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>CrosshairCursor</name>
      <anchorfile>classMouseCursor.html</anchorfile>
      <anchor>a5de22a8c3eb06827ac11352e76eb9a97add4ed956814986c922cdeae70fdad9d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>CopyingCursor</name>
      <anchorfile>classMouseCursor.html</anchorfile>
      <anchor>a5de22a8c3eb06827ac11352e76eb9a97abe0154531e3b7b07ea1241be32850c3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>PointingHandCursor</name>
      <anchorfile>classMouseCursor.html</anchorfile>
      <anchor>a5de22a8c3eb06827ac11352e76eb9a97a8d9a75ed7f8d15943c53fe50d584c250</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>DraggingHandCursor</name>
      <anchorfile>classMouseCursor.html</anchorfile>
      <anchor>a5de22a8c3eb06827ac11352e76eb9a97a95198e14e2dede840964e9bd4c785770</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>LeftRightResizeCursor</name>
      <anchorfile>classMouseCursor.html</anchorfile>
      <anchor>a5de22a8c3eb06827ac11352e76eb9a97a17de630b8e7ac48222b7d4a47e80bbf7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>UpDownResizeCursor</name>
      <anchorfile>classMouseCursor.html</anchorfile>
      <anchor>a5de22a8c3eb06827ac11352e76eb9a97a74809dadde8902b777944cf0f9bf1eb9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>UpDownLeftRightResizeCursor</name>
      <anchorfile>classMouseCursor.html</anchorfile>
      <anchor>a5de22a8c3eb06827ac11352e76eb9a97a70324887aed0e0010031ef5eeea795f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>TopEdgeResizeCursor</name>
      <anchorfile>classMouseCursor.html</anchorfile>
      <anchor>a5de22a8c3eb06827ac11352e76eb9a97a715ab886dadb13d14a738c2b2709c118</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>BottomEdgeResizeCursor</name>
      <anchorfile>classMouseCursor.html</anchorfile>
      <anchor>a5de22a8c3eb06827ac11352e76eb9a97ad5aac7a930b9b99cbd426166e9f51060</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>LeftEdgeResizeCursor</name>
      <anchorfile>classMouseCursor.html</anchorfile>
      <anchor>a5de22a8c3eb06827ac11352e76eb9a97a5c9f991872485b4ffc337a7f8d61df34</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>RightEdgeResizeCursor</name>
      <anchorfile>classMouseCursor.html</anchorfile>
      <anchor>a5de22a8c3eb06827ac11352e76eb9a97a9c5b17c307e6d6d996f09621940cabd5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>TopLeftCornerResizeCursor</name>
      <anchorfile>classMouseCursor.html</anchorfile>
      <anchor>a5de22a8c3eb06827ac11352e76eb9a97aa0d19a1c9571c4e7ecced0c47c3227e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>TopRightCornerResizeCursor</name>
      <anchorfile>classMouseCursor.html</anchorfile>
      <anchor>a5de22a8c3eb06827ac11352e76eb9a97a675f05cc9819fc54c59ec30a59454321</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>BottomLeftCornerResizeCursor</name>
      <anchorfile>classMouseCursor.html</anchorfile>
      <anchor>a5de22a8c3eb06827ac11352e76eb9a97a9c0dfbb89b147f494350fd8b21558d83</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>BottomRightCornerResizeCursor</name>
      <anchorfile>classMouseCursor.html</anchorfile>
      <anchor>a5de22a8c3eb06827ac11352e76eb9a97aa1bc9fcfb9b9e0f39e513ca1fcb8392b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>NumStandardCursorTypes</name>
      <anchorfile>classMouseCursor.html</anchorfile>
      <anchor>a5de22a8c3eb06827ac11352e76eb9a97a48398e8dcad5bee53f6319d3f9b7f012</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MouseCursor</name>
      <anchorfile>classMouseCursor.html</anchorfile>
      <anchor>a146a3c22fd9f8634ad348ef4063419a9</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MouseCursor</name>
      <anchorfile>classMouseCursor.html</anchorfile>
      <anchor>a40ce0b23aa80f322bd1f10aa5381915d</anchor>
      <arglist>(StandardCursorType)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MouseCursor</name>
      <anchorfile>classMouseCursor.html</anchorfile>
      <anchor>ab5a0c9110724b59af28e8c2cbb888b5a</anchor>
      <arglist>(const Image &amp;image, int hotSpotX, int hotSpotY)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MouseCursor</name>
      <anchorfile>classMouseCursor.html</anchorfile>
      <anchor>a149f0bea2904c5fae613a8b552d506a6</anchor>
      <arglist>(const Image &amp;image, int hotSpotX, int hotSpotY, float scaleFactor)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MouseCursor</name>
      <anchorfile>classMouseCursor.html</anchorfile>
      <anchor>a5e68261716c97d840f1213b62e39282d</anchor>
      <arglist>(const MouseCursor &amp;)</arglist>
    </member>
    <member kind="function">
      <type>MouseCursor &amp;</type>
      <name>operator=</name>
      <anchorfile>classMouseCursor.html</anchorfile>
      <anchor>aa2fd098b07af3dc9a1ae2a0f241f114e</anchor>
      <arglist>(const MouseCursor &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~MouseCursor</name>
      <anchorfile>classMouseCursor.html</anchorfile>
      <anchor>a7ceae294b75ec60291604f81efd1509d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MouseCursor</name>
      <anchorfile>classMouseCursor.html</anchorfile>
      <anchor>a36c90d7826c5f8fe71d101b550b68473</anchor>
      <arglist>(MouseCursor &amp;&amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>MouseCursor &amp;</type>
      <name>operator=</name>
      <anchorfile>classMouseCursor.html</anchorfile>
      <anchor>a33ba5b36ad4c8170b94731cf4ad21bad</anchor>
      <arglist>(MouseCursor &amp;&amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classMouseCursor.html</anchorfile>
      <anchor>a884a8676226111ad3f77139436792d69</anchor>
      <arglist>(const MouseCursor &amp;) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classMouseCursor.html</anchorfile>
      <anchor>a36f36f97f40980fb3ec0855ccde27e65</anchor>
      <arglist>(const MouseCursor &amp;) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classMouseCursor.html</anchorfile>
      <anchor>a4bad7195dc81ff3fd569e1a0757b4de0</anchor>
      <arglist>(StandardCursorType type) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classMouseCursor.html</anchorfile>
      <anchor>a11a838b423d84ffd68c790de1bc0bbb4</anchor>
      <arglist>(StandardCursorType type) const noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>showWaitCursor</name>
      <anchorfile>classMouseCursor.html</anchorfile>
      <anchor>a29d3a192ded584323597869f975faab6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>hideWaitCursor</name>
      <anchorfile>classMouseCursor.html</anchorfile>
      <anchor>a4671d39f6abcc1ca73fd8d95cf1e4355</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MouseEvent</name>
    <filename>classMouseEvent.html</filename>
    <member kind="function">
      <type></type>
      <name>MouseEvent</name>
      <anchorfile>classMouseEvent.html</anchorfile>
      <anchor>ab69c782d7a8bd5611a65da9bcf9a4cd8</anchor>
      <arglist>(MouseInputSource source, Point&lt; float &gt; position, ModifierKeys modifiers, float pressure, Component *eventComponent, Component *originator, Time eventTime, Point&lt; float &gt; mouseDownPos, Time mouseDownTime, int numberOfClicks, bool mouseWasDragged) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~MouseEvent</name>
      <anchorfile>classMouseEvent.html</anchorfile>
      <anchor>a2fb97aee455a770a0bbd916c1504d02c</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getMouseDownX</name>
      <anchorfile>classMouseEvent.html</anchorfile>
      <anchor>a77f87c7cebd5fbc719a9e2c89ef6b262</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getMouseDownY</name>
      <anchorfile>classMouseEvent.html</anchorfile>
      <anchor>a5a05bcd49bb3a9c6506f18f6dba16137</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Point&lt; int &gt;</type>
      <name>getMouseDownPosition</name>
      <anchorfile>classMouseEvent.html</anchorfile>
      <anchor>aa253a71e1086586ade374a16c146c7c4</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getDistanceFromDragStart</name>
      <anchorfile>classMouseEvent.html</anchorfile>
      <anchor>afff96c10c810ab1cf5bc21b4e1b232c4</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getDistanceFromDragStartX</name>
      <anchorfile>classMouseEvent.html</anchorfile>
      <anchor>ae6d2098fdcf0c124ebd68fdcdb926c33</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getDistanceFromDragStartY</name>
      <anchorfile>classMouseEvent.html</anchorfile>
      <anchor>a07c2f2d292f919a6d8f3e31c69c5ebb3</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Point&lt; int &gt;</type>
      <name>getOffsetFromDragStart</name>
      <anchorfile>classMouseEvent.html</anchorfile>
      <anchor>ae7914aff9654e82aa14c2881f0f651fa</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>mouseWasDraggedSinceMouseDown</name>
      <anchorfile>classMouseEvent.html</anchorfile>
      <anchor>a969a94328cd97f0ffdaf04e6f0d8301d</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>mouseWasClicked</name>
      <anchorfile>classMouseEvent.html</anchorfile>
      <anchor>a134d8c300344a66d9a831f29270ec2e9</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumberOfClicks</name>
      <anchorfile>classMouseEvent.html</anchorfile>
      <anchor>a94f8d29018a8dcd1238f9e321944b118</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getLengthOfMousePress</name>
      <anchorfile>classMouseEvent.html</anchorfile>
      <anchor>a8f67d78e40437aa67368f08c2fd8a581</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isPressureValid</name>
      <anchorfile>classMouseEvent.html</anchorfile>
      <anchor>ae036a5d7ae699cb1a26f0701329fe51f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Point&lt; int &gt;</type>
      <name>getPosition</name>
      <anchorfile>classMouseEvent.html</anchorfile>
      <anchor>af475e6f7ef2e702a72bff90f166c8161</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getScreenX</name>
      <anchorfile>classMouseEvent.html</anchorfile>
      <anchor>ad6125254b5a45897e2559dc56f9f1370</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getScreenY</name>
      <anchorfile>classMouseEvent.html</anchorfile>
      <anchor>a545ee04124637ad0ad9e428ac3d97035</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Point&lt; int &gt;</type>
      <name>getScreenPosition</name>
      <anchorfile>classMouseEvent.html</anchorfile>
      <anchor>afe462af2c2fdcbb635cebe36d19e0715</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getMouseDownScreenX</name>
      <anchorfile>classMouseEvent.html</anchorfile>
      <anchor>a459acd7877f6300971f8fed0d399615a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getMouseDownScreenY</name>
      <anchorfile>classMouseEvent.html</anchorfile>
      <anchor>a31eeda4bb4c5940e762110434428ba13</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Point&lt; int &gt;</type>
      <name>getMouseDownScreenPosition</name>
      <anchorfile>classMouseEvent.html</anchorfile>
      <anchor>aa2bb3d5a683d33c68429f8b818203560</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>MouseEvent</type>
      <name>getEventRelativeTo</name>
      <anchorfile>classMouseEvent.html</anchorfile>
      <anchor>a83759659994ba50b9b857a44ba51cff8</anchor>
      <arglist>(Component *newComponent) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>MouseEvent</type>
      <name>withNewPosition</name>
      <anchorfile>classMouseEvent.html</anchorfile>
      <anchor>a2cf47a94c48f5374aa026faff5e5ef9c</anchor>
      <arglist>(Point&lt; float &gt; newPosition) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>MouseEvent</type>
      <name>withNewPosition</name>
      <anchorfile>classMouseEvent.html</anchorfile>
      <anchor>a4c554b08557c5962d28ca8cc22ea48a2</anchor>
      <arglist>(Point&lt; int &gt; newPosition) const noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setDoubleClickTimeout</name>
      <anchorfile>classMouseEvent.html</anchorfile>
      <anchor>a61131d747c89f4781a69619f5e07c535</anchor>
      <arglist>(int timeOutMilliseconds) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>getDoubleClickTimeout</name>
      <anchorfile>classMouseEvent.html</anchorfile>
      <anchor>a6f5b93fb2511b810505a1e47a670ca26</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="variable">
      <type>const Point&lt; float &gt;</type>
      <name>position</name>
      <anchorfile>classMouseEvent.html</anchorfile>
      <anchor>a93aec07d19ecbd1b31093689bab7b46e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>x</name>
      <anchorfile>classMouseEvent.html</anchorfile>
      <anchor>af3127333fe067df8158c9bb3da36ec84</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>y</name>
      <anchorfile>classMouseEvent.html</anchorfile>
      <anchor>ad5c3872ed713f0d237898aa7307ece23</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ModifierKeys</type>
      <name>mods</name>
      <anchorfile>classMouseEvent.html</anchorfile>
      <anchor>aaabc365b704e243b193b41113d4e50de</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>pressure</name>
      <anchorfile>classMouseEvent.html</anchorfile>
      <anchor>a88b142ee1a340d8ad5f092b083ddbcf7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Component *const</type>
      <name>eventComponent</name>
      <anchorfile>classMouseEvent.html</anchorfile>
      <anchor>a33c37dc970ab4c24e9e5b2c33e568d9e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Component *const</type>
      <name>originalComponent</name>
      <anchorfile>classMouseEvent.html</anchorfile>
      <anchor>abe6b50fe43981f161200d99e6d235953</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Time</type>
      <name>eventTime</name>
      <anchorfile>classMouseEvent.html</anchorfile>
      <anchor>ad2980025e848cebfad0d6ad43f61c648</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Time</type>
      <name>mouseDownTime</name>
      <anchorfile>classMouseEvent.html</anchorfile>
      <anchor>a0636f798ed2f13b00d9927a275016c3e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>MouseInputSource</type>
      <name>source</name>
      <anchorfile>classMouseEvent.html</anchorfile>
      <anchor>a4f70eb92a29dc0acfa9f782388e254bc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MouseInactivityDetector</name>
    <filename>classMouseInactivityDetector.html</filename>
    <base protection="private">Timer</base>
    <base protection="private">MouseListener</base>
    <class kind="class">MouseInactivityDetector::Listener</class>
    <member kind="function">
      <type></type>
      <name>MouseInactivityDetector</name>
      <anchorfile>classMouseInactivityDetector.html</anchorfile>
      <anchor>ae72e4158f2fc6a982015238ee7f00bb6</anchor>
      <arglist>(Component &amp;target)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~MouseInactivityDetector</name>
      <anchorfile>classMouseInactivityDetector.html</anchorfile>
      <anchor>ade7d22c8971f90f878fec2837cd05a26</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDelay</name>
      <anchorfile>classMouseInactivityDetector.html</anchorfile>
      <anchor>a787f8992de87c2ee1e5670171ba04c9c</anchor>
      <arglist>(int newDelayMilliseconds) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMouseMoveTolerance</name>
      <anchorfile>classMouseInactivityDetector.html</anchorfile>
      <anchor>a70d5d4e4a1f660fc28c5b7d6d9ea3798</anchor>
      <arglist>(int pixelsNeededToTrigger) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addListener</name>
      <anchorfile>classMouseInactivityDetector.html</anchorfile>
      <anchor>ad080fe663af4a6f78458a4f71a9bf69b</anchor>
      <arglist>(Listener *listener)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeListener</name>
      <anchorfile>classMouseInactivityDetector.html</anchorfile>
      <anchor>aba62a21c2040380353c405ecb684929f</anchor>
      <arglist>(Listener *listener)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MouseInactivityDetector::Listener</name>
    <filename>classMouseInactivityDetector_1_1Listener.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Listener</name>
      <anchorfile>classMouseInactivityDetector_1_1Listener.html</anchorfile>
      <anchor>af6e9adb3b6fdbaa71d5627f2d9ca8429</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>mouseBecameActive</name>
      <anchorfile>classMouseInactivityDetector_1_1Listener.html</anchorfile>
      <anchor>a41fa43c45d601e185398d82da58e44e9</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>mouseBecameInactive</name>
      <anchorfile>classMouseInactivityDetector_1_1Listener.html</anchorfile>
      <anchor>a47053537eb01808a9f474474dce54d52</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MouseInputSource</name>
    <filename>classMouseInputSource.html</filename>
    <member kind="function">
      <type></type>
      <name>MouseInputSource</name>
      <anchorfile>classMouseInputSource.html</anchorfile>
      <anchor>ae8071d803ab710d0239cfcfa6ddc399d</anchor>
      <arglist>(const MouseInputSource &amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>MouseInputSource &amp;</type>
      <name>operator=</name>
      <anchorfile>classMouseInputSource.html</anchorfile>
      <anchor>ab6126b51c34685e6d1cca88d6727c083</anchor>
      <arglist>(const MouseInputSource &amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~MouseInputSource</name>
      <anchorfile>classMouseInputSource.html</anchorfile>
      <anchor>ad5e7c3fd30aa82348a40e18c161bb0fd</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classMouseInputSource.html</anchorfile>
      <anchor>a0ac6b1ea5236f12c53b7592f55306103</anchor>
      <arglist>(const MouseInputSource &amp;other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classMouseInputSource.html</anchorfile>
      <anchor>a081a7cc2d0a9d4690073ffc455a736d0</anchor>
      <arglist>(const MouseInputSource &amp;other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isMouse</name>
      <anchorfile>classMouseInputSource.html</anchorfile>
      <anchor>a15eba960dd5bb4c991a79bfab615744d</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isTouch</name>
      <anchorfile>classMouseInputSource.html</anchorfile>
      <anchor>a12838c02637c94ba962b233bfad1c77e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>canHover</name>
      <anchorfile>classMouseInputSource.html</anchorfile>
      <anchor>a140f11275e9a6b0945c518c73fb5ddb1</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasMouseWheel</name>
      <anchorfile>classMouseInputSource.html</anchorfile>
      <anchor>a691068a9661fb11b3e7b10f51a4254b0</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getIndex</name>
      <anchorfile>classMouseInputSource.html</anchorfile>
      <anchor>a5df63eab78bd470bd22d39393b337330</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isDragging</name>
      <anchorfile>classMouseInputSource.html</anchorfile>
      <anchor>ac847151b42a5c784589acf6cc03efa18</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Point&lt; float &gt;</type>
      <name>getScreenPosition</name>
      <anchorfile>classMouseInputSource.html</anchorfile>
      <anchor>a10dbf9c4769008cfb5ba873d65a2b77c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>ModifierKeys</type>
      <name>getCurrentModifiers</name>
      <anchorfile>classMouseInputSource.html</anchorfile>
      <anchor>a69fd0c708be6a6602ee44f3b1228f94e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getCurrentPressure</name>
      <anchorfile>classMouseInputSource.html</anchorfile>
      <anchor>acb273f97307a07db7aff231e2de6a564</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isPressureValid</name>
      <anchorfile>classMouseInputSource.html</anchorfile>
      <anchor>a16158cde3ca2148c4f589dd7b186347b</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Component *</type>
      <name>getComponentUnderMouse</name>
      <anchorfile>classMouseInputSource.html</anchorfile>
      <anchor>abda8731023c5f8697a0771c5e60f91c4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>triggerFakeMove</name>
      <anchorfile>classMouseInputSource.html</anchorfile>
      <anchor>a14cec6bb08eab4074ef660db8d65ffbb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumberOfMultipleClicks</name>
      <anchorfile>classMouseInputSource.html</anchorfile>
      <anchor>a42bbc70e6f7a10e4cc98ff0c03a4b12e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Time</type>
      <name>getLastMouseDownTime</name>
      <anchorfile>classMouseInputSource.html</anchorfile>
      <anchor>abb5ad7dac8b0721c935bda1c10c1fd9f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Point&lt; float &gt;</type>
      <name>getLastMouseDownPosition</name>
      <anchorfile>classMouseInputSource.html</anchorfile>
      <anchor>a800fb252a9589738a7fe264fc9161759</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasMouseMovedSignificantlySincePressed</name>
      <anchorfile>classMouseInputSource.html</anchorfile>
      <anchor>a351f9a0c4b526c0d2702417e54fc726a</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasMouseCursor</name>
      <anchorfile>classMouseInputSource.html</anchorfile>
      <anchor>ad2b2d3176e07d9672e949dc88135f532</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>showMouseCursor</name>
      <anchorfile>classMouseInputSource.html</anchorfile>
      <anchor>acd385b3a829ec2d6a5aabb5ecedfcbce</anchor>
      <arglist>(const MouseCursor &amp;cursor)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>hideCursor</name>
      <anchorfile>classMouseInputSource.html</anchorfile>
      <anchor>a61bc07273b91b328bcff92e721a2461e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>revealCursor</name>
      <anchorfile>classMouseInputSource.html</anchorfile>
      <anchor>ade2da3233cdfaab0e8b6baf5671682bb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>forceMouseCursorUpdate</name>
      <anchorfile>classMouseInputSource.html</anchorfile>
      <anchor>abb9ef3b672be6570b2345ad12fa93e7d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>canDoUnboundedMovement</name>
      <anchorfile>classMouseInputSource.html</anchorfile>
      <anchor>a75c31f53d17ea048bf83e19e8b051ba2</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enableUnboundedMouseMovement</name>
      <anchorfile>classMouseInputSource.html</anchorfile>
      <anchor>ac99c61d3787c3baa7661b41132e87e0a</anchor>
      <arglist>(bool isEnabled, bool keepCursorVisibleUntilOffscreen=false) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isUnboundedMouseMovementEnabled</name>
      <anchorfile>classMouseInputSource.html</anchorfile>
      <anchor>a753f2a0b122b9aba12ca576ab450fd00</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setScreenPosition</name>
      <anchorfile>classMouseInputSource.html</anchorfile>
      <anchor>adb92bc833aaf6e7cb15c3f1f01fd7f09</anchor>
      <arglist>(Point&lt; float &gt; newPosition)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const float</type>
      <name>invalidPressure</name>
      <anchorfile>classMouseInputSource.html</anchorfile>
      <anchor>ab6d90cac2cd10bbe7f6f1263f971ef54</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MouseListener</name>
    <filename>classMouseListener.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>mouseMove</name>
      <anchorfile>classMouseListener.html</anchorfile>
      <anchor>a34327ec666304f0660d818db8281d2fd</anchor>
      <arglist>(const MouseEvent &amp;event)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>mouseEnter</name>
      <anchorfile>classMouseListener.html</anchorfile>
      <anchor>a479dc784712648193bdc236b2c34e8bd</anchor>
      <arglist>(const MouseEvent &amp;event)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>mouseExit</name>
      <anchorfile>classMouseListener.html</anchorfile>
      <anchor>ac35ed155e9255cebdc5c81231d963aec</anchor>
      <arglist>(const MouseEvent &amp;event)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>mouseDown</name>
      <anchorfile>classMouseListener.html</anchorfile>
      <anchor>afebc11cdb56f49eeabc9f8b81814f9ce</anchor>
      <arglist>(const MouseEvent &amp;event)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>mouseDrag</name>
      <anchorfile>classMouseListener.html</anchorfile>
      <anchor>a434a85e97e248920ae699a2f030bfa70</anchor>
      <arglist>(const MouseEvent &amp;event)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>mouseUp</name>
      <anchorfile>classMouseListener.html</anchorfile>
      <anchor>ac5eb93de1cfd68a35473071df3e2e8cc</anchor>
      <arglist>(const MouseEvent &amp;event)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>mouseDoubleClick</name>
      <anchorfile>classMouseListener.html</anchorfile>
      <anchor>a7ef5d0993f3036233f458fc88f71462c</anchor>
      <arglist>(const MouseEvent &amp;event)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>mouseWheelMove</name>
      <anchorfile>classMouseListener.html</anchorfile>
      <anchor>afb5eae301f38f79acb6c13dcb8cb7532</anchor>
      <arglist>(const MouseEvent &amp;event, const MouseWheelDetails &amp;wheel)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>MouseWheelDetails</name>
    <filename>structMouseWheelDetails.html</filename>
    <member kind="variable">
      <type>float</type>
      <name>deltaX</name>
      <anchorfile>structMouseWheelDetails.html</anchorfile>
      <anchor>a09f65902f9a85a4c035cfdd350195666</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>deltaY</name>
      <anchorfile>structMouseWheelDetails.html</anchorfile>
      <anchor>af2fbbe8a59ef8e84f7bbe5a2cd441fbe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>isReversed</name>
      <anchorfile>structMouseWheelDetails.html</anchorfile>
      <anchor>a05d876e5b384961aad49c7e310ba7203</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>isSmooth</name>
      <anchorfile>structMouseWheelDetails.html</anchorfile>
      <anchor>a01a4af26811a69fe0465d6797cc122d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>isInertial</name>
      <anchorfile>structMouseWheelDetails.html</anchorfile>
      <anchor>ada4d5e78fddeb6054a17c0b6851043e1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MovieComponent</name>
    <filename>classMovieComponent.html</filename>
    <base>NSViewComponent</base>
    <member kind="function">
      <type></type>
      <name>MovieComponent</name>
      <anchorfile>classMovieComponent.html</anchorfile>
      <anchor>a59470eefa47a4a467a0b79ac4941e26f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~MovieComponent</name>
      <anchorfile>classMovieComponent.html</anchorfile>
      <anchor>a111d84fb612750554a9def189ed79f8f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>loadMovie</name>
      <anchorfile>classMovieComponent.html</anchorfile>
      <anchor>adaeca5545e8b9492a535e1d680f1bab4</anchor>
      <arglist>(const File &amp;file)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>loadMovie</name>
      <anchorfile>classMovieComponent.html</anchorfile>
      <anchor>aca56105dfbdd8511b9b7962b9ee8f4c1</anchor>
      <arglist>(const URL &amp;file)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>closeMovie</name>
      <anchorfile>classMovieComponent.html</anchorfile>
      <anchor>af8e03f9d20fa19e9edd9866818fa97a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isMovieOpen</name>
      <anchorfile>classMovieComponent.html</anchorfile>
      <anchor>a3f62371eb4dc50ab1127a5909a95b048</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>getCurrentMoviePath</name>
      <anchorfile>classMovieComponent.html</anchorfile>
      <anchor>a65e118ded8fb1115b4a79e58f461a64c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>play</name>
      <anchorfile>classMovieComponent.html</anchorfile>
      <anchor>acdccbfcaf033545fd489fe4c75eca56a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stop</name>
      <anchorfile>classMovieComponent.html</anchorfile>
      <anchor>af0aa7a095a8e54c65a1f4d6174314faa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getDuration</name>
      <anchorfile>classMovieComponent.html</anchorfile>
      <anchor>aa89e76f95119d9d1782698f78561e8a6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getPosition</name>
      <anchorfile>classMovieComponent.html</anchorfile>
      <anchor>a5053682a11d1cd1614ee26f884a7f611</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPosition</name>
      <anchorfile>classMovieComponent.html</anchorfile>
      <anchor>ae0b8d3c7e352c249479e84245e6c8bed</anchor>
      <arglist>(double seconds)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVolume</name>
      <anchorfile>classMovieComponent.html</anchorfile>
      <anchor>af9f97cc6eefa2616dac30a499e649997</anchor>
      <arglist>(float newVolume)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getVolume</name>
      <anchorfile>classMovieComponent.html</anchorfile>
      <anchor>ad3e8f2f4c0ab6dc5c12064f6b3c3dd73</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Rectangle&lt; int &gt;</type>
      <name>getNativeSize</name>
      <anchorfile>classMovieComponent.html</anchorfile>
      <anchor>a485c6de29367c7bdb786609b20453f83</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBoundsWithCorrectAspectRatio</name>
      <anchorfile>classMovieComponent.html</anchorfile>
      <anchor>ac335c88c45687b29f98b3e34eddb5834</anchor>
      <arglist>(Rectangle&lt; int &gt; spaceToFitWithin, RectanglePlacement placement)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NSViewComponent</name>
      <anchorfile>classNSViewComponent.html</anchorfile>
      <anchor>a47f7a2b57ee9175115e1d8c5206e191f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~NSViewComponent</name>
      <anchorfile>classNSViewComponent.html</anchorfile>
      <anchor>a8b7861229080258227eba895b5925bac</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setView</name>
      <anchorfile>classNSViewComponent.html</anchorfile>
      <anchor>a8768c07d38bf12419b1a77cd42625e8e</anchor>
      <arglist>(void *nsView)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>getView</name>
      <anchorfile>classNSViewComponent.html</anchorfile>
      <anchor>a45bc5a9f0a80c60342bd0fd93814feb4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resizeToFitView</name>
      <anchorfile>classNSViewComponent.html</anchorfile>
      <anchor>a3d7466089ae77b3428df1986f89ad949</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>paint</name>
      <anchorfile>classNSViewComponent.html</anchorfile>
      <anchor>ac991588b04fb3d201ee6cfd399b412d4</anchor>
      <arglist>(Graphics &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>alphaChanged</name>
      <anchorfile>classNSViewComponent.html</anchorfile>
      <anchor>a6302dbcb95361a82312a1633f5762bbc</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>resized</name>
      <anchorfile>classMovieComponent.html</anchorfile>
      <anchor>ab4706cbd3ecac65b4d83f499d34ba487</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ReferenceCountedObject *</type>
      <name>attachViewToComponent</name>
      <anchorfile>classNSViewComponent.html</anchorfile>
      <anchor>a5b009937017986682dea33c7d8f4290c</anchor>
      <arglist>(Component &amp;, void *)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MP3AudioFormat</name>
    <filename>classMP3AudioFormat.html</filename>
    <base>AudioFormat</base>
    <member kind="function">
      <type></type>
      <name>MP3AudioFormat</name>
      <anchorfile>classMP3AudioFormat.html</anchorfile>
      <anchor>a886e1c528284a83a2a74974038617441</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~MP3AudioFormat</name>
      <anchorfile>classMP3AudioFormat.html</anchorfile>
      <anchor>ad007683fabc7f1abcaa4f0502703989b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Array&lt; int &gt;</type>
      <name>getPossibleSampleRates</name>
      <anchorfile>classMP3AudioFormat.html</anchorfile>
      <anchor>af08b4081aab1809dbc086ce33c022082</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>Array&lt; int &gt;</type>
      <name>getPossibleBitDepths</name>
      <anchorfile>classMP3AudioFormat.html</anchorfile>
      <anchor>a82c5ba14ac9f8058c779ba53ebb0e911</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>canDoStereo</name>
      <anchorfile>classMP3AudioFormat.html</anchorfile>
      <anchor>a4d6782e89a3c709333ad5c0f14339659</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>canDoMono</name>
      <anchorfile>classMP3AudioFormat.html</anchorfile>
      <anchor>aadcff2621b9ce65e68cf42576f7efed1</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isCompressed</name>
      <anchorfile>classMP3AudioFormat.html</anchorfile>
      <anchor>a89ecafc80ae59d07dee6d45572286e7e</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>StringArray</type>
      <name>getQualityOptions</name>
      <anchorfile>classMP3AudioFormat.html</anchorfile>
      <anchor>a46b483dc8283baa9fe27d9e13b16ad0d</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>AudioFormatReader *</type>
      <name>createReaderFor</name>
      <anchorfile>classMP3AudioFormat.html</anchorfile>
      <anchor>a5060875795586a77e1fbc90d92581b9f</anchor>
      <arglist>(InputStream *, bool deleteStreamIfOpeningFails) override</arglist>
    </member>
    <member kind="function">
      <type>AudioFormatWriter *</type>
      <name>createWriterFor</name>
      <anchorfile>classMP3AudioFormat.html</anchorfile>
      <anchor>a008d516f2a8bf64d88d31ce573ca78bd</anchor>
      <arglist>(OutputStream *, double sampleRateToUse, unsigned int numberOfChannels, int bitsPerSample, const StringPairArray &amp;metadataValues, int qualityOptionIndex) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MPEInstrument</name>
    <filename>classMPEInstrument.html</filename>
    <class kind="class">MPEInstrument::Listener</class>
    <member kind="enumeration">
      <type></type>
      <name>TrackingMode</name>
      <anchorfile>classMPEInstrument.html</anchorfile>
      <anchor>a6253ed9c5e70322645b02865c70dc0b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>lastNotePlayedOnChannel</name>
      <anchorfile>classMPEInstrument.html</anchorfile>
      <anchor>a6253ed9c5e70322645b02865c70dc0b6a88bee5e48b4e40245b2743809737fd2e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>lowestNoteOnChannel</name>
      <anchorfile>classMPEInstrument.html</anchorfile>
      <anchor>a6253ed9c5e70322645b02865c70dc0b6a47f69f12a40825822a72ff0e4e8f5c4b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>highestNoteOnChannel</name>
      <anchorfile>classMPEInstrument.html</anchorfile>
      <anchor>a6253ed9c5e70322645b02865c70dc0b6ad52768b05c36483f44c933044a35d4dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>allNotesOnChannel</name>
      <anchorfile>classMPEInstrument.html</anchorfile>
      <anchor>a6253ed9c5e70322645b02865c70dc0b6a5985b27bfdbfc4172099d3da5a24a044</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MPEInstrument</name>
      <anchorfile>classMPEInstrument.html</anchorfile>
      <anchor>aed3c547de933e6e5c2a254bf4dea79f7</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MPEInstrument</name>
      <anchorfile>classMPEInstrument.html</anchorfile>
      <anchor>af3a344a77b71383652f5b6a47421b0e5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>MPEZoneLayout</type>
      <name>getZoneLayout</name>
      <anchorfile>classMPEInstrument.html</anchorfile>
      <anchor>a103e7f458857c220c870bf4387e2a366</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setZoneLayout</name>
      <anchorfile>classMPEInstrument.html</anchorfile>
      <anchor>a60a37c57cd5206090b4d2d866b959746</anchor>
      <arglist>(MPEZoneLayout newLayout)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNoteChannel</name>
      <anchorfile>classMPEInstrument.html</anchorfile>
      <anchor>a72e76f50599b741da70f6ab6e49a0450</anchor>
      <arglist>(int midiChannel) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isMasterChannel</name>
      <anchorfile>classMPEInstrument.html</anchorfile>
      <anchor>aad832a76615272bf724839709c0a0aaf</anchor>
      <arglist>(int midiChannel) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPressureTrackingMode</name>
      <anchorfile>classMPEInstrument.html</anchorfile>
      <anchor>aa8ffdce53374855ed114ca92004bcce6</anchor>
      <arglist>(TrackingMode modeToUse)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPitchbendTrackingMode</name>
      <anchorfile>classMPEInstrument.html</anchorfile>
      <anchor>a6502dcaaf2c1ebb799328f0f98df8b35</anchor>
      <arglist>(TrackingMode modeToUse)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTimbreTrackingMode</name>
      <anchorfile>classMPEInstrument.html</anchorfile>
      <anchor>aade5f2cf6d0944bfb7f3fd353ce0dbd4</anchor>
      <arglist>(TrackingMode modeToUse)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>processNextMidiEvent</name>
      <anchorfile>classMPEInstrument.html</anchorfile>
      <anchor>ad111bad93f9b6820d032ec9884775418</anchor>
      <arglist>(const MidiMessage &amp;message)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>noteOn</name>
      <anchorfile>classMPEInstrument.html</anchorfile>
      <anchor>aeadebc943c918b4793a865ba01e74ea0</anchor>
      <arglist>(int midiChannel, int midiNoteNumber, MPEValue midiNoteOnVelocity)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>noteOff</name>
      <anchorfile>classMPEInstrument.html</anchorfile>
      <anchor>a712ef2a01eb8b7d21aa5fa817d854082</anchor>
      <arglist>(int midiChannel, int midiNoteNumber, MPEValue midiNoteOffVelocity)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>pitchbend</name>
      <anchorfile>classMPEInstrument.html</anchorfile>
      <anchor>ada2ec3f0dc9821d2c8fbf86402c05444</anchor>
      <arglist>(int midiChannel, MPEValue pitchbend)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>pressure</name>
      <anchorfile>classMPEInstrument.html</anchorfile>
      <anchor>a29fe0d40d99a15f16f2dfd2d5bf64ec8</anchor>
      <arglist>(int midiChannel, MPEValue value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>timbre</name>
      <anchorfile>classMPEInstrument.html</anchorfile>
      <anchor>a336e4c22a7aa25a76d44597455bff133</anchor>
      <arglist>(int midiChannel, MPEValue value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>sustainPedal</name>
      <anchorfile>classMPEInstrument.html</anchorfile>
      <anchor>a5df080785049fc54bb48538e46d6214e</anchor>
      <arglist>(int midiChannel, bool isDown)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>sostenutoPedal</name>
      <anchorfile>classMPEInstrument.html</anchorfile>
      <anchor>af24c7fb469728ab874c13b9300bfaf9e</anchor>
      <arglist>(int midiChannel, bool isDown)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>releaseAllNotes</name>
      <anchorfile>classMPEInstrument.html</anchorfile>
      <anchor>aaf951ef21849aa7538abea6545b66d96</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumPlayingNotes</name>
      <anchorfile>classMPEInstrument.html</anchorfile>
      <anchor>a3526176ed59aa4aab042f84ddca2d8f0</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>MPENote</type>
      <name>getNote</name>
      <anchorfile>classMPEInstrument.html</anchorfile>
      <anchor>a845b316045e1cfe5862156814cc80018</anchor>
      <arglist>(int index) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>MPENote</type>
      <name>getNote</name>
      <anchorfile>classMPEInstrument.html</anchorfile>
      <anchor>a44489a491822ba654f7507f5461324a3</anchor>
      <arglist>(int midiChannel, int midiNoteNumber) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>MPENote</type>
      <name>getMostRecentNote</name>
      <anchorfile>classMPEInstrument.html</anchorfile>
      <anchor>a578854710d62add43187bd7355433365</anchor>
      <arglist>(int midiChannel) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>MPENote</type>
      <name>getMostRecentNoteOtherThan</name>
      <anchorfile>classMPEInstrument.html</anchorfile>
      <anchor>aae7b1c81fb769a83587d07cbdf7883ed</anchor>
      <arglist>(MPENote otherThanThisNote) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addListener</name>
      <anchorfile>classMPEInstrument.html</anchorfile>
      <anchor>a105bebec46b5413207366771887c15ad</anchor>
      <arglist>(Listener *listenerToAdd) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeListener</name>
      <anchorfile>classMPEInstrument.html</anchorfile>
      <anchor>ad52f3ab0f0a42969ff62523a53e6fc21</anchor>
      <arglist>(Listener *listenerToRemove) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enableLegacyMode</name>
      <anchorfile>classMPEInstrument.html</anchorfile>
      <anchor>a5a947eb3f30c2566ba448ce48b2925f8</anchor>
      <arglist>(int pitchbendRange=2, Range&lt; int &gt; channelRange=Range&lt; int &gt;(1, 17))</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isLegacyModeEnabled</name>
      <anchorfile>classMPEInstrument.html</anchorfile>
      <anchor>a472e505a54849b94df8b2c28721cb05f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Range&lt; int &gt;</type>
      <name>getLegacyModeChannelRange</name>
      <anchorfile>classMPEInstrument.html</anchorfile>
      <anchor>a48d08cc214e07dd772fb8ed8c6ec679a</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLegacyModeChannelRange</name>
      <anchorfile>classMPEInstrument.html</anchorfile>
      <anchor>abef02c4b4ea3d4fc9ce6aede066696ef</anchor>
      <arglist>(Range&lt; int &gt; channelRange)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getLegacyModePitchbendRange</name>
      <anchorfile>classMPEInstrument.html</anchorfile>
      <anchor>a490802cc4db8272096a09123adf8fdf1</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLegacyModePitchbendRange</name>
      <anchorfile>classMPEInstrument.html</anchorfile>
      <anchor>a6c4f9fd1840122bf9520a504dbfda956</anchor>
      <arglist>(int pitchbendRange)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MPEInstrument::Listener</name>
    <filename>classMPEInstrument_1_1Listener.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Listener</name>
      <anchorfile>classMPEInstrument_1_1Listener.html</anchorfile>
      <anchor>ac877fa9127b1c3718ebad025fcb0ff85</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>noteAdded</name>
      <anchorfile>classMPEInstrument_1_1Listener.html</anchorfile>
      <anchor>a3ed24fc611a2d655a0a7c06eb0883b6a</anchor>
      <arglist>(MPENote newNote)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>notePressureChanged</name>
      <anchorfile>classMPEInstrument_1_1Listener.html</anchorfile>
      <anchor>adc06f3989c5cd699ae97c391d2117b42</anchor>
      <arglist>(MPENote changedNote)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>notePitchbendChanged</name>
      <anchorfile>classMPEInstrument_1_1Listener.html</anchorfile>
      <anchor>a47609333f6dc48544da697e9d42188ae</anchor>
      <arglist>(MPENote changedNote)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>noteTimbreChanged</name>
      <anchorfile>classMPEInstrument_1_1Listener.html</anchorfile>
      <anchor>a2479e31f024803b3a3379341c5a6fda1</anchor>
      <arglist>(MPENote changedNote)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>noteKeyStateChanged</name>
      <anchorfile>classMPEInstrument_1_1Listener.html</anchorfile>
      <anchor>a88c9dda48fed8107b7b5e355b1273d73</anchor>
      <arglist>(MPENote changedNote)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>noteReleased</name>
      <anchorfile>classMPEInstrument_1_1Listener.html</anchorfile>
      <anchor>ac5ebbf72827b08d96c1e9c45de27c317</anchor>
      <arglist>(MPENote finishedNote)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MPEMessages</name>
    <filename>classMPEMessages.html</filename>
    <member kind="function" static="yes">
      <type>static MidiBuffer</type>
      <name>addZone</name>
      <anchorfile>classMPEMessages.html</anchorfile>
      <anchor>a892d1ee5c734a8b92fa114c7d49e5e38</anchor>
      <arglist>(MPEZone zone)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MidiBuffer</type>
      <name>perNotePitchbendRange</name>
      <anchorfile>classMPEMessages.html</anchorfile>
      <anchor>a08a651850cd4a9d741a08d691825dba9</anchor>
      <arglist>(MPEZone zone)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MidiBuffer</type>
      <name>masterPitchbendRange</name>
      <anchorfile>classMPEMessages.html</anchorfile>
      <anchor>a9b3b7e9f1638d1454137e65ec0f652ef</anchor>
      <arglist>(MPEZone zone)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MidiBuffer</type>
      <name>clearAllZones</name>
      <anchorfile>classMPEMessages.html</anchorfile>
      <anchor>afd71490eb42bccb50b03186742f1efc2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MidiBuffer</type>
      <name>setZoneLayout</name>
      <anchorfile>classMPEMessages.html</anchorfile>
      <anchor>a89e08749090d02fd04fc7d80a013f951</anchor>
      <arglist>(const MPEZoneLayout &amp;layout)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>zoneLayoutMessagesRpnNumber</name>
      <anchorfile>classMPEMessages.html</anchorfile>
      <anchor>abef11ba61a0031916d74066f718b407d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>MPENote</name>
    <filename>structMPENote.html</filename>
    <member kind="enumeration">
      <type></type>
      <name>KeyState</name>
      <anchorfile>structMPENote.html</anchorfile>
      <anchor>a20106ff137c1a5f0b8e6e099ff3fc922</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>off</name>
      <anchorfile>structMPENote.html</anchorfile>
      <anchor>a20106ff137c1a5f0b8e6e099ff3fc922adeb8e0c25e24978beb9013836745cb4b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>keyDown</name>
      <anchorfile>structMPENote.html</anchorfile>
      <anchor>a20106ff137c1a5f0b8e6e099ff3fc922a895ffc865cb90899c347efefb881e2ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>sustained</name>
      <anchorfile>structMPENote.html</anchorfile>
      <anchor>a20106ff137c1a5f0b8e6e099ff3fc922a3394b891d4bdd77fd39d141102c4a4bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>keyDownAndSustained</name>
      <anchorfile>structMPENote.html</anchorfile>
      <anchor>a20106ff137c1a5f0b8e6e099ff3fc922a31c427116ac75e042f9f5315a7aad129</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MPENote</name>
      <anchorfile>structMPENote.html</anchorfile>
      <anchor>af1c2cff864c387bedf8ec5c06e5a8660</anchor>
      <arglist>(int midiChannel, int initialNote, MPEValue velocity, MPEValue pitchbend, MPEValue pressure, MPEValue timbre, KeyState keyState=MPENote::keyDown) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MPENote</name>
      <anchorfile>structMPENote.html</anchorfile>
      <anchor>ae7a1417b7ed74b278e1ba3787e24aa59</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>structMPENote.html</anchorfile>
      <anchor>a7cc337facd416d2da4ff19a16af1f842</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getFrequencyInHertz</name>
      <anchorfile>structMPENote.html</anchorfile>
      <anchor>ab2c9c6399f9e500314762ce488cc227d</anchor>
      <arglist>(double frequencyOfA=440.0) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>structMPENote.html</anchorfile>
      <anchor>a743fe2c2da9fb745b4d2b1de647007cc</anchor>
      <arglist>(const MPENote &amp;other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>structMPENote.html</anchorfile>
      <anchor>ab9fe1c72c698427d79569e10d18ad8c2</anchor>
      <arglist>(const MPENote &amp;other) const noexcept</arglist>
    </member>
    <member kind="variable">
      <type>uint16</type>
      <name>noteID</name>
      <anchorfile>structMPENote.html</anchorfile>
      <anchor>aa718127706bfef0ea4bb58a5dd4fd65a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint8</type>
      <name>midiChannel</name>
      <anchorfile>structMPENote.html</anchorfile>
      <anchor>a642fb34a5721d3eb5d3cf84e92706164</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint8</type>
      <name>initialNote</name>
      <anchorfile>structMPENote.html</anchorfile>
      <anchor>a76415e99eca6956fd16ed014e226a5ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>MPEValue</type>
      <name>noteOnVelocity</name>
      <anchorfile>structMPENote.html</anchorfile>
      <anchor>a9322650db7f2e76cec724746d1a75c1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>MPEValue</type>
      <name>pitchbend</name>
      <anchorfile>structMPENote.html</anchorfile>
      <anchor>aebfdbfc173bc19cc97b97659c412078f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>MPEValue</type>
      <name>pressure</name>
      <anchorfile>structMPENote.html</anchorfile>
      <anchor>af04939884198c48da9927e76e4f3ff90</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>MPEValue</type>
      <name>timbre</name>
      <anchorfile>structMPENote.html</anchorfile>
      <anchor>aea15b7b7d5b9c55cbf7d479aa8e46a90</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>MPEValue</type>
      <name>noteOffVelocity</name>
      <anchorfile>structMPENote.html</anchorfile>
      <anchor>a9e46888c40a2d3eaf4b8c5129b21de6e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>totalPitchbendInSemitones</name>
      <anchorfile>structMPENote.html</anchorfile>
      <anchor>aad33696be29262c8591266f0ab37d534</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>KeyState</type>
      <name>keyState</name>
      <anchorfile>structMPENote.html</anchorfile>
      <anchor>a971b45daba4a89318713bcb4678dbc4b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MPESynthesiser</name>
    <filename>classMPESynthesiser.html</filename>
    <base>MPESynthesiserBase</base>
    <member kind="function">
      <type></type>
      <name>MPESynthesiser</name>
      <anchorfile>classMPESynthesiser.html</anchorfile>
      <anchor>a64e54c0339818c5df93c2cb531b249c8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MPESynthesiser</name>
      <anchorfile>classMPESynthesiser.html</anchorfile>
      <anchor>a23c16b0fed549ee37e887695976cebad</anchor>
      <arglist>(MPEInstrument *instrument)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~MPESynthesiser</name>
      <anchorfile>classMPESynthesiser.html</anchorfile>
      <anchor>a12a9a600b33b5c04c3616b7ed724e689</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearVoices</name>
      <anchorfile>classMPESynthesiser.html</anchorfile>
      <anchor>ae7b8329a8fe49c0d47a39d2c6a446aa1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumVoices</name>
      <anchorfile>classMPESynthesiser.html</anchorfile>
      <anchor>a30cf6e16df8dff774936e40f28a3c120</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>MPESynthesiserVoice *</type>
      <name>getVoice</name>
      <anchorfile>classMPESynthesiser.html</anchorfile>
      <anchor>a31fc892a23dcc056b92d3b63e6b5d8ad</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addVoice</name>
      <anchorfile>classMPESynthesiser.html</anchorfile>
      <anchor>acd5a57224ed678670766c3f0e1c611ac</anchor>
      <arglist>(MPESynthesiserVoice *newVoice)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeVoice</name>
      <anchorfile>classMPESynthesiser.html</anchorfile>
      <anchor>a836247c3df5b53979d28cf6a1c3ba83d</anchor>
      <arglist>(int index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reduceNumVoices</name>
      <anchorfile>classMPESynthesiser.html</anchorfile>
      <anchor>a6b3e0b278f6f848abac1ab5552c5d04d</anchor>
      <arglist>(int newNumVoices)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>turnOffAllVoices</name>
      <anchorfile>classMPESynthesiser.html</anchorfile>
      <anchor>a77ee38c3f403695970cffb51f3e8ebdb</anchor>
      <arglist>(bool allowTailOff)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVoiceStealingEnabled</name>
      <anchorfile>classMPESynthesiser.html</anchorfile>
      <anchor>a711a9bb400e273117c88095a1f1cced7</anchor>
      <arglist>(bool shouldSteal) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isVoiceStealingEnabled</name>
      <anchorfile>classMPESynthesiser.html</anchorfile>
      <anchor>a66626bd58b9d126ed61d847a572441ee</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCurrentPlaybackSampleRate</name>
      <anchorfile>classMPESynthesiser.html</anchorfile>
      <anchor>aaa4de3655921d4971ad4334001f096b1</anchor>
      <arglist>(double newRate) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>handleMidiEvent</name>
      <anchorfile>classMPESynthesiser.html</anchorfile>
      <anchor>a2dd519f9423daede17cc9658b90235e9</anchor>
      <arglist>(const MidiMessage &amp;) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handleController</name>
      <anchorfile>classMPESynthesiser.html</anchorfile>
      <anchor>ae7e0785bd58e274b3ae7218bb468cb44</anchor>
      <arglist>(int, int, int)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handleProgramChange</name>
      <anchorfile>classMPESynthesiser.html</anchorfile>
      <anchor>a8902a959475b2c1a22f04c6235edf214</anchor>
      <arglist>(int, int)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MPESynthesiserBase</name>
      <anchorfile>structMPESynthesiserBase.html</anchorfile>
      <anchor>a74424e05c011bc07e8c626e6911b5fd6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MPESynthesiserBase</name>
      <anchorfile>structMPESynthesiserBase.html</anchorfile>
      <anchor>a15daf0b062b97aed7d4b1eb9fa0112ce</anchor>
      <arglist>(MPEInstrument *instrument)</arglist>
    </member>
    <member kind="function">
      <type>MPEZoneLayout</type>
      <name>getZoneLayout</name>
      <anchorfile>structMPESynthesiserBase.html</anchorfile>
      <anchor>aae3ea68ecf5083e8b12a89f59935c61e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setZoneLayout</name>
      <anchorfile>structMPESynthesiserBase.html</anchorfile>
      <anchor>afeac8dac88466e65c1b86c94be91fe02</anchor>
      <arglist>(MPEZoneLayout newLayout)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getSampleRate</name>
      <anchorfile>structMPESynthesiserBase.html</anchorfile>
      <anchor>aeeb6866efb815c5fecfaeee7a25df4f8</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>renderNextBlock</name>
      <anchorfile>structMPESynthesiserBase.html</anchorfile>
      <anchor>a6b0bfbf04857771b9df5c49ea7ba14df</anchor>
      <arglist>(AudioBuffer&lt; floatType &gt; &amp;outputAudio, const MidiBuffer &amp;inputMidi, int startSample, int numSamples)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMinimumRenderingSubdivisionSize</name>
      <anchorfile>structMPESynthesiserBase.html</anchorfile>
      <anchor>a86d907030c48a8abf67810ba08a8ff98</anchor>
      <arglist>(int numSamples, bool shouldBeStrict=false) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enableLegacyMode</name>
      <anchorfile>structMPESynthesiserBase.html</anchorfile>
      <anchor>a4abccdd51b94666cd099d115152da4e5</anchor>
      <arglist>(int pitchbendRange=2, Range&lt; int &gt; channelRange=Range&lt; int &gt;(1, 17))</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isLegacyModeEnabled</name>
      <anchorfile>structMPESynthesiserBase.html</anchorfile>
      <anchor>aaa7616a70ce2cb4e9253d85031caf309</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Range&lt; int &gt;</type>
      <name>getLegacyModeChannelRange</name>
      <anchorfile>structMPESynthesiserBase.html</anchorfile>
      <anchor>a1d9886cbd222f3bc01858659fb187787</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLegacyModeChannelRange</name>
      <anchorfile>structMPESynthesiserBase.html</anchorfile>
      <anchor>ac4695668d9cc9ad26f3bb1a5a370d582</anchor>
      <arglist>(Range&lt; int &gt; channelRange)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getLegacyModePitchbendRange</name>
      <anchorfile>structMPESynthesiserBase.html</anchorfile>
      <anchor>a5edf96cd4354ea30d38350f2f4b38647</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLegacyModePitchbendRange</name>
      <anchorfile>structMPESynthesiserBase.html</anchorfile>
      <anchor>a9ed7113fa62ec1f9e979b568c6d99893</anchor>
      <arglist>(int pitchbendRange)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPressureTrackingMode</name>
      <anchorfile>structMPESynthesiserBase.html</anchorfile>
      <anchor>ad7c289b07c46f9a14bc7e921eda81428</anchor>
      <arglist>(TrackingMode modeToUse)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPitchbendTrackingMode</name>
      <anchorfile>structMPESynthesiserBase.html</anchorfile>
      <anchor>a05a40ad0af91f7802f48c1c95182b62c</anchor>
      <arglist>(TrackingMode modeToUse)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTimbreTrackingMode</name>
      <anchorfile>structMPESynthesiserBase.html</anchorfile>
      <anchor>a1c7fa1570206a5158a872d52959d912c</anchor>
      <arglist>(TrackingMode modeToUse)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>noteAdded</name>
      <anchorfile>classMPESynthesiser.html</anchorfile>
      <anchor>a41a82fda29e8bc58d808abc111824a59</anchor>
      <arglist>(MPENote newNote) override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>noteReleased</name>
      <anchorfile>classMPESynthesiser.html</anchorfile>
      <anchor>a4bfb98acd150148652391b21e18a07cd</anchor>
      <arglist>(MPENote finishedNote) override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>notePressureChanged</name>
      <anchorfile>classMPESynthesiser.html</anchorfile>
      <anchor>a2afc5267ae10e717565683d0c90d5c87</anchor>
      <arglist>(MPENote changedNote) override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>notePitchbendChanged</name>
      <anchorfile>classMPESynthesiser.html</anchorfile>
      <anchor>a6418065d8ba1be8e20661fd5a8c8eaa9</anchor>
      <arglist>(MPENote changedNote) override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>noteTimbreChanged</name>
      <anchorfile>classMPESynthesiser.html</anchorfile>
      <anchor>ae8a1c829e7c570e844d855ce8c1cbec0</anchor>
      <arglist>(MPENote changedNote) override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>noteKeyStateChanged</name>
      <anchorfile>classMPESynthesiser.html</anchorfile>
      <anchor>a738389fa41b37f7cfe71db404eae0fa5</anchor>
      <arglist>(MPENote changedNote) override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>renderNextSubBlock</name>
      <anchorfile>classMPESynthesiser.html</anchorfile>
      <anchor>a5192d64f9a0f664dbeb28b34e216381c</anchor>
      <arglist>(AudioBuffer&lt; float &gt; &amp;outputAudio, int startSample, int numSamples) override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>renderNextSubBlock</name>
      <anchorfile>classMPESynthesiser.html</anchorfile>
      <anchor>a98c17883ec58f43951ac70026cb7ffd8</anchor>
      <arglist>(AudioBuffer&lt; double &gt; &amp;outputAudio, int startSample, int numSamples) override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual MPESynthesiserVoice *</type>
      <name>findFreeVoice</name>
      <anchorfile>classMPESynthesiser.html</anchorfile>
      <anchor>ab6223425a95b47862081341663686d90</anchor>
      <arglist>(MPENote noteToFindVoiceFor, bool stealIfNoneAvailable) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual MPESynthesiserVoice *</type>
      <name>findVoiceToSteal</name>
      <anchorfile>classMPESynthesiser.html</anchorfile>
      <anchor>a6049b512972da999554afab9978350dc</anchor>
      <arglist>(MPENote noteToStealVoiceFor=MPENote()) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>startVoice</name>
      <anchorfile>classMPESynthesiser.html</anchorfile>
      <anchor>aee6881d2b047430ac2886fb606de6630</anchor>
      <arglist>(MPESynthesiserVoice *voice, MPENote noteToStart)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>stopVoice</name>
      <anchorfile>classMPESynthesiser.html</anchorfile>
      <anchor>ad3bc7bb58287b2ee1828fbca0ad40a19</anchor>
      <arglist>(MPESynthesiserVoice *voice, MPENote noteToStop, bool allowTailOff)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>OwnedArray&lt; MPESynthesiserVoice &gt;</type>
      <name>voices</name>
      <anchorfile>classMPESynthesiser.html</anchorfile>
      <anchor>ae8ff04bfb33a5de6d649ed78bab37274</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ScopedPointer&lt; MPEInstrument &gt;</type>
      <name>instrument</name>
      <anchorfile>structMPESynthesiserBase.html</anchorfile>
      <anchor>a714dfff07d6efda0363f4f0e62839482</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MPEInstrument::TrackingMode</type>
      <name>TrackingMode</name>
      <anchorfile>structMPESynthesiserBase.html</anchorfile>
      <anchor>a6903ed04f13f9683e5587e3be5c9b5f7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>MPESynthesiserBase</name>
    <filename>structMPESynthesiserBase.html</filename>
    <base>MPEInstrument::Listener</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCurrentPlaybackSampleRate</name>
      <anchorfile>structMPESynthesiserBase.html</anchorfile>
      <anchor>aa4b7f08d7300b5fd4b7dee5afe0a5b6e</anchor>
      <arglist>(double sampleRate)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMidiEvent</name>
      <anchorfile>structMPESynthesiserBase.html</anchorfile>
      <anchor>a4d2ec25d39adbbe075cc73b16ac57350</anchor>
      <arglist>(const MidiMessage &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>renderNextSubBlock</name>
      <anchorfile>structMPESynthesiserBase.html</anchorfile>
      <anchor>a35cb8fe7b87b603884ee3f4837be07aa</anchor>
      <arglist>(AudioBuffer&lt; float &gt; &amp;outputAudio, int startSample, int numSamples)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>renderNextSubBlock</name>
      <anchorfile>structMPESynthesiserBase.html</anchorfile>
      <anchor>a7eb0cef08098b387967879d30efee749</anchor>
      <arglist>(AudioBuffer&lt; double &gt; &amp;, int, int)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MPESynthesiserVoice</name>
    <filename>classMPESynthesiserVoice.html</filename>
    <member kind="function">
      <type></type>
      <name>MPESynthesiserVoice</name>
      <anchorfile>classMPESynthesiserVoice.html</anchorfile>
      <anchor>ac249363fa7744946af9dbcc335479ffa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MPESynthesiserVoice</name>
      <anchorfile>classMPESynthesiserVoice.html</anchorfile>
      <anchor>ab347e2d6583493d04dce1d0cefe825ba</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>MPENote</type>
      <name>getCurrentlyPlayingNote</name>
      <anchorfile>classMPESynthesiserVoice.html</anchorfile>
      <anchor>a073572535bfb518f0825b72ad52ddccb</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isCurrentlyPlayingNote</name>
      <anchorfile>classMPESynthesiserVoice.html</anchorfile>
      <anchor>a930a864916a6278169e2a02f62058dc1</anchor>
      <arglist>(MPENote note) const noexcept</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isActive</name>
      <anchorfile>classMPESynthesiserVoice.html</anchorfile>
      <anchor>a523b0720b060ab123c7494daad4f1385</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isPlayingButReleased</name>
      <anchorfile>classMPESynthesiserVoice.html</anchorfile>
      <anchor>af5ba4a685cf06eb2be693c237135ad0b</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>noteStarted</name>
      <anchorfile>classMPESynthesiserVoice.html</anchorfile>
      <anchor>ae10c1cdfb37208b96b56863d47a3a193</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>noteStopped</name>
      <anchorfile>classMPESynthesiserVoice.html</anchorfile>
      <anchor>a60d75565bb6ef14262aa3e5ab5c94328</anchor>
      <arglist>(bool allowTailOff)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>notePressureChanged</name>
      <anchorfile>classMPESynthesiserVoice.html</anchorfile>
      <anchor>a10d814de2c8a444040adfd90425a72d8</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>notePitchbendChanged</name>
      <anchorfile>classMPESynthesiserVoice.html</anchorfile>
      <anchor>afef5b8e0cad53c4257ed78f6e7a04be5</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>noteTimbreChanged</name>
      <anchorfile>classMPESynthesiserVoice.html</anchorfile>
      <anchor>ad2f36b71807fd1ac15c52f480702112f</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>noteKeyStateChanged</name>
      <anchorfile>classMPESynthesiserVoice.html</anchorfile>
      <anchor>aa2cd567d2206dad122b91f51cecce6e2</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>renderNextBlock</name>
      <anchorfile>classMPESynthesiserVoice.html</anchorfile>
      <anchor>a204b1557448a7de667171620525d4023</anchor>
      <arglist>(AudioBuffer&lt; float &gt; &amp;outputBuffer, int startSample, int numSamples)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>renderNextBlock</name>
      <anchorfile>classMPESynthesiserVoice.html</anchorfile>
      <anchor>a22e7b9bd5d46036908641a7ae386b283</anchor>
      <arglist>(AudioBuffer&lt; double &gt; &amp;, int, int)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCurrentSampleRate</name>
      <anchorfile>classMPESynthesiserVoice.html</anchorfile>
      <anchor>a0cc2f469d88ea14b0e48476017da70a7</anchor>
      <arglist>(double newRate)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getSampleRate</name>
      <anchorfile>classMPESynthesiserVoice.html</anchorfile>
      <anchor>ae4a38948a044093709fcfa2295a8110a</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>wasStartedBefore</name>
      <anchorfile>classMPESynthesiserVoice.html</anchorfile>
      <anchor>a1682e06d31bdb7fce2d4d692de9e6b8c</anchor>
      <arglist>(const MPESynthesiserVoice &amp;other) const noexcept</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>clearCurrentNote</name>
      <anchorfile>classMPESynthesiserVoice.html</anchorfile>
      <anchor>ac4c127e835481315ebd02421edf15bd5</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>currentSampleRate</name>
      <anchorfile>classMPESynthesiserVoice.html</anchorfile>
      <anchor>a9310a73a44408ab65dfb9b875917c354</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>MPENote</type>
      <name>currentlyPlayingNote</name>
      <anchorfile>classMPESynthesiserVoice.html</anchorfile>
      <anchor>aea34fcbdb3fa0961f73d5f9a1f34e255</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MPEValue</name>
    <filename>classMPEValue.html</filename>
    <member kind="function">
      <type></type>
      <name>MPEValue</name>
      <anchorfile>classMPEValue.html</anchorfile>
      <anchor>a9e626e4f1ccf370a5fa0ff6d7c79bf01</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>as7BitInt</name>
      <anchorfile>classMPEValue.html</anchorfile>
      <anchor>a2a6c9ce9b5c9dc26915a072a1b9df420</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>as14BitInt</name>
      <anchorfile>classMPEValue.html</anchorfile>
      <anchor>aae24e4ba8d857a7f785990d06fc6da2f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>asSignedFloat</name>
      <anchorfile>classMPEValue.html</anchorfile>
      <anchor>a01f951536a984cabcf11f1a3a93bf5d0</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>asUnsignedFloat</name>
      <anchorfile>classMPEValue.html</anchorfile>
      <anchor>a5f032f62652034056981da5fcfed3d99</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classMPEValue.html</anchorfile>
      <anchor>ac6f60b0319a3ce739653ba7936612a13</anchor>
      <arglist>(const MPEValue &amp;other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classMPEValue.html</anchorfile>
      <anchor>a69e39f57c8f65035626b3729ee90bd6b</anchor>
      <arglist>(const MPEValue &amp;other) const noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MPEValue</type>
      <name>from7BitInt</name>
      <anchorfile>classMPEValue.html</anchorfile>
      <anchor>a49273e94ce55eabd042abf2b3c596749</anchor>
      <arglist>(int value) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MPEValue</type>
      <name>from14BitInt</name>
      <anchorfile>classMPEValue.html</anchorfile>
      <anchor>ab8606e727fc51c6175949d8d35af3693</anchor>
      <arglist>(int value) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MPEValue</type>
      <name>centreValue</name>
      <anchorfile>classMPEValue.html</anchorfile>
      <anchor>ac7d202aceda6794e12b067980ef06cf0</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MPEValue</type>
      <name>minValue</name>
      <anchorfile>classMPEValue.html</anchorfile>
      <anchor>afc5db923984aac0f4d7de4b4605079ac</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MPEValue</type>
      <name>maxValue</name>
      <anchorfile>classMPEValue.html</anchorfile>
      <anchor>ae7c8810a4292624cfa1413f29e35dee8</anchor>
      <arglist>() noexcept</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>MPEZone</name>
    <filename>structMPEZone.html</filename>
    <member kind="function">
      <type></type>
      <name>MPEZone</name>
      <anchorfile>structMPEZone.html</anchorfile>
      <anchor>a2d96a154e68b1a202dc3725df72c1fed</anchor>
      <arglist>(int masterChannel, int numNoteChannels, int perNotePitchbendRange=48, int masterPitchbendRange=2) noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getMasterChannel</name>
      <anchorfile>structMPEZone.html</anchorfile>
      <anchor>a5c8402c080b6ee1ae2259a6833728fa8</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumNoteChannels</name>
      <anchorfile>structMPEZone.html</anchorfile>
      <anchor>a48c7c57fd450b0017a77157bf64e9972</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getFirstNoteChannel</name>
      <anchorfile>structMPEZone.html</anchorfile>
      <anchor>ac77dcd94460cf578a35cbf02c85dfae0</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getLastNoteChannel</name>
      <anchorfile>structMPEZone.html</anchorfile>
      <anchor>ae916c26e015513b57f17672ea9d3e3d9</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Range&lt; int &gt;</type>
      <name>getNoteChannelRange</name>
      <anchorfile>structMPEZone.html</anchorfile>
      <anchor>aaff063326ac4c3178601838c690f110a</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isUsingChannel</name>
      <anchorfile>structMPEZone.html</anchorfile>
      <anchor>abd60c0e930d481d10501d9c934ddbc47</anchor>
      <arglist>(int channel) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isUsingChannelAsNoteChannel</name>
      <anchorfile>structMPEZone.html</anchorfile>
      <anchor>aee5b9ab4c1c5ebf6e90073001150d558</anchor>
      <arglist>(int channel) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getPerNotePitchbendRange</name>
      <anchorfile>structMPEZone.html</anchorfile>
      <anchor>a7e4a8289d2d973c5b1a3e4cb10ad4212</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getMasterPitchbendRange</name>
      <anchorfile>structMPEZone.html</anchorfile>
      <anchor>a8c32eb9cec3506e4e21b833235fad1b2</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPerNotePitchbendRange</name>
      <anchorfile>structMPEZone.html</anchorfile>
      <anchor>ab047573d95e602d38fa27535274c4dbc</anchor>
      <arglist>(int rangeInSemitones) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMasterPitchbendRange</name>
      <anchorfile>structMPEZone.html</anchorfile>
      <anchor>ad610f0ec014a21eb869cdb2ff169210f</anchor>
      <arglist>(int rangeInSemitones) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>overlapsWith</name>
      <anchorfile>structMPEZone.html</anchorfile>
      <anchor>a195d7523cd2d153e304b0f66472ededf</anchor>
      <arglist>(MPEZone other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>truncateToFit</name>
      <anchorfile>structMPEZone.html</anchorfile>
      <anchor>aa788aba111e390bc59f035106bac2ad5</anchor>
      <arglist>(MPEZone zoneToAvoid) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>structMPEZone.html</anchorfile>
      <anchor>a78d76c9dceba085a2ce376828b7635d1</anchor>
      <arglist>(const MPEZone &amp;other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>structMPEZone.html</anchorfile>
      <anchor>a3e475b844b64850620cbc4951c37b58e</anchor>
      <arglist>(const MPEZone &amp;other) const noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MPEZoneLayout</name>
    <filename>classMPEZoneLayout.html</filename>
    <class kind="class">MPEZoneLayout::Listener</class>
    <member kind="function">
      <type></type>
      <name>MPEZoneLayout</name>
      <anchorfile>classMPEZoneLayout.html</anchorfile>
      <anchor>a3e498f25f3e1afb147741b6ca5628f14</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MPEZoneLayout</name>
      <anchorfile>classMPEZoneLayout.html</anchorfile>
      <anchor>a838a50d944ed9e05a29809188ade8587</anchor>
      <arglist>(const MPEZoneLayout &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>MPEZoneLayout &amp;</type>
      <name>operator=</name>
      <anchorfile>classMPEZoneLayout.html</anchorfile>
      <anchor>a38b050ea2b2fe55ef447e66b587e6052</anchor>
      <arglist>(const MPEZoneLayout &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addZone</name>
      <anchorfile>classMPEZoneLayout.html</anchorfile>
      <anchor>a2539db09285894f55239d72481f087cd</anchor>
      <arglist>(MPEZone newZone)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearAllZones</name>
      <anchorfile>classMPEZoneLayout.html</anchorfile>
      <anchor>a1a8cb8ce77e33b80ad12906f7d67d7cd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>processNextMidiEvent</name>
      <anchorfile>classMPEZoneLayout.html</anchorfile>
      <anchor>aea82529498d4a56eac9564ae4b5aba5d</anchor>
      <arglist>(const MidiMessage &amp;message)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>processNextMidiBuffer</name>
      <anchorfile>classMPEZoneLayout.html</anchorfile>
      <anchor>adf33b4a472198c9283d94a6aad836e90</anchor>
      <arglist>(const MidiBuffer &amp;buffer)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumZones</name>
      <anchorfile>classMPEZoneLayout.html</anchorfile>
      <anchor>af4f017dcbccd3308c1a83cc230df3ae3</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>MPEZone *</type>
      <name>getZoneByIndex</name>
      <anchorfile>classMPEZoneLayout.html</anchorfile>
      <anchor>a3c4fff68e432d141f490e4ec879be5f2</anchor>
      <arglist>(int index) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>MPEZone *</type>
      <name>getZoneByChannel</name>
      <anchorfile>classMPEZoneLayout.html</anchorfile>
      <anchor>aa9d451a6d26a4b6dcaa63f8a036bad8a</anchor>
      <arglist>(int midiChannel) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>MPEZone *</type>
      <name>getZoneByMasterChannel</name>
      <anchorfile>classMPEZoneLayout.html</anchorfile>
      <anchor>a1d73e408a76c8718ae6f9ef45875a1b7</anchor>
      <arglist>(int midiChannel) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>MPEZone *</type>
      <name>getZoneByFirstNoteChannel</name>
      <anchorfile>classMPEZoneLayout.html</anchorfile>
      <anchor>a613bd0a75d53ca9f7a71ce45213a2dc6</anchor>
      <arglist>(int midiChannel) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>MPEZone *</type>
      <name>getZoneByNoteChannel</name>
      <anchorfile>classMPEZoneLayout.html</anchorfile>
      <anchor>a7a029714df9f8ffe8761ee4e991ea709</anchor>
      <arglist>(int midiChannel) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addListener</name>
      <anchorfile>classMPEZoneLayout.html</anchorfile>
      <anchor>a1646514b879aebd48659764d968c87dc</anchor>
      <arglist>(Listener *const listenerToAdd) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeListener</name>
      <anchorfile>classMPEZoneLayout.html</anchorfile>
      <anchor>a1651a42bdc4fa6124e2a8fc737d69a5c</anchor>
      <arglist>(Listener *const listenerToRemove) noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MPEZoneLayout::Listener</name>
    <filename>classMPEZoneLayout_1_1Listener.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Listener</name>
      <anchorfile>classMPEZoneLayout_1_1Listener.html</anchorfile>
      <anchor>a7ea5d1c5575d224c9f665fd052546afb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>zoneLayoutChanged</name>
      <anchorfile>classMPEZoneLayout_1_1Listener.html</anchorfile>
      <anchor>a4db05a5bda15f42eb55c61722f11a832</anchor>
      <arglist>(const MPEZoneLayout &amp;layout)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MultiDocumentPanel</name>
    <filename>classMultiDocumentPanel.html</filename>
    <base>Component</base>
    <base protection="private">ComponentListener</base>
    <member kind="enumeration">
      <type></type>
      <name>LayoutMode</name>
      <anchorfile>classMultiDocumentPanel.html</anchorfile>
      <anchor>a493599178acb0ddea50f7059faa4f8f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>FloatingWindows</name>
      <anchorfile>classMultiDocumentPanel.html</anchorfile>
      <anchor>a493599178acb0ddea50f7059faa4f8f3aa9d0aa1885d047c950adf06e10b47014</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>MaximisedWindowsWithTabs</name>
      <anchorfile>classMultiDocumentPanel.html</anchorfile>
      <anchor>a493599178acb0ddea50f7059faa4f8f3abefd8f86bfe674ec6c95337947d3754c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MultiDocumentPanel</name>
      <anchorfile>classMultiDocumentPanel.html</anchorfile>
      <anchor>a2a3d7d745dd5cd11709ecee4102fa154</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~MultiDocumentPanel</name>
      <anchorfile>classMultiDocumentPanel.html</anchorfile>
      <anchor>af17382f4a96ca832de343b158c59b1a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>closeAllDocuments</name>
      <anchorfile>classMultiDocumentPanel.html</anchorfile>
      <anchor>acb21e02cfd0dcc0ecc9f34e85f8f4d0c</anchor>
      <arglist>(bool checkItsOkToCloseFirst)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addDocument</name>
      <anchorfile>classMultiDocumentPanel.html</anchorfile>
      <anchor>a92a4b424c5d8eee7fb859e5a2e71bdad</anchor>
      <arglist>(Component *component, Colour backgroundColour, bool deleteWhenRemoved)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>closeDocument</name>
      <anchorfile>classMultiDocumentPanel.html</anchorfile>
      <anchor>adedf8a2aa07d2a92788e22ab8fa6cae4</anchor>
      <arglist>(Component *component, bool checkItsOkToCloseFirst)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumDocuments</name>
      <anchorfile>classMultiDocumentPanel.html</anchorfile>
      <anchor>a37014ef928560012f424dbb32cd43b03</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Component *</type>
      <name>getDocument</name>
      <anchorfile>classMultiDocumentPanel.html</anchorfile>
      <anchor>a40cd8b7b1144dd24094a51f897c835f1</anchor>
      <arglist>(int index) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Component *</type>
      <name>getActiveDocument</name>
      <anchorfile>classMultiDocumentPanel.html</anchorfile>
      <anchor>adedd251ed9639c354ffea9b122447ef3</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setActiveDocument</name>
      <anchorfile>classMultiDocumentPanel.html</anchorfile>
      <anchor>a561e26068d11c7f2fedf147bec78ff53</anchor>
      <arglist>(Component *component)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>activeDocumentChanged</name>
      <anchorfile>classMultiDocumentPanel.html</anchorfile>
      <anchor>a3359aed8eb9e6711da33f0fb032aa1b5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaximumNumDocuments</name>
      <anchorfile>classMultiDocumentPanel.html</anchorfile>
      <anchor>a60485a3e9af742aed9dcd8b93879459e</anchor>
      <arglist>(int maximumNumDocuments)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>useFullscreenWhenOneDocument</name>
      <anchorfile>classMultiDocumentPanel.html</anchorfile>
      <anchor>aae57bc01df58759446d1ad745b1dd0ee</anchor>
      <arglist>(bool shouldUseTabs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isFullscreenWhenOneDocument</name>
      <anchorfile>classMultiDocumentPanel.html</anchorfile>
      <anchor>ac5b81c1b77e348e97fc9882e9975bf45</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLayoutMode</name>
      <anchorfile>classMultiDocumentPanel.html</anchorfile>
      <anchor>aacc7913164527f666fbc8e9f06d279fb</anchor>
      <arglist>(LayoutMode newLayoutMode)</arglist>
    </member>
    <member kind="function">
      <type>LayoutMode</type>
      <name>getLayoutMode</name>
      <anchorfile>classMultiDocumentPanel.html</anchorfile>
      <anchor>a29c294685d373be1e52b9cdd7ce2c399</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBackgroundColour</name>
      <anchorfile>classMultiDocumentPanel.html</anchorfile>
      <anchor>a94e299806f70317a23f4669721dd6228</anchor>
      <arglist>(Colour newBackgroundColour)</arglist>
    </member>
    <member kind="function">
      <type>Colour</type>
      <name>getBackgroundColour</name>
      <anchorfile>classMultiDocumentPanel.html</anchorfile>
      <anchor>a011d64202eae4882b09358ce307cf44c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>TabbedComponent *</type>
      <name>getCurrentTabbedComponent</name>
      <anchorfile>classMultiDocumentPanel.html</anchorfile>
      <anchor>ac86ed410df52f651903bf2641862bbe2</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>tryToCloseDocument</name>
      <anchorfile>classMultiDocumentPanel.html</anchorfile>
      <anchor>abc45cc74d6985f3df5afb907d731d4a7</anchor>
      <arglist>(Component *component)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual MultiDocumentPanelWindow *</type>
      <name>createNewDocumentWindow</name>
      <anchorfile>classMultiDocumentPanel.html</anchorfile>
      <anchor>a4044246d06a86634830051c1ae93ea14</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>paint</name>
      <anchorfile>classMultiDocumentPanel.html</anchorfile>
      <anchor>ae8a4a7af9e8123d15aca85ceb308cf35</anchor>
      <arglist>(Graphics &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resized</name>
      <anchorfile>classMultiDocumentPanel.html</anchorfile>
      <anchor>aecbba36fe92fb871b3582d12cce807b7</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>componentNameChanged</name>
      <anchorfile>classMultiDocumentPanel.html</anchorfile>
      <anchor>ada04c9d5ad89f28200ccb7bdda875a7d</anchor>
      <arglist>(Component &amp;) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MultiDocumentPanelWindow</name>
    <filename>classMultiDocumentPanelWindow.html</filename>
    <base>DocumentWindow</base>
    <member kind="function">
      <type></type>
      <name>MultiDocumentPanelWindow</name>
      <anchorfile>classMultiDocumentPanelWindow.html</anchorfile>
      <anchor>a99944ba7f4788218389442315497d3e8</anchor>
      <arglist>(Colour backgroundColour)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~MultiDocumentPanelWindow</name>
      <anchorfile>classMultiDocumentPanelWindow.html</anchorfile>
      <anchor>aa0f4c2871d1877ec636e6def20226e1a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>maximiseButtonPressed</name>
      <anchorfile>classMultiDocumentPanelWindow.html</anchorfile>
      <anchor>a5b9b8158c62faee09a53b06c66b94258</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>closeButtonPressed</name>
      <anchorfile>classMultiDocumentPanelWindow.html</anchorfile>
      <anchor>a265b9d619f2c3e07faecde566b6df24a</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>activeWindowStatusChanged</name>
      <anchorfile>classMultiDocumentPanelWindow.html</anchorfile>
      <anchor>ab0b51d9512cc41c6bc746c833e80b5ee</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>broughtToFront</name>
      <anchorfile>classMultiDocumentPanelWindow.html</anchorfile>
      <anchor>a20c72163daf02f9f777f1272f82c6d67</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MultiTimer</name>
    <filename>classMultiTimer.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MultiTimer</name>
      <anchorfile>classMultiTimer.html</anchorfile>
      <anchor>a6b839b0a693cfaf5e42d8274450b9a9e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>timerCallback</name>
      <anchorfile>classMultiTimer.html</anchorfile>
      <anchor>a16dde865d7aaf32ba2649f498518e7a7</anchor>
      <arglist>(int timerID)=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>startTimer</name>
      <anchorfile>classMultiTimer.html</anchorfile>
      <anchor>ae1a9966181d6680a15cebb95168093b5</anchor>
      <arglist>(int timerID, int intervalInMilliseconds) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stopTimer</name>
      <anchorfile>classMultiTimer.html</anchorfile>
      <anchor>a3eec2bf5bb83c0307bdb4568c7391a2b</anchor>
      <arglist>(int timerID) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isTimerRunning</name>
      <anchorfile>classMultiTimer.html</anchorfile>
      <anchor>a7b58acb555c3fe60472049f87829daa5</anchor>
      <arglist>(int timerID) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getTimerInterval</name>
      <anchorfile>classMultiTimer.html</anchorfile>
      <anchor>ad69e9355c606daccf5fbc99085f3d114</anchor>
      <arglist>(int timerID) const noexcept</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>MultiTimer</name>
      <anchorfile>classMultiTimer.html</anchorfile>
      <anchor>a608fc823bb95f046f439424521615dc9</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>MultiTimer</name>
      <anchorfile>classMultiTimer.html</anchorfile>
      <anchor>a5020d0be93325aed21de9f06e2b28935</anchor>
      <arglist>(const MultiTimer &amp;) noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NamedPipe</name>
    <filename>classNamedPipe.html</filename>
    <member kind="function">
      <type></type>
      <name>NamedPipe</name>
      <anchorfile>classNamedPipe.html</anchorfile>
      <anchor>a81946cbcb2a7d0c979f5f7e1b565b4ab</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~NamedPipe</name>
      <anchorfile>classNamedPipe.html</anchorfile>
      <anchor>a24ff787de22c7abe0ad7b556296d3b0b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>openExisting</name>
      <anchorfile>classNamedPipe.html</anchorfile>
      <anchor>a7fb5d29a7fcb0ab8dada0948c5d3e536</anchor>
      <arglist>(const String &amp;pipeName)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>createNewPipe</name>
      <anchorfile>classNamedPipe.html</anchorfile>
      <anchor>ac4aaea9d143f85b013fc29357d020135</anchor>
      <arglist>(const String &amp;pipeName, bool mustNotExist=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>close</name>
      <anchorfile>classNamedPipe.html</anchorfile>
      <anchor>ae6b7c1b0efe76f82ca1eb90383391cdb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isOpen</name>
      <anchorfile>classNamedPipe.html</anchorfile>
      <anchor>aa9226f1d0b9da26f505b9bce3a4967b8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>getName</name>
      <anchorfile>classNamedPipe.html</anchorfile>
      <anchor>a97cb252834169983a8fa1eb950a82fb8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>read</name>
      <anchorfile>classNamedPipe.html</anchorfile>
      <anchor>a5223fb46357279d84e2f97d43291b3a8</anchor>
      <arglist>(void *destBuffer, int maxBytesToRead, int timeOutMilliseconds)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>write</name>
      <anchorfile>classNamedPipe.html</anchorfile>
      <anchor>aa091d109e18d5b9ae5fb0f4a03cdf743</anchor>
      <arglist>(const void *sourceBuffer, int numBytesToWrite, int timeOutMilliseconds)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NamedValueSet</name>
    <filename>classNamedValueSet.html</filename>
    <class kind="struct">NamedValueSet::NamedValue</class>
    <member kind="function">
      <type></type>
      <name>NamedValueSet</name>
      <anchorfile>classNamedValueSet.html</anchorfile>
      <anchor>a7c23ef1e536e90700bde50433c839597</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NamedValueSet</name>
      <anchorfile>classNamedValueSet.html</anchorfile>
      <anchor>a024664ea8e341e70c42a0ceb83412118</anchor>
      <arglist>(const NamedValueSet &amp;)</arglist>
    </member>
    <member kind="function">
      <type>NamedValueSet &amp;</type>
      <name>operator=</name>
      <anchorfile>classNamedValueSet.html</anchorfile>
      <anchor>ac67097e8f4771da57762d14d94f9ffc4</anchor>
      <arglist>(const NamedValueSet &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NamedValueSet</name>
      <anchorfile>classNamedValueSet.html</anchorfile>
      <anchor>a17fce482229e0d47ceae64b7d624cae0</anchor>
      <arglist>(NamedValueSet &amp;&amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>NamedValueSet &amp;</type>
      <name>operator=</name>
      <anchorfile>classNamedValueSet.html</anchorfile>
      <anchor>a3c3fcfb98eea4e7bc8bb2270f21ca8ff</anchor>
      <arglist>(NamedValueSet &amp;&amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~NamedValueSet</name>
      <anchorfile>classNamedValueSet.html</anchorfile>
      <anchor>a5e23aed95819fe55a2e441fb66b31faa</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classNamedValueSet.html</anchorfile>
      <anchor>a995d7fe51e0409214d5825e96dcb0398</anchor>
      <arglist>(const NamedValueSet &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classNamedValueSet.html</anchorfile>
      <anchor>a48b7b26e70e64dbbff9a893affc5978e</anchor>
      <arglist>(const NamedValueSet &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>NamedValueSet::NamedValue *</type>
      <name>begin</name>
      <anchorfile>classNamedValueSet.html</anchorfile>
      <anchor>a3733c54d5ca6cde1f607d1b2af758f22</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>NamedValueSet::NamedValue *</type>
      <name>end</name>
      <anchorfile>classNamedValueSet.html</anchorfile>
      <anchor>a7584bb686f393f0730486a712591fdfe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>classNamedValueSet.html</anchorfile>
      <anchor>ad9f9066eed12be3d9e569c5181d05edd</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEmpty</name>
      <anchorfile>classNamedValueSet.html</anchorfile>
      <anchor>ac2108069244f60c3e697ba6dff23727a</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const var &amp;</type>
      <name>operator[]</name>
      <anchorfile>classNamedValueSet.html</anchorfile>
      <anchor>a20142d8885e26588e382882796ae78db</anchor>
      <arglist>(const Identifier &amp;name) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>var</type>
      <name>getWithDefault</name>
      <anchorfile>classNamedValueSet.html</anchorfile>
      <anchor>a76fd6393abbc48a3745987047945fa9f</anchor>
      <arglist>(const Identifier &amp;name, const var &amp;defaultReturnValue) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>set</name>
      <anchorfile>classNamedValueSet.html</anchorfile>
      <anchor>a84ff59604170b019e51bb1342cc87374</anchor>
      <arglist>(const Identifier &amp;name, const var &amp;newValue)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>set</name>
      <anchorfile>classNamedValueSet.html</anchorfile>
      <anchor>abe83d45e367c9eb816c6a107dc88beae</anchor>
      <arglist>(const Identifier &amp;name, var &amp;&amp;newValue)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>classNamedValueSet.html</anchorfile>
      <anchor>a9e4f0d1f9f7af2325394a762c23aafc8</anchor>
      <arglist>(const Identifier &amp;name) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>remove</name>
      <anchorfile>classNamedValueSet.html</anchorfile>
      <anchor>a62fbe8b7c2d1b2b86d4c4c0c9f733a3d</anchor>
      <arglist>(const Identifier &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>Identifier</type>
      <name>getName</name>
      <anchorfile>classNamedValueSet.html</anchorfile>
      <anchor>abb31443a08b579b12301d00a524e1fed</anchor>
      <arglist>(int index) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>var *</type>
      <name>getVarPointer</name>
      <anchorfile>classNamedValueSet.html</anchorfile>
      <anchor>a0f306cf06a0b33496e4c02ee823b9a12</anchor>
      <arglist>(const Identifier &amp;name) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const var &amp;</type>
      <name>getValueAt</name>
      <anchorfile>classNamedValueSet.html</anchorfile>
      <anchor>a10efc3280ef1c960c43ec4c1ec542f8b</anchor>
      <arglist>(int index) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>var *</type>
      <name>getVarPointerAt</name>
      <anchorfile>classNamedValueSet.html</anchorfile>
      <anchor>a79b9adf2afabce84498d99cddb367f02</anchor>
      <arglist>(int index) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>indexOf</name>
      <anchorfile>classNamedValueSet.html</anchorfile>
      <anchor>a88f62b3476a4fd77c9bfa4dba795ca71</anchor>
      <arglist>(const Identifier &amp;name) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classNamedValueSet.html</anchorfile>
      <anchor>ae879588edbc9473e4185f03b4882f0c5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFromXmlAttributes</name>
      <anchorfile>classNamedValueSet.html</anchorfile>
      <anchor>a24d5f91b609b274f1c6f9ac2e2dba2ff</anchor>
      <arglist>(const XmlElement &amp;xml)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyToXmlAttributes</name>
      <anchorfile>classNamedValueSet.html</anchorfile>
      <anchor>a6770b9b01d38beb5a0a5888a59558239</anchor>
      <arglist>(XmlElement &amp;xml) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>NamedValueSet::NamedValue</name>
    <filename>structNamedValueSet_1_1NamedValue.html</filename>
    <member kind="function">
      <type></type>
      <name>NamedValue</name>
      <anchorfile>structNamedValueSet_1_1NamedValue.html</anchorfile>
      <anchor>af65db556e0b86b20d550cfb5c6d6f288</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NamedValue</name>
      <anchorfile>structNamedValueSet_1_1NamedValue.html</anchorfile>
      <anchor>acff7960f6cdc202cc4407911b648b58b</anchor>
      <arglist>(const Identifier &amp;n, const var &amp;v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NamedValue</name>
      <anchorfile>structNamedValueSet_1_1NamedValue.html</anchorfile>
      <anchor>a608c88ef979ba6ffc740afe7a04ab276</anchor>
      <arglist>(const NamedValue &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NamedValue</name>
      <anchorfile>structNamedValueSet_1_1NamedValue.html</anchorfile>
      <anchor>a5e5ba8a2827f78153fc9b72379c952bf</anchor>
      <arglist>(NamedValue &amp;&amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NamedValue</name>
      <anchorfile>structNamedValueSet_1_1NamedValue.html</anchorfile>
      <anchor>ab3d03c063535cd3ddbc2524eb67f0a56</anchor>
      <arglist>(Identifier &amp;&amp;n, var &amp;&amp;v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>NamedValue &amp;</type>
      <name>operator=</name>
      <anchorfile>structNamedValueSet_1_1NamedValue.html</anchorfile>
      <anchor>a8f3740e10469b20d1dea60727fcd733b</anchor>
      <arglist>(NamedValue &amp;&amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>structNamedValueSet_1_1NamedValue.html</anchorfile>
      <anchor>a0c681b6268a780ad81bb0f3880f8a2da</anchor>
      <arglist>(const NamedValue &amp;other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>structNamedValueSet_1_1NamedValue.html</anchorfile>
      <anchor>af9d64f41429adb949d27d5c23bd19921</anchor>
      <arglist>(const NamedValue &amp;other) const noexcept</arglist>
    </member>
    <member kind="variable">
      <type>Identifier</type>
      <name>name</name>
      <anchorfile>structNamedValueSet_1_1NamedValue.html</anchorfile>
      <anchor>aa7af94ddccc8b5c60123ac55b02ea7c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>var</type>
      <name>value</name>
      <anchorfile>structNamedValueSet_1_1NamedValue.html</anchorfile>
      <anchor>af0fb4fb7cedc55a1918941733b84870f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NativeImageType</name>
    <filename>classNativeImageType.html</filename>
    <base>ImageType</base>
    <member kind="function">
      <type></type>
      <name>NativeImageType</name>
      <anchorfile>classNativeImageType.html</anchorfile>
      <anchor>a55b2d128303a0a60a8a44490c64b87b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~NativeImageType</name>
      <anchorfile>classNativeImageType.html</anchorfile>
      <anchor>a4693a40068bb9c18e2c76b9ee5d43d63</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ImagePixelData::Ptr</type>
      <name>create</name>
      <anchorfile>classNativeImageType.html</anchorfile>
      <anchor>a0db88d3f88f06afb53e25455d539d99c</anchor>
      <arglist>(Image::PixelFormat, int width, int height, bool clearImage) const override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getTypeID</name>
      <anchorfile>classNativeImageType.html</anchorfile>
      <anchor>acedd25bbfc7d81dd8e5821e53215f0da</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NativeMessageBox</name>
    <filename>classNativeMessageBox.html</filename>
    <member kind="function" static="yes">
      <type>static void JUCE_CALLTYPE</type>
      <name>showMessageBox</name>
      <anchorfile>classNativeMessageBox.html</anchorfile>
      <anchor>a4f5c4b3d945b5f9f7a034fcd4a05b1b3</anchor>
      <arglist>(AlertWindow::AlertIconType iconType, const String &amp;title, const String &amp;message, Component *associatedComponent=nullptr)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void JUCE_CALLTYPE</type>
      <name>showMessageBoxAsync</name>
      <anchorfile>classNativeMessageBox.html</anchorfile>
      <anchor>aafc1ea7cf5c78b7512b4f8747a635513</anchor>
      <arglist>(AlertWindow::AlertIconType iconType, const String &amp;title, const String &amp;message, Component *associatedComponent=nullptr, ModalComponentManager::Callback *callback=nullptr)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool JUCE_CALLTYPE</type>
      <name>showOkCancelBox</name>
      <anchorfile>classNativeMessageBox.html</anchorfile>
      <anchor>a89552c16933a6f9620cbfc20c9b14376</anchor>
      <arglist>(AlertWindow::AlertIconType iconType, const String &amp;title, const String &amp;message, Component *associatedComponent=nullptr, ModalComponentManager::Callback *callback=nullptr)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int JUCE_CALLTYPE</type>
      <name>showYesNoCancelBox</name>
      <anchorfile>classNativeMessageBox.html</anchorfile>
      <anchor>a1e7c585bcb1a775e40ab014267ebc200</anchor>
      <arglist>(AlertWindow::AlertIconType iconType, const String &amp;title, const String &amp;message, Component *associatedComponent=nullptr, ModalComponentManager::Callback *callback=nullptr)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NewLine</name>
    <filename>classNewLine.html</filename>
    <member kind="function">
      <type></type>
      <name>operator String</name>
      <anchorfile>classNewLine.html</anchorfile>
      <anchor>ad55b998afedeb2eb8b99335e8c43d94f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator StringRef</name>
      <anchorfile>classNewLine.html</anchorfile>
      <anchor>a4300bb1bb6b8b73b572f7adf11c75e85</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const char *</type>
      <name>getDefault</name>
      <anchorfile>classNewLine.html</anchorfile>
      <anchor>ab07d21b3c535b0bf3897893cc87b765e</anchor>
      <arglist>() noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NormalisableRange</name>
    <filename>classNormalisableRange.html</filename>
    <templarg>ValueType</templarg>
    <member kind="function">
      <type></type>
      <name>NormalisableRange</name>
      <anchorfile>classNormalisableRange.html</anchorfile>
      <anchor>a2b8ef4f3d0035c7b3fa73ed1318d8e81</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NormalisableRange</name>
      <anchorfile>classNormalisableRange.html</anchorfile>
      <anchor>a2179bf0ed604accd11f0407a5e521a38</anchor>
      <arglist>(const NormalisableRange &amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>NormalisableRange &amp;</type>
      <name>operator=</name>
      <anchorfile>classNormalisableRange.html</anchorfile>
      <anchor>a68053155bda85725fce2c07308c409ca</anchor>
      <arglist>(const NormalisableRange &amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NormalisableRange</name>
      <anchorfile>classNormalisableRange.html</anchorfile>
      <anchor>a2a2ccb633c03527ae499e21c00f01e84</anchor>
      <arglist>(ValueType rangeStart, ValueType rangeEnd, ValueType intervalValue, ValueType skewFactor, bool useSymmetricSkew=false) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NormalisableRange</name>
      <anchorfile>classNormalisableRange.html</anchorfile>
      <anchor>a7676fe8e682102d9af2d0a3c0ab8b1f9</anchor>
      <arglist>(ValueType rangeStart, ValueType rangeEnd, ValueType intervalValue) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NormalisableRange</name>
      <anchorfile>classNormalisableRange.html</anchorfile>
      <anchor>af50c7a38edc0ae19e60ee068808194fa</anchor>
      <arglist>(ValueType rangeStart, ValueType rangeEnd) noexcept</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>convertTo0to1</name>
      <anchorfile>classNormalisableRange.html</anchorfile>
      <anchor>a9ec8267d9cdc54f0cf29e1af03df1c3a</anchor>
      <arglist>(ValueType v) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>convertFrom0to1</name>
      <anchorfile>classNormalisableRange.html</anchorfile>
      <anchor>a1739b099b2ff086b3bd58e17f51fb3cd</anchor>
      <arglist>(ValueType proportion) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>snapToLegalValue</name>
      <anchorfile>classNormalisableRange.html</anchorfile>
      <anchor>ad4f9fa890e5439f951e97a53abb71add</anchor>
      <arglist>(ValueType v) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Range&lt; ValueType &gt;</type>
      <name>getRange</name>
      <anchorfile>classNormalisableRange.html</anchorfile>
      <anchor>aa043558ff4992e5b455effbf5d614eef</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="variable">
      <type>ValueType</type>
      <name>start</name>
      <anchorfile>classNormalisableRange.html</anchorfile>
      <anchor>adc186176e94c6f80eb2c626384054fe3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ValueType</type>
      <name>end</name>
      <anchorfile>classNormalisableRange.html</anchorfile>
      <anchor>aa8aba814e8121157ba79ccbf03152b82</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ValueType</type>
      <name>interval</name>
      <anchorfile>classNormalisableRange.html</anchorfile>
      <anchor>a7717c3a5ebfe5ac44ab7d55ad63e5354</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ValueType</type>
      <name>skew</name>
      <anchorfile>classNormalisableRange.html</anchorfile>
      <anchor>a740639acf2157636fce16138a51bbfa3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>symmetricSkew</name>
      <anchorfile>classNormalisableRange.html</anchorfile>
      <anchor>a3a588ad45b07463d74aca98d0589845d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NSViewComponent</name>
    <filename>classNSViewComponent.html</filename>
    <base>Component</base>
  </compound>
  <compound kind="class">
    <name>OggVorbisAudioFormat</name>
    <filename>classOggVorbisAudioFormat.html</filename>
    <base>AudioFormat</base>
    <member kind="function">
      <type></type>
      <name>OggVorbisAudioFormat</name>
      <anchorfile>classOggVorbisAudioFormat.html</anchorfile>
      <anchor>a069365393c5a09e13e0042f4660d8cd1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~OggVorbisAudioFormat</name>
      <anchorfile>classOggVorbisAudioFormat.html</anchorfile>
      <anchor>a0aa819bec4c3a8187581859a2d104f2e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Array&lt; int &gt;</type>
      <name>getPossibleSampleRates</name>
      <anchorfile>classOggVorbisAudioFormat.html</anchorfile>
      <anchor>a6ff7c2f5e15cee7f4b7686c16ec9d7a8</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>Array&lt; int &gt;</type>
      <name>getPossibleBitDepths</name>
      <anchorfile>classOggVorbisAudioFormat.html</anchorfile>
      <anchor>a06a6c87ebcc0dc085d7dbc0fc4e9289f</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>canDoStereo</name>
      <anchorfile>classOggVorbisAudioFormat.html</anchorfile>
      <anchor>adc1c62ab5e55fa45db33e97cb5a5cd1f</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>canDoMono</name>
      <anchorfile>classOggVorbisAudioFormat.html</anchorfile>
      <anchor>a1231636f3a5c9e11ae5da1671d643d6c</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isCompressed</name>
      <anchorfile>classOggVorbisAudioFormat.html</anchorfile>
      <anchor>a042147a33d8a6c828ef255cda6eca698</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>StringArray</type>
      <name>getQualityOptions</name>
      <anchorfile>classOggVorbisAudioFormat.html</anchorfile>
      <anchor>a967292e7174956c30bece6984e380534</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>estimateOggFileQuality</name>
      <anchorfile>classOggVorbisAudioFormat.html</anchorfile>
      <anchor>aa9f91556cc01ecd9583c85d398d43ccb</anchor>
      <arglist>(const File &amp;source)</arglist>
    </member>
    <member kind="function">
      <type>AudioFormatReader *</type>
      <name>createReaderFor</name>
      <anchorfile>classOggVorbisAudioFormat.html</anchorfile>
      <anchor>a4970ea2fec943ae4bd1ab640d9581f51</anchor>
      <arglist>(InputStream *sourceStream, bool deleteStreamIfOpeningFails) override</arglist>
    </member>
    <member kind="function">
      <type>AudioFormatWriter *</type>
      <name>createWriterFor</name>
      <anchorfile>classOggVorbisAudioFormat.html</anchorfile>
      <anchor>a3030067397c02132bbb28d8b2614f669</anchor>
      <arglist>(OutputStream *streamToWriteTo, double sampleRateToUse, unsigned int numberOfChannels, int bitsPerSample, const StringPairArray &amp;metadataValues, int qualityOptionIndex) override</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char *const</type>
      <name>encoderName</name>
      <anchorfile>classOggVorbisAudioFormat.html</anchorfile>
      <anchor>a1c97a40ce37de0766efdaec9b1d4fcb5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char *const</type>
      <name>id3title</name>
      <anchorfile>classOggVorbisAudioFormat.html</anchorfile>
      <anchor>a531f4523711824414005c291cb9c697b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char *const</type>
      <name>id3artist</name>
      <anchorfile>classOggVorbisAudioFormat.html</anchorfile>
      <anchor>ac88645d7fd07e48cd71ee8ad7b559e95</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char *const</type>
      <name>id3album</name>
      <anchorfile>classOggVorbisAudioFormat.html</anchorfile>
      <anchor>ab00862fe52a02021c8f34df09002a7e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char *const</type>
      <name>id3comment</name>
      <anchorfile>classOggVorbisAudioFormat.html</anchorfile>
      <anchor>a9bcec7c7659b16b1f2852a10e4a93b4c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char *const</type>
      <name>id3date</name>
      <anchorfile>classOggVorbisAudioFormat.html</anchorfile>
      <anchor>a5c0daf3110deb3dad23ac1666b0b542d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char *const</type>
      <name>id3genre</name>
      <anchorfile>classOggVorbisAudioFormat.html</anchorfile>
      <anchor>a847fe9bee42986db987526a470c9656a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char *const</type>
      <name>id3trackNumber</name>
      <anchorfile>classOggVorbisAudioFormat.html</anchorfile>
      <anchor>a8e62f3cf046edc5ac4d859fd27f30c51</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OnlineUnlockForm</name>
    <filename>classOnlineUnlockForm.html</filename>
    <base>Component</base>
    <member kind="function">
      <type></type>
      <name>OnlineUnlockForm</name>
      <anchorfile>classOnlineUnlockForm.html</anchorfile>
      <anchor>a1bb1f227aa12ce36609d81956a318f3b</anchor>
      <arglist>(OnlineUnlockStatus &amp;, const String &amp;userInstructions, bool hasCancelButton=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~OnlineUnlockForm</name>
      <anchorfile>classOnlineUnlockForm.html</anchorfile>
      <anchor>a86abc5c8e6f980008f7865f94978e5d1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>dismiss</name>
      <anchorfile>classOnlineUnlockForm.html</anchorfile>
      <anchor>a074106db99230c8dacafff44ff57eb35</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>paint</name>
      <anchorfile>classOnlineUnlockForm.html</anchorfile>
      <anchor>a869bf49a116d5ed0d704a30e2b35fe44</anchor>
      <arglist>(Graphics &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resized</name>
      <anchorfile>classOnlineUnlockForm.html</anchorfile>
      <anchor>a9493276aee2d9b7c6efc5326e472f219</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lookAndFeelChanged</name>
      <anchorfile>classOnlineUnlockForm.html</anchorfile>
      <anchor>a923d3ea52580d9f0df39d92b10173dfa</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="variable">
      <type>Label</type>
      <name>message</name>
      <anchorfile>classOnlineUnlockForm.html</anchorfile>
      <anchor>a0e618e93104800988c1fab673b4836d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TextEditor</type>
      <name>emailBox</name>
      <anchorfile>classOnlineUnlockForm.html</anchorfile>
      <anchor>a280e428e2560942b321d724a85b8f6ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TextEditor</type>
      <name>passwordBox</name>
      <anchorfile>classOnlineUnlockForm.html</anchorfile>
      <anchor>acc068c52c2ce6302f98b107bad3de684</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TextButton</type>
      <name>registerButton</name>
      <anchorfile>classOnlineUnlockForm.html</anchorfile>
      <anchor>a2a7d3a1f454b97beebf84bc5ffd23939</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TextButton</type>
      <name>cancelButton</name>
      <anchorfile>classOnlineUnlockForm.html</anchorfile>
      <anchor>ae1dc0ebc96b660f2a95b44ad23ed7ebb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OnlineUnlockStatus</name>
    <filename>classOnlineUnlockStatus.html</filename>
    <class kind="struct">OnlineUnlockStatus::MachineIDUtilities</class>
    <class kind="struct">OnlineUnlockStatus::UnlockResult</class>
    <member kind="function">
      <type></type>
      <name>OnlineUnlockStatus</name>
      <anchorfile>classOnlineUnlockStatus.html</anchorfile>
      <anchor>a0e389a69ccb4f985b19a8db49082c559</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~OnlineUnlockStatus</name>
      <anchorfile>classOnlineUnlockStatus.html</anchorfile>
      <anchor>ac4ae46fdbfa5e1c673dd9cac376459fb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual String</type>
      <name>getProductID</name>
      <anchorfile>classOnlineUnlockStatus.html</anchorfile>
      <anchor>ad1bf9fd2ae972550c628ddf3f344a2bb</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>doesProductIDMatch</name>
      <anchorfile>classOnlineUnlockStatus.html</anchorfile>
      <anchor>a5f69983d5cdc509ec74f12b2441ab47c</anchor>
      <arglist>(const String &amp;returnedIDFromServer)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual RSAKey</type>
      <name>getPublicKey</name>
      <anchorfile>classOnlineUnlockStatus.html</anchorfile>
      <anchor>a679f3ce70571465fb8b842ed8e075252</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>saveState</name>
      <anchorfile>classOnlineUnlockStatus.html</anchorfile>
      <anchor>a998088faaf321e5eeb2b0b7693c3f01e</anchor>
      <arglist>(const String &amp;)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual String</type>
      <name>getState</name>
      <anchorfile>classOnlineUnlockStatus.html</anchorfile>
      <anchor>ae5674cb0770bc8a8720367d69cf74433</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual String</type>
      <name>getWebsiteName</name>
      <anchorfile>classOnlineUnlockStatus.html</anchorfile>
      <anchor>a75d83cbbaa653afab4952549f0d02178</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual URL</type>
      <name>getServerAuthenticationURL</name>
      <anchorfile>classOnlineUnlockStatus.html</anchorfile>
      <anchor>a8d92f4a78736b93dc8874aba00bf0170</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual String</type>
      <name>readReplyFromWebserver</name>
      <anchorfile>classOnlineUnlockStatus.html</anchorfile>
      <anchor>a85f7c723e3a402551df7dbcc8d45f951</anchor>
      <arglist>(const String &amp;email, const String &amp;password)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StringArray</type>
      <name>getLocalMachineIDs</name>
      <anchorfile>classOnlineUnlockStatus.html</anchorfile>
      <anchor>ad05647b5eb85f60e797d0adb3d03f862</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>var</type>
      <name>isUnlocked</name>
      <anchorfile>classOnlineUnlockStatus.html</anchorfile>
      <anchor>a3b8d9a3096714d32adf952c985f8aff3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Time</type>
      <name>getExpiryTime</name>
      <anchorfile>classOnlineUnlockStatus.html</anchorfile>
      <anchor>a82d2580fa444ac5d82f17eee41f02c57</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUserEmail</name>
      <anchorfile>classOnlineUnlockStatus.html</anchorfile>
      <anchor>a4c0b9c189f1923a017d9f3ffb726dd91</anchor>
      <arglist>(const String &amp;usernameOrEmail)</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>getUserEmail</name>
      <anchorfile>classOnlineUnlockStatus.html</anchorfile>
      <anchor>adc5600eaad4bc3fe7ad5f0bdc22b11ab</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>applyKeyFile</name>
      <anchorfile>classOnlineUnlockStatus.html</anchorfile>
      <anchor>ac0763c3b120f1b173c46dc5611112da3</anchor>
      <arglist>(String keyFileContent)</arglist>
    </member>
    <member kind="function">
      <type>UnlockResult</type>
      <name>attemptWebserverUnlock</name>
      <anchorfile>classOnlineUnlockStatus.html</anchorfile>
      <anchor>ae40afa554781a7649645c75c664bba47</anchor>
      <arglist>(const String &amp;email, const String &amp;password)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>load</name>
      <anchorfile>classOnlineUnlockStatus.html</anchorfile>
      <anchor>a6873d6e37f4b2a85555fb6858fa61f3b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>save</name>
      <anchorfile>classOnlineUnlockStatus.html</anchorfile>
      <anchor>affe1d380e45dadfb6d83f8fb05aad2ac</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>OnlineUnlockStatus::MachineIDUtilities</name>
    <filename>structOnlineUnlockStatus_1_1MachineIDUtilities.html</filename>
    <member kind="function" static="yes">
      <type>static char</type>
      <name>getPlatformPrefix</name>
      <anchorfile>structOnlineUnlockStatus_1_1MachineIDUtilities.html</anchorfile>
      <anchor>acbbdd9fe8542653415ec5c107c4d6755</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static String</type>
      <name>getEncodedIDString</name>
      <anchorfile>structOnlineUnlockStatus_1_1MachineIDUtilities.html</anchorfile>
      <anchor>a8af4039fa9afc8404d5fc00cd84fabe5</anchor>
      <arglist>(const String &amp;inputString)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>addFileIDToList</name>
      <anchorfile>structOnlineUnlockStatus_1_1MachineIDUtilities.html</anchorfile>
      <anchor>a37f87c11da7200922070453c652387b3</anchor>
      <arglist>(StringArray &amp;result, const File &amp;file)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>addMACAddressesToList</name>
      <anchorfile>structOnlineUnlockStatus_1_1MachineIDUtilities.html</anchorfile>
      <anchor>a14fd786defe0a6ee879a9cbde3a6cdd1</anchor>
      <arglist>(StringArray &amp;result)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StringArray</type>
      <name>getLocalMachineIDs</name>
      <anchorfile>structOnlineUnlockStatus_1_1MachineIDUtilities.html</anchorfile>
      <anchor>afdd5483bba5e18fbf58a5acb61710eb6</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>OnlineUnlockStatus::UnlockResult</name>
    <filename>structOnlineUnlockStatus_1_1UnlockResult.html</filename>
    <member kind="variable">
      <type>String</type>
      <name>errorMessage</name>
      <anchorfile>structOnlineUnlockStatus_1_1UnlockResult.html</anchorfile>
      <anchor>ab5602a0057efc50f1d5b0c5ba935d9a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>String</type>
      <name>informativeMessage</name>
      <anchorfile>structOnlineUnlockStatus_1_1UnlockResult.html</anchorfile>
      <anchor>a8accead62bf1964370bffd579ecc4f40</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>String</type>
      <name>urlToLaunch</name>
      <anchorfile>structOnlineUnlockStatus_1_1UnlockResult.html</anchorfile>
      <anchor>ad402e350afcbd8e2bb4e2e18339b4656</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>succeeded</name>
      <anchorfile>structOnlineUnlockStatus_1_1UnlockResult.html</anchorfile>
      <anchor>a05958e80831364da7c4a2bead72fad6a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenGLAppComponent</name>
    <filename>classOpenGLAppComponent.html</filename>
    <base>Component</base>
    <base protection="private">OpenGLRenderer</base>
    <member kind="function">
      <type></type>
      <name>OpenGLAppComponent</name>
      <anchorfile>classOpenGLAppComponent.html</anchorfile>
      <anchor>a1e25c1ec2342922eb053368ad38b808c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~OpenGLAppComponent</name>
      <anchorfile>classOpenGLAppComponent.html</anchorfile>
      <anchor>acf6d9c4475e33e291c0a1dd5ca916024</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getFrameCounter</name>
      <anchorfile>classOpenGLAppComponent.html</anchorfile>
      <anchor>a64d49b9969f324b180507339beda1902</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>shutdownOpenGL</name>
      <anchorfile>classOpenGLAppComponent.html</anchorfile>
      <anchor>a864b55311ef56455b0cc62a6afc67e7e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>initialise</name>
      <anchorfile>classOpenGLAppComponent.html</anchorfile>
      <anchor>a153ccca8ccf6852000af46e5a437bef3</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>shutdown</name>
      <anchorfile>classOpenGLAppComponent.html</anchorfile>
      <anchor>ae6d8beb75f3b1f8a8d4c9c34282cc008</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>render</name>
      <anchorfile>classOpenGLAppComponent.html</anchorfile>
      <anchor>af4e76e80318343d5302be7af6bf4cdbc</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="variable">
      <type>OpenGLContext</type>
      <name>openGLContext</name>
      <anchorfile>classOpenGLAppComponent.html</anchorfile>
      <anchor>a1237b3326c1c7c571107548d4fc20cf8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenGLContext</name>
    <filename>classOpenGLContext.html</filename>
    <member kind="enumeration">
      <type></type>
      <name>OpenGLVersion</name>
      <anchorfile>classOpenGLContext.html</anchorfile>
      <anchor>a3a6b8eeed7dbc7c7c649528252c07d02</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>defaultGLVersion</name>
      <anchorfile>classOpenGLContext.html</anchorfile>
      <anchor>a3a6b8eeed7dbc7c7c649528252c07d02abfbb3238e2943fa532a03e1473ac1baf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>openGL3_2</name>
      <anchorfile>classOpenGLContext.html</anchorfile>
      <anchor>a3a6b8eeed7dbc7c7c649528252c07d02a360335be2efbcff04897b872de9b8e45</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OpenGLContext</name>
      <anchorfile>classOpenGLContext.html</anchorfile>
      <anchor>a9be23e3642f28848a26cd00669f0b4d7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~OpenGLContext</name>
      <anchorfile>classOpenGLContext.html</anchorfile>
      <anchor>ac1f6be39c9063b52dcfa60b94a2e5407</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRenderer</name>
      <anchorfile>classOpenGLContext.html</anchorfile>
      <anchor>adbb9e06c8783a85db58f8b666675e577</anchor>
      <arglist>(OpenGLRenderer *) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>attachTo</name>
      <anchorfile>classOpenGLContext.html</anchorfile>
      <anchor>ad320cd274bba96c11dc1ea32310ad37c</anchor>
      <arglist>(Component &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>detach</name>
      <anchorfile>classOpenGLContext.html</anchorfile>
      <anchor>a7504aa8928c854732090ee9583e9f37d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isAttached</name>
      <anchorfile>classOpenGLContext.html</anchorfile>
      <anchor>ac2a9392e74c56fd8a0ee45d1a845b0f0</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Component *</type>
      <name>getTargetComponent</name>
      <anchorfile>classOpenGLContext.html</anchorfile>
      <anchor>a0079c44b081f30fb0ace2396a95df343</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPixelFormat</name>
      <anchorfile>classOpenGLContext.html</anchorfile>
      <anchor>aeb49920c5ee4e4694fa4cbd1700b2acb</anchor>
      <arglist>(const OpenGLPixelFormat &amp;preferredPixelFormat) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNativeSharedContext</name>
      <anchorfile>classOpenGLContext.html</anchorfile>
      <anchor>a0129ecf603a0cc3034e4809a23812e4a</anchor>
      <arglist>(void *nativeContextToShareWith) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMultisamplingEnabled</name>
      <anchorfile>classOpenGLContext.html</anchorfile>
      <anchor>ab3e6fd6e0d9104a249f029833f6b4172</anchor>
      <arglist>(bool) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>areShadersAvailable</name>
      <anchorfile>classOpenGLContext.html</anchorfile>
      <anchor>ab0bb8babf0f652ea2b7b10f0fec9f6e7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOpenGLVersionRequired</name>
      <anchorfile>classOpenGLContext.html</anchorfile>
      <anchor>a45a3bcd0cfcf94796ed43113a1866315</anchor>
      <arglist>(OpenGLVersion) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setComponentPaintingEnabled</name>
      <anchorfile>classOpenGLContext.html</anchorfile>
      <anchor>aaa4cf6bbdb662b106cd44c203b8abb1a</anchor>
      <arglist>(bool shouldPaintComponent) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setContinuousRepainting</name>
      <anchorfile>classOpenGLContext.html</anchorfile>
      <anchor>a7c305575ef3337ae64940db3c00abdc6</anchor>
      <arglist>(bool shouldContinuouslyRepaint) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>triggerRepaint</name>
      <anchorfile>classOpenGLContext.html</anchorfile>
      <anchor>acc0fc11c02ebbe4af1cc234eb5d8b84a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ReferenceCountedObject *</type>
      <name>getAssociatedObject</name>
      <anchorfile>classOpenGLContext.html</anchorfile>
      <anchor>a0ffa091388991ffc98bbb5800fd27c6f</anchor>
      <arglist>(const char *name) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAssociatedObject</name>
      <anchorfile>classOpenGLContext.html</anchorfile>
      <anchor>a51ee6e2d70c172820a4fb26722497892</anchor>
      <arglist>(const char *name, ReferenceCountedObject *newObject)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>makeActive</name>
      <anchorfile>classOpenGLContext.html</anchorfile>
      <anchor>a318c8cc5821b9b2b2a9f726c623385f8</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isActive</name>
      <anchorfile>classOpenGLContext.html</anchorfile>
      <anchor>a5c5bce957be244229d9293d3303bff40</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swapBuffers</name>
      <anchorfile>classOpenGLContext.html</anchorfile>
      <anchor>a909377fc5880a61d28db1909b8d09e03</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setSwapInterval</name>
      <anchorfile>classOpenGLContext.html</anchorfile>
      <anchor>a046fe0f0de71000ee940d825d5dc57e0</anchor>
      <arglist>(int numFramesPerSwap)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getSwapInterval</name>
      <anchorfile>classOpenGLContext.html</anchorfile>
      <anchor>a232ce6c0583e57a2de19293a1d8f2b53</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getRenderingScale</name>
      <anchorfile>classOpenGLContext.html</anchorfile>
      <anchor>a5ae7fe1aa47448f75ef67f89cd9db798</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getFrameBufferID</name>
      <anchorfile>classOpenGLContext.html</anchorfile>
      <anchor>a39b86efe11ffe091002d530d302e14bc</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>getRawContext</name>
      <anchorfile>classOpenGLContext.html</anchorfile>
      <anchor>a9b9d12cc339f3f12124f4a3e54d5502c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyTexture</name>
      <anchorfile>classOpenGLContext.html</anchorfile>
      <anchor>ac0bf3594cb79029af5ee5eb66a14f152</anchor>
      <arglist>(const Rectangle&lt; int &gt; &amp;targetClipArea, const Rectangle&lt; int &gt; &amp;anchorPosAndTextureSize, int contextWidth, int contextHeight, bool textureOriginIsBottomLeft)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setImageCacheSize</name>
      <anchorfile>classOpenGLContext.html</anchorfile>
      <anchor>a1eb85ffda148dac618e28fae654aab0a</anchor>
      <arglist>(size_t cacheSizeBytes) noexcept</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>getImageCacheSize</name>
      <anchorfile>classOpenGLContext.html</anchorfile>
      <anchor>a370e786a96eac9fa8486eff23ab2da9c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static OpenGLContext *</type>
      <name>getContextAttachedTo</name>
      <anchorfile>classOpenGLContext.html</anchorfile>
      <anchor>a0f7e55a23fc083656c0f35f4ec95e1d7</anchor>
      <arglist>(Component &amp;component) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>deactivateCurrentContext</name>
      <anchorfile>classOpenGLContext.html</anchorfile>
      <anchor>a5a3ece9be728d97e0343ae17a71f6562</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static OpenGLContext *</type>
      <name>getCurrentContext</name>
      <anchorfile>classOpenGLContext.html</anchorfile>
      <anchor>af7e84e07e6f1228a865915ca21500f7a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>OpenGLExtensionFunctions</type>
      <name>extensions</name>
      <anchorfile>classOpenGLContext.html</anchorfile>
      <anchor>a3e204724fd78bbc272023525226caad7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenGLFrameBuffer</name>
    <filename>classOpenGLFrameBuffer.html</filename>
    <member kind="function">
      <type></type>
      <name>OpenGLFrameBuffer</name>
      <anchorfile>classOpenGLFrameBuffer.html</anchorfile>
      <anchor>af5f4e38ebde519cfc622c2974a178fa6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~OpenGLFrameBuffer</name>
      <anchorfile>classOpenGLFrameBuffer.html</anchorfile>
      <anchor>a0353b27f81bcbfce7c082edb92113c87</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>initialise</name>
      <anchorfile>classOpenGLFrameBuffer.html</anchorfile>
      <anchor>a9c82878ad5e372520f54850ad003e70b</anchor>
      <arglist>(OpenGLContext &amp;context, int width, int height)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>initialise</name>
      <anchorfile>classOpenGLFrameBuffer.html</anchorfile>
      <anchor>a3a86ab42869faddff776592237f8b75d</anchor>
      <arglist>(OpenGLContext &amp;context, const Image &amp;content)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>initialise</name>
      <anchorfile>classOpenGLFrameBuffer.html</anchorfile>
      <anchor>aeb1ae1995cba538bb80eb641002284dc</anchor>
      <arglist>(OpenGLFrameBuffer &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>release</name>
      <anchorfile>classOpenGLFrameBuffer.html</anchorfile>
      <anchor>ad0fb8042d11e0f5ef21fe849a49934c3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>saveAndRelease</name>
      <anchorfile>classOpenGLFrameBuffer.html</anchorfile>
      <anchor>a305620bbc8c79ddd56eac1f86f5ad83f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>reloadSavedCopy</name>
      <anchorfile>classOpenGLFrameBuffer.html</anchorfile>
      <anchor>a576d1098a75f4920154f3a86aca674e2</anchor>
      <arglist>(OpenGLContext &amp;context)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>classOpenGLFrameBuffer.html</anchorfile>
      <anchor>a758216848531f9efba00b9de0db2b115</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getWidth</name>
      <anchorfile>classOpenGLFrameBuffer.html</anchorfile>
      <anchor>a64e6b7be4b8c0c7ef193cbc4f9048bac</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getHeight</name>
      <anchorfile>classOpenGLFrameBuffer.html</anchorfile>
      <anchor>aef7b0a24ea20cb2aeba691438774f2eb</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>getTextureID</name>
      <anchorfile>classOpenGLFrameBuffer.html</anchorfile>
      <anchor>a0922e9dba74f72e5872ac084d66899bb</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>makeCurrentRenderingTarget</name>
      <anchorfile>classOpenGLFrameBuffer.html</anchorfile>
      <anchor>a12be24f97f7201217e15c938976c1d9a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>releaseAsRenderingTarget</name>
      <anchorfile>classOpenGLFrameBuffer.html</anchorfile>
      <anchor>a355580e4de5033cc12fdfd533cced6e4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>getFrameBufferID</name>
      <anchorfile>classOpenGLFrameBuffer.html</anchorfile>
      <anchor>a380f8874e04a6f3fc058a0b606c7a34b</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classOpenGLFrameBuffer.html</anchorfile>
      <anchor>aaa13b74ecaea3436c251cce3f77c5eb3</anchor>
      <arglist>(Colour colour)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>makeCurrentAndClear</name>
      <anchorfile>classOpenGLFrameBuffer.html</anchorfile>
      <anchor>a7b3c717399bd4e547c7197566a4e8f4b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>readPixels</name>
      <anchorfile>classOpenGLFrameBuffer.html</anchorfile>
      <anchor>a9445383f62fc16bcee3ffe536fa1840a</anchor>
      <arglist>(PixelARGB *targetData, const Rectangle&lt; int &gt; &amp;sourceArea)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>writePixels</name>
      <anchorfile>classOpenGLFrameBuffer.html</anchorfile>
      <anchor>a9ed7bad2e3b33d265d9795460bb65a0f</anchor>
      <arglist>(const PixelARGB *srcData, const Rectangle&lt; int &gt; &amp;targetArea)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GLuint</type>
      <name>getCurrentFrameBufferTarget</name>
      <anchorfile>classOpenGLFrameBuffer.html</anchorfile>
      <anchor>a933a53764758096206730b908455b31e</anchor>
      <arglist>() noexcept</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>OpenGLGraphicsContextCustomShader</name>
    <filename>structOpenGLGraphicsContextCustomShader.html</filename>
    <member kind="function">
      <type></type>
      <name>OpenGLGraphicsContextCustomShader</name>
      <anchorfile>structOpenGLGraphicsContextCustomShader.html</anchorfile>
      <anchor>abe63206a00775b46b300d1583510f7d4</anchor>
      <arglist>(const String &amp;fragmentShaderCode)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~OpenGLGraphicsContextCustomShader</name>
      <anchorfile>structOpenGLGraphicsContextCustomShader.html</anchorfile>
      <anchor>a847370481b14927f5571dbb24bf4110b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>OpenGLShaderProgram *</type>
      <name>getProgram</name>
      <anchorfile>structOpenGLGraphicsContextCustomShader.html</anchorfile>
      <anchor>ac6c8c97af84ac687c9694f743c0aa39c</anchor>
      <arglist>(LowLevelGraphicsContext &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fillRect</name>
      <anchorfile>structOpenGLGraphicsContextCustomShader.html</anchorfile>
      <anchor>ad81e9f00df8396fdd5b5a5d069ba10e7</anchor>
      <arglist>(LowLevelGraphicsContext &amp;, const Rectangle&lt; int &gt; &amp;area) const </arglist>
    </member>
    <member kind="function">
      <type>Result</type>
      <name>checkCompilation</name>
      <anchorfile>structOpenGLGraphicsContextCustomShader.html</anchorfile>
      <anchor>a5de4f059f36513f3c737f61788eb4429</anchor>
      <arglist>(LowLevelGraphicsContext &amp;)</arglist>
    </member>
    <member kind="function">
      <type>const String &amp;</type>
      <name>getFragmentShaderCode</name>
      <anchorfile>structOpenGLGraphicsContextCustomShader.html</anchorfile>
      <anchor>a804fed2adafca351b7d0a23c5aaf73f0</anchor>
      <arglist>() const noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenGLHelpers</name>
    <filename>classOpenGLHelpers.html</filename>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>resetErrorState</name>
      <anchorfile>classOpenGLHelpers.html</anchorfile>
      <anchor>acad5e92d97154f3df22079b7d457b946</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isContextActive</name>
      <anchorfile>classOpenGLHelpers.html</anchorfile>
      <anchor>aeb9c20e316e3aa59046a4fe4cb2562f8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>clear</name>
      <anchorfile>classOpenGLHelpers.html</anchorfile>
      <anchor>a763c72544cbe569de9cc76899906589d</anchor>
      <arglist>(Colour colour)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>enableScissorTest</name>
      <anchorfile>classOpenGLHelpers.html</anchorfile>
      <anchor>afac7dc44d740ad66e63ca542e634ffb7</anchor>
      <arglist>(const Rectangle&lt; int &gt; &amp;clip)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isExtensionSupported</name>
      <anchorfile>classOpenGLHelpers.html</anchorfile>
      <anchor>aacd6d5297748a8691b42851f094a161c</anchor>
      <arglist>(const char *extensionName)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void *</type>
      <name>getExtensionFunction</name>
      <anchorfile>classOpenGLHelpers.html</anchorfile>
      <anchor>a6004f344c666ff693af0b3cc773379e4</anchor>
      <arglist>(const char *functionName)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static String</type>
      <name>translateVertexShaderToV3</name>
      <anchorfile>classOpenGLHelpers.html</anchorfile>
      <anchor>ac27428c0cc85d3fb8a05f51d7d37c54a</anchor>
      <arglist>(const String &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static String</type>
      <name>translateFragmentShaderToV3</name>
      <anchorfile>classOpenGLHelpers.html</anchorfile>
      <anchor>a21361ca2e48b2b290363722d5e2990a2</anchor>
      <arglist>(const String &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenGLImageType</name>
    <filename>classOpenGLImageType.html</filename>
    <base>ImageType</base>
    <member kind="function">
      <type></type>
      <name>OpenGLImageType</name>
      <anchorfile>classOpenGLImageType.html</anchorfile>
      <anchor>a9158fe7f0de1aa2e13621c364cfb026f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~OpenGLImageType</name>
      <anchorfile>classOpenGLImageType.html</anchorfile>
      <anchor>a8db6145ec52246c98d648ded1212e776</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ImagePixelData::Ptr</type>
      <name>create</name>
      <anchorfile>classOpenGLImageType.html</anchorfile>
      <anchor>af8d501291af95a3fce92fd749ff66b5c</anchor>
      <arglist>(Image::PixelFormat, int width, int height, bool shouldClearImage) const override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getTypeID</name>
      <anchorfile>classOpenGLImageType.html</anchorfile>
      <anchor>a7e9685c9c874a72abb11916f19132bac</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static OpenGLFrameBuffer *</type>
      <name>getFrameBufferFrom</name>
      <anchorfile>classOpenGLImageType.html</anchorfile>
      <anchor>aa214a2830f6d276ef8052d9101b64be4</anchor>
      <arglist>(const Image &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenGLPixelFormat</name>
    <filename>classOpenGLPixelFormat.html</filename>
    <member kind="function">
      <type></type>
      <name>OpenGLPixelFormat</name>
      <anchorfile>classOpenGLPixelFormat.html</anchorfile>
      <anchor>a84d896731b8af1e1382217504f27489f</anchor>
      <arglist>(int bitsPerRGBComponent=8, int alphaBits=8, int depthBufferBits=16, int stencilBufferBits=0) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classOpenGLPixelFormat.html</anchorfile>
      <anchor>a378a5f981c01edb64d8b6da98268f247</anchor>
      <arglist>(const OpenGLPixelFormat &amp;) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classOpenGLPixelFormat.html</anchorfile>
      <anchor>af51efcde60a4dfccb855d58421704f22</anchor>
      <arglist>(const OpenGLPixelFormat &amp;) const noexcept</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>redBits</name>
      <anchorfile>classOpenGLPixelFormat.html</anchorfile>
      <anchor>ae35395197ac66ebfed1a94d1748a20b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>greenBits</name>
      <anchorfile>classOpenGLPixelFormat.html</anchorfile>
      <anchor>a75cc537f0d7ad936b3353426735515dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>blueBits</name>
      <anchorfile>classOpenGLPixelFormat.html</anchorfile>
      <anchor>a309d74a66aa876591508d76573597a04</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>alphaBits</name>
      <anchorfile>classOpenGLPixelFormat.html</anchorfile>
      <anchor>a4d947e7a9831d9158f2a0b519d7d3497</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>depthBufferBits</name>
      <anchorfile>classOpenGLPixelFormat.html</anchorfile>
      <anchor>a9783fd7c1c9d5ade28eac2eb7c710be4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>stencilBufferBits</name>
      <anchorfile>classOpenGLPixelFormat.html</anchorfile>
      <anchor>aa94f3f667e41465ea29b6f259d9abf8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>accumulationBufferRedBits</name>
      <anchorfile>classOpenGLPixelFormat.html</anchorfile>
      <anchor>a1b07ee8f12cbb9c8b4671fa29c326490</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>accumulationBufferGreenBits</name>
      <anchorfile>classOpenGLPixelFormat.html</anchorfile>
      <anchor>a473582e91fe1a2c9c1585185ee57e03c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>accumulationBufferBlueBits</name>
      <anchorfile>classOpenGLPixelFormat.html</anchorfile>
      <anchor>abc38758c1e8b54f5002a0518c78c328d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>accumulationBufferAlphaBits</name>
      <anchorfile>classOpenGLPixelFormat.html</anchorfile>
      <anchor>aa3bfc867775483eed692c117c44c4da6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint8</type>
      <name>multisamplingLevel</name>
      <anchorfile>classOpenGLPixelFormat.html</anchorfile>
      <anchor>afa2032cde8affb7698f038ba5784365a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenGLRenderer</name>
    <filename>classOpenGLRenderer.html</filename>
    <member kind="function">
      <type></type>
      <name>OpenGLRenderer</name>
      <anchorfile>classOpenGLRenderer.html</anchorfile>
      <anchor>a90d45fb2cbf2da8cb3c08a37017e4e0c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~OpenGLRenderer</name>
      <anchorfile>classOpenGLRenderer.html</anchorfile>
      <anchor>ab6fd461baede4109c301bccf72b393e9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>newOpenGLContextCreated</name>
      <anchorfile>classOpenGLRenderer.html</anchorfile>
      <anchor>a59d6279104b47109cf2042b13ae5b61d</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>renderOpenGL</name>
      <anchorfile>classOpenGLRenderer.html</anchorfile>
      <anchor>a34077b4eaeb3207814b9e4302f724912</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>openGLContextClosing</name>
      <anchorfile>classOpenGLRenderer.html</anchorfile>
      <anchor>ad943c5ed2b9962d5de71f668d1ddf0d7</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenGLShaderProgram</name>
    <filename>classOpenGLShaderProgram.html</filename>
    <class kind="struct">OpenGLShaderProgram::Attribute</class>
    <class kind="struct">OpenGLShaderProgram::Uniform</class>
    <member kind="function">
      <type></type>
      <name>OpenGLShaderProgram</name>
      <anchorfile>classOpenGLShaderProgram.html</anchorfile>
      <anchor>a81fff5197993fb407b9d61d98e994ec6</anchor>
      <arglist>(const OpenGLContext &amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~OpenGLShaderProgram</name>
      <anchorfile>classOpenGLShaderProgram.html</anchorfile>
      <anchor>ab26f88e24d7a98c01ad9f5e437032934</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addShader</name>
      <anchorfile>classOpenGLShaderProgram.html</anchorfile>
      <anchor>acf437a99ca0a635a9ffc3020bbb6da01</anchor>
      <arglist>(const String &amp;shaderSourceCode, GLenum shaderType)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addVertexShader</name>
      <anchorfile>classOpenGLShaderProgram.html</anchorfile>
      <anchor>a96590f96c8d55535100bd5422b3c17da</anchor>
      <arglist>(const String &amp;shaderSourceCode)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addFragmentShader</name>
      <anchorfile>classOpenGLShaderProgram.html</anchorfile>
      <anchor>ad2eab2bb112c680cf4f4828908a8cda5</anchor>
      <arglist>(const String &amp;shaderSourceCode)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>link</name>
      <anchorfile>classOpenGLShaderProgram.html</anchorfile>
      <anchor>a930959c2890c748a91cb8a72aee9814a</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const String &amp;</type>
      <name>getLastError</name>
      <anchorfile>classOpenGLShaderProgram.html</anchorfile>
      <anchor>a946971889421f0d006b0618aa12efc5b</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>use</name>
      <anchorfile>classOpenGLShaderProgram.html</anchorfile>
      <anchor>a13af8ca28514261f1ca5252300d3c620</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>release</name>
      <anchorfile>classOpenGLShaderProgram.html</anchorfile>
      <anchor>a83b18c65417e9c8021025a2e00a9ccc5</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>GLint</type>
      <name>getUniformIDFromName</name>
      <anchorfile>classOpenGLShaderProgram.html</anchorfile>
      <anchor>a05ba0cda8f0f5b74d80231851de0a1c1</anchor>
      <arglist>(const char *uniformName) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUniform</name>
      <anchorfile>classOpenGLShaderProgram.html</anchorfile>
      <anchor>ad5a1c360c5e628172a788be1bf1ae0d7</anchor>
      <arglist>(const char *uniformName, GLfloat value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUniform</name>
      <anchorfile>classOpenGLShaderProgram.html</anchorfile>
      <anchor>ae126f2e1d6b92b6b2459f3a4307889f1</anchor>
      <arglist>(const char *uniformName, GLint value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUniform</name>
      <anchorfile>classOpenGLShaderProgram.html</anchorfile>
      <anchor>a30aa861d813d2a3867452f35e1f8785e</anchor>
      <arglist>(const char *uniformName, GLfloat x, GLfloat y) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUniform</name>
      <anchorfile>classOpenGLShaderProgram.html</anchorfile>
      <anchor>acd572e81714727ef5d32b274845195b4</anchor>
      <arglist>(const char *uniformName, GLfloat x, GLfloat y, GLfloat z) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUniform</name>
      <anchorfile>classOpenGLShaderProgram.html</anchorfile>
      <anchor>ae77e1530e0f6a84c205023aa9ada81f3</anchor>
      <arglist>(const char *uniformName, GLfloat x, GLfloat y, GLfloat z, GLfloat w) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUniform</name>
      <anchorfile>classOpenGLShaderProgram.html</anchorfile>
      <anchor>af9c0145992ca9f0a1fec4532cac89bfb</anchor>
      <arglist>(const char *uniformName, GLint x, GLint y, GLint z, GLint w) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUniform</name>
      <anchorfile>classOpenGLShaderProgram.html</anchorfile>
      <anchor>a714839ffcabe762ae09c984db3afef34</anchor>
      <arglist>(const char *uniformName, const GLfloat *values, GLsizei numValues) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUniformMat2</name>
      <anchorfile>classOpenGLShaderProgram.html</anchorfile>
      <anchor>ad481c6c6d05495b011e16e12e02e6a53</anchor>
      <arglist>(const char *uniformName, const GLfloat *values, GLint count, GLboolean transpose) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUniformMat3</name>
      <anchorfile>classOpenGLShaderProgram.html</anchorfile>
      <anchor>a1dfbe7986849b753a063f55fc95949a4</anchor>
      <arglist>(const char *uniformName, const GLfloat *values, GLint count, GLboolean transpose) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUniformMat4</name>
      <anchorfile>classOpenGLShaderProgram.html</anchorfile>
      <anchor>af7ee12f5573807d0dccc2d1b94dd5e81</anchor>
      <arglist>(const char *uniformName, const GLfloat *values, GLint count, GLboolean transpose) noexcept</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>getProgramID</name>
      <anchorfile>classOpenGLShaderProgram.html</anchorfile>
      <anchor>a2aa285b091a1940a0351964d5a7a6420</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>getLanguageVersion</name>
      <anchorfile>classOpenGLShaderProgram.html</anchorfile>
      <anchor>a77d9d36da09b9cc5b19439bb1215886b</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>OpenGLShaderProgram::Attribute</name>
    <filename>structOpenGLShaderProgram_1_1Attribute.html</filename>
    <member kind="function">
      <type></type>
      <name>Attribute</name>
      <anchorfile>structOpenGLShaderProgram_1_1Attribute.html</anchorfile>
      <anchor>a949a6c57085f3560a269f6980df43bfe</anchor>
      <arglist>(const OpenGLShaderProgram &amp;program, const char *attributeName)</arglist>
    </member>
    <member kind="variable">
      <type>GLuint</type>
      <name>attributeID</name>
      <anchorfile>structOpenGLShaderProgram_1_1Attribute.html</anchorfile>
      <anchor>a57907b3f4e21a42bae5d483b16b14f0f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>OpenGLShaderProgram::Uniform</name>
    <filename>structOpenGLShaderProgram_1_1Uniform.html</filename>
    <member kind="function">
      <type></type>
      <name>Uniform</name>
      <anchorfile>structOpenGLShaderProgram_1_1Uniform.html</anchorfile>
      <anchor>a1c2e8f310fb8b3a45f60d3958567d922</anchor>
      <arglist>(const OpenGLShaderProgram &amp;program, const char *uniformName)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>structOpenGLShaderProgram_1_1Uniform.html</anchorfile>
      <anchor>a551ac717f9a07475a90a946fcee4b678</anchor>
      <arglist>(GLfloat n1) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>structOpenGLShaderProgram_1_1Uniform.html</anchorfile>
      <anchor>a9e9a72c89c17177058e7cc1dac62fa4e</anchor>
      <arglist>(GLint n1) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>structOpenGLShaderProgram_1_1Uniform.html</anchorfile>
      <anchor>a792601dce4900e051a3a307f4e847c81</anchor>
      <arglist>(GLfloat n1, GLfloat n2) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>structOpenGLShaderProgram_1_1Uniform.html</anchorfile>
      <anchor>a63840b8d3c88fef18f6874aef4e2aba2</anchor>
      <arglist>(GLfloat n1, GLfloat n2, GLfloat n3) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>structOpenGLShaderProgram_1_1Uniform.html</anchorfile>
      <anchor>a826fc9e0ec6724c838364b437fa89381</anchor>
      <arglist>(GLfloat n1, GLfloat n2, GLfloat n3, float n4) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>structOpenGLShaderProgram_1_1Uniform.html</anchorfile>
      <anchor>a71fa625325e9803862e19c99ce8bd4e5</anchor>
      <arglist>(GLint n1, GLint n2, GLint n3, GLint n4) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>structOpenGLShaderProgram_1_1Uniform.html</anchorfile>
      <anchor>a67b7aef1b7fb35f9e41e7ce5d3659321</anchor>
      <arglist>(const GLfloat *values, int numValues) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMatrix2</name>
      <anchorfile>structOpenGLShaderProgram_1_1Uniform.html</anchorfile>
      <anchor>a6ee26d6692dc8a72244afdc6ca44512d</anchor>
      <arglist>(const GLfloat *values, GLint count, GLboolean transpose) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMatrix3</name>
      <anchorfile>structOpenGLShaderProgram_1_1Uniform.html</anchorfile>
      <anchor>ac5fd866b096eb5d7be7fe3be30ec7e74</anchor>
      <arglist>(const GLfloat *values, GLint count, GLboolean transpose) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMatrix4</name>
      <anchorfile>structOpenGLShaderProgram_1_1Uniform.html</anchorfile>
      <anchor>af82a0fb6af884ad2bb5fe3459a7ef409</anchor>
      <arglist>(const GLfloat *values, GLint count, GLboolean transpose) const noexcept</arglist>
    </member>
    <member kind="variable">
      <type>GLint</type>
      <name>uniformID</name>
      <anchorfile>structOpenGLShaderProgram_1_1Uniform.html</anchorfile>
      <anchor>ab2cb023f92dbba1890dea2f659a1a2be</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenGLTexture</name>
    <filename>classOpenGLTexture.html</filename>
    <member kind="function">
      <type></type>
      <name>OpenGLTexture</name>
      <anchorfile>classOpenGLTexture.html</anchorfile>
      <anchor>ab3e52d6d7280b58ea59b44d0f25276ba</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~OpenGLTexture</name>
      <anchorfile>classOpenGLTexture.html</anchorfile>
      <anchor>a82ab7632d24a0e3944081da73b6ebe48</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>loadImage</name>
      <anchorfile>classOpenGLTexture.html</anchorfile>
      <anchor>a93c27d490ac810bc0faef0796aa05bc4</anchor>
      <arglist>(const Image &amp;image)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>loadARGB</name>
      <anchorfile>classOpenGLTexture.html</anchorfile>
      <anchor>a37149e28fdc88f6b035d69a8f2aa8cd1</anchor>
      <arglist>(const PixelARGB *pixels, int width, int height)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>loadARGBFlipped</name>
      <anchorfile>classOpenGLTexture.html</anchorfile>
      <anchor>a7b59d2d5bca69d574c2c5a5ec7d231c6</anchor>
      <arglist>(const PixelARGB *pixels, int width, int height)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>loadAlpha</name>
      <anchorfile>classOpenGLTexture.html</anchorfile>
      <anchor>a7340ece8acc539716217e3aed7019c33</anchor>
      <arglist>(const uint8 *pixels, int width, int height)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>release</name>
      <anchorfile>classOpenGLTexture.html</anchorfile>
      <anchor>aa840e7e3f919cc5f0999e1b5678b32e8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>bind</name>
      <anchorfile>classOpenGLTexture.html</anchorfile>
      <anchor>a3f2cf791f05bf2e1a6aa74f772db3bb0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unbind</name>
      <anchorfile>classOpenGLTexture.html</anchorfile>
      <anchor>a1965be2042f9295215da58be76fc4b18</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>getTextureID</name>
      <anchorfile>classOpenGLTexture.html</anchorfile>
      <anchor>a9db86d4e3c10d150a02c51fc0cbfd0a2</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getWidth</name>
      <anchorfile>classOpenGLTexture.html</anchorfile>
      <anchor>a3c1625836c8fdbbba8703e7d5a523a67</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getHeight</name>
      <anchorfile>classOpenGLTexture.html</anchorfile>
      <anchor>afd26edbf065e2d8e1bd60263be1b9893</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isValidSize</name>
      <anchorfile>classOpenGLTexture.html</anchorfile>
      <anchor>ac24eef177f28a924d45f66c5b4121da6</anchor>
      <arglist>(int width, int height)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OptionalScopedPointer</name>
    <filename>classOptionalScopedPointer.html</filename>
    <templarg>ObjectType</templarg>
    <member kind="function">
      <type></type>
      <name>OptionalScopedPointer</name>
      <anchorfile>classOptionalScopedPointer.html</anchorfile>
      <anchor>a8b96c6f59b68c8fe8880bc986fe90458</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OptionalScopedPointer</name>
      <anchorfile>classOptionalScopedPointer.html</anchorfile>
      <anchor>a3ea2cd6ce97953c223ac0ab3789f9127</anchor>
      <arglist>(ObjectType *objectToHold, bool takeOwnership)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OptionalScopedPointer</name>
      <anchorfile>classOptionalScopedPointer.html</anchorfile>
      <anchor>a3c0f0be46c674d4b4082ed6c56ad41d8</anchor>
      <arglist>(OptionalScopedPointer &amp;objectToTransferFrom)</arglist>
    </member>
    <member kind="function">
      <type>OptionalScopedPointer &amp;</type>
      <name>operator=</name>
      <anchorfile>classOptionalScopedPointer.html</anchorfile>
      <anchor>a8f773129ee4e44990551b34faf5d0dd5</anchor>
      <arglist>(OptionalScopedPointer &amp;objectToTransferFrom)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~OptionalScopedPointer</name>
      <anchorfile>classOptionalScopedPointer.html</anchorfile>
      <anchor>a0e0508d3dc7dd9603e001cb72191ad56</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator ObjectType *</name>
      <anchorfile>classOptionalScopedPointer.html</anchorfile>
      <anchor>a45f1f538ffab217fabca41e5271593cc</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>ObjectType *</type>
      <name>get</name>
      <anchorfile>classOptionalScopedPointer.html</anchorfile>
      <anchor>a0424e95b5edea332aadada60cb1296ed</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>ObjectType &amp;</type>
      <name>operator*</name>
      <anchorfile>classOptionalScopedPointer.html</anchorfile>
      <anchor>af1d540a292b283a1c72cba4e59d11a19</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>ObjectType *</type>
      <name>operator-&gt;</name>
      <anchorfile>classOptionalScopedPointer.html</anchorfile>
      <anchor>a0f713a23c5a7c8ee6d668109441d0d09</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>ObjectType *</type>
      <name>release</name>
      <anchorfile>classOptionalScopedPointer.html</anchorfile>
      <anchor>acf99bfb609b72988d875d1091af6cb42</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classOptionalScopedPointer.html</anchorfile>
      <anchor>ae30fe3a7e3ff51f427056ab155dbafd0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classOptionalScopedPointer.html</anchorfile>
      <anchor>ae526986fb0292d7b3623687e52b96fb7</anchor>
      <arglist>(ObjectType *newObject, bool takeOwnership)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOwned</name>
      <anchorfile>classOptionalScopedPointer.html</anchorfile>
      <anchor>a44d17e536c3584231f3ded73499cf09b</anchor>
      <arglist>(ObjectType *newObject)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNonOwned</name>
      <anchorfile>classOptionalScopedPointer.html</anchorfile>
      <anchor>ad002438efbea088d4114470c78cf77da</anchor>
      <arglist>(ObjectType *newObject)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>willDeleteObject</name>
      <anchorfile>classOptionalScopedPointer.html</anchorfile>
      <anchor>a0eb696aae75b039bc1309dc7125bda7a</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swapWith</name>
      <anchorfile>classOptionalScopedPointer.html</anchorfile>
      <anchor>a378381bc4cb56b452de6eb198a796fbb</anchor>
      <arglist>(OptionalScopedPointer&lt; ObjectType &gt; &amp;other) noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OSCAddress</name>
    <filename>classOSCAddress.html</filename>
    <member kind="function">
      <type></type>
      <name>OSCAddress</name>
      <anchorfile>classOSCAddress.html</anchorfile>
      <anchor>a7725a247eeb98246e4f189a16354b21a</anchor>
      <arglist>(const String &amp;address)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OSCAddress</name>
      <anchorfile>classOSCAddress.html</anchorfile>
      <anchor>aac7db4f9cb4f2ae685102179a3e32c62</anchor>
      <arglist>(const char *address)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classOSCAddress.html</anchorfile>
      <anchor>a1f692f1ea131751252c5e76b9d539f17</anchor>
      <arglist>(const OSCAddress &amp;other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classOSCAddress.html</anchorfile>
      <anchor>a9ca1f90ba388999c6d1b3be7aa76ae7f</anchor>
      <arglist>(const OSCAddress &amp;other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>toString</name>
      <anchorfile>classOSCAddress.html</anchorfile>
      <anchor>af69047d8ab6146e4b5732a81b83d73a7</anchor>
      <arglist>() const noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OSCAddressPattern</name>
    <filename>classOSCAddressPattern.html</filename>
    <member kind="function">
      <type></type>
      <name>OSCAddressPattern</name>
      <anchorfile>classOSCAddressPattern.html</anchorfile>
      <anchor>afa16707bb0514e5492ba490b098c1d47</anchor>
      <arglist>(const String &amp;address)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OSCAddressPattern</name>
      <anchorfile>classOSCAddressPattern.html</anchorfile>
      <anchor>a2f3ed002c609ef835250bfb20aa8692c</anchor>
      <arglist>(const char *address)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classOSCAddressPattern.html</anchorfile>
      <anchor>a3a3fee813217a1801a221a4ef167aa2a</anchor>
      <arglist>(const OSCAddressPattern &amp;other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classOSCAddressPattern.html</anchorfile>
      <anchor>aa0f49618947ccd07d245e277f78cd33a</anchor>
      <arglist>(const OSCAddressPattern &amp;other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>matches</name>
      <anchorfile>classOSCAddressPattern.html</anchorfile>
      <anchor>a1bc16100c49fe26129230fc92ccffcb9</anchor>
      <arglist>(const OSCAddress &amp;address) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>containsWildcards</name>
      <anchorfile>classOSCAddressPattern.html</anchorfile>
      <anchor>a9e3c13a9b6c19f20d2f60795c9bbf5ea</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>toString</name>
      <anchorfile>classOSCAddressPattern.html</anchorfile>
      <anchor>ae34678b53e4c33ce64eed3f1aa18210b</anchor>
      <arglist>() const noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OSCArgument</name>
    <filename>classOSCArgument.html</filename>
    <member kind="function">
      <type></type>
      <name>OSCArgument</name>
      <anchorfile>classOSCArgument.html</anchorfile>
      <anchor>aa323c4ce450922ba69978db64355eb7b</anchor>
      <arglist>(int32 value) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OSCArgument</name>
      <anchorfile>classOSCArgument.html</anchorfile>
      <anchor>a28dc0f19476bf3fc4d64ff5ec721f7e0</anchor>
      <arglist>(float value) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OSCArgument</name>
      <anchorfile>classOSCArgument.html</anchorfile>
      <anchor>afa978925260dc28b1238eb488f6baa3a</anchor>
      <arglist>(const String &amp;value) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OSCArgument</name>
      <anchorfile>classOSCArgument.html</anchorfile>
      <anchor>ad0bfba31d434557dd9e2d7ef4818179b</anchor>
      <arglist>(const MemoryBlock &amp;blob)</arglist>
    </member>
    <member kind="function">
      <type>OSCType</type>
      <name>getType</name>
      <anchorfile>classOSCArgument.html</anchorfile>
      <anchor>acc86bac1b4b82b6503afe80502fa0a9a</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isInt32</name>
      <anchorfile>classOSCArgument.html</anchorfile>
      <anchor>ac77943d649ff5e95684a06d3cfd52e42</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isFloat32</name>
      <anchorfile>classOSCArgument.html</anchorfile>
      <anchor>ac85b0c0c1c670252a91ccb928f51920b</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isString</name>
      <anchorfile>classOSCArgument.html</anchorfile>
      <anchor>a48611af7714cfdb2b3a5a2098c40e76b</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isBlob</name>
      <anchorfile>classOSCArgument.html</anchorfile>
      <anchor>a1f25c4f500393b19bad346e22f888e82</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int32</type>
      <name>getInt32</name>
      <anchorfile>classOSCArgument.html</anchorfile>
      <anchor>a4756f8299a51e82692b4d6612b0c639e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getFloat32</name>
      <anchorfile>classOSCArgument.html</anchorfile>
      <anchor>a931409f73344677438aac7c8b4862e0b</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>getString</name>
      <anchorfile>classOSCArgument.html</anchorfile>
      <anchor>a69bc0a86eadb4165536ddf24dfae6397</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const MemoryBlock &amp;</type>
      <name>getBlob</name>
      <anchorfile>classOSCArgument.html</anchorfile>
      <anchor>a75b0188e5ea6314ab0d49503095d9e5c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OSCBundle</name>
    <filename>classOSCBundle.html</filename>
    <class kind="class">OSCBundle::Element</class>
    <member kind="function">
      <type></type>
      <name>OSCBundle</name>
      <anchorfile>classOSCBundle.html</anchorfile>
      <anchor>a6e1749aabd784193c13cdaee8017c0f2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OSCBundle</name>
      <anchorfile>classOSCBundle.html</anchorfile>
      <anchor>a80d5c3a48b6fb0838d86a619dff9c99a</anchor>
      <arglist>(OSCTimeTag timeTag)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTimeTag</name>
      <anchorfile>classOSCBundle.html</anchorfile>
      <anchor>a98e98d92b9deb58e2d44c789cd17c880</anchor>
      <arglist>(OSCTimeTag newTimeTag) noexcept</arglist>
    </member>
    <member kind="function">
      <type>OSCTimeTag</type>
      <name>getTimeTag</name>
      <anchorfile>classOSCBundle.html</anchorfile>
      <anchor>a8e7f44ee02446d795280c5e62a641033</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>classOSCBundle.html</anchorfile>
      <anchor>af7bbeb1293f16c030391ce6233aa6182</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEmpty</name>
      <anchorfile>classOSCBundle.html</anchorfile>
      <anchor>a0d88e99126c15566e531e870d1c6cd07</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>OSCBundle::Element &amp;</type>
      <name>operator[]</name>
      <anchorfile>classOSCBundle.html</anchorfile>
      <anchor>a35f9bd127deee96b529aceafa599a9c4</anchor>
      <arglist>(const int i) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addElement</name>
      <anchorfile>classOSCBundle.html</anchorfile>
      <anchor>a711978766a05b75d69630bc6ced8d7fc</anchor>
      <arglist>(const OSCBundle::Element &amp;element)</arglist>
    </member>
    <member kind="function">
      <type>OSCBundle::Element *</type>
      <name>begin</name>
      <anchorfile>classOSCBundle.html</anchorfile>
      <anchor>ac87444bca7c786ea37146c7fe0655287</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>OSCBundle::Element *</type>
      <name>end</name>
      <anchorfile>classOSCBundle.html</anchorfile>
      <anchor>abd3f9d005b39882792998fa392c93f72</anchor>
      <arglist>() const noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OSCBundle::Element</name>
    <filename>classOSCBundle_1_1Element.html</filename>
    <member kind="function">
      <type></type>
      <name>Element</name>
      <anchorfile>classOSCBundle_1_1Element.html</anchorfile>
      <anchor>aab8361e928aca256ac941f88c146ecd5</anchor>
      <arglist>(OSCMessage message)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Element</name>
      <anchorfile>classOSCBundle_1_1Element.html</anchorfile>
      <anchor>a83bd505dab852a0ee5702b7faf32f730</anchor>
      <arglist>(OSCBundle bundle)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Element</name>
      <anchorfile>classOSCBundle_1_1Element.html</anchorfile>
      <anchor>a8fd11e952718d53b3469021fed3bf439</anchor>
      <arglist>(const Element &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Element</name>
      <anchorfile>classOSCBundle_1_1Element.html</anchorfile>
      <anchor>a855ed7ec111c15fdcb7676c8b83aa39a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isMessage</name>
      <anchorfile>classOSCBundle_1_1Element.html</anchorfile>
      <anchor>a43a76ba58575a2929683ba4082ffd4aa</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isBundle</name>
      <anchorfile>classOSCBundle_1_1Element.html</anchorfile>
      <anchor>aca9a2295d1644e569d898857a4d97021</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const OSCMessage &amp;</type>
      <name>getMessage</name>
      <anchorfile>classOSCBundle_1_1Element.html</anchorfile>
      <anchor>ae7913984c66e33b7ab876f3736a1e0cf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const OSCBundle &amp;</type>
      <name>getBundle</name>
      <anchorfile>classOSCBundle_1_1Element.html</anchorfile>
      <anchor>a0b493600e3e17e25be217516fc7e1676</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>OSCException</name>
    <filename>structOSCException.html</filename>
    <member kind="function">
      <type></type>
      <name>OSCException</name>
      <anchorfile>structOSCException.html</anchorfile>
      <anchor>a05fe3224e36d057de4c732ffad53f052</anchor>
      <arglist>(const String &amp;desc)</arglist>
    </member>
    <member kind="variable">
      <type>String</type>
      <name>description</name>
      <anchorfile>structOSCException.html</anchorfile>
      <anchor>a1c71f609494bb48bb2c769ab25947205</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>OSCFormatError</name>
    <filename>structOSCFormatError.html</filename>
    <base>OSCException</base>
    <member kind="function">
      <type></type>
      <name>OSCFormatError</name>
      <anchorfile>structOSCFormatError.html</anchorfile>
      <anchor>a9ddada53331691d0a38f37f2b846841a</anchor>
      <arglist>(const String &amp;desc)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>OSCInternalError</name>
    <filename>structOSCInternalError.html</filename>
    <base>OSCException</base>
    <member kind="function">
      <type></type>
      <name>OSCInternalError</name>
      <anchorfile>structOSCInternalError.html</anchorfile>
      <anchor>ab61d68be60573c87ecaec312f2b0ddff</anchor>
      <arglist>(const String &amp;desc)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OSCMessage</name>
    <filename>classOSCMessage.html</filename>
    <member kind="function">
      <type></type>
      <name>OSCMessage</name>
      <anchorfile>classOSCMessage.html</anchorfile>
      <anchor>aa0cfb61e14cb788995bc7f520f08a206</anchor>
      <arglist>(const OSCAddressPattern &amp;ap) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OSCMessage</name>
      <anchorfile>classOSCMessage.html</anchorfile>
      <anchor>af6c3599f02b75ef3ef4a86090fa1d7a4</anchor>
      <arglist>(const OSCAddressPattern &amp;ap, Arg1 &amp;&amp;arg1, Args &amp;&amp;...args)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAddressPattern</name>
      <anchorfile>classOSCMessage.html</anchorfile>
      <anchor>a5dfb8e0eea5f651586249c7834756cc2</anchor>
      <arglist>(const OSCAddressPattern &amp;ap) noexcept</arglist>
    </member>
    <member kind="function">
      <type>OSCAddressPattern</type>
      <name>getAddressPattern</name>
      <anchorfile>classOSCMessage.html</anchorfile>
      <anchor>a3fea72d3d907200939a9dd3ef04c5068</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>classOSCMessage.html</anchorfile>
      <anchor>a59bc329c81577375af70e5afdad75c28</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEmpty</name>
      <anchorfile>classOSCMessage.html</anchorfile>
      <anchor>a4c3261179a87ee57b79d9cd64c2a8a63</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>OSCArgument &amp;</type>
      <name>operator[]</name>
      <anchorfile>classOSCMessage.html</anchorfile>
      <anchor>addc773f65d099f846daffd8cf4b0a829</anchor>
      <arglist>(const int i) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>OSCArgument *</type>
      <name>begin</name>
      <anchorfile>classOSCMessage.html</anchorfile>
      <anchor>a146f7cbb7dc702f1459a706e74c4bb71</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>OSCArgument *</type>
      <name>end</name>
      <anchorfile>classOSCMessage.html</anchorfile>
      <anchor>a58d742f6fe7a4aa34e7eed5f593482b0</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classOSCMessage.html</anchorfile>
      <anchor>a7130a169e40d167190217c755394b055</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addInt32</name>
      <anchorfile>classOSCMessage.html</anchorfile>
      <anchor>a0bf8a6770d0c9848e376ac5d46d3ed2a</anchor>
      <arglist>(int32 value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addFloat32</name>
      <anchorfile>classOSCMessage.html</anchorfile>
      <anchor>a455bc74a17b2a9316eae966f53031ef3</anchor>
      <arglist>(float value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addString</name>
      <anchorfile>classOSCMessage.html</anchorfile>
      <anchor>a3a9f218031b192ec68772f218b0be9e4</anchor>
      <arglist>(const String &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addBlob</name>
      <anchorfile>classOSCMessage.html</anchorfile>
      <anchor>adb70fd2652aa39dea80e08c93ed2ebaa</anchor>
      <arglist>(const MemoryBlock &amp;blob)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addArgument</name>
      <anchorfile>classOSCMessage.html</anchorfile>
      <anchor>ac02b68dbef52c377e547e690da62c454</anchor>
      <arglist>(OSCArgument argument)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OSCReceiver</name>
    <filename>classOSCReceiver.html</filename>
    <class kind="class">OSCReceiver::Listener</class>
    <class kind="class">OSCReceiver::ListenerWithOSCAddress</class>
    <class kind="struct">OSCReceiver::MessageLoopCallback</class>
    <class kind="struct">OSCReceiver::RealtimeCallback</class>
    <member kind="typedef">
      <type>std::function&lt; void(const char *data, int dataSize)&gt;</type>
      <name>FormatErrorHandler</name>
      <anchorfile>classOSCReceiver.html</anchorfile>
      <anchor>a503681147b58b945514651171086bf84</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OSCReceiver</name>
      <anchorfile>classOSCReceiver.html</anchorfile>
      <anchor>aa5c074f5f924dce01894224c00387507</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~OSCReceiver</name>
      <anchorfile>classOSCReceiver.html</anchorfile>
      <anchor>a55b8f099e686711f5aae6e7b616daa1c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>connect</name>
      <anchorfile>classOSCReceiver.html</anchorfile>
      <anchor>ac257f28515be7a4520e0811b3449239b</anchor>
      <arglist>(int portNumber)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>disconnect</name>
      <anchorfile>classOSCReceiver.html</anchorfile>
      <anchor>adb7179630d20e6ddbf48e6ef380c3c67</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addListener</name>
      <anchorfile>classOSCReceiver.html</anchorfile>
      <anchor>adcaed63b17d8749c937363d7e3732a4f</anchor>
      <arglist>(Listener&lt; MessageLoopCallback &gt; *listenerToAdd)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addListener</name>
      <anchorfile>classOSCReceiver.html</anchorfile>
      <anchor>abdd90b61b2a11195dbb96f88099597b0</anchor>
      <arglist>(Listener&lt; RealtimeCallback &gt; *listenerToAdd)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addListener</name>
      <anchorfile>classOSCReceiver.html</anchorfile>
      <anchor>a291fa22f25c98248f9aa55768de5e3be</anchor>
      <arglist>(ListenerWithOSCAddress&lt; MessageLoopCallback &gt; *listenerToAdd, OSCAddress addressToMatch)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addListener</name>
      <anchorfile>classOSCReceiver.html</anchorfile>
      <anchor>a8da81c3ff7833d82a93ab37fcac29dc8</anchor>
      <arglist>(ListenerWithOSCAddress&lt; RealtimeCallback &gt; *listenerToAdd, OSCAddress addressToMatch)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeListener</name>
      <anchorfile>classOSCReceiver.html</anchorfile>
      <anchor>aa5f88bdb7cf43ad5c285acade967ab7a</anchor>
      <arglist>(Listener&lt; MessageLoopCallback &gt; *listenerToRemove)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeListener</name>
      <anchorfile>classOSCReceiver.html</anchorfile>
      <anchor>a9bdd4a838cabd95d3b6c2e7d5e20a9c7</anchor>
      <arglist>(Listener&lt; RealtimeCallback &gt; *listenerToRemove)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeListener</name>
      <anchorfile>classOSCReceiver.html</anchorfile>
      <anchor>a576f2d58c162127d12c996906bd021d4</anchor>
      <arglist>(ListenerWithOSCAddress&lt; MessageLoopCallback &gt; *listenerToRemove)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeListener</name>
      <anchorfile>classOSCReceiver.html</anchorfile>
      <anchor>a1cf4ff609310fd56a8060aed84dd40b5</anchor>
      <arglist>(ListenerWithOSCAddress&lt; RealtimeCallback &gt; *listenerToRemove)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>registerFormatErrorHandler</name>
      <anchorfile>classOSCReceiver.html</anchorfile>
      <anchor>a359a06dccc72bbc7fb4cba8d23d7f04c</anchor>
      <arglist>(FormatErrorHandler handler)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OSCReceiver::Listener</name>
    <filename>classOSCReceiver_1_1Listener.html</filename>
    <templarg></templarg>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Listener</name>
      <anchorfile>classOSCReceiver_1_1Listener.html</anchorfile>
      <anchor>a5111a816edfa73fa960d908063883cc5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>oscMessageReceived</name>
      <anchorfile>classOSCReceiver_1_1Listener.html</anchorfile>
      <anchor>aa0902c927fabc6e2fedb4cb7a66e793a</anchor>
      <arglist>(const OSCMessage &amp;message)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>oscBundleReceived</name>
      <anchorfile>classOSCReceiver_1_1Listener.html</anchorfile>
      <anchor>ae434227ce5dc3ca7391d1612911a73fd</anchor>
      <arglist>(const OSCBundle &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OSCReceiver::ListenerWithOSCAddress</name>
    <filename>classOSCReceiver_1_1ListenerWithOSCAddress.html</filename>
    <templarg></templarg>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ListenerWithOSCAddress</name>
      <anchorfile>classOSCReceiver_1_1ListenerWithOSCAddress.html</anchorfile>
      <anchor>a4ad949fbd2d7d9e8a0253d1dfe93b394</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>oscMessageReceived</name>
      <anchorfile>classOSCReceiver_1_1ListenerWithOSCAddress.html</anchorfile>
      <anchor>aedfd17a06e68530c449d9ef85ca76740</anchor>
      <arglist>(const OSCMessage &amp;message)=0</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>OSCReceiver::MessageLoopCallback</name>
    <filename>structOSCReceiver_1_1MessageLoopCallback.html</filename>
  </compound>
  <compound kind="struct">
    <name>OSCReceiver::RealtimeCallback</name>
    <filename>structOSCReceiver_1_1RealtimeCallback.html</filename>
  </compound>
  <compound kind="class">
    <name>OSCSender</name>
    <filename>classOSCSender.html</filename>
    <member kind="function">
      <type></type>
      <name>OSCSender</name>
      <anchorfile>classOSCSender.html</anchorfile>
      <anchor>a026bca8d086dc1ef9d226bcc2855e0db</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~OSCSender</name>
      <anchorfile>classOSCSender.html</anchorfile>
      <anchor>a1eb9c1bab3ee54e3108b8df428fc0ff6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>connect</name>
      <anchorfile>classOSCSender.html</anchorfile>
      <anchor>a83d9b111303882895c0465336716ab5b</anchor>
      <arglist>(const String &amp;targetHostName, int targetPortNumber)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>disconnect</name>
      <anchorfile>classOSCSender.html</anchorfile>
      <anchor>ac8c0a0ccec0ade4c28cba43773b095c5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>send</name>
      <anchorfile>classOSCSender.html</anchorfile>
      <anchor>ad76a32479cdbac1353f26edb0464a2eb</anchor>
      <arglist>(const OSCMessage &amp;message)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>send</name>
      <anchorfile>classOSCSender.html</anchorfile>
      <anchor>adf7b51a7b31d021df070518b7cb8cd08</anchor>
      <arglist>(const OSCBundle &amp;bundle)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>sendToIPAddress</name>
      <anchorfile>classOSCSender.html</anchorfile>
      <anchor>ab4eb31fd9319908a89444b72ea6c86fe</anchor>
      <arglist>(const String &amp;targetIPAddress, int targetPortNumber, const OSCMessage &amp;message)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>sendToIPAddress</name>
      <anchorfile>classOSCSender.html</anchorfile>
      <anchor>ad253520e7da6c1d356833663cca977e3</anchor>
      <arglist>(const String &amp;targetIPAddress, int targetPortNumber, const OSCBundle &amp;bundle)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>send</name>
      <anchorfile>classOSCSender.html</anchorfile>
      <anchor>a6227e3fd1b498acbe8ffd671983fc177</anchor>
      <arglist>(const OSCAddressPattern &amp;address, Args &amp;&amp;...args)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>sendToIPAddress</name>
      <anchorfile>classOSCSender.html</anchorfile>
      <anchor>a8e83a9df852a8475ab1d2e0f73913bff</anchor>
      <arglist>(const String &amp;targetIPAddress, int targetPortNumber, const OSCAddressPattern &amp;address, Args &amp;&amp;...args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OSCTimeTag</name>
    <filename>classOSCTimeTag.html</filename>
    <member kind="function">
      <type></type>
      <name>OSCTimeTag</name>
      <anchorfile>classOSCTimeTag.html</anchorfile>
      <anchor>aebad6cb86fc729e065dcee9703dad724</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OSCTimeTag</name>
      <anchorfile>classOSCTimeTag.html</anchorfile>
      <anchor>a4c76b42ba03bf4c0789f325b8fbe0e92</anchor>
      <arglist>(uint64 rawTimeTag) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OSCTimeTag</name>
      <anchorfile>classOSCTimeTag.html</anchorfile>
      <anchor>abbc1ed60a931dff6b394a6cc343126e2</anchor>
      <arglist>(Time time) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Time</type>
      <name>toTime</name>
      <anchorfile>classOSCTimeTag.html</anchorfile>
      <anchor>ac433f096735c43fe1214eed57315fc8a</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isImmediately</name>
      <anchorfile>classOSCTimeTag.html</anchorfile>
      <anchor>a7a6b061fc6a642433b3f577607fecce5</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>uint64</type>
      <name>getRawTimeTag</name>
      <anchorfile>classOSCTimeTag.html</anchorfile>
      <anchor>ae9f7f76006803ae01637c6ca9b452343</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const OSCTimeTag</type>
      <name>immediately</name>
      <anchorfile>classOSCTimeTag.html</anchorfile>
      <anchor>acc9dc841287eccfc21cbe030c473111c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OSCTypes</name>
    <filename>classOSCTypes.html</filename>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isSupportedType</name>
      <anchorfile>classOSCTypes.html</anchorfile>
      <anchor>a1bce9f5a41b570d9b4ba6915d14a8a64</anchor>
      <arglist>(OSCType type) noexcept</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const OSCType</type>
      <name>int32</name>
      <anchorfile>classOSCTypes.html</anchorfile>
      <anchor>a385cc294c1427151d8bf7a260f0719e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const OSCType</type>
      <name>float32</name>
      <anchorfile>classOSCTypes.html</anchorfile>
      <anchor>a7c16c05c48b9a0d60e615104c5f99c52</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const OSCType</type>
      <name>string</name>
      <anchorfile>classOSCTypes.html</anchorfile>
      <anchor>ad427b15ae32b26b2e0c28f0932eed263</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const OSCType</type>
      <name>blob</name>
      <anchorfile>classOSCTypes.html</anchorfile>
      <anchor>ac43c6abfe6d67b3a52b0550c49a391ab</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OutputStream</name>
    <filename>classOutputStream.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>flush</name>
      <anchorfile>classOutputStream.html</anchorfile>
      <anchor>a2b731aef87084c3779bea292f85e800d</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>setPosition</name>
      <anchorfile>classOutputStream.html</anchorfile>
      <anchor>ae95d7b4edfe5eac6a0913b079684572a</anchor>
      <arglist>(int64 newPosition)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int64</type>
      <name>getPosition</name>
      <anchorfile>classOutputStream.html</anchorfile>
      <anchor>a84ec99ccacf0326e79070d34f178e3d3</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>write</name>
      <anchorfile>classOutputStream.html</anchorfile>
      <anchor>a0658d05adfcb1f7363ebe418f84fee21</anchor>
      <arglist>(const void *dataToWrite, size_t numberOfBytes)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OwnedArray</name>
    <filename>classOwnedArray.html</filename>
    <templarg>ObjectClass</templarg>
    <templarg>TypeOfCriticalSectionToUse</templarg>
    <member kind="typedef">
      <type>TypeOfCriticalSectionToUse::ScopedLockType</type>
      <name>ScopedLockType</name>
      <anchorfile>classOwnedArray.html</anchorfile>
      <anchor>a3a6262c77a9ca75c746c3d98410ce356</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OwnedArray</name>
      <anchorfile>classOwnedArray.html</anchorfile>
      <anchor>aaef9b9d43ed2ac8568ba73ef0c4805f9</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~OwnedArray</name>
      <anchorfile>classOwnedArray.html</anchorfile>
      <anchor>aab8ed18b03ab56e465433b32f84c9e59</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OwnedArray</name>
      <anchorfile>classOwnedArray.html</anchorfile>
      <anchor>a1b96d5762983d3d81cfc30acc4ed5cc1</anchor>
      <arglist>(OwnedArray &amp;&amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>OwnedArray &amp;</type>
      <name>operator=</name>
      <anchorfile>classOwnedArray.html</anchorfile>
      <anchor>ada2db7ab890af904788d8a9e9db14f5b</anchor>
      <arglist>(OwnedArray &amp;&amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classOwnedArray.html</anchorfile>
      <anchor>a65730f03dbe905fa251491cb6c8c14ee</anchor>
      <arglist>(bool deleteObjects=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearQuick</name>
      <anchorfile>classOwnedArray.html</anchorfile>
      <anchor>a96fee75673d70e8cf7548bcc0588dddf</anchor>
      <arglist>(bool deleteObjects)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>classOwnedArray.html</anchorfile>
      <anchor>a5db444e91e2abcdcf222f5ec2a90e1ac</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEmpty</name>
      <anchorfile>classOwnedArray.html</anchorfile>
      <anchor>a63b263300bdd70a79035a57470bfae8f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>ObjectClass *</type>
      <name>operator[]</name>
      <anchorfile>classOwnedArray.html</anchorfile>
      <anchor>ad358d1fb116053ba1e3c46d6177ecef6</anchor>
      <arglist>(const int index) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>ObjectClass *</type>
      <name>getUnchecked</name>
      <anchorfile>classOwnedArray.html</anchorfile>
      <anchor>ae633303198df0e9aaa594b9d1d0b8137</anchor>
      <arglist>(const int index) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>ObjectClass *</type>
      <name>getFirst</name>
      <anchorfile>classOwnedArray.html</anchorfile>
      <anchor>ac3099192ad968d749e95f8e05335f83c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>ObjectClass *</type>
      <name>getLast</name>
      <anchorfile>classOwnedArray.html</anchorfile>
      <anchor>aef141763468bd638b8a266a215e3d7d8</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>ObjectClass **</type>
      <name>getRawDataPointer</name>
      <anchorfile>classOwnedArray.html</anchorfile>
      <anchor>a71f6d7bb563b11f49d68a57a538ef7a2</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>ObjectClass **</type>
      <name>begin</name>
      <anchorfile>classOwnedArray.html</anchorfile>
      <anchor>ae68d94c70c6c25246336bb30ba63d27c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>ObjectClass **</type>
      <name>end</name>
      <anchorfile>classOwnedArray.html</anchorfile>
      <anchor>af24125ef9d6f24c35be21b37c8c945ea</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>indexOf</name>
      <anchorfile>classOwnedArray.html</anchorfile>
      <anchor>a6660424693e4edbc687fc8352a71ca92</anchor>
      <arglist>(const ObjectClass *objectToLookFor) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>classOwnedArray.html</anchorfile>
      <anchor>a4ae4a483c09550d8432b98db14f2d132</anchor>
      <arglist>(const ObjectClass *objectToLookFor) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>ObjectClass *</type>
      <name>add</name>
      <anchorfile>classOwnedArray.html</anchorfile>
      <anchor>a71587e33a86ec14556128e162470319f</anchor>
      <arglist>(ObjectClass *newObject) noexcept</arglist>
    </member>
    <member kind="function">
      <type>ObjectClass *</type>
      <name>insert</name>
      <anchorfile>classOwnedArray.html</anchorfile>
      <anchor>af65726b11200f86ac1aa699eefafa507</anchor>
      <arglist>(int indexToInsertAt, ObjectClass *newObject) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insertArray</name>
      <anchorfile>classOwnedArray.html</anchorfile>
      <anchor>ac56956aeefcbbaeea2f4d143eb78f633</anchor>
      <arglist>(int indexToInsertAt, ObjectClass *const *newObjects, int numberOfElements)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addIfNotAlreadyThere</name>
      <anchorfile>classOwnedArray.html</anchorfile>
      <anchor>a53c6a89641ec9282a01e04322f14fe34</anchor>
      <arglist>(ObjectClass *newObject) noexcept</arglist>
    </member>
    <member kind="function">
      <type>ObjectClass *</type>
      <name>set</name>
      <anchorfile>classOwnedArray.html</anchorfile>
      <anchor>a383de41801934f65b720a7019ed6ac8a</anchor>
      <arglist>(int indexToChange, ObjectClass *newObject, bool deleteOldElement=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addArray</name>
      <anchorfile>classOwnedArray.html</anchorfile>
      <anchor>aa2bd0b49686d083cd67d63da1a690dc7</anchor>
      <arglist>(const OtherArrayType &amp;arrayToAddFrom, int startIndex=0, int numElementsToAdd=-1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addCopiesOf</name>
      <anchorfile>classOwnedArray.html</anchorfile>
      <anchor>a5168676f4e3de540247025ceaec8ad32</anchor>
      <arglist>(const OtherArrayType &amp;arrayToAddFrom, int startIndex=0, int numElementsToAdd=-1)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addSorted</name>
      <anchorfile>classOwnedArray.html</anchorfile>
      <anchor>ac87e81838149b9d541f6afe605a81b43</anchor>
      <arglist>(ElementComparator &amp;comparator, ObjectClass *const newObject) noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>indexOfSorted</name>
      <anchorfile>classOwnedArray.html</anchorfile>
      <anchor>a70e007f781979fd82e1fa7dcd9c3fe87</anchor>
      <arglist>(ElementComparator &amp;comparator, const ObjectClass *const objectToLookFor) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove</name>
      <anchorfile>classOwnedArray.html</anchorfile>
      <anchor>ae96b18f21808cd5a62fc35bff85e2df6</anchor>
      <arglist>(int indexToRemove, bool deleteObject=true)</arglist>
    </member>
    <member kind="function">
      <type>ObjectClass *</type>
      <name>removeAndReturn</name>
      <anchorfile>classOwnedArray.html</anchorfile>
      <anchor>a835f729e76ae314063c4a7b2e8d208ec</anchor>
      <arglist>(int indexToRemove)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeObject</name>
      <anchorfile>classOwnedArray.html</anchorfile>
      <anchor>a2b783fa66f082b890fc20d8d9c948494</anchor>
      <arglist>(const ObjectClass *objectToRemove, bool deleteObject=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeRange</name>
      <anchorfile>classOwnedArray.html</anchorfile>
      <anchor>a6ca377ada4d52033b6bc9efd3614b5c2</anchor>
      <arglist>(int startIndex, int numberToRemove, bool deleteObjects=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeLast</name>
      <anchorfile>classOwnedArray.html</anchorfile>
      <anchor>a5df58ce179d37074faf0b85ff83840d8</anchor>
      <arglist>(int howManyToRemove=1, bool deleteObjects=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swap</name>
      <anchorfile>classOwnedArray.html</anchorfile>
      <anchor>aeae36e1f45837b3e3950fa51b0d67764</anchor>
      <arglist>(int index1, int index2) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>move</name>
      <anchorfile>classOwnedArray.html</anchorfile>
      <anchor>aa8b9f3cc1294a814d7d85a6e9c8266b1</anchor>
      <arglist>(int currentIndex, int newIndex) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swapWith</name>
      <anchorfile>classOwnedArray.html</anchorfile>
      <anchor>aa33640231fe11ff0e21f760e395b63a1</anchor>
      <arglist>(OtherArrayType &amp;otherArray) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>minimiseStorageOverheads</name>
      <anchorfile>classOwnedArray.html</anchorfile>
      <anchor>a77037209056e7c62634819bd274b88ab</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ensureStorageAllocated</name>
      <anchorfile>classOwnedArray.html</anchorfile>
      <anchor>a3618db021fb44a7e146bd969c43d61ed</anchor>
      <arglist>(const int minNumElements) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sort</name>
      <anchorfile>classOwnedArray.html</anchorfile>
      <anchor>a04a21a831320e2ce76bee8ad881e1d90</anchor>
      <arglist>(ElementComparator &amp;comparator, bool retainOrderOfEquivalentItems=false) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const TypeOfCriticalSectionToUse &amp;</type>
      <name>getLock</name>
      <anchorfile>classOwnedArray.html</anchorfile>
      <anchor>aff26d401a3ec729ba369a13276dd32e2</anchor>
      <arglist>() const noexcept</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Packed7BitArrayBuilder</name>
    <filename>structPacked7BitArrayBuilder.html</filename>
    <templarg>allocatedBytes</templarg>
    <class kind="struct">Packed7BitArrayBuilder::State</class>
    <member kind="function">
      <type>const void *</type>
      <name>getData</name>
      <anchorfile>structPacked7BitArrayBuilder.html</anchorfile>
      <anchor>a08ab892553df7319136dfd5b1a326f94</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>structPacked7BitArrayBuilder.html</anchorfile>
      <anchor>adc9d4964f3f271067e381df0c4f3db23</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasCapacity</name>
      <anchorfile>structPacked7BitArrayBuilder.html</anchorfile>
      <anchor>a151adc892dc573c9cf863d2e11369b5a</anchor>
      <arglist>(int bitsNeeded) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeHeaderSysexBytes</name>
      <anchorfile>structPacked7BitArrayBuilder.html</anchorfile>
      <anchor>a88928a07312b84a9f0dfe358f6f0d287</anchor>
      <arglist>(uint8 deviceIndex) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writePacketSysexFooter</name>
      <anchorfile>structPacked7BitArrayBuilder.html</anchorfile>
      <anchor>a05cc90efc2a511d9bc8a19b0a2679952</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>Packed7BitArrayBuilder &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>structPacked7BitArrayBuilder.html</anchorfile>
      <anchor>aaf1e9f8722520c7cd98fb43f9fbea5f5</anchor>
      <arglist>(IntegerWithBitSize&lt; numBits &gt; value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeBits</name>
      <anchorfile>structPacked7BitArrayBuilder.html</anchorfile>
      <anchor>a08ed4bf303fde13e19393507364e588c</anchor>
      <arglist>(uint32 value, int numBits) noexcept</arglist>
    </member>
    <member kind="function">
      <type>State</type>
      <name>getState</name>
      <anchorfile>structPacked7BitArrayBuilder.html</anchorfile>
      <anchor>a24e665e81146f8826d1ae56ef66ac3dc</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>restore</name>
      <anchorfile>structPacked7BitArrayBuilder.html</anchorfile>
      <anchor>a465eeb4f3c6b4561d9f86be3ef0e99d5</anchor>
      <arglist>(State state) noexcept</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Packed7BitArrayBuilder::State</name>
    <filename>structPacked7BitArrayBuilder_1_1State.html</filename>
    <member kind="variable">
      <type>int</type>
      <name>bytesWritten</name>
      <anchorfile>structPacked7BitArrayBuilder_1_1State.html</anchorfile>
      <anchor>a5642470bfd587b57a5a4808949386c30</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>bitsInCurrentByte</name>
      <anchorfile>structPacked7BitArrayBuilder_1_1State.html</anchorfile>
      <anchor>a412a7fcc8e6c64b9da22779179a95468</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Packed7BitArrayReader</name>
    <filename>structPacked7BitArrayReader.html</filename>
    <member kind="function">
      <type></type>
      <name>Packed7BitArrayReader</name>
      <anchorfile>structPacked7BitArrayReader.html</anchorfile>
      <anchor>aac9fad762a2d62ba9e70429797357751</anchor>
      <arglist>(const void *sourceData, int numBytes) noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getRemainingBits</name>
      <anchorfile>structPacked7BitArrayReader.html</anchorfile>
      <anchor>a898e6e860e9538804e745d3ce790b511</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Target</type>
      <name>read</name>
      <anchorfile>structPacked7BitArrayReader.html</anchorfile>
      <anchor>a42826fd856483fb8d6e8c687106f11d0</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>uint32</type>
      <name>readBits</name>
      <anchorfile>structPacked7BitArrayReader.html</anchorfile>
      <anchor>a59799078f8bd2491c2296b63005dd1ce</anchor>
      <arglist>(int numBits) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>checksumIsOK</name>
      <anchorfile>structPacked7BitArrayReader.html</anchorfile>
      <anchor>a51d872f9d7a0d85a164be1c70016ec54</anchor>
      <arglist>(const uint8 *data, uint32 size) noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Path</name>
    <filename>classPath.html</filename>
    <class kind="class">Path::Iterator</class>
    <member kind="function">
      <type></type>
      <name>Path</name>
      <anchorfile>classPath.html</anchorfile>
      <anchor>af26cfab021ddf49af73da3b2beca85ac</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Path</name>
      <anchorfile>classPath.html</anchorfile>
      <anchor>aabf51b70a75823c1f32e56973e4406b6</anchor>
      <arglist>(const Path &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Path</name>
      <anchorfile>classPath.html</anchorfile>
      <anchor>a141da9ff89c85e0ba410b5a73864c267</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Path &amp;</type>
      <name>operator=</name>
      <anchorfile>classPath.html</anchorfile>
      <anchor>a8a91faa5b4e71c547cc70da13051fa5b</anchor>
      <arglist>(const Path &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Path</name>
      <anchorfile>classPath.html</anchorfile>
      <anchor>ab2f0cd710a7e0d54764556e574445dca</anchor>
      <arglist>(Path &amp;&amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Path &amp;</type>
      <name>operator=</name>
      <anchorfile>classPath.html</anchorfile>
      <anchor>a6a0da1f9754f107fee4c6ef07f0fb683</anchor>
      <arglist>(Path &amp;&amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classPath.html</anchorfile>
      <anchor>a79cc780c856a2a41be5450fe9d4c848c</anchor>
      <arglist>(const Path &amp;) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classPath.html</anchorfile>
      <anchor>ab72bce9d1aeaed78f3ca17c3ed267052</anchor>
      <arglist>(const Path &amp;) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEmpty</name>
      <anchorfile>classPath.html</anchorfile>
      <anchor>a89f5009bba5ce65b71cc8072f18c4775</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Rectangle&lt; float &gt;</type>
      <name>getBounds</name>
      <anchorfile>classPath.html</anchorfile>
      <anchor>ab5059c0564fb8303d6d87dd09ef54ca5</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Rectangle&lt; float &gt;</type>
      <name>getBoundsTransformed</name>
      <anchorfile>classPath.html</anchorfile>
      <anchor>a6e2d36b20feaf2cd1b95c7ff84b13e55</anchor>
      <arglist>(const AffineTransform &amp;transform) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>classPath.html</anchorfile>
      <anchor>ae92401a380bb6e394eaca20fb154cd1b</anchor>
      <arglist>(float x, float y, float tolerance=defaultToleranceForTesting) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>classPath.html</anchorfile>
      <anchor>a101db8b83a7783536cdb4dcb2f362a5e</anchor>
      <arglist>(const Point&lt; float &gt; point, float tolerance=defaultToleranceForTesting) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>intersectsLine</name>
      <anchorfile>classPath.html</anchorfile>
      <anchor>a6ff16eb0e318cfc8a40a462a7abd8637</anchor>
      <arglist>(Line&lt; float &gt; line, float tolerance=defaultToleranceForTesting)</arglist>
    </member>
    <member kind="function">
      <type>Line&lt; float &gt;</type>
      <name>getClippedLine</name>
      <anchorfile>classPath.html</anchorfile>
      <anchor>adeead50145f7c8bd9b44cb31f912e115</anchor>
      <arglist>(Line&lt; float &gt; line, bool keepSectionOutsidePath) const </arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getLength</name>
      <anchorfile>classPath.html</anchorfile>
      <anchor>a90474dab38738086bcdf759910919e92</anchor>
      <arglist>(const AffineTransform &amp;transform=AffineTransform(), float tolerance=defaultToleranceForMeasurement) const </arglist>
    </member>
    <member kind="function">
      <type>Point&lt; float &gt;</type>
      <name>getPointAlongPath</name>
      <anchorfile>classPath.html</anchorfile>
      <anchor>ad08914b2208189c26f43ed74eb74712b</anchor>
      <arglist>(float distanceFromStart, const AffineTransform &amp;transform=AffineTransform(), float tolerance=defaultToleranceForMeasurement) const </arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getNearestPoint</name>
      <anchorfile>classPath.html</anchorfile>
      <anchor>a32fa1defcb4faf5e564c080e0d71a760</anchor>
      <arglist>(Point&lt; float &gt; targetPoint, Point&lt; float &gt; &amp;pointOnPath, const AffineTransform &amp;transform=AffineTransform(), float tolerance=defaultToleranceForMeasurement) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classPath.html</anchorfile>
      <anchor>a69d4fda65a46a1f1f32cbec49ebc0910</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>startNewSubPath</name>
      <anchorfile>classPath.html</anchorfile>
      <anchor>a9c24222b2226b0e082069dbf789dca07</anchor>
      <arglist>(float startX, float startY)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>startNewSubPath</name>
      <anchorfile>classPath.html</anchorfile>
      <anchor>aed6716d1cf75ca2023798cfb1f0b563f</anchor>
      <arglist>(const Point&lt; float &gt; start)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>closeSubPath</name>
      <anchorfile>classPath.html</anchorfile>
      <anchor>a3fb7879fd6e09ce7657260c7b2934162</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lineTo</name>
      <anchorfile>classPath.html</anchorfile>
      <anchor>a6cfdf1dea900089ffee8eea61385062e</anchor>
      <arglist>(float endX, float endY)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lineTo</name>
      <anchorfile>classPath.html</anchorfile>
      <anchor>a82c60c67575e58437fc4e8d3d9609ac6</anchor>
      <arglist>(const Point&lt; float &gt; end)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>quadraticTo</name>
      <anchorfile>classPath.html</anchorfile>
      <anchor>ab50510cf385b9ea3fe64fef6be45f85b</anchor>
      <arglist>(float controlPointX, float controlPointY, float endPointX, float endPointY)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>quadraticTo</name>
      <anchorfile>classPath.html</anchorfile>
      <anchor>ae8f91ebcdb4b89fda5771be9792b29c9</anchor>
      <arglist>(const Point&lt; float &gt; controlPoint, const Point&lt; float &gt; endPoint)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cubicTo</name>
      <anchorfile>classPath.html</anchorfile>
      <anchor>a654df5afb3c113c0f6c5391a88d21811</anchor>
      <arglist>(float controlPoint1X, float controlPoint1Y, float controlPoint2X, float controlPoint2Y, float endPointX, float endPointY)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cubicTo</name>
      <anchorfile>classPath.html</anchorfile>
      <anchor>a781c3db731dd5e18e192ff7de71c3a50</anchor>
      <arglist>(const Point&lt; float &gt; controlPoint1, const Point&lt; float &gt; controlPoint2, const Point&lt; float &gt; endPoint)</arglist>
    </member>
    <member kind="function">
      <type>Point&lt; float &gt;</type>
      <name>getCurrentPosition</name>
      <anchorfile>classPath.html</anchorfile>
      <anchor>ab7cb57ade4414ae7d9503bede1b6977b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addRectangle</name>
      <anchorfile>classPath.html</anchorfile>
      <anchor>af63b8419acedc43ced5c79578be0f0ea</anchor>
      <arglist>(float x, float y, float width, float height)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addRectangle</name>
      <anchorfile>classPath.html</anchorfile>
      <anchor>adddc02efd034e8d1af46cb586e221204</anchor>
      <arglist>(const Rectangle&lt; ValueType &gt; &amp;rectangle)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addRoundedRectangle</name>
      <anchorfile>classPath.html</anchorfile>
      <anchor>a501f83b0e323fe86d33c047f83451065</anchor>
      <arglist>(float x, float y, float width, float height, float cornerSize)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addRoundedRectangle</name>
      <anchorfile>classPath.html</anchorfile>
      <anchor>a4f06d92e26aa83cca9e96110711ffa6a</anchor>
      <arglist>(float x, float y, float width, float height, float cornerSizeX, float cornerSizeY)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addRoundedRectangle</name>
      <anchorfile>classPath.html</anchorfile>
      <anchor>ae99d7f45ea1ba9481a82d9e8ac3b76ab</anchor>
      <arglist>(float x, float y, float width, float height, float cornerSizeX, float cornerSizeY, bool curveTopLeft, bool curveTopRight, bool curveBottomLeft, bool curveBottomRight)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addRoundedRectangle</name>
      <anchorfile>classPath.html</anchorfile>
      <anchor>a8e76921426b35e65345bc76ca462ecf8</anchor>
      <arglist>(const Rectangle&lt; ValueType &gt; &amp;rectangle, float cornerSizeX, float cornerSizeY)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addRoundedRectangle</name>
      <anchorfile>classPath.html</anchorfile>
      <anchor>a1999a0be77548a8624eeb3ce7486256e</anchor>
      <arglist>(const Rectangle&lt; ValueType &gt; &amp;rectangle, float cornerSize)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addTriangle</name>
      <anchorfile>classPath.html</anchorfile>
      <anchor>a1508e0d3dd2048dc5304721bee6ee2c1</anchor>
      <arglist>(float x1, float y1, float x2, float y2, float x3, float y3)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addTriangle</name>
      <anchorfile>classPath.html</anchorfile>
      <anchor>a5916146ffb0f70bbba6a4c72b7f0c3f1</anchor>
      <arglist>(Point&lt; float &gt; point1, Point&lt; float &gt; point2, Point&lt; float &gt; point3)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addQuadrilateral</name>
      <anchorfile>classPath.html</anchorfile>
      <anchor>aced2dafcb8a12f73fcffe032def577be</anchor>
      <arglist>(float x1, float y1, float x2, float y2, float x3, float y3, float x4, float y4)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addEllipse</name>
      <anchorfile>classPath.html</anchorfile>
      <anchor>a7514c5eaa928b64121490a7f0ce3088c</anchor>
      <arglist>(float x, float y, float width, float height)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addEllipse</name>
      <anchorfile>classPath.html</anchorfile>
      <anchor>a34e131589e312853641df2fd6ca22579</anchor>
      <arglist>(Rectangle&lt; float &gt; area)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addArc</name>
      <anchorfile>classPath.html</anchorfile>
      <anchor>a1486b650a586f1be84e2decc47bcc844</anchor>
      <arglist>(float x, float y, float width, float height, float fromRadians, float toRadians, bool startAsNewSubPath=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addCentredArc</name>
      <anchorfile>classPath.html</anchorfile>
      <anchor>ad72e6b6e7a058d521f26443bbddca420</anchor>
      <arglist>(float centreX, float centreY, float radiusX, float radiusY, float rotationOfEllipse, float fromRadians, float toRadians, bool startAsNewSubPath=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addPieSegment</name>
      <anchorfile>classPath.html</anchorfile>
      <anchor>a6c09cddf0316e722af69129c6738be34</anchor>
      <arglist>(float x, float y, float width, float height, float fromRadians, float toRadians, float innerCircleProportionalSize)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addPieSegment</name>
      <anchorfile>classPath.html</anchorfile>
      <anchor>aaf811f4a472bb525e05ec7e5c72c8d85</anchor>
      <arglist>(Rectangle&lt; float &gt; segmentBounds, float fromRadians, float toRadians, float innerCircleProportionalSize)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addLineSegment</name>
      <anchorfile>classPath.html</anchorfile>
      <anchor>a93c4d70100bed1ea07518fea36267035</anchor>
      <arglist>(const Line&lt; float &gt; &amp;line, float lineThickness)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addArrow</name>
      <anchorfile>classPath.html</anchorfile>
      <anchor>a6ff040e1113e2dd7c397511afdfd421a</anchor>
      <arglist>(const Line&lt; float &gt; &amp;line, float lineThickness, float arrowheadWidth, float arrowheadLength)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addPolygon</name>
      <anchorfile>classPath.html</anchorfile>
      <anchor>affd494b97b5cc3ab0253b507d6261769</anchor>
      <arglist>(const Point&lt; float &gt; centre, int numberOfSides, float radius, float startAngle=0.0f)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addStar</name>
      <anchorfile>classPath.html</anchorfile>
      <anchor>a7cea42a900a6b00f6809976b681f7184</anchor>
      <arglist>(const Point&lt; float &gt; centre, int numberOfPoints, float innerRadius, float outerRadius, float startAngle=0.0f)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addBubble</name>
      <anchorfile>classPath.html</anchorfile>
      <anchor>a78e040f49047adb833a5518dbeca8033</anchor>
      <arglist>(const Rectangle&lt; float &gt; &amp;bodyArea, const Rectangle&lt; float &gt; &amp;maximumArea, const Point&lt; float &gt; arrowTipPosition, const float cornerSize, const float arrowBaseWidth)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addPath</name>
      <anchorfile>classPath.html</anchorfile>
      <anchor>ad2d6833a36f348ab33a83309e3956c00</anchor>
      <arglist>(const Path &amp;pathToAppend)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addPath</name>
      <anchorfile>classPath.html</anchorfile>
      <anchor>a12aa38ff3ea67622b43bac7791257865</anchor>
      <arglist>(const Path &amp;pathToAppend, const AffineTransform &amp;transformToApply)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swapWithPath</name>
      <anchorfile>classPath.html</anchorfile>
      <anchor>a2ee3f81a2712d4c31f59f1a8edba4111</anchor>
      <arglist>(Path &amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>preallocateSpace</name>
      <anchorfile>classPath.html</anchorfile>
      <anchor>aead99ae2d7abf0063362eac7a8e9e776</anchor>
      <arglist>(int numExtraCoordsToMakeSpaceFor)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyTransform</name>
      <anchorfile>classPath.html</anchorfile>
      <anchor>afad2558a4296d94b9f5640281ec3c0c3</anchor>
      <arglist>(const AffineTransform &amp;transform) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scaleToFit</name>
      <anchorfile>classPath.html</anchorfile>
      <anchor>a0df6ffa4073301eb8e2b0436fc3a1359</anchor>
      <arglist>(float x, float y, float width, float height, bool preserveProportions) noexcept</arglist>
    </member>
    <member kind="function">
      <type>AffineTransform</type>
      <name>getTransformToScaleToFit</name>
      <anchorfile>classPath.html</anchorfile>
      <anchor>a338cb795bde71ad0624c53deb9ab6457</anchor>
      <arglist>(float x, float y, float width, float height, bool preserveProportions, Justification justificationType=Justification::centred) const </arglist>
    </member>
    <member kind="function">
      <type>AffineTransform</type>
      <name>getTransformToScaleToFit</name>
      <anchorfile>classPath.html</anchorfile>
      <anchor>add5360c1a1c2969dc4da5ab867313679</anchor>
      <arglist>(const Rectangle&lt; float &gt; &amp;area, bool preserveProportions, Justification justificationType=Justification::centred) const </arglist>
    </member>
    <member kind="function">
      <type>Path</type>
      <name>createPathWithRoundedCorners</name>
      <anchorfile>classPath.html</anchorfile>
      <anchor>a6fb9449e40a0ed3f86c31d538e8777ef</anchor>
      <arglist>(float cornerRadius) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUsingNonZeroWinding</name>
      <anchorfile>classPath.html</anchorfile>
      <anchor>a30f7bc89e2300f810a12f41bf76c5e9a</anchor>
      <arglist>(bool isNonZeroWinding) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isUsingNonZeroWinding</name>
      <anchorfile>classPath.html</anchorfile>
      <anchor>ab820b1a4efce998fe33b3959e985f0be</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>loadPathFromStream</name>
      <anchorfile>classPath.html</anchorfile>
      <anchor>a00e0e38020c035feb29e498a0ab93433</anchor>
      <arglist>(InputStream &amp;source)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>loadPathFromData</name>
      <anchorfile>classPath.html</anchorfile>
      <anchor>a1f89b06ebcaac3150d8e6a1483ce1e28</anchor>
      <arglist>(const void *data, size_t numberOfBytes)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writePathToStream</name>
      <anchorfile>classPath.html</anchorfile>
      <anchor>aba2eb076252eb29a04205182d6384726</anchor>
      <arglist>(OutputStream &amp;destination) const </arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>toString</name>
      <anchorfile>classPath.html</anchorfile>
      <anchor>a77b7868359fbdc220e6326789e96f2d4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>restoreFromString</name>
      <anchorfile>classPath.html</anchorfile>
      <anchor>aef179732c86b368fc6461d889fad4d6b</anchor>
      <arglist>(StringRef stringVersion)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const float</type>
      <name>defaultToleranceForTesting</name>
      <anchorfile>classPath.html</anchorfile>
      <anchor>aa23f987b8292143c3c9a6d9b0a131c3b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const float</type>
      <name>defaultToleranceForMeasurement</name>
      <anchorfile>classPath.html</anchorfile>
      <anchor>a8e27579a740ab71d223ea7398a995fbb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Path::Iterator</name>
    <filename>classPath_1_1Iterator.html</filename>
    <member kind="enumeration">
      <type></type>
      <name>PathElementType</name>
      <anchorfile>classPath_1_1Iterator.html</anchorfile>
      <anchor>a62b1a329e3fdbcbdad78bb6c90c7bcfd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>startNewSubPath</name>
      <anchorfile>classPath_1_1Iterator.html</anchorfile>
      <anchor>a62b1a329e3fdbcbdad78bb6c90c7bcfdaebfff5dcac5415d6c7274ad2ef633215</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>lineTo</name>
      <anchorfile>classPath_1_1Iterator.html</anchorfile>
      <anchor>a62b1a329e3fdbcbdad78bb6c90c7bcfdabbd031b257d50abb77ee0c755f31b8e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>quadraticTo</name>
      <anchorfile>classPath_1_1Iterator.html</anchorfile>
      <anchor>a62b1a329e3fdbcbdad78bb6c90c7bcfda3a092657aa2dec64c33926a6528c9f9b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>cubicTo</name>
      <anchorfile>classPath_1_1Iterator.html</anchorfile>
      <anchor>a62b1a329e3fdbcbdad78bb6c90c7bcfda564006cee15d99bd97abe4a506231d87</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>closePath</name>
      <anchorfile>classPath_1_1Iterator.html</anchorfile>
      <anchor>a62b1a329e3fdbcbdad78bb6c90c7bcfda38a8ed95a6ef321e0a558c3807bac952</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Iterator</name>
      <anchorfile>classPath_1_1Iterator.html</anchorfile>
      <anchor>aa0ad8341b6836a7ae789faa10bc7de5f</anchor>
      <arglist>(const Path &amp;path) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Iterator</name>
      <anchorfile>classPath_1_1Iterator.html</anchorfile>
      <anchor>ae557c161b61d99249e5c6c061bf0e7ab</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>next</name>
      <anchorfile>classPath_1_1Iterator.html</anchorfile>
      <anchor>a653632995fb11345bbb9660e071cf7b9</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="variable">
      <type>PathElementType</type>
      <name>elementType</name>
      <anchorfile>classPath_1_1Iterator.html</anchorfile>
      <anchor>a3b33636d181ff130a4c0e475da2824db</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>x1</name>
      <anchorfile>classPath_1_1Iterator.html</anchorfile>
      <anchor>a0041a7b85083e9083c570b8b46a96d91</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>y1</name>
      <anchorfile>classPath_1_1Iterator.html</anchorfile>
      <anchor>a38ababca84bdd463b75eadb408406c36</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>x2</name>
      <anchorfile>classPath_1_1Iterator.html</anchorfile>
      <anchor>a2f5da180f00bd2e9356d65b2c241d52e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>y2</name>
      <anchorfile>classPath_1_1Iterator.html</anchorfile>
      <anchor>a84aee9a5927e034627c1fb4366ee9aa6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>x3</name>
      <anchorfile>classPath_1_1Iterator.html</anchorfile>
      <anchor>afb477336904d08b7869a536444071df0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>y3</name>
      <anchorfile>classPath_1_1Iterator.html</anchorfile>
      <anchor>a3981516b86cfb813b61d4a737be307ea</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PathFlatteningIterator</name>
    <filename>classPathFlatteningIterator.html</filename>
    <member kind="function">
      <type></type>
      <name>PathFlatteningIterator</name>
      <anchorfile>classPathFlatteningIterator.html</anchorfile>
      <anchor>a54f878dce32e05639dae4e3ebdc103e1</anchor>
      <arglist>(const Path &amp;path, const AffineTransform &amp;transform=AffineTransform(), float tolerance=Path::defaultToleranceForMeasurement)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~PathFlatteningIterator</name>
      <anchorfile>classPathFlatteningIterator.html</anchorfile>
      <anchor>a907158adef4ad38fd4899142b237106f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>next</name>
      <anchorfile>classPathFlatteningIterator.html</anchorfile>
      <anchor>a39a62cacf05fae6d38a0df4f250e5538</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isLastInSubpath</name>
      <anchorfile>classPathFlatteningIterator.html</anchorfile>
      <anchor>a5f446bc9d137f2d04dbbfbebebce0267</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>x1</name>
      <anchorfile>classPathFlatteningIterator.html</anchorfile>
      <anchor>aeb4902696a4f694a69eb7c48b274b2ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>y1</name>
      <anchorfile>classPathFlatteningIterator.html</anchorfile>
      <anchor>a6c4a3280b8b9504e38bc1cb739ab07e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>x2</name>
      <anchorfile>classPathFlatteningIterator.html</anchorfile>
      <anchor>a88aeb6be633806b5b6e2e8cc7172e1e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>y2</name>
      <anchorfile>classPathFlatteningIterator.html</anchorfile>
      <anchor>ad2ae4ff40b30bcc1c4704542d2c93003</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>closesSubPath</name>
      <anchorfile>classPathFlatteningIterator.html</anchorfile>
      <anchor>ac102af0a5ac3dfd026488c1efea1b8ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>subPathIndex</name>
      <anchorfile>classPathFlatteningIterator.html</anchorfile>
      <anchor>a96ac386608cfe18dde7de5a433aac417</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PathStrokeType</name>
    <filename>classPathStrokeType.html</filename>
    <member kind="enumeration">
      <type></type>
      <name>JointStyle</name>
      <anchorfile>classPathStrokeType.html</anchorfile>
      <anchor>af1cf21018ccb9aa84572c1da4ae513b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>mitered</name>
      <anchorfile>classPathStrokeType.html</anchorfile>
      <anchor>af1cf21018ccb9aa84572c1da4ae513b8ae51af2220424cff8ab85409c4f7659b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>curved</name>
      <anchorfile>classPathStrokeType.html</anchorfile>
      <anchor>af1cf21018ccb9aa84572c1da4ae513b8aa0e50e387cbe6533b830061006cb3747</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>beveled</name>
      <anchorfile>classPathStrokeType.html</anchorfile>
      <anchor>af1cf21018ccb9aa84572c1da4ae513b8a957c356587532b49af11000b024bd38b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>EndCapStyle</name>
      <anchorfile>classPathStrokeType.html</anchorfile>
      <anchor>a9050e37133047ab699b44b704e4f96cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>butt</name>
      <anchorfile>classPathStrokeType.html</anchorfile>
      <anchor>a9050e37133047ab699b44b704e4f96cfa05f422ecf6a99eb2eed32a6d67795b38</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>square</name>
      <anchorfile>classPathStrokeType.html</anchorfile>
      <anchor>a9050e37133047ab699b44b704e4f96cfabed6afb274b3942d54f510ba65281cc8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>rounded</name>
      <anchorfile>classPathStrokeType.html</anchorfile>
      <anchor>a9050e37133047ab699b44b704e4f96cfa6b01d7b3e9809f0b62dcb151d552a96f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PathStrokeType</name>
      <anchorfile>classPathStrokeType.html</anchorfile>
      <anchor>a13807bdde000cb2dcc1da0360ba83178</anchor>
      <arglist>(float strokeThickness) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PathStrokeType</name>
      <anchorfile>classPathStrokeType.html</anchorfile>
      <anchor>af2c1606aaa50cdb9e278a22173f8ccff</anchor>
      <arglist>(float strokeThickness, JointStyle jointStyle, EndCapStyle endStyle=butt) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PathStrokeType</name>
      <anchorfile>classPathStrokeType.html</anchorfile>
      <anchor>a2d63b070c23e1aaa757759c11c3b7608</anchor>
      <arglist>(const PathStrokeType &amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PathStrokeType &amp;</type>
      <name>operator=</name>
      <anchorfile>classPathStrokeType.html</anchorfile>
      <anchor>a4ba87ab6762dfb6df3d22957b7e8ab83</anchor>
      <arglist>(const PathStrokeType &amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~PathStrokeType</name>
      <anchorfile>classPathStrokeType.html</anchorfile>
      <anchor>a54a82633fb4ad911609e40fcd555b5c9</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>createStrokedPath</name>
      <anchorfile>classPathStrokeType.html</anchorfile>
      <anchor>aedc74f94b3607fe0a0ce24759704220f</anchor>
      <arglist>(Path &amp;destPath, const Path &amp;sourcePath, const AffineTransform &amp;transform=AffineTransform(), float extraAccuracy=1.0f) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>createDashedStroke</name>
      <anchorfile>classPathStrokeType.html</anchorfile>
      <anchor>afa83c298100e76050fbe36204ef4e497</anchor>
      <arglist>(Path &amp;destPath, const Path &amp;sourcePath, const float *dashLengths, int numDashLengths, const AffineTransform &amp;transform=AffineTransform(), float extraAccuracy=1.0f) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>createStrokeWithArrowheads</name>
      <anchorfile>classPathStrokeType.html</anchorfile>
      <anchor>ae16cf998314ba8480165a4beefc5010d</anchor>
      <arglist>(Path &amp;destPath, const Path &amp;sourcePath, float arrowheadStartWidth, float arrowheadStartLength, float arrowheadEndWidth, float arrowheadEndLength, const AffineTransform &amp;transform=AffineTransform(), float extraAccuracy=1.0f) const </arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getStrokeThickness</name>
      <anchorfile>classPathStrokeType.html</anchorfile>
      <anchor>aeb4e2cdb110b24beec90fb06c4741976</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStrokeThickness</name>
      <anchorfile>classPathStrokeType.html</anchorfile>
      <anchor>a0289f7d29acd4d3653bafb1e0f6ba911</anchor>
      <arglist>(float newThickness) noexcept</arglist>
    </member>
    <member kind="function">
      <type>JointStyle</type>
      <name>getJointStyle</name>
      <anchorfile>classPathStrokeType.html</anchorfile>
      <anchor>ad6f447c1bea224d4bdbb7e65f5735f20</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setJointStyle</name>
      <anchorfile>classPathStrokeType.html</anchorfile>
      <anchor>abf96f987f1412f4910faa6836ab2300f</anchor>
      <arglist>(JointStyle newStyle) noexcept</arglist>
    </member>
    <member kind="function">
      <type>EndCapStyle</type>
      <name>getEndStyle</name>
      <anchorfile>classPathStrokeType.html</anchorfile>
      <anchor>a603606adc2f4d50791cc33b731a4fee9</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEndStyle</name>
      <anchorfile>classPathStrokeType.html</anchorfile>
      <anchor>a7302b4ab3dd8e55cd1fa7660e5d01245</anchor>
      <arglist>(EndCapStyle newStyle) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classPathStrokeType.html</anchorfile>
      <anchor>a828af975b139890303e78a6dcc6b933d</anchor>
      <arglist>(const PathStrokeType &amp;) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classPathStrokeType.html</anchorfile>
      <anchor>add6bea8af7deb5d922d2a9f9fcc524a5</anchor>
      <arglist>(const PathStrokeType &amp;) const noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PerformanceCounter</name>
    <filename>classPerformanceCounter.html</filename>
    <class kind="struct">PerformanceCounter::Statistics</class>
    <member kind="function">
      <type></type>
      <name>PerformanceCounter</name>
      <anchorfile>classPerformanceCounter.html</anchorfile>
      <anchor>a3c593ff0aded29b5b63ea589eae7a639</anchor>
      <arglist>(const String &amp;counterName, int runsPerPrintout=100, const File &amp;loggingFile=File())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~PerformanceCounter</name>
      <anchorfile>classPerformanceCounter.html</anchorfile>
      <anchor>a6f6a2cf85ae09a5e61c7ed7bb9027b4e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>classPerformanceCounter.html</anchorfile>
      <anchor>a8ab0ff98c5fa26c0c8823382f2275721</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>stop</name>
      <anchorfile>classPerformanceCounter.html</anchorfile>
      <anchor>ae134b64bcca16ce2183c16c789397972</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printStatistics</name>
      <anchorfile>classPerformanceCounter.html</anchorfile>
      <anchor>a4be98835cd71c8b7bdd6bf93f9b83000</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Statistics</type>
      <name>getStatisticsAndReset</name>
      <anchorfile>classPerformanceCounter.html</anchorfile>
      <anchor>a0e22d532f8ce8e946f9c6fee440e77aa</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>PerformanceCounter::Statistics</name>
    <filename>structPerformanceCounter_1_1Statistics.html</filename>
    <member kind="function">
      <type></type>
      <name>Statistics</name>
      <anchorfile>structPerformanceCounter_1_1Statistics.html</anchorfile>
      <anchor>ae0921d49676f4da623b0f7f96db90348</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>structPerformanceCounter_1_1Statistics.html</anchorfile>
      <anchor>a51efc2352dc14bc23cf5ef5182412344</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>toString</name>
      <anchorfile>structPerformanceCounter_1_1Statistics.html</anchorfile>
      <anchor>a90f9454a208e6ba1f750b74b673d7764</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addResult</name>
      <anchorfile>structPerformanceCounter_1_1Statistics.html</anchorfile>
      <anchor>ac12d8b446f67b62301f577ace19b38b4</anchor>
      <arglist>(double elapsed) noexcept</arglist>
    </member>
    <member kind="variable">
      <type>String</type>
      <name>name</name>
      <anchorfile>structPerformanceCounter_1_1Statistics.html</anchorfile>
      <anchor>a006372a0198101b483e7465a27b2d58a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>averageSeconds</name>
      <anchorfile>structPerformanceCounter_1_1Statistics.html</anchorfile>
      <anchor>a1ddbe61fd1a766973cc19d9c3432a4c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>maximumSeconds</name>
      <anchorfile>structPerformanceCounter_1_1Statistics.html</anchorfile>
      <anchor>a560f9606307b0a9a7b4f44d839c80f61</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>minimumSeconds</name>
      <anchorfile>structPerformanceCounter_1_1Statistics.html</anchorfile>
      <anchor>a63ac69c1fee92ba8d3cf31f34aec53da</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>totalSeconds</name>
      <anchorfile>structPerformanceCounter_1_1Statistics.html</anchorfile>
      <anchor>af04ffab23f93875202a7df925e240e77</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int64</type>
      <name>numRuns</name>
      <anchorfile>structPerformanceCounter_1_1Statistics.html</anchorfile>
      <anchor>a0bf8bbdfaa5b9d4c392bbe0fd7fb3b94</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PhysicalTopologySource</name>
    <filename>classPhysicalTopologySource.html</filename>
    <base>TopologySource</base>
    <class kind="struct">PhysicalTopologySource::DeviceConnection</class>
    <class kind="struct">PhysicalTopologySource::DeviceDetector</class>
    <member kind="function">
      <type></type>
      <name>PhysicalTopologySource</name>
      <anchorfile>classPhysicalTopologySource.html</anchorfile>
      <anchor>a626fd1c4ef50b821fe8905d1535f73f5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~PhysicalTopologySource</name>
      <anchorfile>classPhysicalTopologySource.html</anchorfile>
      <anchor>ae24d54e68d1d427d71c87d0dd7794096</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>BlockTopology</type>
      <name>getCurrentTopology</name>
      <anchorfile>classPhysicalTopologySource.html</anchorfile>
      <anchor>a5b05bfe7c015f971273087312d21ea89</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cancelAllActiveTouches</name>
      <anchorfile>classPhysicalTopologySource.html</anchorfile>
      <anchor>accb98702a15077aa2e2cca731d13c6a3</anchor>
      <arglist>() noexceptoverride</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PhysicalTopologySource</name>
      <anchorfile>classPhysicalTopologySource.html</anchorfile>
      <anchor>a20031cc8685d98abd0cbc55951774271</anchor>
      <arglist>(DeviceDetector &amp;detectorToUse)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TopologySource</name>
      <anchorfile>classTopologySource.html</anchorfile>
      <anchor>ade15ca0fdbe3f3b18dc587efce4cd22e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addListener</name>
      <anchorfile>classTopologySource.html</anchorfile>
      <anchor>a69466671a2d86f6eb2cc7581a3d33673</anchor>
      <arglist>(Listener *l)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeListener</name>
      <anchorfile>classTopologySource.html</anchorfile>
      <anchor>a22c80cc4169578b03a30b94f17744955</anchor>
      <arglist>(Listener *l)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const char *const *</type>
      <name>getStandardLittleFootFunctions</name>
      <anchorfile>classPhysicalTopologySource.html</anchorfile>
      <anchor>a33811ad9256940e13e657febd014ad70</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>hasOwnServiceTimer</name>
      <anchorfile>classPhysicalTopologySource.html</anchorfile>
      <anchor>af81cb87dee3c3d93ce6e739238909097</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleTimerTick</name>
      <anchorfile>classPhysicalTopologySource.html</anchorfile>
      <anchor>a80bb01d5de8c19046589aa058da1a100</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>juce::ListenerList&lt; Listener &gt;</type>
      <name>listeners</name>
      <anchorfile>classTopologySource.html</anchorfile>
      <anchor>a3c9f12605642baff76d5da04e9452b3d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>PhysicalTopologySource::DeviceConnection</name>
    <filename>structPhysicalTopologySource_1_1DeviceConnection.html</filename>
    <member kind="function">
      <type></type>
      <name>DeviceConnection</name>
      <anchorfile>structPhysicalTopologySource_1_1DeviceConnection.html</anchorfile>
      <anchor>a6d1015ef0d9f81d18a3f0afd0501db6e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~DeviceConnection</name>
      <anchorfile>structPhysicalTopologySource_1_1DeviceConnection.html</anchorfile>
      <anchor>aa345357378a4f9e08397b0f2058e2de9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>sendMessageToDevice</name>
      <anchorfile>structPhysicalTopologySource_1_1DeviceConnection.html</anchorfile>
      <anchor>ac8ced6a11a32b92ddcdd5ee76dff712c</anchor>
      <arglist>(const void *data, size_t dataSize)=0</arglist>
    </member>
    <member kind="variable">
      <type>std::function&lt; void(const void *data, size_t dataSize)&gt;</type>
      <name>handleMessageFromDevice</name>
      <anchorfile>structPhysicalTopologySource_1_1DeviceConnection.html</anchorfile>
      <anchor>a2ce59400d3693dba6704feb9b9588822</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>PhysicalTopologySource::DeviceDetector</name>
    <filename>structPhysicalTopologySource_1_1DeviceDetector.html</filename>
    <member kind="function">
      <type></type>
      <name>DeviceDetector</name>
      <anchorfile>structPhysicalTopologySource_1_1DeviceDetector.html</anchorfile>
      <anchor>aa4328367ecaefefd78cfe8ef38657725</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~DeviceDetector</name>
      <anchorfile>structPhysicalTopologySource_1_1DeviceDetector.html</anchorfile>
      <anchor>a6f998706960d38d4e9262b2cd96ba6b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual juce::StringArray</type>
      <name>scanForDevices</name>
      <anchorfile>structPhysicalTopologySource_1_1DeviceDetector.html</anchorfile>
      <anchor>a034003b8776efdcbc4bec3d98cd754bc</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual DeviceConnection *</type>
      <name>openDevice</name>
      <anchorfile>structPhysicalTopologySource_1_1DeviceDetector.html</anchorfile>
      <anchor>aa37aa7bdd40c37c8d29f5ad95e7a361b</anchor>
      <arglist>(int index)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PixelAlpha</name>
    <filename>classPixelAlpha.html</filename>
    <member kind="enumvalue">
      <type>@</type>
      <name>indexA</name>
      <anchorfile>classPixelAlpha.html</anchorfile>
      <anchor>a9bafe936852a1044d21215fd707e832ca31d54b036f46396c28eb848b84ee6ba7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PixelAlpha</name>
      <anchorfile>classPixelAlpha.html</anchorfile>
      <anchor>a5f467ee3b9b2765c16e3fc6c604b74ed</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~PixelAlpha</name>
      <anchorfile>classPixelAlpha.html</anchorfile>
      <anchor>a5cb873b11b1fe59592a6d8db19736d3b</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>forcedinline uint32</type>
      <name>getNativeARGB</name>
      <anchorfile>classPixelAlpha.html</anchorfile>
      <anchor>ab4b3835ad83682dc953f5717a43e3804</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>forcedinline uint32</type>
      <name>getInARGBMaskOrder</name>
      <anchorfile>classPixelAlpha.html</anchorfile>
      <anchor>ac83c1528cc922e8a4a2884e0409eaa87</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>uint32</type>
      <name>getInARGBMemoryOrder</name>
      <anchorfile>classPixelAlpha.html</anchorfile>
      <anchor>a86e524943b142407678977e4b52fc6b1</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>forcedinline uint32</type>
      <name>getEvenBytes</name>
      <anchorfile>classPixelAlpha.html</anchorfile>
      <anchor>a069c94645ad1c3922b5b7520e2d5599c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>forcedinline uint32</type>
      <name>getOddBytes</name>
      <anchorfile>classPixelAlpha.html</anchorfile>
      <anchor>a769b88b69cd1fbddcca263b03bd8b97a</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>forcedinline uint8</type>
      <name>getAlpha</name>
      <anchorfile>classPixelAlpha.html</anchorfile>
      <anchor>af52357a6af759e4c14f2241ee65658db</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>forcedinline uint8 &amp;</type>
      <name>getAlpha</name>
      <anchorfile>classPixelAlpha.html</anchorfile>
      <anchor>a1af0c7d95b50f35083a750bba0d63e59</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>forcedinline uint8</type>
      <name>getRed</name>
      <anchorfile>classPixelAlpha.html</anchorfile>
      <anchor>abe09f7dca64ace709f4549d4d7f52a6b</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>forcedinline uint8</type>
      <name>getGreen</name>
      <anchorfile>classPixelAlpha.html</anchorfile>
      <anchor>a20e33bf48279362d6b97cea62fb8e686</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>forcedinline uint8</type>
      <name>getBlue</name>
      <anchorfile>classPixelAlpha.html</anchorfile>
      <anchor>a0b34ddebf90051d609abbb19955e7d8f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>forcedinline void</type>
      <name>set</name>
      <anchorfile>classPixelAlpha.html</anchorfile>
      <anchor>ae7576d9af15ae35b0f39c8b89a9368a4</anchor>
      <arglist>(const Pixel &amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type>forcedinline void</type>
      <name>setARGB</name>
      <anchorfile>classPixelAlpha.html</anchorfile>
      <anchor>acf7b41af1aa8dad22c33bb34830f3b15</anchor>
      <arglist>(const uint8 a_, const uint8, const uint8, const uint8) noexcept</arglist>
    </member>
    <member kind="function">
      <type>forcedinline void</type>
      <name>blend</name>
      <anchorfile>classPixelAlpha.html</anchorfile>
      <anchor>a6e5ce1211bea45d35d14ef55c0471901</anchor>
      <arglist>(const Pixel &amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type>forcedinline void</type>
      <name>blend</name>
      <anchorfile>classPixelAlpha.html</anchorfile>
      <anchor>a68dd6a81bb823df97c9770d423a295b5</anchor>
      <arglist>(const Pixel &amp;src, uint32 extraAlpha) noexcept</arglist>
    </member>
    <member kind="function">
      <type>forcedinline void</type>
      <name>tween</name>
      <anchorfile>classPixelAlpha.html</anchorfile>
      <anchor>ae3b6ad3857a462fceb79ad782fb8022d</anchor>
      <arglist>(const Pixel &amp;src, const uint32 amount) noexcept</arglist>
    </member>
    <member kind="function">
      <type>forcedinline void</type>
      <name>setAlpha</name>
      <anchorfile>classPixelAlpha.html</anchorfile>
      <anchor>ae59b4356756b130d16b27652bc0395c4</anchor>
      <arglist>(const uint8 newAlpha) noexcept</arglist>
    </member>
    <member kind="function">
      <type>forcedinline void</type>
      <name>multiplyAlpha</name>
      <anchorfile>classPixelAlpha.html</anchorfile>
      <anchor>a1e5cac4a57706aee687dbe57c65db42e</anchor>
      <arglist>(int multiplier) noexcept</arglist>
    </member>
    <member kind="function">
      <type>forcedinline void</type>
      <name>multiplyAlpha</name>
      <anchorfile>classPixelAlpha.html</anchorfile>
      <anchor>a06a335fd58ea3b0240baf4685421c5d1</anchor>
      <arglist>(const float multiplier) noexcept</arglist>
    </member>
    <member kind="function">
      <type>forcedinline void</type>
      <name>premultiply</name>
      <anchorfile>classPixelAlpha.html</anchorfile>
      <anchor>afc74783ac4f996a4f41df985c107ed52</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>forcedinline void</type>
      <name>unpremultiply</name>
      <anchorfile>classPixelAlpha.html</anchorfile>
      <anchor>a739f660b3d4b93d86bf99e791aea1999</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>forcedinline void</type>
      <name>desaturate</name>
      <anchorfile>classPixelAlpha.html</anchorfile>
      <anchor>adfb09bc7b34321939d9ad6b07b76c220</anchor>
      <arglist>() noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PixelARGB</name>
    <filename>classPixelARGB.html</filename>
    <member kind="enumvalue">
      <type>@</type>
      <name>indexA</name>
      <anchorfile>classPixelARGB.html</anchorfile>
      <anchor>a59039374e21c0c2576269f84c13b9c41ae2c758a6eebfdf52dde60687f68a68ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>indexR</name>
      <anchorfile>classPixelARGB.html</anchorfile>
      <anchor>a59039374e21c0c2576269f84c13b9c41a5d38bdd8f5ffaa9917b6fff622ddb23f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>indexG</name>
      <anchorfile>classPixelARGB.html</anchorfile>
      <anchor>a59039374e21c0c2576269f84c13b9c41a9f00e7f7cddc8b6d27053806abb1630a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>indexB</name>
      <anchorfile>classPixelARGB.html</anchorfile>
      <anchor>a59039374e21c0c2576269f84c13b9c41a7eab5933695a1fcdfee5a25cb5ef60ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PixelARGB</name>
      <anchorfile>classPixelARGB.html</anchorfile>
      <anchor>ad7650037b9e9534c11eb6a4b2a80d402</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~PixelARGB</name>
      <anchorfile>classPixelARGB.html</anchorfile>
      <anchor>ae961efe730a71c5eae1197d908be61a8</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PixelARGB</name>
      <anchorfile>classPixelARGB.html</anchorfile>
      <anchor>ae81116d72bd66ae84f2a4893f8704dd5</anchor>
      <arglist>(const uint8 a, const uint8 r, const uint8 g, const uint8 b) noexcept</arglist>
    </member>
    <member kind="function">
      <type>forcedinline uint32</type>
      <name>getNativeARGB</name>
      <anchorfile>classPixelARGB.html</anchorfile>
      <anchor>aeccc464b04bebbeb8fa721340433c035</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>forcedinline uint32</type>
      <name>getInARGBMaskOrder</name>
      <anchorfile>classPixelARGB.html</anchorfile>
      <anchor>a4ab57cb14ec71b5113226cfdc477a5cf</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>uint32</type>
      <name>getInARGBMemoryOrder</name>
      <anchorfile>classPixelARGB.html</anchorfile>
      <anchor>a1f31ac28866d97bf44632b876140f88b</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>forcedinline uint32</type>
      <name>getEvenBytes</name>
      <anchorfile>classPixelARGB.html</anchorfile>
      <anchor>a4af6a97626701a864011185574456fec</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>forcedinline uint32</type>
      <name>getOddBytes</name>
      <anchorfile>classPixelARGB.html</anchorfile>
      <anchor>ab069bd7777789034829231e19d8e4372</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>forcedinline uint8</type>
      <name>getAlpha</name>
      <anchorfile>classPixelARGB.html</anchorfile>
      <anchor>a578d8073cc8fc06b02bf5376c0fb3769</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>forcedinline uint8</type>
      <name>getRed</name>
      <anchorfile>classPixelARGB.html</anchorfile>
      <anchor>afbe911418e1dd168d01d287376ea89fc</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>forcedinline uint8</type>
      <name>getGreen</name>
      <anchorfile>classPixelARGB.html</anchorfile>
      <anchor>aba1cdf360beb38ab4ee87d686e356171</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>forcedinline uint8</type>
      <name>getBlue</name>
      <anchorfile>classPixelARGB.html</anchorfile>
      <anchor>a7dbf874cf5e5e876c87ed25c65014e59</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>forcedinline uint8 &amp;</type>
      <name>getAlpha</name>
      <anchorfile>classPixelARGB.html</anchorfile>
      <anchor>a22db13fce3d18107c47ee3187f9b49d3</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>forcedinline uint8 &amp;</type>
      <name>getRed</name>
      <anchorfile>classPixelARGB.html</anchorfile>
      <anchor>a6d47db1b0f0c41954c1be8a249956967</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>forcedinline uint8 &amp;</type>
      <name>getGreen</name>
      <anchorfile>classPixelARGB.html</anchorfile>
      <anchor>a2197789e3dc167f7404a5d7642ee80b4</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>forcedinline uint8 &amp;</type>
      <name>getBlue</name>
      <anchorfile>classPixelARGB.html</anchorfile>
      <anchor>a3687dc1f7b48d10fe0a56699a4039986</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>forcedinline void</type>
      <name>set</name>
      <anchorfile>classPixelARGB.html</anchorfile>
      <anchor>a5c72335f6ca8533026d8b484f7a995b2</anchor>
      <arglist>(const Pixel &amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setARGB</name>
      <anchorfile>classPixelARGB.html</anchorfile>
      <anchor>a1ba9a0e56449373b863e8b683f5ef590</anchor>
      <arglist>(const uint8 a, const uint8 r, const uint8 g, const uint8 b) noexcept</arglist>
    </member>
    <member kind="function">
      <type>forcedinline void</type>
      <name>blend</name>
      <anchorfile>classPixelARGB.html</anchorfile>
      <anchor>a2bd4f6bc1869f0f6b60468746e4beece</anchor>
      <arglist>(const Pixel &amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type>forcedinline void</type>
      <name>blend</name>
      <anchorfile>classPixelARGB.html</anchorfile>
      <anchor>a0e84fcf3f6d54942d0508023aa191eb2</anchor>
      <arglist>(const PixelRGB src) noexcept</arglist>
    </member>
    <member kind="function">
      <type>forcedinline void</type>
      <name>blend</name>
      <anchorfile>classPixelARGB.html</anchorfile>
      <anchor>a84ded96012732f73dfcbf8fd763239dd</anchor>
      <arglist>(const Pixel &amp;src, uint32 extraAlpha) noexcept</arglist>
    </member>
    <member kind="function">
      <type>forcedinline void</type>
      <name>tween</name>
      <anchorfile>classPixelARGB.html</anchorfile>
      <anchor>ae9961674c67b52486549b336095811da</anchor>
      <arglist>(const Pixel &amp;src, const uint32 amount) noexcept</arglist>
    </member>
    <member kind="function">
      <type>forcedinline void</type>
      <name>setAlpha</name>
      <anchorfile>classPixelARGB.html</anchorfile>
      <anchor>a66ca919eb4c95dd4e7489038dac2f2d8</anchor>
      <arglist>(const uint8 newAlpha) noexcept</arglist>
    </member>
    <member kind="function">
      <type>forcedinline void</type>
      <name>multiplyAlpha</name>
      <anchorfile>classPixelARGB.html</anchorfile>
      <anchor>aa7ee03257f712ffdfb80cc1d90a863ef</anchor>
      <arglist>(int multiplier) noexcept</arglist>
    </member>
    <member kind="function">
      <type>forcedinline void</type>
      <name>multiplyAlpha</name>
      <anchorfile>classPixelARGB.html</anchorfile>
      <anchor>a15a7ef1dbfa4f44753da1bc57a91f0b1</anchor>
      <arglist>(const float multiplier) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PixelARGB</type>
      <name>getUnpremultiplied</name>
      <anchorfile>classPixelARGB.html</anchorfile>
      <anchor>ad776536ef8434b6b1ab252a87727ea72</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>forcedinline void</type>
      <name>premultiply</name>
      <anchorfile>classPixelARGB.html</anchorfile>
      <anchor>a825c18e92a2159d93687b4b161ade875</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>forcedinline void</type>
      <name>unpremultiply</name>
      <anchorfile>classPixelARGB.html</anchorfile>
      <anchor>a6270aec4f8b98a22f3487be2b8db4dc2</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>forcedinline void</type>
      <name>desaturate</name>
      <anchorfile>classPixelARGB.html</anchorfile>
      <anchor>a4ee58dea3b504fcae39680bbd3b54106</anchor>
      <arglist>() noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PixelRGB</name>
    <filename>classPixelRGB.html</filename>
    <member kind="enumvalue">
      <type>@</type>
      <name>indexR</name>
      <anchorfile>classPixelRGB.html</anchorfile>
      <anchor>af1c1cc31c25d4dee0f61f266271849b8a2725faa86a75bea4242137ab8b9fb128</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>indexG</name>
      <anchorfile>classPixelRGB.html</anchorfile>
      <anchor>af1c1cc31c25d4dee0f61f266271849b8ae889bdfe358ad3b6395e1bf584e198f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>indexB</name>
      <anchorfile>classPixelRGB.html</anchorfile>
      <anchor>af1c1cc31c25d4dee0f61f266271849b8a59222359427902da4ec4353ee7d7c431</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PixelRGB</name>
      <anchorfile>classPixelRGB.html</anchorfile>
      <anchor>ac9fd216e3cccf8f222388b7d18548a8c</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~PixelRGB</name>
      <anchorfile>classPixelRGB.html</anchorfile>
      <anchor>adc6f2c4fbfdb9af6cb06a283f0b0fcd7</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>forcedinline uint32</type>
      <name>getNativeARGB</name>
      <anchorfile>classPixelRGB.html</anchorfile>
      <anchor>ab3eeafaec26c98c11153c3469829067e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>forcedinline uint32</type>
      <name>getInARGBMaskOrder</name>
      <anchorfile>classPixelRGB.html</anchorfile>
      <anchor>ac48c9b4c90c3dc5224aaadc7d581e27a</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>uint32</type>
      <name>getInARGBMemoryOrder</name>
      <anchorfile>classPixelRGB.html</anchorfile>
      <anchor>a37fba955091e639d7f1401cdb841d8ff</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>forcedinline uint32</type>
      <name>getEvenBytes</name>
      <anchorfile>classPixelRGB.html</anchorfile>
      <anchor>a6b144f6a657e7ff62abd6f59b742a787</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>forcedinline uint32</type>
      <name>getOddBytes</name>
      <anchorfile>classPixelRGB.html</anchorfile>
      <anchor>ad30feb7effcf69fd9acc0be0ecd7e357</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>forcedinline uint8</type>
      <name>getAlpha</name>
      <anchorfile>classPixelRGB.html</anchorfile>
      <anchor>a932cebd81f75f0ff9f13c7b8e0339b82</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>forcedinline uint8</type>
      <name>getRed</name>
      <anchorfile>classPixelRGB.html</anchorfile>
      <anchor>a19df8a6d101bb795b7ed25057c964711</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>forcedinline uint8</type>
      <name>getGreen</name>
      <anchorfile>classPixelRGB.html</anchorfile>
      <anchor>a44b8873d8fd580206df89bac652a21c2</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>forcedinline uint8</type>
      <name>getBlue</name>
      <anchorfile>classPixelRGB.html</anchorfile>
      <anchor>a415a25dcd36ef2c0d569b39d603487ac</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>forcedinline uint8 &amp;</type>
      <name>getRed</name>
      <anchorfile>classPixelRGB.html</anchorfile>
      <anchor>af0bbabe8374a710ff177077a7b32c763</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>forcedinline uint8 &amp;</type>
      <name>getGreen</name>
      <anchorfile>classPixelRGB.html</anchorfile>
      <anchor>a2272e79903e1e88b49b08d96e08882df</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>forcedinline uint8 &amp;</type>
      <name>getBlue</name>
      <anchorfile>classPixelRGB.html</anchorfile>
      <anchor>aab22bbea80150e8e2a0104a87b968349</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>forcedinline void</type>
      <name>set</name>
      <anchorfile>classPixelRGB.html</anchorfile>
      <anchor>a1179e367308d07f57857c7c4707d7c3f</anchor>
      <arglist>(const Pixel &amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setARGB</name>
      <anchorfile>classPixelRGB.html</anchorfile>
      <anchor>a552e68cc721bc088f6c972763420d051</anchor>
      <arglist>(const uint8, const uint8 red, const uint8 green, const uint8 blue) noexcept</arglist>
    </member>
    <member kind="function">
      <type>forcedinline void</type>
      <name>blend</name>
      <anchorfile>classPixelRGB.html</anchorfile>
      <anchor>a51ac813b207fd2e900672d76ba02d546</anchor>
      <arglist>(const Pixel &amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type>forcedinline void</type>
      <name>blend</name>
      <anchorfile>classPixelRGB.html</anchorfile>
      <anchor>a96e178ccc403e090dbff6422bb9b2cba</anchor>
      <arglist>(const PixelRGB src) noexcept</arglist>
    </member>
    <member kind="function">
      <type>forcedinline void</type>
      <name>blend</name>
      <anchorfile>classPixelRGB.html</anchorfile>
      <anchor>a5e78165deed6b6da89391ec6b8a9f272</anchor>
      <arglist>(const Pixel &amp;src, uint32 extraAlpha) noexcept</arglist>
    </member>
    <member kind="function">
      <type>forcedinline void</type>
      <name>tween</name>
      <anchorfile>classPixelRGB.html</anchorfile>
      <anchor>aa348334f49c9b85d88fb79d0332b1b90</anchor>
      <arglist>(const Pixel &amp;src, const uint32 amount) noexcept</arglist>
    </member>
    <member kind="function">
      <type>forcedinline void</type>
      <name>setAlpha</name>
      <anchorfile>classPixelRGB.html</anchorfile>
      <anchor>a3d1d18b10119f24d98b268e3a574a6d8</anchor>
      <arglist>(const uint8) noexcept</arglist>
    </member>
    <member kind="function">
      <type>forcedinline void</type>
      <name>multiplyAlpha</name>
      <anchorfile>classPixelRGB.html</anchorfile>
      <anchor>a3ae04d64a7112d6159da2efec4889582</anchor>
      <arglist>(int) noexcept</arglist>
    </member>
    <member kind="function">
      <type>forcedinline void</type>
      <name>multiplyAlpha</name>
      <anchorfile>classPixelRGB.html</anchorfile>
      <anchor>a12973ec4edb0adbd721e0a7d653362e2</anchor>
      <arglist>(float) noexcept</arglist>
    </member>
    <member kind="function">
      <type>forcedinline void</type>
      <name>premultiply</name>
      <anchorfile>classPixelRGB.html</anchorfile>
      <anchor>a8e2419282f881f6823d7899f747c122c</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>forcedinline void</type>
      <name>unpremultiply</name>
      <anchorfile>classPixelRGB.html</anchorfile>
      <anchor>a43bd818ac8d55e02b8b3e14cc865a1b7</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>forcedinline void</type>
      <name>desaturate</name>
      <anchorfile>classPixelRGB.html</anchorfile>
      <anchor>ac2918e55bfa1c745ad3e169b9b342a34</anchor>
      <arglist>() noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PluginDescription</name>
    <filename>classPluginDescription.html</filename>
    <member kind="function">
      <type></type>
      <name>PluginDescription</name>
      <anchorfile>classPluginDescription.html</anchorfile>
      <anchor>a494fe1c041359c47d40f8211ae7c9729</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PluginDescription</name>
      <anchorfile>classPluginDescription.html</anchorfile>
      <anchor>a11a5a158654b97b3606c1e103af113fe</anchor>
      <arglist>(const PluginDescription &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>PluginDescription &amp;</type>
      <name>operator=</name>
      <anchorfile>classPluginDescription.html</anchorfile>
      <anchor>a982fea38b2787923c696556c3d5cdc2a</anchor>
      <arglist>(const PluginDescription &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~PluginDescription</name>
      <anchorfile>classPluginDescription.html</anchorfile>
      <anchor>a730e10660aab4aa5ec0ca483180db481</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isDuplicateOf</name>
      <anchorfile>classPluginDescription.html</anchorfile>
      <anchor>acf20e29a869f64b9273a1840f7c5fba4</anchor>
      <arglist>(const PluginDescription &amp;other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>matchesIdentifierString</name>
      <anchorfile>classPluginDescription.html</anchorfile>
      <anchor>a517ad15c34f6a186d506a4c45886b5e4</anchor>
      <arglist>(const String &amp;identifierString) const </arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>createIdentifierString</name>
      <anchorfile>classPluginDescription.html</anchorfile>
      <anchor>a8afe64a22fd2715edbc22f034f754a1f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>XmlElement *</type>
      <name>createXml</name>
      <anchorfile>classPluginDescription.html</anchorfile>
      <anchor>a4e23eb3d5d991893aec610dbf2b1072b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>loadFromXml</name>
      <anchorfile>classPluginDescription.html</anchorfile>
      <anchor>a5fae3bea93cc8398b3c114dfd52bfd42</anchor>
      <arglist>(const XmlElement &amp;xml)</arglist>
    </member>
    <member kind="variable">
      <type>String</type>
      <name>name</name>
      <anchorfile>classPluginDescription.html</anchorfile>
      <anchor>aea9757db9385b9398598bb65f07667fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>String</type>
      <name>descriptiveName</name>
      <anchorfile>classPluginDescription.html</anchorfile>
      <anchor>a93ddf8b86e68316fc4746eb89c00b52c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>String</type>
      <name>pluginFormatName</name>
      <anchorfile>classPluginDescription.html</anchorfile>
      <anchor>a619a03af08e3904725e0255a28388a19</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>String</type>
      <name>category</name>
      <anchorfile>classPluginDescription.html</anchorfile>
      <anchor>a744b7d9bd85c5b670905ce6c411fa815</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>String</type>
      <name>manufacturerName</name>
      <anchorfile>classPluginDescription.html</anchorfile>
      <anchor>aa8c02c784dc999a1043877b29795fff0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>String</type>
      <name>version</name>
      <anchorfile>classPluginDescription.html</anchorfile>
      <anchor>ad5d55de3c1ad1646e5cc49d04e5c41e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>String</type>
      <name>fileOrIdentifier</name>
      <anchorfile>classPluginDescription.html</anchorfile>
      <anchor>a067e44c64faac07ff146f65b375cec22</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Time</type>
      <name>lastFileModTime</name>
      <anchorfile>classPluginDescription.html</anchorfile>
      <anchor>aa7143b1df0c657008ab9f3f196e63471</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Time</type>
      <name>lastInfoUpdateTime</name>
      <anchorfile>classPluginDescription.html</anchorfile>
      <anchor>a62b03da7c6d39e8b509561d11d98acbc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>uid</name>
      <anchorfile>classPluginDescription.html</anchorfile>
      <anchor>a6bddaeaf4147bb0827c18724cbc7bd4b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>isInstrument</name>
      <anchorfile>classPluginDescription.html</anchorfile>
      <anchor>ada0d12fe7d191f7cd315721f7b965720</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>numInputChannels</name>
      <anchorfile>classPluginDescription.html</anchorfile>
      <anchor>aae10fb65ec4fcbfcf35aed5d46b98932</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>numOutputChannels</name>
      <anchorfile>classPluginDescription.html</anchorfile>
      <anchor>a3b04bfe9e7ede6557b7de388c70a8888</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>hasSharedContainer</name>
      <anchorfile>classPluginDescription.html</anchorfile>
      <anchor>a87c408ae648128912fc8bb1a0cb9be2d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PluginDirectoryScanner</name>
    <filename>classPluginDirectoryScanner.html</filename>
    <member kind="function">
      <type></type>
      <name>PluginDirectoryScanner</name>
      <anchorfile>classPluginDirectoryScanner.html</anchorfile>
      <anchor>a0eaf052eb4a3a94545d1180b8b0f166e</anchor>
      <arglist>(KnownPluginList &amp;listToAddResultsTo, AudioPluginFormat &amp;formatToLookFor, FileSearchPath directoriesToSearch, bool searchRecursively, const File &amp;deadMansPedalFile, bool allowPluginsWhichRequireAsynchronousInstantiation=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~PluginDirectoryScanner</name>
      <anchorfile>classPluginDirectoryScanner.html</anchorfile>
      <anchor>af3132c1ed58ed03d255dde0e649f8be7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>scanNextFile</name>
      <anchorfile>classPluginDirectoryScanner.html</anchorfile>
      <anchor>a5303b7b743f22a6ccd470422f56ecf1e</anchor>
      <arglist>(bool dontRescanIfAlreadyInList, String &amp;nameOfPluginBeingScanned)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>skipNextFile</name>
      <anchorfile>classPluginDirectoryScanner.html</anchorfile>
      <anchor>a85ef4f6094d91b010e79c3790018b539</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>getNextPluginFileThatWillBeScanned</name>
      <anchorfile>classPluginDirectoryScanner.html</anchorfile>
      <anchor>afefd5ea950ffa32d44e5b45eaf0d709e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getProgress</name>
      <anchorfile>classPluginDirectoryScanner.html</anchorfile>
      <anchor>a21d26809a8f97109c1107557f7a43f24</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const StringArray &amp;</type>
      <name>getFailedFiles</name>
      <anchorfile>classPluginDirectoryScanner.html</anchorfile>
      <anchor>a9cdb08d046b0223dccc6501e99ff755a</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>applyBlacklistingsFromDeadMansPedal</name>
      <anchorfile>classPluginDirectoryScanner.html</anchorfile>
      <anchor>a728d0462d34e67643a0d2a79e2c19f94</anchor>
      <arglist>(KnownPluginList &amp;listToApplyTo, const File &amp;deadMansPedalFile)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PluginHostType</name>
    <filename>classPluginHostType.html</filename>
    <member kind="enumeration">
      <type></type>
      <name>HostType</name>
      <anchorfile>classPluginHostType.html</anchorfile>
      <anchor>a69d9330e82ef7520f9aa8b2ad78ce5a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>UnknownHost</name>
      <anchorfile>classPluginHostType.html</anchorfile>
      <anchor>a69d9330e82ef7520f9aa8b2ad78ce5a8a1c752bc3862092e36ae81d35612e0763</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>AbletonLive6</name>
      <anchorfile>classPluginHostType.html</anchorfile>
      <anchor>a69d9330e82ef7520f9aa8b2ad78ce5a8a5e62acd132677eeadafbe3e3c2d75bad</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>AbletonLive7</name>
      <anchorfile>classPluginHostType.html</anchorfile>
      <anchor>a69d9330e82ef7520f9aa8b2ad78ce5a8a4b14200efbb17b2dd8b0b623a361829e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>AbletonLive8</name>
      <anchorfile>classPluginHostType.html</anchorfile>
      <anchor>a69d9330e82ef7520f9aa8b2ad78ce5a8aed7585b06435b87dfc13fa5745482994</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>AbletonLiveGeneric</name>
      <anchorfile>classPluginHostType.html</anchorfile>
      <anchor>a69d9330e82ef7520f9aa8b2ad78ce5a8a665226cd0a77007d5e3a8673f6e91dd4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>AdobeAudition</name>
      <anchorfile>classPluginHostType.html</anchorfile>
      <anchor>a69d9330e82ef7520f9aa8b2ad78ce5a8aace510334a69f21f5ced14e5ade5e1db</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>AdobePremierePro</name>
      <anchorfile>classPluginHostType.html</anchorfile>
      <anchor>a69d9330e82ef7520f9aa8b2ad78ce5a8aba59eb46b76ef7fb9b0d2b0a5a370e9b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>AppleLogic</name>
      <anchorfile>classPluginHostType.html</anchorfile>
      <anchor>a69d9330e82ef7520f9aa8b2ad78ce5a8a1d085d65da9faf511f3f2ae6335812c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>Ardour</name>
      <anchorfile>classPluginHostType.html</anchorfile>
      <anchor>a69d9330e82ef7520f9aa8b2ad78ce5a8a7ae3835e601d60614473084f07aa447e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>BitwigStudio</name>
      <anchorfile>classPluginHostType.html</anchorfile>
      <anchor>a69d9330e82ef7520f9aa8b2ad78ce5a8a6cf4bc70a9e21bc5e978a4960084fc58</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>CakewalkSonar8</name>
      <anchorfile>classPluginHostType.html</anchorfile>
      <anchor>a69d9330e82ef7520f9aa8b2ad78ce5a8a9346912590305747f0c38d7c3208de17</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>CakewalkSonarGeneric</name>
      <anchorfile>classPluginHostType.html</anchorfile>
      <anchor>a69d9330e82ef7520f9aa8b2ad78ce5a8a0b64ed512c677bef44381479de35c425</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>DaVinciResolve</name>
      <anchorfile>classPluginHostType.html</anchorfile>
      <anchor>a69d9330e82ef7520f9aa8b2ad78ce5a8a99618d4951e81deda9ea245ec82c9fc5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>DigidesignProTools</name>
      <anchorfile>classPluginHostType.html</anchorfile>
      <anchor>a69d9330e82ef7520f9aa8b2ad78ce5a8a98abcd7b565c269a115d7f419114bb9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>DigitalPerformer</name>
      <anchorfile>classPluginHostType.html</anchorfile>
      <anchor>a69d9330e82ef7520f9aa8b2ad78ce5a8a5fc16668f994993c5f9a7276cd840f4a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>FinalCut</name>
      <anchorfile>classPluginHostType.html</anchorfile>
      <anchor>a69d9330e82ef7520f9aa8b2ad78ce5a8abda90043ce2ae817ced6640eb0a6e7f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>FruityLoops</name>
      <anchorfile>classPluginHostType.html</anchorfile>
      <anchor>a69d9330e82ef7520f9aa8b2ad78ce5a8aafe10f6ddbe74f8f788f29312fa5b2b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>MagixSamplitude</name>
      <anchorfile>classPluginHostType.html</anchorfile>
      <anchor>a69d9330e82ef7520f9aa8b2ad78ce5a8a93ac4b1eea045db98d9ab7fbcd7207c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>MergingPyramix</name>
      <anchorfile>classPluginHostType.html</anchorfile>
      <anchor>a69d9330e82ef7520f9aa8b2ad78ce5a8a79118c5e7151a052192d3ca470baed90</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>MuseReceptorGeneric</name>
      <anchorfile>classPluginHostType.html</anchorfile>
      <anchor>a69d9330e82ef7520f9aa8b2ad78ce5a8ac44eee1f6720c9ef9296f0c655526230</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>Reaper</name>
      <anchorfile>classPluginHostType.html</anchorfile>
      <anchor>a69d9330e82ef7520f9aa8b2ad78ce5a8aec2843d65058124f4d29e70027f06e83</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>Renoise</name>
      <anchorfile>classPluginHostType.html</anchorfile>
      <anchor>a69d9330e82ef7520f9aa8b2ad78ce5a8a17d9c92fbae8bdff143b83043fada217</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>SADiE</name>
      <anchorfile>classPluginHostType.html</anchorfile>
      <anchor>a69d9330e82ef7520f9aa8b2ad78ce5a8a3d56bff5bf00130c334d4c1f77432ed5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>SteinbergCubase4</name>
      <anchorfile>classPluginHostType.html</anchorfile>
      <anchor>a69d9330e82ef7520f9aa8b2ad78ce5a8ac364901a67009772e9870bfcae9d7090</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>SteinbergCubase5</name>
      <anchorfile>classPluginHostType.html</anchorfile>
      <anchor>a69d9330e82ef7520f9aa8b2ad78ce5a8afddd08fe15ce7ccf7781dd0dd4cd0cbd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>SteinbergCubase5Bridged</name>
      <anchorfile>classPluginHostType.html</anchorfile>
      <anchor>a69d9330e82ef7520f9aa8b2ad78ce5a8a5f89e0578cf0b6bbfc5d90460890c2eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>SteinbergCubase6</name>
      <anchorfile>classPluginHostType.html</anchorfile>
      <anchor>a69d9330e82ef7520f9aa8b2ad78ce5a8a9368af61e64c127344b0d69634644a55</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>SteinbergCubase7</name>
      <anchorfile>classPluginHostType.html</anchorfile>
      <anchor>a69d9330e82ef7520f9aa8b2ad78ce5a8a743ff11b546c1b490db6963c58455187</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>SteinbergCubase8</name>
      <anchorfile>classPluginHostType.html</anchorfile>
      <anchor>a69d9330e82ef7520f9aa8b2ad78ce5a8a8044b0323a8ef1e5a1a1c98fe8fd8ac2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>SteinbergCubaseGeneric</name>
      <anchorfile>classPluginHostType.html</anchorfile>
      <anchor>a69d9330e82ef7520f9aa8b2ad78ce5a8a5b569e91a90410048fe9103eb9187d28</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>SteinbergNuendo3</name>
      <anchorfile>classPluginHostType.html</anchorfile>
      <anchor>a69d9330e82ef7520f9aa8b2ad78ce5a8a80770fdf759a93b5008859f7cee81c7e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>SteinbergNuendo4</name>
      <anchorfile>classPluginHostType.html</anchorfile>
      <anchor>a69d9330e82ef7520f9aa8b2ad78ce5a8ae6da999e969e6568d22622053000ae13</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>SteinbergNuendo5</name>
      <anchorfile>classPluginHostType.html</anchorfile>
      <anchor>a69d9330e82ef7520f9aa8b2ad78ce5a8a0cfdb6a1f354764b44a703cc0abf911b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>SteinbergNuendoGeneric</name>
      <anchorfile>classPluginHostType.html</anchorfile>
      <anchor>a69d9330e82ef7520f9aa8b2ad78ce5a8a4e83724575df1191787a5a4925bfe08c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>SteinbergWavelab5</name>
      <anchorfile>classPluginHostType.html</anchorfile>
      <anchor>a69d9330e82ef7520f9aa8b2ad78ce5a8a64bf12c0c44b9f5ec70c1c140f8e7f5c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>SteinbergWavelab6</name>
      <anchorfile>classPluginHostType.html</anchorfile>
      <anchor>a69d9330e82ef7520f9aa8b2ad78ce5a8af3715fe76036928476bec3b649f533dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>SteinbergWavelab7</name>
      <anchorfile>classPluginHostType.html</anchorfile>
      <anchor>a69d9330e82ef7520f9aa8b2ad78ce5a8a0c93392fd80fa3a8fdf97e7d60be30b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>SteinbergWavelab8</name>
      <anchorfile>classPluginHostType.html</anchorfile>
      <anchor>a69d9330e82ef7520f9aa8b2ad78ce5a8ae77dc227177aeb732f8716b52a163920</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>SteinbergWavelabGeneric</name>
      <anchorfile>classPluginHostType.html</anchorfile>
      <anchor>a69d9330e82ef7520f9aa8b2ad78ce5a8ad187a256a91e0a3815a2b0a61ee70d37</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>SteinbergTestHost</name>
      <anchorfile>classPluginHostType.html</anchorfile>
      <anchor>a69d9330e82ef7520f9aa8b2ad78ce5a8a0c16095d15762f09685ae479aa31a864</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>StudioOne</name>
      <anchorfile>classPluginHostType.html</anchorfile>
      <anchor>a69d9330e82ef7520f9aa8b2ad78ce5a8abd93d9b41b6e92a2fac2dc3a0800c150</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>Tracktion3</name>
      <anchorfile>classPluginHostType.html</anchorfile>
      <anchor>a69d9330e82ef7520f9aa8b2ad78ce5a8a52cbcf5a6c5c9d2d8aca658d29b08850</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>TracktionGeneric</name>
      <anchorfile>classPluginHostType.html</anchorfile>
      <anchor>a69d9330e82ef7520f9aa8b2ad78ce5a8ac2bfcb06432d1e95e9ef3a370bec88ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>VBVSTScanner</name>
      <anchorfile>classPluginHostType.html</anchorfile>
      <anchor>a69d9330e82ef7520f9aa8b2ad78ce5a8a8e958c465a06a9ea17d95f02b8735580</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>WaveBurner</name>
      <anchorfile>classPluginHostType.html</anchorfile>
      <anchor>a69d9330e82ef7520f9aa8b2ad78ce5a8a5b8f0d97918ff781b19310b2b5db3a91</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PluginHostType</name>
      <anchorfile>classPluginHostType.html</anchorfile>
      <anchor>ab9be0922becd097860f5687fc202b2d2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PluginHostType</name>
      <anchorfile>classPluginHostType.html</anchorfile>
      <anchor>a48f44b5c3c2e1cd29ef25f1e1c389f89</anchor>
      <arglist>(const PluginHostType &amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PluginHostType &amp;</type>
      <name>operator=</name>
      <anchorfile>classPluginHostType.html</anchorfile>
      <anchor>ad8f8f14b9f2a242811df9d5b438e29fb</anchor>
      <arglist>(const PluginHostType &amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isAbletonLive</name>
      <anchorfile>classPluginHostType.html</anchorfile>
      <anchor>a5e8e18d29f342509daa11d8a66923eeb</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isAdobeAudition</name>
      <anchorfile>classPluginHostType.html</anchorfile>
      <anchor>ab65bf3d6106239c81763160a3b798b44</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isArdour</name>
      <anchorfile>classPluginHostType.html</anchorfile>
      <anchor>a581b8ff426ce073676b5f2c6fba96b3d</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isBitwigStudio</name>
      <anchorfile>classPluginHostType.html</anchorfile>
      <anchor>a8d39d5c259199e4f3cadd1e3f3da4046</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isCubase</name>
      <anchorfile>classPluginHostType.html</anchorfile>
      <anchor>a53d84c0cc0837d8be7587cefc66eff38</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isCubase7orLater</name>
      <anchorfile>classPluginHostType.html</anchorfile>
      <anchor>a508d0701cd138cda49634005031915df</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isCubaseBridged</name>
      <anchorfile>classPluginHostType.html</anchorfile>
      <anchor>a0100b8f60844c4f03e67cb17522c3d1e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isDaVinciResolve</name>
      <anchorfile>classPluginHostType.html</anchorfile>
      <anchor>aa1b1d4b6eb2ad784985cdf24bd982282</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isDigitalPerformer</name>
      <anchorfile>classPluginHostType.html</anchorfile>
      <anchor>a4e4b15c2bc66b521ae348abf939124fe</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isFinalCut</name>
      <anchorfile>classPluginHostType.html</anchorfile>
      <anchor>ab84278ff6df042479de5e6c1a29d26ef</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isFruityLoops</name>
      <anchorfile>classPluginHostType.html</anchorfile>
      <anchor>acb3da24fa5f5a10937112d4bf57f2151</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isLogic</name>
      <anchorfile>classPluginHostType.html</anchorfile>
      <anchor>ae6737ec4dc2d34aabb934915e16ef7e4</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNuendo</name>
      <anchorfile>classPluginHostType.html</anchorfile>
      <anchor>a0ecff6b668919a87e723b0dd1156c318</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isPremiere</name>
      <anchorfile>classPluginHostType.html</anchorfile>
      <anchor>a4078ef040e2e224988848c8a1da0df71</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isProTools</name>
      <anchorfile>classPluginHostType.html</anchorfile>
      <anchor>a55b01f4d8ac7198f7ff449afc7482373</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isPyramix</name>
      <anchorfile>classPluginHostType.html</anchorfile>
      <anchor>a865c7d4e51fb6dc90f8668edaead1b4e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isReceptor</name>
      <anchorfile>classPluginHostType.html</anchorfile>
      <anchor>ad57c21e7a2c57d95e10a3ad63c1e9eda</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isReaper</name>
      <anchorfile>classPluginHostType.html</anchorfile>
      <anchor>a45050d5c2f5aca3be1e675912b9b9411</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isRenoise</name>
      <anchorfile>classPluginHostType.html</anchorfile>
      <anchor>a8d77e1395c67c649ee98ef0d1fb86ac2</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSADiE</name>
      <anchorfile>classPluginHostType.html</anchorfile>
      <anchor>a1800588bf986475cbb219e363a88fef1</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSamplitude</name>
      <anchorfile>classPluginHostType.html</anchorfile>
      <anchor>acd76a6928845056299cad69a0f4cc030</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSonar</name>
      <anchorfile>classPluginHostType.html</anchorfile>
      <anchor>a36909a79f575dcce2a2febcf95469ceb</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSteinbergTestHost</name>
      <anchorfile>classPluginHostType.html</anchorfile>
      <anchor>a7bf73019f3b41f18377a28b743b7150c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSteinberg</name>
      <anchorfile>classPluginHostType.html</anchorfile>
      <anchor>afccaa45668a8eed730e2ecb3a27a49d9</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isStudioOne</name>
      <anchorfile>classPluginHostType.html</anchorfile>
      <anchor>a8d09b41875e9928276203c5daf9fb955</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isTracktion</name>
      <anchorfile>classPluginHostType.html</anchorfile>
      <anchor>ad0ecde6e33e2dc003ac414823856f982</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isVBVSTScanner</name>
      <anchorfile>classPluginHostType.html</anchorfile>
      <anchor>a3b6d1af2a3501d6d6125b09f52e7d019</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isWaveBurner</name>
      <anchorfile>classPluginHostType.html</anchorfile>
      <anchor>a375b6011c769dfb0001c9b9a429c2b9a</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isWavelab</name>
      <anchorfile>classPluginHostType.html</anchorfile>
      <anchor>a52fdad69a0dedce71fec4ff7195110ed</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isWavelabLegacy</name>
      <anchorfile>classPluginHostType.html</anchorfile>
      <anchor>a591f61217cba17ba34356e5918fd8eef</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getHostDescription</name>
      <anchorfile>classPluginHostType.html</anchorfile>
      <anchor>a39ea86160032c6e177728be4968f6421</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static String</type>
      <name>getHostPath</name>
      <anchorfile>classPluginHostType.html</anchorfile>
      <anchor>a6060f772f5cb2c53589c1acc43815426</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static AudioProcessor::WrapperType</type>
      <name>getPluginLoadedAs</name>
      <anchorfile>classPluginHostType.html</anchorfile>
      <anchor>a20b56a4d84ae4c788d859815b60bb93d</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="variable">
      <type>HostType</type>
      <name>type</name>
      <anchorfile>classPluginHostType.html</anchorfile>
      <anchor>a93570a724e75b93db0bac819432895bb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PluginListComponent</name>
    <filename>classPluginListComponent.html</filename>
    <base>Component</base>
    <base>FileDragAndDropTarget</base>
    <base protection="private">ChangeListener</base>
    <member kind="function">
      <type></type>
      <name>PluginListComponent</name>
      <anchorfile>classPluginListComponent.html</anchorfile>
      <anchor>a0ee22ac611a2e08a131d3e6c55185c79</anchor>
      <arglist>(AudioPluginFormatManager &amp;formatManager, KnownPluginList &amp;listToRepresent, const File &amp;deadMansPedalFile, PropertiesFile *propertiesToUse, bool allowPluginsWhichRequireAsynchronousInstantiation=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~PluginListComponent</name>
      <anchorfile>classPluginListComponent.html</anchorfile>
      <anchor>aef6c55ec27a6ab86d2d769ea5ce00b3a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOptionsButtonText</name>
      <anchorfile>classPluginListComponent.html</anchorfile>
      <anchor>a0bb67479d0034ea9901088401a03281a</anchor>
      <arglist>(const String &amp;newText)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setScanDialogText</name>
      <anchorfile>classPluginListComponent.html</anchorfile>
      <anchor>ab02b16b6224cd119a7bd73a83e1f8cbd</anchor>
      <arglist>(const String &amp;textForProgressWindowTitle, const String &amp;textForProgressWindowDescription)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNumberOfThreadsForScanning</name>
      <anchorfile>classPluginListComponent.html</anchorfile>
      <anchor>a1a39cc39461e94340d25b6d3d6d72d6b</anchor>
      <arglist>(int numThreads)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scanFor</name>
      <anchorfile>classPluginListComponent.html</anchorfile>
      <anchor>afb6fc7615226392390431941644378ce</anchor>
      <arglist>(AudioPluginFormat &amp;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isScanning</name>
      <anchorfile>classPluginListComponent.html</anchorfile>
      <anchor>a6f4c9532a8789249254667149978addb</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeSelectedPlugins</name>
      <anchorfile>classPluginListComponent.html</anchorfile>
      <anchor>a31cbbd642f3055ccbb59ffea1adae378</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTableModel</name>
      <anchorfile>classPluginListComponent.html</anchorfile>
      <anchor>a35950d16f4b40ba1b7abdf611d427f56</anchor>
      <arglist>(TableListBoxModel *model)</arglist>
    </member>
    <member kind="function">
      <type>TableListBox &amp;</type>
      <name>getTableListBox</name>
      <anchorfile>classPluginListComponent.html</anchorfile>
      <anchor>a14a5505de7ea4b548c42c014ca5ac342</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static FileSearchPath</type>
      <name>getLastSearchPath</name>
      <anchorfile>classPluginListComponent.html</anchorfile>
      <anchor>a8e2477f3ec1bf71ab6a9452fb946d961</anchor>
      <arglist>(PropertiesFile &amp;, AudioPluginFormat &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setLastSearchPath</name>
      <anchorfile>classPluginListComponent.html</anchorfile>
      <anchor>a48064690164915712ff85625372d4128</anchor>
      <arglist>(PropertiesFile &amp;, AudioPluginFormat &amp;, const FileSearchPath &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PNGImageFormat</name>
    <filename>classPNGImageFormat.html</filename>
    <base>ImageFileFormat</base>
    <member kind="function">
      <type></type>
      <name>PNGImageFormat</name>
      <anchorfile>classPNGImageFormat.html</anchorfile>
      <anchor>a4db2e108ed60a66f02dee961912772ce</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~PNGImageFormat</name>
      <anchorfile>classPNGImageFormat.html</anchorfile>
      <anchor>a00158061cea93fadc82821591bba8d8f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>getFormatName</name>
      <anchorfile>classPNGImageFormat.html</anchorfile>
      <anchor>aa559a3e0e0cbd4a6e531053884ece7d0</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>usesFileExtension</name>
      <anchorfile>classPNGImageFormat.html</anchorfile>
      <anchor>a8378d3d8b14b42baef523646256d52f5</anchor>
      <arglist>(const File &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>canUnderstand</name>
      <anchorfile>classPNGImageFormat.html</anchorfile>
      <anchor>a75215cead892df2027067899fb202f75</anchor>
      <arglist>(InputStream &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>Image</type>
      <name>decodeImage</name>
      <anchorfile>classPNGImageFormat.html</anchorfile>
      <anchor>a673c4af27ec2b84cd2a3c68289956e89</anchor>
      <arglist>(InputStream &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>writeImageToStream</name>
      <anchorfile>classPNGImageFormat.html</anchorfile>
      <anchor>a7031dda1d23807b29da3ef31e57f814a</anchor>
      <arglist>(const Image &amp;, OutputStream &amp;) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Point</name>
    <filename>classPoint.html</filename>
    <templarg>ValueType</templarg>
    <member kind="typedef">
      <type>TypeHelpers::SmallestFloatType&lt; ValueType &gt;::type</type>
      <name>FloatType</name>
      <anchorfile>classPoint.html</anchorfile>
      <anchor>a81e5862bbe44912a39cb87042bea7c5b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Point</name>
      <anchorfile>classPoint.html</anchorfile>
      <anchor>aa49f24cf697521e99c4f887bcea8c629</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Point</name>
      <anchorfile>classPoint.html</anchorfile>
      <anchor>aea339bd3ce794ee6ddcb49c8427536a1</anchor>
      <arglist>(const Point &amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Point</name>
      <anchorfile>classPoint.html</anchorfile>
      <anchor>aecfeda6f774e12924290c3bf2c24e684</anchor>
      <arglist>(ValueType initialX, ValueType initialY) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Point &amp;</type>
      <name>operator=</name>
      <anchorfile>classPoint.html</anchorfile>
      <anchor>aa512c038dc5e7c2a07f54e418e410dec</anchor>
      <arglist>(const Point &amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classPoint.html</anchorfile>
      <anchor>a9291566102bf3bf560931c52a30fe742</anchor>
      <arglist>(Point other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classPoint.html</anchorfile>
      <anchor>a4490b122855866b712f486f5ea25d1c8</anchor>
      <arglist>(Point other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isOrigin</name>
      <anchorfile>classPoint.html</anchorfile>
      <anchor>a8a04a1b716ac0b9618dd1a6c42ffbb09</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isFinite</name>
      <anchorfile>classPoint.html</anchorfile>
      <anchor>a7dc09b53e90644534d04d82b57b4f1e2</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>getX</name>
      <anchorfile>classPoint.html</anchorfile>
      <anchor>abcd6bc035cd3b4e2157523310af66483</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>getY</name>
      <anchorfile>classPoint.html</anchorfile>
      <anchor>a44158bfdccfc65a41b2cab6c0cfb6990</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setX</name>
      <anchorfile>classPoint.html</anchorfile>
      <anchor>a87bbdb07d6e6352044836f67d208eee4</anchor>
      <arglist>(ValueType newX) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setY</name>
      <anchorfile>classPoint.html</anchorfile>
      <anchor>ae88309fa99367ff704b3e14bccdee3f9</anchor>
      <arglist>(ValueType newY) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Point</type>
      <name>withX</name>
      <anchorfile>classPoint.html</anchorfile>
      <anchor>a20d7d8ae5ceff32a9d6731b295ae32a8</anchor>
      <arglist>(ValueType newX) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Point</type>
      <name>withY</name>
      <anchorfile>classPoint.html</anchorfile>
      <anchor>a55c3603cf357288ad3b011320d347893</anchor>
      <arglist>(ValueType newY) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setXY</name>
      <anchorfile>classPoint.html</anchorfile>
      <anchor>a6994d9b798da9e4e62e37dd45e5a6986</anchor>
      <arglist>(ValueType newX, ValueType newY) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addXY</name>
      <anchorfile>classPoint.html</anchorfile>
      <anchor>a555fd3f808036a24d9ba1f4079430712</anchor>
      <arglist>(ValueType xToAdd, ValueType yToAdd) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Point</type>
      <name>translated</name>
      <anchorfile>classPoint.html</anchorfile>
      <anchor>a1e4279fb04aa89aa280fd8abf99122c6</anchor>
      <arglist>(ValueType deltaX, ValueType deltaY) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Point</type>
      <name>operator+</name>
      <anchorfile>classPoint.html</anchorfile>
      <anchor>a41c138cd6a69351bfb12021015e85eb9</anchor>
      <arglist>(Point other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Point &amp;</type>
      <name>operator+=</name>
      <anchorfile>classPoint.html</anchorfile>
      <anchor>a1087d525d444bf86d02854060ebe7d05</anchor>
      <arglist>(Point other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Point</type>
      <name>operator-</name>
      <anchorfile>classPoint.html</anchorfile>
      <anchor>abbbd0aeada114ad01fb4686a3d080910</anchor>
      <arglist>(Point other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Point &amp;</type>
      <name>operator-=</name>
      <anchorfile>classPoint.html</anchorfile>
      <anchor>ab048e681bb8928eed6825ac385d0f2cd</anchor>
      <arglist>(Point other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Point</type>
      <name>operator*</name>
      <anchorfile>classPoint.html</anchorfile>
      <anchor>a7c02c502984c3bbfee12cedd7d646fcb</anchor>
      <arglist>(Point&lt; OtherType &gt; other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Point &amp;</type>
      <name>operator*=</name>
      <anchorfile>classPoint.html</anchorfile>
      <anchor>a441e458e0d47096f48617e6a0f4e9afe</anchor>
      <arglist>(Point&lt; OtherType &gt; other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Point</type>
      <name>operator/</name>
      <anchorfile>classPoint.html</anchorfile>
      <anchor>a6c5395ff4fd3862e7c4ca12e95d33052</anchor>
      <arglist>(Point&lt; OtherType &gt; other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Point &amp;</type>
      <name>operator/=</name>
      <anchorfile>classPoint.html</anchorfile>
      <anchor>a4dd806b18d36cf7be8d7936bbeea4b2b</anchor>
      <arglist>(Point&lt; OtherType &gt; other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Point</type>
      <name>operator*</name>
      <anchorfile>classPoint.html</anchorfile>
      <anchor>a95d1460bb6e7631b812223e1de81c17a</anchor>
      <arglist>(FloatType multiplier) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Point</type>
      <name>operator/</name>
      <anchorfile>classPoint.html</anchorfile>
      <anchor>a762c33cacf2713973eef32fdc08d9c03</anchor>
      <arglist>(FloatType divisor) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Point &amp;</type>
      <name>operator*=</name>
      <anchorfile>classPoint.html</anchorfile>
      <anchor>a78ee3ecc1fdeee5621207a314c7d774d</anchor>
      <arglist>(FloatType multiplier) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Point &amp;</type>
      <name>operator/=</name>
      <anchorfile>classPoint.html</anchorfile>
      <anchor>a727d7294b7f75bea67d7ec64f5a139c0</anchor>
      <arglist>(FloatType divisor) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Point</type>
      <name>operator-</name>
      <anchorfile>classPoint.html</anchorfile>
      <anchor>afc3a047945ffd6e5e41049a6775c9c24</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>getDistanceFromOrigin</name>
      <anchorfile>classPoint.html</anchorfile>
      <anchor>ac4ceeae6b4a33d7f604d8714423b42c8</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>getDistanceFrom</name>
      <anchorfile>classPoint.html</anchorfile>
      <anchor>af2193abdf90f3dd51aba14b7780e6579</anchor>
      <arglist>(Point other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>getDistanceSquaredFromOrigin</name>
      <anchorfile>classPoint.html</anchorfile>
      <anchor>a106ce3604ed8ef3eab6b7454f964ff8c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>getDistanceSquaredFrom</name>
      <anchorfile>classPoint.html</anchorfile>
      <anchor>ac0ca04e9cc74f55700646c120a9ae434</anchor>
      <arglist>(Point other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>FloatType</type>
      <name>getAngleToPoint</name>
      <anchorfile>classPoint.html</anchorfile>
      <anchor>a92b9dfb8f5ffcb16e0c7d394feddf29c</anchor>
      <arglist>(Point other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Point</type>
      <name>rotatedAboutOrigin</name>
      <anchorfile>classPoint.html</anchorfile>
      <anchor>a95b4c38a22f712224a6f23cd7d556580</anchor>
      <arglist>(ValueType angleRadians) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Point&lt; FloatType &gt;</type>
      <name>getPointOnCircumference</name>
      <anchorfile>classPoint.html</anchorfile>
      <anchor>ae33c849512104b032c4013daffaaa0d2</anchor>
      <arglist>(float radius, float angle) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Point&lt; FloatType &gt;</type>
      <name>getPointOnCircumference</name>
      <anchorfile>classPoint.html</anchorfile>
      <anchor>a9603bf13bd581212b0d3d13c23d4fa23</anchor>
      <arglist>(float radiusX, float radiusY, float angle) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>FloatType</type>
      <name>getDotProduct</name>
      <anchorfile>classPoint.html</anchorfile>
      <anchor>ae5d6e098246fa7d94a65c0d78a197fd8</anchor>
      <arglist>(Point other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyTransform</name>
      <anchorfile>classPoint.html</anchorfile>
      <anchor>a1f25a1e3e1e4217301e776cb8454a619</anchor>
      <arglist>(const AffineTransform &amp;transform) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Point</type>
      <name>transformedBy</name>
      <anchorfile>classPoint.html</anchorfile>
      <anchor>aa30fec65a5bea3c630f2e6b2cd356ba4</anchor>
      <arglist>(const AffineTransform &amp;transform) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Point&lt; int &gt;</type>
      <name>toInt</name>
      <anchorfile>classPoint.html</anchorfile>
      <anchor>ab9baec905a57c6d59fb827422ab02d9f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Point&lt; float &gt;</type>
      <name>toFloat</name>
      <anchorfile>classPoint.html</anchorfile>
      <anchor>a2d27c721e09caa04d89434c3095a0f9b</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Point&lt; double &gt;</type>
      <name>toDouble</name>
      <anchorfile>classPoint.html</anchorfile>
      <anchor>ab30b19304bf09c2a8c9d01904585738e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Point&lt; int &gt;</type>
      <name>roundToInt</name>
      <anchorfile>classPoint.html</anchorfile>
      <anchor>af39678668338302ac5972a1093902657</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>toString</name>
      <anchorfile>classPoint.html</anchorfile>
      <anchor>aee4d94cc4645d5dca2bfc41fb758c050</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable">
      <type>ValueType</type>
      <name>x</name>
      <anchorfile>classPoint.html</anchorfile>
      <anchor>aba3ea63445b55dec2d740776b1059065</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ValueType</type>
      <name>y</name>
      <anchorfile>classPoint.html</anchorfile>
      <anchor>aa8d5487ccd439dd2d4b0fe87021a32c0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PopupMenu</name>
    <filename>classPopupMenu.html</filename>
    <class kind="class">PopupMenu::CustomCallback</class>
    <class kind="class">PopupMenu::CustomComponent</class>
    <class kind="struct">PopupMenu::Item</class>
    <class kind="struct">PopupMenu::LookAndFeelMethods</class>
    <class kind="class">PopupMenu::MenuItemIterator</class>
    <class kind="class">PopupMenu::Options</class>
    <member kind="enumeration">
      <type></type>
      <name>ColourIds</name>
      <anchorfile>classPopupMenu.html</anchorfile>
      <anchor>a0888091ddab0f599bb9d2fab28153f6b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>backgroundColourId</name>
      <anchorfile>classPopupMenu.html</anchorfile>
      <anchor>a0888091ddab0f599bb9d2fab28153f6baf598840a9e3f2137df45179367323b39</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>textColourId</name>
      <anchorfile>classPopupMenu.html</anchorfile>
      <anchor>a0888091ddab0f599bb9d2fab28153f6ba00636235348246a1bd2bad0cb66f307a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>headerTextColourId</name>
      <anchorfile>classPopupMenu.html</anchorfile>
      <anchor>a0888091ddab0f599bb9d2fab28153f6ba964cf665c7c5a26b63866e537e9bfed0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>highlightedBackgroundColourId</name>
      <anchorfile>classPopupMenu.html</anchorfile>
      <anchor>a0888091ddab0f599bb9d2fab28153f6ba6a9ce95ec115c9def5903d25b5ed2f36</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>highlightedTextColourId</name>
      <anchorfile>classPopupMenu.html</anchorfile>
      <anchor>a0888091ddab0f599bb9d2fab28153f6ba1ec81989e7186fa2dff6b57bb057f834</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PopupMenu</name>
      <anchorfile>classPopupMenu.html</anchorfile>
      <anchor>a75f519bff4ab374bf2e00fe5d93f96f1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PopupMenu</name>
      <anchorfile>classPopupMenu.html</anchorfile>
      <anchor>ac5b1738cc16508249628b174e6827522</anchor>
      <arglist>(const PopupMenu &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~PopupMenu</name>
      <anchorfile>classPopupMenu.html</anchorfile>
      <anchor>aabdf2cc11c5e3cb57049041c459082fd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>PopupMenu &amp;</type>
      <name>operator=</name>
      <anchorfile>classPopupMenu.html</anchorfile>
      <anchor>a89e61dea91a2f6e943cf7e4a2ae09bae</anchor>
      <arglist>(const PopupMenu &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PopupMenu</name>
      <anchorfile>classPopupMenu.html</anchorfile>
      <anchor>ad3f9961ffe0080e086ba6b9602533d44</anchor>
      <arglist>(PopupMenu &amp;&amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PopupMenu &amp;</type>
      <name>operator=</name>
      <anchorfile>classPopupMenu.html</anchorfile>
      <anchor>ab37d3fba08302f30207a4624416b9d1d</anchor>
      <arglist>(PopupMenu &amp;&amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classPopupMenu.html</anchorfile>
      <anchor>ab4af03082fd727b395481a64ad940654</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addItem</name>
      <anchorfile>classPopupMenu.html</anchorfile>
      <anchor>af7447231fa198d379fe749a07b0c4511</anchor>
      <arglist>(const Item &amp;newItem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addItem</name>
      <anchorfile>classPopupMenu.html</anchorfile>
      <anchor>a41753d85a912104ec476fec1a818ec4b</anchor>
      <arglist>(int itemResultID, const String &amp;itemText, bool isEnabled=true, bool isTicked=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addItem</name>
      <anchorfile>classPopupMenu.html</anchorfile>
      <anchor>aa76dd642e2a7786ef75d95f425c3bead</anchor>
      <arglist>(int itemResultID, const String &amp;itemText, bool isEnabled, bool isTicked, const Image &amp;iconToUse)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addItem</name>
      <anchorfile>classPopupMenu.html</anchorfile>
      <anchor>a0bd542bdf1f7a52639266788f0ddf946</anchor>
      <arglist>(int itemResultID, const String &amp;itemText, bool isEnabled, bool isTicked, Drawable *iconToUse)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addCommandItem</name>
      <anchorfile>classPopupMenu.html</anchorfile>
      <anchor>a11c9d3dfcb73bf6c281436147901ed0a</anchor>
      <arglist>(ApplicationCommandManager *commandManager, CommandID commandID, const String &amp;displayName=String(), Drawable *iconToUse=nullptr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addColouredItem</name>
      <anchorfile>classPopupMenu.html</anchorfile>
      <anchor>a46aa85ebfb2f0a7df713dbccc803a90c</anchor>
      <arglist>(int itemResultID, const String &amp;itemText, Colour itemTextColour, bool isEnabled=true, bool isTicked=false, const Image &amp;iconToUse=Image())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addColouredItem</name>
      <anchorfile>classPopupMenu.html</anchorfile>
      <anchor>abca9890f63f22575c190c0115a1f3acf</anchor>
      <arglist>(int itemResultID, const String &amp;itemText, Colour itemTextColour, bool isEnabled, bool isTicked, Drawable *iconToUse)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addCustomItem</name>
      <anchorfile>classPopupMenu.html</anchorfile>
      <anchor>a3420fb5dc0dc01786ffc056892509efd</anchor>
      <arglist>(int itemResultID, CustomComponent *customComponent, const PopupMenu *optionalSubMenu=nullptr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addCustomItem</name>
      <anchorfile>classPopupMenu.html</anchorfile>
      <anchor>a5b463a49cd883ab9b5ef3584b66378c3</anchor>
      <arglist>(int itemResultID, Component *customComponent, int idealWidth, int idealHeight, bool triggerMenuItemAutomaticallyWhenClicked, const PopupMenu *optionalSubMenu=nullptr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addSubMenu</name>
      <anchorfile>classPopupMenu.html</anchorfile>
      <anchor>a671c58c6c3b8efb37ccdb5532855500d</anchor>
      <arglist>(const String &amp;subMenuName, const PopupMenu &amp;subMenu, bool isEnabled=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addSubMenu</name>
      <anchorfile>classPopupMenu.html</anchorfile>
      <anchor>a00189eb78b4346794f53a80f47643fff</anchor>
      <arglist>(const String &amp;subMenuName, const PopupMenu &amp;subMenu, bool isEnabled, const Image &amp;iconToUse, bool isTicked=false, int itemResultID=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addSubMenu</name>
      <anchorfile>classPopupMenu.html</anchorfile>
      <anchor>af0842bfb2cb7404c25effac45e10b1e2</anchor>
      <arglist>(const String &amp;subMenuName, const PopupMenu &amp;subMenu, bool isEnabled, Drawable *iconToUse, bool isTicked=false, int itemResultID=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addSeparator</name>
      <anchorfile>classPopupMenu.html</anchorfile>
      <anchor>a9c411d5c29fe887e4e961a402dd43944</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addSectionHeader</name>
      <anchorfile>classPopupMenu.html</anchorfile>
      <anchor>ab41473f7b9ca9bb4a1e6ad13c5d24ec0</anchor>
      <arglist>(const String &amp;title)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumItems</name>
      <anchorfile>classPopupMenu.html</anchorfile>
      <anchor>a66988abcfc9795fc7775cd0bb3bd9135</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>containsCommandItem</name>
      <anchorfile>classPopupMenu.html</anchorfile>
      <anchor>a4f31eae38d8b51bb8ea6717e5e2a42ee</anchor>
      <arglist>(int commandID) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>containsAnyActiveItems</name>
      <anchorfile>classPopupMenu.html</anchorfile>
      <anchor>ab6c29dcb038fcc9920db08e3a959b11a</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>show</name>
      <anchorfile>classPopupMenu.html</anchorfile>
      <anchor>acd7bdfe5db59180d929a5dac90bcacce</anchor>
      <arglist>(int itemIDThatMustBeVisible=0, int minimumWidth=0, int maximumNumColumns=0, int standardItemHeight=0, ModalComponentManager::Callback *callback=nullptr)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>showAt</name>
      <anchorfile>classPopupMenu.html</anchorfile>
      <anchor>acc1d107b2b4dce0ed54333a063f9dfdf</anchor>
      <arglist>(const Rectangle&lt; int &gt; &amp;screenAreaToAttachTo, int itemIDThatMustBeVisible=0, int minimumWidth=0, int maximumNumColumns=0, int standardItemHeight=0, ModalComponentManager::Callback *callback=nullptr)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>showAt</name>
      <anchorfile>classPopupMenu.html</anchorfile>
      <anchor>a09cbf58f5f3e8132ad1eb6afa7819d32</anchor>
      <arglist>(Component *componentToAttachTo, int itemIDThatMustBeVisible=0, int minimumWidth=0, int maximumNumColumns=0, int standardItemHeight=0, ModalComponentManager::Callback *callback=nullptr)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>showMenu</name>
      <anchorfile>classPopupMenu.html</anchorfile>
      <anchor>abbeb6708a9b79a95c85e70db830cd7d5</anchor>
      <arglist>(const Options &amp;options)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>showMenuAsync</name>
      <anchorfile>classPopupMenu.html</anchorfile>
      <anchor>aafe397e60357ab6a12ffcc3f896ed4a7</anchor>
      <arglist>(const Options &amp;options, ModalComponentManager::Callback *callback)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLookAndFeel</name>
      <anchorfile>classPopupMenu.html</anchorfile>
      <anchor>a449653121fdc2a2b7f3e77d663266d00</anchor>
      <arglist>(LookAndFeel *newLookAndFeel)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool JUCE_CALLTYPE</type>
      <name>dismissAllActiveMenus</name>
      <anchorfile>classPopupMenu.html</anchorfile>
      <anchor>a16f1d36e74b8dcf83738b1fcbdbe8166</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PopupMenu::CustomCallback</name>
    <filename>classPopupMenu_1_1CustomCallback.html</filename>
    <base>SingleThreadedReferenceCountedObject</base>
    <member kind="function">
      <type></type>
      <name>CustomCallback</name>
      <anchorfile>classPopupMenu_1_1CustomCallback.html</anchorfile>
      <anchor>a9c4d96918ac1a29742f36f79e93339f5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~CustomCallback</name>
      <anchorfile>classPopupMenu_1_1CustomCallback.html</anchorfile>
      <anchor>af2562078d6b36f1e0dc167b45ebc7f33</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>menuItemTriggered</name>
      <anchorfile>classPopupMenu_1_1CustomCallback.html</anchorfile>
      <anchor>a784de797c5adb006d5d962ecae8e5e59</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>incReferenceCount</name>
      <anchorfile>classSingleThreadedReferenceCountedObject.html</anchorfile>
      <anchor>ab372c9117f9352a7da5a3c9a7583091d</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>decReferenceCount</name>
      <anchorfile>classSingleThreadedReferenceCountedObject.html</anchorfile>
      <anchor>aa690489ec6e529bf4588c46092d09156</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>decReferenceCountWithoutDeleting</name>
      <anchorfile>classSingleThreadedReferenceCountedObject.html</anchorfile>
      <anchor>a601ef52aa595fabee645c3c9c8ba2048</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getReferenceCount</name>
      <anchorfile>classSingleThreadedReferenceCountedObject.html</anchorfile>
      <anchor>a84247db36d71ed860876941ed2045c85</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SingleThreadedReferenceCountedObject</name>
      <anchorfile>classSingleThreadedReferenceCountedObject.html</anchorfile>
      <anchor>a33487e345c10684a13f90bfeb6756fe3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SingleThreadedReferenceCountedObject</name>
      <anchorfile>classSingleThreadedReferenceCountedObject.html</anchorfile>
      <anchor>abf19dff5e45014675c24ab5c5235cb90</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PopupMenu::CustomComponent</name>
    <filename>classPopupMenu_1_1CustomComponent.html</filename>
    <base>Component</base>
    <base>SingleThreadedReferenceCountedObject</base>
    <member kind="function">
      <type></type>
      <name>CustomComponent</name>
      <anchorfile>classPopupMenu_1_1CustomComponent.html</anchorfile>
      <anchor>af169523e1b2ad37980916902658ae3be</anchor>
      <arglist>(bool isTriggeredAutomatically=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~CustomComponent</name>
      <anchorfile>classPopupMenu_1_1CustomComponent.html</anchorfile>
      <anchor>af84aeb528d021dd82781898a70e81550</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>getIdealSize</name>
      <anchorfile>classPopupMenu_1_1CustomComponent.html</anchorfile>
      <anchor>a18b614b5463a3ff680885a8cafa49e79</anchor>
      <arglist>(int &amp;idealWidth, int &amp;idealHeight)=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>triggerMenuItem</name>
      <anchorfile>classPopupMenu_1_1CustomComponent.html</anchorfile>
      <anchor>aadc39460fada2a60624f5ffc00daa296</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isItemHighlighted</name>
      <anchorfile>classPopupMenu_1_1CustomComponent.html</anchorfile>
      <anchor>aba23af1d4e4160283949be9e5c196e27</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isTriggeredAutomatically</name>
      <anchorfile>classPopupMenu_1_1CustomComponent.html</anchorfile>
      <anchor>a302fa7c66c7e5c1d83842815030171d9</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setHighlighted</name>
      <anchorfile>classPopupMenu_1_1CustomComponent.html</anchorfile>
      <anchor>a02baf9ef459fb52b53450d519dbaf40f</anchor>
      <arglist>(bool shouldBeHighlighted)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>PopupMenu::Item</name>
    <filename>structPopupMenu_1_1Item.html</filename>
    <member kind="function">
      <type></type>
      <name>Item</name>
      <anchorfile>structPopupMenu_1_1Item.html</anchorfile>
      <anchor>afaa8c2ae7ccafcbc04755eff6ffee9a4</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Item</name>
      <anchorfile>structPopupMenu_1_1Item.html</anchorfile>
      <anchor>a3dc1d9cc006d7bd14f5b3ec068652198</anchor>
      <arglist>(const Item &amp;)</arglist>
    </member>
    <member kind="function">
      <type>Item &amp;</type>
      <name>operator=</name>
      <anchorfile>structPopupMenu_1_1Item.html</anchorfile>
      <anchor>a56a052b679833c3ae180fa29dce941c7</anchor>
      <arglist>(const Item &amp;)</arglist>
    </member>
    <member kind="variable">
      <type>String</type>
      <name>text</name>
      <anchorfile>structPopupMenu_1_1Item.html</anchorfile>
      <anchor>a7d572d3e01e0302b9508337d69d87980</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>itemID</name>
      <anchorfile>structPopupMenu_1_1Item.html</anchorfile>
      <anchor>ac2f737fa43d4a2c2e1115af850ea3d01</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ScopedPointer&lt; PopupMenu &gt;</type>
      <name>subMenu</name>
      <anchorfile>structPopupMenu_1_1Item.html</anchorfile>
      <anchor>ab21802b5d5b4b31f9f491ea85f9f1623</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ScopedPointer&lt; Drawable &gt;</type>
      <name>image</name>
      <anchorfile>structPopupMenu_1_1Item.html</anchorfile>
      <anchor>a2533be9faa4eac392ae5d21d4eb10768</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ReferenceCountedObjectPtr&lt; CustomComponent &gt;</type>
      <name>customComponent</name>
      <anchorfile>structPopupMenu_1_1Item.html</anchorfile>
      <anchor>a60e8c61225a127bf37c46144c03689f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ReferenceCountedObjectPtr&lt; CustomCallback &gt;</type>
      <name>customCallback</name>
      <anchorfile>structPopupMenu_1_1Item.html</anchorfile>
      <anchor>aa38826c9b08d9c8c4e8ad2f8da46fec8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ApplicationCommandManager *</type>
      <name>commandManager</name>
      <anchorfile>structPopupMenu_1_1Item.html</anchorfile>
      <anchor>a12a2df0e3fa6e652c0e461ed065cc6c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>String</type>
      <name>shortcutKeyDescription</name>
      <anchorfile>structPopupMenu_1_1Item.html</anchorfile>
      <anchor>a8f9e3dfd2f9121152a72f21183a51415</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Colour</type>
      <name>colour</name>
      <anchorfile>structPopupMenu_1_1Item.html</anchorfile>
      <anchor>a500c07c17af9ed6a25abadca1d6879fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>isEnabled</name>
      <anchorfile>structPopupMenu_1_1Item.html</anchorfile>
      <anchor>ae5d0de64db79f723975d6b02cab10d98</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>isTicked</name>
      <anchorfile>structPopupMenu_1_1Item.html</anchorfile>
      <anchor>a06e1905971ec79f5e810149655e59af6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>isSeparator</name>
      <anchorfile>structPopupMenu_1_1Item.html</anchorfile>
      <anchor>aaa1315800a3586af05b9213ef1ed182a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>isSectionHeader</name>
      <anchorfile>structPopupMenu_1_1Item.html</anchorfile>
      <anchor>a0a362bd33e4eb4ec8946c654014149d2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>PopupMenu::LookAndFeelMethods</name>
    <filename>structPopupMenu_1_1LookAndFeelMethods.html</filename>
  </compound>
  <compound kind="class">
    <name>PopupMenu::MenuItemIterator</name>
    <filename>classPopupMenu_1_1MenuItemIterator.html</filename>
    <member kind="function">
      <type></type>
      <name>MenuItemIterator</name>
      <anchorfile>classPopupMenu_1_1MenuItemIterator.html</anchorfile>
      <anchor>a1b95aa4a822bc5c52fb3ee26c6d95980</anchor>
      <arglist>(const PopupMenu &amp;menu, bool searchRecursively=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~MenuItemIterator</name>
      <anchorfile>classPopupMenu_1_1MenuItemIterator.html</anchorfile>
      <anchor>afd9c761456a9b68530278866b5dffae3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>next</name>
      <anchorfile>classPopupMenu_1_1MenuItemIterator.html</anchorfile>
      <anchor>abac12feb2943d217501fc92d4a6009a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Item &amp;</type>
      <name>getItem</name>
      <anchorfile>classPopupMenu_1_1MenuItemIterator.html</anchorfile>
      <anchor>a7a7057fed5b85c905ebe675929a6d5ac</anchor>
      <arglist>() const noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PopupMenu::Options</name>
    <filename>classPopupMenu_1_1Options.html</filename>
    <member kind="function">
      <type></type>
      <name>Options</name>
      <anchorfile>classPopupMenu_1_1Options.html</anchorfile>
      <anchor>afa01c4782579817c0e7059defa9569c8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Options</type>
      <name>withTargetComponent</name>
      <anchorfile>classPopupMenu_1_1Options.html</anchorfile>
      <anchor>a8ff3f9ff03ba6a13c48f409f5ea9248a</anchor>
      <arglist>(Component *targetComponent) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Options</type>
      <name>withTargetScreenArea</name>
      <anchorfile>classPopupMenu_1_1Options.html</anchorfile>
      <anchor>ae0d1ff87304351c47edd8149f27e1731</anchor>
      <arglist>(const Rectangle&lt; int &gt; &amp;targetArea) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Options</type>
      <name>withMinimumWidth</name>
      <anchorfile>classPopupMenu_1_1Options.html</anchorfile>
      <anchor>adf3eaaefe656d722ed9f5109394ee7b7</anchor>
      <arglist>(int minWidth) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Options</type>
      <name>withMaximumNumColumns</name>
      <anchorfile>classPopupMenu_1_1Options.html</anchorfile>
      <anchor>abb16386044ca59674d944b9856ec84ac</anchor>
      <arglist>(int maxNumColumns) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Options</type>
      <name>withStandardItemHeight</name>
      <anchorfile>classPopupMenu_1_1Options.html</anchorfile>
      <anchor>afe291d92f59711ed51fa0d13d21faa26</anchor>
      <arglist>(int standardHeight) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Options</type>
      <name>withItemThatMustBeVisible</name>
      <anchorfile>classPopupMenu_1_1Options.html</anchorfile>
      <anchor>aa01304044d9a3081d8515ddfdb6885bc</anchor>
      <arglist>(int idOfItemToBeVisible) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Options</type>
      <name>withParentComponent</name>
      <anchorfile>classPopupMenu_1_1Options.html</anchorfile>
      <anchor>a0110efcac01a6b17c80d9e1d51697397</anchor>
      <arglist>(Component *parentComponent) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Component *</type>
      <name>getParentComponent</name>
      <anchorfile>classPopupMenu_1_1Options.html</anchorfile>
      <anchor>a6b24337c151f99adef0b0a6bd2637383</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Component *</type>
      <name>getTargetComponent</name>
      <anchorfile>classPopupMenu_1_1Options.html</anchorfile>
      <anchor>af4a86b338f9791c4f5a53b5a46c9c3e0</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Rectangle&lt; int &gt;</type>
      <name>getTargetScreenArea</name>
      <anchorfile>classPopupMenu_1_1Options.html</anchorfile>
      <anchor>acaa22be1fa930b97fcb8f8b99a40e358</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getMinimumWidth</name>
      <anchorfile>classPopupMenu_1_1Options.html</anchorfile>
      <anchor>a69be731e2b8e3102c49ea2ca85d61409</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getMaximumNumColumns</name>
      <anchorfile>classPopupMenu_1_1Options.html</anchorfile>
      <anchor>a42aea7f3b87b0ab51c147490f1c2a34c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getStandardItemHeight</name>
      <anchorfile>classPopupMenu_1_1Options.html</anchorfile>
      <anchor>afc510a3ea8d4f646d22b6a8d3c9fe934</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getItemThatMustBeVisible</name>
      <anchorfile>classPopupMenu_1_1Options.html</anchorfile>
      <anchor>ad88a9199d5c7e33f0fb945d281dbbd19</anchor>
      <arglist>() const noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PositionableAudioSource</name>
    <filename>classPositionableAudioSource.html</filename>
    <base>AudioSource</base>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setNextReadPosition</name>
      <anchorfile>classPositionableAudioSource.html</anchorfile>
      <anchor>a1d8360d66e08d9491eb1b27c37a330ed</anchor>
      <arglist>(int64 newPosition)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int64</type>
      <name>getNextReadPosition</name>
      <anchorfile>classPositionableAudioSource.html</anchorfile>
      <anchor>a93fffbfa30a0470c246f6dd2ae8597c6</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int64</type>
      <name>getTotalLength</name>
      <anchorfile>classPositionableAudioSource.html</anchorfile>
      <anchor>aa32269d1013b829bb7585e65ce80f08c</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isLooping</name>
      <anchorfile>classPositionableAudioSource.html</anchorfile>
      <anchor>a4e59a6b4cfcfb6e8afeea42c25379849</anchor>
      <arglist>() const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PositionedGlyph</name>
    <filename>classPositionedGlyph.html</filename>
    <member kind="function">
      <type></type>
      <name>PositionedGlyph</name>
      <anchorfile>classPositionedGlyph.html</anchorfile>
      <anchor>a1956f18b8fb408c98ce03f168cf5cf97</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PositionedGlyph</name>
      <anchorfile>classPositionedGlyph.html</anchorfile>
      <anchor>a20e870cfa8b3cd35b934a6d56ae118a6</anchor>
      <arglist>(const Font &amp;font, juce_wchar character, int glyphNumber, float anchorX, float baselineY, float width, bool isWhitespace)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PositionedGlyph</name>
      <anchorfile>classPositionedGlyph.html</anchorfile>
      <anchor>a34e2c9772f6f5024a980cc8703194f6f</anchor>
      <arglist>(const PositionedGlyph &amp;)</arglist>
    </member>
    <member kind="function">
      <type>PositionedGlyph &amp;</type>
      <name>operator=</name>
      <anchorfile>classPositionedGlyph.html</anchorfile>
      <anchor>adb6bb2163dac4a30eb8794426919e344</anchor>
      <arglist>(const PositionedGlyph &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PositionedGlyph</name>
      <anchorfile>classPositionedGlyph.html</anchorfile>
      <anchor>a55eae8f33d9c1a3717e45831ff083d38</anchor>
      <arglist>(PositionedGlyph &amp;&amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PositionedGlyph &amp;</type>
      <name>operator=</name>
      <anchorfile>classPositionedGlyph.html</anchorfile>
      <anchor>af8818db55133b946afcf55e23701a3ef</anchor>
      <arglist>(PositionedGlyph &amp;&amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~PositionedGlyph</name>
      <anchorfile>classPositionedGlyph.html</anchorfile>
      <anchor>a2503532e0d603f7d3e114f41859cffdc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>juce_wchar</type>
      <name>getCharacter</name>
      <anchorfile>classPositionedGlyph.html</anchorfile>
      <anchor>a489149f9bb1d8f17d4090f860f1ea343</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isWhitespace</name>
      <anchorfile>classPositionedGlyph.html</anchorfile>
      <anchor>a20dee4c6af9ea1757eb7e6110396bb45</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getLeft</name>
      <anchorfile>classPositionedGlyph.html</anchorfile>
      <anchor>ac57d608c41e100e0e516bd9ae781119f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getRight</name>
      <anchorfile>classPositionedGlyph.html</anchorfile>
      <anchor>a4ce5cbc492437e5aba051cd26460c131</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getBaselineY</name>
      <anchorfile>classPositionedGlyph.html</anchorfile>
      <anchor>a232cec33d0a4ba95cd7a2397b2ca2d36</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getTop</name>
      <anchorfile>classPositionedGlyph.html</anchorfile>
      <anchor>a9e15e717afc304cc88fb0235ca02ad70</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getBottom</name>
      <anchorfile>classPositionedGlyph.html</anchorfile>
      <anchor>a9a29497b36fe35bc422acc57a3d292dc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Rectangle&lt; float &gt;</type>
      <name>getBounds</name>
      <anchorfile>classPositionedGlyph.html</anchorfile>
      <anchor>ac0474d5658ad4e00ea9c2514ed8e96cd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>moveBy</name>
      <anchorfile>classPositionedGlyph.html</anchorfile>
      <anchor>a798015c7bca78e38eea27249e74ff1ca</anchor>
      <arglist>(float deltaX, float deltaY)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>draw</name>
      <anchorfile>classPositionedGlyph.html</anchorfile>
      <anchor>aac665d68ee206a129b6a7cf53a139db9</anchor>
      <arglist>(Graphics &amp;g) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>draw</name>
      <anchorfile>classPositionedGlyph.html</anchorfile>
      <anchor>a6faa4e7c29126b382c8278c8d2b0e642</anchor>
      <arglist>(Graphics &amp;g, const AffineTransform &amp;transform) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>createPath</name>
      <anchorfile>classPositionedGlyph.html</anchorfile>
      <anchor>ad4e15d194800b4448c0f176970d1a655</anchor>
      <arglist>(Path &amp;path) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hitTest</name>
      <anchorfile>classPositionedGlyph.html</anchorfile>
      <anchor>ac9649bacb9137536e12ed2052d05ce49</anchor>
      <arglist>(float x, float y) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PreferencesPanel</name>
    <filename>classPreferencesPanel.html</filename>
    <base>Component</base>
    <member kind="function">
      <type></type>
      <name>PreferencesPanel</name>
      <anchorfile>classPreferencesPanel.html</anchorfile>
      <anchor>a06f7a3b4fb49f4ac96961cf8d23b5baf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~PreferencesPanel</name>
      <anchorfile>classPreferencesPanel.html</anchorfile>
      <anchor>a8abacfd2931eecd7935f6160e6004a30</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addSettingsPage</name>
      <anchorfile>classPreferencesPanel.html</anchorfile>
      <anchor>ab01ab7aead6da192a57857ab89a381ad</anchor>
      <arglist>(const String &amp;pageTitle, const Drawable *normalIcon, const Drawable *overIcon, const Drawable *downIcon)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addSettingsPage</name>
      <anchorfile>classPreferencesPanel.html</anchorfile>
      <anchor>a0303471a50d590d9df84116ad4b2fcf3</anchor>
      <arglist>(const String &amp;pageTitle, const void *imageData, int imageDataSize)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>showInDialogBox</name>
      <anchorfile>classPreferencesPanel.html</anchorfile>
      <anchor>aa4cd9985823b61619b372a0b90cd4910</anchor>
      <arglist>(const String &amp;dialogTitle, int dialogWidth, int dialogHeight, Colour backgroundColour=Colours::white)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Component *</type>
      <name>createComponentForPage</name>
      <anchorfile>classPreferencesPanel.html</anchorfile>
      <anchor>a8ab89869d859f9ef7493f5bdf10ee9aa</anchor>
      <arglist>(const String &amp;pageName)=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCurrentPage</name>
      <anchorfile>classPreferencesPanel.html</anchorfile>
      <anchor>ab29e97b5c691d7104831393fd81e9de1</anchor>
      <arglist>(const String &amp;pageName)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getButtonSize</name>
      <anchorfile>classPreferencesPanel.html</anchorfile>
      <anchor>a16f9c292f25f65249a6fbd09990248a4</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setButtonSize</name>
      <anchorfile>classPreferencesPanel.html</anchorfile>
      <anchor>aac32a515e5c4d317ad31aa5d215706f3</anchor>
      <arglist>(int newSize)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resized</name>
      <anchorfile>classPreferencesPanel.html</anchorfile>
      <anchor>aa72d4e3b3798e6c966062de385a9b6d0</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>paint</name>
      <anchorfile>classPreferencesPanel.html</anchorfile>
      <anchor>a4e4510019d9c6296b51a6030e58b967c</anchor>
      <arglist>(Graphics &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>buttonClicked</name>
      <anchorfile>classPreferencesPanel.html</anchorfile>
      <anchor>a29c246d1cad6e1c6d42218980a8d41d5</anchor>
      <arglist>(Button *) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Primes</name>
    <filename>classPrimes.html</filename>
    <member kind="function" static="yes">
      <type>static BigInteger</type>
      <name>createProbablePrime</name>
      <anchorfile>classPrimes.html</anchorfile>
      <anchor>a0dd92a07f6f866b70f1837b8a5b1f25b</anchor>
      <arglist>(int bitLength, int certainty, const int *randomSeeds=0, int numRandomSeeds=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isProbablyPrime</name>
      <anchorfile>classPrimes.html</anchorfile>
      <anchor>a7c44c5417163632b7d207f9c94270c4e</anchor>
      <arglist>(const BigInteger &amp;number, int certainty)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Process</name>
    <filename>classProcess.html</filename>
    <member kind="enumeration">
      <type></type>
      <name>ProcessPriority</name>
      <anchorfile>classProcess.html</anchorfile>
      <anchor>ad7b18ceb7a8c0a2b6b71856894feb6ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>LowPriority</name>
      <anchorfile>classProcess.html</anchorfile>
      <anchor>ad7b18ceb7a8c0a2b6b71856894feb6efad7f3e46785b41d6d5db5e7afab065281</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>NormalPriority</name>
      <anchorfile>classProcess.html</anchorfile>
      <anchor>ad7b18ceb7a8c0a2b6b71856894feb6efab8355050d1e4ef5af4c057abc20259be</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>HighPriority</name>
      <anchorfile>classProcess.html</anchorfile>
      <anchor>ad7b18ceb7a8c0a2b6b71856894feb6efaa72f09a6d0e30d394c6fe7095372a711</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>RealtimePriority</name>
      <anchorfile>classProcess.html</anchorfile>
      <anchor>ad7b18ceb7a8c0a2b6b71856894feb6efa1ab071c1d49e25fc1df3c9663177927e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void JUCE_CALLTYPE</type>
      <name>setPriority</name>
      <anchorfile>classProcess.html</anchorfile>
      <anchor>af87785f3f355601bb542e905963c31a7</anchor>
      <arglist>(const ProcessPriority priority)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void JUCE_CALLTYPE</type>
      <name>terminate</name>
      <anchorfile>classProcess.html</anchorfile>
      <anchor>a2bf38d88851f9bb8e2cc8fd66f4affc3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool JUCE_CALLTYPE</type>
      <name>isForegroundProcess</name>
      <anchorfile>classProcess.html</anchorfile>
      <anchor>a7d9bad73a7b996a2bbbdac5f848d09bd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void JUCE_CALLTYPE</type>
      <name>makeForegroundProcess</name>
      <anchorfile>classProcess.html</anchorfile>
      <anchor>ab9bdca982f2b357ecc9f915724b997ea</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void JUCE_CALLTYPE</type>
      <name>hide</name>
      <anchorfile>classProcess.html</anchorfile>
      <anchor>a01a7ddde215bcef03cd16587ed4b0a64</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void JUCE_CALLTYPE</type>
      <name>raisePrivilege</name>
      <anchorfile>classProcess.html</anchorfile>
      <anchor>a8e96b400aa54a83291406378ec0d8eaa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void JUCE_CALLTYPE</type>
      <name>lowerPrivilege</name>
      <anchorfile>classProcess.html</anchorfile>
      <anchor>ab0153aa164ca166e209a74e8c4f811e0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool JUCE_CALLTYPE</type>
      <name>isRunningUnderDebugger</name>
      <anchorfile>classProcess.html</anchorfile>
      <anchor>a0bd9f1c5682e4c95e1a3a407f6c838b3</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool JUCE_CALLTYPE</type>
      <name>openDocument</name>
      <anchorfile>classProcess.html</anchorfile>
      <anchor>a05b430c0c6c182a044f67a9ce6144f43</anchor>
      <arglist>(const String &amp;documentURL, const String &amp;parameters)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool JUCE_CALLTYPE</type>
      <name>openEmailWithAttachments</name>
      <anchorfile>classProcess.html</anchorfile>
      <anchor>a7be74f73ba52067284e129ad5478d9d1</anchor>
      <arglist>(const String &amp;targetEmailAddress, const String &amp;emailSubject, const String &amp;bodyText, const StringArray &amp;filesToAttach)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void *JUCE_CALLTYPE</type>
      <name>getCurrentModuleInstanceHandle</name>
      <anchorfile>classProcess.html</anchorfile>
      <anchor>a89a3cbef850679516bccdab10e9a5305</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void JUCE_CALLTYPE</type>
      <name>setCurrentModuleInstanceHandle</name>
      <anchorfile>classProcess.html</anchorfile>
      <anchor>a82a86c921a568fe5af4968de5c42adb7</anchor>
      <arglist>(void *newHandle) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setDockIconVisible</name>
      <anchorfile>classProcess.html</anchorfile>
      <anchor>abce4be274d956bdb4f7c36398e776bfb</anchor>
      <arglist>(bool isVisible)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>setMaxNumberOfFileHandles</name>
      <anchorfile>classProcess.html</anchorfile>
      <anchor>a38b648877751448ff0ad0dd4b74b289f</anchor>
      <arglist>(int maxNumberOfFiles) noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ProgressBar</name>
    <filename>classProgressBar.html</filename>
    <base>Component</base>
    <base>SettableTooltipClient</base>
    <base protection="private">Timer</base>
    <class kind="struct">ProgressBar::LookAndFeelMethods</class>
    <member kind="enumeration">
      <type></type>
      <name>ColourIds</name>
      <anchorfile>classProgressBar.html</anchorfile>
      <anchor>a3486234bde4b1095a948fea269635d42</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>backgroundColourId</name>
      <anchorfile>classProgressBar.html</anchorfile>
      <anchor>a3486234bde4b1095a948fea269635d42a9c73104f0198a1a6e33c1a0135b4d310</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>foregroundColourId</name>
      <anchorfile>classProgressBar.html</anchorfile>
      <anchor>a3486234bde4b1095a948fea269635d42a92bc4a65179b4e85dff89b628f5a6e55</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ProgressBar</name>
      <anchorfile>classProgressBar.html</anchorfile>
      <anchor>afe06d2a756619d38e007f1c3bb408f7a</anchor>
      <arglist>(double &amp;progress)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ProgressBar</name>
      <anchorfile>classProgressBar.html</anchorfile>
      <anchor>aa0ced60c0ade467a4602c35443e7bc78</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPercentageDisplay</name>
      <anchorfile>classProgressBar.html</anchorfile>
      <anchor>a19dceb0dc2c110512d0fd7dcec3fc50c</anchor>
      <arglist>(bool shouldDisplayPercentage)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTextToDisplay</name>
      <anchorfile>classProgressBar.html</anchorfile>
      <anchor>a3487f138651d8bc5a29a2586d4862b55</anchor>
      <arglist>(const String &amp;text)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>paint</name>
      <anchorfile>classProgressBar.html</anchorfile>
      <anchor>ac52be9d48db6804ad15677a786b817c8</anchor>
      <arglist>(Graphics &amp;) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>lookAndFeelChanged</name>
      <anchorfile>classProgressBar.html</anchorfile>
      <anchor>a68b99c1ab63b0fa3e23d88f468ac7652</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>visibilityChanged</name>
      <anchorfile>classProgressBar.html</anchorfile>
      <anchor>a6e37c8700a102115335666c7424c3465</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>colourChanged</name>
      <anchorfile>classProgressBar.html</anchorfile>
      <anchor>a04fd0878e48ed23707c018ae5f9ad6c1</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ProgressBar::LookAndFeelMethods</name>
    <filename>structProgressBar_1_1LookAndFeelMethods.html</filename>
  </compound>
  <compound kind="class">
    <name>PropertiesFile</name>
    <filename>classPropertiesFile.html</filename>
    <base>PropertySet</base>
    <base>ChangeBroadcaster</base>
    <base protection="private">Timer</base>
    <class kind="struct">PropertiesFile::Options</class>
    <member kind="enumeration">
      <type></type>
      <name>StorageFormat</name>
      <anchorfile>classPropertiesFile.html</anchorfile>
      <anchor>ac4d1ac9a6b624f7e0de7787de46dc05e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>storeAsBinary</name>
      <anchorfile>classPropertiesFile.html</anchorfile>
      <anchor>ac4d1ac9a6b624f7e0de7787de46dc05eadd1552fd266d926522dfa0e162de5328</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>storeAsCompressedBinary</name>
      <anchorfile>classPropertiesFile.html</anchorfile>
      <anchor>ac4d1ac9a6b624f7e0de7787de46dc05eab1ddcaf9fc8d45b4141749e325844f42</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>storeAsXML</name>
      <anchorfile>classPropertiesFile.html</anchorfile>
      <anchor>ac4d1ac9a6b624f7e0de7787de46dc05eab0145370e12c4174bd36dc6ac6ccc147</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PropertiesFile</name>
      <anchorfile>classPropertiesFile.html</anchorfile>
      <anchor>a8e47a02c7600f3758f600ed2376589a4</anchor>
      <arglist>(const Options &amp;options)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PropertiesFile</name>
      <anchorfile>classPropertiesFile.html</anchorfile>
      <anchor>acf3dbec910950b70fe405cc51f7a10e6</anchor>
      <arglist>(const File &amp;file, const Options &amp;options)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~PropertiesFile</name>
      <anchorfile>classPropertiesFile.html</anchorfile>
      <anchor>a449b6cc48f72e8d14c73dd4ac9964635</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValidFile</name>
      <anchorfile>classPropertiesFile.html</anchorfile>
      <anchor>a31ca79cdb1a4b7c9863d981c9b438904</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>saveIfNeeded</name>
      <anchorfile>classPropertiesFile.html</anchorfile>
      <anchor>a61b439f35faf3f1add5cdfdd49a85d49</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>save</name>
      <anchorfile>classPropertiesFile.html</anchorfile>
      <anchor>ad0c24e1809b203c8347ee07cfb599250</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>needsToBeSaved</name>
      <anchorfile>classPropertiesFile.html</anchorfile>
      <anchor>af9e77e3bde952ed5face05c19cd51ed4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNeedsToBeSaved</name>
      <anchorfile>classPropertiesFile.html</anchorfile>
      <anchor>a205cb3e66cef5d064578dc22b8b205cb</anchor>
      <arglist>(bool needsToBeSaved)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>reload</name>
      <anchorfile>classPropertiesFile.html</anchorfile>
      <anchor>abb0e0d0ea6f6c820719ef8542440e846</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const File &amp;</type>
      <name>getFile</name>
      <anchorfile>classPropertiesFile.html</anchorfile>
      <anchor>a8c42d4ae2b3c11517c8c734de5067815</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PropertySet</name>
      <anchorfile>classPropertySet.html</anchorfile>
      <anchor>a8e91a4cff9a69a96f7957c038b919870</anchor>
      <arglist>(bool ignoreCaseOfKeyNames=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PropertySet</name>
      <anchorfile>classPropertySet.html</anchorfile>
      <anchor>a85f11257e712b1fc4074a9e2dbc24e71</anchor>
      <arglist>(const PropertySet &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>PropertySet &amp;</type>
      <name>operator=</name>
      <anchorfile>classPropertySet.html</anchorfile>
      <anchor>a11163a300c9d6d483f073f9e004fe89b</anchor>
      <arglist>(const PropertySet &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PropertySet</name>
      <anchorfile>classPropertySet.html</anchorfile>
      <anchor>a9243fb6fb5a71e6795f3bbda95f009e6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>getValue</name>
      <anchorfile>classPropertySet.html</anchorfile>
      <anchor>afa005ac125096ad476021d347f56ff4c</anchor>
      <arglist>(StringRef keyName, const String &amp;defaultReturnValue=String()) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getIntValue</name>
      <anchorfile>classPropertySet.html</anchorfile>
      <anchor>a02ea38c1de947931c2112bd81eb73ba1</anchor>
      <arglist>(StringRef keyName, int defaultReturnValue=0) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getDoubleValue</name>
      <anchorfile>classPropertySet.html</anchorfile>
      <anchor>aae72eedbd509bfd112e8b5e214b9d66d</anchor>
      <arglist>(StringRef keyName, double defaultReturnValue=0.0) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getBoolValue</name>
      <anchorfile>classPropertySet.html</anchorfile>
      <anchor>aa5df72070f494ea3415361c43538bdac</anchor>
      <arglist>(StringRef keyName, bool defaultReturnValue=false) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>XmlElement *</type>
      <name>getXmlValue</name>
      <anchorfile>classPropertySet.html</anchorfile>
      <anchor>a9c724f3a34655a3c28593c8ad3171f38</anchor>
      <arglist>(StringRef keyName) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>classPropertySet.html</anchorfile>
      <anchor>a696515de52c7310117e7914a02b58e57</anchor>
      <arglist>(const String &amp;keyName, const var &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>classPropertySet.html</anchorfile>
      <anchor>a64fb29cf07186f48e599afe7108f85e5</anchor>
      <arglist>(const String &amp;keyName, const XmlElement *xml)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addAllPropertiesFrom</name>
      <anchorfile>classPropertySet.html</anchorfile>
      <anchor>a340892a4bda637623401fe97035c1eb5</anchor>
      <arglist>(const PropertySet &amp;source)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeValue</name>
      <anchorfile>classPropertySet.html</anchorfile>
      <anchor>a7240c496cbcba40f561d73aa32f40ce6</anchor>
      <arglist>(StringRef keyName)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>containsKey</name>
      <anchorfile>classPropertySet.html</anchorfile>
      <anchor>a8e9e8acded2871bdb78f7ce404879c6b</anchor>
      <arglist>(StringRef keyName) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classPropertySet.html</anchorfile>
      <anchor>a17bc35d7608a5dcce584d2eace3096d9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>StringPairArray &amp;</type>
      <name>getAllProperties</name>
      <anchorfile>classPropertySet.html</anchorfile>
      <anchor>ae8323d944277335563739d934de3cc9d</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const CriticalSection &amp;</type>
      <name>getLock</name>
      <anchorfile>classPropertySet.html</anchorfile>
      <anchor>a3b371714834842b485583c305f2d5602</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>XmlElement *</type>
      <name>createXml</name>
      <anchorfile>classPropertySet.html</anchorfile>
      <anchor>ae2fa02a9f1a1d41c0b32fc5d0c4e31fb</anchor>
      <arglist>(const String &amp;nodeName) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>restoreFromXml</name>
      <anchorfile>classPropertySet.html</anchorfile>
      <anchor>aeb4db0338ee4d9d121427990306d8101</anchor>
      <arglist>(const XmlElement &amp;xml)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFallbackPropertySet</name>
      <anchorfile>classPropertySet.html</anchorfile>
      <anchor>a624ae2f6c294510397957dd0dc2e1bd2</anchor>
      <arglist>(PropertySet *fallbackProperties) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PropertySet *</type>
      <name>getFallbackPropertySet</name>
      <anchorfile>classPropertySet.html</anchorfile>
      <anchor>a1fb12c22b6568c72ed6d46dd57927e87</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>propertyChanged</name>
      <anchorfile>classPropertiesFile.html</anchorfile>
      <anchor>a02e12b829e5b30f6c41df04242541b9c</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>PropertiesFile::Options</name>
    <filename>structPropertiesFile_1_1Options.html</filename>
    <member kind="function">
      <type></type>
      <name>Options</name>
      <anchorfile>structPropertiesFile_1_1Options.html</anchorfile>
      <anchor>ab70c4b14c608861170e784bfa4d0c5fe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>File</type>
      <name>getDefaultFile</name>
      <anchorfile>structPropertiesFile_1_1Options.html</anchorfile>
      <anchor>aab9b6617d18ae226217c49f747550de7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable">
      <type>String</type>
      <name>applicationName</name>
      <anchorfile>structPropertiesFile_1_1Options.html</anchorfile>
      <anchor>a6222c4cfec8124ae0af33398a61f2517</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>String</type>
      <name>filenameSuffix</name>
      <anchorfile>structPropertiesFile_1_1Options.html</anchorfile>
      <anchor>a02ba3c3eee660d6ed9a8ce6637791f2d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>String</type>
      <name>folderName</name>
      <anchorfile>structPropertiesFile_1_1Options.html</anchorfile>
      <anchor>ad5db314e117ec06d23b08aca130500cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>String</type>
      <name>osxLibrarySubFolder</name>
      <anchorfile>structPropertiesFile_1_1Options.html</anchorfile>
      <anchor>aacd8c9dc10f8cce35824410940d04ee1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>commonToAllUsers</name>
      <anchorfile>structPropertiesFile_1_1Options.html</anchorfile>
      <anchor>a1b4a530664906ebeadce842431f6f681</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>ignoreCaseOfKeyNames</name>
      <anchorfile>structPropertiesFile_1_1Options.html</anchorfile>
      <anchor>a430d4a3168ac0be324f7a5c8a40f514a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>doNotSave</name>
      <anchorfile>structPropertiesFile_1_1Options.html</anchorfile>
      <anchor>a28680056e89b7947afe4de44c4ac26c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>millisecondsBeforeSaving</name>
      <anchorfile>structPropertiesFile_1_1Options.html</anchorfile>
      <anchor>a35be64ba2da1b72b6b8b599e8ddb0924</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>StorageFormat</type>
      <name>storageFormat</name>
      <anchorfile>structPropertiesFile_1_1Options.html</anchorfile>
      <anchor>aed68b3ff89a6943aeac93af26effec2d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>InterProcessLock *</type>
      <name>processLock</name>
      <anchorfile>structPropertiesFile_1_1Options.html</anchorfile>
      <anchor>a65881e8a7c6e90fbaca03dd2f00a34a7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PropertyComponent</name>
    <filename>classPropertyComponent.html</filename>
    <base>Component</base>
    <base>SettableTooltipClient</base>
    <class kind="struct">PropertyComponent::LookAndFeelMethods</class>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>refresh</name>
      <anchorfile>classPropertyComponent.html</anchorfile>
      <anchor>a0ce62ead3836df49c63e253cf33f83c0</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>PropertyComponent::LookAndFeelMethods</name>
    <filename>structPropertyComponent_1_1LookAndFeelMethods.html</filename>
  </compound>
  <compound kind="class">
    <name>PropertyPanel</name>
    <filename>classPropertyPanel.html</filename>
    <base>Component</base>
    <member kind="function">
      <type></type>
      <name>PropertyPanel</name>
      <anchorfile>classPropertyPanel.html</anchorfile>
      <anchor>a765b12e87a55fc10508a6ce1933a7951</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PropertyPanel</name>
      <anchorfile>classPropertyPanel.html</anchorfile>
      <anchor>aed76c94275a702821d7c982450cb95b5</anchor>
      <arglist>(const String &amp;name)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~PropertyPanel</name>
      <anchorfile>classPropertyPanel.html</anchorfile>
      <anchor>a54f029a1fc11eebd39945592c021032c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classPropertyPanel.html</anchorfile>
      <anchor>aaf4d011fa44b1c1ae69f3837df967c30</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addProperties</name>
      <anchorfile>classPropertyPanel.html</anchorfile>
      <anchor>a304e2a044d426e027a3b98856f83fcde</anchor>
      <arglist>(const Array&lt; PropertyComponent * &gt; &amp;newPropertyComponents)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addSection</name>
      <anchorfile>classPropertyPanel.html</anchorfile>
      <anchor>ad462331c2b616c4760a3d974383aabb1</anchor>
      <arglist>(const String &amp;sectionTitle, const Array&lt; PropertyComponent * &gt; &amp;newPropertyComponents, bool shouldSectionInitiallyBeOpen=true, int indexToInsertAt=-1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>refreshAll</name>
      <anchorfile>classPropertyPanel.html</anchorfile>
      <anchor>a4879227d607dc41ac4f767f27299570c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEmpty</name>
      <anchorfile>classPropertyPanel.html</anchorfile>
      <anchor>a0960c91f26e84afdb3a5f61f6f1ef5f6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getTotalContentHeight</name>
      <anchorfile>classPropertyPanel.html</anchorfile>
      <anchor>a30fdd3f78a9cde737225fc00646c80b4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>StringArray</type>
      <name>getSectionNames</name>
      <anchorfile>classPropertyPanel.html</anchorfile>
      <anchor>a62970c587b749da9e7847b453536ebc6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSectionOpen</name>
      <anchorfile>classPropertyPanel.html</anchorfile>
      <anchor>a1e6203d3944d38363567f171e79eb4d7</anchor>
      <arglist>(int sectionIndex) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSectionOpen</name>
      <anchorfile>classPropertyPanel.html</anchorfile>
      <anchor>ab16be3f10d266c39eb68eefff0c5d7c7</anchor>
      <arglist>(int sectionIndex, bool shouldBeOpen)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSectionEnabled</name>
      <anchorfile>classPropertyPanel.html</anchorfile>
      <anchor>a1fe2441419859069d012425dd137dc47</anchor>
      <arglist>(int sectionIndex, bool shouldBeEnabled)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeSection</name>
      <anchorfile>classPropertyPanel.html</anchorfile>
      <anchor>a294b75e52e40abe16e01020ea78774b0</anchor>
      <arglist>(int sectionIndex)</arglist>
    </member>
    <member kind="function">
      <type>XmlElement *</type>
      <name>getOpennessState</name>
      <anchorfile>classPropertyPanel.html</anchorfile>
      <anchor>a64d64045e5da843e3c4b159adec28420</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>restoreOpennessState</name>
      <anchorfile>classPropertyPanel.html</anchorfile>
      <anchor>aed72746ba6c25b392fa70dd3af4a60bd</anchor>
      <arglist>(const XmlElement &amp;newState)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMessageWhenEmpty</name>
      <anchorfile>classPropertyPanel.html</anchorfile>
      <anchor>a0f20bbec2111121821004b62634baf21</anchor>
      <arglist>(const String &amp;newMessage)</arglist>
    </member>
    <member kind="function">
      <type>const String &amp;</type>
      <name>getMessageWhenEmpty</name>
      <anchorfile>classPropertyPanel.html</anchorfile>
      <anchor>ae277c460481b0cce24363e251640a7e6</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Viewport &amp;</type>
      <name>getViewport</name>
      <anchorfile>classPropertyPanel.html</anchorfile>
      <anchor>a21146431d1ef08fd5bc73a47eae9ecbb</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>paint</name>
      <anchorfile>classPropertyPanel.html</anchorfile>
      <anchor>a8146e80447608d743a7e1d63e30947cf</anchor>
      <arglist>(Graphics &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resized</name>
      <anchorfile>classPropertyPanel.html</anchorfile>
      <anchor>a18b47c93593de5405c8fe5e4c6445644</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PropertySet</name>
    <filename>classPropertySet.html</filename>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>propertyChanged</name>
      <anchorfile>classPropertySet.html</anchorfile>
      <anchor>a1f7586bf00529d3981f4576a44a6d4b0</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Quaternion</name>
    <filename>classQuaternion.html</filename>
    <templarg>Type</templarg>
    <member kind="function">
      <type></type>
      <name>Quaternion</name>
      <anchorfile>classQuaternion.html</anchorfile>
      <anchor>ab6cfa17954ad0cf303877c8b7d578cc2</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Quaternion</name>
      <anchorfile>classQuaternion.html</anchorfile>
      <anchor>a55df57ee8430a9b1b1581ace70e105e3</anchor>
      <arglist>(const Quaternion &amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Quaternion</name>
      <anchorfile>classQuaternion.html</anchorfile>
      <anchor>a80054cbe7779c1237c1d08f53077bd43</anchor>
      <arglist>(Vector3D&lt; Type &gt; vectorPart, Type scalarPart) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Quaternion</name>
      <anchorfile>classQuaternion.html</anchorfile>
      <anchor>a1b5dab7556226d76040277dc8ee3f0a4</anchor>
      <arglist>(Type x, Type y, Type z, Type w) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Quaternion &amp;</type>
      <name>operator=</name>
      <anchorfile>classQuaternion.html</anchorfile>
      <anchor>a8e000d2a2a441b245185fba0cc867590</anchor>
      <arglist>(Quaternion other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Quaternion &amp;</type>
      <name>operator*=</name>
      <anchorfile>classQuaternion.html</anchorfile>
      <anchor>a10952b8e53ed52b1d093984c499b96f3</anchor>
      <arglist>(Quaternion other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Type</type>
      <name>length</name>
      <anchorfile>classQuaternion.html</anchorfile>
      <anchor>aef1e525b9ed4bc89a21b4fadf1e4f54a</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Type</type>
      <name>normal</name>
      <anchorfile>classQuaternion.html</anchorfile>
      <anchor>a27069720d50f0b9851eba38bf4339def</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Quaternion</type>
      <name>normalised</name>
      <anchorfile>classQuaternion.html</anchorfile>
      <anchor>a8cb6b7c2c79ecc69a5116b84d29e8fb2</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Matrix3D&lt; Type &gt;</type>
      <name>getRotationMatrix</name>
      <anchorfile>classQuaternion.html</anchorfile>
      <anchor>a14dee0a7b0f7a7a79fdd0c6741b49131</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Quaternion</type>
      <name>fromAngle</name>
      <anchorfile>classQuaternion.html</anchorfile>
      <anchor>a041d3da46795ed921e6000f295dedbae</anchor>
      <arglist>(Type angle, Vector3D&lt; Type &gt; axis) noexcept</arglist>
    </member>
    <member kind="variable">
      <type>Vector3D&lt; Type &gt;</type>
      <name>vector</name>
      <anchorfile>classQuaternion.html</anchorfile>
      <anchor>aea2b69403fdef5dfde9c62c9aeac3925</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Type</type>
      <name>scalar</name>
      <anchorfile>classQuaternion.html</anchorfile>
      <anchor>adfe519277223a4cb9321dc7f0d3b5cca</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Random</name>
    <filename>classRandom.html</filename>
    <member kind="function">
      <type></type>
      <name>Random</name>
      <anchorfile>classRandom.html</anchorfile>
      <anchor>a510ef17add8a962faf696cf0f434d8f8</anchor>
      <arglist>(int64 seedValue) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Random</name>
      <anchorfile>classRandom.html</anchorfile>
      <anchor>acb76b49c3903a3c4fb67fd216341f08d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Random</name>
      <anchorfile>classRandom.html</anchorfile>
      <anchor>a98b1bf7fbd8c122c08c9f35b9e603923</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>nextInt</name>
      <anchorfile>classRandom.html</anchorfile>
      <anchor>a69dd2014564478eb13ca41c03679c8f9</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>nextInt</name>
      <anchorfile>classRandom.html</anchorfile>
      <anchor>a6ba948a9d1935253f9770d848f57412f</anchor>
      <arglist>(int maxValue) noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>nextInt</name>
      <anchorfile>classRandom.html</anchorfile>
      <anchor>abc9ff9c9678c94c54dcfb9e6f040b64c</anchor>
      <arglist>(Range&lt; int &gt; range) noexcept</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>nextInt64</name>
      <anchorfile>classRandom.html</anchorfile>
      <anchor>aa78fa923adb76a168c5c67d072cfcef3</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>nextFloat</name>
      <anchorfile>classRandom.html</anchorfile>
      <anchor>aec88d4e5cf44faaa038f6cfb41e96406</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>nextDouble</name>
      <anchorfile>classRandom.html</anchorfile>
      <anchor>a764eba8fe3386554268f395ff1c4e7ea</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>nextBool</name>
      <anchorfile>classRandom.html</anchorfile>
      <anchor>aa360f04c653725ec92b3173af338ed37</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>BigInteger</type>
      <name>nextLargeNumber</name>
      <anchorfile>classRandom.html</anchorfile>
      <anchor>af9aacfc547bfcdba8aa2fa8f04022896</anchor>
      <arglist>(const BigInteger &amp;maximumValue)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fillBitsRandomly</name>
      <anchorfile>classRandom.html</anchorfile>
      <anchor>a9730ae70ef775fc729b3f6c30ccd7ebc</anchor>
      <arglist>(void *bufferToFill, size_t sizeInBytes)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fillBitsRandomly</name>
      <anchorfile>classRandom.html</anchorfile>
      <anchor>a212bf60fe480e13ea468ba4db1de3329</anchor>
      <arglist>(BigInteger &amp;arrayToChange, int startBit, int numBits)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSeed</name>
      <anchorfile>classRandom.html</anchorfile>
      <anchor>a09bc3dbf46b852575593fa732dcbb824</anchor>
      <arglist>(int64 newSeed) noexcept</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>getSeed</name>
      <anchorfile>classRandom.html</anchorfile>
      <anchor>a861cb0ae6a3d0387416b12c8efeabc9e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>combineSeed</name>
      <anchorfile>classRandom.html</anchorfile>
      <anchor>af8a7c8f1f8aa96b761c441f34382cd4a</anchor>
      <arglist>(int64 seedValue) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSeedRandomly</name>
      <anchorfile>classRandom.html</anchorfile>
      <anchor>a2b697677bd4fef05082e7c036366289d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Random &amp;</type>
      <name>getSystemRandom</name>
      <anchorfile>classRandom.html</anchorfile>
      <anchor>ab28f53c256fcd938cd86137c5c44c5fc</anchor>
      <arglist>() noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Range</name>
    <filename>classRange.html</filename>
    <templarg>ValueType</templarg>
    <member kind="function">
      <type></type>
      <name>Range</name>
      <anchorfile>classRange.html</anchorfile>
      <anchor>a83a189600c18bec7299c3e66423a640d</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Range</name>
      <anchorfile>classRange.html</anchorfile>
      <anchor>aa8bd30569eac42c002fad4d9f1cdcaa2</anchor>
      <arglist>(const ValueType startValue, const ValueType endValue) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Range</name>
      <anchorfile>classRange.html</anchorfile>
      <anchor>a3a9eaa9e1d16af81b0afe4454ff21b4a</anchor>
      <arglist>(const Range &amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Range &amp;</type>
      <name>operator=</name>
      <anchorfile>classRange.html</anchorfile>
      <anchor>a93e3998983b98393d5fb0d59d87be679</anchor>
      <arglist>(Range other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>getStart</name>
      <anchorfile>classRange.html</anchorfile>
      <anchor>a3709db921df3cf8d170bb7f983b1f05c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>getLength</name>
      <anchorfile>classRange.html</anchorfile>
      <anchor>af1bac15b46a7d40c7b136c1075553171</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>getEnd</name>
      <anchorfile>classRange.html</anchorfile>
      <anchor>a74c09ef37d18ee8bbd1fdaaeb1d0fcf2</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEmpty</name>
      <anchorfile>classRange.html</anchorfile>
      <anchor>ad0b11c4ca306ab0ca552e5bca6b91523</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStart</name>
      <anchorfile>classRange.html</anchorfile>
      <anchor>a6dc2c7d34ff6b3ac8de07efe2274b366</anchor>
      <arglist>(const ValueType newStart) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Range</type>
      <name>withStart</name>
      <anchorfile>classRange.html</anchorfile>
      <anchor>a967f3f5dca8f6c21b809b800c5617969</anchor>
      <arglist>(const ValueType newStart) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Range</type>
      <name>movedToStartAt</name>
      <anchorfile>classRange.html</anchorfile>
      <anchor>ac43518af962bee4118ff13df4f176cf6</anchor>
      <arglist>(const ValueType newStart) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEnd</name>
      <anchorfile>classRange.html</anchorfile>
      <anchor>a720abbdd9cc650ef1927f35822865ee0</anchor>
      <arglist>(const ValueType newEnd) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Range</type>
      <name>withEnd</name>
      <anchorfile>classRange.html</anchorfile>
      <anchor>a9287e31c3329ff73598414814a015574</anchor>
      <arglist>(const ValueType newEnd) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Range</type>
      <name>movedToEndAt</name>
      <anchorfile>classRange.html</anchorfile>
      <anchor>a5ea22f43dcf5400fa812ef86f0b2b237</anchor>
      <arglist>(const ValueType newEnd) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLength</name>
      <anchorfile>classRange.html</anchorfile>
      <anchor>a30634e64e7b97081134a96465bb9d1b9</anchor>
      <arglist>(const ValueType newLength) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Range</type>
      <name>withLength</name>
      <anchorfile>classRange.html</anchorfile>
      <anchor>af1c3c27187978044ce66611d572cbd60</anchor>
      <arglist>(const ValueType newLength) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Range</type>
      <name>expanded</name>
      <anchorfile>classRange.html</anchorfile>
      <anchor>ac50a21a44f0f91ce99c20e4eb63c0d77</anchor>
      <arglist>(ValueType amount) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Range</type>
      <name>operator+=</name>
      <anchorfile>classRange.html</anchorfile>
      <anchor>adc6baf759e772487ec0f6adc4cb8419e</anchor>
      <arglist>(const ValueType amountToAdd) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Range</type>
      <name>operator-=</name>
      <anchorfile>classRange.html</anchorfile>
      <anchor>a0a8730de1b231a0f8d0bd326dcf23abf</anchor>
      <arglist>(const ValueType amountToSubtract) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Range</type>
      <name>operator+</name>
      <anchorfile>classRange.html</anchorfile>
      <anchor>a5df07a0205fb16865411244b5c6fbe83</anchor>
      <arglist>(const ValueType amountToAdd) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Range</type>
      <name>operator-</name>
      <anchorfile>classRange.html</anchorfile>
      <anchor>a41de372355de47a0f991f8079add45bf</anchor>
      <arglist>(const ValueType amountToSubtract) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classRange.html</anchorfile>
      <anchor>a8386ed8d72507d65327be5824b4592ba</anchor>
      <arglist>(Range other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classRange.html</anchorfile>
      <anchor>afc14126aafcd598a037fda09a7ffa4af</anchor>
      <arglist>(Range other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>classRange.html</anchorfile>
      <anchor>a23fa32169a76c2d3c44b2576c2b9e2d9</anchor>
      <arglist>(const ValueType position) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>clipValue</name>
      <anchorfile>classRange.html</anchorfile>
      <anchor>a67ae86bf19391b172c5a942e17a8270b</anchor>
      <arglist>(const ValueType value) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>classRange.html</anchorfile>
      <anchor>a4a4d444a5ebea71298117fe26025528f</anchor>
      <arglist>(Range other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>intersects</name>
      <anchorfile>classRange.html</anchorfile>
      <anchor>a24cf0b152f6151c4dff2681fc7e6394d</anchor>
      <arglist>(Range other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Range</type>
      <name>getIntersectionWith</name>
      <anchorfile>classRange.html</anchorfile>
      <anchor>a682ee4799e0be0dc3eb9a0da774e871c</anchor>
      <arglist>(Range other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Range</type>
      <name>getUnionWith</name>
      <anchorfile>classRange.html</anchorfile>
      <anchor>ad7e2ae9bfcb620d68c7ce51e06c925b0</anchor>
      <arglist>(Range other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Range</type>
      <name>getUnionWith</name>
      <anchorfile>classRange.html</anchorfile>
      <anchor>a97412aec8b692a8293b9f80cf61002d5</anchor>
      <arglist>(const ValueType valueToInclude) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Range</type>
      <name>constrainRange</name>
      <anchorfile>classRange.html</anchorfile>
      <anchor>a4303a16b170ae1626bdd693f7fa17872</anchor>
      <arglist>(Range rangeToConstrain) const noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Range</type>
      <name>between</name>
      <anchorfile>classRange.html</anchorfile>
      <anchor>aa0165f9820b176b5df903e19c8a2a88b</anchor>
      <arglist>(const ValueType position1, const ValueType position2) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Range</type>
      <name>withStartAndLength</name>
      <anchorfile>classRange.html</anchorfile>
      <anchor>adf34bee3fb884edeea097dc4ca1f5362</anchor>
      <arglist>(const ValueType startValue, const ValueType length) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Range</type>
      <name>emptyRange</name>
      <anchorfile>classRange.html</anchorfile>
      <anchor>ad7d026bfc44eaa1dc8725fd13bfe8d77</anchor>
      <arglist>(const ValueType start) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Range</type>
      <name>findMinAndMax</name>
      <anchorfile>classRange.html</anchorfile>
      <anchor>a1b18340b1278144ba21569ead4ffe292</anchor>
      <arglist>(const ValueType *values, int numValues) noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ReadWriteLock</name>
    <filename>classReadWriteLock.html</filename>
    <member kind="function">
      <type></type>
      <name>ReadWriteLock</name>
      <anchorfile>classReadWriteLock.html</anchorfile>
      <anchor>ac4d03ea1fd3a24c1813492b8487134af</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ReadWriteLock</name>
      <anchorfile>classReadWriteLock.html</anchorfile>
      <anchor>af57fd41f09be7654f33cc0e4aa458e5a</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enterRead</name>
      <anchorfile>classReadWriteLock.html</anchorfile>
      <anchor>ae69612d80a6abdccfd0f911eea78bec7</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>tryEnterRead</name>
      <anchorfile>classReadWriteLock.html</anchorfile>
      <anchor>adfc94e3cea69acf123d343eca82bdc51</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>exitRead</name>
      <anchorfile>classReadWriteLock.html</anchorfile>
      <anchor>a4f84fd4d0560d01674922e650c0ca4bc</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enterWrite</name>
      <anchorfile>classReadWriteLock.html</anchorfile>
      <anchor>a680913272878d262ab8dff16b3b5a4e7</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>tryEnterWrite</name>
      <anchorfile>classReadWriteLock.html</anchorfile>
      <anchor>ac7f0b0aefca34943957ac1623b97a8a2</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>exitWrite</name>
      <anchorfile>classReadWriteLock.html</anchorfile>
      <anchor>a3368936be01cf4eb129838230098abe8</anchor>
      <arglist>() const noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RecentlyOpenedFilesList</name>
    <filename>classRecentlyOpenedFilesList.html</filename>
    <member kind="function">
      <type></type>
      <name>RecentlyOpenedFilesList</name>
      <anchorfile>classRecentlyOpenedFilesList.html</anchorfile>
      <anchor>a1be25db49e1770f3f294121d7a407537</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~RecentlyOpenedFilesList</name>
      <anchorfile>classRecentlyOpenedFilesList.html</anchorfile>
      <anchor>afdd6264636158fdecd942bc522336dd9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaxNumberOfItems</name>
      <anchorfile>classRecentlyOpenedFilesList.html</anchorfile>
      <anchor>aa022b3b01d6d0af7c9ef63ce543924d3</anchor>
      <arglist>(int newMaxNumber)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getMaxNumberOfItems</name>
      <anchorfile>classRecentlyOpenedFilesList.html</anchorfile>
      <anchor>a9620dfc3f2ce6a9d8ddf25020b650cd5</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumFiles</name>
      <anchorfile>classRecentlyOpenedFilesList.html</anchorfile>
      <anchor>af8ee782e0440ed9c9ecb1c7f199268bd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>File</type>
      <name>getFile</name>
      <anchorfile>classRecentlyOpenedFilesList.html</anchorfile>
      <anchor>a982bf4d1a993b582df76850ed0d4fffa</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function">
      <type>const StringArray &amp;</type>
      <name>getAllFilenames</name>
      <anchorfile>classRecentlyOpenedFilesList.html</anchorfile>
      <anchor>af59ea122b4e9837f897b2fc2f4071e72</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classRecentlyOpenedFilesList.html</anchorfile>
      <anchor>aefd50d336abfb51a10ea37dc55362848</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addFile</name>
      <anchorfile>classRecentlyOpenedFilesList.html</anchorfile>
      <anchor>a06acf3ddf28eb9ac3bb71d66adfadc11</anchor>
      <arglist>(const File &amp;file)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeFile</name>
      <anchorfile>classRecentlyOpenedFilesList.html</anchorfile>
      <anchor>a391a9c9b097104eb2ab5848bf26bdcdb</anchor>
      <arglist>(const File &amp;file)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeNonExistentFiles</name>
      <anchorfile>classRecentlyOpenedFilesList.html</anchorfile>
      <anchor>abd9dfb078ad5a95455c2db116b4d7c8b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>createPopupMenuItems</name>
      <anchorfile>classRecentlyOpenedFilesList.html</anchorfile>
      <anchor>a5ca3c3d1efd27beacd331b950cd30269</anchor>
      <arglist>(PopupMenu &amp;menuToAddItemsTo, int baseItemId, bool showFullPaths, bool dontAddNonExistentFiles, const File **filesToAvoid=nullptr)</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>toString</name>
      <anchorfile>classRecentlyOpenedFilesList.html</anchorfile>
      <anchor>a1415a5e0a07cdb3ff5186707546c8fcf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>restoreFromString</name>
      <anchorfile>classRecentlyOpenedFilesList.html</anchorfile>
      <anchor>ac1c8310d4a13cba8c0b7168b980e7e09</anchor>
      <arglist>(const String &amp;stringifiedVersion)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>registerRecentFileNatively</name>
      <anchorfile>classRecentlyOpenedFilesList.html</anchorfile>
      <anchor>a8e4455fedda03b94a62fadec4a643cec</anchor>
      <arglist>(const File &amp;file)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Rectangle</name>
    <filename>classRectangle.html</filename>
    <templarg>ValueType</templarg>
    <member kind="function">
      <type></type>
      <name>Rectangle</name>
      <anchorfile>classRectangle.html</anchorfile>
      <anchor>a714de88b89a1750213007bee523186c1</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Rectangle</name>
      <anchorfile>classRectangle.html</anchorfile>
      <anchor>ad08f352cfd36d1b41954624b4689ad5d</anchor>
      <arglist>(const Rectangle &amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Rectangle</name>
      <anchorfile>classRectangle.html</anchorfile>
      <anchor>a7994113540a2a4c49b18eb569a0c8340</anchor>
      <arglist>(ValueType initialX, ValueType initialY, ValueType width, ValueType height) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Rectangle</name>
      <anchorfile>classRectangle.html</anchorfile>
      <anchor>a7d2b288a2233e1816ea9830b72cfdb32</anchor>
      <arglist>(ValueType width, ValueType height) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Rectangle</name>
      <anchorfile>classRectangle.html</anchorfile>
      <anchor>aa658889c941248f163f5d6b149d3545a</anchor>
      <arglist>(Point&lt; ValueType &gt; corner1, Point&lt; ValueType &gt; corner2) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Rectangle &amp;</type>
      <name>operator=</name>
      <anchorfile>classRectangle.html</anchorfile>
      <anchor>a3a5b58053b811e4cbc9406ab5010491d</anchor>
      <arglist>(const Rectangle &amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Rectangle</name>
      <anchorfile>classRectangle.html</anchorfile>
      <anchor>ae4f36d6e7f37a57ec4a557a67679f114</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEmpty</name>
      <anchorfile>classRectangle.html</anchorfile>
      <anchor>ad079632253a625cf014bc52cf26485f4</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isFinite</name>
      <anchorfile>classRectangle.html</anchorfile>
      <anchor>a089755ce60af99f576e28317d5302531</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>getX</name>
      <anchorfile>classRectangle.html</anchorfile>
      <anchor>a4b8223fb659d6c7f95a72e8d3fbe793d</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>getY</name>
      <anchorfile>classRectangle.html</anchorfile>
      <anchor>a3050042669b496be5f029b1ab6fc1f52</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>getWidth</name>
      <anchorfile>classRectangle.html</anchorfile>
      <anchor>a76c51bd8fcbdd3ac5d8f6dff3cf4a57e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>getHeight</name>
      <anchorfile>classRectangle.html</anchorfile>
      <anchor>a92fff07d827126d92607d0d7c395c323</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>getRight</name>
      <anchorfile>classRectangle.html</anchorfile>
      <anchor>aeea826946e996fc0b3d8f44d21b181c0</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>getBottom</name>
      <anchorfile>classRectangle.html</anchorfile>
      <anchor>af6b325feb4f7b107bcc51aee56a5fbc1</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>getCentreX</name>
      <anchorfile>classRectangle.html</anchorfile>
      <anchor>af59d74140460070d2dace797d8a984ee</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>getCentreY</name>
      <anchorfile>classRectangle.html</anchorfile>
      <anchor>a5259e814b4ff2265beffecb4d76c7f0c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Point&lt; ValueType &gt;</type>
      <name>getCentre</name>
      <anchorfile>classRectangle.html</anchorfile>
      <anchor>a77e28cc95dab05e0a3740fd45bd554f9</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>getAspectRatio</name>
      <anchorfile>classRectangle.html</anchorfile>
      <anchor>a5ded45ac5efb05405eba7d8c4a186a38</anchor>
      <arglist>(bool widthOverHeight=true) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Point&lt; ValueType &gt;</type>
      <name>getPosition</name>
      <anchorfile>classRectangle.html</anchorfile>
      <anchor>a0261ff3bdf31c17bcb11759025a29238</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPosition</name>
      <anchorfile>classRectangle.html</anchorfile>
      <anchor>a7e23c204d0dc5b311e5276bda06e2174</anchor>
      <arglist>(Point&lt; ValueType &gt; newPos) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPosition</name>
      <anchorfile>classRectangle.html</anchorfile>
      <anchor>ae6d4a3356f9a9038d08d68e18927373e</anchor>
      <arglist>(ValueType newX, ValueType newY) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Point&lt; ValueType &gt;</type>
      <name>getTopLeft</name>
      <anchorfile>classRectangle.html</anchorfile>
      <anchor>aff07ae396af2ebf2ccb302c73b46441b</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Point&lt; ValueType &gt;</type>
      <name>getTopRight</name>
      <anchorfile>classRectangle.html</anchorfile>
      <anchor>a7551d1036a0b73ffed81ff1b82a2d6b2</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Point&lt; ValueType &gt;</type>
      <name>getBottomLeft</name>
      <anchorfile>classRectangle.html</anchorfile>
      <anchor>a3552707d8d5712d749653efc2a117592</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Point&lt; ValueType &gt;</type>
      <name>getBottomRight</name>
      <anchorfile>classRectangle.html</anchorfile>
      <anchor>a227c5996016fa75ccc9745aa72b22b97</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Range&lt; ValueType &gt;</type>
      <name>getHorizontalRange</name>
      <anchorfile>classRectangle.html</anchorfile>
      <anchor>af4b2683b71a378aabefc5e373153312a</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Range&lt; ValueType &gt;</type>
      <name>getVerticalRange</name>
      <anchorfile>classRectangle.html</anchorfile>
      <anchor>a89d1cefaf7586f5c4e9b2fd2771bdbc1</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSize</name>
      <anchorfile>classRectangle.html</anchorfile>
      <anchor>abda6f95da8f85ce896652bd9eacd2183</anchor>
      <arglist>(ValueType newWidth, ValueType newHeight) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBounds</name>
      <anchorfile>classRectangle.html</anchorfile>
      <anchor>a9006d88b3ca06d4da57f9960dbc13ed6</anchor>
      <arglist>(ValueType newX, ValueType newY, ValueType newWidth, ValueType newHeight) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setX</name>
      <anchorfile>classRectangle.html</anchorfile>
      <anchor>ae2781b7d472f7f884589846f25366cfb</anchor>
      <arglist>(ValueType newX) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setY</name>
      <anchorfile>classRectangle.html</anchorfile>
      <anchor>aee56aca55454ee438f7ceaa7fbce014d</anchor>
      <arglist>(ValueType newY) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setWidth</name>
      <anchorfile>classRectangle.html</anchorfile>
      <anchor>a8404c4d1ad2060433bffc9b761c6212e</anchor>
      <arglist>(ValueType newWidth) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setHeight</name>
      <anchorfile>classRectangle.html</anchorfile>
      <anchor>a5409ec62e9af9bb374bcfc9cef39941c</anchor>
      <arglist>(ValueType newHeight) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCentre</name>
      <anchorfile>classRectangle.html</anchorfile>
      <anchor>a495ed32b0a5de81654d25c1f274e5159</anchor>
      <arglist>(ValueType newCentreX, ValueType newCentreY) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCentre</name>
      <anchorfile>classRectangle.html</anchorfile>
      <anchor>a7e0425f1f75d60c2849e2b2f6175c44c</anchor>
      <arglist>(Point&lt; ValueType &gt; newCentre) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setHorizontalRange</name>
      <anchorfile>classRectangle.html</anchorfile>
      <anchor>a711e64d9842cc1fecad266646c27a1e5</anchor>
      <arglist>(Range&lt; ValueType &gt; range) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVerticalRange</name>
      <anchorfile>classRectangle.html</anchorfile>
      <anchor>a0d133fb0af2a675fff4f7a4420eaba7c</anchor>
      <arglist>(Range&lt; ValueType &gt; range) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Rectangle</type>
      <name>withX</name>
      <anchorfile>classRectangle.html</anchorfile>
      <anchor>ab7cad7c96c191ff4affa28757ae2ade0</anchor>
      <arglist>(ValueType newX) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Rectangle</type>
      <name>withY</name>
      <anchorfile>classRectangle.html</anchorfile>
      <anchor>ab989f8938b2daa529b8e12494114be0a</anchor>
      <arglist>(ValueType newY) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Rectangle</type>
      <name>withRightX</name>
      <anchorfile>classRectangle.html</anchorfile>
      <anchor>a8a5e0f62c0550a19a406c0460f9e5c5b</anchor>
      <arglist>(ValueType newRightX) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Rectangle</type>
      <name>withBottomY</name>
      <anchorfile>classRectangle.html</anchorfile>
      <anchor>ab64c76898f6b47ece254675c075e6450</anchor>
      <arglist>(ValueType newBottomY) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Rectangle</type>
      <name>withPosition</name>
      <anchorfile>classRectangle.html</anchorfile>
      <anchor>a01440bb20c425e8be7b58bd60a0c164f</anchor>
      <arglist>(ValueType newX, ValueType newY) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Rectangle</type>
      <name>withPosition</name>
      <anchorfile>classRectangle.html</anchorfile>
      <anchor>a123c1f4aca75177262e896091933c4d0</anchor>
      <arglist>(Point&lt; ValueType &gt; newPos) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Rectangle</type>
      <name>withZeroOrigin</name>
      <anchorfile>classRectangle.html</anchorfile>
      <anchor>a37748fcf8ae61d1aa31ab49aa5cc787c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Rectangle</type>
      <name>withCentre</name>
      <anchorfile>classRectangle.html</anchorfile>
      <anchor>ae62c5d54c86744e1d21b300e70fa3ca4</anchor>
      <arglist>(Point&lt; ValueType &gt; newCentre) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Rectangle</type>
      <name>withWidth</name>
      <anchorfile>classRectangle.html</anchorfile>
      <anchor>aa6535793ce323795d12e8cf25e9cbcc3</anchor>
      <arglist>(ValueType newWidth) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Rectangle</type>
      <name>withHeight</name>
      <anchorfile>classRectangle.html</anchorfile>
      <anchor>afaefb31c84e0c2ba2e137ef7635442ee</anchor>
      <arglist>(ValueType newHeight) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Rectangle</type>
      <name>withSize</name>
      <anchorfile>classRectangle.html</anchorfile>
      <anchor>affc948b0f4636455906fa587c7c3fb72</anchor>
      <arglist>(ValueType newWidth, ValueType newHeight) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Rectangle</type>
      <name>withSizeKeepingCentre</name>
      <anchorfile>classRectangle.html</anchorfile>
      <anchor>ac9df3fd3a8c83b92a1299981025ba225</anchor>
      <arglist>(ValueType newWidth, ValueType newHeight) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLeft</name>
      <anchorfile>classRectangle.html</anchorfile>
      <anchor>aae36b6ef82255e6f5f75e817de1c57f2</anchor>
      <arglist>(ValueType newLeft) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Rectangle</type>
      <name>withLeft</name>
      <anchorfile>classRectangle.html</anchorfile>
      <anchor>aed76e59294bbe5db608d2909db958b82</anchor>
      <arglist>(ValueType newLeft) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTop</name>
      <anchorfile>classRectangle.html</anchorfile>
      <anchor>aca3a55b96b0f7a4479bbd99fdfa5f06c</anchor>
      <arglist>(ValueType newTop) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Rectangle</type>
      <name>withTop</name>
      <anchorfile>classRectangle.html</anchorfile>
      <anchor>a83adb415b76c84c38d40d4c0c59199b4</anchor>
      <arglist>(ValueType newTop) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRight</name>
      <anchorfile>classRectangle.html</anchorfile>
      <anchor>a486d587b371e649db93399e8c673a568</anchor>
      <arglist>(ValueType newRight) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Rectangle</type>
      <name>withRight</name>
      <anchorfile>classRectangle.html</anchorfile>
      <anchor>a65248df3d4e47bc1f76a3677b881da6b</anchor>
      <arglist>(ValueType newRight) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBottom</name>
      <anchorfile>classRectangle.html</anchorfile>
      <anchor>a6d012ef063e3679e7d1eb5ba0e2e5d6b</anchor>
      <arglist>(ValueType newBottom) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Rectangle</type>
      <name>withBottom</name>
      <anchorfile>classRectangle.html</anchorfile>
      <anchor>ad1afaef68c7e102e68e7aee989893a7d</anchor>
      <arglist>(ValueType newBottom) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Rectangle</type>
      <name>withTrimmedLeft</name>
      <anchorfile>classRectangle.html</anchorfile>
      <anchor>afda1d0e4912c63f3b8a28e3c883555af</anchor>
      <arglist>(ValueType amountToRemove) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Rectangle</type>
      <name>withTrimmedRight</name>
      <anchorfile>classRectangle.html</anchorfile>
      <anchor>a10cc2940bb2e944551fee774c6326785</anchor>
      <arglist>(ValueType amountToRemove) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Rectangle</type>
      <name>withTrimmedTop</name>
      <anchorfile>classRectangle.html</anchorfile>
      <anchor>a10a020722da34fcc956c43ced0547cb3</anchor>
      <arglist>(ValueType amountToRemove) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Rectangle</type>
      <name>withTrimmedBottom</name>
      <anchorfile>classRectangle.html</anchorfile>
      <anchor>ad60dbbd7e831d7df061eab4a0c802420</anchor>
      <arglist>(ValueType amountToRemove) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>translate</name>
      <anchorfile>classRectangle.html</anchorfile>
      <anchor>aa13dfd466078c2710fdea6ff2f7b263b</anchor>
      <arglist>(ValueType deltaX, ValueType deltaY) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Rectangle</type>
      <name>translated</name>
      <anchorfile>classRectangle.html</anchorfile>
      <anchor>a15c8a44d4b194032bb072869a7161eef</anchor>
      <arglist>(ValueType deltaX, ValueType deltaY) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Rectangle</type>
      <name>operator+</name>
      <anchorfile>classRectangle.html</anchorfile>
      <anchor>a030cf838ccbc6a1b0b44bd127eabdf8d</anchor>
      <arglist>(Point&lt; ValueType &gt; deltaPosition) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Rectangle &amp;</type>
      <name>operator+=</name>
      <anchorfile>classRectangle.html</anchorfile>
      <anchor>a2995928f1977e11e69cbad6b7eab610d</anchor>
      <arglist>(Point&lt; ValueType &gt; deltaPosition) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Rectangle</type>
      <name>operator-</name>
      <anchorfile>classRectangle.html</anchorfile>
      <anchor>a11a2bb1c04b8f0ae9bb76d21dc3fc289</anchor>
      <arglist>(Point&lt; ValueType &gt; deltaPosition) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Rectangle &amp;</type>
      <name>operator-=</name>
      <anchorfile>classRectangle.html</anchorfile>
      <anchor>abddeb1fa13351683312224b5a05e4bff</anchor>
      <arglist>(Point&lt; ValueType &gt; deltaPosition) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Rectangle</type>
      <name>operator*</name>
      <anchorfile>classRectangle.html</anchorfile>
      <anchor>a768376e996b91ecb83d5ec7f0db2d50c</anchor>
      <arglist>(FloatType scaleFactor) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Rectangle</type>
      <name>operator*=</name>
      <anchorfile>classRectangle.html</anchorfile>
      <anchor>acec9ecfe72bc29922e82e21e513a93ed</anchor>
      <arglist>(FloatType scaleFactor) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Rectangle</type>
      <name>operator*=</name>
      <anchorfile>classRectangle.html</anchorfile>
      <anchor>a4d57fb0ba0504adcbbd7512d2e9f5c10</anchor>
      <arglist>(Point&lt; FloatType &gt; scaleFactor) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Rectangle</type>
      <name>operator/</name>
      <anchorfile>classRectangle.html</anchorfile>
      <anchor>a31c2880e4d60ddb1a1d584585504d455</anchor>
      <arglist>(FloatType scaleFactor) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Rectangle</type>
      <name>operator/=</name>
      <anchorfile>classRectangle.html</anchorfile>
      <anchor>ae01803333e37bbc2a49f97f1f720b373</anchor>
      <arglist>(FloatType scaleFactor) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Rectangle</type>
      <name>operator/=</name>
      <anchorfile>classRectangle.html</anchorfile>
      <anchor>afcf0bb5a06cdcce6064ffb07dd7ef325</anchor>
      <arglist>(Point&lt; FloatType &gt; scaleFactor) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>expand</name>
      <anchorfile>classRectangle.html</anchorfile>
      <anchor>a2c16260a8af324607ed81ecf4ec09958</anchor>
      <arglist>(ValueType deltaX, ValueType deltaY) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Rectangle</type>
      <name>expanded</name>
      <anchorfile>classRectangle.html</anchorfile>
      <anchor>a36ad43dd58aecee9f6ca3b7060a5d7a8</anchor>
      <arglist>(ValueType deltaX, ValueType deltaY) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Rectangle</type>
      <name>expanded</name>
      <anchorfile>classRectangle.html</anchorfile>
      <anchor>ab54d0c3048913f34a392bc64719712b6</anchor>
      <arglist>(ValueType delta) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reduce</name>
      <anchorfile>classRectangle.html</anchorfile>
      <anchor>aa1aa5758b0ddcced6954c5f82692ac63</anchor>
      <arglist>(ValueType deltaX, ValueType deltaY) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Rectangle</type>
      <name>reduced</name>
      <anchorfile>classRectangle.html</anchorfile>
      <anchor>a5623a7886c63a08917b392c7bc1135a9</anchor>
      <arglist>(ValueType deltaX, ValueType deltaY) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Rectangle</type>
      <name>reduced</name>
      <anchorfile>classRectangle.html</anchorfile>
      <anchor>a4b6a47b69d7fbb3560c32f3bbd3829bf</anchor>
      <arglist>(ValueType delta) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Rectangle</type>
      <name>removeFromTop</name>
      <anchorfile>classRectangle.html</anchorfile>
      <anchor>a3fbd4e7e1df5336980fb7ec5e752a222</anchor>
      <arglist>(ValueType amountToRemove) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Rectangle</type>
      <name>removeFromLeft</name>
      <anchorfile>classRectangle.html</anchorfile>
      <anchor>a6f09929fd89d447eb230c170446788ac</anchor>
      <arglist>(ValueType amountToRemove) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Rectangle</type>
      <name>removeFromRight</name>
      <anchorfile>classRectangle.html</anchorfile>
      <anchor>a67c1ae2bf4753bda71894271dc94b4f6</anchor>
      <arglist>(ValueType amountToRemove) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Rectangle</type>
      <name>removeFromBottom</name>
      <anchorfile>classRectangle.html</anchorfile>
      <anchor>a6f7d3a88adfc3b3bf699ca4ce5b9e6c0</anchor>
      <arglist>(ValueType amountToRemove) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Point&lt; ValueType &gt;</type>
      <name>getConstrainedPoint</name>
      <anchorfile>classRectangle.html</anchorfile>
      <anchor>a149d775ac5650d5b5b1de9ac168122de</anchor>
      <arglist>(Point&lt; ValueType &gt; point) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Point&lt; ValueType &gt;</type>
      <name>getRelativePoint</name>
      <anchorfile>classRectangle.html</anchorfile>
      <anchor>a1d9031853c8f85af01734389f8410a4c</anchor>
      <arglist>(FloatType relativeX, FloatType relativeY) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>proportionOfWidth</name>
      <anchorfile>classRectangle.html</anchorfile>
      <anchor>a2ed936ba6b11cb4bcdcdb1b18782abd3</anchor>
      <arglist>(FloatType proportion) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>proportionOfHeight</name>
      <anchorfile>classRectangle.html</anchorfile>
      <anchor>a675e653f495b727f98ff17d736541a38</anchor>
      <arglist>(FloatType proportion) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Rectangle</type>
      <name>getProportion</name>
      <anchorfile>classRectangle.html</anchorfile>
      <anchor>a3676ad7ea0695ebe2707ca548c65702a</anchor>
      <arglist>(Rectangle&lt; FloatType &gt; proportionalRect) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classRectangle.html</anchorfile>
      <anchor>a73b0d6132398d4c2530ef6ba13d706fd</anchor>
      <arglist>(const Rectangle &amp;other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classRectangle.html</anchorfile>
      <anchor>aab19e84fc33b5bfb641b2989b6cc29f8</anchor>
      <arglist>(const Rectangle &amp;other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>classRectangle.html</anchorfile>
      <anchor>a48d94ffec18b4b4755b316c3b223c645</anchor>
      <arglist>(ValueType xCoord, ValueType yCoord) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>classRectangle.html</anchorfile>
      <anchor>affa85832415de5442b9ae1bf48e20faf</anchor>
      <arglist>(Point&lt; ValueType &gt; point) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>classRectangle.html</anchorfile>
      <anchor>a1897bfd827a2194af6b125110e022706</anchor>
      <arglist>(const Rectangle &amp;other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>intersects</name>
      <anchorfile>classRectangle.html</anchorfile>
      <anchor>a55ba80762b504054c3aaa02ae833f350</anchor>
      <arglist>(const Rectangle &amp;other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>intersects</name>
      <anchorfile>classRectangle.html</anchorfile>
      <anchor>ae0842c598b5a7acc86ed5eefb75248de</anchor>
      <arglist>(const Line&lt; ValueType &gt; &amp;line) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Rectangle</type>
      <name>getIntersection</name>
      <anchorfile>classRectangle.html</anchorfile>
      <anchor>a28a09961d9ad8b60909fd7d946521db9</anchor>
      <arglist>(const Rectangle &amp;other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>intersectRectangle</name>
      <anchorfile>classRectangle.html</anchorfile>
      <anchor>a7f81c03f0a7d413f28a6f1a2ba65560d</anchor>
      <arglist>(ValueType &amp;otherX, ValueType &amp;otherY, ValueType &amp;otherW, ValueType &amp;otherH) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>intersectRectangle</name>
      <anchorfile>classRectangle.html</anchorfile>
      <anchor>ab268529ec12065ec29dd4099a171c03f</anchor>
      <arglist>(Rectangle&lt; ValueType &gt; &amp;rectangleToClip) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Rectangle</type>
      <name>getUnion</name>
      <anchorfile>classRectangle.html</anchorfile>
      <anchor>af8cd7e93ec67369fd194202a27e992c1</anchor>
      <arglist>(const Rectangle &amp;other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>enlargeIfAdjacent</name>
      <anchorfile>classRectangle.html</anchorfile>
      <anchor>a2c3c2823f8e96240cde13789760de52b</anchor>
      <arglist>(const Rectangle &amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>reduceIfPartlyContainedIn</name>
      <anchorfile>classRectangle.html</anchorfile>
      <anchor>afeb73325b68201f34d2e51502ba286e6</anchor>
      <arglist>(const Rectangle &amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Rectangle</type>
      <name>constrainedWithin</name>
      <anchorfile>classRectangle.html</anchorfile>
      <anchor>ab3c4c6a30141ae1568de871763a9f453</anchor>
      <arglist>(const Rectangle &amp;areaToFitWithin) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Rectangle</type>
      <name>transformedBy</name>
      <anchorfile>classRectangle.html</anchorfile>
      <anchor>ab103d804bdf15b7ac1381dc79d6742b9</anchor>
      <arglist>(const AffineTransform &amp;transform) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Rectangle&lt; int &gt;</type>
      <name>getSmallestIntegerContainer</name>
      <anchorfile>classRectangle.html</anchorfile>
      <anchor>acbf2014087b3c3772848e868f98aaf33</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Rectangle&lt; int &gt;</type>
      <name>toNearestInt</name>
      <anchorfile>classRectangle.html</anchorfile>
      <anchor>a6d5a1862f3ea78cf6eb0ec54b2747cf0</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Rectangle&lt; float &gt;</type>
      <name>toFloat</name>
      <anchorfile>classRectangle.html</anchorfile>
      <anchor>aa39fc9127d088428ead1cb72a95d652a</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Rectangle&lt; double &gt;</type>
      <name>toDouble</name>
      <anchorfile>classRectangle.html</anchorfile>
      <anchor>a92fbbb29fe83b6d2aa033d4507fb441d</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Rectangle&lt; TargetType &gt;</type>
      <name>toType</name>
      <anchorfile>classRectangle.html</anchorfile>
      <anchor>a1a3cf7d8f4674deac36b849ac3992888</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>toString</name>
      <anchorfile>classRectangle.html</anchorfile>
      <anchor>a4f17a228cbf98c4bdc9af577687abb56</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Rectangle</type>
      <name>leftTopRightBottom</name>
      <anchorfile>classRectangle.html</anchorfile>
      <anchor>a07aef484eb8be1f93df7e2c4dbfe4409</anchor>
      <arglist>(ValueType left, ValueType top, ValueType right, ValueType bottom) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Rectangle</type>
      <name>findAreaContainingPoints</name>
      <anchorfile>classRectangle.html</anchorfile>
      <anchor>afd26907ad3c7deb3bb9cf8b298e774ae</anchor>
      <arglist>(const Point&lt; ValueType &gt; *const points, const int numPoints) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>intersectRectangles</name>
      <anchorfile>classRectangle.html</anchorfile>
      <anchor>ab8097b9c1774aebde29eb84fc3d1072c</anchor>
      <arglist>(ValueType &amp;x1, ValueType &amp;y1, ValueType &amp;w1, ValueType &amp;h1, const ValueType x2, const ValueType y2, const ValueType w2, const ValueType h2) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Rectangle</type>
      <name>fromString</name>
      <anchorfile>classRectangle.html</anchorfile>
      <anchor>aeebcebc71a8f2fb7fd216acb0bd45a55</anchor>
      <arglist>(StringRef stringVersion)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RectangleList</name>
    <filename>classRectangleList.html</filename>
    <templarg>ValueType</templarg>
    <member kind="typedef">
      <type>Rectangle&lt; ValueType &gt;</type>
      <name>RectangleType</name>
      <anchorfile>classRectangleList.html</anchorfile>
      <anchor>ad9d8b465737335563551e5f224fad32f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RectangleList</name>
      <anchorfile>classRectangleList.html</anchorfile>
      <anchor>ade36b6b0037022600942309463415a75</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RectangleList</name>
      <anchorfile>classRectangleList.html</anchorfile>
      <anchor>a8c29b4ad4740b391e7e4766a71b8f54d</anchor>
      <arglist>(const RectangleList &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RectangleList</name>
      <anchorfile>classRectangleList.html</anchorfile>
      <anchor>a15df0830ea3741a45339658f585e36d9</anchor>
      <arglist>(const RectangleType &amp;rect)</arglist>
    </member>
    <member kind="function">
      <type>RectangleList &amp;</type>
      <name>operator=</name>
      <anchorfile>classRectangleList.html</anchorfile>
      <anchor>a382be4bd2aac523bd922f76af8bb0ae2</anchor>
      <arglist>(const RectangleList &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RectangleList</name>
      <anchorfile>classRectangleList.html</anchorfile>
      <anchor>a76a1758b34d9884d3719734b1b418cb3</anchor>
      <arglist>(RectangleList &amp;&amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>RectangleList &amp;</type>
      <name>operator=</name>
      <anchorfile>classRectangleList.html</anchorfile>
      <anchor>a9b32bac42cd4137b8910a9333beab3f5</anchor>
      <arglist>(RectangleList &amp;&amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEmpty</name>
      <anchorfile>classRectangleList.html</anchorfile>
      <anchor>ad59356f54ef6100221d5dcaf27c15742</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumRectangles</name>
      <anchorfile>classRectangleList.html</anchorfile>
      <anchor>ac1f6b51deae420493425d69306539f1c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>RectangleType</type>
      <name>getRectangle</name>
      <anchorfile>classRectangleList.html</anchorfile>
      <anchor>aa38d0a40721433a143d5a5980b649030</anchor>
      <arglist>(int index) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classRectangleList.html</anchorfile>
      <anchor>a93361ce23ea57c1a09781337182517a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>classRectangleList.html</anchorfile>
      <anchor>a9df83403875d4288f1aa9a9cdd3245bb</anchor>
      <arglist>(const RectangleType &amp;rect)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>classRectangleList.html</anchorfile>
      <anchor>ac89368b777082d6f8151f2c0c51b2068</anchor>
      <arglist>(ValueType x, ValueType y, ValueType width, ValueType height)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addWithoutMerging</name>
      <anchorfile>classRectangleList.html</anchorfile>
      <anchor>a3ec4544b91f3a935000c5c3fe2d89d69</anchor>
      <arglist>(const RectangleType &amp;rect)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>classRectangleList.html</anchorfile>
      <anchor>a891b5bcbaebafbc1dfc120fbe1b71129</anchor>
      <arglist>(const RectangleList &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>subtract</name>
      <anchorfile>classRectangleList.html</anchorfile>
      <anchor>a8e5460224789d6b242ebbe0a801b4b62</anchor>
      <arglist>(const RectangleType &amp;rect)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>subtract</name>
      <anchorfile>classRectangleList.html</anchorfile>
      <anchor>a6a93f136213fd5773e08ab69267cb749</anchor>
      <arglist>(const RectangleList &amp;otherList)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>clipTo</name>
      <anchorfile>classRectangleList.html</anchorfile>
      <anchor>ae270885963acca0dcd78d80158605f1a</anchor>
      <arglist>(const RectangleType &amp;rect)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>clipTo</name>
      <anchorfile>classRectangleList.html</anchorfile>
      <anchor>a569c52b5100c4c7ec1c9915cdbcf2576</anchor>
      <arglist>(const RectangleList&lt; OtherValueType &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getIntersectionWith</name>
      <anchorfile>classRectangleList.html</anchorfile>
      <anchor>a42f68746a56cddd16eb4800aa367b59e</anchor>
      <arglist>(const RectangleType &amp;rect, RectangleList &amp;destRegion) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swapWith</name>
      <anchorfile>classRectangleList.html</anchorfile>
      <anchor>a15059455cd503d05378d089a8eed5488</anchor>
      <arglist>(RectangleList &amp;otherList) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>containsPoint</name>
      <anchorfile>classRectangleList.html</anchorfile>
      <anchor>a2007a2f8db5988f2b84f361c9190721e</anchor>
      <arglist>(Point&lt; ValueType &gt; point) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>containsPoint</name>
      <anchorfile>classRectangleList.html</anchorfile>
      <anchor>af2e24f41ebeb7de8fd7080c8b3a91d13</anchor>
      <arglist>(ValueType x, ValueType y) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>containsRectangle</name>
      <anchorfile>classRectangleList.html</anchorfile>
      <anchor>a51b36fe7c75ecc84952f95b52bb7928c</anchor>
      <arglist>(const RectangleType &amp;rectangleToCheck) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>intersectsRectangle</name>
      <anchorfile>classRectangleList.html</anchorfile>
      <anchor>a44184b9834cc99cda85a6d8778519ac0</anchor>
      <arglist>(const RectangleType &amp;rectangleToCheck) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>intersects</name>
      <anchorfile>classRectangleList.html</anchorfile>
      <anchor>a95fff4a17284343719915b4eeddeb0a4</anchor>
      <arglist>(const RectangleList &amp;other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>RectangleType</type>
      <name>getBounds</name>
      <anchorfile>classRectangleList.html</anchorfile>
      <anchor>a7c2004bc8ed19201d54777c5b65be967</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>consolidate</name>
      <anchorfile>classRectangleList.html</anchorfile>
      <anchor>a9e26bdb6310e0660c0b7ada7919546db</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>offsetAll</name>
      <anchorfile>classRectangleList.html</anchorfile>
      <anchor>a6929cdfe85b1ec2cbb87dbb4baa9e5f9</anchor>
      <arglist>(Point&lt; ValueType &gt; offset) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>offsetAll</name>
      <anchorfile>classRectangleList.html</anchorfile>
      <anchor>aaf0a168997e532d714d0f1169aff4897</anchor>
      <arglist>(ValueType dx, ValueType dy) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scaleAll</name>
      <anchorfile>classRectangleList.html</anchorfile>
      <anchor>a57af41f3e264b8c1d183149a9c50f03f</anchor>
      <arglist>(ScaleType scaleFactor) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>transformAll</name>
      <anchorfile>classRectangleList.html</anchorfile>
      <anchor>a3ada18acf295f59a9a00294205079d92</anchor>
      <arglist>(const AffineTransform &amp;transform) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Path</type>
      <name>toPath</name>
      <anchorfile>classRectangleList.html</anchorfile>
      <anchor>addbe3e5c0fe15fc6783a94ea3937e934</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const RectangleType *</type>
      <name>begin</name>
      <anchorfile>classRectangleList.html</anchorfile>
      <anchor>ac4a757a9274fb76b001bbbe97dc0a6b4</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const RectangleType *</type>
      <name>end</name>
      <anchorfile>classRectangleList.html</anchorfile>
      <anchor>a1b2d14e1b7ec911471559b32de41b277</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ensureStorageAllocated</name>
      <anchorfile>classRectangleList.html</anchorfile>
      <anchor>a60e3dc4d6f8830bc50173021613cf128</anchor>
      <arglist>(int minNumRectangles)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RectanglePlacement</name>
    <filename>classRectanglePlacement.html</filename>
    <member kind="enumeration">
      <type></type>
      <name>Flags</name>
      <anchorfile>classRectanglePlacement.html</anchorfile>
      <anchor>afd5464553fd6bb41d697f3fc1d7427ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>xLeft</name>
      <anchorfile>classRectanglePlacement.html</anchorfile>
      <anchor>afd5464553fd6bb41d697f3fc1d7427edae2539f35e48e3c7396cffeb8079e27dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>xRight</name>
      <anchorfile>classRectanglePlacement.html</anchorfile>
      <anchor>afd5464553fd6bb41d697f3fc1d7427eda72a92773894d10ec3b4ff55b56d08915</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>xMid</name>
      <anchorfile>classRectanglePlacement.html</anchorfile>
      <anchor>afd5464553fd6bb41d697f3fc1d7427edad1348e06780084037a29fc0621d10392</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>yTop</name>
      <anchorfile>classRectanglePlacement.html</anchorfile>
      <anchor>afd5464553fd6bb41d697f3fc1d7427eda1b650115227b059f9eb2c07ecdfcb3ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>yBottom</name>
      <anchorfile>classRectanglePlacement.html</anchorfile>
      <anchor>afd5464553fd6bb41d697f3fc1d7427eda467435011959541ca61cc362640db547</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>yMid</name>
      <anchorfile>classRectanglePlacement.html</anchorfile>
      <anchor>afd5464553fd6bb41d697f3fc1d7427eda8bfb9c8cceb359b4f00a9839168a7769</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>stretchToFit</name>
      <anchorfile>classRectanglePlacement.html</anchorfile>
      <anchor>afd5464553fd6bb41d697f3fc1d7427eda592b34ff9ad1d85db16f2e02c6252b8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>fillDestination</name>
      <anchorfile>classRectanglePlacement.html</anchorfile>
      <anchor>afd5464553fd6bb41d697f3fc1d7427edaace05e9cfe83bb3dbbef781d3622cd62</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>onlyReduceInSize</name>
      <anchorfile>classRectanglePlacement.html</anchorfile>
      <anchor>afd5464553fd6bb41d697f3fc1d7427eda32d2c8f0142b82c188af878548f4d238</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>onlyIncreaseInSize</name>
      <anchorfile>classRectanglePlacement.html</anchorfile>
      <anchor>afd5464553fd6bb41d697f3fc1d7427eda54aea49f09ca4f2ac6e5c81859067b7d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>doNotResize</name>
      <anchorfile>classRectanglePlacement.html</anchorfile>
      <anchor>afd5464553fd6bb41d697f3fc1d7427eda1b4035a6dd90fd7ecf4b2014f33bf16f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>centred</name>
      <anchorfile>classRectanglePlacement.html</anchorfile>
      <anchor>afd5464553fd6bb41d697f3fc1d7427edadf52ee04f4f43cfcc6049d49833dd946</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RectanglePlacement</name>
      <anchorfile>classRectanglePlacement.html</anchorfile>
      <anchor>af614522b9cccb64e01cec1d369883327</anchor>
      <arglist>(int placementFlags) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RectanglePlacement</name>
      <anchorfile>classRectanglePlacement.html</anchorfile>
      <anchor>a056e798a9bd29ece5ca308fd0dd05311</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RectanglePlacement</name>
      <anchorfile>classRectanglePlacement.html</anchorfile>
      <anchor>a014706d22f3c06af57a2f839056dede3</anchor>
      <arglist>(const RectanglePlacement &amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>RectanglePlacement &amp;</type>
      <name>operator=</name>
      <anchorfile>classRectanglePlacement.html</anchorfile>
      <anchor>aa99d3307746ed7b0c4ccae4b9d6d4563</anchor>
      <arglist>(const RectanglePlacement &amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classRectanglePlacement.html</anchorfile>
      <anchor>a3e64ce2434904316db91dee5d1029673</anchor>
      <arglist>(const RectanglePlacement &amp;) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classRectanglePlacement.html</anchorfile>
      <anchor>ad3ac2e1667bc4a2e618782101051f03e</anchor>
      <arglist>(const RectanglePlacement &amp;) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getFlags</name>
      <anchorfile>classRectanglePlacement.html</anchorfile>
      <anchor>aa1e343a06d0a81d560093dd27ecd560f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>testFlags</name>
      <anchorfile>classRectanglePlacement.html</anchorfile>
      <anchor>aa1e542a01a80f5f7a53399dd2ee385a6</anchor>
      <arglist>(int flagsToTest) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyTo</name>
      <anchorfile>classRectanglePlacement.html</anchorfile>
      <anchor>a1d2340aa383cee6dc141805ae680369d</anchor>
      <arglist>(double &amp;sourceX, double &amp;sourceY, double &amp;sourceW, double &amp;sourceH, double destinationX, double destinationY, double destinationW, double destinationH) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Rectangle&lt; ValueType &gt;</type>
      <name>appliedTo</name>
      <anchorfile>classRectanglePlacement.html</anchorfile>
      <anchor>a9ff073c34db65b921d8202300b9c115c</anchor>
      <arglist>(const Rectangle&lt; ValueType &gt; &amp;source, const Rectangle&lt; ValueType &gt; &amp;destination) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>AffineTransform</type>
      <name>getTransformToFit</name>
      <anchorfile>classRectanglePlacement.html</anchorfile>
      <anchor>a27ee84d4a5b441246af03be6c20763df</anchor>
      <arglist>(const Rectangle&lt; float &gt; &amp;source, const Rectangle&lt; float &gt; &amp;destination) const noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ReferenceCountedArray</name>
    <filename>classReferenceCountedArray.html</filename>
    <templarg>ObjectClass</templarg>
    <templarg>TypeOfCriticalSectionToUse</templarg>
    <member kind="typedef">
      <type>ReferenceCountedObjectPtr&lt; ObjectClass &gt;</type>
      <name>ObjectClassPtr</name>
      <anchorfile>classReferenceCountedArray.html</anchorfile>
      <anchor>a5aeb8e0e9bc7f0cb0f19237edf286f64</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TypeOfCriticalSectionToUse::ScopedLockType</type>
      <name>ScopedLockType</name>
      <anchorfile>classReferenceCountedArray.html</anchorfile>
      <anchor>a7298683e2cae9520f1b34a4d6679053d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ReferenceCountedArray</name>
      <anchorfile>classReferenceCountedArray.html</anchorfile>
      <anchor>a3026e9cca0a8b1d63751f3fbb930bf17</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ReferenceCountedArray</name>
      <anchorfile>classReferenceCountedArray.html</anchorfile>
      <anchor>ace310eb210683601fd6aac301795111c</anchor>
      <arglist>(const ReferenceCountedArray &amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ReferenceCountedArray</name>
      <anchorfile>classReferenceCountedArray.html</anchorfile>
      <anchor>a8966c5b4b7871123035f41fd4b7b530d</anchor>
      <arglist>(const ReferenceCountedArray&lt; OtherObjectClass, OtherCriticalSection &gt; &amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>ReferenceCountedArray &amp;</type>
      <name>operator=</name>
      <anchorfile>classReferenceCountedArray.html</anchorfile>
      <anchor>ab9fd36e38317591da957d13be587aeba</anchor>
      <arglist>(const ReferenceCountedArray &amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>ReferenceCountedArray&lt; ObjectClass, TypeOfCriticalSectionToUse &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classReferenceCountedArray.html</anchorfile>
      <anchor>af2ed6c93d85a8254447cd4289fef7caf</anchor>
      <arglist>(const ReferenceCountedArray&lt; OtherObjectClass, TypeOfCriticalSectionToUse &gt; &amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ReferenceCountedArray</name>
      <anchorfile>classReferenceCountedArray.html</anchorfile>
      <anchor>a22c778cc2086117da5ac870485cb34e0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classReferenceCountedArray.html</anchorfile>
      <anchor>a6dc6a1c3540a6f30456db545edb0486d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearQuick</name>
      <anchorfile>classReferenceCountedArray.html</anchorfile>
      <anchor>ad5a34e648c3dfc01493ca92838835bd1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>classReferenceCountedArray.html</anchorfile>
      <anchor>ad4865c477b65f161105ded613856de64</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEmpty</name>
      <anchorfile>classReferenceCountedArray.html</anchorfile>
      <anchor>ab1807aa4c5b58b6d02b6bb991ebd8715</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>ObjectClassPtr</type>
      <name>operator[]</name>
      <anchorfile>classReferenceCountedArray.html</anchorfile>
      <anchor>a28d5adcb50aff95ba86562c42718d39f</anchor>
      <arglist>(const int index) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>ObjectClassPtr</type>
      <name>getUnchecked</name>
      <anchorfile>classReferenceCountedArray.html</anchorfile>
      <anchor>a2f89994333ed33a20efc36e216939c58</anchor>
      <arglist>(const int index) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>ObjectClass *</type>
      <name>getObjectPointer</name>
      <anchorfile>classReferenceCountedArray.html</anchorfile>
      <anchor>ac9c63ba3ddc186c6e9fb0c3c97d1eb57</anchor>
      <arglist>(const int index) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>ObjectClass *</type>
      <name>getObjectPointerUnchecked</name>
      <anchorfile>classReferenceCountedArray.html</anchorfile>
      <anchor>a8da693cf7dedfda5bb8a8e7331c4bf1f</anchor>
      <arglist>(const int index) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>ObjectClassPtr</type>
      <name>getFirst</name>
      <anchorfile>classReferenceCountedArray.html</anchorfile>
      <anchor>ab352b571e4ee02eedad655bba6434725</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>ObjectClassPtr</type>
      <name>getLast</name>
      <anchorfile>classReferenceCountedArray.html</anchorfile>
      <anchor>a906fbb190a57a893faa951949b93418b</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>ObjectClass **</type>
      <name>getRawDataPointer</name>
      <anchorfile>classReferenceCountedArray.html</anchorfile>
      <anchor>abad2570544706d399a2b0b65d1ea2f6f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>ObjectClass **</type>
      <name>begin</name>
      <anchorfile>classReferenceCountedArray.html</anchorfile>
      <anchor>a32aac83fe214508e442f1de390ff8e54</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>ObjectClass **</type>
      <name>end</name>
      <anchorfile>classReferenceCountedArray.html</anchorfile>
      <anchor>a73c8d0ba66862dfe70e584c2efd41ccf</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>indexOf</name>
      <anchorfile>classReferenceCountedArray.html</anchorfile>
      <anchor>a034cad62a8ebb5854db4db2ff4afbf71</anchor>
      <arglist>(const ObjectClass *const objectToLookFor) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>classReferenceCountedArray.html</anchorfile>
      <anchor>a5660a4dab2e9765784f1c5af73d7c303</anchor>
      <arglist>(const ObjectClass *const objectToLookFor) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>ObjectClass *</type>
      <name>add</name>
      <anchorfile>classReferenceCountedArray.html</anchorfile>
      <anchor>a69c7478303bfab74a3fa16ff93a334a8</anchor>
      <arglist>(ObjectClass *const newObject) noexcept</arglist>
    </member>
    <member kind="function">
      <type>ObjectClass *</type>
      <name>insert</name>
      <anchorfile>classReferenceCountedArray.html</anchorfile>
      <anchor>af565f8dbd67b0e2adb9e85af2256e720</anchor>
      <arglist>(int indexToInsertAt, ObjectClass *const newObject) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addIfNotAlreadyThere</name>
      <anchorfile>classReferenceCountedArray.html</anchorfile>
      <anchor>a2d20205a78c1fa520d04d50a263c9f9b</anchor>
      <arglist>(ObjectClass *const newObject) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classReferenceCountedArray.html</anchorfile>
      <anchor>ab091a80b766a24ba4915a10c1d71cd81</anchor>
      <arglist>(const int indexToChange, ObjectClass *const newObject)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addArray</name>
      <anchorfile>classReferenceCountedArray.html</anchorfile>
      <anchor>a6e3aa5375dce143b69a467ad405c2867</anchor>
      <arglist>(const ReferenceCountedArray&lt; ObjectClass, TypeOfCriticalSectionToUse &gt; &amp;arrayToAddFrom, int startIndex=0, int numElementsToAdd=-1) noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addSorted</name>
      <anchorfile>classReferenceCountedArray.html</anchorfile>
      <anchor>afb1a9958a818b6c410d79fc65b23432e</anchor>
      <arglist>(ElementComparator &amp;comparator, ObjectClass *newObject) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addOrReplaceSorted</name>
      <anchorfile>classReferenceCountedArray.html</anchorfile>
      <anchor>ae4d087d8723db7a39fb876d419d9f960</anchor>
      <arglist>(ElementComparator &amp;comparator, ObjectClass *newObject) noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>indexOfSorted</name>
      <anchorfile>classReferenceCountedArray.html</anchorfile>
      <anchor>aba887431a64561282cdbabafe27e70e8</anchor>
      <arglist>(ElementComparator &amp;comparator, const ObjectClass *const objectToLookFor) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove</name>
      <anchorfile>classReferenceCountedArray.html</anchorfile>
      <anchor>aea193b7f41ffc381f1c12440f997ccdd</anchor>
      <arglist>(const int indexToRemove)</arglist>
    </member>
    <member kind="function">
      <type>ObjectClassPtr</type>
      <name>removeAndReturn</name>
      <anchorfile>classReferenceCountedArray.html</anchorfile>
      <anchor>a8fc0a717f91f4ff3b144f0224afdc5dd</anchor>
      <arglist>(const int indexToRemove)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeObject</name>
      <anchorfile>classReferenceCountedArray.html</anchorfile>
      <anchor>a3413cc68e78418918d69bf7ae132c894</anchor>
      <arglist>(ObjectClass *const objectToRemove)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeRange</name>
      <anchorfile>classReferenceCountedArray.html</anchorfile>
      <anchor>a9430ab8bb81848ef46507d2ed2eb40c2</anchor>
      <arglist>(const int startIndex, const int numberToRemove)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeLast</name>
      <anchorfile>classReferenceCountedArray.html</anchorfile>
      <anchor>a2f2ff002f4ca7a7062b449ade2b61307</anchor>
      <arglist>(int howManyToRemove=1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swap</name>
      <anchorfile>classReferenceCountedArray.html</anchorfile>
      <anchor>a53122fe07050eef2918538d0b4d90804</anchor>
      <arglist>(const int index1, const int index2) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>move</name>
      <anchorfile>classReferenceCountedArray.html</anchorfile>
      <anchor>acd40cae01b2a34720491bf4cd462ad80</anchor>
      <arglist>(const int currentIndex, int newIndex) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swapWith</name>
      <anchorfile>classReferenceCountedArray.html</anchorfile>
      <anchor>a68a378da68f47a73e0cf3a9e3673f64a</anchor>
      <arglist>(OtherArrayType &amp;otherArray) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classReferenceCountedArray.html</anchorfile>
      <anchor>a16715eb28fe22682d87c33b02a6ed882</anchor>
      <arglist>(const ReferenceCountedArray &amp;other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classReferenceCountedArray.html</anchorfile>
      <anchor>a42ad63db85d37f3c649f21bf3b03a950</anchor>
      <arglist>(const ReferenceCountedArray&lt; ObjectClass, TypeOfCriticalSectionToUse &gt; &amp;other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sort</name>
      <anchorfile>classReferenceCountedArray.html</anchorfile>
      <anchor>a51248166d0e546e8f6ba9f831a835a7a</anchor>
      <arglist>(ElementComparator &amp;comparator, const bool retainOrderOfEquivalentItems=false) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>minimiseStorageOverheads</name>
      <anchorfile>classReferenceCountedArray.html</anchorfile>
      <anchor>ad09860891de2b9faaa19e42b8007bca7</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ensureStorageAllocated</name>
      <anchorfile>classReferenceCountedArray.html</anchorfile>
      <anchor>abf520344fa2d864f0f54809429a3bb3f</anchor>
      <arglist>(const int minNumElements)</arglist>
    </member>
    <member kind="function">
      <type>const TypeOfCriticalSectionToUse &amp;</type>
      <name>getLock</name>
      <anchorfile>classReferenceCountedArray.html</anchorfile>
      <anchor>aa1ee427821c41587e15391bf7edc2b60</anchor>
      <arglist>() const noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ReferenceCountedObject</name>
    <filename>classReferenceCountedObject.html</filename>
  </compound>
  <compound kind="class">
    <name>ReferenceCountedObjectPtr</name>
    <filename>classReferenceCountedObjectPtr.html</filename>
    <templarg>ReferenceCountedObjectClass</templarg>
    <member kind="typedef">
      <type>ReferenceCountedObjectClass</type>
      <name>ReferencedType</name>
      <anchorfile>classReferenceCountedObjectPtr.html</anchorfile>
      <anchor>aeb4a0ddf04087aa15cf7b607f00c076a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ReferenceCountedObjectPtr</name>
      <anchorfile>classReferenceCountedObjectPtr.html</anchorfile>
      <anchor>a95c5feac915f1b6731c69a9a44031bba</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ReferenceCountedObjectPtr</name>
      <anchorfile>classReferenceCountedObjectPtr.html</anchorfile>
      <anchor>ad0f71a58ca790b16bbdcba846b44e9dd</anchor>
      <arglist>(ReferencedType *refCountedObject) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ReferenceCountedObjectPtr</name>
      <anchorfile>classReferenceCountedObjectPtr.html</anchorfile>
      <anchor>a3f97bfd331d1c5b291d59b161c385210</anchor>
      <arglist>(decltype(nullptr)) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ReferenceCountedObjectPtr</name>
      <anchorfile>classReferenceCountedObjectPtr.html</anchorfile>
      <anchor>a48de50419a9cff7dafd67ab1571d5eb8</anchor>
      <arglist>(const ReferenceCountedObjectPtr &amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ReferenceCountedObjectPtr</name>
      <anchorfile>classReferenceCountedObjectPtr.html</anchorfile>
      <anchor>a8246744495da90e679c22d592dec96df</anchor>
      <arglist>(const ReferenceCountedObjectPtr&lt; Convertible &gt; &amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>ReferenceCountedObjectPtr &amp;</type>
      <name>operator=</name>
      <anchorfile>classReferenceCountedObjectPtr.html</anchorfile>
      <anchor>aab2ebf3f70f318e4392afdb803f9e3e9</anchor>
      <arglist>(const ReferenceCountedObjectPtr &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>ReferenceCountedObjectPtr &amp;</type>
      <name>operator=</name>
      <anchorfile>classReferenceCountedObjectPtr.html</anchorfile>
      <anchor>ad744900705e306991526a617d5e21690</anchor>
      <arglist>(const ReferenceCountedObjectPtr&lt; Convertible &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>ReferenceCountedObjectPtr &amp;</type>
      <name>operator=</name>
      <anchorfile>classReferenceCountedObjectPtr.html</anchorfile>
      <anchor>a9336efe926b6cbdc0eb8e0d3cbf33c87</anchor>
      <arglist>(ReferencedType *const newObject)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ReferenceCountedObjectPtr</name>
      <anchorfile>classReferenceCountedObjectPtr.html</anchorfile>
      <anchor>ae5a3fabd321bf4984e3b2cd72a7e3f3f</anchor>
      <arglist>(ReferenceCountedObjectPtr &amp;&amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>ReferenceCountedObjectPtr &amp;</type>
      <name>operator=</name>
      <anchorfile>classReferenceCountedObjectPtr.html</anchorfile>
      <anchor>aecfe92f66e1ab8b3df57a9fde835bc54</anchor>
      <arglist>(ReferenceCountedObjectPtr &amp;&amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ReferenceCountedObjectPtr</name>
      <anchorfile>classReferenceCountedObjectPtr.html</anchorfile>
      <anchor>a90c9a9a2cf6e4767e2008b81ef9c8bca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator ReferencedType *</name>
      <anchorfile>classReferenceCountedObjectPtr.html</anchorfile>
      <anchor>a17565bd787961eaee3b0b1d2e3d88c7c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>ReferencedType *</type>
      <name>get</name>
      <anchorfile>classReferenceCountedObjectPtr.html</anchorfile>
      <anchor>ab6e0886886746e1134970ee2323b80dd</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>ReferencedType *</type>
      <name>getObject</name>
      <anchorfile>classReferenceCountedObjectPtr.html</anchorfile>
      <anchor>a5ae7395b4bbdf44024703467f8a3191e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>ReferencedType *</type>
      <name>operator-&gt;</name>
      <anchorfile>classReferenceCountedObjectPtr.html</anchorfile>
      <anchor>ab57cc7cb51b53264016cc7d32159dc4a</anchor>
      <arglist>() const noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RelativeCoordinate</name>
    <filename>classRelativeCoordinate.html</filename>
    <class kind="struct">RelativeCoordinate::StandardStrings</class>
    <class kind="struct">RelativeCoordinate::Strings</class>
    <member kind="function">
      <type></type>
      <name>RelativeCoordinate</name>
      <anchorfile>classRelativeCoordinate.html</anchorfile>
      <anchor>a2a361f6a466bb575140226ee578f2f9a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RelativeCoordinate</name>
      <anchorfile>classRelativeCoordinate.html</anchorfile>
      <anchor>a08660df4611e9bfc1ce5273646fcbbcf</anchor>
      <arglist>(const Expression &amp;expression)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RelativeCoordinate</name>
      <anchorfile>classRelativeCoordinate.html</anchorfile>
      <anchor>ad748f568e7cd3b36998f1081b6d4bdbe</anchor>
      <arglist>(const RelativeCoordinate &amp;)</arglist>
    </member>
    <member kind="function">
      <type>RelativeCoordinate &amp;</type>
      <name>operator=</name>
      <anchorfile>classRelativeCoordinate.html</anchorfile>
      <anchor>a9f75f4abe58f9ca7b6de1b05d2792151</anchor>
      <arglist>(const RelativeCoordinate &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RelativeCoordinate</name>
      <anchorfile>classRelativeCoordinate.html</anchorfile>
      <anchor>afb10ab55db6326261f033bd5518f9f32</anchor>
      <arglist>(RelativeCoordinate &amp;&amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>RelativeCoordinate &amp;</type>
      <name>operator=</name>
      <anchorfile>classRelativeCoordinate.html</anchorfile>
      <anchor>a036f18ede373ca28cbe94fc0ad616175</anchor>
      <arglist>(RelativeCoordinate &amp;&amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RelativeCoordinate</name>
      <anchorfile>classRelativeCoordinate.html</anchorfile>
      <anchor>a2e27136bad494334484b3d7045560bf6</anchor>
      <arglist>(double absoluteDistanceFromOrigin)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RelativeCoordinate</name>
      <anchorfile>classRelativeCoordinate.html</anchorfile>
      <anchor>a0b3bb7a6224234e60bd7aaeb2b4af1e2</anchor>
      <arglist>(const String &amp;stringVersion)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~RelativeCoordinate</name>
      <anchorfile>classRelativeCoordinate.html</anchorfile>
      <anchor>a81ee941aef4ec69d77624df7cd5e5655</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classRelativeCoordinate.html</anchorfile>
      <anchor>aac063b11e964f6a660e811c6fac0e6be</anchor>
      <arglist>(const RelativeCoordinate &amp;) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classRelativeCoordinate.html</anchorfile>
      <anchor>aff6e9778f22cd6bafc4159fd6e21c6ac</anchor>
      <arglist>(const RelativeCoordinate &amp;) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>resolve</name>
      <anchorfile>classRelativeCoordinate.html</anchorfile>
      <anchor>a3f41920dc7782e0eea4d91e83b3b4bed</anchor>
      <arglist>(const Expression::Scope *evaluationScope) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>references</name>
      <anchorfile>classRelativeCoordinate.html</anchorfile>
      <anchor>ab56b37e8c1e548f620e48498bf92d583</anchor>
      <arglist>(const String &amp;coordName, const Expression::Scope *evaluationScope) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isRecursive</name>
      <anchorfile>classRelativeCoordinate.html</anchorfile>
      <anchor>a2d58621a8ad2997cf50dc6c89c2b8a69</anchor>
      <arglist>(const Expression::Scope *evaluationScope) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isDynamic</name>
      <anchorfile>classRelativeCoordinate.html</anchorfile>
      <anchor>adcbadfb50b0b41f27af344ff6db39f50</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>moveToAbsolute</name>
      <anchorfile>classRelativeCoordinate.html</anchorfile>
      <anchor>aeb0b2ff1ac54cb6cd697c9345d579af2</anchor>
      <arglist>(double absoluteTargetPosition, const Expression::Scope *evaluationScope)</arglist>
    </member>
    <member kind="function">
      <type>const Expression &amp;</type>
      <name>getExpression</name>
      <anchorfile>classRelativeCoordinate.html</anchorfile>
      <anchor>a513cfe760d6bd60b9f97586e9e4ec7fa</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>toString</name>
      <anchorfile>classRelativeCoordinate.html</anchorfile>
      <anchor>a18a25424f6c5aa1c5cb9777e3bc88ba5</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>RelativeCoordinate::StandardStrings</name>
    <filename>structRelativeCoordinate_1_1StandardStrings.html</filename>
    <member kind="enumeration">
      <type></type>
      <name>Type</name>
      <anchorfile>structRelativeCoordinate_1_1StandardStrings.html</anchorfile>
      <anchor>a996870bf66337348b8da0f06c647a65b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>left</name>
      <anchorfile>structRelativeCoordinate_1_1StandardStrings.html</anchorfile>
      <anchor>a996870bf66337348b8da0f06c647a65babf8a8b5180838dd792d600e75b69265f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>right</name>
      <anchorfile>structRelativeCoordinate_1_1StandardStrings.html</anchorfile>
      <anchor>a996870bf66337348b8da0f06c647a65badaac1346cf275256a828314869f1bec1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>top</name>
      <anchorfile>structRelativeCoordinate_1_1StandardStrings.html</anchorfile>
      <anchor>a996870bf66337348b8da0f06c647a65ba58b5065868914aaa4f9fac93306793ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>bottom</name>
      <anchorfile>structRelativeCoordinate_1_1StandardStrings.html</anchorfile>
      <anchor>a996870bf66337348b8da0f06c647a65bafc1bb72a21d2a99a30df488a9ac34763</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>x</name>
      <anchorfile>structRelativeCoordinate_1_1StandardStrings.html</anchorfile>
      <anchor>a996870bf66337348b8da0f06c647a65baa6aefb11eeb4d008103545f7a991f42a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>y</name>
      <anchorfile>structRelativeCoordinate_1_1StandardStrings.html</anchorfile>
      <anchor>a996870bf66337348b8da0f06c647a65bafdca86daac70d04b33cae212284fc83b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>width</name>
      <anchorfile>structRelativeCoordinate_1_1StandardStrings.html</anchorfile>
      <anchor>a996870bf66337348b8da0f06c647a65bad5d1db5e302ec4b7038f0fd6b4f73f75</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>height</name>
      <anchorfile>structRelativeCoordinate_1_1StandardStrings.html</anchorfile>
      <anchor>a996870bf66337348b8da0f06c647a65baeb31efdb32a2c853ec60f5ad453afbdd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>parent</name>
      <anchorfile>structRelativeCoordinate_1_1StandardStrings.html</anchorfile>
      <anchor>a996870bf66337348b8da0f06c647a65ba92a52dc9adf30b102a7b4a20f2876fed</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>unknown</name>
      <anchorfile>structRelativeCoordinate_1_1StandardStrings.html</anchorfile>
      <anchor>a996870bf66337348b8da0f06c647a65ba2d62eaf1459a818a13429d7acfdfbde2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Type</type>
      <name>getTypeOf</name>
      <anchorfile>structRelativeCoordinate_1_1StandardStrings.html</anchorfile>
      <anchor>a9ccc4b22b96aef47d29cac1fba6b25ab</anchor>
      <arglist>(const String &amp;s) noexcept</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>RelativeCoordinate::Strings</name>
    <filename>structRelativeCoordinate_1_1Strings.html</filename>
    <member kind="variable" static="yes">
      <type>static const String</type>
      <name>parent</name>
      <anchorfile>structRelativeCoordinate_1_1Strings.html</anchorfile>
      <anchor>a590be4a90e9e7b7ffd12b4ff5f7c667d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const String</type>
      <name>left</name>
      <anchorfile>structRelativeCoordinate_1_1Strings.html</anchorfile>
      <anchor>ad3b2d7198a43883ea4c4b64f44e0faf5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const String</type>
      <name>right</name>
      <anchorfile>structRelativeCoordinate_1_1Strings.html</anchorfile>
      <anchor>a39fa56a500b153b8bf66a8eaa56d72cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const String</type>
      <name>top</name>
      <anchorfile>structRelativeCoordinate_1_1Strings.html</anchorfile>
      <anchor>a1765fc4476e6ebd41d49746c5e3a9546</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const String</type>
      <name>bottom</name>
      <anchorfile>structRelativeCoordinate_1_1Strings.html</anchorfile>
      <anchor>a1926a95dd993f12e970056199edb70fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const String</type>
      <name>x</name>
      <anchorfile>structRelativeCoordinate_1_1Strings.html</anchorfile>
      <anchor>a5607965ea686d15ac7e85933b7fc3203</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const String</type>
      <name>y</name>
      <anchorfile>structRelativeCoordinate_1_1Strings.html</anchorfile>
      <anchor>ae589870f75311e381cfe5e55dd030e2d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const String</type>
      <name>width</name>
      <anchorfile>structRelativeCoordinate_1_1Strings.html</anchorfile>
      <anchor>a287d3fb774b46a3bb1e74ffc4b3cb95d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const String</type>
      <name>height</name>
      <anchorfile>structRelativeCoordinate_1_1Strings.html</anchorfile>
      <anchor>a35375bd34335440a8b494eeb1fddf99d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RelativeCoordinatePositionerBase</name>
    <filename>classRelativeCoordinatePositionerBase.html</filename>
    <base>Component::Positioner</base>
    <base>ComponentListener</base>
    <base>MarkerList::Listener</base>
    <class kind="class">RelativeCoordinatePositionerBase::ComponentScope</class>
    <member kind="function">
      <type></type>
      <name>RelativeCoordinatePositionerBase</name>
      <anchorfile>classRelativeCoordinatePositionerBase.html</anchorfile>
      <anchor>a230959223a8375a554c244c654e039b5</anchor>
      <arglist>(Component &amp;component)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~RelativeCoordinatePositionerBase</name>
      <anchorfile>classRelativeCoordinatePositionerBase.html</anchorfile>
      <anchor>a5989a641850bc2c29ef82dd6d84cb30e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>componentMovedOrResized</name>
      <anchorfile>classRelativeCoordinatePositionerBase.html</anchorfile>
      <anchor>afaeca4b21ee70305901bf16eedbbf2bc</anchor>
      <arglist>(Component &amp;, bool, bool)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>componentParentHierarchyChanged</name>
      <anchorfile>classRelativeCoordinatePositionerBase.html</anchorfile>
      <anchor>ae379c184e5fb5e17c327c27c7e2ae29e</anchor>
      <arglist>(Component &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>componentChildrenChanged</name>
      <anchorfile>classRelativeCoordinatePositionerBase.html</anchorfile>
      <anchor>a3bf3c3ca16e95b405121e1f6a5ee7e2b</anchor>
      <arglist>(Component &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>componentBeingDeleted</name>
      <anchorfile>classRelativeCoordinatePositionerBase.html</anchorfile>
      <anchor>aec6f18ba52c2a515b3219e3ecbb26dd0</anchor>
      <arglist>(Component &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>markersChanged</name>
      <anchorfile>classRelativeCoordinatePositionerBase.html</anchorfile>
      <anchor>a538512e8c28ca2ee8f722e2946579818</anchor>
      <arglist>(MarkerList *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>markerListBeingDeleted</name>
      <anchorfile>classRelativeCoordinatePositionerBase.html</anchorfile>
      <anchor>ad5fc1026853001dfdcbb5e7b0de4df33</anchor>
      <arglist>(MarkerList *markerList)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply</name>
      <anchorfile>classRelativeCoordinatePositionerBase.html</anchorfile>
      <anchor>ade8880abbddebcb48ee7e113902ee40a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addCoordinate</name>
      <anchorfile>classRelativeCoordinatePositionerBase.html</anchorfile>
      <anchor>aa296c39de3913289e780cf7338a84520</anchor>
      <arglist>(const RelativeCoordinate &amp;coord)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addPoint</name>
      <anchorfile>classRelativeCoordinatePositionerBase.html</anchorfile>
      <anchor>a45607fa0e9eee050d44bde9cbb0963f6</anchor>
      <arglist>(const RelativePoint &amp;point)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual bool</type>
      <name>registerCoordinates</name>
      <anchorfile>classRelativeCoordinatePositionerBase.html</anchorfile>
      <anchor>af9ad5effca1449100076cf005f011d70</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>applyToComponentBounds</name>
      <anchorfile>classRelativeCoordinatePositionerBase.html</anchorfile>
      <anchor>af9b4fb41d22a46f023ea69c0eefcd701</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RelativeCoordinatePositionerBase::ComponentScope</name>
    <filename>classRelativeCoordinatePositionerBase_1_1ComponentScope.html</filename>
    <base>Expression::Scope</base>
    <member kind="function">
      <type></type>
      <name>ComponentScope</name>
      <anchorfile>classRelativeCoordinatePositionerBase_1_1ComponentScope.html</anchorfile>
      <anchor>a412aff63dd65bd8d8bd540835216bcb3</anchor>
      <arglist>(Component &amp;component)</arglist>
    </member>
    <member kind="function">
      <type>Expression</type>
      <name>getSymbolValue</name>
      <anchorfile>classRelativeCoordinatePositionerBase_1_1ComponentScope.html</anchorfile>
      <anchor>a26ee9a352f4728bcc3e7aa4d0e39721d</anchor>
      <arglist>(const String &amp;symbol) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visitRelativeScope</name>
      <anchorfile>classRelativeCoordinatePositionerBase_1_1ComponentScope.html</anchorfile>
      <anchor>a88bd1695823c980a0d82c1233d7ecc0b</anchor>
      <arglist>(const String &amp;scopeName, Visitor &amp;visitor) const </arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>getScopeUID</name>
      <anchorfile>classRelativeCoordinatePositionerBase_1_1ComponentScope.html</anchorfile>
      <anchor>a769d585629f4338302c40586a34a14fc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Component *</type>
      <name>findSiblingComponent</name>
      <anchorfile>classRelativeCoordinatePositionerBase_1_1ComponentScope.html</anchorfile>
      <anchor>aa7c3d9765984a3b96fe7075f0c8d865e</anchor>
      <arglist>(const String &amp;componentID) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Component &amp;</type>
      <name>component</name>
      <anchorfile>classRelativeCoordinatePositionerBase_1_1ComponentScope.html</anchorfile>
      <anchor>a26a2cebf33c19aebbfccddaba42e81cc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RelativeParallelogram</name>
    <filename>classRelativeParallelogram.html</filename>
    <member kind="function">
      <type></type>
      <name>RelativeParallelogram</name>
      <anchorfile>classRelativeParallelogram.html</anchorfile>
      <anchor>a6a9ba0649f32f049c5ed92466e41a32f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RelativeParallelogram</name>
      <anchorfile>classRelativeParallelogram.html</anchorfile>
      <anchor>aea7e8142ce0c6ed5017c9812e5c91b03</anchor>
      <arglist>(const Rectangle&lt; float &gt; &amp;simpleRectangle)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RelativeParallelogram</name>
      <anchorfile>classRelativeParallelogram.html</anchorfile>
      <anchor>a9171f9ec16232f1f828041a9f323a192</anchor>
      <arglist>(const RelativePoint &amp;topLeft, const RelativePoint &amp;topRight, const RelativePoint &amp;bottomLeft)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RelativeParallelogram</name>
      <anchorfile>classRelativeParallelogram.html</anchorfile>
      <anchor>a79996061d4415f96854ccde2b675e4f0</anchor>
      <arglist>(const String &amp;topLeft, const String &amp;topRight, const String &amp;bottomLeft)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~RelativeParallelogram</name>
      <anchorfile>classRelativeParallelogram.html</anchorfile>
      <anchor>a1d1b03b4f0694477b14af81d10af604e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resolveThreePoints</name>
      <anchorfile>classRelativeParallelogram.html</anchorfile>
      <anchor>a940e39998c909b64b0c8b3c518964414</anchor>
      <arglist>(Point&lt; float &gt; *points, Expression::Scope *scope) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resolveFourCorners</name>
      <anchorfile>classRelativeParallelogram.html</anchorfile>
      <anchor>a507aad3af1a02ac27a5d228dafc3386b</anchor>
      <arglist>(Point&lt; float &gt; *points, Expression::Scope *scope) const </arglist>
    </member>
    <member kind="function">
      <type>const Rectangle&lt; float &gt;</type>
      <name>getBounds</name>
      <anchorfile>classRelativeParallelogram.html</anchorfile>
      <anchor>acddcdc05e9ec73c51f90481baa3eb663</anchor>
      <arglist>(Expression::Scope *scope) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getPath</name>
      <anchorfile>classRelativeParallelogram.html</anchorfile>
      <anchor>af2c5bbae33d6c1029014553ca671d26b</anchor>
      <arglist>(Path &amp;path, Expression::Scope *scope) const </arglist>
    </member>
    <member kind="function">
      <type>AffineTransform</type>
      <name>resetToPerpendicular</name>
      <anchorfile>classRelativeParallelogram.html</anchorfile>
      <anchor>a60c724ee40ffce52e0a1d575722fce9a</anchor>
      <arglist>(Expression::Scope *scope)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isDynamic</name>
      <anchorfile>classRelativeParallelogram.html</anchorfile>
      <anchor>ae5cf41bc893ffc476d1e30f9c8c31046</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classRelativeParallelogram.html</anchorfile>
      <anchor>a8277104807132bfa719de4c246252d59</anchor>
      <arglist>(const RelativeParallelogram &amp;) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classRelativeParallelogram.html</anchorfile>
      <anchor>afc3e2a9b23fc96ac3b4b00cec078cda3</anchor>
      <arglist>(const RelativeParallelogram &amp;) const noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Point&lt; float &gt;</type>
      <name>getInternalCoordForPoint</name>
      <anchorfile>classRelativeParallelogram.html</anchorfile>
      <anchor>a63ad2d06c702c1bf91de98248710c2ae</anchor>
      <arglist>(const Point&lt; float &gt; *parallelogramCorners, Point&lt; float &gt; point) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Point&lt; float &gt;</type>
      <name>getPointForInternalCoord</name>
      <anchorfile>classRelativeParallelogram.html</anchorfile>
      <anchor>abb80c5986efe7db119ca4966c62e9da3</anchor>
      <arglist>(const Point&lt; float &gt; *parallelogramCorners, Point&lt; float &gt; internalPoint) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Rectangle&lt; float &gt;</type>
      <name>getBoundingBox</name>
      <anchorfile>classRelativeParallelogram.html</anchorfile>
      <anchor>aef602f83ecd6ce8fa16a5e062c4a9b8b</anchor>
      <arglist>(const Point&lt; float &gt; *parallelogramCorners) noexcept</arglist>
    </member>
    <member kind="variable">
      <type>RelativePoint</type>
      <name>topLeft</name>
      <anchorfile>classRelativeParallelogram.html</anchorfile>
      <anchor>a898c46d7fdcd9fd510de0e5ddfed7597</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RelativePoint</type>
      <name>topRight</name>
      <anchorfile>classRelativeParallelogram.html</anchorfile>
      <anchor>abd27c46b0528c96f90a4254b21e5b680</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RelativePoint</type>
      <name>bottomLeft</name>
      <anchorfile>classRelativeParallelogram.html</anchorfile>
      <anchor>a511fddacbb033a3c4afb228aa664e603</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RelativePoint</name>
    <filename>classRelativePoint.html</filename>
    <member kind="function">
      <type></type>
      <name>RelativePoint</name>
      <anchorfile>classRelativePoint.html</anchorfile>
      <anchor>a557626fd3b549c85f02a76233843fdba</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RelativePoint</name>
      <anchorfile>classRelativePoint.html</anchorfile>
      <anchor>a608d249dc54b3a8f3ab2ba4ea488cd15</anchor>
      <arglist>(Point&lt; float &gt; absolutePoint)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RelativePoint</name>
      <anchorfile>classRelativePoint.html</anchorfile>
      <anchor>ac645e54182d0bdb1dbdcfd10e19e6ca1</anchor>
      <arglist>(float absoluteX, float absoluteY)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RelativePoint</name>
      <anchorfile>classRelativePoint.html</anchorfile>
      <anchor>add6f17ccd018d6adcdc284ed55cafb73</anchor>
      <arglist>(const RelativeCoordinate &amp;x, const RelativeCoordinate &amp;y)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RelativePoint</name>
      <anchorfile>classRelativePoint.html</anchorfile>
      <anchor>aba0ecd812bdd044ca880193ce56d00ab</anchor>
      <arglist>(const String &amp;stringVersion)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classRelativePoint.html</anchorfile>
      <anchor>aa5a51259c25198bb0a202221df9710f7</anchor>
      <arglist>(const RelativePoint &amp;) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classRelativePoint.html</anchorfile>
      <anchor>a3b3a351b552779d95322ad5adba1914a</anchor>
      <arglist>(const RelativePoint &amp;) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Point&lt; float &gt;</type>
      <name>resolve</name>
      <anchorfile>classRelativePoint.html</anchorfile>
      <anchor>a6b19278099037025cff45301abf0d52c</anchor>
      <arglist>(const Expression::Scope *evaluationContext) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>moveToAbsolute</name>
      <anchorfile>classRelativePoint.html</anchorfile>
      <anchor>a0ab188ef456819589846e966ce6fdf90</anchor>
      <arglist>(Point&lt; float &gt; newPos, const Expression::Scope *evaluationContext)</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>toString</name>
      <anchorfile>classRelativePoint.html</anchorfile>
      <anchor>a504ceafaf87ecffe3fc3d5e778277eda</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isDynamic</name>
      <anchorfile>classRelativePoint.html</anchorfile>
      <anchor>a73e22eaec4e0925ed75f86207921faa4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable">
      <type>RelativeCoordinate</type>
      <name>x</name>
      <anchorfile>classRelativePoint.html</anchorfile>
      <anchor>acaa3243ea9f7839e929e968e37348259</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RelativeCoordinate</type>
      <name>y</name>
      <anchorfile>classRelativePoint.html</anchorfile>
      <anchor>a6bddbbadab5ddc673318dff154c75dce</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RelativePointPath</name>
    <filename>classRelativePointPath.html</filename>
    <class kind="class">RelativePointPath::CloseSubPath</class>
    <class kind="class">RelativePointPath::CubicTo</class>
    <class kind="class">RelativePointPath::ElementBase</class>
    <class kind="class">RelativePointPath::LineTo</class>
    <class kind="class">RelativePointPath::QuadraticTo</class>
    <class kind="class">RelativePointPath::StartSubPath</class>
    <member kind="enumeration">
      <type></type>
      <name>ElementType</name>
      <anchorfile>classRelativePointPath.html</anchorfile>
      <anchor>a741fbc9bca4a156a84514f20987483e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>nullElement</name>
      <anchorfile>classRelativePointPath.html</anchorfile>
      <anchor>a741fbc9bca4a156a84514f20987483e9ae971a25058687b29600ebb7c9a038437</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>startSubPathElement</name>
      <anchorfile>classRelativePointPath.html</anchorfile>
      <anchor>a741fbc9bca4a156a84514f20987483e9aacd2c47de9bdc570838c943b21b058e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>closeSubPathElement</name>
      <anchorfile>classRelativePointPath.html</anchorfile>
      <anchor>a741fbc9bca4a156a84514f20987483e9a60ad7fe5cfbf04c489c878ce5e6cbeb5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>lineToElement</name>
      <anchorfile>classRelativePointPath.html</anchorfile>
      <anchor>a741fbc9bca4a156a84514f20987483e9a8cb9d49f56ecf8367671130fc2a838d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>quadraticToElement</name>
      <anchorfile>classRelativePointPath.html</anchorfile>
      <anchor>a741fbc9bca4a156a84514f20987483e9a8494c007547e881252ae413d840908ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>cubicToElement</name>
      <anchorfile>classRelativePointPath.html</anchorfile>
      <anchor>a741fbc9bca4a156a84514f20987483e9a52369502d5292f097e27a5f499e95a67</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RelativePointPath</name>
      <anchorfile>classRelativePointPath.html</anchorfile>
      <anchor>a035e5124f11c1a818f5edd66fcb5bfb1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RelativePointPath</name>
      <anchorfile>classRelativePointPath.html</anchorfile>
      <anchor>af55e1410e31a690a9f02d89709699574</anchor>
      <arglist>(const RelativePointPath &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RelativePointPath</name>
      <anchorfile>classRelativePointPath.html</anchorfile>
      <anchor>a07a33cecd622632c96ac502391d05594</anchor>
      <arglist>(const Path &amp;path)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~RelativePointPath</name>
      <anchorfile>classRelativePointPath.html</anchorfile>
      <anchor>a593d1c22c68523a4bec1d459d8fceeaf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classRelativePointPath.html</anchorfile>
      <anchor>af9effa2b89c84d58397d2b4f838b6397</anchor>
      <arglist>(const RelativePointPath &amp;) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classRelativePointPath.html</anchorfile>
      <anchor>a1b7124d16b6670f63bd425249cebe333</anchor>
      <arglist>(const RelativePointPath &amp;) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>createPath</name>
      <anchorfile>classRelativePointPath.html</anchorfile>
      <anchor>abe5bf0aea78fcad35a1f5f13b79bd2f7</anchor>
      <arglist>(Path &amp;path, Expression::Scope *scope) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>containsAnyDynamicPoints</name>
      <anchorfile>classRelativePointPath.html</anchorfile>
      <anchor>a800b69f396f54677a29b9978a30dc20f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swapWith</name>
      <anchorfile>classRelativePointPath.html</anchorfile>
      <anchor>af6a594a5a17f7e27d6058e5015a6ed8b</anchor>
      <arglist>(RelativePointPath &amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addElement</name>
      <anchorfile>classRelativePointPath.html</anchorfile>
      <anchor>a8c6fd911def77df783dfd16b8c086049</anchor>
      <arglist>(ElementBase *newElement)</arglist>
    </member>
    <member kind="variable">
      <type>OwnedArray&lt; ElementBase &gt;</type>
      <name>elements</name>
      <anchorfile>classRelativePointPath.html</anchorfile>
      <anchor>a975cc963b8500afa8d33dac6d7c7ac50</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>usesNonZeroWinding</name>
      <anchorfile>classRelativePointPath.html</anchorfile>
      <anchor>a31bd56da083920346e1f0742bd77ae8b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RelativePointPath::CloseSubPath</name>
    <filename>classRelativePointPath_1_1CloseSubPath.html</filename>
    <base>RelativePointPath::ElementBase</base>
    <member kind="function">
      <type></type>
      <name>CloseSubPath</name>
      <anchorfile>classRelativePointPath_1_1CloseSubPath.html</anchorfile>
      <anchor>a06cc20d4d28f01c18c94306f62f607d0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ValueTree</type>
      <name>createTree</name>
      <anchorfile>classRelativePointPath_1_1CloseSubPath.html</anchorfile>
      <anchor>a6d2cb1fbc7470a27337f1393d08fdfe7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addToPath</name>
      <anchorfile>classRelativePointPath_1_1CloseSubPath.html</anchorfile>
      <anchor>aae5756f27754e08c11e47c3b639da0da</anchor>
      <arglist>(Path &amp;path, Expression::Scope *) const </arglist>
    </member>
    <member kind="function">
      <type>RelativePoint *</type>
      <name>getControlPoints</name>
      <anchorfile>classRelativePointPath_1_1CloseSubPath.html</anchorfile>
      <anchor>ac88c7c733230c967ebd0098bf9315963</anchor>
      <arglist>(int &amp;numPoints)</arglist>
    </member>
    <member kind="function">
      <type>ElementBase *</type>
      <name>clone</name>
      <anchorfile>classRelativePointPath_1_1CloseSubPath.html</anchorfile>
      <anchor>a706ce465a403bcdb9792d79bd31b07f6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ElementBase</name>
      <anchorfile>classRelativePointPath_1_1ElementBase.html</anchorfile>
      <anchor>a984c9e13c832207c94420fcffc2d4de6</anchor>
      <arglist>(ElementType type)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ElementBase</name>
      <anchorfile>classRelativePointPath_1_1ElementBase.html</anchorfile>
      <anchor>ab9a7b6619bc610376575f47d6be35299</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isDynamic</name>
      <anchorfile>classRelativePointPath_1_1ElementBase.html</anchorfile>
      <anchor>affd90037e32b259b0bb6ce20fa34528c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>const ElementType</type>
      <name>type</name>
      <anchorfile>classRelativePointPath_1_1ElementBase.html</anchorfile>
      <anchor>abe70425cff02542da9a97ac678de34d8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RelativePointPath::CubicTo</name>
    <filename>classRelativePointPath_1_1CubicTo.html</filename>
    <base>RelativePointPath::ElementBase</base>
    <member kind="function">
      <type></type>
      <name>CubicTo</name>
      <anchorfile>classRelativePointPath_1_1CubicTo.html</anchorfile>
      <anchor>a0d326bd6f40d3ffdd697b2a44009b16c</anchor>
      <arglist>(const RelativePoint &amp;controlPoint1, const RelativePoint &amp;controlPoint2, const RelativePoint &amp;endPoint)</arglist>
    </member>
    <member kind="function">
      <type>ValueTree</type>
      <name>createTree</name>
      <anchorfile>classRelativePointPath_1_1CubicTo.html</anchorfile>
      <anchor>a78ea75d8dc395ad64879cff87157b3de</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addToPath</name>
      <anchorfile>classRelativePointPath_1_1CubicTo.html</anchorfile>
      <anchor>ac141025e05292f78573e431ee643eef7</anchor>
      <arglist>(Path &amp;path, Expression::Scope *) const </arglist>
    </member>
    <member kind="function">
      <type>RelativePoint *</type>
      <name>getControlPoints</name>
      <anchorfile>classRelativePointPath_1_1CubicTo.html</anchorfile>
      <anchor>a013e51ed2dffae56ca3fe03879ab7d20</anchor>
      <arglist>(int &amp;numPoints)</arglist>
    </member>
    <member kind="function">
      <type>ElementBase *</type>
      <name>clone</name>
      <anchorfile>classRelativePointPath_1_1CubicTo.html</anchorfile>
      <anchor>a66a85325152e0d92a418e2cf55beb421</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable">
      <type>RelativePoint</type>
      <name>controlPoints</name>
      <anchorfile>classRelativePointPath_1_1CubicTo.html</anchorfile>
      <anchor>a6651df5d1d55b5b8cf5bfff380fe40ec</anchor>
      <arglist>[3]</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RelativePointPath::ElementBase</name>
    <filename>classRelativePointPath_1_1ElementBase.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual ValueTree</type>
      <name>createTree</name>
      <anchorfile>classRelativePointPath_1_1ElementBase.html</anchorfile>
      <anchor>ae23cb0b272a4911c3d152a6d7096e4b4</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>addToPath</name>
      <anchorfile>classRelativePointPath_1_1ElementBase.html</anchorfile>
      <anchor>a4bc365f11c098cd24f70df0c99904595</anchor>
      <arglist>(Path &amp;path, Expression::Scope *) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual RelativePoint *</type>
      <name>getControlPoints</name>
      <anchorfile>classRelativePointPath_1_1ElementBase.html</anchorfile>
      <anchor>a588e8a6195b6d785547e0a22cbca7337</anchor>
      <arglist>(int &amp;numPoints)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ElementBase *</type>
      <name>clone</name>
      <anchorfile>classRelativePointPath_1_1ElementBase.html</anchorfile>
      <anchor>af947314fc34b10d3f60319a6b91aa69d</anchor>
      <arglist>() const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RelativePointPath::LineTo</name>
    <filename>classRelativePointPath_1_1LineTo.html</filename>
    <base>RelativePointPath::ElementBase</base>
    <member kind="function">
      <type></type>
      <name>LineTo</name>
      <anchorfile>classRelativePointPath_1_1LineTo.html</anchorfile>
      <anchor>a6bcf220db2a245413ad50a68af3f3f71</anchor>
      <arglist>(const RelativePoint &amp;endPoint)</arglist>
    </member>
    <member kind="function">
      <type>ValueTree</type>
      <name>createTree</name>
      <anchorfile>classRelativePointPath_1_1LineTo.html</anchorfile>
      <anchor>a83912ee1a8baf2e524d3ae51db329fa8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addToPath</name>
      <anchorfile>classRelativePointPath_1_1LineTo.html</anchorfile>
      <anchor>a920ad925d655cfecd7d6c1e1d950d49f</anchor>
      <arglist>(Path &amp;path, Expression::Scope *) const </arglist>
    </member>
    <member kind="function">
      <type>RelativePoint *</type>
      <name>getControlPoints</name>
      <anchorfile>classRelativePointPath_1_1LineTo.html</anchorfile>
      <anchor>a049e93ca769f5fa087d128adba20491b</anchor>
      <arglist>(int &amp;numPoints)</arglist>
    </member>
    <member kind="function">
      <type>ElementBase *</type>
      <name>clone</name>
      <anchorfile>classRelativePointPath_1_1LineTo.html</anchorfile>
      <anchor>a217410eb1c7ea7c837733b81c6613c10</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable">
      <type>RelativePoint</type>
      <name>endPoint</name>
      <anchorfile>classRelativePointPath_1_1LineTo.html</anchorfile>
      <anchor>a947b4b9d2bf6208e8955eca0e6c5c66c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RelativePointPath::QuadraticTo</name>
    <filename>classRelativePointPath_1_1QuadraticTo.html</filename>
    <base>RelativePointPath::ElementBase</base>
    <member kind="function">
      <type></type>
      <name>QuadraticTo</name>
      <anchorfile>classRelativePointPath_1_1QuadraticTo.html</anchorfile>
      <anchor>aba89135707082499521af4acc13d8182</anchor>
      <arglist>(const RelativePoint &amp;controlPoint, const RelativePoint &amp;endPoint)</arglist>
    </member>
    <member kind="function">
      <type>ValueTree</type>
      <name>createTree</name>
      <anchorfile>classRelativePointPath_1_1QuadraticTo.html</anchorfile>
      <anchor>a848c42fa02f7626fb8b2575ec35c9706</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addToPath</name>
      <anchorfile>classRelativePointPath_1_1QuadraticTo.html</anchorfile>
      <anchor>a20d3ab7a016769296dff17f48cded66b</anchor>
      <arglist>(Path &amp;path, Expression::Scope *) const </arglist>
    </member>
    <member kind="function">
      <type>RelativePoint *</type>
      <name>getControlPoints</name>
      <anchorfile>classRelativePointPath_1_1QuadraticTo.html</anchorfile>
      <anchor>a2c225ca77163792d51e0c3ea5bc3d6e0</anchor>
      <arglist>(int &amp;numPoints)</arglist>
    </member>
    <member kind="function">
      <type>ElementBase *</type>
      <name>clone</name>
      <anchorfile>classRelativePointPath_1_1QuadraticTo.html</anchorfile>
      <anchor>a1fcd333ca097fe9841490fc0b8ad0039</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable">
      <type>RelativePoint</type>
      <name>controlPoints</name>
      <anchorfile>classRelativePointPath_1_1QuadraticTo.html</anchorfile>
      <anchor>af52f78c292c1e148972929b2493c33fe</anchor>
      <arglist>[2]</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RelativePointPath::StartSubPath</name>
    <filename>classRelativePointPath_1_1StartSubPath.html</filename>
    <base>RelativePointPath::ElementBase</base>
    <member kind="function">
      <type></type>
      <name>StartSubPath</name>
      <anchorfile>classRelativePointPath_1_1StartSubPath.html</anchorfile>
      <anchor>a3f78eb4652eacc75a751a047e1a37eda</anchor>
      <arglist>(const RelativePoint &amp;pos)</arglist>
    </member>
    <member kind="function">
      <type>ValueTree</type>
      <name>createTree</name>
      <anchorfile>classRelativePointPath_1_1StartSubPath.html</anchorfile>
      <anchor>a4605c1e2f6926c154e3ac6d916067261</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addToPath</name>
      <anchorfile>classRelativePointPath_1_1StartSubPath.html</anchorfile>
      <anchor>a0a4b20a3106c12e85deb382ee2d6243a</anchor>
      <arglist>(Path &amp;path, Expression::Scope *) const </arglist>
    </member>
    <member kind="function">
      <type>RelativePoint *</type>
      <name>getControlPoints</name>
      <anchorfile>classRelativePointPath_1_1StartSubPath.html</anchorfile>
      <anchor>a40d72b20cdeea1dd4e4666601ac107ac</anchor>
      <arglist>(int &amp;numPoints)</arglist>
    </member>
    <member kind="function">
      <type>ElementBase *</type>
      <name>clone</name>
      <anchorfile>classRelativePointPath_1_1StartSubPath.html</anchorfile>
      <anchor>a99a7a1a272a2df24532b7910d9ea2f6d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable">
      <type>RelativePoint</type>
      <name>startPos</name>
      <anchorfile>classRelativePointPath_1_1StartSubPath.html</anchorfile>
      <anchor>afcaa4975b6ef2fcc78e99b873a38d2d2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RelativeRectangle</name>
    <filename>classRelativeRectangle.html</filename>
    <member kind="function">
      <type></type>
      <name>RelativeRectangle</name>
      <anchorfile>classRelativeRectangle.html</anchorfile>
      <anchor>a6a2fa4fcfd1bc26742b261d93b572566</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RelativeRectangle</name>
      <anchorfile>classRelativeRectangle.html</anchorfile>
      <anchor>af3c65d26dabe9863042ae112233b880f</anchor>
      <arglist>(const Rectangle&lt; float &gt; &amp;rect)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RelativeRectangle</name>
      <anchorfile>classRelativeRectangle.html</anchorfile>
      <anchor>acaef9895af247a408b0d62218d04af74</anchor>
      <arglist>(const RelativeCoordinate &amp;left, const RelativeCoordinate &amp;right, const RelativeCoordinate &amp;top, const RelativeCoordinate &amp;bottom)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RelativeRectangle</name>
      <anchorfile>classRelativeRectangle.html</anchorfile>
      <anchor>adbf13b28c72bd79bbe198f07b18574b0</anchor>
      <arglist>(const String &amp;stringVersion)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classRelativeRectangle.html</anchorfile>
      <anchor>a5d350bfc8b46f6cf9456c4e428343bfb</anchor>
      <arglist>(const RelativeRectangle &amp;) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classRelativeRectangle.html</anchorfile>
      <anchor>a84775a2c3ca2372e47845c1f7918b299</anchor>
      <arglist>(const RelativeRectangle &amp;) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const Rectangle&lt; float &gt;</type>
      <name>resolve</name>
      <anchorfile>classRelativeRectangle.html</anchorfile>
      <anchor>a697db976cfd6376b2e4eb4a650182be8</anchor>
      <arglist>(const Expression::Scope *scope) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>moveToAbsolute</name>
      <anchorfile>classRelativeRectangle.html</anchorfile>
      <anchor>af76a1248976d6b6e04d24ae3d93e3654</anchor>
      <arglist>(const Rectangle&lt; float &gt; &amp;newPos, const Expression::Scope *scope)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isDynamic</name>
      <anchorfile>classRelativeRectangle.html</anchorfile>
      <anchor>a13428846edd533fe4b8ad9a3cce912a3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>toString</name>
      <anchorfile>classRelativeRectangle.html</anchorfile>
      <anchor>a0b67771b721f909d04226458a76e4ce8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>renameSymbol</name>
      <anchorfile>classRelativeRectangle.html</anchorfile>
      <anchor>a8070db7b52deb2c44045a4d8dd4a7ac9</anchor>
      <arglist>(const Expression::Symbol &amp;oldSymbol, const String &amp;newName, const Expression::Scope &amp;scope)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyToComponent</name>
      <anchorfile>classRelativeRectangle.html</anchorfile>
      <anchor>a0d9275a20a583b7ead83b154101d8cc6</anchor>
      <arglist>(Component &amp;component) const </arglist>
    </member>
    <member kind="variable">
      <type>RelativeCoordinate</type>
      <name>left</name>
      <anchorfile>classRelativeRectangle.html</anchorfile>
      <anchor>a4418206ad8d8830d55d37a3bdefbe085</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RelativeCoordinate</type>
      <name>right</name>
      <anchorfile>classRelativeRectangle.html</anchorfile>
      <anchor>aa5d7a81e56ebaa8101aa23d43e652dd2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RelativeCoordinate</type>
      <name>top</name>
      <anchorfile>classRelativeRectangle.html</anchorfile>
      <anchor>accb0421b6997f1cadd8b8c7d76b4bd49</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RelativeCoordinate</type>
      <name>bottom</name>
      <anchorfile>classRelativeRectangle.html</anchorfile>
      <anchor>a9575cf18e56f073da861de4b55ae9d57</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RelativeTime</name>
    <filename>classRelativeTime.html</filename>
    <member kind="function">
      <type></type>
      <name>RelativeTime</name>
      <anchorfile>classRelativeTime.html</anchorfile>
      <anchor>a36a36103979d947a1164298f77172d04</anchor>
      <arglist>(double seconds=0.0) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RelativeTime</name>
      <anchorfile>classRelativeTime.html</anchorfile>
      <anchor>a6c5407d639ff5386c824689724418c2d</anchor>
      <arglist>(const RelativeTime &amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>RelativeTime &amp;</type>
      <name>operator=</name>
      <anchorfile>classRelativeTime.html</anchorfile>
      <anchor>ae78c8045b5c6b6acd53b4fb39b77c02c</anchor>
      <arglist>(const RelativeTime &amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~RelativeTime</name>
      <anchorfile>classRelativeTime.html</anchorfile>
      <anchor>ac13a30a86834ecf1b1ec61ec2ea651f9</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>inMilliseconds</name>
      <anchorfile>classRelativeTime.html</anchorfile>
      <anchor>a3909da105dad93272d5762ae8dca4f99</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>inSeconds</name>
      <anchorfile>classRelativeTime.html</anchorfile>
      <anchor>a298559bc0ea14c840c349b4bebc261b2</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>inMinutes</name>
      <anchorfile>classRelativeTime.html</anchorfile>
      <anchor>adf84956f22f66cd060ea0498924d9739</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>inHours</name>
      <anchorfile>classRelativeTime.html</anchorfile>
      <anchor>a8235c2bbac468501dfd95d0503fb7e0d</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>inDays</name>
      <anchorfile>classRelativeTime.html</anchorfile>
      <anchor>a16c4cef37f23b1a2dfc10b91ca99243f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>inWeeks</name>
      <anchorfile>classRelativeTime.html</anchorfile>
      <anchor>ae95369d30541c6f45e794a6854e89d41</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>getDescription</name>
      <anchorfile>classRelativeTime.html</anchorfile>
      <anchor>ac02f8e8efec157136589f65a8688bd5f</anchor>
      <arglist>(const String &amp;returnValueForZeroTime=&quot;0&quot;) const </arglist>
    </member>
    <member kind="function">
      <type>RelativeTime</type>
      <name>operator+=</name>
      <anchorfile>classRelativeTime.html</anchorfile>
      <anchor>a734361a0f029c60cf11401ade135847f</anchor>
      <arglist>(RelativeTime timeToAdd) noexcept</arglist>
    </member>
    <member kind="function">
      <type>RelativeTime</type>
      <name>operator-=</name>
      <anchorfile>classRelativeTime.html</anchorfile>
      <anchor>a0fddb581644f95e114a4b69419837261</anchor>
      <arglist>(RelativeTime timeToSubtract) noexcept</arglist>
    </member>
    <member kind="function">
      <type>RelativeTime</type>
      <name>operator+=</name>
      <anchorfile>classRelativeTime.html</anchorfile>
      <anchor>a35fcd4ca8aeb44b801b6455050bf0d37</anchor>
      <arglist>(double secondsToAdd) noexcept</arglist>
    </member>
    <member kind="function">
      <type>RelativeTime</type>
      <name>operator-=</name>
      <anchorfile>classRelativeTime.html</anchorfile>
      <anchor>a40bb8a929550fe709e1ae2910a6224f6</anchor>
      <arglist>(double secondsToSubtract) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static RelativeTime</type>
      <name>milliseconds</name>
      <anchorfile>classRelativeTime.html</anchorfile>
      <anchor>acffa8af50cf3853419d22627b7d8fd68</anchor>
      <arglist>(int milliseconds) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static RelativeTime</type>
      <name>milliseconds</name>
      <anchorfile>classRelativeTime.html</anchorfile>
      <anchor>a6643379b204482cee02001dab26c1525</anchor>
      <arglist>(int64 milliseconds) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static RelativeTime</type>
      <name>seconds</name>
      <anchorfile>classRelativeTime.html</anchorfile>
      <anchor>abc1e968203c55f4050a23b95220de86f</anchor>
      <arglist>(double seconds) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static RelativeTime</type>
      <name>minutes</name>
      <anchorfile>classRelativeTime.html</anchorfile>
      <anchor>a4617b5dbd23f89fd22c1afc2656c2461</anchor>
      <arglist>(double numberOfMinutes) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static RelativeTime</type>
      <name>hours</name>
      <anchorfile>classRelativeTime.html</anchorfile>
      <anchor>a1ae421b15cbeb81220bbf544a116cb77</anchor>
      <arglist>(double numberOfHours) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static RelativeTime</type>
      <name>days</name>
      <anchorfile>classRelativeTime.html</anchorfile>
      <anchor>a97b1773403606835c173f26a0a03f5e6</anchor>
      <arglist>(double numberOfDays) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static RelativeTime</type>
      <name>weeks</name>
      <anchorfile>classRelativeTime.html</anchorfile>
      <anchor>a08137177e3d00fcf5f07909ecebce4dc</anchor>
      <arglist>(double numberOfWeeks) noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ResamplingAudioSource</name>
    <filename>classResamplingAudioSource.html</filename>
    <base>AudioSource</base>
    <member kind="function">
      <type></type>
      <name>ResamplingAudioSource</name>
      <anchorfile>classResamplingAudioSource.html</anchorfile>
      <anchor>a05d6ab55db4fe93572d4801e4c547220</anchor>
      <arglist>(AudioSource *inputSource, bool deleteInputWhenDeleted, int numChannels=2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ResamplingAudioSource</name>
      <anchorfile>classResamplingAudioSource.html</anchorfile>
      <anchor>a3bcbb3a49e217faf8fa66f69dd7e85ff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setResamplingRatio</name>
      <anchorfile>classResamplingAudioSource.html</anchorfile>
      <anchor>aa7d888e41873f6e395baa1eb179c15ad</anchor>
      <arglist>(double samplesInPerOutputSample)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getResamplingRatio</name>
      <anchorfile>classResamplingAudioSource.html</anchorfile>
      <anchor>af868951e30847cecd5f0729cecab722c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>flushBuffers</name>
      <anchorfile>classResamplingAudioSource.html</anchorfile>
      <anchor>a0e2e1dc2dcd41959bc9a425092eb03ad</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>prepareToPlay</name>
      <anchorfile>classResamplingAudioSource.html</anchorfile>
      <anchor>a9fff0f513472ac19bade8f5c12cf4cfb</anchor>
      <arglist>(int samplesPerBlockExpected, double sampleRate) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>releaseResources</name>
      <anchorfile>classResamplingAudioSource.html</anchorfile>
      <anchor>ab070c5a74deddbd0702a8b21cea2c678</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getNextAudioBlock</name>
      <anchorfile>classResamplingAudioSource.html</anchorfile>
      <anchor>ab5535c45e5b301c5fe8066a36cea4e5a</anchor>
      <arglist>(const AudioSourceChannelInfo &amp;) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ResizableBorderComponent</name>
    <filename>classResizableBorderComponent.html</filename>
    <base>Component</base>
    <class kind="class">ResizableBorderComponent::Zone</class>
    <member kind="function">
      <type></type>
      <name>ResizableBorderComponent</name>
      <anchorfile>classResizableBorderComponent.html</anchorfile>
      <anchor>a7ac45de1070370a02e6d641cffd7dc35</anchor>
      <arglist>(Component *componentToResize, ComponentBoundsConstrainer *constrainer)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ResizableBorderComponent</name>
      <anchorfile>classResizableBorderComponent.html</anchorfile>
      <anchor>a544ec6f29fe70d170e241ede49dc086f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBorderThickness</name>
      <anchorfile>classResizableBorderComponent.html</anchorfile>
      <anchor>a65670ed4d9358d0d83979371d540bb87</anchor>
      <arglist>(const BorderSize&lt; int &gt; &amp;newBorderSize)</arglist>
    </member>
    <member kind="function">
      <type>BorderSize&lt; int &gt;</type>
      <name>getBorderThickness</name>
      <anchorfile>classResizableBorderComponent.html</anchorfile>
      <anchor>a4c5c60470bd14064a89f360227967c89</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Zone</type>
      <name>getCurrentZone</name>
      <anchorfile>classResizableBorderComponent.html</anchorfile>
      <anchor>a8cc99bf44e6eb7269d9590dbf2b4bfff</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>paint</name>
      <anchorfile>classResizableBorderComponent.html</anchorfile>
      <anchor>a1c48b539fd464a0e7e16a2dc68242b68</anchor>
      <arglist>(Graphics &amp;) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>mouseEnter</name>
      <anchorfile>classResizableBorderComponent.html</anchorfile>
      <anchor>ad8b599c07f7cba29e1cb2b0f5b4902a2</anchor>
      <arglist>(const MouseEvent &amp;) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>mouseMove</name>
      <anchorfile>classResizableBorderComponent.html</anchorfile>
      <anchor>ab7aab4427bdd421c99af9f1bdea571ca</anchor>
      <arglist>(const MouseEvent &amp;) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>mouseDown</name>
      <anchorfile>classResizableBorderComponent.html</anchorfile>
      <anchor>aab4acffe6cda1852510894fd6b78c946</anchor>
      <arglist>(const MouseEvent &amp;) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>mouseDrag</name>
      <anchorfile>classResizableBorderComponent.html</anchorfile>
      <anchor>a031919ae342f15b5bee1ece8c3c30f0b</anchor>
      <arglist>(const MouseEvent &amp;) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>mouseUp</name>
      <anchorfile>classResizableBorderComponent.html</anchorfile>
      <anchor>a436bf6a9d3ffec969a550c9d9d80d33f</anchor>
      <arglist>(const MouseEvent &amp;) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>hitTest</name>
      <anchorfile>classResizableBorderComponent.html</anchorfile>
      <anchor>acd797e21238848968eb9957106590253</anchor>
      <arglist>(int x, int y) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ResizableBorderComponent::Zone</name>
    <filename>classResizableBorderComponent_1_1Zone.html</filename>
    <member kind="enumeration">
      <type></type>
      <name>Zones</name>
      <anchorfile>classResizableBorderComponent_1_1Zone.html</anchorfile>
      <anchor>ad6fba9e9d2be9a3c7e31f14ba8f6881e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>centre</name>
      <anchorfile>classResizableBorderComponent_1_1Zone.html</anchorfile>
      <anchor>ad6fba9e9d2be9a3c7e31f14ba8f6881eabb95f72d0c8f0a7f1067d10eabd9dcf7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>left</name>
      <anchorfile>classResizableBorderComponent_1_1Zone.html</anchorfile>
      <anchor>ad6fba9e9d2be9a3c7e31f14ba8f6881eaaed2e03ece3b1ad56f93cb6d318107c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>top</name>
      <anchorfile>classResizableBorderComponent_1_1Zone.html</anchorfile>
      <anchor>ad6fba9e9d2be9a3c7e31f14ba8f6881eaade8c46acd8d0763312af993d4a0c338</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>right</name>
      <anchorfile>classResizableBorderComponent_1_1Zone.html</anchorfile>
      <anchor>ad6fba9e9d2be9a3c7e31f14ba8f6881ead78b7d524dca9da5cd0d8576041ff84b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>bottom</name>
      <anchorfile>classResizableBorderComponent_1_1Zone.html</anchorfile>
      <anchor>ad6fba9e9d2be9a3c7e31f14ba8f6881eaa21beed256039ab04e501c4bae4ba67b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Zone</name>
      <anchorfile>classResizableBorderComponent_1_1Zone.html</anchorfile>
      <anchor>ace935d6cef2cc9a5d802182d88b66291</anchor>
      <arglist>(int zoneFlags) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Zone</name>
      <anchorfile>classResizableBorderComponent_1_1Zone.html</anchorfile>
      <anchor>ae2bccead4bc2ad4c51e54eefc1655534</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Zone</name>
      <anchorfile>classResizableBorderComponent_1_1Zone.html</anchorfile>
      <anchor>a3d92d3082f28cf4669dd3c4eba51bab3</anchor>
      <arglist>(const Zone &amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Zone &amp;</type>
      <name>operator=</name>
      <anchorfile>classResizableBorderComponent_1_1Zone.html</anchorfile>
      <anchor>aa36112a1f85e0049db668b6f5ab1a91d</anchor>
      <arglist>(const Zone &amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classResizableBorderComponent_1_1Zone.html</anchorfile>
      <anchor>a17ba307ae75c4bc01ccf672cd24d6a20</anchor>
      <arglist>(const Zone &amp;) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classResizableBorderComponent_1_1Zone.html</anchorfile>
      <anchor>a942ec9be2f3eeddea5573a7f9b718310</anchor>
      <arglist>(const Zone &amp;) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>MouseCursor</type>
      <name>getMouseCursor</name>
      <anchorfile>classResizableBorderComponent_1_1Zone.html</anchorfile>
      <anchor>a5ff6ae1427853fe62e1a8bbd04194e0d</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isDraggingWholeObject</name>
      <anchorfile>classResizableBorderComponent_1_1Zone.html</anchorfile>
      <anchor>a34c629632747476411260528c91eaf14</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isDraggingLeftEdge</name>
      <anchorfile>classResizableBorderComponent_1_1Zone.html</anchorfile>
      <anchor>ab27a11d0fc43a2ef5a8cdecbd401adda</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isDraggingRightEdge</name>
      <anchorfile>classResizableBorderComponent_1_1Zone.html</anchorfile>
      <anchor>a164eb5b4457257ec1ed6a7e0918724d4</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isDraggingTopEdge</name>
      <anchorfile>classResizableBorderComponent_1_1Zone.html</anchorfile>
      <anchor>af1d582e7d92a1c51ef8a469df85ad680</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isDraggingBottomEdge</name>
      <anchorfile>classResizableBorderComponent_1_1Zone.html</anchorfile>
      <anchor>aaa416b3eb1a4a03e242db0a44105a0f8</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Rectangle&lt; ValueType &gt;</type>
      <name>resizeRectangleBy</name>
      <anchorfile>classResizableBorderComponent_1_1Zone.html</anchorfile>
      <anchor>acc3054a16f6d88c07b1db439ddf20d69</anchor>
      <arglist>(Rectangle&lt; ValueType &gt; original, const Point&lt; ValueType &gt; &amp;distance) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getZoneFlags</name>
      <anchorfile>classResizableBorderComponent_1_1Zone.html</anchorfile>
      <anchor>ad45bad50151fda1a0d102ea0073bc566</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Zone</type>
      <name>fromPositionOnBorder</name>
      <anchorfile>classResizableBorderComponent_1_1Zone.html</anchorfile>
      <anchor>af901205cf8873913469933d0f1bcd577</anchor>
      <arglist>(const Rectangle&lt; int &gt; &amp;totalSize, const BorderSize&lt; int &gt; &amp;border, Point&lt; int &gt; position)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ResizableCornerComponent</name>
    <filename>classResizableCornerComponent.html</filename>
    <base>Component</base>
    <member kind="function">
      <type></type>
      <name>ResizableCornerComponent</name>
      <anchorfile>classResizableCornerComponent.html</anchorfile>
      <anchor>a3706073ab81c9dcf5161bc570b2c1226</anchor>
      <arglist>(Component *componentToResize, ComponentBoundsConstrainer *constrainer)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ResizableCornerComponent</name>
      <anchorfile>classResizableCornerComponent.html</anchorfile>
      <anchor>ab55ab24ef93bc37f7afcc41ed37eccde</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>paint</name>
      <anchorfile>classResizableCornerComponent.html</anchorfile>
      <anchor>a934e28efe7a85e020a48adffa60bcd71</anchor>
      <arglist>(Graphics &amp;) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>mouseDown</name>
      <anchorfile>classResizableCornerComponent.html</anchorfile>
      <anchor>a6f614b5db33224a9b338bcb2dca0562f</anchor>
      <arglist>(const MouseEvent &amp;) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>mouseDrag</name>
      <anchorfile>classResizableCornerComponent.html</anchorfile>
      <anchor>a93684b148378188690ccb51bb7fbcaca</anchor>
      <arglist>(const MouseEvent &amp;) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>mouseUp</name>
      <anchorfile>classResizableCornerComponent.html</anchorfile>
      <anchor>a9917375d45f2c1947af0b2d7a620f749</anchor>
      <arglist>(const MouseEvent &amp;) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>hitTest</name>
      <anchorfile>classResizableCornerComponent.html</anchorfile>
      <anchor>acc3a046566ad8ab5aa5318b3a943d2fc</anchor>
      <arglist>(int x, int y) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ResizableEdgeComponent</name>
    <filename>classResizableEdgeComponent.html</filename>
    <base>Component</base>
    <member kind="enumeration">
      <type></type>
      <name>Edge</name>
      <anchorfile>classResizableEdgeComponent.html</anchorfile>
      <anchor>a5dfd6990713a931c4411f4ab89b51e25</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>leftEdge</name>
      <anchorfile>classResizableEdgeComponent.html</anchorfile>
      <anchor>a5dfd6990713a931c4411f4ab89b51e25ad49e513b9ece9e62cbb2a663e7f4d589</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>rightEdge</name>
      <anchorfile>classResizableEdgeComponent.html</anchorfile>
      <anchor>a5dfd6990713a931c4411f4ab89b51e25ac7c8c54bfed40fbe58dbb8745371bc41</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>topEdge</name>
      <anchorfile>classResizableEdgeComponent.html</anchorfile>
      <anchor>a5dfd6990713a931c4411f4ab89b51e25a2680b4787015c0aa2c92ddc8218cc3d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>bottomEdge</name>
      <anchorfile>classResizableEdgeComponent.html</anchorfile>
      <anchor>a5dfd6990713a931c4411f4ab89b51e25a0b55203e426589ff7ae67c750889ad41</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ResizableEdgeComponent</name>
      <anchorfile>classResizableEdgeComponent.html</anchorfile>
      <anchor>a50df447594f67bdb95d5d334c4f97889</anchor>
      <arglist>(Component *componentToResize, ComponentBoundsConstrainer *constrainer, Edge edgeToResize)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ResizableEdgeComponent</name>
      <anchorfile>classResizableEdgeComponent.html</anchorfile>
      <anchor>ab0da39a6bfe4536a2b791e2b6035b4f9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isVertical</name>
      <anchorfile>classResizableEdgeComponent.html</anchorfile>
      <anchor>ae282b5d542d717f6b043f61d7283ca6a</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>paint</name>
      <anchorfile>classResizableEdgeComponent.html</anchorfile>
      <anchor>a7c070b054bd93f89caf72163a2bc18a7</anchor>
      <arglist>(Graphics &amp;) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>mouseDown</name>
      <anchorfile>classResizableEdgeComponent.html</anchorfile>
      <anchor>ad76c21bd1c68f9128e715fd96e15c101</anchor>
      <arglist>(const MouseEvent &amp;) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>mouseDrag</name>
      <anchorfile>classResizableEdgeComponent.html</anchorfile>
      <anchor>ab9673747db9803dec792117bdbb997ee</anchor>
      <arglist>(const MouseEvent &amp;) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>mouseUp</name>
      <anchorfile>classResizableEdgeComponent.html</anchorfile>
      <anchor>a68289d2190f909c884436cb663fae6e8</anchor>
      <arglist>(const MouseEvent &amp;) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ResizableWindow</name>
    <filename>classResizableWindow.html</filename>
    <base>TopLevelWindow</base>
    <class kind="struct">ResizableWindow::LookAndFeelMethods</class>
  </compound>
  <compound kind="struct">
    <name>ResizableWindow::LookAndFeelMethods</name>
    <filename>structResizableWindow_1_1LookAndFeelMethods.html</filename>
  </compound>
  <compound kind="class">
    <name>Result</name>
    <filename>classResult.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>wasOk</name>
      <anchorfile>classResult.html</anchorfile>
      <anchor>ad1cd6e48b8f41b1c5f6377109288cffe</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>failed</name>
      <anchorfile>classResult.html</anchorfile>
      <anchor>a0bca10ed2b5416e33dfd027869c849ce</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator bool</name>
      <anchorfile>classResult.html</anchorfile>
      <anchor>ae8e63cf847e9356f8909b4413a47e54f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!</name>
      <anchorfile>classResult.html</anchorfile>
      <anchor>a5824bcb0172e2f9a5f664b21a7aa08f2</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const String &amp;</type>
      <name>getErrorMessage</name>
      <anchorfile>classResult.html</anchorfile>
      <anchor>a9484065d75bd9a408e489222b8d3a318</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Result</name>
      <anchorfile>classResult.html</anchorfile>
      <anchor>a4457dd54f8a2854b2c1517c9583651c0</anchor>
      <arglist>(const Result &amp;)</arglist>
    </member>
    <member kind="function">
      <type>Result &amp;</type>
      <name>operator=</name>
      <anchorfile>classResult.html</anchorfile>
      <anchor>abd9edc76c2254a293532d1e243f5d886</anchor>
      <arglist>(const Result &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Result</name>
      <anchorfile>classResult.html</anchorfile>
      <anchor>a934eb96dbd852fe6926dd15d0c936054</anchor>
      <arglist>(Result &amp;&amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Result &amp;</type>
      <name>operator=</name>
      <anchorfile>classResult.html</anchorfile>
      <anchor>a6767fe44cf8835de52cdb89d17b0a256</anchor>
      <arglist>(Result &amp;&amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classResult.html</anchorfile>
      <anchor>abcaa1c7cf4f9fef6c0f00ab9ad43576c</anchor>
      <arglist>(const Result &amp;other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classResult.html</anchorfile>
      <anchor>a787a681d1c6ef37bbd8b871020b12fde</anchor>
      <arglist>(const Result &amp;other) const noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Result</type>
      <name>ok</name>
      <anchorfile>classResult.html</anchorfile>
      <anchor>af20c96ffa94adac90e10a8395d8c8852</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Result</type>
      <name>fail</name>
      <anchorfile>classResult.html</anchorfile>
      <anchor>a2b51de8f6f8c27c3de29f9da5cce8f75</anchor>
      <arglist>(const String &amp;errorMessage) noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Reverb</name>
    <filename>classReverb.html</filename>
    <class kind="struct">Reverb::Parameters</class>
    <member kind="function">
      <type></type>
      <name>Reverb</name>
      <anchorfile>classReverb.html</anchorfile>
      <anchor>a765b925557df7e43bf5ed275fc6950d1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Parameters &amp;</type>
      <name>getParameters</name>
      <anchorfile>classReverb.html</anchorfile>
      <anchor>ab325817442b8666a819f81c8472c119a</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setParameters</name>
      <anchorfile>classReverb.html</anchorfile>
      <anchor>af1b8609045ccadf2f6c4760f9a6d945a</anchor>
      <arglist>(const Parameters &amp;newParams)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSampleRate</name>
      <anchorfile>classReverb.html</anchorfile>
      <anchor>a98c91d03e4a2484123dc3d8f92896b86</anchor>
      <arglist>(const double sampleRate)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classReverb.html</anchorfile>
      <anchor>a5d132bb7b4edbeeedbd2d1ef7e4c87ef</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>processStereo</name>
      <anchorfile>classReverb.html</anchorfile>
      <anchor>aba79aa61c18e8b3cf70dfd83fda7d099</anchor>
      <arglist>(float *const left, float *const right, const int numSamples) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>processMono</name>
      <anchorfile>classReverb.html</anchorfile>
      <anchor>a04c43dc7b91788df75f434a957499e2d</anchor>
      <arglist>(float *const samples, const int numSamples) noexcept</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Reverb::Parameters</name>
    <filename>structReverb_1_1Parameters.html</filename>
    <member kind="function">
      <type></type>
      <name>Parameters</name>
      <anchorfile>structReverb_1_1Parameters.html</anchorfile>
      <anchor>a23796df8b292d4d9390a896ae2ebe29f</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>roomSize</name>
      <anchorfile>structReverb_1_1Parameters.html</anchorfile>
      <anchor>a31a5e2e56f91cb29e902e045960218a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>damping</name>
      <anchorfile>structReverb_1_1Parameters.html</anchorfile>
      <anchor>afbbd3f114c878f0a864205aa66d47f6f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>wetLevel</name>
      <anchorfile>structReverb_1_1Parameters.html</anchorfile>
      <anchor>ae029e68c8dc8fa0acb34373237377fec</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>dryLevel</name>
      <anchorfile>structReverb_1_1Parameters.html</anchorfile>
      <anchor>add75191e7a163d95cd807cbc72fa192c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>width</name>
      <anchorfile>structReverb_1_1Parameters.html</anchorfile>
      <anchor>a2104c314f4804e3ff6e5cc7d524c3b1d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>freezeMode</name>
      <anchorfile>structReverb_1_1Parameters.html</anchorfile>
      <anchor>a394c3bfbd67ad681222410952dbed0c6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ReverbAudioSource</name>
    <filename>classReverbAudioSource.html</filename>
    <base>AudioSource</base>
    <member kind="function">
      <type></type>
      <name>ReverbAudioSource</name>
      <anchorfile>classReverbAudioSource.html</anchorfile>
      <anchor>a9bb3f69c71cf6dd49eab94c4f46de919</anchor>
      <arglist>(AudioSource *inputSource, bool deleteInputWhenDeleted)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ReverbAudioSource</name>
      <anchorfile>classReverbAudioSource.html</anchorfile>
      <anchor>a5e5fddcb5f353b566376f26318fa78ab</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Reverb::Parameters &amp;</type>
      <name>getParameters</name>
      <anchorfile>classReverbAudioSource.html</anchorfile>
      <anchor>afda75efd33835198182fb38fb49cf967</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setParameters</name>
      <anchorfile>classReverbAudioSource.html</anchorfile>
      <anchor>abb05d4c6980825f841fabbc56d167d9b</anchor>
      <arglist>(const Reverb::Parameters &amp;newParams)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBypassed</name>
      <anchorfile>classReverbAudioSource.html</anchorfile>
      <anchor>a8b6f060d4f6ab72e7c9a4ddcdbf6ccd1</anchor>
      <arglist>(bool isBypassed) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isBypassed</name>
      <anchorfile>classReverbAudioSource.html</anchorfile>
      <anchor>a930435b2b93f74d00203b6794c41ac8e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>prepareToPlay</name>
      <anchorfile>classReverbAudioSource.html</anchorfile>
      <anchor>af8077a5e348be506347807afb25afee6</anchor>
      <arglist>(int samplesPerBlockExpected, double sampleRate) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>releaseResources</name>
      <anchorfile>classReverbAudioSource.html</anchorfile>
      <anchor>a5150be0ceba566e4f8c4cf0f2bfebe74</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getNextAudioBlock</name>
      <anchorfile>classReverbAudioSource.html</anchorfile>
      <anchor>a05fd8b39aa2dbf21095376ffd346dda0</anchor>
      <arglist>(const AudioSourceChannelInfo &amp;) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RSAKey</name>
    <filename>classRSAKey.html</filename>
    <member kind="function">
      <type></type>
      <name>RSAKey</name>
      <anchorfile>classRSAKey.html</anchorfile>
      <anchor>a2a1894882100da6c8c70f8911089ef4d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RSAKey</name>
      <anchorfile>classRSAKey.html</anchorfile>
      <anchor>a8658a7cfe77c3565033efbd6706ee6ae</anchor>
      <arglist>(const String &amp;stringRepresentation)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~RSAKey</name>
      <anchorfile>classRSAKey.html</anchorfile>
      <anchor>a4ae206fafb656769aaea335383a4ffec</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classRSAKey.html</anchorfile>
      <anchor>a55cc9849996cb7b296ddf58f412113e4</anchor>
      <arglist>(const RSAKey &amp;other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classRSAKey.html</anchorfile>
      <anchor>a65d813bd3797f247f969714354158c7c</anchor>
      <arglist>(const RSAKey &amp;other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>toString</name>
      <anchorfile>classRSAKey.html</anchorfile>
      <anchor>ab689528a62dabebe0cf689df29d5b7b6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>classRSAKey.html</anchorfile>
      <anchor>a898ca7521354c74d24ace4689b983f98</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>applyToValue</name>
      <anchorfile>classRSAKey.html</anchorfile>
      <anchor>a66512b0a53fad1f68481b4aca050f93c</anchor>
      <arglist>(BigInteger &amp;value) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>createKeyPair</name>
      <anchorfile>classRSAKey.html</anchorfile>
      <anchor>a8d69fca3bd9748a5c455f92f6da0dc6a</anchor>
      <arglist>(RSAKey &amp;publicKey, RSAKey &amp;privateKey, int numBits, const int *randomSeeds=nullptr, int numRandomSeeds=0)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>BigInteger</type>
      <name>part1</name>
      <anchorfile>classRSAKey.html</anchorfile>
      <anchor>af9992df31573da04eff2f95b6c215be1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>BigInteger</type>
      <name>part2</name>
      <anchorfile>classRSAKey.html</anchorfile>
      <anchor>a8f404bb892955099f1495922fe43e0f8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RuleBasedTopologySource</name>
    <filename>classRuleBasedTopologySource.html</filename>
    <base>TopologySource</base>
    <class kind="struct">RuleBasedTopologySource::Rule</class>
    <member kind="function">
      <type></type>
      <name>RuleBasedTopologySource</name>
      <anchorfile>classRuleBasedTopologySource.html</anchorfile>
      <anchor>adc0c4f1a888357aa51f14a440f31aa2d</anchor>
      <arglist>(TopologySource &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~RuleBasedTopologySource</name>
      <anchorfile>classRuleBasedTopologySource.html</anchorfile>
      <anchor>ac56f643544fbafbdf55ec28858398485</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>BlockTopology</type>
      <name>getCurrentTopology</name>
      <anchorfile>classRuleBasedTopologySource.html</anchorfile>
      <anchor>a90fa1622d34fc88f6331c7f0410d1319</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearRules</name>
      <anchorfile>classRuleBasedTopologySource.html</anchorfile>
      <anchor>ac2e356922f970bc90a49e61149718b73</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addRule</name>
      <anchorfile>classRuleBasedTopologySource.html</anchorfile>
      <anchor>a0ddf97d142e900ddd8800887a259c134</anchor>
      <arglist>(Rule *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>cancelAllActiveTouches</name>
      <anchorfile>classTopologySource.html</anchorfile>
      <anchor>a17364736db6eb6d0dd40a2caccd8f2e0</anchor>
      <arglist>() noexcept</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>RuleBasedTopologySource::Rule</name>
    <filename>structRuleBasedTopologySource_1_1Rule.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Rule</name>
      <anchorfile>structRuleBasedTopologySource_1_1Rule.html</anchorfile>
      <anchor>aff9c2f0ed4c1ac8b286f6d7304490b31</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>transformTopology</name>
      <anchorfile>structRuleBasedTopologySource_1_1Rule.html</anchorfile>
      <anchor>a5eadbda331af433fd24b0455f6ca73b9</anchor>
      <arglist>(BlockTopology &amp;)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RuntimePermissions</name>
    <filename>classRuntimePermissions.html</filename>
    <member kind="enumeration">
      <type></type>
      <name>PermissionID</name>
      <anchorfile>classRuntimePermissions.html</anchorfile>
      <anchor>ae35d63b8c00dab34a1546fd1eef90878</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>recordAudio</name>
      <anchorfile>classRuntimePermissions.html</anchorfile>
      <anchor>ae35d63b8c00dab34a1546fd1eef90878a56b38b114bf52a5b212b87b4a5c9b535</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>bluetoothMidi</name>
      <anchorfile>classRuntimePermissions.html</anchorfile>
      <anchor>ae35d63b8c00dab34a1546fd1eef90878af9db427de56e5cc282cea35e58f47959</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::function&lt; void(bool)&gt;</type>
      <name>Callback</name>
      <anchorfile>classRuntimePermissions.html</anchorfile>
      <anchor>a6138db5251bc8067e85154b32627d1ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>request</name>
      <anchorfile>classRuntimePermissions.html</anchorfile>
      <anchor>a9b45f4bb7ea1cc3bf5693fa2ec33b7c3</anchor>
      <arglist>(PermissionID permission, Callback callback)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isRequired</name>
      <anchorfile>classRuntimePermissions.html</anchorfile>
      <anchor>a895f15741378bada300fbe409775d0d8</anchor>
      <arglist>(PermissionID permission)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isGranted</name>
      <anchorfile>classRuntimePermissions.html</anchorfile>
      <anchor>a88697ee964654de2fea2eac5ed048979</anchor>
      <arglist>(PermissionID permission)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SamplerSound</name>
    <filename>classSamplerSound.html</filename>
    <base>SynthesiserSound</base>
    <member kind="function">
      <type></type>
      <name>SamplerSound</name>
      <anchorfile>classSamplerSound.html</anchorfile>
      <anchor>ad26e044243f4802000b8dcbb6dd15cee</anchor>
      <arglist>(const String &amp;name, AudioFormatReader &amp;source, const BigInteger &amp;midiNotes, int midiNoteForNormalPitch, double attackTimeSecs, double releaseTimeSecs, double maxSampleLengthSeconds)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SamplerSound</name>
      <anchorfile>classSamplerSound.html</anchorfile>
      <anchor>a4e5d644cede3dd9c821e40098da01945</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const String &amp;</type>
      <name>getName</name>
      <anchorfile>classSamplerSound.html</anchorfile>
      <anchor>a12140b42cc5c7e0d4a73ae8763fc6df3</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>AudioSampleBuffer *</type>
      <name>getAudioData</name>
      <anchorfile>classSamplerSound.html</anchorfile>
      <anchor>aa684e03887c9f213102ce7a0557e6f89</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>appliesToNote</name>
      <anchorfile>classSamplerSound.html</anchorfile>
      <anchor>ac579ceea6ee78e6dae8026b4b9b33038</anchor>
      <arglist>(int midiNoteNumber) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>appliesToChannel</name>
      <anchorfile>classSamplerSound.html</anchorfile>
      <anchor>a6f69ffcba849228995ab63d93439a339</anchor>
      <arglist>(int midiChannel) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SynthesiserSound</name>
      <anchorfile>classSynthesiserSound.html</anchorfile>
      <anchor>a1565fcdfa4362d7b25c29178b4d39b76</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="typedef">
      <type>ReferenceCountedObjectPtr&lt; SynthesiserSound &gt;</type>
      <name>Ptr</name>
      <anchorfile>classSynthesiserSound.html</anchorfile>
      <anchor>a602e767cdfca63dd73df1f0d5c723ef8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SynthesiserSound</name>
      <anchorfile>classSynthesiserSound.html</anchorfile>
      <anchor>a7446eb4d78aa0ce2dcd37ca1ff48dd3a</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SamplerVoice</name>
    <filename>classSamplerVoice.html</filename>
    <base>SynthesiserVoice</base>
    <member kind="function">
      <type></type>
      <name>SamplerVoice</name>
      <anchorfile>classSamplerVoice.html</anchorfile>
      <anchor>aa1614529f047ba46473645216f58d9ac</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SamplerVoice</name>
      <anchorfile>classSamplerVoice.html</anchorfile>
      <anchor>acf89d1cb1e5c67c1daf562ec227d09ef</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>canPlaySound</name>
      <anchorfile>classSamplerVoice.html</anchorfile>
      <anchor>a29685cd1bd8a1d7955c16434034bfeb1</anchor>
      <arglist>(SynthesiserSound *) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>startNote</name>
      <anchorfile>classSamplerVoice.html</anchorfile>
      <anchor>ace2f7f448b19e026989e627729d7c35c</anchor>
      <arglist>(int midiNoteNumber, float velocity, SynthesiserSound *, int pitchWheel) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stopNote</name>
      <anchorfile>classSamplerVoice.html</anchorfile>
      <anchor>ae123962ddd9c090cc53c702544a21e27</anchor>
      <arglist>(float velocity, bool allowTailOff) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pitchWheelMoved</name>
      <anchorfile>classSamplerVoice.html</anchorfile>
      <anchor>a5ec973f877597dba170806ec3afbbae4</anchor>
      <arglist>(int newValue) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>controllerMoved</name>
      <anchorfile>classSamplerVoice.html</anchorfile>
      <anchor>a416b14c55e39696fb86fb3fa0113eafa</anchor>
      <arglist>(int controllerNumber, int newValue) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>renderNextBlock</name>
      <anchorfile>classSamplerVoice.html</anchorfile>
      <anchor>a282d620c059aa9d0408c64c89c1c456b</anchor>
      <arglist>(AudioSampleBuffer &amp;, int startSample, int numSamples) override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SynthesiserVoice</name>
      <anchorfile>classSynthesiserVoice.html</anchorfile>
      <anchor>a365e31ac75ed304f623cb20d3dcc31fb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SynthesiserVoice</name>
      <anchorfile>classSynthesiserVoice.html</anchorfile>
      <anchor>a34687ca1d7fc823ad27b64eb4b508c07</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getCurrentlyPlayingNote</name>
      <anchorfile>classSynthesiserVoice.html</anchorfile>
      <anchor>ac7e8ff1dc70d3ff90b4a96dae9dd7757</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>SynthesiserSound::Ptr</type>
      <name>getCurrentlyPlayingSound</name>
      <anchorfile>classSynthesiserVoice.html</anchorfile>
      <anchor>a45d0d2b22eb7da9f21cb63b18336de73</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isVoiceActive</name>
      <anchorfile>classSynthesiserVoice.html</anchorfile>
      <anchor>a044669944c2660af21936687c78848d7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>aftertouchChanged</name>
      <anchorfile>classSynthesiserVoice.html</anchorfile>
      <anchor>a9b5ada8bbf89e4be218b6ffecb770b30</anchor>
      <arglist>(int newAftertouchValue)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>channelPressureChanged</name>
      <anchorfile>classSynthesiserVoice.html</anchorfile>
      <anchor>a5ec285dd9db207415f64ac83efe86859</anchor>
      <arglist>(int newChannelPressureValue)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>renderNextBlock</name>
      <anchorfile>classSynthesiserVoice.html</anchorfile>
      <anchor>ac61fa7d3dd5180a561fc1c0ab418077e</anchor>
      <arglist>(AudioBuffer&lt; double &gt; &amp;outputBuffer, int startSample, int numSamples)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCurrentPlaybackSampleRate</name>
      <anchorfile>classSynthesiserVoice.html</anchorfile>
      <anchor>a31a423708524f139af52bd5771006b14</anchor>
      <arglist>(double newRate)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isPlayingChannel</name>
      <anchorfile>classSynthesiserVoice.html</anchorfile>
      <anchor>abcf916eea8d11a986d308223e1ebb4d1</anchor>
      <arglist>(int midiChannel) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getSampleRate</name>
      <anchorfile>classSynthesiserVoice.html</anchorfile>
      <anchor>a149385fe43164bbfd2659391aebc7ee4</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isKeyDown</name>
      <anchorfile>classSynthesiserVoice.html</anchorfile>
      <anchor>ae0f9adb8d02f26099dea4467fd6fc170</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSustainPedalDown</name>
      <anchorfile>classSynthesiserVoice.html</anchorfile>
      <anchor>ab6524e841fc7ebb1936690f8be147417</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSostenutoPedalDown</name>
      <anchorfile>classSynthesiserVoice.html</anchorfile>
      <anchor>a8011b7b9c2cb7641fe99e94427a95717</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isPlayingButReleased</name>
      <anchorfile>classSynthesiserVoice.html</anchorfile>
      <anchor>aa928c0b5d570b8b82f8d86b60e2a6597</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>wasStartedBefore</name>
      <anchorfile>classSynthesiserVoice.html</anchorfile>
      <anchor>aa9421602c148978426c98bf173d5e5c7</anchor>
      <arglist>(const SynthesiserVoice &amp;other) const noexcept</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>clearCurrentNote</name>
      <anchorfile>classSynthesiserVoice.html</anchorfile>
      <anchor>a55d1e7a062f8dc9a6cd78526b0da049c</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ScopedAutoReleasePool</name>
    <filename>classScopedAutoReleasePool.html</filename>
    <member kind="function">
      <type></type>
      <name>ScopedAutoReleasePool</name>
      <anchorfile>classScopedAutoReleasePool.html</anchorfile>
      <anchor>ae1be6d4b7e677b4ec8f614ec4e962ae2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ScopedAutoReleasePool</name>
      <anchorfile>classScopedAutoReleasePool.html</anchorfile>
      <anchor>adc870c53867716591a676ff039436d07</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ScopedJuceInitialiser_GUI</name>
    <filename>classScopedJuceInitialiser__GUI.html</filename>
    <member kind="function">
      <type></type>
      <name>ScopedJuceInitialiser_GUI</name>
      <anchorfile>classScopedJuceInitialiser__GUI.html</anchorfile>
      <anchor>a1342c78002291c0ce1cf77c38fac2c9c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ScopedJuceInitialiser_GUI</name>
      <anchorfile>classScopedJuceInitialiser__GUI.html</anchorfile>
      <anchor>a689e8564ee0ea5b806340008252a1a5f</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ScopedPointer</name>
    <filename>classScopedPointer.html</filename>
    <templarg>ObjectType</templarg>
    <member kind="function">
      <type></type>
      <name>ScopedPointer</name>
      <anchorfile>classScopedPointer.html</anchorfile>
      <anchor>ac187958296e33aa057dd37478ea70400</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ScopedPointer</name>
      <anchorfile>classScopedPointer.html</anchorfile>
      <anchor>a32e3396a5a530aba0c6109d709c549b0</anchor>
      <arglist>(decltype(nullptr)) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ScopedPointer</name>
      <anchorfile>classScopedPointer.html</anchorfile>
      <anchor>a44a7843e49c3ff719f06607b6e908f7d</anchor>
      <arglist>(ObjectType *const objectToTakePossessionOf) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ScopedPointer</name>
      <anchorfile>classScopedPointer.html</anchorfile>
      <anchor>a04688b1561dd9d861ca80c6deb63a233</anchor>
      <arglist>(ScopedPointer &amp;objectToTransferFrom) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ScopedPointer</name>
      <anchorfile>classScopedPointer.html</anchorfile>
      <anchor>a3c540f0121065aafa5f9607362fc1450</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ScopedPointer &amp;</type>
      <name>operator=</name>
      <anchorfile>classScopedPointer.html</anchorfile>
      <anchor>afefc7940828d72c056e03804cd6bea9f</anchor>
      <arglist>(ScopedPointer &amp;objectToTransferFrom)</arglist>
    </member>
    <member kind="function">
      <type>ScopedPointer &amp;</type>
      <name>operator=</name>
      <anchorfile>classScopedPointer.html</anchorfile>
      <anchor>a88ee7f038e57471539d3181141c0390e</anchor>
      <arglist>(ObjectType *const newObjectToTakePossessionOf)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ScopedPointer</name>
      <anchorfile>classScopedPointer.html</anchorfile>
      <anchor>a331080bd9920f0e479094f3250552b14</anchor>
      <arglist>(ScopedPointer &amp;&amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>ScopedPointer &amp;</type>
      <name>operator=</name>
      <anchorfile>classScopedPointer.html</anchorfile>
      <anchor>a8113d3daa273388cc0e6b0bad4f581c2</anchor>
      <arglist>(ScopedPointer &amp;&amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator ObjectType *</name>
      <anchorfile>classScopedPointer.html</anchorfile>
      <anchor>af7c241c736d79754fd6f8d305cce8bc3</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>ObjectType *</type>
      <name>get</name>
      <anchorfile>classScopedPointer.html</anchorfile>
      <anchor>ac65fb45b9eb2d53773489fcfbc6fd740</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>ObjectType &amp;</type>
      <name>operator*</name>
      <anchorfile>classScopedPointer.html</anchorfile>
      <anchor>a2f48458a1656a6ef1bd35cb8452eed35</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>ObjectType *</type>
      <name>operator-&gt;</name>
      <anchorfile>classScopedPointer.html</anchorfile>
      <anchor>a6eedc84349cbe629cc1abb79ffa74e87</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>ObjectType *</type>
      <name>release</name>
      <anchorfile>classScopedPointer.html</anchorfile>
      <anchor>a10c8f696fec0cca763b067ec3e469199</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swapWith</name>
      <anchorfile>classScopedPointer.html</anchorfile>
      <anchor>a362cd8d5a212df0ee08691b75a4ba3de</anchor>
      <arglist>(ScopedPointer&lt; ObjectType &gt; &amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>ObjectType *</type>
      <name>createCopy</name>
      <anchorfile>classScopedPointer.html</anchorfile>
      <anchor>a258f418869b47381fc7ba61becbb209c</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ScopedReadLock</name>
    <filename>classScopedReadLock.html</filename>
    <member kind="function">
      <type></type>
      <name>ScopedReadLock</name>
      <anchorfile>classScopedReadLock.html</anchorfile>
      <anchor>a656bd081a1ce9eaebaf1b612ad35ea18</anchor>
      <arglist>(const ReadWriteLock &amp;lock) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ScopedReadLock</name>
      <anchorfile>classScopedReadLock.html</anchorfile>
      <anchor>a81becd93947c0103c2c9461e4ddbe594</anchor>
      <arglist>() noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ScopedValueSetter</name>
    <filename>classScopedValueSetter.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>ScopedValueSetter</name>
      <anchorfile>classScopedValueSetter.html</anchorfile>
      <anchor>a0cf278b4c7956af0c2b4e5c94e8cac4a</anchor>
      <arglist>(ValueType &amp;valueToSet, ValueType newValue)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ScopedValueSetter</name>
      <anchorfile>classScopedValueSetter.html</anchorfile>
      <anchor>aa8b7f3f0fc9d227a77cd6e0903f99caf</anchor>
      <arglist>(ValueType &amp;valueToSet, ValueType newValue, ValueType valueWhenDeleted)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ScopedValueSetter</name>
      <anchorfile>classScopedValueSetter.html</anchorfile>
      <anchor>adb7bf2e716234b227f3c8d3a5c25827d</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ScopedWriteLock</name>
    <filename>classScopedWriteLock.html</filename>
    <member kind="function">
      <type></type>
      <name>ScopedWriteLock</name>
      <anchorfile>classScopedWriteLock.html</anchorfile>
      <anchor>ab06884cb60e1e7231cc0b16ed10d7004</anchor>
      <arglist>(const ReadWriteLock &amp;lock) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ScopedWriteLock</name>
      <anchorfile>classScopedWriteLock.html</anchorfile>
      <anchor>a108b0a03c0b13ab6378b4ea68618d497</anchor>
      <arglist>() noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ScrollBar</name>
    <filename>classScrollBar.html</filename>
    <base>Component</base>
    <base>AsyncUpdater</base>
    <base protection="private">Timer</base>
    <class kind="class">ScrollBar::Listener</class>
    <class kind="struct">ScrollBar::LookAndFeelMethods</class>
    <member kind="enumeration">
      <type></type>
      <name>ColourIds</name>
      <anchorfile>classScrollBar.html</anchorfile>
      <anchor>a5cdce553497ae1b7fc7fcd3caa805167</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>backgroundColourId</name>
      <anchorfile>classScrollBar.html</anchorfile>
      <anchor>a5cdce553497ae1b7fc7fcd3caa805167aa46e6ad051ab6de778812cdcc86f4d80</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>thumbColourId</name>
      <anchorfile>classScrollBar.html</anchorfile>
      <anchor>a5cdce553497ae1b7fc7fcd3caa805167a3b2685adf5143eb1c382b71cbed677ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>trackColourId</name>
      <anchorfile>classScrollBar.html</anchorfile>
      <anchor>a5cdce553497ae1b7fc7fcd3caa805167ab32d64c0802a57b8c50d138e00a4716e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ScrollBar</name>
      <anchorfile>classScrollBar.html</anchorfile>
      <anchor>acf801150166a66875c170bc93d241ea6</anchor>
      <arglist>(bool isVertical)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ScrollBar</name>
      <anchorfile>classScrollBar.html</anchorfile>
      <anchor>ae27d95eecd029b104b1e8b4795879564</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isVertical</name>
      <anchorfile>classScrollBar.html</anchorfile>
      <anchor>a3e3ffc36d969185c06382f98996de425</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOrientation</name>
      <anchorfile>classScrollBar.html</anchorfile>
      <anchor>a5676d739d423d3daeeffd3d4176ef8ef</anchor>
      <arglist>(bool shouldBeVertical)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAutoHide</name>
      <anchorfile>classScrollBar.html</anchorfile>
      <anchor>a85f03e3ca1a3b16894152c29bd4dcff0</anchor>
      <arglist>(bool shouldHideWhenFullRange)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>autoHides</name>
      <anchorfile>classScrollBar.html</anchorfile>
      <anchor>a2f638b949f8642a3a8675854c811378d</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRangeLimits</name>
      <anchorfile>classScrollBar.html</anchorfile>
      <anchor>ab49f30d1039dfc93fe049ce08a4fb3d4</anchor>
      <arglist>(Range&lt; double &gt; newRangeLimit, NotificationType notification=sendNotificationAsync)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRangeLimits</name>
      <anchorfile>classScrollBar.html</anchorfile>
      <anchor>a96554770c34c267638e126bf110633cd</anchor>
      <arglist>(double minimum, double maximum, NotificationType notification=sendNotificationAsync)</arglist>
    </member>
    <member kind="function">
      <type>Range&lt; double &gt;</type>
      <name>getRangeLimit</name>
      <anchorfile>classScrollBar.html</anchorfile>
      <anchor>ae0d378e1ee665ce796a10a500d97240e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getMinimumRangeLimit</name>
      <anchorfile>classScrollBar.html</anchorfile>
      <anchor>a438704ee01c11fc84e8cbd1f766c3269</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getMaximumRangeLimit</name>
      <anchorfile>classScrollBar.html</anchorfile>
      <anchor>aad13763a765d119a2790a9bf67a7f85a</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setCurrentRange</name>
      <anchorfile>classScrollBar.html</anchorfile>
      <anchor>af807244de9bb5f597c4791ae1d72a722</anchor>
      <arglist>(Range&lt; double &gt; newRange, NotificationType notification=sendNotificationAsync)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCurrentRange</name>
      <anchorfile>classScrollBar.html</anchorfile>
      <anchor>a456e74af8b6a6c5b14bbde6cd3787f3b</anchor>
      <arglist>(double newStart, double newSize, NotificationType notification=sendNotificationAsync)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCurrentRangeStart</name>
      <anchorfile>classScrollBar.html</anchorfile>
      <anchor>a74c085897bb6fd71895e72ea5de21ae4</anchor>
      <arglist>(double newStart, NotificationType notification=sendNotificationAsync)</arglist>
    </member>
    <member kind="function">
      <type>Range&lt; double &gt;</type>
      <name>getCurrentRange</name>
      <anchorfile>classScrollBar.html</anchorfile>
      <anchor>ad146a51e99ac465f05d0196f23573f24</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getCurrentRangeStart</name>
      <anchorfile>classScrollBar.html</anchorfile>
      <anchor>ab7ef22412ff54aa573807a9acbf5b050</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getCurrentRangeSize</name>
      <anchorfile>classScrollBar.html</anchorfile>
      <anchor>a681e8686f439c6cc57a0426136961b5e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSingleStepSize</name>
      <anchorfile>classScrollBar.html</anchorfile>
      <anchor>a4aa3ea30550b8b8a4bea07f1a2ce1ca7</anchor>
      <arglist>(double newSingleStepSize) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>moveScrollbarInSteps</name>
      <anchorfile>classScrollBar.html</anchorfile>
      <anchor>a9dbe4f09c8e652f6e28f6e51b0cd92bb</anchor>
      <arglist>(int howManySteps, NotificationType notification=sendNotificationAsync)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>moveScrollbarInPages</name>
      <anchorfile>classScrollBar.html</anchorfile>
      <anchor>a43c7d84c43879763344f29427b6bca95</anchor>
      <arglist>(int howManyPages, NotificationType notification=sendNotificationAsync)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>scrollToTop</name>
      <anchorfile>classScrollBar.html</anchorfile>
      <anchor>ae3e4bf0e394d03c9fdbdb2025490b1a1</anchor>
      <arglist>(NotificationType notification=sendNotificationAsync)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>scrollToBottom</name>
      <anchorfile>classScrollBar.html</anchorfile>
      <anchor>a4886ebe773db1d88f6f7d22a03275472</anchor>
      <arglist>(NotificationType notification=sendNotificationAsync)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setButtonRepeatSpeed</name>
      <anchorfile>classScrollBar.html</anchorfile>
      <anchor>a65b128f173c754300cdc9db8589d2a36</anchor>
      <arglist>(int initialDelayInMillisecs, int repeatDelayInMillisecs, int minimumDelayInMillisecs=-1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addListener</name>
      <anchorfile>classScrollBar.html</anchorfile>
      <anchor>a231620a2e529f6c1ff846d8b5faccc80</anchor>
      <arglist>(Listener *listener)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeListener</name>
      <anchorfile>classScrollBar.html</anchorfile>
      <anchor>aef360a50049a02ffcac094507267cd5d</anchor>
      <arglist>(Listener *listener)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>keyPressed</name>
      <anchorfile>classScrollBar.html</anchorfile>
      <anchor>aeb97c58ef66f2dd034f6b7bc9ecb7748</anchor>
      <arglist>(const KeyPress &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mouseWheelMove</name>
      <anchorfile>classScrollBar.html</anchorfile>
      <anchor>a308b14576da7818ec9b1032745b33dc3</anchor>
      <arglist>(const MouseEvent &amp;, const MouseWheelDetails &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lookAndFeelChanged</name>
      <anchorfile>classScrollBar.html</anchorfile>
      <anchor>a4afc1abba05d3cc8470ea9d8212aa9bb</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mouseDown</name>
      <anchorfile>classScrollBar.html</anchorfile>
      <anchor>a7f11688cde2eeae737779e1e44fb2b98</anchor>
      <arglist>(const MouseEvent &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mouseDrag</name>
      <anchorfile>classScrollBar.html</anchorfile>
      <anchor>acf0979e09f19392a4b453abcd9295c0d</anchor>
      <arglist>(const MouseEvent &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mouseUp</name>
      <anchorfile>classScrollBar.html</anchorfile>
      <anchor>ab87813c334f9df71538212ba00e6eb55</anchor>
      <arglist>(const MouseEvent &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>paint</name>
      <anchorfile>classScrollBar.html</anchorfile>
      <anchor>a2ecc1047bbc102868b7c97a249425885</anchor>
      <arglist>(Graphics &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resized</name>
      <anchorfile>classScrollBar.html</anchorfile>
      <anchor>a18ed7a67fa5a0641939c03a1186655d7</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>parentHierarchyChanged</name>
      <anchorfile>classScrollBar.html</anchorfile>
      <anchor>a25a885450775c67139b9305663969d14</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ScrollBar::Listener</name>
    <filename>classScrollBar_1_1Listener.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Listener</name>
      <anchorfile>classScrollBar_1_1Listener.html</anchorfile>
      <anchor>aca5324fddadfc52a739beccda52165aa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>scrollBarMoved</name>
      <anchorfile>classScrollBar_1_1Listener.html</anchorfile>
      <anchor>a2fb3f2cdec354939ba4282fc4631fc1f</anchor>
      <arglist>(ScrollBar *scrollBarThatHasMoved, double newRangeStart)=0</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ScrollBar::LookAndFeelMethods</name>
    <filename>structScrollBar_1_1LookAndFeelMethods.html</filename>
  </compound>
  <compound kind="class">
    <name>SelectedItemSet</name>
    <filename>classSelectedItemSet.html</filename>
    <templarg></templarg>
    <base>ChangeBroadcaster</base>
    <member kind="typedef">
      <type>SelectableItemType</type>
      <name>ItemType</name>
      <anchorfile>classSelectedItemSet.html</anchorfile>
      <anchor>adac8d78df1c308ca17aa9cbfada787fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Array&lt; SelectableItemType &gt;</type>
      <name>ItemArray</name>
      <anchorfile>classSelectedItemSet.html</anchorfile>
      <anchor>aa3cd462d404a5449eab0f85f04a08187</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>typedef</type>
      <name>PARAMETER_TYPE</name>
      <anchorfile>classSelectedItemSet.html</anchorfile>
      <anchor>a80e1e81065dbc4cb307bf4dd0d41fedd</anchor>
      <arglist>(SelectableItemType) ParameterType</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SelectedItemSet</name>
      <anchorfile>classSelectedItemSet.html</anchorfile>
      <anchor>a251c959797ab80fe2e7b553a52a6b8c2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SelectedItemSet</name>
      <anchorfile>classSelectedItemSet.html</anchorfile>
      <anchor>aff33ba55b517ab7f38e51714d104bcb1</anchor>
      <arglist>(const ItemArray &amp;items)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SelectedItemSet</name>
      <anchorfile>classSelectedItemSet.html</anchorfile>
      <anchor>a2f5056970053b0153c5661629e254ab5</anchor>
      <arglist>(const SelectedItemSet &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>SelectedItemSet &amp;</type>
      <name>operator=</name>
      <anchorfile>classSelectedItemSet.html</anchorfile>
      <anchor>af86b0e97bd91cbbd0a16bea50e3f7f0d</anchor>
      <arglist>(const SelectedItemSet &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>selectOnly</name>
      <anchorfile>classSelectedItemSet.html</anchorfile>
      <anchor>a5c989a8cd1483b655b948aee86fb768c</anchor>
      <arglist>(ParameterType item)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addToSelection</name>
      <anchorfile>classSelectedItemSet.html</anchorfile>
      <anchor>a8ec6de21f75ccfa083cd702ab027f778</anchor>
      <arglist>(ParameterType item)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addToSelectionBasedOnModifiers</name>
      <anchorfile>classSelectedItemSet.html</anchorfile>
      <anchor>a1fe56a0bfb26c133d824cecf49961537</anchor>
      <arglist>(ParameterType item, ModifierKeys modifiers)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addToSelectionOnMouseDown</name>
      <anchorfile>classSelectedItemSet.html</anchorfile>
      <anchor>ab37144a1dbc919d2fef3b3e496217b03</anchor>
      <arglist>(ParameterType item, ModifierKeys modifiers)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addToSelectionOnMouseUp</name>
      <anchorfile>classSelectedItemSet.html</anchorfile>
      <anchor>a1347c76b84176da73807d6d9883e2cbf</anchor>
      <arglist>(ParameterType item, ModifierKeys modifiers, const bool wasItemDragged, const bool resultOfMouseDownSelectMethod)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deselect</name>
      <anchorfile>classSelectedItemSet.html</anchorfile>
      <anchor>a657dd4d8aa7604f795c0d0d3962b410c</anchor>
      <arglist>(ParameterType item)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deselectAll</name>
      <anchorfile>classSelectedItemSet.html</anchorfile>
      <anchor>a2d8c179287d5afa7e4ef0318ce779813</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumSelected</name>
      <anchorfile>classSelectedItemSet.html</anchorfile>
      <anchor>adaf7fb93ca30bc24a130c7601cb83c49</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>SelectableItemType</type>
      <name>getSelectedItem</name>
      <anchorfile>classSelectedItemSet.html</anchorfile>
      <anchor>a79f1a92feea179f19ddf549e27526706</anchor>
      <arglist>(const int index) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSelected</name>
      <anchorfile>classSelectedItemSet.html</anchorfile>
      <anchor>a431e7bbc3d316e1822596563b49adc73</anchor>
      <arglist>(ParameterType item) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const ItemArray &amp;</type>
      <name>getItemArray</name>
      <anchorfile>classSelectedItemSet.html</anchorfile>
      <anchor>a8348584f57e2599ef3074f21faffc27b</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>SelectableItemType *</type>
      <name>begin</name>
      <anchorfile>classSelectedItemSet.html</anchorfile>
      <anchor>a8820df35449af865aaecf107cad4a653</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>SelectableItemType *</type>
      <name>end</name>
      <anchorfile>classSelectedItemSet.html</anchorfile>
      <anchor>aea029db3e198aebd6a58a8e9ecd9b779</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>itemSelected</name>
      <anchorfile>classSelectedItemSet.html</anchorfile>
      <anchor>a251fa7c411d226f354f9aa8153d20d4d</anchor>
      <arglist>(SelectableItemType)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>itemDeselected</name>
      <anchorfile>classSelectedItemSet.html</anchorfile>
      <anchor>aba708cd0efbae505c9be92c5179c2007</anchor>
      <arglist>(SelectableItemType)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>changed</name>
      <anchorfile>classSelectedItemSet.html</anchorfile>
      <anchor>ab9120f4e10142aadbeecb2347b0eb62f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>changed</name>
      <anchorfile>classSelectedItemSet.html</anchorfile>
      <anchor>a76ded0d9f2a1d292879462c867c36228</anchor>
      <arglist>(const bool synchronous)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SettableTooltipClient</name>
    <filename>classSettableTooltipClient.html</filename>
    <base>TooltipClient</base>
  </compound>
  <compound kind="class">
    <name>SHA256</name>
    <filename>classSHA256.html</filename>
    <member kind="function">
      <type></type>
      <name>SHA256</name>
      <anchorfile>classSHA256.html</anchorfile>
      <anchor>aca9f9e18f0fcec4403f7ba7a34d7d997</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SHA256</name>
      <anchorfile>classSHA256.html</anchorfile>
      <anchor>ada631ca14154b07d447d9acf4316fe0b</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SHA256</name>
      <anchorfile>classSHA256.html</anchorfile>
      <anchor>a78c36f04e7b93bceb284bc6fa1d4dc83</anchor>
      <arglist>(const SHA256 &amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>SHA256 &amp;</type>
      <name>operator=</name>
      <anchorfile>classSHA256.html</anchorfile>
      <anchor>ab942ef9ca0bda08939d963b9f8b1f8fa</anchor>
      <arglist>(const SHA256 &amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SHA256</name>
      <anchorfile>classSHA256.html</anchorfile>
      <anchor>a748c9b655d20cc6f231b1e6ce66fb668</anchor>
      <arglist>(const MemoryBlock &amp;data)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SHA256</name>
      <anchorfile>classSHA256.html</anchorfile>
      <anchor>a91462d2740994a2378bafd26e0c9ea17</anchor>
      <arglist>(const void *data, size_t numBytes)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SHA256</name>
      <anchorfile>classSHA256.html</anchorfile>
      <anchor>aa5808aa761f581dad5ecd3994079405a</anchor>
      <arglist>(InputStream &amp;input, int64 maxBytesToRead=-1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SHA256</name>
      <anchorfile>classSHA256.html</anchorfile>
      <anchor>a41cdcca706b6c1534d8e60ba4291f2b1</anchor>
      <arglist>(const File &amp;file)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SHA256</name>
      <anchorfile>classSHA256.html</anchorfile>
      <anchor>a2de1671e1b0243f5177dae7e8349cdbd</anchor>
      <arglist>(CharPointer_UTF8 utf8Text) noexcept</arglist>
    </member>
    <member kind="function">
      <type>MemoryBlock</type>
      <name>getRawData</name>
      <anchorfile>classSHA256.html</anchorfile>
      <anchor>ac77dbaeb150e8441079e8a47deafeea3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>toHexString</name>
      <anchorfile>classSHA256.html</anchorfile>
      <anchor>a0256967ecc348e2233ad3769db27cebf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classSHA256.html</anchorfile>
      <anchor>ae18a8292c05d1896e4e54922d5b7ae83</anchor>
      <arglist>(const SHA256 &amp;) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classSHA256.html</anchorfile>
      <anchor>a3954262bdd5defd5c552a7d0fb6373fc</anchor>
      <arglist>(const SHA256 &amp;) const noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ShapeButton</name>
    <filename>classShapeButton.html</filename>
    <base>Button</base>
    <member kind="function">
      <type></type>
      <name>ShapeButton</name>
      <anchorfile>classShapeButton.html</anchorfile>
      <anchor>a573b05ed6a8617b7fb18d12405f9a177</anchor>
      <arglist>(const String &amp;name, Colour normalColour, Colour overColour, Colour downColour)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ShapeButton</name>
      <anchorfile>classShapeButton.html</anchorfile>
      <anchor>a5a3275bba2b41d705d107236ea28e251</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setShape</name>
      <anchorfile>classShapeButton.html</anchorfile>
      <anchor>a40b9a0a8f4a181b06e88bb51b311ec9c</anchor>
      <arglist>(const Path &amp;newShape, bool resizeNowToFitThisShape, bool maintainShapeProportions, bool hasDropShadow)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setColours</name>
      <anchorfile>classShapeButton.html</anchorfile>
      <anchor>adb8974cb14c05cce7cbf30472dbf5c38</anchor>
      <arglist>(Colour normalColour, Colour overColour, Colour downColour)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOnColours</name>
      <anchorfile>classShapeButton.html</anchorfile>
      <anchor>aa23519c6e17dd8ef7818e1a4ce933e28</anchor>
      <arglist>(Colour normalColourOn, Colour overColourOn, Colour downColourOn)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>shouldUseOnColours</name>
      <anchorfile>classShapeButton.html</anchorfile>
      <anchor>a9a8206acbcd8632ac457d73e2104e3a7</anchor>
      <arglist>(bool shouldUse)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOutline</name>
      <anchorfile>classShapeButton.html</anchorfile>
      <anchor>aecc8f721933ecefaec0288af46d9bf6f</anchor>
      <arglist>(Colour outlineColour, float outlineStrokeWidth)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBorderSize</name>
      <anchorfile>classShapeButton.html</anchorfile>
      <anchor>ab0b001cceb23beeade26522d3cdfc9c2</anchor>
      <arglist>(BorderSize&lt; int &gt; border)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>paintButton</name>
      <anchorfile>classShapeButton.html</anchorfile>
      <anchor>a504695f44cc6eb0201a4b1c463e9d284</anchor>
      <arglist>(Graphics &amp;, bool isMouseOverButton, bool isButtonDown) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SharedResourcePointer</name>
    <filename>classSharedResourcePointer.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>SharedResourcePointer</name>
      <anchorfile>classSharedResourcePointer.html</anchorfile>
      <anchor>a37f5da91a94a3f34a8d467a11b1db2ae</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SharedResourcePointer</name>
      <anchorfile>classSharedResourcePointer.html</anchorfile>
      <anchor>ae0e471d40bbf73438dec6480935341bf</anchor>
      <arglist>(const SharedResourcePointer &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SharedResourcePointer</name>
      <anchorfile>classSharedResourcePointer.html</anchorfile>
      <anchor>a47c04d52fa4de0490c3d3873dbc2ecf2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator SharedObjectType *</name>
      <anchorfile>classSharedResourcePointer.html</anchorfile>
      <anchor>a5c266850a363bc4fb9ee2079d8c96397</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>SharedObjectType &amp;</type>
      <name>get</name>
      <anchorfile>classSharedResourcePointer.html</anchorfile>
      <anchor>aacfb2015a9da695e57ea6460188c6146</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>SharedObjectType &amp;</type>
      <name>getObject</name>
      <anchorfile>classSharedResourcePointer.html</anchorfile>
      <anchor>a34dc4311e7808984ef5bd796c57645c8</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>SharedObjectType *</type>
      <name>operator-&gt;</name>
      <anchorfile>classSharedResourcePointer.html</anchorfile>
      <anchor>ac66baf5a23724ae4da705d4f31008d63</anchor>
      <arglist>() const noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SingleThreadedReferenceCountedObject</name>
    <filename>classSingleThreadedReferenceCountedObject.html</filename>
  </compound>
  <compound kind="class">
    <name>Slider</name>
    <filename>classSlider.html</filename>
    <base>Component</base>
    <base>SettableTooltipClient</base>
    <class kind="class">Slider::Listener</class>
    <class kind="struct">Slider::LookAndFeelMethods</class>
    <class kind="struct">Slider::RotaryParameters</class>
    <class kind="struct">Slider::SliderLayout</class>
    <member kind="enumeration">
      <type></type>
      <name>SliderStyle</name>
      <anchorfile>classSlider.html</anchorfile>
      <anchor>af1caee82552143dd9ff0fc9f0cdc0888</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>LinearHorizontal</name>
      <anchorfile>classSlider.html</anchorfile>
      <anchor>af1caee82552143dd9ff0fc9f0cdc0888a0fa5cefcd508c8f26ac9a458272844f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>LinearVertical</name>
      <anchorfile>classSlider.html</anchorfile>
      <anchor>af1caee82552143dd9ff0fc9f0cdc0888a31f9134048fa90fbc4a72b69c6f553d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>LinearBar</name>
      <anchorfile>classSlider.html</anchorfile>
      <anchor>af1caee82552143dd9ff0fc9f0cdc0888a0092c810419dab80d4692363d9564c5d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>LinearBarVertical</name>
      <anchorfile>classSlider.html</anchorfile>
      <anchor>af1caee82552143dd9ff0fc9f0cdc0888a8a942813d4d457e0344e725bd9faffc5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>Rotary</name>
      <anchorfile>classSlider.html</anchorfile>
      <anchor>af1caee82552143dd9ff0fc9f0cdc0888a2043125f6f74c8ceae38baf3fb514f18</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>RotaryHorizontalDrag</name>
      <anchorfile>classSlider.html</anchorfile>
      <anchor>af1caee82552143dd9ff0fc9f0cdc0888a8c359e2cb456e39665bec067273df5fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>RotaryVerticalDrag</name>
      <anchorfile>classSlider.html</anchorfile>
      <anchor>af1caee82552143dd9ff0fc9f0cdc0888a46ac50fdae2ac4df9a2f3ad630589224</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>RotaryHorizontalVerticalDrag</name>
      <anchorfile>classSlider.html</anchorfile>
      <anchor>af1caee82552143dd9ff0fc9f0cdc0888a6d72c2ed67c43d22785fe271d3684075</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>IncDecButtons</name>
      <anchorfile>classSlider.html</anchorfile>
      <anchor>af1caee82552143dd9ff0fc9f0cdc0888adcb7bc12a443e3c6cdf598ab3c5e2171</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>TwoValueHorizontal</name>
      <anchorfile>classSlider.html</anchorfile>
      <anchor>af1caee82552143dd9ff0fc9f0cdc0888a2ce77695813bb317c2d1863d2e71213b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>TwoValueVertical</name>
      <anchorfile>classSlider.html</anchorfile>
      <anchor>af1caee82552143dd9ff0fc9f0cdc0888a7477c3163edc14c8740d464e523e5ac8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>ThreeValueHorizontal</name>
      <anchorfile>classSlider.html</anchorfile>
      <anchor>af1caee82552143dd9ff0fc9f0cdc0888ad74f46a4848b6c1b3e3cc59da103f504</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>ThreeValueVertical</name>
      <anchorfile>classSlider.html</anchorfile>
      <anchor>af1caee82552143dd9ff0fc9f0cdc0888aa2c50364a9dd891a0e5e8022570c8e13</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>TextEntryBoxPosition</name>
      <anchorfile>classSlider.html</anchorfile>
      <anchor>ab6d7dff67151c029b9cb53fc40b4412f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>NoTextBox</name>
      <anchorfile>classSlider.html</anchorfile>
      <anchor>ab6d7dff67151c029b9cb53fc40b4412fad0badf0233a956017621f284e3e30fc2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>TextBoxLeft</name>
      <anchorfile>classSlider.html</anchorfile>
      <anchor>ab6d7dff67151c029b9cb53fc40b4412fa66ab77e721cd147f54097b8bed8c6d35</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>TextBoxRight</name>
      <anchorfile>classSlider.html</anchorfile>
      <anchor>ab6d7dff67151c029b9cb53fc40b4412fae50f30d7062c602b8f8b465346f79a3f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>TextBoxAbove</name>
      <anchorfile>classSlider.html</anchorfile>
      <anchor>ab6d7dff67151c029b9cb53fc40b4412fa382d14dbd222edf95fdf2836acc33fe9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>TextBoxBelow</name>
      <anchorfile>classSlider.html</anchorfile>
      <anchor>ab6d7dff67151c029b9cb53fc40b4412fa9a20474ba0850feb957b8cea91c6a456</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>DragMode</name>
      <anchorfile>classSlider.html</anchorfile>
      <anchor>a42fd96ac0f5dca7e6942022c9a75cbde</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>notDragging</name>
      <anchorfile>classSlider.html</anchorfile>
      <anchor>a42fd96ac0f5dca7e6942022c9a75cbdea4ac7f9448a8823e0537588615cf71271</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>absoluteDrag</name>
      <anchorfile>classSlider.html</anchorfile>
      <anchor>a42fd96ac0f5dca7e6942022c9a75cbdead37417ff73089a45f77534d75e1a1647</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>velocityDrag</name>
      <anchorfile>classSlider.html</anchorfile>
      <anchor>a42fd96ac0f5dca7e6942022c9a75cbdeab6cd67202d007534532a43f4eeeef153</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>IncDecButtonMode</name>
      <anchorfile>classSlider.html</anchorfile>
      <anchor>a0ceaddd29269b6ec5a41f35bbb2ff74a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>incDecButtonsNotDraggable</name>
      <anchorfile>classSlider.html</anchorfile>
      <anchor>a0ceaddd29269b6ec5a41f35bbb2ff74aabc5b1657cd94c709c9086a463b1d7094</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>incDecButtonsDraggable_AutoDirection</name>
      <anchorfile>classSlider.html</anchorfile>
      <anchor>a0ceaddd29269b6ec5a41f35bbb2ff74aa4877104d807899962ee036571ca93f52</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>incDecButtonsDraggable_Horizontal</name>
      <anchorfile>classSlider.html</anchorfile>
      <anchor>a0ceaddd29269b6ec5a41f35bbb2ff74aa19d0b1bdc13c1c673e382045c023868b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>incDecButtonsDraggable_Vertical</name>
      <anchorfile>classSlider.html</anchorfile>
      <anchor>a0ceaddd29269b6ec5a41f35bbb2ff74aae8e58e3ebb5b43e67e7de0071ba68ea5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>ColourIds</name>
      <anchorfile>classSlider.html</anchorfile>
      <anchor>a1012002c53381ccc7c1fe7e604a75f44</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>backgroundColourId</name>
      <anchorfile>classSlider.html</anchorfile>
      <anchor>a1012002c53381ccc7c1fe7e604a75f44a7479f5409d832c1fc97697450c00bb57</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>thumbColourId</name>
      <anchorfile>classSlider.html</anchorfile>
      <anchor>a1012002c53381ccc7c1fe7e604a75f44aee563b22e0033b0ed4f38e5296889835</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>trackColourId</name>
      <anchorfile>classSlider.html</anchorfile>
      <anchor>a1012002c53381ccc7c1fe7e604a75f44a1a7a91f54b703cf78f028edc0ed7786b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>rotarySliderFillColourId</name>
      <anchorfile>classSlider.html</anchorfile>
      <anchor>a1012002c53381ccc7c1fe7e604a75f44ad6ece790078ea74733dfa2a0d99905a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>rotarySliderOutlineColourId</name>
      <anchorfile>classSlider.html</anchorfile>
      <anchor>a1012002c53381ccc7c1fe7e604a75f44abc955b1201e3f12967cb3ff472ba86d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>textBoxTextColourId</name>
      <anchorfile>classSlider.html</anchorfile>
      <anchor>a1012002c53381ccc7c1fe7e604a75f44a6e5d3f5c91a314d510d9fc553c881e23</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>textBoxBackgroundColourId</name>
      <anchorfile>classSlider.html</anchorfile>
      <anchor>a1012002c53381ccc7c1fe7e604a75f44ac1eb5559c6e1c8ef115259ceabfd771b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>textBoxHighlightColourId</name>
      <anchorfile>classSlider.html</anchorfile>
      <anchor>a1012002c53381ccc7c1fe7e604a75f44aa70515f09dbc0ca6a7250100b35e47f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>textBoxOutlineColourId</name>
      <anchorfile>classSlider.html</anchorfile>
      <anchor>a1012002c53381ccc7c1fe7e604a75f44ae65fdadb3e607a23c074074d64a61ffc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Slider</name>
      <anchorfile>classSlider.html</anchorfile>
      <anchor>a535033fada8e25ef7291d2a52e6e437b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Slider</name>
      <anchorfile>classSlider.html</anchorfile>
      <anchor>ae2c907adc5de6f127138f3f869f683ae</anchor>
      <arglist>(const String &amp;componentName)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Slider</name>
      <anchorfile>classSlider.html</anchorfile>
      <anchor>ad0d654d54372b23671bfc28f179c339d</anchor>
      <arglist>(SliderStyle style, TextEntryBoxPosition textBoxPosition)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Slider</name>
      <anchorfile>classSlider.html</anchorfile>
      <anchor>aaca12abbe07a83f925d66339aa332028</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSliderStyle</name>
      <anchorfile>classSlider.html</anchorfile>
      <anchor>a6b6917dd3753c7552778977733f0b9ef</anchor>
      <arglist>(SliderStyle newStyle)</arglist>
    </member>
    <member kind="function">
      <type>SliderStyle</type>
      <name>getSliderStyle</name>
      <anchorfile>classSlider.html</anchorfile>
      <anchor>a5fe7b4917ead20eb9c180de81c46b41f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRotaryParameters</name>
      <anchorfile>classSlider.html</anchorfile>
      <anchor>a37d0dd9e0149ecb63c10d8bbb64d7188</anchor>
      <arglist>(RotaryParameters newParameters) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRotaryParameters</name>
      <anchorfile>classSlider.html</anchorfile>
      <anchor>a19ec1c1f7564884be94ecde8dc56f0ab</anchor>
      <arglist>(float startAngleRadians, float endAngleRadians, bool stopAtEnd) noexcept</arglist>
    </member>
    <member kind="function">
      <type>RotaryParameters</type>
      <name>getRotaryParameters</name>
      <anchorfile>classSlider.html</anchorfile>
      <anchor>ac72f9e6603bb35fd94fdba5f8536827c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMouseDragSensitivity</name>
      <anchorfile>classSlider.html</anchorfile>
      <anchor>a4bdd8cdb79dcdb06b1e97a21ff2a6c4b</anchor>
      <arglist>(int distanceForFullScaleDrag)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getMouseDragSensitivity</name>
      <anchorfile>classSlider.html</anchorfile>
      <anchor>a9bf33100be78b96ce03cd2c50f613cb8</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVelocityBasedMode</name>
      <anchorfile>classSlider.html</anchorfile>
      <anchor>a59b616e79738d3adb83093dc532822d0</anchor>
      <arglist>(bool isVelocityBased)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getVelocityBasedMode</name>
      <anchorfile>classSlider.html</anchorfile>
      <anchor>a807ee244e5a714a8db257e102ec5496d</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVelocityModeParameters</name>
      <anchorfile>classSlider.html</anchorfile>
      <anchor>add6fe31d11f1c783aafeca6294b13858</anchor>
      <arglist>(double sensitivity=1.0, int threshold=1, double offset=0.0, bool userCanPressKeyToSwapMode=true)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getVelocitySensitivity</name>
      <anchorfile>classSlider.html</anchorfile>
      <anchor>a547bab3deb827a47e12d90a47c957c10</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getVelocityThreshold</name>
      <anchorfile>classSlider.html</anchorfile>
      <anchor>a52d5cbe2e3676060cdb58cea2b797f24</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getVelocityOffset</name>
      <anchorfile>classSlider.html</anchorfile>
      <anchor>adc2df4c66975945ef9aca9eeb350ee86</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getVelocityModeIsSwappable</name>
      <anchorfile>classSlider.html</anchorfile>
      <anchor>af15caa58f5f70c0f9b52aa5d07604580</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSkewFactor</name>
      <anchorfile>classSlider.html</anchorfile>
      <anchor>aba8fe3610e7198bd4c1f2804736bfbf2</anchor>
      <arglist>(double factor, bool symmetricSkew=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSkewFactorFromMidPoint</name>
      <anchorfile>classSlider.html</anchorfile>
      <anchor>a2d948c662c1f636810d3125d8b3f0d47</anchor>
      <arglist>(double sliderValueToShowAtMidPoint)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getSkewFactor</name>
      <anchorfile>classSlider.html</anchorfile>
      <anchor>a803021cfc12e4ff54e9b598dabdd8761</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSymmetricSkew</name>
      <anchorfile>classSlider.html</anchorfile>
      <anchor>a015f98d91fd3f30d74d7f3cce2e9996c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIncDecButtonsMode</name>
      <anchorfile>classSlider.html</anchorfile>
      <anchor>a188fa57db0d90f931529dc367e76b9f5</anchor>
      <arglist>(IncDecButtonMode mode)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTextBoxStyle</name>
      <anchorfile>classSlider.html</anchorfile>
      <anchor>a5bc748a21e72fe14153bc9fe5ac03e77</anchor>
      <arglist>(TextEntryBoxPosition newPosition, bool isReadOnly, int textEntryBoxWidth, int textEntryBoxHeight)</arglist>
    </member>
    <member kind="function">
      <type>TextEntryBoxPosition</type>
      <name>getTextBoxPosition</name>
      <anchorfile>classSlider.html</anchorfile>
      <anchor>a6910e59cbc2aa25a8499a9c7e6593bb1</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getTextBoxWidth</name>
      <anchorfile>classSlider.html</anchorfile>
      <anchor>aaa9719f67d8c819957a5262f2430c4a5</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getTextBoxHeight</name>
      <anchorfile>classSlider.html</anchorfile>
      <anchor>a8258ee0e1222f3e02a696243a3468578</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTextBoxIsEditable</name>
      <anchorfile>classSlider.html</anchorfile>
      <anchor>a59e3fd9bc86e488070c12889747e7bbe</anchor>
      <arglist>(bool shouldBeEditable)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isTextBoxEditable</name>
      <anchorfile>classSlider.html</anchorfile>
      <anchor>acd1590a901ef4a8240c8aae05c52e824</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>showTextBox</name>
      <anchorfile>classSlider.html</anchorfile>
      <anchor>a3a8e500dc05a6afc52fc61f9001e7a1f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>hideTextBox</name>
      <anchorfile>classSlider.html</anchorfile>
      <anchor>a0780c7da80f4d487703e8247e92bea21</anchor>
      <arglist>(bool discardCurrentEditorContents)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>classSlider.html</anchorfile>
      <anchor>a430a5c4e56b39dd622f5800f787e0822</anchor>
      <arglist>(double newValue, NotificationType notification=sendNotificationAsync)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getValue</name>
      <anchorfile>classSlider.html</anchorfile>
      <anchor>ace4fffe8ad4e2b2c4cd2cda06dedc848</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Value &amp;</type>
      <name>getValueObject</name>
      <anchorfile>classSlider.html</anchorfile>
      <anchor>a40ceae44fd94f912fc10d8a5803b9b01</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRange</name>
      <anchorfile>classSlider.html</anchorfile>
      <anchor>a9fbc23e67deb4a18d172c357a7cff14c</anchor>
      <arglist>(double newMinimum, double newMaximum, double newInterval=0)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getMaximum</name>
      <anchorfile>classSlider.html</anchorfile>
      <anchor>a9eb087c868550c699da26ee3df9ecd68</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getMinimum</name>
      <anchorfile>classSlider.html</anchorfile>
      <anchor>acb7c7f0ca87e34da986ac7f9e732bab1</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getInterval</name>
      <anchorfile>classSlider.html</anchorfile>
      <anchor>a8b666bae0c68ff8af0bdb2381b97e89e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getMinValue</name>
      <anchorfile>classSlider.html</anchorfile>
      <anchor>a518e19d02009336a5bbe3b9df1f8bd90</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Value &amp;</type>
      <name>getMinValueObject</name>
      <anchorfile>classSlider.html</anchorfile>
      <anchor>adeedf0e9e8a3402e7003bd637f04e167</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMinValue</name>
      <anchorfile>classSlider.html</anchorfile>
      <anchor>a337ba6b2c740751f5065a190e83dbd87</anchor>
      <arglist>(double newValue, NotificationType notification=sendNotificationAsync, bool allowNudgingOfOtherValues=false)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getMaxValue</name>
      <anchorfile>classSlider.html</anchorfile>
      <anchor>aae0148780396fffa80ef45bfa5e21f0d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Value &amp;</type>
      <name>getMaxValueObject</name>
      <anchorfile>classSlider.html</anchorfile>
      <anchor>acb8fa9ed28c5760bb095b74086a31eac</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaxValue</name>
      <anchorfile>classSlider.html</anchorfile>
      <anchor>a94c2b6bd752081eb344e390a39a31363</anchor>
      <arglist>(double newValue, NotificationType notification=sendNotificationAsync, bool allowNudgingOfOtherValues=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMinAndMaxValues</name>
      <anchorfile>classSlider.html</anchorfile>
      <anchor>add6aae8aca26cf846796e6bf67363ac2</anchor>
      <arglist>(double newMinValue, double newMaxValue, NotificationType notification=sendNotificationAsync)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addListener</name>
      <anchorfile>classSlider.html</anchorfile>
      <anchor>a261f4886ed27ab0f94b1cfb6e9f44011</anchor>
      <arglist>(Listener *listener)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeListener</name>
      <anchorfile>classSlider.html</anchorfile>
      <anchor>a846b68f0fe1624563399e540e38b4609</anchor>
      <arglist>(Listener *listener)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDoubleClickReturnValue</name>
      <anchorfile>classSlider.html</anchorfile>
      <anchor>ac22497e650b01ac15fcc992a2494e272</anchor>
      <arglist>(bool shouldDoubleClickBeEnabled, double valueToSetOnDoubleClick)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getDoubleClickReturnValue</name>
      <anchorfile>classSlider.html</anchorfile>
      <anchor>accd2423167e9b726cb006848b96ab351</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isDoubleClickReturnEnabled</name>
      <anchorfile>classSlider.html</anchorfile>
      <anchor>ad603b9b073cd1a8df35de2884c22f630</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setChangeNotificationOnlyOnRelease</name>
      <anchorfile>classSlider.html</anchorfile>
      <anchor>ab41e52ab8941619028a8d57103975029</anchor>
      <arglist>(bool onlyNotifyOnRelease)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSliderSnapsToMousePosition</name>
      <anchorfile>classSlider.html</anchorfile>
      <anchor>acf58b7346a74cfc0a8c809567836df61</anchor>
      <arglist>(bool shouldSnapToMouse)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getSliderSnapsToMousePosition</name>
      <anchorfile>classSlider.html</anchorfile>
      <anchor>a8548287936ea455e23036222367df4aa</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPopupDisplayEnabled</name>
      <anchorfile>classSlider.html</anchorfile>
      <anchor>a0d27965d2fde911bd2a5032402be843f</anchor>
      <arglist>(bool isEnabled, Component *parentComponentToUse)</arglist>
    </member>
    <member kind="function">
      <type>Component *</type>
      <name>getCurrentPopupDisplay</name>
      <anchorfile>classSlider.html</anchorfile>
      <anchor>a1b264e454184d57c69e1ab986eb15d7e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPopupMenuEnabled</name>
      <anchorfile>classSlider.html</anchorfile>
      <anchor>a5dc957ba7c141dab961f0b3d46d46bb7</anchor>
      <arglist>(bool menuEnabled)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setScrollWheelEnabled</name>
      <anchorfile>classSlider.html</anchorfile>
      <anchor>a0061698886ebcc9e2fc9233398383a3c</anchor>
      <arglist>(bool enabled)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getThumbBeingDragged</name>
      <anchorfile>classSlider.html</anchorfile>
      <anchor>aed1a4658f31db573dd8073afb603cef9</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>startedDragging</name>
      <anchorfile>classSlider.html</anchorfile>
      <anchor>a3f63934b274f0f49bcd38530ca3de80b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>stoppedDragging</name>
      <anchorfile>classSlider.html</anchorfile>
      <anchor>ada61c1382dfcc8a956029f883ad5f83e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>valueChanged</name>
      <anchorfile>classSlider.html</anchorfile>
      <anchor>a5988f8e1b98cb0b28330522117d46c1c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getValueFromText</name>
      <anchorfile>classSlider.html</anchorfile>
      <anchor>a532774d3294a058784f7d4291b33b720</anchor>
      <arglist>(const String &amp;text)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual String</type>
      <name>getTextFromValue</name>
      <anchorfile>classSlider.html</anchorfile>
      <anchor>a5a1693166d0815f812202b1a3a6eb202</anchor>
      <arglist>(double value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTextValueSuffix</name>
      <anchorfile>classSlider.html</anchorfile>
      <anchor>ac416a101b5d9a504f61e2f50dc593f61</anchor>
      <arglist>(const String &amp;suffix)</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>getTextValueSuffix</name>
      <anchorfile>classSlider.html</anchorfile>
      <anchor>af40e1d4c27e5414bf21e838b073940df</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumDecimalPlacesToDisplay</name>
      <anchorfile>classSlider.html</anchorfile>
      <anchor>aa5bb046cc2276f034f8ad8a67054057b</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>proportionOfLengthToValue</name>
      <anchorfile>classSlider.html</anchorfile>
      <anchor>a6762e2206ad7e41cb8d6189b244d91f5</anchor>
      <arglist>(double proportion)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>valueToProportionOfLength</name>
      <anchorfile>classSlider.html</anchorfile>
      <anchor>a0549ec352b8dca4ca4ba1afa43263370</anchor>
      <arglist>(double value)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getPositionOfValue</name>
      <anchorfile>classSlider.html</anchorfile>
      <anchor>a910bc26e8d0153422a92147b25c33c70</anchor>
      <arglist>(double value) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>snapValue</name>
      <anchorfile>classSlider.html</anchorfile>
      <anchor>aa8ce89d390ea3de9ab58aae59db1d03b</anchor>
      <arglist>(double attemptedValue, DragMode dragMode)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateText</name>
      <anchorfile>classSlider.html</anchorfile>
      <anchor>acec04f6f7cca814b66c23ae5cf4a7b6a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isHorizontal</name>
      <anchorfile>classSlider.html</anchorfile>
      <anchor>a72da5afa45bfdcc642a53eb04c993f1e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isVertical</name>
      <anchorfile>classSlider.html</anchorfile>
      <anchor>a105d005078031e28d8e23d52d194bcde</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isRotary</name>
      <anchorfile>classSlider.html</anchorfile>
      <anchor>adc48bff087378f8be0e6164e449d655e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isBar</name>
      <anchorfile>classSlider.html</anchorfile>
      <anchor>a61db1cd48644cbe6be544924e5d06f60</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>paint</name>
      <anchorfile>classSlider.html</anchorfile>
      <anchor>a443749317634c0080d522d090ae991a5</anchor>
      <arglist>(Graphics &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resized</name>
      <anchorfile>classSlider.html</anchorfile>
      <anchor>a1aaa7af33f6f90a40fbf70a2bbdebc6d</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mouseDown</name>
      <anchorfile>classSlider.html</anchorfile>
      <anchor>a66f2c67d6de570fa0d123ae2b9b394f7</anchor>
      <arglist>(const MouseEvent &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mouseUp</name>
      <anchorfile>classSlider.html</anchorfile>
      <anchor>a064b6ee8d376cbce87b940b9d17c2254</anchor>
      <arglist>(const MouseEvent &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mouseDrag</name>
      <anchorfile>classSlider.html</anchorfile>
      <anchor>a6e117b6ba93f9a1954c52be4b4dfc873</anchor>
      <arglist>(const MouseEvent &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mouseDoubleClick</name>
      <anchorfile>classSlider.html</anchorfile>
      <anchor>a51130e5125d8483fc45fe32c958bf0cc</anchor>
      <arglist>(const MouseEvent &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mouseWheelMove</name>
      <anchorfile>classSlider.html</anchorfile>
      <anchor>a9b7ee511b24ee74065f92820423f0c46</anchor>
      <arglist>(const MouseEvent &amp;, const MouseWheelDetails &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>modifierKeysChanged</name>
      <anchorfile>classSlider.html</anchorfile>
      <anchor>a50bfc1f4bc764cd7db7d25abed9e0198</anchor>
      <arglist>(const ModifierKeys &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lookAndFeelChanged</name>
      <anchorfile>classSlider.html</anchorfile>
      <anchor>a70afdb08e7efc4a15e9a6969fae77a63</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enablementChanged</name>
      <anchorfile>classSlider.html</anchorfile>
      <anchor>a5d5dddfd7d8f254d9097724493878cc1</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>focusOfChildComponentChanged</name>
      <anchorfile>classSlider.html</anchorfile>
      <anchor>a23002c35f14b921ec01069536c0aaef3</anchor>
      <arglist>(FocusChangeType) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>colourChanged</name>
      <anchorfile>classSlider.html</anchorfile>
      <anchor>a35de5e477dd21199f8ed3eb9c0b05f72</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Slider::Listener</name>
    <filename>classSlider_1_1Listener.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>sliderValueChanged</name>
      <anchorfile>classSlider_1_1Listener.html</anchorfile>
      <anchor>a127bfe68835dc3e584cf3c2a427a27e5</anchor>
      <arglist>(Slider *slider)=0</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Slider::LookAndFeelMethods</name>
    <filename>structSlider_1_1LookAndFeelMethods.html</filename>
  </compound>
  <compound kind="struct">
    <name>Slider::RotaryParameters</name>
    <filename>structSlider_1_1RotaryParameters.html</filename>
    <member kind="variable">
      <type>float</type>
      <name>startAngleRadians</name>
      <anchorfile>structSlider_1_1RotaryParameters.html</anchorfile>
      <anchor>a1b4090a3f77b0183b1c847525f4edb8a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>endAngleRadians</name>
      <anchorfile>structSlider_1_1RotaryParameters.html</anchorfile>
      <anchor>a4d099642ed3116c61391839b2a79bd49</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>stopAtEnd</name>
      <anchorfile>structSlider_1_1RotaryParameters.html</anchorfile>
      <anchor>a2e705ed5eb148f3f3eb1e89a72ff634f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Slider::SliderLayout</name>
    <filename>structSlider_1_1SliderLayout.html</filename>
    <member kind="variable">
      <type>Rectangle&lt; int &gt;</type>
      <name>sliderBounds</name>
      <anchorfile>structSlider_1_1SliderLayout.html</anchorfile>
      <anchor>a40ee690d7af050cd1d59b75142234817</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Rectangle&lt; int &gt;</type>
      <name>textBoxBounds</name>
      <anchorfile>structSlider_1_1SliderLayout.html</anchorfile>
      <anchor>ac5d776afbb9146ffd43a15f48aedaf24</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SliderPropertyComponent</name>
    <filename>classSliderPropertyComponent.html</filename>
    <base>PropertyComponent</base>
    <base protection="private">Slider::Listener</base>
    <member kind="function">
      <type></type>
      <name>SliderPropertyComponent</name>
      <anchorfile>classSliderPropertyComponent.html</anchorfile>
      <anchor>a320068e8e0b48b911db50f26b91028d3</anchor>
      <arglist>(const Value &amp;valueToControl, const String &amp;propertyName, double rangeMin, double rangeMax, double interval, double skewFactor=1.0, bool symmetricSkew=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SliderPropertyComponent</name>
      <anchorfile>classSliderPropertyComponent.html</anchorfile>
      <anchor>a62dca91705c2af7c440327ebf4f9b627</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setValue</name>
      <anchorfile>classSliderPropertyComponent.html</anchorfile>
      <anchor>a9b4e58d9a44de072a3674dbdbd1366f0</anchor>
      <arglist>(double newValue)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getValue</name>
      <anchorfile>classSliderPropertyComponent.html</anchorfile>
      <anchor>ae199f29142e97f6f1fd4b4987d17500f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>refresh</name>
      <anchorfile>classSliderPropertyComponent.html</anchorfile>
      <anchor>ac8bfacd03f933004c83a8dd409636656</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sliderValueChanged</name>
      <anchorfile>classSliderPropertyComponent.html</anchorfile>
      <anchor>a7cd9f4d3a7c681e642b4d461302a55ac</anchor>
      <arglist>(Slider *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SliderPropertyComponent</name>
      <anchorfile>classSliderPropertyComponent.html</anchorfile>
      <anchor>aa92f3eca05236da57da2eb6b10579321</anchor>
      <arglist>(const String &amp;propertyName, double rangeMin, double rangeMax, double interval, double skewFactor=1.0, bool symmetricSkew=false)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Slider</type>
      <name>slider</name>
      <anchorfile>classSliderPropertyComponent.html</anchorfile>
      <anchor>ae379d1c2bbcdab0d687697c9dfc36f9b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoftwareImageType</name>
    <filename>classSoftwareImageType.html</filename>
    <base>ImageType</base>
    <member kind="function">
      <type></type>
      <name>SoftwareImageType</name>
      <anchorfile>classSoftwareImageType.html</anchorfile>
      <anchor>a5f5beb2f6f0c7b4f63eef95eff97bdd6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SoftwareImageType</name>
      <anchorfile>classSoftwareImageType.html</anchorfile>
      <anchor>aeb786d026cf2d88e836726351a287e4d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ImagePixelData::Ptr</type>
      <name>create</name>
      <anchorfile>classSoftwareImageType.html</anchorfile>
      <anchor>acc6f714daec1af6e2feca775648c34d8</anchor>
      <arglist>(Image::PixelFormat, int width, int height, bool clearImage) const override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getTypeID</name>
      <anchorfile>classSoftwareImageType.html</anchorfile>
      <anchor>afd08b855c8f2dab0af2865a00468adfd</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SortedSet</name>
    <filename>classSortedSet.html</filename>
    <templarg>ElementType</templarg>
    <templarg>TypeOfCriticalSectionToUse</templarg>
    <member kind="typedef">
      <type>TypeOfCriticalSectionToUse::ScopedLockType</type>
      <name>ScopedLockType</name>
      <anchorfile>classSortedSet.html</anchorfile>
      <anchor>ae626f3b066a888141799190c37f35d61</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SortedSet</name>
      <anchorfile>classSortedSet.html</anchorfile>
      <anchor>a32a61b722cdb83c4a91eb99b82a3583b</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SortedSet</name>
      <anchorfile>classSortedSet.html</anchorfile>
      <anchor>af8461e46cb255507bf2650240a63e4a4</anchor>
      <arglist>(const SortedSet &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SortedSet</name>
      <anchorfile>classSortedSet.html</anchorfile>
      <anchor>a3a3337e308c30652d555df85949aa73f</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>SortedSet &amp;</type>
      <name>operator=</name>
      <anchorfile>classSortedSet.html</anchorfile>
      <anchor>ac25e3122d81c9a82216cca1b385fc8c6</anchor>
      <arglist>(const SortedSet &amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classSortedSet.html</anchorfile>
      <anchor>a0c7eea00d2ac22afa1fcd70aa0d7d920</anchor>
      <arglist>(const SortedSet&lt; ElementType &gt; &amp;other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classSortedSet.html</anchorfile>
      <anchor>afd108e9b2b728bc3ea22428add3f99e6</anchor>
      <arglist>(const SortedSet&lt; ElementType &gt; &amp;other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classSortedSet.html</anchorfile>
      <anchor>a0cc4c313458f6d87513fda77d31eaa71</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearQuick</name>
      <anchorfile>classSortedSet.html</anchorfile>
      <anchor>a792064a68e61905a9ee6968e2cbc4ee6</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>classSortedSet.html</anchorfile>
      <anchor>aae5daa157bd06da7e89ac7abde60ff68</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEmpty</name>
      <anchorfile>classSortedSet.html</anchorfile>
      <anchor>aa58ce31a34324031104aaef0046de66d</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>ElementType</type>
      <name>operator[]</name>
      <anchorfile>classSortedSet.html</anchorfile>
      <anchor>a06f73ea7834733c5697e87644b60341b</anchor>
      <arglist>(const int index) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>ElementType</type>
      <name>getUnchecked</name>
      <anchorfile>classSortedSet.html</anchorfile>
      <anchor>a931d3c86921cd13c2ca30316eb5dc8c2</anchor>
      <arglist>(const int index) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>ElementType &amp;</type>
      <name>getReference</name>
      <anchorfile>classSortedSet.html</anchorfile>
      <anchor>aee801e5bbc1d6fc894156e102237ca14</anchor>
      <arglist>(const int index) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>ElementType</type>
      <name>getFirst</name>
      <anchorfile>classSortedSet.html</anchorfile>
      <anchor>a44bdd0240e337b2f8197629aa1334230</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>ElementType</type>
      <name>getLast</name>
      <anchorfile>classSortedSet.html</anchorfile>
      <anchor>a2289698c4c183d6554f99760c1348d02</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>ElementType *</type>
      <name>begin</name>
      <anchorfile>classSortedSet.html</anchorfile>
      <anchor>a4546d1c39aca9b8105b1934c0546774b</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>ElementType *</type>
      <name>end</name>
      <anchorfile>classSortedSet.html</anchorfile>
      <anchor>ac616e72c4fad8919f19b486320555326</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>indexOf</name>
      <anchorfile>classSortedSet.html</anchorfile>
      <anchor>ac51e0a933c5902a55f68ee8eef9cba00</anchor>
      <arglist>(const ElementType &amp;elementToLookFor) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>classSortedSet.html</anchorfile>
      <anchor>ae1e68e73d12e73d1cd4d63b4ee7fa791</anchor>
      <arglist>(const ElementType &amp;elementToLookFor) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>add</name>
      <anchorfile>classSortedSet.html</anchorfile>
      <anchor>a861274cee3723b88dc742aef24ba65d5</anchor>
      <arglist>(const ElementType &amp;newElement) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addArray</name>
      <anchorfile>classSortedSet.html</anchorfile>
      <anchor>a8b84c2248ee6e7bc18a3cb6bd235e4ea</anchor>
      <arglist>(const ElementType *elementsToAdd, int numElementsToAdd) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addSet</name>
      <anchorfile>classSortedSet.html</anchorfile>
      <anchor>ad0879c462c30f89f5c09458f46b8d35f</anchor>
      <arglist>(const OtherSetType &amp;setToAddFrom, int startIndex=0, int numElementsToAdd=-1) noexcept</arglist>
    </member>
    <member kind="function">
      <type>ElementType</type>
      <name>remove</name>
      <anchorfile>classSortedSet.html</anchorfile>
      <anchor>a86602918644c684fd72d239980a83d84</anchor>
      <arglist>(const int indexToRemove) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeValue</name>
      <anchorfile>classSortedSet.html</anchorfile>
      <anchor>a21b0da9c6e547485feecc3b91d28164c</anchor>
      <arglist>(const ElementType valueToRemove) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeValuesIn</name>
      <anchorfile>classSortedSet.html</anchorfile>
      <anchor>a87ad10e1f49afe6fbcbf4170e84bf95e</anchor>
      <arglist>(const OtherSetType &amp;otherSet) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeValuesNotIn</name>
      <anchorfile>classSortedSet.html</anchorfile>
      <anchor>a44266b927f68b51086f56a8732fd3190</anchor>
      <arglist>(const OtherSetType &amp;otherSet) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swapWith</name>
      <anchorfile>classSortedSet.html</anchorfile>
      <anchor>a47f196433b0adf163184e4fbc33d7046</anchor>
      <arglist>(OtherSetType &amp;otherSet) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>minimiseStorageOverheads</name>
      <anchorfile>classSortedSet.html</anchorfile>
      <anchor>a259f41879ab086bde96eb90bbe9c4cd8</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ensureStorageAllocated</name>
      <anchorfile>classSortedSet.html</anchorfile>
      <anchor>a8104c54b46a0ffbe8f54395f5cf44b72</anchor>
      <arglist>(const int minNumElements)</arglist>
    </member>
    <member kind="function">
      <type>const TypeOfCriticalSectionToUse &amp;</type>
      <name>getLock</name>
      <anchorfile>classSortedSet.html</anchorfile>
      <anchor>a5a0b04e366f0a1faa768d05e400208ca</anchor>
      <arglist>() const noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoundPlayer</name>
    <filename>classSoundPlayer.html</filename>
    <base>AudioIODeviceCallback</base>
    <member kind="function">
      <type></type>
      <name>SoundPlayer</name>
      <anchorfile>classSoundPlayer.html</anchorfile>
      <anchor>ac7107aecd54bdcfac29486487768ebc6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SoundPlayer</name>
      <anchorfile>classSoundPlayer.html</anchorfile>
      <anchor>aa12d5dd55f4f163b8f89fd131756ff59</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>play</name>
      <anchorfile>classSoundPlayer.html</anchorfile>
      <anchor>a14b1e54b19edd7c02ae09715b254f7bc</anchor>
      <arglist>(const File &amp;file)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>play</name>
      <anchorfile>classSoundPlayer.html</anchorfile>
      <anchor>a2246f27995bed34ac1c748348d281a21</anchor>
      <arglist>(const void *resourceData, size_t resourceSize)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>play</name>
      <anchorfile>classSoundPlayer.html</anchorfile>
      <anchor>a0e41899bfdfc13eb61cff655a7ef6098</anchor>
      <arglist>(AudioFormatReader *buffer, bool deleteWhenFinished=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>play</name>
      <anchorfile>classSoundPlayer.html</anchorfile>
      <anchor>a8fb431c681934390906a7a15cfc84a7d</anchor>
      <arglist>(PositionableAudioSource *audioSource, bool deleteWhenFinished=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>play</name>
      <anchorfile>classSoundPlayer.html</anchorfile>
      <anchor>a4123bb5f4325cd80f3825931085c591b</anchor>
      <arglist>(AudioSampleBuffer *buffer, bool deleteWhenFinished=false, bool playOnAllOutputChannels=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>playTestSound</name>
      <anchorfile>classSoundPlayer.html</anchorfile>
      <anchor>af3a242e140dc73bcfae74e22d421a2c1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>audioDeviceIOCallback</name>
      <anchorfile>classSoundPlayer.html</anchorfile>
      <anchor>a90ec033e5d30ddb9168698b08b749576</anchor>
      <arglist>(const float **, int, float **, int, int) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>audioDeviceAboutToStart</name>
      <anchorfile>classSoundPlayer.html</anchorfile>
      <anchor>a655a273e8d700f0b251d5bc732b7dd55</anchor>
      <arglist>(AudioIODevice *) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>audioDeviceStopped</name>
      <anchorfile>classSoundPlayer.html</anchorfile>
      <anchor>a31316aeaf085210d8c3c9ad516116ce4</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>audioDeviceError</name>
      <anchorfile>classSoundPlayer.html</anchorfile>
      <anchor>a2e4fbd35c60ab3af1f46fb9963a433ad</anchor>
      <arglist>(const String &amp;errorMessage) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SparseSet</name>
    <filename>classSparseSet.html</filename>
    <templarg>Type</templarg>
    <member kind="function">
      <type></type>
      <name>SparseSet</name>
      <anchorfile>classSparseSet.html</anchorfile>
      <anchor>a7d68b624199ec2f71e9ec1519c4fcd3d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SparseSet</name>
      <anchorfile>classSparseSet.html</anchorfile>
      <anchor>a9db453b88c6f983047f2920412b7c559</anchor>
      <arglist>(const SparseSet&lt; Type &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classSparseSet.html</anchorfile>
      <anchor>a7d2fc6674ce3c6c0c52d720d88752339</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEmpty</name>
      <anchorfile>classSparseSet.html</anchorfile>
      <anchor>ae60850392e3312144695b1bb9c999047</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Type</type>
      <name>size</name>
      <anchorfile>classSparseSet.html</anchorfile>
      <anchor>abb774559c4dd7fa498095539c22e9df1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Type</type>
      <name>operator[]</name>
      <anchorfile>classSparseSet.html</anchorfile>
      <anchor>a54f3d84e61a754674f62981216013254</anchor>
      <arglist>(Type index) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>classSparseSet.html</anchorfile>
      <anchor>a012b4ce66f31a8666bd818e18a6081de</anchor>
      <arglist>(const Type valueToLookFor) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumRanges</name>
      <anchorfile>classSparseSet.html</anchorfile>
      <anchor>a2cf54ba41e95ead13be4cdea090750fe</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const Range&lt; Type &gt;</type>
      <name>getRange</name>
      <anchorfile>classSparseSet.html</anchorfile>
      <anchor>a77a4314241f40c4c3be84687eb2d61cb</anchor>
      <arglist>(const int rangeIndex) const </arglist>
    </member>
    <member kind="function">
      <type>Range&lt; Type &gt;</type>
      <name>getTotalRange</name>
      <anchorfile>classSparseSet.html</anchorfile>
      <anchor>aa243e3ee99df5bfe41983c031d4b148a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addRange</name>
      <anchorfile>classSparseSet.html</anchorfile>
      <anchor>a0887e0e73216a5d30dc399888fa304e5</anchor>
      <arglist>(const Range&lt; Type &gt; range)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeRange</name>
      <anchorfile>classSparseSet.html</anchorfile>
      <anchor>a263cd6c64bbf95db0ee8be6e546a70a6</anchor>
      <arglist>(const Range&lt; Type &gt; rangeToRemove)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>invertRange</name>
      <anchorfile>classSparseSet.html</anchorfile>
      <anchor>a63c91d4e3ed13a357d2fccc7d6e695d4</anchor>
      <arglist>(const Range&lt; Type &gt; range)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>overlapsRange</name>
      <anchorfile>classSparseSet.html</anchorfile>
      <anchor>a82275387d1f516f25b15b841c03bcef1</anchor>
      <arglist>(const Range&lt; Type &gt; range)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>containsRange</name>
      <anchorfile>classSparseSet.html</anchorfile>
      <anchor>a1a764e5824c3c99a9fb5d1e67036c59a</anchor>
      <arglist>(const Range&lt; Type &gt; range)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classSparseSet.html</anchorfile>
      <anchor>a24f9ec48f4d54d6e367de646b282eaee</anchor>
      <arglist>(const SparseSet&lt; Type &gt; &amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classSparseSet.html</anchorfile>
      <anchor>acab4f9b22f2852bc215ace7f8fe5b9ba</anchor>
      <arglist>(const SparseSet&lt; Type &gt; &amp;other) noexcept</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>SpeakerMappings</name>
    <filename>structSpeakerMappings.html</filename>
    <base protection="private">AudioChannelSet</base>
    <class kind="struct">SpeakerMappings::Mapping</class>
    <member kind="function" static="yes">
      <type>static AudioChannelSet</type>
      <name>vstArrangementTypeToChannelSet</name>
      <anchorfile>structSpeakerMappings.html</anchorfile>
      <anchor>a231aa444606ba6163fac1f8d5a00427c</anchor>
      <arglist>(int32 arr, int fallbackNumChannels)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static AudioChannelSet</type>
      <name>vstArrangementTypeToChannelSet</name>
      <anchorfile>structSpeakerMappings.html</anchorfile>
      <anchor>ae9f7e1c2911ad1823e2fef2fc359cc81</anchor>
      <arglist>(const VstSpeakerConfiguration &amp;arr)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int32</type>
      <name>channelSetToVstArrangementType</name>
      <anchorfile>structSpeakerMappings.html</anchorfile>
      <anchor>a9049a026ab41806fb5dc6aad8a426613</anchor>
      <arglist>(AudioChannelSet channels)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>channelSetToVstArrangement</name>
      <anchorfile>structSpeakerMappings.html</anchorfile>
      <anchor>a85e146736b986b0b4e35b5f061d857fa</anchor>
      <arglist>(const AudioChannelSet &amp;channels, VstSpeakerConfiguration &amp;result)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const Mapping *</type>
      <name>getMappings</name>
      <anchorfile>structSpeakerMappings.html</anchorfile>
      <anchor>ad058f02837b1104e6d309af1ebe558b6</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int32</type>
      <name>getSpeakerType</name>
      <anchorfile>structSpeakerMappings.html</anchorfile>
      <anchor>ae6fde18fe328e52ba2289dbede8d82e3</anchor>
      <arglist>(AudioChannelSet::ChannelType type) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static AudioChannelSet::ChannelType</type>
      <name>getChannelType</name>
      <anchorfile>structSpeakerMappings.html</anchorfile>
      <anchor>a45b10696f71901b7a83acebdd746854b</anchor>
      <arglist>(int32 type) noexcept</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>SpeakerMappings::Mapping</name>
    <filename>structSpeakerMappings_1_1Mapping.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>matches</name>
      <anchorfile>structSpeakerMappings_1_1Mapping.html</anchorfile>
      <anchor>a9bab47ad581e24e26a3d3e4267cc1e5a</anchor>
      <arglist>(const Array&lt; ChannelType &gt; &amp;chans) const noexcept</arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>vst2</name>
      <anchorfile>structSpeakerMappings_1_1Mapping.html</anchorfile>
      <anchor>a2645ca9d0b780b227d8f74b61e3061f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ChannelType</type>
      <name>channels</name>
      <anchorfile>structSpeakerMappings_1_1Mapping.html</anchorfile>
      <anchor>a4bd54e10adf49ce9a185dae6b90d2218</anchor>
      <arglist>[13]</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SpinLock</name>
    <filename>classSpinLock.html</filename>
    <member kind="typedef">
      <type>GenericScopedLock&lt; SpinLock &gt;</type>
      <name>ScopedLockType</name>
      <anchorfile>classSpinLock.html</anchorfile>
      <anchor>a8239db74a56ce60a114cd369ed6a41f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GenericScopedUnlock&lt; SpinLock &gt;</type>
      <name>ScopedUnlockType</name>
      <anchorfile>classSpinLock.html</anchorfile>
      <anchor>ae531d71996d5122e0caa8a10212cf585</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SpinLock</name>
      <anchorfile>classSpinLock.html</anchorfile>
      <anchor>a204af2b708c1678699ce0a235c229c64</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SpinLock</name>
      <anchorfile>classSpinLock.html</anchorfile>
      <anchor>ae5ac2bc2ea9faeb66d861ea0b9cdc7cd</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enter</name>
      <anchorfile>classSpinLock.html</anchorfile>
      <anchor>a9079933ef4fdd1527fd0bf90f1062e02</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>tryEnter</name>
      <anchorfile>classSpinLock.html</anchorfile>
      <anchor>a4581a24b50dad1a9803b19f65af70aaf</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>exit</name>
      <anchorfile>classSpinLock.html</anchorfile>
      <anchor>a13a3a2f0d2a659b493a9c6e93e8d95f8</anchor>
      <arglist>() const noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SplashScreen</name>
    <filename>classSplashScreen.html</filename>
    <base>Component</base>
    <base protection="private">Timer</base>
    <base protection="private">DeletedAtShutdown</base>
    <member kind="function">
      <type></type>
      <name>SplashScreen</name>
      <anchorfile>classSplashScreen.html</anchorfile>
      <anchor>a17f618da1f7495a592d8d346ab1a92e3</anchor>
      <arglist>(const String &amp;title, const Image &amp;backgroundImage, bool useDropShadow)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SplashScreen</name>
      <anchorfile>classSplashScreen.html</anchorfile>
      <anchor>aeb6a4736f6f7b9bb880d606610c2ae1e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deleteAfterDelay</name>
      <anchorfile>classSplashScreen.html</anchorfile>
      <anchor>ac16029be83bfde8317f47138fc830013</anchor>
      <arglist>(RelativeTime minimumTotalTimeToDisplayFor, bool removeOnMouseClick)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SplashScreen</name>
      <anchorfile>classSplashScreen.html</anchorfile>
      <anchor>ab59228753c7b524e47f673063d7487e6</anchor>
      <arglist>(const String &amp;title, int width, int height, bool useDropShadow)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>paint</name>
      <anchorfile>classSplashScreen.html</anchorfile>
      <anchor>a2928536a464778d08d42b1bdc571899d</anchor>
      <arglist>(Graphics &amp;) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>StandaloneFilterWindow</name>
    <filename>classStandaloneFilterWindow.html</filename>
    <base>DocumentWindow</base>
    <member kind="function">
      <type></type>
      <name>StandaloneFilterWindow</name>
      <anchorfile>classStandaloneFilterWindow.html</anchorfile>
      <anchor>ac008829a9ecf58b98814eca1a006fe13</anchor>
      <arglist>(const String &amp;title, Colour backgroundColour, PropertySet *settingsToUse, bool takeOwnershipOfSettings, const String &amp;preferredDefaultDeviceName=String(), const AudioDeviceManager::AudioDeviceSetup *preferredSetupOptions=nullptr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~StandaloneFilterWindow</name>
      <anchorfile>classStandaloneFilterWindow.html</anchorfile>
      <anchor>aae64328faa7f0aa4ccc0099ebf4e84d8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>AudioProcessor *</type>
      <name>getAudioProcessor</name>
      <anchorfile>classStandaloneFilterWindow.html</anchorfile>
      <anchor>a2d741817e3fff0f6ae38104123438493</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>AudioDeviceManager &amp;</type>
      <name>getDeviceManager</name>
      <anchorfile>classStandaloneFilterWindow.html</anchorfile>
      <anchor>aa912d8a4473ce219db1605b56049b51e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>createEditorComp</name>
      <anchorfile>classStandaloneFilterWindow.html</anchorfile>
      <anchor>a8f7e30a417aeab18ef51d95efc4520a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deleteEditorComp</name>
      <anchorfile>classStandaloneFilterWindow.html</anchorfile>
      <anchor>a9c570b6b027a99d746a31f1b7e72f1e8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetToDefaultState</name>
      <anchorfile>classStandaloneFilterWindow.html</anchorfile>
      <anchor>a7fcc3628b8e48d4f0a72fa268a86046f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>closeButtonPressed</name>
      <anchorfile>classStandaloneFilterWindow.html</anchorfile>
      <anchor>a0ecb7e5d6264a99e213987021ae863a9</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>buttonClicked</name>
      <anchorfile>classStandaloneFilterWindow.html</anchorfile>
      <anchor>a43c03f9f453434a560a44011c9cd357e</anchor>
      <arglist>(Button *) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>handleMenuResult</name>
      <anchorfile>classStandaloneFilterWindow.html</anchorfile>
      <anchor>a0f873019785295f0726bbd4ee64efc86</anchor>
      <arglist>(int result)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resized</name>
      <anchorfile>classStandaloneFilterWindow.html</anchorfile>
      <anchor>a029336e5ea7014d9a92d4cb712c50c38</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>menuCallback</name>
      <anchorfile>classStandaloneFilterWindow.html</anchorfile>
      <anchor>a650a6dad30ba59ff7ea8e74df1a5857b</anchor>
      <arglist>(int result, StandaloneFilterWindow *button)</arglist>
    </member>
    <member kind="variable">
      <type>ScopedPointer&lt; StandalonePluginHolder &gt;</type>
      <name>pluginHolder</name>
      <anchorfile>classStandaloneFilterWindow.html</anchorfile>
      <anchor>a0cd5d5012b0b1b0119da68b5e100fe69</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>StandalonePluginHolder</name>
    <filename>classStandalonePluginHolder.html</filename>
    <base protection="private">Timer</base>
    <member kind="function">
      <type></type>
      <name>StandalonePluginHolder</name>
      <anchorfile>classStandalonePluginHolder.html</anchorfile>
      <anchor>a01907d1aa9e4ce519e1e691f96eb2c06</anchor>
      <arglist>(PropertySet *settingsToUse, bool takeOwnershipOfSettings=true, const String &amp;preferredDefaultDeviceName=String(), const AudioDeviceManager::AudioDeviceSetup *preferredSetupOptions=nullptr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~StandalonePluginHolder</name>
      <anchorfile>classStandalonePluginHolder.html</anchorfile>
      <anchor>a228609a6435e5ae61c21c59353b675a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>createPlugin</name>
      <anchorfile>classStandalonePluginHolder.html</anchorfile>
      <anchor>acb689ebcf4c02da40c76b0cd1b3e556f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>deletePlugin</name>
      <anchorfile>classStandalonePluginHolder.html</anchorfile>
      <anchor>a9eb8c1bd9c771ed5ee9a0c1b4e632c1a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>File</type>
      <name>getLastFile</name>
      <anchorfile>classStandalonePluginHolder.html</anchorfile>
      <anchor>aaca32e54224860534ac5580306dd475c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLastFile</name>
      <anchorfile>classStandalonePluginHolder.html</anchorfile>
      <anchor>a51b7121cdd9169e12d633fd09930ad86</anchor>
      <arglist>(const FileChooser &amp;fc)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>askUserToSaveState</name>
      <anchorfile>classStandalonePluginHolder.html</anchorfile>
      <anchor>ac28981bbac45dbae6c1fdf617a824c17</anchor>
      <arglist>(const String &amp;fileSuffix=String())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>askUserToLoadState</name>
      <anchorfile>classStandalonePluginHolder.html</anchorfile>
      <anchor>ab55d4cd652306a2a344be38464a48358</anchor>
      <arglist>(const String &amp;fileSuffix=String())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>startPlaying</name>
      <anchorfile>classStandalonePluginHolder.html</anchorfile>
      <anchor>abe71702a98a39970d3e56a06a9dfc62a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stopPlaying</name>
      <anchorfile>classStandalonePluginHolder.html</anchorfile>
      <anchor>a9a8c589b12a348374425a7e8d71af0a7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>showAudioSettingsDialog</name>
      <anchorfile>classStandalonePluginHolder.html</anchorfile>
      <anchor>a5e24139925518f20b67a3d6f74bfb00c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>saveAudioDeviceState</name>
      <anchorfile>classStandalonePluginHolder.html</anchorfile>
      <anchor>a3591021b8495b1d2dddb6ff9a2405209</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reloadAudioDeviceState</name>
      <anchorfile>classStandalonePluginHolder.html</anchorfile>
      <anchor>a0b2e109349c027391f470318bd4d23ba</anchor>
      <arglist>(const String &amp;preferredDefaultDeviceName, const AudioDeviceManager::AudioDeviceSetup *preferredSetupOptions)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>savePluginState</name>
      <anchorfile>classStandalonePluginHolder.html</anchorfile>
      <anchor>a9319c6c7e9368f0d2fb1d31b0f2b2816</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reloadPluginState</name>
      <anchorfile>classStandalonePluginHolder.html</anchorfile>
      <anchor>adfdf093b9b5ab101d2f76d5fa957c6eb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static String</type>
      <name>getFilePatterns</name>
      <anchorfile>classStandalonePluginHolder.html</anchorfile>
      <anchor>a5a8cd39a398b0b62838a4ec62778429e</anchor>
      <arglist>(const String &amp;fileSuffix)</arglist>
    </member>
    <member kind="variable">
      <type>OptionalScopedPointer&lt; PropertySet &gt;</type>
      <name>settings</name>
      <anchorfile>classStandalonePluginHolder.html</anchorfile>
      <anchor>a58375e902a8f0e9d079ff54abf763ac5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ScopedPointer&lt; AudioProcessor &gt;</type>
      <name>processor</name>
      <anchorfile>classStandalonePluginHolder.html</anchorfile>
      <anchor>aa971bb76e4bc1cb996c8d300f9947434</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>AudioDeviceManager</type>
      <name>deviceManager</name>
      <anchorfile>classStandalonePluginHolder.html</anchorfile>
      <anchor>a6fb1eb9dcabd5f5d6e2c52a44296e017</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>AudioProcessorPlayer</type>
      <name>player</name>
      <anchorfile>classStandalonePluginHolder.html</anchorfile>
      <anchor>a7dd25ebd12047b7c040f4128f4690c52</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>StringArray</type>
      <name>lastMidiDevices</name>
      <anchorfile>classStandalonePluginHolder.html</anchorfile>
      <anchor>a6495b714b1b911b9352da94e282efa2d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>StatisticsAccumulator</name>
    <filename>classStatisticsAccumulator.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>StatisticsAccumulator</name>
      <anchorfile>classStatisticsAccumulator.html</anchorfile>
      <anchor>af07a0122be132c59ff810b31146d2449</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addValue</name>
      <anchorfile>classStatisticsAccumulator.html</anchorfile>
      <anchor>aee4d232f7d9cff1fee90ced640422fb0</anchor>
      <arglist>(FloatType v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classStatisticsAccumulator.html</anchorfile>
      <anchor>aae1f7582ed244087615aab9bea80b58d</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>FloatType</type>
      <name>getAverage</name>
      <anchorfile>classStatisticsAccumulator.html</anchorfile>
      <anchor>a89638ed049dbdfd44b19bef05052558c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>FloatType</type>
      <name>getVariance</name>
      <anchorfile>classStatisticsAccumulator.html</anchorfile>
      <anchor>a8b52e03f0ea6ef38c94f91ee56854237</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>FloatType</type>
      <name>getStandardDeviation</name>
      <anchorfile>classStatisticsAccumulator.html</anchorfile>
      <anchor>a0b04b4414ef33033bf049fd374c8b7fa</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>FloatType</type>
      <name>getMinValue</name>
      <anchorfile>classStatisticsAccumulator.html</anchorfile>
      <anchor>a8ec04c4af4a6d36dd88929ce1aa8cf08</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>FloatType</type>
      <name>getMaxValue</name>
      <anchorfile>classStatisticsAccumulator.html</anchorfile>
      <anchor>a8516df5dd7c5a3fbc52f9c7921bdc87b</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>getCount</name>
      <anchorfile>classStatisticsAccumulator.html</anchorfile>
      <anchor>acfa67dd843c0a2c587cc99ffc3fca40f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>StatusLight</name>
    <filename>classStatusLight.html</filename>
    <member kind="function">
      <type></type>
      <name>StatusLight</name>
      <anchorfile>classStatusLight.html</anchorfile>
      <anchor>a9f66c0b74ff959bd8d477c122d53e684</anchor>
      <arglist>(Block &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~StatusLight</name>
      <anchorfile>classStatusLight.html</anchorfile>
      <anchor>aca069c2017c39129a9dd2b038b29f1d3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual juce::String</type>
      <name>getName</name>
      <anchorfile>classStatusLight.html</anchorfile>
      <anchor>aa825f8cf54c3dd638716a5c8a2656bee</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>setColour</name>
      <anchorfile>classStatusLight.html</anchorfile>
      <anchor>a154151316d9a5523aab5623be729f62c</anchor>
      <arglist>(LEDColour newColour)=0</arglist>
    </member>
    <member kind="variable">
      <type>Block &amp;</type>
      <name>block</name>
      <anchorfile>classStatusLight.html</anchorfile>
      <anchor>abcadf91771de7451dea784d2433e5df5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>StreamingSocket</name>
    <filename>classStreamingSocket.html</filename>
    <member kind="function">
      <type></type>
      <name>StreamingSocket</name>
      <anchorfile>classStreamingSocket.html</anchorfile>
      <anchor>a280e9f29da54da9a828c920d734cc580</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~StreamingSocket</name>
      <anchorfile>classStreamingSocket.html</anchorfile>
      <anchor>aaed4b1879a7f212cf95382b418d03210</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>bindToPort</name>
      <anchorfile>classStreamingSocket.html</anchorfile>
      <anchor>aa0788414f9c3f08d1c5adddf5481e17a</anchor>
      <arglist>(int localPortNumber)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>bindToPort</name>
      <anchorfile>classStreamingSocket.html</anchorfile>
      <anchor>a65448313c7cfb7384729eeda7de69ef6</anchor>
      <arglist>(int localPortNumber, const String &amp;localAddress)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getBoundPort</name>
      <anchorfile>classStreamingSocket.html</anchorfile>
      <anchor>ad4138f041b6875937b1910a2be0f1b5f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>connect</name>
      <anchorfile>classStreamingSocket.html</anchorfile>
      <anchor>a42934b3f0d68f46f29cc7bb5d1067c33</anchor>
      <arglist>(const String &amp;remoteHostname, int remotePortNumber, int timeOutMillisecs=3000)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isConnected</name>
      <anchorfile>classStreamingSocket.html</anchorfile>
      <anchor>a22d32e5442ccae9033278729aaa3e075</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>close</name>
      <anchorfile>classStreamingSocket.html</anchorfile>
      <anchor>a59ad8b03c9b5ef8572f9b159d3a411d9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const String &amp;</type>
      <name>getHostName</name>
      <anchorfile>classStreamingSocket.html</anchorfile>
      <anchor>a1f0908b06027d58c1070f5bf1d700959</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getPort</name>
      <anchorfile>classStreamingSocket.html</anchorfile>
      <anchor>a27a413769755ff853ab63a6f27338cce</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isLocal</name>
      <anchorfile>classStreamingSocket.html</anchorfile>
      <anchor>a47a3da922f5a1bc2d111caa38bd23d2e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getRawSocketHandle</name>
      <anchorfile>classStreamingSocket.html</anchorfile>
      <anchor>a4809d51655d78f65ee476629b7f1c260</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>waitUntilReady</name>
      <anchorfile>classStreamingSocket.html</anchorfile>
      <anchor>a8c737d5e12af2540e282d159379163ba</anchor>
      <arglist>(bool readyForReading, int timeoutMsecs) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>read</name>
      <anchorfile>classStreamingSocket.html</anchorfile>
      <anchor>ac048823c044a47600f7f1036c730b934</anchor>
      <arglist>(void *destBuffer, int maxBytesToRead, bool blockUntilSpecifiedAmountHasArrived)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>write</name>
      <anchorfile>classStreamingSocket.html</anchorfile>
      <anchor>a90721593b92401ecd20aae2c68d3d446</anchor>
      <arglist>(const void *sourceBuffer, int numBytesToWrite)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>createListener</name>
      <anchorfile>classStreamingSocket.html</anchorfile>
      <anchor>abd27eafb1f4e3a1bae915e2eb72f41e6</anchor>
      <arglist>(int portNumber, const String &amp;localHostName=String())</arglist>
    </member>
    <member kind="function">
      <type>StreamingSocket *</type>
      <name>waitForNextConnection</name>
      <anchorfile>classStreamingSocket.html</anchorfile>
      <anchor>a97ed9152008fc7af303330a5e5357990</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>StretchableLayoutManager</name>
    <filename>classStretchableLayoutManager.html</filename>
    <member kind="function">
      <type></type>
      <name>StretchableLayoutManager</name>
      <anchorfile>classStretchableLayoutManager.html</anchorfile>
      <anchor>a1fc7dc605c628265d33d6d189df8dbdf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~StretchableLayoutManager</name>
      <anchorfile>classStretchableLayoutManager.html</anchorfile>
      <anchor>ac163f26b08dba15724f71e846a204e7d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setItemLayout</name>
      <anchorfile>classStretchableLayoutManager.html</anchorfile>
      <anchor>ad06dde1deb392bbe53d9c642302a3e01</anchor>
      <arglist>(int itemIndex, double minimumSize, double maximumSize, double preferredSize)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getItemLayout</name>
      <anchorfile>classStretchableLayoutManager.html</anchorfile>
      <anchor>a32ffdb00b54dabac8a4112bda1ac8448</anchor>
      <arglist>(int itemIndex, double &amp;minimumSize, double &amp;maximumSize, double &amp;preferredSize) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearAllItems</name>
      <anchorfile>classStretchableLayoutManager.html</anchorfile>
      <anchor>a11eb6cecef28d174591a4f638807631d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>layOutComponents</name>
      <anchorfile>classStretchableLayoutManager.html</anchorfile>
      <anchor>a8276cd18109ff9bb5220b1d91dad1c90</anchor>
      <arglist>(Component **components, int numComponents, int x, int y, int width, int height, bool vertically, bool resizeOtherDimension)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getItemCurrentPosition</name>
      <anchorfile>classStretchableLayoutManager.html</anchorfile>
      <anchor>a6f399ccd3cdd1d321eca0b30ee703b3e</anchor>
      <arglist>(int itemIndex) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getItemCurrentAbsoluteSize</name>
      <anchorfile>classStretchableLayoutManager.html</anchorfile>
      <anchor>a54e180632e051cd00e28d67e36e6efc5</anchor>
      <arglist>(int itemIndex) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getItemCurrentRelativeSize</name>
      <anchorfile>classStretchableLayoutManager.html</anchorfile>
      <anchor>a69f950ff072fcef5d6ec5d77c6290452</anchor>
      <arglist>(int itemIndex) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setItemPosition</name>
      <anchorfile>classStretchableLayoutManager.html</anchorfile>
      <anchor>a8c9f25baf3358d5b5ba1619fdac75e83</anchor>
      <arglist>(int itemIndex, int newPosition)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>StretchableLayoutResizerBar</name>
    <filename>classStretchableLayoutResizerBar.html</filename>
    <base>Component</base>
    <class kind="struct">StretchableLayoutResizerBar::LookAndFeelMethods</class>
    <member kind="function">
      <type></type>
      <name>StretchableLayoutResizerBar</name>
      <anchorfile>classStretchableLayoutResizerBar.html</anchorfile>
      <anchor>a72bc8f86edf82663bf96e0fbe9461b66</anchor>
      <arglist>(StretchableLayoutManager *layoutToUse, int itemIndexInLayout, bool isBarVertical)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~StretchableLayoutResizerBar</name>
      <anchorfile>classStretchableLayoutResizerBar.html</anchorfile>
      <anchor>adc972115e568ac01a46cb8160fac541a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>hasBeenMoved</name>
      <anchorfile>classStretchableLayoutResizerBar.html</anchorfile>
      <anchor>a5d834f357c63282771d060f90728f618</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>paint</name>
      <anchorfile>classStretchableLayoutResizerBar.html</anchorfile>
      <anchor>a9589c1034e9dce2b5836787b57bf117b</anchor>
      <arglist>(Graphics &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mouseDown</name>
      <anchorfile>classStretchableLayoutResizerBar.html</anchorfile>
      <anchor>ae8b6cbc6c5759c668c229b2cc80bf9c0</anchor>
      <arglist>(const MouseEvent &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mouseDrag</name>
      <anchorfile>classStretchableLayoutResizerBar.html</anchorfile>
      <anchor>a808feec86fa98f0c439aa828adcadee8</anchor>
      <arglist>(const MouseEvent &amp;) override</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>StretchableLayoutResizerBar::LookAndFeelMethods</name>
    <filename>structStretchableLayoutResizerBar_1_1LookAndFeelMethods.html</filename>
  </compound>
  <compound kind="class">
    <name>StretchableObjectResizer</name>
    <filename>classStretchableObjectResizer.html</filename>
    <member kind="function">
      <type></type>
      <name>StretchableObjectResizer</name>
      <anchorfile>classStretchableObjectResizer.html</anchorfile>
      <anchor>ad8e6c2a4601296f009139eab0564df32</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~StretchableObjectResizer</name>
      <anchorfile>classStretchableObjectResizer.html</anchorfile>
      <anchor>a580207274ce3254eaab02f2781f13bd5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addItem</name>
      <anchorfile>classStretchableObjectResizer.html</anchorfile>
      <anchor>a2f4ade92ab81712e4556770ecfb81cd0</anchor>
      <arglist>(double currentSize, double minSize, double maxSize, int order=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resizeToFit</name>
      <anchorfile>classStretchableObjectResizer.html</anchorfile>
      <anchor>ad91dce94a524b769b10c663eec6f0b4e</anchor>
      <arglist>(double targetSize)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumItems</name>
      <anchorfile>classStretchableObjectResizer.html</anchorfile>
      <anchor>a6ae31268a50a1c715e39b28bfd82f560</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getItemSize</name>
      <anchorfile>classStretchableObjectResizer.html</anchorfile>
      <anchor>aca2902b220e5ec11d050e013f2de4de9</anchor>
      <arglist>(int index) const noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>String</name>
    <filename>classString.html</filename>
    <member kind="typedef">
      <type>CharPointer_UTF8</type>
      <name>CharPointerType</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>a32e28d7fc3a4900c319884191d90dbf0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>String</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>a0225bb76bd3527b0e9ec9663c53f873d</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>String</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>a1b484d4f6f749e0b8bf0fe7ab6fef253</anchor>
      <arglist>(const String &amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>String</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>a113bff4af0d201bddca91a915db1c8c4</anchor>
      <arglist>(String &amp;&amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>String</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>a536209bdc6da85c29369073bed2bfd45</anchor>
      <arglist>(const char *text)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>String</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>ad6ae56068e13148c8b055020c7234966</anchor>
      <arglist>(const char *text, size_t maxChars)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>String</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>ad0c0a09e31ab8549d633b66f05b0395d</anchor>
      <arglist>(const wchar_t *text)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>String</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>a89eba793432dadb723c1d476f2a28629</anchor>
      <arglist>(const wchar_t *text, size_t maxChars)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>String</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>ade586375c47903b45cc7a6033ee076be</anchor>
      <arglist>(const CharPointer_UTF8 text)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>String</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>a2290142b15be36c75155e1f5d6b141e4</anchor>
      <arglist>(const CharPointer_UTF8 text, size_t maxChars)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>String</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>ae761c588938c2f0d97ba2fbb87db7eb5</anchor>
      <arglist>(const CharPointer_UTF8 start, const CharPointer_UTF8 end)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>String</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>a481617f70de0dcdf83c76f16a04002cc</anchor>
      <arglist>(const CharPointer_UTF16 text)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>String</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>a7bd446d1c48210d621bc852ebdc8068b</anchor>
      <arglist>(const CharPointer_UTF16 text, size_t maxChars)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>String</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>ac4dba7bbc6d81d6da9a9e94a37e80549</anchor>
      <arglist>(const CharPointer_UTF16 start, const CharPointer_UTF16 end)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>String</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>ac25e8e770b1b0c42113b6df4a1431e81</anchor>
      <arglist>(const CharPointer_UTF32 text)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>String</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>ab093680920a66840e7dd4bbbc921be1f</anchor>
      <arglist>(const CharPointer_UTF32 text, size_t maxChars)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>String</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>a62e2112cb061fbe22ea1172b51a7423b</anchor>
      <arglist>(const CharPointer_UTF32 start, const CharPointer_UTF32 end)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>String</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>aeae48fdc2547851226343de8bc1b42e8</anchor>
      <arglist>(const CharPointer_ASCII text)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>String</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>ab8316245033ca84ee8e08d96e2b894ca</anchor>
      <arglist>(const std::string &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>String</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>a33dfd35dddf05b9868d3893aef1f64b4</anchor>
      <arglist>(StringRef)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~String</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>ab6559a8751051579ef090c2c9193654e</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>hashCode</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>ad8ca5cb11984df03ff9697442da5ae4b</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>hashCode64</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>ad71be66a9c181abae185b84f7cec5f17</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>hash</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>a317bebf3259d5fefa6a2558b65ae2f77</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>length</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>a468027b0c1096af325a7df60b21e8feb</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>String &amp;</type>
      <name>operator=</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>a397c27215142bd7e21fc45ad04d945ba</anchor>
      <arglist>(const String &amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>String &amp;</type>
      <name>operator=</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>a8058118b577a094519053f35fd32311a</anchor>
      <arglist>(String &amp;&amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>String &amp;</type>
      <name>operator+=</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>a2db09f6036aa16fb8853049c31ebae72</anchor>
      <arglist>(const String &amp;stringToAppend)</arglist>
    </member>
    <member kind="function">
      <type>String &amp;</type>
      <name>operator+=</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>af6b0df65654d33a35dcae4e45a384ec4</anchor>
      <arglist>(const char *textToAppend)</arglist>
    </member>
    <member kind="function">
      <type>String &amp;</type>
      <name>operator+=</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>af6df59a0045e60d1c72c18e10c0a946f</anchor>
      <arglist>(const wchar_t *textToAppend)</arglist>
    </member>
    <member kind="function">
      <type>String &amp;</type>
      <name>operator+=</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>a61a460b9f50bbf37d292e9276401f7d6</anchor>
      <arglist>(StringRef textToAppend)</arglist>
    </member>
    <member kind="function">
      <type>String &amp;</type>
      <name>operator+=</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>ae19f504049d540cd2dd23021584143df</anchor>
      <arglist>(int numberToAppend)</arglist>
    </member>
    <member kind="function">
      <type>String &amp;</type>
      <name>operator+=</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>a1c38fbb26def8c9523ff177c4902fd9f</anchor>
      <arglist>(long numberToAppend)</arglist>
    </member>
    <member kind="function">
      <type>String &amp;</type>
      <name>operator+=</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>ac840d82ea7c41e91823e87ec2a3e4880</anchor>
      <arglist>(int64 numberToAppend)</arglist>
    </member>
    <member kind="function">
      <type>String &amp;</type>
      <name>operator+=</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>a66e34239a9fc095dae9900daedd087fd</anchor>
      <arglist>(uint64 numberToAppend)</arglist>
    </member>
    <member kind="function">
      <type>String &amp;</type>
      <name>operator+=</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>a9eac6350a4e708212a953fd4d7a08046</anchor>
      <arglist>(char characterToAppend)</arglist>
    </member>
    <member kind="function">
      <type>String &amp;</type>
      <name>operator+=</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>a5bfc4d8a1f65666048f5025e5520d070</anchor>
      <arglist>(wchar_t characterToAppend)</arglist>
    </member>
    <member kind="function">
      <type>String &amp;</type>
      <name>operator+=</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>acaa9572adabddf956924bf13830a7ece</anchor>
      <arglist>(juce_wchar characterToAppend)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>append</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>ade7558187c97f7ac17e9e7ffbc8b2bb2</anchor>
      <arglist>(const String &amp;textToAppend, size_t maxCharsToTake)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>appendCharPointer</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>a429ae4319863f720265f3ef2d372d85c</anchor>
      <arglist>(const CharPointerType startOfTextToAppend, const CharPointerType endOfTextToAppend)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>appendCharPointer</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>a9b85316a9a8ab9a4c7b771cb07e06ecd</anchor>
      <arglist>(const CharPointer startOfTextToAppend, const CharPointer endOfTextToAppend)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>appendCharPointer</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>aed53ab87e952b85d75a8157fcffdaa62</anchor>
      <arglist>(const CharPointerType textToAppend)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>appendCharPointer</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>aa16cd3285fcbdf13c925b28c248a3ebb</anchor>
      <arglist>(const CharPointer textToAppend, size_t maxCharsToTake)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>appendCharPointer</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>a48b022727f93bb5e28efc8d2e4538796</anchor>
      <arglist>(const CharPointer textToAppend)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEmpty</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>ab31a36bda8c789ba3c0ed37bb16c978c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNotEmpty</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>a46001a29fcbd7c867f0f3a42598a1495</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>a8270e74db4c76725871abda0316d1bec</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equalsIgnoreCase</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>aca8d661734f261887a8e60fffaf9aa97</anchor>
      <arglist>(const String &amp;other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equalsIgnoreCase</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>a09759dcd46e393b6c0c7b34fe6b5e273</anchor>
      <arglist>(StringRef other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equalsIgnoreCase</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>a180131623117d752e2c33d1febf2429e</anchor>
      <arglist>(const wchar_t *other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equalsIgnoreCase</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>aaf4cf8386032038ca88b1d517893c7c2</anchor>
      <arglist>(const char *other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>compare</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>acb884bac77c4f5ab27ed6182587bff2d</anchor>
      <arglist>(const String &amp;other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>compare</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>adc7f1c9c3413c5a5900f96bbe345df48</anchor>
      <arglist>(const char *other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>compare</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>af5421eb93f2f44448301374a9aa04b7d</anchor>
      <arglist>(const wchar_t *other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>compareIgnoreCase</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>a5583f2341626093e2c373497e2d9758a</anchor>
      <arglist>(const String &amp;other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>compareNatural</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>a966277f2dcc30f9f2507f0a7b5721a9b</anchor>
      <arglist>(StringRef other, bool isCaseSensitive=false) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>startsWith</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>ab93de8ae7eb05cd79ae7d3d263525855</anchor>
      <arglist>(StringRef text) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>startsWithChar</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>aa38dd3b48f5de6ed4106da5b42dd4044</anchor>
      <arglist>(juce_wchar character) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>startsWithIgnoreCase</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>aebab6b7467cc776e5ccf2cc095dbb45b</anchor>
      <arglist>(StringRef text) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>endsWith</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>aaafe38711826e7b777994d2f0fadc21d</anchor>
      <arglist>(StringRef text) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>endsWithChar</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>aa3a1b7342852de158b1229a3582f1b22</anchor>
      <arglist>(juce_wchar character) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>endsWithIgnoreCase</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>a116b729ef558f57266978bc8542d51aa</anchor>
      <arglist>(StringRef text) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>ac577d2b2fc82516d0a8017e8329ae479</anchor>
      <arglist>(StringRef text) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>containsChar</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>a913cc63503feccb1c229678c370f3354</anchor>
      <arglist>(juce_wchar character) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>containsIgnoreCase</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>aee0b65ec25ce0a6f9c3590552ee1b2e8</anchor>
      <arglist>(StringRef text) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>containsWholeWord</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>a3f50c899af78aa0081a46ad3e1d625f8</anchor>
      <arglist>(StringRef wordToLookFor) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>containsWholeWordIgnoreCase</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>a7d559a8b17cc2b7371fee2f8bcd80d19</anchor>
      <arglist>(StringRef wordToLookFor) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>indexOfWholeWord</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>a54c44577bfc53bc24cbf4b713e6903c8</anchor>
      <arglist>(StringRef wordToLookFor) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>indexOfWholeWordIgnoreCase</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>a30bb992eb4e7eccb07e7f53cbe7b3786</anchor>
      <arglist>(StringRef wordToLookFor) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>containsAnyOf</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>aa3dbb018732eec531e35d6c2ddda2e8d</anchor>
      <arglist>(StringRef charactersItMightContain) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>containsOnly</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>aedd69a9c74e837bed5358acd2a625fec</anchor>
      <arglist>(StringRef charactersItMightContain) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>containsNonWhitespaceChars</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>a71ebee1094650e80b02a20040f4fdc8f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>matchesWildcard</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>a7fb6b84a567ee51945f3b4082e0f43cf</anchor>
      <arglist>(StringRef wildcard, bool ignoreCase) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>indexOfChar</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>ae47807810f99d10d0cb02f3941141249</anchor>
      <arglist>(juce_wchar characterToLookFor) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>indexOfChar</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>a39e731460ea27286bd31096e4e508202</anchor>
      <arglist>(int startIndex, juce_wchar characterToLookFor) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>indexOfAnyOf</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>a77d11c2937d6d8254fa5387b5a96c2d4</anchor>
      <arglist>(StringRef charactersToLookFor, int startIndex=0, bool ignoreCase=false) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>indexOf</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>aa0a75c8f5172d08feb78d1e45815f83c</anchor>
      <arglist>(StringRef textToLookFor) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>indexOf</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>a99a8dce62a8a37e3115cb298b62070d8</anchor>
      <arglist>(int startIndex, StringRef textToLookFor) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>indexOfIgnoreCase</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>abcc73c20c7487d82b8d57b7027826986</anchor>
      <arglist>(StringRef textToLookFor) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>indexOfIgnoreCase</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>a7ad5728bb4eed2d9ee95614148360b3b</anchor>
      <arglist>(int startIndex, StringRef textToLookFor) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>lastIndexOfChar</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>a0ced47fc04dd1be838e1e45dbeb8454f</anchor>
      <arglist>(juce_wchar character) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>lastIndexOf</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>ac484b0755a80d8949c68a414b97e93af</anchor>
      <arglist>(StringRef textToLookFor) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>lastIndexOfIgnoreCase</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>acef7fabc5dae953eabbea57f1ab0a05c</anchor>
      <arglist>(StringRef textToLookFor) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>lastIndexOfAnyOf</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>a0d7b8d46182d86bc4b57d2d5fb40430e</anchor>
      <arglist>(StringRef charactersToLookFor, bool ignoreCase=false) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>juce_wchar</type>
      <name>operator[]</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>a29c74fe30fd4e170857d492d002a8e79</anchor>
      <arglist>(int index) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>juce_wchar</type>
      <name>getLastCharacter</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>a601ee2751c6ba60b70875de52ef86a90</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>substring</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>a43434e38d6300080500510a5afba4747</anchor>
      <arglist>(int startIndex, int endIndex) const </arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>substring</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>aaff623ca4e4d03db790907e97be0419b</anchor>
      <arglist>(int startIndex) const </arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>dropLastCharacters</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>a10b73eaa851a966058b59946b29b7142</anchor>
      <arglist>(int numberToDrop) const </arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>getLastCharacters</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>a69d8401edbef61b3e2254a06fca8485e</anchor>
      <arglist>(int numCharacters) const </arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>fromFirstOccurrenceOf</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>a5d24cab2f6f567dd318457e846343b14</anchor>
      <arglist>(StringRef substringToStartFrom, bool includeSubStringInResult, bool ignoreCase) const </arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>fromLastOccurrenceOf</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>a0ef98c80f56db42bae79054ba9e83978</anchor>
      <arglist>(StringRef substringToFind, bool includeSubStringInResult, bool ignoreCase) const </arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>upToFirstOccurrenceOf</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>ad1294b09bf9e6c1f8723f0559744b0b0</anchor>
      <arglist>(StringRef substringToEndWith, bool includeSubStringInResult, bool ignoreCase) const </arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>upToLastOccurrenceOf</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>a50bedd44d60007d619665664413fe1d8</anchor>
      <arglist>(StringRef substringToFind, bool includeSubStringInResult, bool ignoreCase) const </arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>trim</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>ad3853992f01ae00f2e6ed2d4eda85fb6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>trimStart</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>afc8c1ef8badb8787ca6057506ad9b742</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>trimEnd</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>a87ccf2ec72c1a478e69d44495c367194</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>trimCharactersAtStart</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>ac80770a27fd6b233e0cefc750f7f42e0</anchor>
      <arglist>(StringRef charactersToTrim) const </arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>trimCharactersAtEnd</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>a43b272afe8e764cb0546d094f22b8162</anchor>
      <arglist>(StringRef charactersToTrim) const </arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>toUpperCase</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>a1be059135eecd087baca2174ed403516</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>toLowerCase</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>a17f872d6422e11d2b9c3902f800dc19c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>replaceSection</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>ad31328c3ca7f43bae6c32fc59ff7b118</anchor>
      <arglist>(int startIndex, int numCharactersToReplace, StringRef stringToInsert) const </arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>replace</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>ae70a4747280356abf4704d234bd23020</anchor>
      <arglist>(StringRef stringToReplace, StringRef stringToInsertInstead, bool ignoreCase=false) const </arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>replaceFirstOccurrenceOf</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>a51bab0703c84aed277bc806a6b818cf8</anchor>
      <arglist>(StringRef stringToReplace, StringRef stringToInsertInstead, bool ignoreCase=false) const </arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>replaceCharacter</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>a9ea2aecb5316d2777e7911dae3c74d01</anchor>
      <arglist>(juce_wchar characterToReplace, juce_wchar characterToInsertInstead) const </arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>replaceCharacters</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>ac2f2123e32f791b575c4ab6b9461590e</anchor>
      <arglist>(StringRef charactersToReplace, StringRef charactersToInsertInstead) const </arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>retainCharacters</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>a509ef3d4fc6f6ca65f5a264810b9e97c</anchor>
      <arglist>(StringRef charactersToRetain) const </arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>removeCharacters</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>a78976031828eaca6ce231d6e4b21dc8f</anchor>
      <arglist>(StringRef charactersToRemove) const </arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>initialSectionContainingOnly</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>a152ad370daee3ef28abda0f56eaf6f17</anchor>
      <arglist>(StringRef permittedCharacters) const </arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>initialSectionNotContaining</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>a85a7e46052e088e07bf2148d8ea667a8</anchor>
      <arglist>(StringRef charactersToStopAt) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isQuotedString</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>ad7383efa79a52af75128879bfbde4f62</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>unquoted</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>a3f11c24fd2d9f5d2ba5d964a7f69dd63</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>quoted</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>adca0932895bcd08c3b3c489a5c564b4b</anchor>
      <arglist>(juce_wchar quoteCharacter= &apos;&quot;&apos;) const </arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>paddedLeft</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>a4ccbd5dbd87dab746beacb665cd16664</anchor>
      <arglist>(juce_wchar padCharacter, int minimumLength) const </arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>paddedRight</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>aa9f8d9ac6f2b8ed68a948d407bb0a484</anchor>
      <arglist>(juce_wchar padCharacter, int minimumLength) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>String</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>ad7ee58d05b03f2b8cfe72baf238534c3</anchor>
      <arglist>(int decimalInteger)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>String</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>a0415a1afd9ce1b22782e17f3e4b8a0d2</anchor>
      <arglist>(unsigned int decimalInteger)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>String</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>a936b34985edfafa5b9534c7fbfb3fba3</anchor>
      <arglist>(short decimalInteger)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>String</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>a154fd82b5d27d12a4fd5897571064720</anchor>
      <arglist>(unsigned short decimalInteger)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>String</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>a09febd27242ddf3a4c686174d555ce32</anchor>
      <arglist>(int64 largeIntegerValue)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>String</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>a2f79c46cac832786e093c534be743041</anchor>
      <arglist>(uint64 largeIntegerValue)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>String</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>aaed7661e8299ecf71da83cf55d09a883</anchor>
      <arglist>(long decimalInteger)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>String</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>a925c99178d3e775237a63c0f4fb2a75b</anchor>
      <arglist>(unsigned long decimalInteger)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>String</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>a8c2c5a09bec903f4c1ea4262f7a89b5c</anchor>
      <arglist>(float floatValue)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>String</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>a560dc69649820575d4766bbb35a0d42d</anchor>
      <arglist>(double doubleValue)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>String</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>a2bb93103a892202c99c051bce7fc1aa5</anchor>
      <arglist>(float floatValue, int numberOfDecimalPlaces)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>String</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>ae9c57b8842616c5689c63aa95161ca5b</anchor>
      <arglist>(double doubleValue, int numberOfDecimalPlaces)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getIntValue</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>accbe0d347261658661458bad2c63dbe1</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>getLargeIntValue</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>a6dccbaf8b50ab06bf2f26cf0559c9950</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getTrailingIntValue</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>abd616012b8acd59d71e99bada2d7a107</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getFloatValue</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>a2ec3f03e88700a5ff13f5b61857003f4</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getDoubleValue</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>a6d747e66888a9c7ee562ab5b67e78c3b</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getHexValue32</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>aabd5ab574e90ad82058de70b01ed0843</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>getHexValue64</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>a9266203eddcdfec35140fcb6e7535745</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>CharPointerType</type>
      <name>getCharPointer</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>a026f5d21f882d2ffe0406ef1e4907897</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>CharPointer_UTF8</type>
      <name>toUTF8</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>ae9e2c87c3ff8410e4f70a02288ece2dd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>toRawUTF8</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>a8a80cdeb14adeea1bf04d431a9333757</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>CharPointer_UTF16</type>
      <name>toUTF16</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>a42615fce86848058d0234dbc157d0529</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>CharPointer_UTF32</type>
      <name>toUTF32</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>aeaee566db302127fdea2d93f5464ccc4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const wchar_t *</type>
      <name>toWideCharPointer</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>ae79ca95309b6b8a7987e8b2f2efef297</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toStdString</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>a43819a7143cc2f6323af13dbcb3b6d4c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>getNumBytesAsUTF8</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>a3c49b0a5273b24e4b287a9f12b757514</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>copyToUTF8</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>a7f0b4a4704bda8f1a22a0078fb19ae06</anchor>
      <arglist>(CharPointer_UTF8::CharType *destBuffer, size_t maxBufferSizeBytes) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>copyToUTF16</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>afa37808ed30e583f84bef142c2c9478d</anchor>
      <arglist>(CharPointer_UTF16::CharType *destBuffer, size_t maxBufferSizeBytes) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>copyToUTF32</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>a9ed1dd6451ad425adecb1e085b281e0b</anchor>
      <arglist>(CharPointer_UTF32::CharType *destBuffer, size_t maxBufferSizeBytes) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>preallocateBytes</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>a050a97b5afa6e3dd774f10f1c616ee58</anchor>
      <arglist>(size_t numBytesNeeded)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swapWith</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>a3c9d0c0fa36976d1714e84ecd4be1156</anchor>
      <arglist>(String &amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>CFStringRef</type>
      <name>toCFString</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>a3d3927f416d704b9d1878b379aafdc84</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>convertToPrecomposedUnicode</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>adbd232e1d2a0f160837ffe08a716cf30</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getReferenceCount</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>ab144d2ca61fae33e9fc6a8037dba7a7a</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static String</type>
      <name>charToString</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>ad8e46a02123c89fcd055b189d97c4557</anchor>
      <arglist>(juce_wchar character)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static String</type>
      <name>repeatedString</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>a4fc0dd97b394be6c28879fd4595b0667</anchor>
      <arglist>(StringRef stringToRepeat, int numberOfTimesToRepeat)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static String</type>
      <name>createStringFromData</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>ab04851d4bb0e7c36e20202541ab6fdf0</anchor>
      <arglist>(const void *data, int size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static String</type>
      <name>formatted</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>ac42e4a0dee272e886879685dc0c83387</anchor>
      <arglist>(const String formatString,...)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static String</type>
      <name>toHexString</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>af8791d592b21b466cf040c1728b92dac</anchor>
      <arglist>(int number)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static String</type>
      <name>toHexString</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>a4d4129cbdaaa1ead05285c46290e0329</anchor>
      <arglist>(int64 number)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static String</type>
      <name>toHexString</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>a43b4c11f55b69aae296bfa8671a82e97</anchor>
      <arglist>(short number)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static String</type>
      <name>toHexString</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>aa75e1ef8ccb4c326e9dab9de960c7d85</anchor>
      <arglist>(const void *data, int size, int groupSize=1)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static String</type>
      <name>fromUTF8</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>aa0116dc51d7bdd363d14c72bba60060a</anchor>
      <arglist>(const char *utf8buffer, int bufferSizeBytes=-1)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static String</type>
      <name>fromCFString</name>
      <anchorfile>classString.html</anchorfile>
      <anchor>a080d955ce1e06ea976077db710bb83a6</anchor>
      <arglist>(CFStringRef cfString)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>StringArray</name>
    <filename>classStringArray.html</filename>
    <member kind="function">
      <type></type>
      <name>StringArray</name>
      <anchorfile>classStringArray.html</anchorfile>
      <anchor>a8f49223d5dc3b3297041ebb1f521afc8</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StringArray</name>
      <anchorfile>classStringArray.html</anchorfile>
      <anchor>aad23b00075ddee1299f8834a7b06e18e</anchor>
      <arglist>(const StringArray &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StringArray</name>
      <anchorfile>classStringArray.html</anchorfile>
      <anchor>a715d3e604955579ab6baddf56f58c867</anchor>
      <arglist>(StringArray &amp;&amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StringArray</name>
      <anchorfile>classStringArray.html</anchorfile>
      <anchor>ae6f14ef13b38675c347588118e0c8292</anchor>
      <arglist>(const String &amp;firstValue)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StringArray</name>
      <anchorfile>classStringArray.html</anchorfile>
      <anchor>a44484ff04a4ca758e4c12abb206342cd</anchor>
      <arglist>(const String *strings, int numberOfStrings)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StringArray</name>
      <anchorfile>classStringArray.html</anchorfile>
      <anchor>a0d5646cc1cb01041160f6ff69554798f</anchor>
      <arglist>(const char *const *strings, int numberOfStrings)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StringArray</name>
      <anchorfile>classStringArray.html</anchorfile>
      <anchor>a72c3f712791ceedb1a84f657aa977946</anchor>
      <arglist>(const char *const *strings)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StringArray</name>
      <anchorfile>classStringArray.html</anchorfile>
      <anchor>a09861edeec2b2a18cf33df653ca79415</anchor>
      <arglist>(const wchar_t *const *strings)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StringArray</name>
      <anchorfile>classStringArray.html</anchorfile>
      <anchor>ae27a0ecbaf5dfd7328fa884ded90aac3</anchor>
      <arglist>(const wchar_t *const *strings, int numberOfStrings)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StringArray</name>
      <anchorfile>classStringArray.html</anchorfile>
      <anchor>aeabb8817e379dc5581241d34c9a1603f</anchor>
      <arglist>(const std::initializer_list&lt; const char * &gt; &amp;strings)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~StringArray</name>
      <anchorfile>classStringArray.html</anchorfile>
      <anchor>af1fc945005ae8a218d30c3281e0b64bd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>StringArray &amp;</type>
      <name>operator=</name>
      <anchorfile>classStringArray.html</anchorfile>
      <anchor>ab0e23bc3220c4c798c20d511d0e6edc5</anchor>
      <arglist>(const StringArray &amp;)</arglist>
    </member>
    <member kind="function">
      <type>StringArray &amp;</type>
      <name>operator=</name>
      <anchorfile>classStringArray.html</anchorfile>
      <anchor>aa32a3dfc4107eb3ad4a57c89a8ffa72c</anchor>
      <arglist>(StringArray &amp;&amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swapWith</name>
      <anchorfile>classStringArray.html</anchorfile>
      <anchor>a1515567d67ef35fb6a45d47943344d02</anchor>
      <arglist>(StringArray &amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classStringArray.html</anchorfile>
      <anchor>ac916954218dbd3710c338659727e1432</anchor>
      <arglist>(const StringArray &amp;) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classStringArray.html</anchorfile>
      <anchor>aa7075356a79fa6af169c6987521a5ec1</anchor>
      <arglist>(const StringArray &amp;) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>classStringArray.html</anchorfile>
      <anchor>af1eb48dd90938eb34d9f43cf7d81510b</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEmpty</name>
      <anchorfile>classStringArray.html</anchorfile>
      <anchor>a7843a71dbef31c4b03a1834ede2f83ed</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const String &amp;</type>
      <name>operator[]</name>
      <anchorfile>classStringArray.html</anchorfile>
      <anchor>a4e1e61c92ae6fc44c3a6226584c09db1</anchor>
      <arglist>(int index) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>String &amp;</type>
      <name>getReference</name>
      <anchorfile>classStringArray.html</anchorfile>
      <anchor>a9fcafc44085fa930f009adfabad70faf</anchor>
      <arglist>(int index) noexcept</arglist>
    </member>
    <member kind="function">
      <type>String *</type>
      <name>begin</name>
      <anchorfile>classStringArray.html</anchorfile>
      <anchor>a8b297798829a0196e0c45abf75b7cc4c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>String *</type>
      <name>end</name>
      <anchorfile>classStringArray.html</anchorfile>
      <anchor>aed7e07d0f7c696caa7f62be5416d66e3</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>classStringArray.html</anchorfile>
      <anchor>a511adee6b43041b72ae2daadd035b032</anchor>
      <arglist>(StringRef stringToLookFor, bool ignoreCase=false) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>indexOf</name>
      <anchorfile>classStringArray.html</anchorfile>
      <anchor>ace74f309c731e763cd7b7ac0e5abe347</anchor>
      <arglist>(StringRef stringToLookFor, bool ignoreCase=false, int startIndex=0) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>classStringArray.html</anchorfile>
      <anchor>ac0e8e4b0c3d3345b9ee429c00571bb6e</anchor>
      <arglist>(const String &amp;stringToAdd)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>classStringArray.html</anchorfile>
      <anchor>af31c4a4e2ef442702d2a44995cb68668</anchor>
      <arglist>(String &amp;&amp;stringToAdd)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insert</name>
      <anchorfile>classStringArray.html</anchorfile>
      <anchor>a29578712f416e2fd49c201e81aecf7a6</anchor>
      <arglist>(int index, const String &amp;stringToAdd)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addIfNotAlreadyThere</name>
      <anchorfile>classStringArray.html</anchorfile>
      <anchor>a0bab24d5ae62e47c9e8d14370a203ebf</anchor>
      <arglist>(const String &amp;stringToAdd, bool ignoreCase=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classStringArray.html</anchorfile>
      <anchor>a89bafb28cdb58cf763fd31d46be4fcb2</anchor>
      <arglist>(int index, const String &amp;newString)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addArray</name>
      <anchorfile>classStringArray.html</anchorfile>
      <anchor>a8956efc061115a5e6a6942e23bb54e94</anchor>
      <arglist>(const StringArray &amp;other, int startIndex=0, int numElementsToAdd=-1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mergeArray</name>
      <anchorfile>classStringArray.html</anchorfile>
      <anchor>a90dab8805607042742fa64f74f56069c</anchor>
      <arglist>(const StringArray &amp;other, bool ignoreCase=false)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addTokens</name>
      <anchorfile>classStringArray.html</anchorfile>
      <anchor>ab44beddf09ddd94a1e79a7afaac4de8d</anchor>
      <arglist>(StringRef stringToTokenise, bool preserveQuotedStrings)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addTokens</name>
      <anchorfile>classStringArray.html</anchorfile>
      <anchor>aa79b07342051f604e87a3018aa3a9e69</anchor>
      <arglist>(StringRef stringToTokenise, StringRef breakCharacters, StringRef quoteCharacters)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addLines</name>
      <anchorfile>classStringArray.html</anchorfile>
      <anchor>adb4313d5c407f2902c4a93b681f16446</anchor>
      <arglist>(StringRef stringToBreakUp)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classStringArray.html</anchorfile>
      <anchor>a8fd0efd89f558e84cda917aa3ecc3525</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearQuick</name>
      <anchorfile>classStringArray.html</anchorfile>
      <anchor>af9d9a976e22e13835726d090d84dff29</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove</name>
      <anchorfile>classStringArray.html</anchorfile>
      <anchor>ae27471eb302af1a8d7b6c926f3ea1493</anchor>
      <arglist>(int index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeString</name>
      <anchorfile>classStringArray.html</anchorfile>
      <anchor>a9abe22d7414300712049474acede134f</anchor>
      <arglist>(StringRef stringToRemove, bool ignoreCase=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeRange</name>
      <anchorfile>classStringArray.html</anchorfile>
      <anchor>a2216e379f5d770af94d4d6c2fec4cee3</anchor>
      <arglist>(int startIndex, int numberToRemove)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeDuplicates</name>
      <anchorfile>classStringArray.html</anchorfile>
      <anchor>a7b58a0f51932aac6b39becff596d45fe</anchor>
      <arglist>(bool ignoreCase)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeEmptyStrings</name>
      <anchorfile>classStringArray.html</anchorfile>
      <anchor>aa2e6e609b16c3169e07d8668bf2b7a52</anchor>
      <arglist>(bool removeWhitespaceStrings=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>move</name>
      <anchorfile>classStringArray.html</anchorfile>
      <anchor>aeab89baddf070e90bdfb5c320a054ed8</anchor>
      <arglist>(int currentIndex, int newIndex) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>trim</name>
      <anchorfile>classStringArray.html</anchorfile>
      <anchor>ad490560fcac30925d422ad98709ca361</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>appendNumbersToDuplicates</name>
      <anchorfile>classStringArray.html</anchorfile>
      <anchor>a9a2b916e858c3f5d941c751220216387</anchor>
      <arglist>(bool ignoreCaseWhenComparing, bool appendNumberToFirstInstance, CharPointer_UTF8 preNumberString=CharPointer_UTF8(nullptr), CharPointer_UTF8 postNumberString=CharPointer_UTF8(nullptr))</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>joinIntoString</name>
      <anchorfile>classStringArray.html</anchorfile>
      <anchor>a53bea36f7d9663c8b3cf69619ae5462b</anchor>
      <arglist>(StringRef separatorString, int startIndex=0, int numberOfElements=-1) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sort</name>
      <anchorfile>classStringArray.html</anchorfile>
      <anchor>a4ff31dc08e6e33f3ba95ebdc296e3659</anchor>
      <arglist>(bool ignoreCase)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sortNatural</name>
      <anchorfile>classStringArray.html</anchorfile>
      <anchor>a1705d74b47e764f80e273f1a98bf91cf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ensureStorageAllocated</name>
      <anchorfile>classStringArray.html</anchorfile>
      <anchor>aebd425623aa9e8a4dd8d09b8e6eac0db</anchor>
      <arglist>(int minNumElements)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>minimiseStorageOverheads</name>
      <anchorfile>classStringArray.html</anchorfile>
      <anchor>ad918c336c4ce47a405e1f718e1e8215d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StringArray</type>
      <name>fromTokens</name>
      <anchorfile>classStringArray.html</anchorfile>
      <anchor>a2996bff706bcf449fbdab264c266307a</anchor>
      <arglist>(StringRef stringToTokenise, bool preserveQuotedStrings)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StringArray</type>
      <name>fromTokens</name>
      <anchorfile>classStringArray.html</anchorfile>
      <anchor>a054a8f035e17076b2f1428995517fc2d</anchor>
      <arglist>(StringRef stringToTokenise, StringRef breakCharacters, StringRef quoteCharacters)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StringArray</type>
      <name>fromLines</name>
      <anchorfile>classStringArray.html</anchorfile>
      <anchor>aa65070cc0eda93b9ebb7da2b1325781b</anchor>
      <arglist>(StringRef stringToBreakUp)</arglist>
    </member>
    <member kind="variable">
      <type>Array&lt; String &gt;</type>
      <name>strings</name>
      <anchorfile>classStringArray.html</anchorfile>
      <anchor>ac10f010a31e1dcd6220d278a1603e37a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>StringPairArray</name>
    <filename>classStringPairArray.html</filename>
    <member kind="function">
      <type></type>
      <name>StringPairArray</name>
      <anchorfile>classStringPairArray.html</anchorfile>
      <anchor>a606a520b01b1c8505ae5bba847ac0d85</anchor>
      <arglist>(bool ignoreCaseWhenComparingKeys=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StringPairArray</name>
      <anchorfile>classStringPairArray.html</anchorfile>
      <anchor>ae9d7222fa917d07fa51815681bd61f50</anchor>
      <arglist>(const StringPairArray &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~StringPairArray</name>
      <anchorfile>classStringPairArray.html</anchorfile>
      <anchor>a0e01064c8cd1ae16f106673552306d99</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>StringPairArray &amp;</type>
      <name>operator=</name>
      <anchorfile>classStringPairArray.html</anchorfile>
      <anchor>a2d261429821952f6a05d4b198c921486</anchor>
      <arglist>(const StringPairArray &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classStringPairArray.html</anchorfile>
      <anchor>a186c24a07562694f96648eb289c0ef1a</anchor>
      <arglist>(const StringPairArray &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classStringPairArray.html</anchorfile>
      <anchor>a07d7939477e62a9c5662a1099efe581e</anchor>
      <arglist>(const StringPairArray &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>const String &amp;</type>
      <name>operator[]</name>
      <anchorfile>classStringPairArray.html</anchorfile>
      <anchor>a468a8e5db7c4efa6a3279128a66c8caa</anchor>
      <arglist>(StringRef key) const </arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>getValue</name>
      <anchorfile>classStringPairArray.html</anchorfile>
      <anchor>a9fd95d4c6354e3eac6bab1ec9389bba0</anchor>
      <arglist>(StringRef, const String &amp;defaultReturnValue) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>containsKey</name>
      <anchorfile>classStringPairArray.html</anchorfile>
      <anchor>a8dfe1dba255e20925aa760fca094099d</anchor>
      <arglist>(StringRef key) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const StringArray &amp;</type>
      <name>getAllKeys</name>
      <anchorfile>classStringPairArray.html</anchorfile>
      <anchor>afe09f8163564ff39529f5c942977b691</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const StringArray &amp;</type>
      <name>getAllValues</name>
      <anchorfile>classStringPairArray.html</anchorfile>
      <anchor>a3a82ff57a56741ebe88729e926f593af</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>classStringPairArray.html</anchorfile>
      <anchor>ae488d0a644afedc40004d37c938f3e8e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classStringPairArray.html</anchorfile>
      <anchor>a1a9a1f077d33f143b50628bd35f69516</anchor>
      <arglist>(const String &amp;key, const String &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addArray</name>
      <anchorfile>classStringPairArray.html</anchorfile>
      <anchor>a15be7425b909b9aded5eddf69f096466</anchor>
      <arglist>(const StringPairArray &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classStringPairArray.html</anchorfile>
      <anchor>a79f8a87870700e5cb53a5a4f5d05658f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove</name>
      <anchorfile>classStringPairArray.html</anchorfile>
      <anchor>a33110fcda0e416e0e7581387f6965678</anchor>
      <arglist>(StringRef key)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove</name>
      <anchorfile>classStringPairArray.html</anchorfile>
      <anchor>aafc00fcda71c9832f6f77f0fba7c781e</anchor>
      <arglist>(int index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIgnoresCase</name>
      <anchorfile>classStringPairArray.html</anchorfile>
      <anchor>a6d884d5d61f3617e2290bba08fa4effa</anchor>
      <arglist>(bool shouldIgnoreCase)</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>getDescription</name>
      <anchorfile>classStringPairArray.html</anchorfile>
      <anchor>a050b30ffdf7ad821229a92d5a5cec2a0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>minimiseStorageOverheads</name>
      <anchorfile>classStringPairArray.html</anchorfile>
      <anchor>a35917c28f68b33afe84e2a22a373a67d</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>StringPool</name>
    <filename>classStringPool.html</filename>
    <member kind="function">
      <type></type>
      <name>StringPool</name>
      <anchorfile>classStringPool.html</anchorfile>
      <anchor>aab1fd1101bfe15304bd618b3eeedfc0e</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~StringPool</name>
      <anchorfile>classStringPool.html</anchorfile>
      <anchor>a890f0cea498819f637aff75d32e8f0dd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>getPooledString</name>
      <anchorfile>classStringPool.html</anchorfile>
      <anchor>aae5ff870a5147dddfc6e983f058c3a17</anchor>
      <arglist>(const String &amp;original)</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>getPooledString</name>
      <anchorfile>classStringPool.html</anchorfile>
      <anchor>a53e9e1b9c1ad68776fe41f439b0d9d96</anchor>
      <arglist>(const char *original)</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>getPooledString</name>
      <anchorfile>classStringPool.html</anchorfile>
      <anchor>a00c62de7b80b6a9b397b1838a77ed48b</anchor>
      <arglist>(StringRef original)</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>getPooledString</name>
      <anchorfile>classStringPool.html</anchorfile>
      <anchor>a0f4e16858b5b562196712c6bd7b219c3</anchor>
      <arglist>(String::CharPointerType start, String::CharPointerType end)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>garbageCollect</name>
      <anchorfile>classStringPool.html</anchorfile>
      <anchor>a304c7b871b037a619af828a1d1300417</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StringPool &amp;</type>
      <name>getGlobalPool</name>
      <anchorfile>classStringPool.html</anchorfile>
      <anchor>a3fafb36830141853af13654563225ecb</anchor>
      <arglist>() noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>StringRef</name>
    <filename>classStringRef.html</filename>
    <member kind="function">
      <type></type>
      <name>StringRef</name>
      <anchorfile>classStringRef.html</anchorfile>
      <anchor>afdd484f4bdb44927ffc3ae24292f0cd6</anchor>
      <arglist>(const char *stringLiteral) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StringRef</name>
      <anchorfile>classStringRef.html</anchorfile>
      <anchor>a4c1e86162550a9fa7f3f9aa65b9cc74a</anchor>
      <arglist>(String::CharPointerType stringLiteral) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StringRef</name>
      <anchorfile>classStringRef.html</anchorfile>
      <anchor>a47ea3e1c936ecf660bf9f98b7f75d28e</anchor>
      <arglist>(const String &amp;string) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StringRef</name>
      <anchorfile>classStringRef.html</anchorfile>
      <anchor>a7ed3eed766b7dac3eaad6e7fe0f6a920</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const String::CharPointerType::CharType *</name>
      <anchorfile>classStringRef.html</anchorfile>
      <anchor>a9fdf0812da686c16598871b20ae7bab8</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator String::CharPointerType</name>
      <anchorfile>classStringRef.html</anchorfile>
      <anchor>ad55d30afe25364e21e2f3a69c65de747</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEmpty</name>
      <anchorfile>classStringRef.html</anchorfile>
      <anchor>a767c25863e7e107f6dc465fa88ebf1f4</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNotEmpty</name>
      <anchorfile>classStringRef.html</anchorfile>
      <anchor>a289e7892dc5a52aa19dcb47127b0154d</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>length</name>
      <anchorfile>classStringRef.html</anchorfile>
      <anchor>aab566908106a7a19c17d45bbfbbd5849</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>juce_wchar</type>
      <name>operator[]</name>
      <anchorfile>classStringRef.html</anchorfile>
      <anchor>af48c6d8e1ca7c27911922e13a87096a9</anchor>
      <arglist>(int index) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classStringRef.html</anchorfile>
      <anchor>a10959a6c9442157518a6becb8f7bd3f7</anchor>
      <arglist>(const String &amp;s) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classStringRef.html</anchorfile>
      <anchor>a4a795a1c11c40714951a19dcca2cd441</anchor>
      <arglist>(const String &amp;s) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classStringRef.html</anchorfile>
      <anchor>a2c5652f5780779945bf238555b29a715</anchor>
      <arglist>(StringRef s) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classStringRef.html</anchorfile>
      <anchor>a7daa77216405e3d71d5c266088734d80</anchor>
      <arglist>(StringRef s) const noexcept</arglist>
    </member>
    <member kind="variable">
      <type>String::CharPointerType</type>
      <name>text</name>
      <anchorfile>classStringRef.html</anchorfile>
      <anchor>a6a1889712d28a2d8725890b04e8bc020</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SubregionStream</name>
    <filename>classSubregionStream.html</filename>
    <base>InputStream</base>
    <member kind="function">
      <type></type>
      <name>SubregionStream</name>
      <anchorfile>classSubregionStream.html</anchorfile>
      <anchor>adc9f6200b4539e1e22f5a2560c4af0cc</anchor>
      <arglist>(InputStream *sourceStream, int64 startPositionInSourceStream, int64 lengthOfSourceStream, bool deleteSourceWhenDestroyed)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SubregionStream</name>
      <anchorfile>classSubregionStream.html</anchorfile>
      <anchor>a7729cd20a29f61514753c33992fda24f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>getTotalLength</name>
      <anchorfile>classSubregionStream.html</anchorfile>
      <anchor>a441905b743b491d74e5df6ee93ac2cbc</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>getPosition</name>
      <anchorfile>classSubregionStream.html</anchorfile>
      <anchor>afafd50358717a1740a4d5bbb8364be61</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setPosition</name>
      <anchorfile>classSubregionStream.html</anchorfile>
      <anchor>a03d20081b8094f142d853b4f964d65e3</anchor>
      <arglist>(int64 newPosition) override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>read</name>
      <anchorfile>classSubregionStream.html</anchorfile>
      <anchor>ab1ccc36bcfae767109fa12fb03b4de31</anchor>
      <arglist>(void *destBuffer, int maxBytesToRead) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isExhausted</name>
      <anchorfile>classSubregionStream.html</anchorfile>
      <anchor>afc7bc8ebf245d894aa7974ba15f77b36</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Synthesiser</name>
    <filename>classSynthesiser.html</filename>
    <member kind="function">
      <type></type>
      <name>Synthesiser</name>
      <anchorfile>classSynthesiser.html</anchorfile>
      <anchor>a8c313d6f1fa875790e5c79dc621ee437</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Synthesiser</name>
      <anchorfile>classSynthesiser.html</anchorfile>
      <anchor>af92647b0dced33f5c3a99be3ddcfcd8e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearVoices</name>
      <anchorfile>classSynthesiser.html</anchorfile>
      <anchor>a94391dd12deab56c0fa8079fd97e7f55</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumVoices</name>
      <anchorfile>classSynthesiser.html</anchorfile>
      <anchor>ac8c97159cdb74440314ca50ad312d31a</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>SynthesiserVoice *</type>
      <name>getVoice</name>
      <anchorfile>classSynthesiser.html</anchorfile>
      <anchor>aa8987eca90d45f239d929b9f9fd47f45</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function">
      <type>SynthesiserVoice *</type>
      <name>addVoice</name>
      <anchorfile>classSynthesiser.html</anchorfile>
      <anchor>a0806a426d99a36367c714b7d433d4d4e</anchor>
      <arglist>(SynthesiserVoice *newVoice)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeVoice</name>
      <anchorfile>classSynthesiser.html</anchorfile>
      <anchor>a5478d766609fad27af17ed011f2422dd</anchor>
      <arglist>(int index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearSounds</name>
      <anchorfile>classSynthesiser.html</anchorfile>
      <anchor>af6dc83c7e8c7ce8e06a5fe08ae2e3018</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumSounds</name>
      <anchorfile>classSynthesiser.html</anchorfile>
      <anchor>aed27b08e9ce240546294b109a6c31c7e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>SynthesiserSound *</type>
      <name>getSound</name>
      <anchorfile>classSynthesiser.html</anchorfile>
      <anchor>a71626e6df15d04f19688a1f19e7a3285</anchor>
      <arglist>(int index) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>SynthesiserSound *</type>
      <name>addSound</name>
      <anchorfile>classSynthesiser.html</anchorfile>
      <anchor>ac76a3fe3505d18da550eddec5d151cab</anchor>
      <arglist>(const SynthesiserSound::Ptr &amp;newSound)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeSound</name>
      <anchorfile>classSynthesiser.html</anchorfile>
      <anchor>a4e90dec472345cac6c827fb402fd382f</anchor>
      <arglist>(int index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNoteStealingEnabled</name>
      <anchorfile>classSynthesiser.html</anchorfile>
      <anchor>ae0bbfe2c3819167dc5d98b27b21843eb</anchor>
      <arglist>(bool shouldStealNotes)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNoteStealingEnabled</name>
      <anchorfile>classSynthesiser.html</anchorfile>
      <anchor>a069564c6c68a5cbd4872fa3da0e80d1f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>noteOn</name>
      <anchorfile>classSynthesiser.html</anchorfile>
      <anchor>a488dbf4f02973011c95656eefc1fb862</anchor>
      <arglist>(int midiChannel, int midiNoteNumber, float velocity)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>noteOff</name>
      <anchorfile>classSynthesiser.html</anchorfile>
      <anchor>af67d93a1499cbd875c6187cbd4add517</anchor>
      <arglist>(int midiChannel, int midiNoteNumber, float velocity, bool allowTailOff)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>allNotesOff</name>
      <anchorfile>classSynthesiser.html</anchorfile>
      <anchor>ac39e7b038c545b92e9f69b47bce54934</anchor>
      <arglist>(int midiChannel, bool allowTailOff)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handlePitchWheel</name>
      <anchorfile>classSynthesiser.html</anchorfile>
      <anchor>aab0454e1b68d82aada5b7d4561b3af49</anchor>
      <arglist>(int midiChannel, int wheelValue)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handleController</name>
      <anchorfile>classSynthesiser.html</anchorfile>
      <anchor>ae2dc8a91aff04f2e23b6ac22b4dd80a8</anchor>
      <arglist>(int midiChannel, int controllerNumber, int controllerValue)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handleAftertouch</name>
      <anchorfile>classSynthesiser.html</anchorfile>
      <anchor>ae92ed64d170257574b9009b3384bde01</anchor>
      <arglist>(int midiChannel, int midiNoteNumber, int aftertouchValue)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handleChannelPressure</name>
      <anchorfile>classSynthesiser.html</anchorfile>
      <anchor>aa1f2fdbce8a6502c52c70d34c3e52697</anchor>
      <arglist>(int midiChannel, int channelPressureValue)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handleSustainPedal</name>
      <anchorfile>classSynthesiser.html</anchorfile>
      <anchor>a393f210a6c793d6d38221a346e961a23</anchor>
      <arglist>(int midiChannel, bool isDown)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handleSostenutoPedal</name>
      <anchorfile>classSynthesiser.html</anchorfile>
      <anchor>a7876cd621f700a1500cfc026f082f2a4</anchor>
      <arglist>(int midiChannel, bool isDown)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handleSoftPedal</name>
      <anchorfile>classSynthesiser.html</anchorfile>
      <anchor>ab543d69d50273a8adce9b54b145a28eb</anchor>
      <arglist>(int midiChannel, bool isDown)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handleProgramChange</name>
      <anchorfile>classSynthesiser.html</anchorfile>
      <anchor>a542e7ea8aaed30728dfa72a898ae1a9f</anchor>
      <arglist>(int midiChannel, int programNumber)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCurrentPlaybackSampleRate</name>
      <anchorfile>classSynthesiser.html</anchorfile>
      <anchor>ae0d6808e5a22bc3a56a68dab1f106ab8</anchor>
      <arglist>(double sampleRate)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>renderNextBlock</name>
      <anchorfile>classSynthesiser.html</anchorfile>
      <anchor>a56b85b35ec0fbf296c58571ab5bc2ed8</anchor>
      <arglist>(AudioBuffer&lt; float &gt; &amp;outputAudio, const MidiBuffer &amp;inputMidi, int startSample, int numSamples)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>renderNextBlock</name>
      <anchorfile>classSynthesiser.html</anchorfile>
      <anchor>a639d740854635aa4e962367b380c655a</anchor>
      <arglist>(AudioBuffer&lt; double &gt; &amp;outputAudio, const MidiBuffer &amp;inputMidi, int startSample, int numSamples)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getSampleRate</name>
      <anchorfile>classSynthesiser.html</anchorfile>
      <anchor>af48b8565967d86777ac5229559635bd6</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMinimumRenderingSubdivisionSize</name>
      <anchorfile>classSynthesiser.html</anchorfile>
      <anchor>a4a8e6d1bffae06cbe61b69488c97fa49</anchor>
      <arglist>(int numSamples, bool shouldBeStrict=false) noexcept</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>renderVoices</name>
      <anchorfile>classSynthesiser.html</anchorfile>
      <anchor>a838f270e38f2c79c38a1085284f1fc41</anchor>
      <arglist>(AudioBuffer&lt; float &gt; &amp;outputAudio, int startSample, int numSamples)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>renderVoices</name>
      <anchorfile>classSynthesiser.html</anchorfile>
      <anchor>a0682b53979e6f2ed5f08b385d155c60c</anchor>
      <arglist>(AudioBuffer&lt; double &gt; &amp;outputAudio, int startSample, int numSamples)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual SynthesiserVoice *</type>
      <name>findFreeVoice</name>
      <anchorfile>classSynthesiser.html</anchorfile>
      <anchor>a77120192430fe61d730d3e41fccdca75</anchor>
      <arglist>(SynthesiserSound *soundToPlay, int midiChannel, int midiNoteNumber, bool stealIfNoneAvailable) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual SynthesiserVoice *</type>
      <name>findVoiceToSteal</name>
      <anchorfile>classSynthesiser.html</anchorfile>
      <anchor>a3c0aac3256c5adf8c1956a14da9f9bf6</anchor>
      <arglist>(SynthesiserSound *soundToPlay, int midiChannel, int midiNoteNumber) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>startVoice</name>
      <anchorfile>classSynthesiser.html</anchorfile>
      <anchor>a7004a46197236e29ae67916f8932d0a4</anchor>
      <arglist>(SynthesiserVoice *voice, SynthesiserSound *sound, int midiChannel, int midiNoteNumber, float velocity)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>stopVoice</name>
      <anchorfile>classSynthesiser.html</anchorfile>
      <anchor>a715f8ad1d64d728fb2ab764acf939bdb</anchor>
      <arglist>(SynthesiserVoice *, float velocity, bool allowTailOff)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMidiEvent</name>
      <anchorfile>classSynthesiser.html</anchorfile>
      <anchor>ae1b6110e669459c9b8571ade51dd9b91</anchor>
      <arglist>(const MidiMessage &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CriticalSection</type>
      <name>lock</name>
      <anchorfile>classSynthesiser.html</anchorfile>
      <anchor>ab55f2810b6455736110264625a25c4a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>OwnedArray&lt; SynthesiserVoice &gt;</type>
      <name>voices</name>
      <anchorfile>classSynthesiser.html</anchorfile>
      <anchor>a260d964d6764a51b2315233e0bf76980</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ReferenceCountedArray&lt; SynthesiserSound &gt;</type>
      <name>sounds</name>
      <anchorfile>classSynthesiser.html</anchorfile>
      <anchor>ac64f99f204a1d5a567422cd9d5217081</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>lastPitchWheelValues</name>
      <anchorfile>classSynthesiser.html</anchorfile>
      <anchor>acceafe04420ce625e025e4a73c370ce4</anchor>
      <arglist>[16]</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SynthesiserSound</name>
    <filename>classSynthesiserSound.html</filename>
    <base>ReferenceCountedObject</base>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>appliesToNote</name>
      <anchorfile>classSynthesiserSound.html</anchorfile>
      <anchor>abc192aba46964c8539206db1e6f6f747</anchor>
      <arglist>(int midiNoteNumber)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>appliesToChannel</name>
      <anchorfile>classSynthesiserSound.html</anchorfile>
      <anchor>a3910c5fd83df051b05925bbddf4960cd</anchor>
      <arglist>(int midiChannel)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SynthesiserVoice</name>
    <filename>classSynthesiserVoice.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>canPlaySound</name>
      <anchorfile>classSynthesiserVoice.html</anchorfile>
      <anchor>aa9fb097ca96dc39fae8e6f7b9139df9f</anchor>
      <arglist>(SynthesiserSound *)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>startNote</name>
      <anchorfile>classSynthesiserVoice.html</anchorfile>
      <anchor>af3b872622dd9bb540030420189175762</anchor>
      <arglist>(int midiNoteNumber, float velocity, SynthesiserSound *sound, int currentPitchWheelPosition)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>stopNote</name>
      <anchorfile>classSynthesiserVoice.html</anchorfile>
      <anchor>ae1faf9289de24cdeb1d42289754601e6</anchor>
      <arglist>(float velocity, bool allowTailOff)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>pitchWheelMoved</name>
      <anchorfile>classSynthesiserVoice.html</anchorfile>
      <anchor>aca1eda7413a8709c1fc70a9255e48e91</anchor>
      <arglist>(int newPitchWheelValue)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>controllerMoved</name>
      <anchorfile>classSynthesiserVoice.html</anchorfile>
      <anchor>a25b23c8ce57b394d0d037eef0f314ac0</anchor>
      <arglist>(int controllerNumber, int newControllerValue)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>renderNextBlock</name>
      <anchorfile>classSynthesiserVoice.html</anchorfile>
      <anchor>a72ab7856c1e7651b1ce955388645a0a1</anchor>
      <arglist>(AudioBuffer&lt; float &gt; &amp;outputBuffer, int startSample, int numSamples)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SystemAudioVolume</name>
    <filename>classSystemAudioVolume.html</filename>
    <member kind="function" static="yes">
      <type>static float JUCE_CALLTYPE</type>
      <name>getGain</name>
      <anchorfile>classSystemAudioVolume.html</anchorfile>
      <anchor>ac46984ea7d5877ec02409b89fe8a1e30</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool JUCE_CALLTYPE</type>
      <name>setGain</name>
      <anchorfile>classSystemAudioVolume.html</anchorfile>
      <anchor>af33f4390cb26d8fc590840333b4ea7dd</anchor>
      <arglist>(float newGain)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool JUCE_CALLTYPE</type>
      <name>isMuted</name>
      <anchorfile>classSystemAudioVolume.html</anchorfile>
      <anchor>a57291d5f92eb7bda4e59d3038d0efba9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool JUCE_CALLTYPE</type>
      <name>setMuted</name>
      <anchorfile>classSystemAudioVolume.html</anchorfile>
      <anchor>a42f052a1413325b302216ddf148e69cc</anchor>
      <arglist>(bool shouldBeMuted)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SystemClipboard</name>
    <filename>classSystemClipboard.html</filename>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>copyTextToClipboard</name>
      <anchorfile>classSystemClipboard.html</anchorfile>
      <anchor>ab0efb785d53db6f2986950d591313ba5</anchor>
      <arglist>(const String &amp;text)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static String</type>
      <name>getTextFromClipboard</name>
      <anchorfile>classSystemClipboard.html</anchorfile>
      <anchor>abb8b831e62131579349453074661c87b</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SystemStats</name>
    <filename>classSystemStats.html</filename>
    <member kind="enumeration">
      <type></type>
      <name>OperatingSystemType</name>
      <anchorfile>classSystemStats.html</anchorfile>
      <anchor>a7697c468b5f6c391096ab483690b68ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>UnknownOS</name>
      <anchorfile>classSystemStats.html</anchorfile>
      <anchor>a7697c468b5f6c391096ab483690b68eaa5c49c960dbbdd90f196e55237d268f03</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>MacOSX</name>
      <anchorfile>classSystemStats.html</anchorfile>
      <anchor>a7697c468b5f6c391096ab483690b68eaa7b97455dbb0979156c038ccf4bebe545</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>Windows</name>
      <anchorfile>classSystemStats.html</anchorfile>
      <anchor>a7697c468b5f6c391096ab483690b68eaae300f2fc8f4c69f639d7b066ccdc6a64</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>Linux</name>
      <anchorfile>classSystemStats.html</anchorfile>
      <anchor>a7697c468b5f6c391096ab483690b68eaa2d87a056c510cc59626e6df7be6fe72d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>Android</name>
      <anchorfile>classSystemStats.html</anchorfile>
      <anchor>a7697c468b5f6c391096ab483690b68eaaa0089aa962589d46e66ed22556284f5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>iOS</name>
      <anchorfile>classSystemStats.html</anchorfile>
      <anchor>a7697c468b5f6c391096ab483690b68eaac9450b81876366666cc4ef6dbaa7496e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>MacOSX_10_4</name>
      <anchorfile>classSystemStats.html</anchorfile>
      <anchor>a7697c468b5f6c391096ab483690b68eaa1ce7cc1fe386e7fa87013cbddf52543f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>MacOSX_10_5</name>
      <anchorfile>classSystemStats.html</anchorfile>
      <anchor>a7697c468b5f6c391096ab483690b68eaa12c47314def418879ea14c9d7b3c7245</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>MacOSX_10_6</name>
      <anchorfile>classSystemStats.html</anchorfile>
      <anchor>a7697c468b5f6c391096ab483690b68eaa23c2a4b9a33a4b5dccb9d89491aff8ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>MacOSX_10_7</name>
      <anchorfile>classSystemStats.html</anchorfile>
      <anchor>a7697c468b5f6c391096ab483690b68eaa73d61823d6a922d10c2f85b796de7a44</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>MacOSX_10_8</name>
      <anchorfile>classSystemStats.html</anchorfile>
      <anchor>a7697c468b5f6c391096ab483690b68eaa61eb1fabeb6408094768af66ae88b877</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>MacOSX_10_9</name>
      <anchorfile>classSystemStats.html</anchorfile>
      <anchor>a7697c468b5f6c391096ab483690b68eaac277e46154ed3bb3ad5c8564dc81aa7a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>MacOSX_10_10</name>
      <anchorfile>classSystemStats.html</anchorfile>
      <anchor>a7697c468b5f6c391096ab483690b68eaacd0e709dec55d23e96ac9fc93438c61b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>MacOSX_10_11</name>
      <anchorfile>classSystemStats.html</anchorfile>
      <anchor>a7697c468b5f6c391096ab483690b68eaaf9b5d85d9b872a45f52ca472995ff7d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>MacOSX_10_12</name>
      <anchorfile>classSystemStats.html</anchorfile>
      <anchor>a7697c468b5f6c391096ab483690b68eaa2fd486dffb902bd1cb10746faa444be6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>Win2000</name>
      <anchorfile>classSystemStats.html</anchorfile>
      <anchor>a7697c468b5f6c391096ab483690b68eaadb327146f33f20e0c62b58a3d11de431</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>WinXP</name>
      <anchorfile>classSystemStats.html</anchorfile>
      <anchor>a7697c468b5f6c391096ab483690b68eaad72958e105bc6eb69321f2696a74aa51</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>WinVista</name>
      <anchorfile>classSystemStats.html</anchorfile>
      <anchor>a7697c468b5f6c391096ab483690b68eaae9197b9bc532344d2641a414036a35f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>Windows7</name>
      <anchorfile>classSystemStats.html</anchorfile>
      <anchor>a7697c468b5f6c391096ab483690b68eaad260305d49564b976ea39d057c71d490</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>Windows8_0</name>
      <anchorfile>classSystemStats.html</anchorfile>
      <anchor>a7697c468b5f6c391096ab483690b68eaa7f8df0a5a0b0cefe6a61417d08da9e69</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>Windows8_1</name>
      <anchorfile>classSystemStats.html</anchorfile>
      <anchor>a7697c468b5f6c391096ab483690b68eaa88a5787da3863bd5553168c5271e5b36</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>Windows10</name>
      <anchorfile>classSystemStats.html</anchorfile>
      <anchor>a7697c468b5f6c391096ab483690b68eaa71133bfb3015978ba3c96a9d8def2520</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>void(*</type>
      <name>CrashHandlerFunction</name>
      <anchorfile>classSystemStats.html</anchorfile>
      <anchor>a13a353aacff3688e62dcc8ab1acea080</anchor>
      <arglist>)()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static String</type>
      <name>getJUCEVersion</name>
      <anchorfile>classSystemStats.html</anchorfile>
      <anchor>a59b2a0ca0ab347f50675730e042c62fa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static OperatingSystemType</type>
      <name>getOperatingSystemType</name>
      <anchorfile>classSystemStats.html</anchorfile>
      <anchor>a53f8f07716d123c91924a49c658774ea</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static String</type>
      <name>getOperatingSystemName</name>
      <anchorfile>classSystemStats.html</anchorfile>
      <anchor>a3b75e507637a4cb20490954bb98fed6e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isOperatingSystem64Bit</name>
      <anchorfile>classSystemStats.html</anchorfile>
      <anchor>a89a9be444a16742b03c66a525baa6061</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static String</type>
      <name>getEnvironmentVariable</name>
      <anchorfile>classSystemStats.html</anchorfile>
      <anchor>a6b2eecc484dd4955cfac7b81981b16e3</anchor>
      <arglist>(const String &amp;name, const String &amp;defaultValue)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static String</type>
      <name>getLogonName</name>
      <anchorfile>classSystemStats.html</anchorfile>
      <anchor>a49ba1a8f55ab9331a036658c363fd28e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static String</type>
      <name>getFullUserName</name>
      <anchorfile>classSystemStats.html</anchorfile>
      <anchor>a61c5b29c388c6cbc3bc6354f1be3c48d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static String</type>
      <name>getComputerName</name>
      <anchorfile>classSystemStats.html</anchorfile>
      <anchor>adac7b811d3c19571859a86087e720f67</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static String</type>
      <name>getUserLanguage</name>
      <anchorfile>classSystemStats.html</anchorfile>
      <anchor>a6c845872735666a30a2a055d9b8607ec</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static String</type>
      <name>getUserRegion</name>
      <anchorfile>classSystemStats.html</anchorfile>
      <anchor>a4ba9a4cd9c199ee1534d1edea8e786a7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static String</type>
      <name>getDisplayLanguage</name>
      <anchorfile>classSystemStats.html</anchorfile>
      <anchor>a5b230572d54a15ce412f8d5357f40649</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static String</type>
      <name>getDeviceDescription</name>
      <anchorfile>classSystemStats.html</anchorfile>
      <anchor>a6207099299458ff24641883b01a083e5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>getNumCpus</name>
      <anchorfile>classSystemStats.html</anchorfile>
      <anchor>a2fa9257a60a26848174b2b8bd6cbb970</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>getCpuSpeedInMegaherz</name>
      <anchorfile>classSystemStats.html</anchorfile>
      <anchor>a50852f1e0c28d06eeebbd18af4559770</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static String</type>
      <name>getCpuVendor</name>
      <anchorfile>classSystemStats.html</anchorfile>
      <anchor>a4fa74fdae2721d03bb25d48fd7cfaa6d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>hasMMX</name>
      <anchorfile>classSystemStats.html</anchorfile>
      <anchor>a245726d89f0a6cf232b70ff7d89652e5</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>has3DNow</name>
      <anchorfile>classSystemStats.html</anchorfile>
      <anchor>a1879ae7e393b289d3f5a62f673bfc031</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>hasSSE</name>
      <anchorfile>classSystemStats.html</anchorfile>
      <anchor>ad5f3b624e4b0d32db1c5702ee039a765</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>hasSSE2</name>
      <anchorfile>classSystemStats.html</anchorfile>
      <anchor>a55e24b924d9c64e019f1efe1888d2963</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>hasSSE3</name>
      <anchorfile>classSystemStats.html</anchorfile>
      <anchor>aa9ffa8da005c3311eda3ee34ecdd5b28</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>hasSSSE3</name>
      <anchorfile>classSystemStats.html</anchorfile>
      <anchor>afd53593c782c3770106954ace47ce25c</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>hasSSE41</name>
      <anchorfile>classSystemStats.html</anchorfile>
      <anchor>ab46b181da7ecf6c0f96e865b1a91e6f3</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>hasSSE42</name>
      <anchorfile>classSystemStats.html</anchorfile>
      <anchor>a1b3861b105869d8062a539142da7e741</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>hasAVX</name>
      <anchorfile>classSystemStats.html</anchorfile>
      <anchor>ac8b5ff1c9505f12bca684fce44f514b1</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>hasAVX2</name>
      <anchorfile>classSystemStats.html</anchorfile>
      <anchor>ad62b5935a7cee2b45cc34296e90ae699</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>getMemorySizeInMegabytes</name>
      <anchorfile>classSystemStats.html</anchorfile>
      <anchor>a77b0a6c165e59b8c15f8f0a2f037a584</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>getPageSize</name>
      <anchorfile>classSystemStats.html</anchorfile>
      <anchor>ad2c08e39f167e01100d17cd910e7028b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static String</type>
      <name>getStackBacktrace</name>
      <anchorfile>classSystemStats.html</anchorfile>
      <anchor>a98386990494318ab5ecfba5c3bae89b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setApplicationCrashHandler</name>
      <anchorfile>classSystemStats.html</anchorfile>
      <anchor>a9eb84f54c8ebca7a24bb49e37226a82a</anchor>
      <arglist>(CrashHandlerFunction)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isRunningInAppExtensionSandbox</name>
      <anchorfile>classSystemStats.html</anchorfile>
      <anchor>afcfba7112235376d8d071ee8a8dc3156</anchor>
      <arglist>() noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SystemTrayIconComponent</name>
    <filename>classSystemTrayIconComponent.html</filename>
    <base>Component</base>
    <member kind="function">
      <type></type>
      <name>SystemTrayIconComponent</name>
      <anchorfile>classSystemTrayIconComponent.html</anchorfile>
      <anchor>a7e46f4b374a917b7d899128d1d35bcaa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SystemTrayIconComponent</name>
      <anchorfile>classSystemTrayIconComponent.html</anchorfile>
      <anchor>a00a7c36ac22d6dcb251f4a0b61dafab0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIconImage</name>
      <anchorfile>classSystemTrayIconComponent.html</anchorfile>
      <anchor>ac27871e1c71277804b16c6fc91941d8e</anchor>
      <arglist>(const Image &amp;newImage)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIconTooltip</name>
      <anchorfile>classSystemTrayIconComponent.html</anchorfile>
      <anchor>a9df2a1a73814eb73b577090bce9425b9</anchor>
      <arglist>(const String &amp;tooltip)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setHighlighted</name>
      <anchorfile>classSystemTrayIconComponent.html</anchorfile>
      <anchor>acc6804bb185922d2fe0d0a7b61f87ec9</anchor>
      <arglist>(bool)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>showInfoBubble</name>
      <anchorfile>classSystemTrayIconComponent.html</anchorfile>
      <anchor>a927ae00f7d375b817520d253e4e7eb65</anchor>
      <arglist>(const String &amp;title, const String &amp;content)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>hideInfoBubble</name>
      <anchorfile>classSystemTrayIconComponent.html</anchorfile>
      <anchor>ad9e5f01b380d85df60bc76dcb07baefc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>getNativeHandle</name>
      <anchorfile>classSystemTrayIconComponent.html</anchorfile>
      <anchor>ad2621f9a947dce98aafd84cf9c7f0168</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>paint</name>
      <anchorfile>classSystemTrayIconComponent.html</anchorfile>
      <anchor>a11951b5b8c2b5ee866aa32880a30afc9</anchor>
      <arglist>(Graphics &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>showDropdownMenu</name>
      <anchorfile>classSystemTrayIconComponent.html</anchorfile>
      <anchor>af4f77eb53be37023abf692dd23c7baed</anchor>
      <arglist>(const PopupMenu &amp;menu)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TabBarButton</name>
    <filename>classTabBarButton.html</filename>
    <base>Button</base>
    <member kind="enumeration">
      <type></type>
      <name>ExtraComponentPlacement</name>
      <anchorfile>classTabBarButton.html</anchorfile>
      <anchor>a9ff26e542aa2f688e6c5609ab4d3899a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>beforeText</name>
      <anchorfile>classTabBarButton.html</anchorfile>
      <anchor>a9ff26e542aa2f688e6c5609ab4d3899aad3a4a0ee41e997a76addab8e681cd940</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>afterText</name>
      <anchorfile>classTabBarButton.html</anchorfile>
      <anchor>a9ff26e542aa2f688e6c5609ab4d3899aaee8f78f95528103403371a9964950484</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TabBarButton</name>
      <anchorfile>classTabBarButton.html</anchorfile>
      <anchor>af55efe7acea31b4e5cc4ef7063297fd2</anchor>
      <arglist>(const String &amp;name, TabbedButtonBar &amp;ownerBar)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TabBarButton</name>
      <anchorfile>classTabBarButton.html</anchorfile>
      <anchor>af8eaf5f5e850408b584be1631f52865a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>TabbedButtonBar &amp;</type>
      <name>getTabbedButtonBar</name>
      <anchorfile>classTabBarButton.html</anchorfile>
      <anchor>a1316e4d599b4ab8dea412aefe460835f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setExtraComponent</name>
      <anchorfile>classTabBarButton.html</anchorfile>
      <anchor>a8f306307c81563d3b8f0d0442e1e8972</anchor>
      <arglist>(Component *extraTabComponent, ExtraComponentPlacement extraComponentPlacement)</arglist>
    </member>
    <member kind="function">
      <type>Component *</type>
      <name>getExtraComponent</name>
      <anchorfile>classTabBarButton.html</anchorfile>
      <anchor>a2d98290ac7cdf97e086953aa492bbf21</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>ExtraComponentPlacement</type>
      <name>getExtraComponentPlacement</name>
      <anchorfile>classTabBarButton.html</anchorfile>
      <anchor>af889e5e2548f8da167c6b2dd751a4867</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Rectangle&lt; int &gt;</type>
      <name>getActiveArea</name>
      <anchorfile>classTabBarButton.html</anchorfile>
      <anchor>a370343b272450e12b61860bbe4f66448</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Rectangle&lt; int &gt;</type>
      <name>getTextArea</name>
      <anchorfile>classTabBarButton.html</anchorfile>
      <anchor>ab946ec8cf082b32137545cd84d243668</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getIndex</name>
      <anchorfile>classTabBarButton.html</anchorfile>
      <anchor>aecb89633a27186956d116a1099a57bb0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Colour</type>
      <name>getTabBackgroundColour</name>
      <anchorfile>classTabBarButton.html</anchorfile>
      <anchor>a9612e79ff60d96d118a3b8a309e15b8d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isFrontTab</name>
      <anchorfile>classTabBarButton.html</anchorfile>
      <anchor>a7f0b2de2d048406fe589443414c75c65</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getBestTabLength</name>
      <anchorfile>classTabBarButton.html</anchorfile>
      <anchor>a6bedc5c7ef08a437b7575bfcafd481fd</anchor>
      <arglist>(int depth)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>paintButton</name>
      <anchorfile>classTabBarButton.html</anchorfile>
      <anchor>ae8edbfe161b1ec1eb3bc58fe9e3ac4dc</anchor>
      <arglist>(Graphics &amp;, bool isMouseOverButton, bool isButtonDown) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clicked</name>
      <anchorfile>classTabBarButton.html</anchorfile>
      <anchor>ad7f3d26c3c8b7a2a7429904465f893c7</anchor>
      <arglist>(const ModifierKeys &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hitTest</name>
      <anchorfile>classTabBarButton.html</anchorfile>
      <anchor>ac6e24e3e9b5001e36a3014692257ea03</anchor>
      <arglist>(int x, int y) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resized</name>
      <anchorfile>classTabBarButton.html</anchorfile>
      <anchor>a4a2dcf3b22c2e54dc182cd67f616fa4a</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>childBoundsChanged</name>
      <anchorfile>classTabBarButton.html</anchorfile>
      <anchor>aaf1da44da33b47018a9693f6faa35764</anchor>
      <arglist>(Component *) override</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TabbedButtonBar &amp;</type>
      <name>owner</name>
      <anchorfile>classTabBarButton.html</anchorfile>
      <anchor>a67052f9de125edd4a5c5c4976076a798</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>overlapPixels</name>
      <anchorfile>classTabBarButton.html</anchorfile>
      <anchor>a8eb442941d7072f18f85769824e03ef2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ScopedPointer&lt; Component &gt;</type>
      <name>extraComponent</name>
      <anchorfile>classTabBarButton.html</anchorfile>
      <anchor>ac4408d42f00d2f84fc6a43a4a125d929</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ExtraComponentPlacement</type>
      <name>extraCompPlacement</name>
      <anchorfile>classTabBarButton.html</anchorfile>
      <anchor>a3f80996350cf67bf9fa08e9777ae4fff</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TabbedButtonBar</name>
    <filename>classTabbedButtonBar.html</filename>
    <base>Component</base>
    <base>ChangeBroadcaster</base>
    <class kind="struct">TabbedButtonBar::LookAndFeelMethods</class>
    <member kind="enumeration">
      <type></type>
      <name>Orientation</name>
      <anchorfile>classTabbedButtonBar.html</anchorfile>
      <anchor>a63e34dd62f1b80ec99412c6115b39afb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>TabsAtTop</name>
      <anchorfile>classTabbedButtonBar.html</anchorfile>
      <anchor>a63e34dd62f1b80ec99412c6115b39afbae2743948018b19a1834ec236df4876b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>TabsAtBottom</name>
      <anchorfile>classTabbedButtonBar.html</anchorfile>
      <anchor>a63e34dd62f1b80ec99412c6115b39afba9bbe9d943d7603fc6f91ba22782bc778</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>TabsAtLeft</name>
      <anchorfile>classTabbedButtonBar.html</anchorfile>
      <anchor>a63e34dd62f1b80ec99412c6115b39afba7427a5794acbad73fd4c824b260b00b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>TabsAtRight</name>
      <anchorfile>classTabbedButtonBar.html</anchorfile>
      <anchor>a63e34dd62f1b80ec99412c6115b39afba931a140f221ead7f73af06e4f0610f1d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>ColourIds</name>
      <anchorfile>classTabbedButtonBar.html</anchorfile>
      <anchor>a1193bcbd9622a87f4dbdee8db8f9806d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>tabOutlineColourId</name>
      <anchorfile>classTabbedButtonBar.html</anchorfile>
      <anchor>a1193bcbd9622a87f4dbdee8db8f9806dac8e8988271f790db93c90250027412d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>tabTextColourId</name>
      <anchorfile>classTabbedButtonBar.html</anchorfile>
      <anchor>a1193bcbd9622a87f4dbdee8db8f9806dadb8a4e934db005c7e683ae01b5ab1981</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>frontOutlineColourId</name>
      <anchorfile>classTabbedButtonBar.html</anchorfile>
      <anchor>a1193bcbd9622a87f4dbdee8db8f9806dab1821bb1f7b2d4055a1e8e035649cc3f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>frontTextColourId</name>
      <anchorfile>classTabbedButtonBar.html</anchorfile>
      <anchor>a1193bcbd9622a87f4dbdee8db8f9806da53c37ddad54ae89b891b438e9e94ec0f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TabbedButtonBar</name>
      <anchorfile>classTabbedButtonBar.html</anchorfile>
      <anchor>a6daef9753356e71accab672577947992</anchor>
      <arglist>(Orientation orientation)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TabbedButtonBar</name>
      <anchorfile>classTabbedButtonBar.html</anchorfile>
      <anchor>a4fbf98a176d5239f95b973e8e194c12f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOrientation</name>
      <anchorfile>classTabbedButtonBar.html</anchorfile>
      <anchor>af3ab3b5919eae222903e948ca85e3bd9</anchor>
      <arglist>(Orientation orientation)</arglist>
    </member>
    <member kind="function">
      <type>Orientation</type>
      <name>getOrientation</name>
      <anchorfile>classTabbedButtonBar.html</anchorfile>
      <anchor>a098c87b282112a9dbf6246a17a3bc954</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isVertical</name>
      <anchorfile>classTabbedButtonBar.html</anchorfile>
      <anchor>a934df0eba879391671c70e884e06414c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getThickness</name>
      <anchorfile>classTabbedButtonBar.html</anchorfile>
      <anchor>a44df869b4403b979c451a0cab3f4f5b8</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMinimumTabScaleFactor</name>
      <anchorfile>classTabbedButtonBar.html</anchorfile>
      <anchor>a80abbd24572569d9c3442665161d2b77</anchor>
      <arglist>(double newMinimumScale)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearTabs</name>
      <anchorfile>classTabbedButtonBar.html</anchorfile>
      <anchor>a984f83d6e5a2e33cffa4772c838b2ecb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addTab</name>
      <anchorfile>classTabbedButtonBar.html</anchorfile>
      <anchor>ac3bb57ee8a302f088b26092a829d2bd1</anchor>
      <arglist>(const String &amp;tabName, Colour tabBackgroundColour, int insertIndex)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTabName</name>
      <anchorfile>classTabbedButtonBar.html</anchorfile>
      <anchor>a81bb9c90e85698fbc3ffc713954a6151</anchor>
      <arglist>(int tabIndex, const String &amp;newName)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeTab</name>
      <anchorfile>classTabbedButtonBar.html</anchorfile>
      <anchor>a80a563cb755458b76f8a127ab1eb61fc</anchor>
      <arglist>(int tabIndex, bool animate=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>moveTab</name>
      <anchorfile>classTabbedButtonBar.html</anchorfile>
      <anchor>a0137adff073d5dc5e4d6f558e5984ab2</anchor>
      <arglist>(int currentIndex, int newIndex, bool animate=false)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumTabs</name>
      <anchorfile>classTabbedButtonBar.html</anchorfile>
      <anchor>a6cf9104837e23cdba611da68705a44e9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>StringArray</type>
      <name>getTabNames</name>
      <anchorfile>classTabbedButtonBar.html</anchorfile>
      <anchor>a5f1cf9b29bc844a9ff178962d2e372e3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCurrentTabIndex</name>
      <anchorfile>classTabbedButtonBar.html</anchorfile>
      <anchor>aac30b6472d94b57198623499feeba069</anchor>
      <arglist>(int newTabIndex, bool sendChangeMessage=true)</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>getCurrentTabName</name>
      <anchorfile>classTabbedButtonBar.html</anchorfile>
      <anchor>a0810b11474333835b8ab2f92efe52d89</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getCurrentTabIndex</name>
      <anchorfile>classTabbedButtonBar.html</anchorfile>
      <anchor>a665e8ce4f10dcceffc1d129293f2f24d</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>TabBarButton *</type>
      <name>getTabButton</name>
      <anchorfile>classTabbedButtonBar.html</anchorfile>
      <anchor>a5bf021062300f303666793479d7536b0</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>indexOfTabButton</name>
      <anchorfile>classTabbedButtonBar.html</anchorfile>
      <anchor>a23d24dd7c9e527d11539a059a31f57f4</anchor>
      <arglist>(const TabBarButton *button) const </arglist>
    </member>
    <member kind="function">
      <type>Rectangle&lt; int &gt;</type>
      <name>getTargetBounds</name>
      <anchorfile>classTabbedButtonBar.html</anchorfile>
      <anchor>a8bd8c75d5a291dd805029be28043647f</anchor>
      <arglist>(TabBarButton *button) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>currentTabChanged</name>
      <anchorfile>classTabbedButtonBar.html</anchorfile>
      <anchor>a6a11f71e857b122419ed70066b8d4cda</anchor>
      <arglist>(int newCurrentTabIndex, const String &amp;newCurrentTabName)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>popupMenuClickOnTab</name>
      <anchorfile>classTabbedButtonBar.html</anchorfile>
      <anchor>a2f07653c26063fd52f7d91d6455664d4</anchor>
      <arglist>(int tabIndex, const String &amp;tabName)</arglist>
    </member>
    <member kind="function">
      <type>Colour</type>
      <name>getTabBackgroundColour</name>
      <anchorfile>classTabbedButtonBar.html</anchorfile>
      <anchor>a4835727f2e8eda1a09694c3eb46baa32</anchor>
      <arglist>(int tabIndex)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTabBackgroundColour</name>
      <anchorfile>classTabbedButtonBar.html</anchorfile>
      <anchor>abc7af173a2a20a87c23c7ae9d6ec3b73</anchor>
      <arglist>(int tabIndex, Colour newColour)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>paint</name>
      <anchorfile>classTabbedButtonBar.html</anchorfile>
      <anchor>ad07c90cf224b10adfb383c72c4bacf86</anchor>
      <arglist>(Graphics &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resized</name>
      <anchorfile>classTabbedButtonBar.html</anchorfile>
      <anchor>ac5be05b934d9ceaef93729e8e8ac8597</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lookAndFeelChanged</name>
      <anchorfile>classTabbedButtonBar.html</anchorfile>
      <anchor>a60cc5364a3a309438008f8bc1ae32708</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual TabBarButton *</type>
      <name>createTabButton</name>
      <anchorfile>classTabbedButtonBar.html</anchorfile>
      <anchor>a9e43a7a5671e8d9e03241053a692f1f2</anchor>
      <arglist>(const String &amp;tabName, int tabIndex)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>TabbedButtonBar::LookAndFeelMethods</name>
    <filename>structTabbedButtonBar_1_1LookAndFeelMethods.html</filename>
  </compound>
  <compound kind="class">
    <name>TabbedComponent</name>
    <filename>classTabbedComponent.html</filename>
    <base>Component</base>
    <member kind="enumeration">
      <type></type>
      <name>ColourIds</name>
      <anchorfile>classTabbedComponent.html</anchorfile>
      <anchor>ab154d5fdf269af82dfbe6e77b2f716cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>backgroundColourId</name>
      <anchorfile>classTabbedComponent.html</anchorfile>
      <anchor>ab154d5fdf269af82dfbe6e77b2f716ccaf220bcdf6bf79838e058ac1edc408e30</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>outlineColourId</name>
      <anchorfile>classTabbedComponent.html</anchorfile>
      <anchor>ab154d5fdf269af82dfbe6e77b2f716cca16a39be0a38f0544cba6c68051536b9f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TabbedComponent</name>
      <anchorfile>classTabbedComponent.html</anchorfile>
      <anchor>a1702331b2ec7a34ebbfaf418f31415dd</anchor>
      <arglist>(TabbedButtonBar::Orientation orientation)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TabbedComponent</name>
      <anchorfile>classTabbedComponent.html</anchorfile>
      <anchor>af831d2d345f8a1284e665be502f405c0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOrientation</name>
      <anchorfile>classTabbedComponent.html</anchorfile>
      <anchor>ad982540d7f5a188fa012550971ebb4d5</anchor>
      <arglist>(TabbedButtonBar::Orientation orientation)</arglist>
    </member>
    <member kind="function">
      <type>TabbedButtonBar::Orientation</type>
      <name>getOrientation</name>
      <anchorfile>classTabbedComponent.html</anchorfile>
      <anchor>a91e6b4caa94e36a2824e8a71788b6bf9</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTabBarDepth</name>
      <anchorfile>classTabbedComponent.html</anchorfile>
      <anchor>a06e222e02207dc35e297c236e175d46f</anchor>
      <arglist>(int newDepth)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getTabBarDepth</name>
      <anchorfile>classTabbedComponent.html</anchorfile>
      <anchor>a997accbfa03ce9b6273e67eea537c249</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOutline</name>
      <anchorfile>classTabbedComponent.html</anchorfile>
      <anchor>a685c149db58fefdf7894cd3ed378e0e2</anchor>
      <arglist>(int newThickness)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIndent</name>
      <anchorfile>classTabbedComponent.html</anchorfile>
      <anchor>a4b2ca2d5cb00208f7383455c5143fcad</anchor>
      <arglist>(int indentThickness)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearTabs</name>
      <anchorfile>classTabbedComponent.html</anchorfile>
      <anchor>a0c55d2ebde6cc67c693a607a91221ee3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addTab</name>
      <anchorfile>classTabbedComponent.html</anchorfile>
      <anchor>a0d7761f1c372260ca4a2acb36a320e10</anchor>
      <arglist>(const String &amp;tabName, Colour tabBackgroundColour, Component *contentComponent, bool deleteComponentWhenNotNeeded, int insertIndex=-1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTabName</name>
      <anchorfile>classTabbedComponent.html</anchorfile>
      <anchor>acbe9e10b90d011aa9d75ed0bef64103e</anchor>
      <arglist>(int tabIndex, const String &amp;newName)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeTab</name>
      <anchorfile>classTabbedComponent.html</anchorfile>
      <anchor>ac9a7f7fc03a69fa286772fb0589d9388</anchor>
      <arglist>(int tabIndex)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>moveTab</name>
      <anchorfile>classTabbedComponent.html</anchorfile>
      <anchor>a8de06cabd1612af510a909af8dd2ee0e</anchor>
      <arglist>(int currentIndex, int newIndex, bool animate=false)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumTabs</name>
      <anchorfile>classTabbedComponent.html</anchorfile>
      <anchor>ac94ea283f6904ef077d55d547fdd21d6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>StringArray</type>
      <name>getTabNames</name>
      <anchorfile>classTabbedComponent.html</anchorfile>
      <anchor>a9de655b6c4448a5d412bb61c22f669ab</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Component *</type>
      <name>getTabContentComponent</name>
      <anchorfile>classTabbedComponent.html</anchorfile>
      <anchor>aa9eb0f888c932f1d2cf64ec59a9dee37</anchor>
      <arglist>(int tabIndex) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Colour</type>
      <name>getTabBackgroundColour</name>
      <anchorfile>classTabbedComponent.html</anchorfile>
      <anchor>acad26c68307c4d42730e9fd80c1ca2d1</anchor>
      <arglist>(int tabIndex) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTabBackgroundColour</name>
      <anchorfile>classTabbedComponent.html</anchorfile>
      <anchor>aedf1b20a20fe265613c10f40204032c4</anchor>
      <arglist>(int tabIndex, Colour newColour)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCurrentTabIndex</name>
      <anchorfile>classTabbedComponent.html</anchorfile>
      <anchor>aff9209321e3c2993775a56edae31c026</anchor>
      <arglist>(int newTabIndex, bool sendChangeMessage=true)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getCurrentTabIndex</name>
      <anchorfile>classTabbedComponent.html</anchorfile>
      <anchor>a855543f61c40125be6ab34fb23e11984</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>getCurrentTabName</name>
      <anchorfile>classTabbedComponent.html</anchorfile>
      <anchor>a34955ad3357d8cb569a7aba3d6fecabb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Component *</type>
      <name>getCurrentContentComponent</name>
      <anchorfile>classTabbedComponent.html</anchorfile>
      <anchor>a7f3971f6451356b95318ccc47b06d1d3</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>currentTabChanged</name>
      <anchorfile>classTabbedComponent.html</anchorfile>
      <anchor>acb0ec8ee87c29825f9326aadb8302b72</anchor>
      <arglist>(int newCurrentTabIndex, const String &amp;newCurrentTabName)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>popupMenuClickOnTab</name>
      <anchorfile>classTabbedComponent.html</anchorfile>
      <anchor>a5f938165e7ccc943c4503b817c31d89f</anchor>
      <arglist>(int tabIndex, const String &amp;tabName)</arglist>
    </member>
    <member kind="function">
      <type>TabbedButtonBar &amp;</type>
      <name>getTabbedButtonBar</name>
      <anchorfile>classTabbedComponent.html</anchorfile>
      <anchor>adc33f7646d65444aed8fa6e02413ebdd</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>paint</name>
      <anchorfile>classTabbedComponent.html</anchorfile>
      <anchor>a04b62223ce54ab0fa897487f1e63d8ae</anchor>
      <arglist>(Graphics &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resized</name>
      <anchorfile>classTabbedComponent.html</anchorfile>
      <anchor>ae539255dc001ce506e0a9f1493be1a35</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lookAndFeelChanged</name>
      <anchorfile>classTabbedComponent.html</anchorfile>
      <anchor>a1a18762088811a70aa5e5a8c6b154be2</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual TabBarButton *</type>
      <name>createTabButton</name>
      <anchorfile>classTabbedComponent.html</anchorfile>
      <anchor>af6d13ea3c6b9dc73ffc8dea8d74099da</anchor>
      <arglist>(const String &amp;tabName, int tabIndex)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ScopedPointer&lt; TabbedButtonBar &gt;</type>
      <name>tabs</name>
      <anchorfile>classTabbedComponent.html</anchorfile>
      <anchor>a7bc26c338bf06c47c28165f5b891c87d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TableHeaderComponent</name>
    <filename>classTableHeaderComponent.html</filename>
    <base>Component</base>
    <base protection="private">AsyncUpdater</base>
    <class kind="class">TableHeaderComponent::Listener</class>
    <class kind="struct">TableHeaderComponent::LookAndFeelMethods</class>
    <member kind="enumeration">
      <type></type>
      <name>ColumnPropertyFlags</name>
      <anchorfile>classTableHeaderComponent.html</anchorfile>
      <anchor>abfee3b5ccd3289efb38e7b7dd1162831</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>visible</name>
      <anchorfile>classTableHeaderComponent.html</anchorfile>
      <anchor>abfee3b5ccd3289efb38e7b7dd1162831a7f601c3d9bc982c5e1ba5797dc9e1973</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>resizable</name>
      <anchorfile>classTableHeaderComponent.html</anchorfile>
      <anchor>abfee3b5ccd3289efb38e7b7dd1162831ae21b31a36ae1a8a25aed0c8cc5301720</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>draggable</name>
      <anchorfile>classTableHeaderComponent.html</anchorfile>
      <anchor>abfee3b5ccd3289efb38e7b7dd1162831acc6c3bf14f3e100d490d1e9cd307e1fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>appearsOnColumnMenu</name>
      <anchorfile>classTableHeaderComponent.html</anchorfile>
      <anchor>abfee3b5ccd3289efb38e7b7dd1162831ac8737d3f19bf93c607240f6a3035aa4d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>sortable</name>
      <anchorfile>classTableHeaderComponent.html</anchorfile>
      <anchor>abfee3b5ccd3289efb38e7b7dd1162831acb2ae4c6ff02d7f6d9621f70340c2012</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>sortedForwards</name>
      <anchorfile>classTableHeaderComponent.html</anchorfile>
      <anchor>abfee3b5ccd3289efb38e7b7dd1162831a87fb777f6e42c8e3c8b8234bb0291951</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>sortedBackwards</name>
      <anchorfile>classTableHeaderComponent.html</anchorfile>
      <anchor>abfee3b5ccd3289efb38e7b7dd1162831aa7e7f97460075ebf9666f89dca7b9983</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>defaultFlags</name>
      <anchorfile>classTableHeaderComponent.html</anchorfile>
      <anchor>abfee3b5ccd3289efb38e7b7dd1162831aaf583dc5f74b08d98dc901bdb91bdc9a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>notResizable</name>
      <anchorfile>classTableHeaderComponent.html</anchorfile>
      <anchor>abfee3b5ccd3289efb38e7b7dd1162831a47ed9632de25c7632a34942aa1b266bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>notResizableOrSortable</name>
      <anchorfile>classTableHeaderComponent.html</anchorfile>
      <anchor>abfee3b5ccd3289efb38e7b7dd1162831a722f75fc5f1b33f07ee2ca106bd0e9f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>notSortable</name>
      <anchorfile>classTableHeaderComponent.html</anchorfile>
      <anchor>abfee3b5ccd3289efb38e7b7dd1162831abd10990c4c70636a0b969b7dcdad112d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TableHeaderComponent</name>
      <anchorfile>classTableHeaderComponent.html</anchorfile>
      <anchor>aef4b0bf0dfc1d5c7b91cb72ac96aed95</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TableHeaderComponent</name>
      <anchorfile>classTableHeaderComponent.html</anchorfile>
      <anchor>a812f66a1f733cd90e788a6d135aa382e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addColumn</name>
      <anchorfile>classTableHeaderComponent.html</anchorfile>
      <anchor>af6bf8a2bb896b74ed6afd6f667a4a959</anchor>
      <arglist>(const String &amp;columnName, int columnId, int width, int minimumWidth=30, int maximumWidth=-1, int propertyFlags=defaultFlags, int insertIndex=-1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeColumn</name>
      <anchorfile>classTableHeaderComponent.html</anchorfile>
      <anchor>a6642d29de80979c31d0b5ee6bd399730</anchor>
      <arglist>(int columnIdToRemove)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeAllColumns</name>
      <anchorfile>classTableHeaderComponent.html</anchorfile>
      <anchor>a87cef13bc2cc1b6463af7f4286fc9642</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumColumns</name>
      <anchorfile>classTableHeaderComponent.html</anchorfile>
      <anchor>aedd425a88dcbf1e4c1ed58f184908c2e</anchor>
      <arglist>(bool onlyCountVisibleColumns) const </arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>getColumnName</name>
      <anchorfile>classTableHeaderComponent.html</anchorfile>
      <anchor>a802afebf5ff7e7e595ffefe46b6bda08</anchor>
      <arglist>(int columnId) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setColumnName</name>
      <anchorfile>classTableHeaderComponent.html</anchorfile>
      <anchor>a4f3269b9f69aa75a9d7387c97408c138</anchor>
      <arglist>(int columnId, const String &amp;newName)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>moveColumn</name>
      <anchorfile>classTableHeaderComponent.html</anchorfile>
      <anchor>a183bd15db8f1b3cc61ef612cbcc2aa8f</anchor>
      <arglist>(int columnId, int newVisibleIndex)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getColumnWidth</name>
      <anchorfile>classTableHeaderComponent.html</anchorfile>
      <anchor>ac3b55abb94e6ce11a90e515baced3160</anchor>
      <arglist>(int columnId) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setColumnWidth</name>
      <anchorfile>classTableHeaderComponent.html</anchorfile>
      <anchor>a777fe28faa03d04b9d46105516eb1f8c</anchor>
      <arglist>(int columnId, int newWidth)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setColumnVisible</name>
      <anchorfile>classTableHeaderComponent.html</anchorfile>
      <anchor>ac91853f78f09564e887b98b481bae95f</anchor>
      <arglist>(int columnId, bool shouldBeVisible)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isColumnVisible</name>
      <anchorfile>classTableHeaderComponent.html</anchorfile>
      <anchor>a31b007b035502ed064d1a44eeac72446</anchor>
      <arglist>(int columnId) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSortColumnId</name>
      <anchorfile>classTableHeaderComponent.html</anchorfile>
      <anchor>a51558625c4ed006561e5bf468d5af605</anchor>
      <arglist>(int columnId, bool sortForwards)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getSortColumnId</name>
      <anchorfile>classTableHeaderComponent.html</anchorfile>
      <anchor>a91d18fde74e1ff62412a9c1ee7bb4c5f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSortedForwards</name>
      <anchorfile>classTableHeaderComponent.html</anchorfile>
      <anchor>a9bfdcfbaaa24b3ca4884807c0c030fb4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reSortTable</name>
      <anchorfile>classTableHeaderComponent.html</anchorfile>
      <anchor>a39a03757452b664a3645c55a02e6d76a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getTotalWidth</name>
      <anchorfile>classTableHeaderComponent.html</anchorfile>
      <anchor>a71dfcadef252b0567955cd3c477acbbb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getIndexOfColumnId</name>
      <anchorfile>classTableHeaderComponent.html</anchorfile>
      <anchor>a2b8d480388b7eacdb57f1ef80b3e210f</anchor>
      <arglist>(int columnId, bool onlyCountVisibleColumns) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getColumnIdOfIndex</name>
      <anchorfile>classTableHeaderComponent.html</anchorfile>
      <anchor>aca8196dc760b733766c0273fce5e7cec</anchor>
      <arglist>(int index, bool onlyCountVisibleColumns) const </arglist>
    </member>
    <member kind="function">
      <type>Rectangle&lt; int &gt;</type>
      <name>getColumnPosition</name>
      <anchorfile>classTableHeaderComponent.html</anchorfile>
      <anchor>a7621ad722d67d2af98276653018ec474</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getColumnIdAtX</name>
      <anchorfile>classTableHeaderComponent.html</anchorfile>
      <anchor>ab9f4217af539536ca7508b391fa322f5</anchor>
      <arglist>(int xToFind) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStretchToFitActive</name>
      <anchorfile>classTableHeaderComponent.html</anchorfile>
      <anchor>ae338d49514b8c120db62fbd9ad3be4c7</anchor>
      <arglist>(bool shouldStretchToFit)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isStretchToFitActive</name>
      <anchorfile>classTableHeaderComponent.html</anchorfile>
      <anchor>a01f9763aa85a7f4262672505c1d60948</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resizeAllColumnsToFit</name>
      <anchorfile>classTableHeaderComponent.html</anchorfile>
      <anchor>abccd726884264ed9fed54b23c55c3b94</anchor>
      <arglist>(int targetTotalWidth)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPopupMenuActive</name>
      <anchorfile>classTableHeaderComponent.html</anchorfile>
      <anchor>a5a4f382bea75073d84cf93afbbf3fdc6</anchor>
      <arglist>(bool hasMenu)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isPopupMenuActive</name>
      <anchorfile>classTableHeaderComponent.html</anchorfile>
      <anchor>aceec9cfa178cfe2476a8936872233d5f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>toString</name>
      <anchorfile>classTableHeaderComponent.html</anchorfile>
      <anchor>ad551ec63876a4536f96bfb1cac8a265f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>restoreFromString</name>
      <anchorfile>classTableHeaderComponent.html</anchorfile>
      <anchor>ae4a9ef600e4187d86a3c4f6567ebe14c</anchor>
      <arglist>(const String &amp;storedVersion)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addListener</name>
      <anchorfile>classTableHeaderComponent.html</anchorfile>
      <anchor>aad34038b492dbba89a4e0683e0e73dd4</anchor>
      <arglist>(Listener *newListener)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeListener</name>
      <anchorfile>classTableHeaderComponent.html</anchorfile>
      <anchor>aeada8b63822d57cb5169316c9b336388</anchor>
      <arglist>(Listener *listenerToRemove)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>columnClicked</name>
      <anchorfile>classTableHeaderComponent.html</anchorfile>
      <anchor>a5208c784a0fa38581aa512323c4be183</anchor>
      <arglist>(int columnId, const ModifierKeys &amp;mods)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addMenuItems</name>
      <anchorfile>classTableHeaderComponent.html</anchorfile>
      <anchor>a15df2bd39e5225c2838b82404b10b1b5</anchor>
      <arglist>(PopupMenu &amp;menu, int columnIdClicked)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>reactToMenuItem</name>
      <anchorfile>classTableHeaderComponent.html</anchorfile>
      <anchor>a6d73ed05285a4386b50472710e10ad3d</anchor>
      <arglist>(int menuReturnId, int columnIdClicked)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>paint</name>
      <anchorfile>classTableHeaderComponent.html</anchorfile>
      <anchor>a61332eb0982fa8872e1fec9aadf03082</anchor>
      <arglist>(Graphics &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resized</name>
      <anchorfile>classTableHeaderComponent.html</anchorfile>
      <anchor>a2a203db8edd85f6b279ad206421d3389</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mouseMove</name>
      <anchorfile>classTableHeaderComponent.html</anchorfile>
      <anchor>a358870898bb0cbd599e4838e51db31ed</anchor>
      <arglist>(const MouseEvent &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mouseEnter</name>
      <anchorfile>classTableHeaderComponent.html</anchorfile>
      <anchor>ab981915bf8abab35ec95a8c285187f66</anchor>
      <arglist>(const MouseEvent &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mouseExit</name>
      <anchorfile>classTableHeaderComponent.html</anchorfile>
      <anchor>a90c64b020bf0d1d4f1330ca44b42766e</anchor>
      <arglist>(const MouseEvent &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mouseDown</name>
      <anchorfile>classTableHeaderComponent.html</anchorfile>
      <anchor>a32469da187cc0be3cea930016db9798d</anchor>
      <arglist>(const MouseEvent &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mouseDrag</name>
      <anchorfile>classTableHeaderComponent.html</anchorfile>
      <anchor>a35c899dfec1e378e805b319ce6dedae4</anchor>
      <arglist>(const MouseEvent &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mouseUp</name>
      <anchorfile>classTableHeaderComponent.html</anchorfile>
      <anchor>aacaa015bac5a61a92136250a752c6cb7</anchor>
      <arglist>(const MouseEvent &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>MouseCursor</type>
      <name>getMouseCursor</name>
      <anchorfile>classTableHeaderComponent.html</anchorfile>
      <anchor>ab6d14fafe7422458c91fc3ed0257338c</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>showColumnChooserMenu</name>
      <anchorfile>classTableHeaderComponent.html</anchorfile>
      <anchor>ae479aaba67ffcb18e6abd7ec0686d20a</anchor>
      <arglist>(int columnIdClicked)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TableHeaderComponent::Listener</name>
    <filename>classTableHeaderComponent_1_1Listener.html</filename>
    <member kind="function">
      <type></type>
      <name>Listener</name>
      <anchorfile>classTableHeaderComponent_1_1Listener.html</anchorfile>
      <anchor>ad164f7c24f94c566af2caac1afea1e77</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Listener</name>
      <anchorfile>classTableHeaderComponent_1_1Listener.html</anchorfile>
      <anchor>a1e274cbaa4377ca2c7d97438c80c26a8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>tableColumnsChanged</name>
      <anchorfile>classTableHeaderComponent_1_1Listener.html</anchorfile>
      <anchor>ae70ef4e1a9974456be0fb28aee95d21d</anchor>
      <arglist>(TableHeaderComponent *tableHeader)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>tableColumnsResized</name>
      <anchorfile>classTableHeaderComponent_1_1Listener.html</anchorfile>
      <anchor>a146a7c7f933beb75b863993f1af7989c</anchor>
      <arglist>(TableHeaderComponent *tableHeader)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>tableSortOrderChanged</name>
      <anchorfile>classTableHeaderComponent_1_1Listener.html</anchorfile>
      <anchor>a6d48b82741757d13ad2d75257292d615</anchor>
      <arglist>(TableHeaderComponent *tableHeader)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>tableColumnDraggingChanged</name>
      <anchorfile>classTableHeaderComponent_1_1Listener.html</anchorfile>
      <anchor>a5e8c0b7fb86c3c91764c00a5c55fe357</anchor>
      <arglist>(TableHeaderComponent *tableHeader, int columnIdNowBeingDragged)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>TableHeaderComponent::LookAndFeelMethods</name>
    <filename>structTableHeaderComponent_1_1LookAndFeelMethods.html</filename>
  </compound>
  <compound kind="class">
    <name>TableListBox</name>
    <filename>classTableListBox.html</filename>
    <base>ListBox</base>
    <base protection="private">ListBoxModel</base>
    <base protection="private">TableHeaderComponent::Listener</base>
    <member kind="function">
      <type></type>
      <name>TableListBox</name>
      <anchorfile>classTableListBox.html</anchorfile>
      <anchor>a25911eaf3b9f05b1419e61deb9e89c2a</anchor>
      <arglist>(const String &amp;componentName=String(), TableListBoxModel *model=nullptr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TableListBox</name>
      <anchorfile>classTableListBox.html</anchorfile>
      <anchor>a4329c84e3a80806ea1614be35f3ebb79</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setModel</name>
      <anchorfile>classTableListBox.html</anchorfile>
      <anchor>a0ec78e27679edffd4995543819eb6795</anchor>
      <arglist>(TableListBoxModel *newModel)</arglist>
    </member>
    <member kind="function">
      <type>TableListBoxModel *</type>
      <name>getModel</name>
      <anchorfile>classTableListBox.html</anchorfile>
      <anchor>a9b854cb883e30cccd6957e9f6ffdb395</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>TableHeaderComponent &amp;</type>
      <name>getHeader</name>
      <anchorfile>classTableListBox.html</anchorfile>
      <anchor>a1cfaead5ba01aa8d18a0d8c299d141de</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setHeader</name>
      <anchorfile>classTableListBox.html</anchorfile>
      <anchor>a886796417fdc7db6fb31248cfcb92c3f</anchor>
      <arglist>(TableHeaderComponent *newHeader)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setHeaderHeight</name>
      <anchorfile>classTableListBox.html</anchorfile>
      <anchor>a51ccf41c12897d58e13d4b7be7cbdff3</anchor>
      <arglist>(int newHeight)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getHeaderHeight</name>
      <anchorfile>classTableListBox.html</anchorfile>
      <anchor>a22dbaf536665f2407b7b498ec965f346</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>autoSizeColumn</name>
      <anchorfile>classTableListBox.html</anchorfile>
      <anchor>a64d4c5c4a49a07c9dddb5e9def2157a7</anchor>
      <arglist>(int columnId)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>autoSizeAllColumns</name>
      <anchorfile>classTableListBox.html</anchorfile>
      <anchor>ad007aa31ee166a0d4d69fbe101cb9be8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAutoSizeMenuOptionShown</name>
      <anchorfile>classTableListBox.html</anchorfile>
      <anchor>aef1298269aae3abc315e82d22f5397d8</anchor>
      <arglist>(bool shouldBeShown) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isAutoSizeMenuOptionShown</name>
      <anchorfile>classTableListBox.html</anchorfile>
      <anchor>a5ec338f9837d64b3099bdcff45bae697</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Rectangle&lt; int &gt;</type>
      <name>getCellPosition</name>
      <anchorfile>classTableListBox.html</anchorfile>
      <anchor>af9362171c76ddcca08cce8fdbd869f1a</anchor>
      <arglist>(int columnId, int rowNumber, bool relativeToComponentTopLeft) const </arglist>
    </member>
    <member kind="function">
      <type>Component *</type>
      <name>getCellComponent</name>
      <anchorfile>classTableListBox.html</anchorfile>
      <anchor>a7ccaf7f38e747e7ced9203caabaf7267</anchor>
      <arglist>(int columnId, int rowNumber) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scrollToEnsureColumnIsOnscreen</name>
      <anchorfile>classTableListBox.html</anchorfile>
      <anchor>a6beb66e94224409499b86a01e45a59f7</anchor>
      <arglist>(int columnId)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumRows</name>
      <anchorfile>classTableListBox.html</anchorfile>
      <anchor>a7f2fd646bd80cf649e97c2284b027794</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>paintListBoxItem</name>
      <anchorfile>classTableListBox.html</anchorfile>
      <anchor>ac19910ec33fa1a0c952e8443b07c06f3</anchor>
      <arglist>(int, Graphics &amp;, int, int, bool) override</arglist>
    </member>
    <member kind="function">
      <type>Component *</type>
      <name>refreshComponentForRow</name>
      <anchorfile>classTableListBox.html</anchorfile>
      <anchor>afea1a88c9ce306400ec99c3df655ee89</anchor>
      <arglist>(int rowNumber, bool isRowSelected, Component *existingComponentToUpdate) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>selectedRowsChanged</name>
      <anchorfile>classTableListBox.html</anchorfile>
      <anchor>a7bc820ce679fe96a7ebef43e1cfc8b2c</anchor>
      <arglist>(int row) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deleteKeyPressed</name>
      <anchorfile>classTableListBox.html</anchorfile>
      <anchor>ae9b7978011b47044454721da340a2c09</anchor>
      <arglist>(int currentSelectedRow) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>returnKeyPressed</name>
      <anchorfile>classTableListBox.html</anchorfile>
      <anchor>a9abe1206de0c97feeaf3361e8531cf54</anchor>
      <arglist>(int currentSelectedRow) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>backgroundClicked</name>
      <anchorfile>classTableListBox.html</anchorfile>
      <anchor>aebcd0043fdb8ff5ffb9249e0061de544</anchor>
      <arglist>(const MouseEvent &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>listWasScrolled</name>
      <anchorfile>classTableListBox.html</anchorfile>
      <anchor>a17c700c7a47639fc0cd018b1e36d70b1</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>tableColumnsChanged</name>
      <anchorfile>classTableListBox.html</anchorfile>
      <anchor>afe6e61688b7d7d5a5308a38e04ffcdb6</anchor>
      <arglist>(TableHeaderComponent *) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>tableColumnsResized</name>
      <anchorfile>classTableListBox.html</anchorfile>
      <anchor>a06df8a00b36e889538fef543ddb5e533</anchor>
      <arglist>(TableHeaderComponent *) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>tableSortOrderChanged</name>
      <anchorfile>classTableListBox.html</anchorfile>
      <anchor>a4952a969e373f3238e80b256d1461e62</anchor>
      <arglist>(TableHeaderComponent *) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>tableColumnDraggingChanged</name>
      <anchorfile>classTableListBox.html</anchorfile>
      <anchor>a3e8ed3e687b936312a991ed75dd74533</anchor>
      <arglist>(TableHeaderComponent *, int) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resized</name>
      <anchorfile>classTableListBox.html</anchorfile>
      <anchor>a55f8af174554cc757a6b8e8ad10260ad</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TableListBoxModel</name>
    <filename>classTableListBoxModel.html</filename>
    <member kind="function">
      <type></type>
      <name>TableListBoxModel</name>
      <anchorfile>classTableListBoxModel.html</anchorfile>
      <anchor>ab5794e70e60fd8a20e9a7727b58a55d3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TableListBoxModel</name>
      <anchorfile>classTableListBoxModel.html</anchorfile>
      <anchor>a69fce53074484eb5388bf99239b1c9a8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getNumRows</name>
      <anchorfile>classTableListBoxModel.html</anchorfile>
      <anchor>ae7ff7c6523e8113ff1c13b39f7144bf2</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>paintRowBackground</name>
      <anchorfile>classTableListBoxModel.html</anchorfile>
      <anchor>a427fdaf7959f3858a7144b490227374a</anchor>
      <arglist>(Graphics &amp;, int rowNumber, int width, int height, bool rowIsSelected)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>paintCell</name>
      <anchorfile>classTableListBoxModel.html</anchorfile>
      <anchor>a46310df3a1b63b4e874f40bb3dfb14f5</anchor>
      <arglist>(Graphics &amp;, int rowNumber, int columnId, int width, int height, bool rowIsSelected)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Component *</type>
      <name>refreshComponentForCell</name>
      <anchorfile>classTableListBoxModel.html</anchorfile>
      <anchor>a07767e4e5a3812e486c187705b0921bd</anchor>
      <arglist>(int rowNumber, int columnId, bool isRowSelected, Component *existingComponentToUpdate)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>cellClicked</name>
      <anchorfile>classTableListBoxModel.html</anchorfile>
      <anchor>a6626a7ad733dafebb14f6f11562ea8aa</anchor>
      <arglist>(int rowNumber, int columnId, const MouseEvent &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>cellDoubleClicked</name>
      <anchorfile>classTableListBoxModel.html</anchorfile>
      <anchor>a5de9942dc2f4d78511880d588f2ea137</anchor>
      <arglist>(int rowNumber, int columnId, const MouseEvent &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>backgroundClicked</name>
      <anchorfile>classTableListBoxModel.html</anchorfile>
      <anchor>af31c6c676bb85789dff16226f3493c6b</anchor>
      <arglist>(const MouseEvent &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>sortOrderChanged</name>
      <anchorfile>classTableListBoxModel.html</anchorfile>
      <anchor>a7941c048bd8e10841dcf7f2acace3656</anchor>
      <arglist>(int newSortColumnId, bool isForwards)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getColumnAutoSizeWidth</name>
      <anchorfile>classTableListBoxModel.html</anchorfile>
      <anchor>a625b6fcb1118fbfc63aeade25786eb0b</anchor>
      <arglist>(int columnId)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual String</type>
      <name>getCellTooltip</name>
      <anchorfile>classTableListBoxModel.html</anchorfile>
      <anchor>a711cb4107a067102737f558711bfe714</anchor>
      <arglist>(int rowNumber, int columnId)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>selectedRowsChanged</name>
      <anchorfile>classTableListBoxModel.html</anchorfile>
      <anchor>a918995d04263035e52b5e9ca174e7ab6</anchor>
      <arglist>(int lastRowSelected)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>deleteKeyPressed</name>
      <anchorfile>classTableListBoxModel.html</anchorfile>
      <anchor>a5f17bdc591ef08f7b89e65275e22e46f</anchor>
      <arglist>(int lastRowSelected)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>returnKeyPressed</name>
      <anchorfile>classTableListBoxModel.html</anchorfile>
      <anchor>a1c622b283ff2dec56f5373ca223544ae</anchor>
      <arglist>(int lastRowSelected)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>listWasScrolled</name>
      <anchorfile>classTableListBoxModel.html</anchorfile>
      <anchor>a4793a06a4dc4f88a2049360f6cd34f83</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual var</type>
      <name>getDragSourceDescription</name>
      <anchorfile>classTableListBoxModel.html</anchorfile>
      <anchor>a18d18a78f51b26b29a416c1905f31470</anchor>
      <arglist>(const SparseSet&lt; int &gt; &amp;currentlySelectedRows)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TemporaryFile</name>
    <filename>classTemporaryFile.html</filename>
    <member kind="enumeration">
      <type></type>
      <name>OptionFlags</name>
      <anchorfile>classTemporaryFile.html</anchorfile>
      <anchor>af04f4ef2ea1bee0b20cdb4c072442e8d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>useHiddenFile</name>
      <anchorfile>classTemporaryFile.html</anchorfile>
      <anchor>af04f4ef2ea1bee0b20cdb4c072442e8da5a8f2dba38db83ba22b75362598feaf6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>putNumbersInBrackets</name>
      <anchorfile>classTemporaryFile.html</anchorfile>
      <anchor>af04f4ef2ea1bee0b20cdb4c072442e8da756fae13005d397744383ecd04539914</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TemporaryFile</name>
      <anchorfile>classTemporaryFile.html</anchorfile>
      <anchor>a65662b1103831b0dfa323547284724c4</anchor>
      <arglist>(const String &amp;suffix=String(), int optionFlags=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TemporaryFile</name>
      <anchorfile>classTemporaryFile.html</anchorfile>
      <anchor>a7039b78139b7d1c0661a4e1307929127</anchor>
      <arglist>(const File &amp;targetFile, int optionFlags=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TemporaryFile</name>
      <anchorfile>classTemporaryFile.html</anchorfile>
      <anchor>acccfa18e501075be52d80c99443694cb</anchor>
      <arglist>(const File &amp;targetFile, const File &amp;temporaryFile)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TemporaryFile</name>
      <anchorfile>classTemporaryFile.html</anchorfile>
      <anchor>a7a0f828343c95d3a7e81d6d3587ad116</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const File &amp;</type>
      <name>getFile</name>
      <anchorfile>classTemporaryFile.html</anchorfile>
      <anchor>aa411d8ae27e69ef64819ef9bc670dda1</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const File &amp;</type>
      <name>getTargetFile</name>
      <anchorfile>classTemporaryFile.html</anchorfile>
      <anchor>a61bb02caa51de80e32f05b90340c2c81</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>overwriteTargetFileWithTemporary</name>
      <anchorfile>classTemporaryFile.html</anchorfile>
      <anchor>aaf1c2513c6bd7b1ba343fe53cddd0fd0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>deleteTemporaryFile</name>
      <anchorfile>classTemporaryFile.html</anchorfile>
      <anchor>a3a79444415eba12ba52fb9dc86d126a0</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TextButton</name>
    <filename>classTextButton.html</filename>
    <base>Button</base>
    <member kind="enumeration">
      <type></type>
      <name>ColourIds</name>
      <anchorfile>classTextButton.html</anchorfile>
      <anchor>afb6c1da587aebb63b58a2569bed70c2c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>buttonColourId</name>
      <anchorfile>classTextButton.html</anchorfile>
      <anchor>afb6c1da587aebb63b58a2569bed70c2caf54542fa0ebadc194ffebbf3f26f5413</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>buttonOnColourId</name>
      <anchorfile>classTextButton.html</anchorfile>
      <anchor>afb6c1da587aebb63b58a2569bed70c2cab5c464bb61172a02ca81f629bbb42ace</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>textColourOffId</name>
      <anchorfile>classTextButton.html</anchorfile>
      <anchor>afb6c1da587aebb63b58a2569bed70c2ca4f6e7bf61b38241121bd84a28698e768</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>textColourOnId</name>
      <anchorfile>classTextButton.html</anchorfile>
      <anchor>afb6c1da587aebb63b58a2569bed70c2ca196c13a00ea89562ec1fdeccb59ffdb7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TextButton</name>
      <anchorfile>classTextButton.html</anchorfile>
      <anchor>a375f0ed0d1e5a4845648582fedd89085</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TextButton</name>
      <anchorfile>classTextButton.html</anchorfile>
      <anchor>a67ea80f3fcf40aee27831bf3caf89a88</anchor>
      <arglist>(const String &amp;buttonName)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TextButton</name>
      <anchorfile>classTextButton.html</anchorfile>
      <anchor>a2eee37f72b2569208b1c641d19f96eb1</anchor>
      <arglist>(const String &amp;buttonName, const String &amp;toolTip)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TextButton</name>
      <anchorfile>classTextButton.html</anchorfile>
      <anchor>a497a17bb110e249c7eb88a98dad12192</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>changeWidthToFitText</name>
      <anchorfile>classTextButton.html</anchorfile>
      <anchor>a989aa5c523c2af3ed0ede9e006d73d6f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>changeWidthToFitText</name>
      <anchorfile>classTextButton.html</anchorfile>
      <anchor>a671c82560fd59c6f0ff846c4970d9cdc</anchor>
      <arglist>(int newHeight)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getBestWidthForHeight</name>
      <anchorfile>classTextButton.html</anchorfile>
      <anchor>a1b05ce57fe7e70d64d605faa7f653aa0</anchor>
      <arglist>(int buttonHeight)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>paintButton</name>
      <anchorfile>classTextButton.html</anchorfile>
      <anchor>a2725726e9e63c999a55aa014b2591f06</anchor>
      <arglist>(Graphics &amp;, bool isMouseOverButton, bool isButtonDown) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>colourChanged</name>
      <anchorfile>classTextButton.html</anchorfile>
      <anchor>ac645180416be13b11736806b082e34dc</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TextDiff</name>
    <filename>classTextDiff.html</filename>
    <class kind="struct">TextDiff::Change</class>
    <member kind="function">
      <type></type>
      <name>TextDiff</name>
      <anchorfile>classTextDiff.html</anchorfile>
      <anchor>a3d5bbdb193c431b7145e477954a35de8</anchor>
      <arglist>(const String &amp;original, const String &amp;target)</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>appliedTo</name>
      <anchorfile>classTextDiff.html</anchorfile>
      <anchor>ab5e55f6d26de229937e1685442d657ed</anchor>
      <arglist>(String text) const </arglist>
    </member>
    <member kind="variable">
      <type>Array&lt; Change &gt;</type>
      <name>changes</name>
      <anchorfile>classTextDiff.html</anchorfile>
      <anchor>af3d45ea829e24a3ab37460646778bf82</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>TextDiff::Change</name>
    <filename>structTextDiff_1_1Change.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>isDeletion</name>
      <anchorfile>structTextDiff_1_1Change.html</anchorfile>
      <anchor>a2db8fd1ed38a7607f06afc3ea034d620</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>appliedTo</name>
      <anchorfile>structTextDiff_1_1Change.html</anchorfile>
      <anchor>a8a3a03a16ef2380217dcc8e404e8fbb5</anchor>
      <arglist>(const String &amp;original) const noexcept</arglist>
    </member>
    <member kind="variable">
      <type>String</type>
      <name>insertedText</name>
      <anchorfile>structTextDiff_1_1Change.html</anchorfile>
      <anchor>a6ddf900c18c62706054a85342c100f9a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>start</name>
      <anchorfile>structTextDiff_1_1Change.html</anchorfile>
      <anchor>ac72e9e25d35530fac7837a2d22c31958</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>length</name>
      <anchorfile>structTextDiff_1_1Change.html</anchorfile>
      <anchor>a82c0c693885a3e9c43d5e3f88b4175a8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TextDragAndDropTarget</name>
    <filename>classTextDragAndDropTarget.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TextDragAndDropTarget</name>
      <anchorfile>classTextDragAndDropTarget.html</anchorfile>
      <anchor>a4fb1cc79ab921c63098cec4827af4c62</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isInterestedInTextDrag</name>
      <anchorfile>classTextDragAndDropTarget.html</anchorfile>
      <anchor>a43d8905fbfba1fbf2e1fb1ab5d0c9183</anchor>
      <arglist>(const String &amp;text)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>textDragEnter</name>
      <anchorfile>classTextDragAndDropTarget.html</anchorfile>
      <anchor>a1512abd580d1c2c4098dafebafb837ec</anchor>
      <arglist>(const String &amp;text, int x, int y)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>textDragMove</name>
      <anchorfile>classTextDragAndDropTarget.html</anchorfile>
      <anchor>a9cbd6cd4e3e7549dbb10e89f1388b982</anchor>
      <arglist>(const String &amp;text, int x, int y)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>textDragExit</name>
      <anchorfile>classTextDragAndDropTarget.html</anchorfile>
      <anchor>a6aca30f40684c602a5f4b43e25574f56</anchor>
      <arglist>(const String &amp;text)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>textDropped</name>
      <anchorfile>classTextDragAndDropTarget.html</anchorfile>
      <anchor>ab8d586cc52a71021c4fe1629b6410e69</anchor>
      <arglist>(const String &amp;text, int x, int y)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TextEditor</name>
    <filename>classTextEditor.html</filename>
    <base>Component</base>
    <base>TextInputTarget</base>
    <base>SettableTooltipClient</base>
    <class kind="class">TextEditor::InputFilter</class>
    <class kind="class">TextEditor::LengthAndCharacterRestriction</class>
    <class kind="class">TextEditor::Listener</class>
    <class kind="struct">TextEditor::LookAndFeelMethods</class>
    <member kind="enumeration">
      <type></type>
      <name>ColourIds</name>
      <anchorfile>classTextEditor.html</anchorfile>
      <anchor>aa805220923c93cd808a92fff0e3fb71d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>backgroundColourId</name>
      <anchorfile>classTextEditor.html</anchorfile>
      <anchor>aa805220923c93cd808a92fff0e3fb71daa28cd01c2a077370b4143ad67d00985b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>textColourId</name>
      <anchorfile>classTextEditor.html</anchorfile>
      <anchor>aa805220923c93cd808a92fff0e3fb71daf840969fe4a492f0e5fbe30f5948c8ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>highlightColourId</name>
      <anchorfile>classTextEditor.html</anchorfile>
      <anchor>aa805220923c93cd808a92fff0e3fb71da6308b1f46eba9b07247588f1d313ae09</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>highlightedTextColourId</name>
      <anchorfile>classTextEditor.html</anchorfile>
      <anchor>aa805220923c93cd808a92fff0e3fb71da85b3b328db89b6946cda395dae78ebad</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>outlineColourId</name>
      <anchorfile>classTextEditor.html</anchorfile>
      <anchor>aa805220923c93cd808a92fff0e3fb71dadb665df86c504955085dcb75524a96d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>focusedOutlineColourId</name>
      <anchorfile>classTextEditor.html</anchorfile>
      <anchor>aa805220923c93cd808a92fff0e3fb71da590a3ad72115412061fdfbbb089609fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>shadowColourId</name>
      <anchorfile>classTextEditor.html</anchorfile>
      <anchor>aa805220923c93cd808a92fff0e3fb71dab6ed00bbcce56fef5ff92d6bb705f988</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TextEditor</name>
      <anchorfile>classTextEditor.html</anchorfile>
      <anchor>ad34439cf56ba1ded149c0d7e88cde6fa</anchor>
      <arglist>(const String &amp;componentName=String(), juce_wchar passwordCharacter=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TextEditor</name>
      <anchorfile>classTextEditor.html</anchorfile>
      <anchor>a67cc14c174c7b66738c40f844d4dd7d7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMultiLine</name>
      <anchorfile>classTextEditor.html</anchorfile>
      <anchor>a939bf23c983f695379a92f9612928160</anchor>
      <arglist>(bool shouldBeMultiLine, bool shouldWordWrap=true)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isMultiLine</name>
      <anchorfile>classTextEditor.html</anchorfile>
      <anchor>af19a278e34583bc8aabf63ace216132d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setReturnKeyStartsNewLine</name>
      <anchorfile>classTextEditor.html</anchorfile>
      <anchor>a60e99221178fe5510edcfcd246a8bf2c</anchor>
      <arglist>(bool shouldStartNewLine)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getReturnKeyStartsNewLine</name>
      <anchorfile>classTextEditor.html</anchorfile>
      <anchor>ab9735a543701ac065cfc9c6d56893d77</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTabKeyUsedAsCharacter</name>
      <anchorfile>classTextEditor.html</anchorfile>
      <anchor>ac2ac11e5eab2ec09cf47a26d84f5bf85</anchor>
      <arglist>(bool shouldTabKeyBeUsed)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isTabKeyUsedAsCharacter</name>
      <anchorfile>classTextEditor.html</anchorfile>
      <anchor>a71c61570fe0974966d94bc7e0a805136</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEscapeAndReturnKeysConsumed</name>
      <anchorfile>classTextEditor.html</anchorfile>
      <anchor>a60a856b5c49ff27fb5f2a00f92bd251f</anchor>
      <arglist>(bool shouldBeConsumed) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setReadOnly</name>
      <anchorfile>classTextEditor.html</anchorfile>
      <anchor>a046d359a0f6709b02a21d45c5958817a</anchor>
      <arglist>(bool shouldBeReadOnly)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isReadOnly</name>
      <anchorfile>classTextEditor.html</anchorfile>
      <anchor>ada40a35cf274597068915046856ed1e3</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCaretVisible</name>
      <anchorfile>classTextEditor.html</anchorfile>
      <anchor>a4b23a8397f2d4741b10bda03ef4d1b12</anchor>
      <arglist>(bool shouldBeVisible)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isCaretVisible</name>
      <anchorfile>classTextEditor.html</anchorfile>
      <anchor>ae489b45147c4fbfb8fdc9bf2c2946415</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setScrollbarsShown</name>
      <anchorfile>classTextEditor.html</anchorfile>
      <anchor>aea30c7c5e684898eb2cac76983c38b48</anchor>
      <arglist>(bool shouldBeEnabled)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>areScrollbarsShown</name>
      <anchorfile>classTextEditor.html</anchorfile>
      <anchor>aa30f090abb8e9c8804f35f4fd45e8bb7</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPasswordCharacter</name>
      <anchorfile>classTextEditor.html</anchorfile>
      <anchor>a8978b1e9eecf1c1ac3576f024bb7bde0</anchor>
      <arglist>(juce_wchar passwordCharacter)</arglist>
    </member>
    <member kind="function">
      <type>juce_wchar</type>
      <name>getPasswordCharacter</name>
      <anchorfile>classTextEditor.html</anchorfile>
      <anchor>ad77f87717c15cc311d21ec4e01c9f52f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPopupMenuEnabled</name>
      <anchorfile>classTextEditor.html</anchorfile>
      <anchor>abe2b07aad6f2a7d95f9a31d672964d52</anchor>
      <arglist>(bool menuEnabled)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isPopupMenuEnabled</name>
      <anchorfile>classTextEditor.html</anchorfile>
      <anchor>ac6480b421592f4d2cd4dd309193d8dff</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isPopupMenuCurrentlyActive</name>
      <anchorfile>classTextEditor.html</anchorfile>
      <anchor>a7dd76244ccf284b367d6bef080f20746</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFont</name>
      <anchorfile>classTextEditor.html</anchorfile>
      <anchor>a92819cc8faf1b9755d23c3757948f1c7</anchor>
      <arglist>(const Font &amp;newFont)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyFontToAllText</name>
      <anchorfile>classTextEditor.html</anchorfile>
      <anchor>acaea31f07a346e26627cf2744f2a702f</anchor>
      <arglist>(const Font &amp;newFont)</arglist>
    </member>
    <member kind="function">
      <type>const Font &amp;</type>
      <name>getFont</name>
      <anchorfile>classTextEditor.html</anchorfile>
      <anchor>ab7bf7ea7c0c2b72b0382e12a02c9ea92</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSelectAllWhenFocused</name>
      <anchorfile>classTextEditor.html</anchorfile>
      <anchor>a12de680fb05a19ca5d20107787ec73cf</anchor>
      <arglist>(bool shouldSelectAll)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTextToShowWhenEmpty</name>
      <anchorfile>classTextEditor.html</anchorfile>
      <anchor>a868535223456be989e6d3411bf62f2d2</anchor>
      <arglist>(const String &amp;text, Colour colourToUse)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setScrollBarThickness</name>
      <anchorfile>classTextEditor.html</anchorfile>
      <anchor>a9f71873e9e95c27cf8d5ef8b3c12b1e0</anchor>
      <arglist>(int newThicknessPixels)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addListener</name>
      <anchorfile>classTextEditor.html</anchorfile>
      <anchor>a393bac9005237b946c8ef81bd783477d</anchor>
      <arglist>(Listener *newListener)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeListener</name>
      <anchorfile>classTextEditor.html</anchorfile>
      <anchor>af3008955686b9efd7cbb723646260f06</anchor>
      <arglist>(Listener *listenerToRemove)</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>getText</name>
      <anchorfile>classTextEditor.html</anchorfile>
      <anchor>aa8284e364e8592094991dd62adb9d534</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>getTextInRange</name>
      <anchorfile>classTextEditor.html</anchorfile>
      <anchor>a43ad456e17f0234da93370b913e2ba3a</anchor>
      <arglist>(const Range&lt; int &gt; &amp;textRange) const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEmpty</name>
      <anchorfile>classTextEditor.html</anchorfile>
      <anchor>a483367aa9441aa1aab74309f362f1673</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setText</name>
      <anchorfile>classTextEditor.html</anchorfile>
      <anchor>a9fd6243466c8122ccfffc03fa39f6c4f</anchor>
      <arglist>(const String &amp;newText, bool sendTextChangeMessage=true)</arglist>
    </member>
    <member kind="function">
      <type>Value &amp;</type>
      <name>getTextValue</name>
      <anchorfile>classTextEditor.html</anchorfile>
      <anchor>a6bffbe3d437e3d8144ef9a9cb9bcaade</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insertTextAtCaret</name>
      <anchorfile>classTextEditor.html</anchorfile>
      <anchor>a366156a95212e4aa7001e4bb2ebe1282</anchor>
      <arglist>(const String &amp;textToInsert) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classTextEditor.html</anchorfile>
      <anchor>a63f9bab8dcbec46cf840bf199e7768a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cut</name>
      <anchorfile>classTextEditor.html</anchorfile>
      <anchor>acbdfebceaf8ba07a6242078c2da7473c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classTextEditor.html</anchorfile>
      <anchor>afed2255126c654d5936c242233c9153b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>paste</name>
      <anchorfile>classTextEditor.html</anchorfile>
      <anchor>a2a8829c00507b8747ae6ffe71b8e18cc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getCaretPosition</name>
      <anchorfile>classTextEditor.html</anchorfile>
      <anchor>a4eb79165443145bf31bc64100c590684</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCaretPosition</name>
      <anchorfile>classTextEditor.html</anchorfile>
      <anchor>ae83d8245dfe738d0b2d05d0501c5e39e</anchor>
      <arglist>(int newIndex)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scrollEditorToPositionCaret</name>
      <anchorfile>classTextEditor.html</anchorfile>
      <anchor>a98c2a07e4f2d75014005ea2a343d30e8</anchor>
      <arglist>(int desiredCaretX, int desiredCaretY)</arglist>
    </member>
    <member kind="function">
      <type>Rectangle&lt; int &gt;</type>
      <name>getCaretRectangle</name>
      <anchorfile>classTextEditor.html</anchorfile>
      <anchor>a27a162ec36d9b4b196b2b9f01f916d24</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setHighlightedRegion</name>
      <anchorfile>classTextEditor.html</anchorfile>
      <anchor>a8ecda909495a70bc8d55d89a2a07a959</anchor>
      <arglist>(const Range&lt; int &gt; &amp;newSelection) override</arglist>
    </member>
    <member kind="function">
      <type>Range&lt; int &gt;</type>
      <name>getHighlightedRegion</name>
      <anchorfile>classTextEditor.html</anchorfile>
      <anchor>a4051fa29ff801d6e5813b8a138c6f081</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>getHighlightedText</name>
      <anchorfile>classTextEditor.html</anchorfile>
      <anchor>adc5fa4c2877a1389d9155f5e0909f4b9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getTextIndexAt</name>
      <anchorfile>classTextEditor.html</anchorfile>
      <anchor>a31d3bc0ae108c2991b4160f6ba894913</anchor>
      <arglist>(int x, int y)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getTotalNumChars</name>
      <anchorfile>classTextEditor.html</anchorfile>
      <anchor>a4f2aac41d4bccb00c95f992996435bef</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getTextWidth</name>
      <anchorfile>classTextEditor.html</anchorfile>
      <anchor>afeeb66311110da4f210ee4067451bbac</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getTextHeight</name>
      <anchorfile>classTextEditor.html</anchorfile>
      <anchor>a80b0f4c59f567aede0ceff64b2156d98</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIndents</name>
      <anchorfile>classTextEditor.html</anchorfile>
      <anchor>a33de8e25ff72f21f74fa4cb22343e3bf</anchor>
      <arglist>(int newLeftIndent, int newTopIndent)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBorder</name>
      <anchorfile>classTextEditor.html</anchorfile>
      <anchor>aa45936ba54c60455af7cd65a4238652a</anchor>
      <arglist>(const BorderSize&lt; int &gt; &amp;border)</arglist>
    </member>
    <member kind="function">
      <type>BorderSize&lt; int &gt;</type>
      <name>getBorder</name>
      <anchorfile>classTextEditor.html</anchorfile>
      <anchor>a248878c91365a6244ba6be35afaeb27f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setScrollToShowCursor</name>
      <anchorfile>classTextEditor.html</anchorfile>
      <anchor>ac263b589275580c0a2a89de9e02f0061</anchor>
      <arglist>(bool shouldScrollToShowCaret)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>moveCaretToEnd</name>
      <anchorfile>classTextEditor.html</anchorfile>
      <anchor>af6410ba48e5c16b668d83e2f661a6b54</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>moveCaretLeft</name>
      <anchorfile>classTextEditor.html</anchorfile>
      <anchor>ab707c995a249a259d27d86c271ed2822</anchor>
      <arglist>(bool moveInWholeWordSteps, bool selecting)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>moveCaretRight</name>
      <anchorfile>classTextEditor.html</anchorfile>
      <anchor>a4020204e5c9bb2afbca36981d396b9de</anchor>
      <arglist>(bool moveInWholeWordSteps, bool selecting)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>moveCaretUp</name>
      <anchorfile>classTextEditor.html</anchorfile>
      <anchor>ac823fa08b0a21a2edb100f91e3c82d57</anchor>
      <arglist>(bool selecting)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>moveCaretDown</name>
      <anchorfile>classTextEditor.html</anchorfile>
      <anchor>adc5ff1f6ecad74fc03e702f44be6397f</anchor>
      <arglist>(bool selecting)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>pageUp</name>
      <anchorfile>classTextEditor.html</anchorfile>
      <anchor>a0df48900d231dc9d0551894ddce5dbea</anchor>
      <arglist>(bool selecting)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>pageDown</name>
      <anchorfile>classTextEditor.html</anchorfile>
      <anchor>a58f8c5dbdcc028969013c0c16159b1df</anchor>
      <arglist>(bool selecting)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>scrollDown</name>
      <anchorfile>classTextEditor.html</anchorfile>
      <anchor>a9e7f388d8583124959d48c8c7e1a28da</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>scrollUp</name>
      <anchorfile>classTextEditor.html</anchorfile>
      <anchor>af48c91e4f02e28779a7fb94689b67ad6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>moveCaretToTop</name>
      <anchorfile>classTextEditor.html</anchorfile>
      <anchor>a8a76b9fa0e44840f19dfbac6c291a868</anchor>
      <arglist>(bool selecting)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>moveCaretToStartOfLine</name>
      <anchorfile>classTextEditor.html</anchorfile>
      <anchor>a2089a2c71524d5c384924e5b0b8f928c</anchor>
      <arglist>(bool selecting)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>moveCaretToEnd</name>
      <anchorfile>classTextEditor.html</anchorfile>
      <anchor>a92c7bd8c9a78c55195f287c13b3e5a0e</anchor>
      <arglist>(bool selecting)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>moveCaretToEndOfLine</name>
      <anchorfile>classTextEditor.html</anchorfile>
      <anchor>a243ae1922d80f422222799e011a678f4</anchor>
      <arglist>(bool selecting)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>deleteBackwards</name>
      <anchorfile>classTextEditor.html</anchorfile>
      <anchor>a7779055c39661e834c359f6fcb5cf6b3</anchor>
      <arglist>(bool moveInWholeWordSteps)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>deleteForwards</name>
      <anchorfile>classTextEditor.html</anchorfile>
      <anchor>a855bfe3297879cdb7000e23f1f4d3695</anchor>
      <arglist>(bool moveInWholeWordSteps)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>copyToClipboard</name>
      <anchorfile>classTextEditor.html</anchorfile>
      <anchor>a6765bf476a80e6e69351a4971466be6f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>cutToClipboard</name>
      <anchorfile>classTextEditor.html</anchorfile>
      <anchor>aa2591b146a4707830cbd607323fd77e3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>pasteFromClipboard</name>
      <anchorfile>classTextEditor.html</anchorfile>
      <anchor>a15edfe8b94924ad79c517b5810955f35</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>selectAll</name>
      <anchorfile>classTextEditor.html</anchorfile>
      <anchor>a1a7c8738491f129f8811fe969b5ecaa3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>undo</name>
      <anchorfile>classTextEditor.html</anchorfile>
      <anchor>a66fea7cc1a783ab14dd5a6386afc53e8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>redo</name>
      <anchorfile>classTextEditor.html</anchorfile>
      <anchor>a864db67116dd13ed7a29d1d99353458c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addPopupMenuItems</name>
      <anchorfile>classTextEditor.html</anchorfile>
      <anchor>a5887eae43a0517c2c986d54b0f02e9bd</anchor>
      <arglist>(PopupMenu &amp;menuToAddTo, const MouseEvent *mouseClickEvent)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>performPopupMenuAction</name>
      <anchorfile>classTextEditor.html</anchorfile>
      <anchor>ac90236dab0312511ba8bc38b2507a575</anchor>
      <arglist>(int menuItemID)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setInputFilter</name>
      <anchorfile>classTextEditor.html</anchorfile>
      <anchor>ad89f3ea5b240342e0cc09881919cb7bb</anchor>
      <arglist>(InputFilter *newFilter, bool takeOwnership)</arglist>
    </member>
    <member kind="function">
      <type>InputFilter *</type>
      <name>getInputFilter</name>
      <anchorfile>classTextEditor.html</anchorfile>
      <anchor>a8311307f8a92b5578a528eccf8cbafa0</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setInputRestrictions</name>
      <anchorfile>classTextEditor.html</anchorfile>
      <anchor>aeda595bb13ea799cce7ac121cf432f26</anchor>
      <arglist>(int maxTextLength, const String &amp;allowedCharacters=String())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setKeyboardType</name>
      <anchorfile>classTextEditor.html</anchorfile>
      <anchor>a1d5a2835750358428ae45b187d10575a</anchor>
      <arglist>(VirtualKeyboardType type) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>paint</name>
      <anchorfile>classTextEditor.html</anchorfile>
      <anchor>a8b7485621bf88d75d8e51c01f9d2b82c</anchor>
      <arglist>(Graphics &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>paintOverChildren</name>
      <anchorfile>classTextEditor.html</anchorfile>
      <anchor>a2a8635846ebc9fd09bc42a256b3480f4</anchor>
      <arglist>(Graphics &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mouseDown</name>
      <anchorfile>classTextEditor.html</anchorfile>
      <anchor>ab4b237febe69d1883696ac0abbde67ac</anchor>
      <arglist>(const MouseEvent &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mouseUp</name>
      <anchorfile>classTextEditor.html</anchorfile>
      <anchor>a25254d51088d9492d1ef446f6dc2f71f</anchor>
      <arglist>(const MouseEvent &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mouseDrag</name>
      <anchorfile>classTextEditor.html</anchorfile>
      <anchor>a909826b0a96f31a75731ce2743d83342</anchor>
      <arglist>(const MouseEvent &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mouseDoubleClick</name>
      <anchorfile>classTextEditor.html</anchorfile>
      <anchor>a85bc41e6a8dcb730353ad1ac65c59e70</anchor>
      <arglist>(const MouseEvent &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mouseWheelMove</name>
      <anchorfile>classTextEditor.html</anchorfile>
      <anchor>ac5d9cb318b86e1661d39d65e4cc91aef</anchor>
      <arglist>(const MouseEvent &amp;, const MouseWheelDetails &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>keyPressed</name>
      <anchorfile>classTextEditor.html</anchorfile>
      <anchor>aeedd8eda4f9b64a9c1d71fe39890e1c7</anchor>
      <arglist>(const KeyPress &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>keyStateChanged</name>
      <anchorfile>classTextEditor.html</anchorfile>
      <anchor>a616706ad06c8a6a1c00f62a4c6e0d448</anchor>
      <arglist>(bool) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>focusGained</name>
      <anchorfile>classTextEditor.html</anchorfile>
      <anchor>a3243d2a2465fac6be33fdb9f9a38b9c0</anchor>
      <arglist>(FocusChangeType) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>focusLost</name>
      <anchorfile>classTextEditor.html</anchorfile>
      <anchor>a7272691f16e13dde9631397de63422db</anchor>
      <arglist>(FocusChangeType) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resized</name>
      <anchorfile>classTextEditor.html</anchorfile>
      <anchor>abe670d0ecdbbf419f76631565bc2600b</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enablementChanged</name>
      <anchorfile>classTextEditor.html</anchorfile>
      <anchor>ae323b4ceb59be7c1e8a1f9a637193267</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>colourChanged</name>
      <anchorfile>classTextEditor.html</anchorfile>
      <anchor>ab719d4a834d41483f4aa4f9474c0b889</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lookAndFeelChanged</name>
      <anchorfile>classTextEditor.html</anchorfile>
      <anchor>a4811e9bd7ee7ec96f2e4e1e118d9d0e9</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>parentHierarchyChanged</name>
      <anchorfile>classTextEditor.html</anchorfile>
      <anchor>ae16a68946f5921b4c36605d0d6b6eb67</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isTextInputActive</name>
      <anchorfile>classTextEditor.html</anchorfile>
      <anchor>a591af598b901d22a058b8043ced32a36</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTemporaryUnderlining</name>
      <anchorfile>classTextEditor.html</anchorfile>
      <anchor>a9ce8f410e566c1998a8751e8d8bec34b</anchor>
      <arglist>(const Array&lt; Range&lt; int &gt; &gt; &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>VirtualKeyboardType</type>
      <name>getKeyboardType</name>
      <anchorfile>classTextEditor.html</anchorfile>
      <anchor>a188d3a05803ae9493b9241d0d95f6cfb</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>scrollToMakeSureCursorIsVisible</name>
      <anchorfile>classTextEditor.html</anchorfile>
      <anchor>aa8f2e41661dec5b6584cb655b3622475</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>textChanged</name>
      <anchorfile>classTextEditor.html</anchorfile>
      <anchor>a34e3b8ad5395d493da6fee6ce9775dc1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>newTransaction</name>
      <anchorfile>classTextEditor.html</anchorfile>
      <anchor>ac1cdc461e88ca484f3528d74a7e1d27c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>returnPressed</name>
      <anchorfile>classTextEditor.html</anchorfile>
      <anchor>aea9150456f5680f7a83c54e1aa561155</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>escapePressed</name>
      <anchorfile>classTextEditor.html</anchorfile>
      <anchor>a113d5961e0129c872f606492dc0e8fab</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TextEditor::InputFilter</name>
    <filename>classTextEditor_1_1InputFilter.html</filename>
    <member kind="function">
      <type></type>
      <name>InputFilter</name>
      <anchorfile>classTextEditor_1_1InputFilter.html</anchorfile>
      <anchor>ab082d3c8daf4c5f0066e13293e343bf0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~InputFilter</name>
      <anchorfile>classTextEditor_1_1InputFilter.html</anchorfile>
      <anchor>a9e3b60623d6e180770655266931001b7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual String</type>
      <name>filterNewText</name>
      <anchorfile>classTextEditor_1_1InputFilter.html</anchorfile>
      <anchor>a756742d178e4898f532bc5afa8453e56</anchor>
      <arglist>(TextEditor &amp;, const String &amp;newInput)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TextEditor::LengthAndCharacterRestriction</name>
    <filename>classTextEditor_1_1LengthAndCharacterRestriction.html</filename>
    <base>TextEditor::InputFilter</base>
    <member kind="function">
      <type></type>
      <name>LengthAndCharacterRestriction</name>
      <anchorfile>classTextEditor_1_1LengthAndCharacterRestriction.html</anchorfile>
      <anchor>a204b8ec70b28ea91f6930e5faea66c37</anchor>
      <arglist>(int maxNumChars, const String &amp;allowedCharacters)</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>filterNewText</name>
      <anchorfile>classTextEditor_1_1LengthAndCharacterRestriction.html</anchorfile>
      <anchor>a74522a300580d56bf77e4c238dd5f9db</anchor>
      <arglist>(TextEditor &amp;, const String &amp;) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TextEditor::Listener</name>
    <filename>classTextEditor_1_1Listener.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>textEditorTextChanged</name>
      <anchorfile>classTextEditor_1_1Listener.html</anchorfile>
      <anchor>a17ec33c8bc4e83799f0edbfc559c761c</anchor>
      <arglist>(TextEditor &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>textEditorReturnKeyPressed</name>
      <anchorfile>classTextEditor_1_1Listener.html</anchorfile>
      <anchor>a77e21f1f397b50355221f8fff152958f</anchor>
      <arglist>(TextEditor &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>textEditorEscapeKeyPressed</name>
      <anchorfile>classTextEditor_1_1Listener.html</anchorfile>
      <anchor>a8c927f60d0a7266d4895f577aceb7e50</anchor>
      <arglist>(TextEditor &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>textEditorFocusLost</name>
      <anchorfile>classTextEditor_1_1Listener.html</anchorfile>
      <anchor>a9010f8bb6a6e712402ba39e76fafb9fe</anchor>
      <arglist>(TextEditor &amp;)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>TextEditor::LookAndFeelMethods</name>
    <filename>structTextEditor_1_1LookAndFeelMethods.html</filename>
  </compound>
  <compound kind="struct">
    <name>TextEditorKeyMapper</name>
    <filename>structTextEditorKeyMapper.html</filename>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>invokeKeyFunction</name>
      <anchorfile>structTextEditorKeyMapper.html</anchorfile>
      <anchor>a34f96379252e9c5eb112ec09c6935d9d</anchor>
      <arglist>(CallbackClass &amp;target, const KeyPress &amp;key)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TextInputTarget</name>
    <filename>classTextInputTarget.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isTextInputActive</name>
      <anchorfile>classTextInputTarget.html</anchorfile>
      <anchor>a8dbdf96f7d6980207dde86edbd24455f</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Range&lt; int &gt;</type>
      <name>getHighlightedRegion</name>
      <anchorfile>classTextInputTarget.html</anchorfile>
      <anchor>ae1cab69d8e1a8ac375a73d1229cd64ba</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setHighlightedRegion</name>
      <anchorfile>classTextInputTarget.html</anchorfile>
      <anchor>a4f28305922bb146295ed2decb63abf1b</anchor>
      <arglist>(const Range&lt; int &gt; &amp;newRange)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setTemporaryUnderlining</name>
      <anchorfile>classTextInputTarget.html</anchorfile>
      <anchor>a294a750fd25dce6cc2b4d14bbbff2f3b</anchor>
      <arglist>(const Array&lt; Range&lt; int &gt; &gt; &amp;underlinedRegions)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual String</type>
      <name>getTextInRange</name>
      <anchorfile>classTextInputTarget.html</anchorfile>
      <anchor>a6e420204e80413ae54bfb387f9c7f152</anchor>
      <arglist>(const Range&lt; int &gt; &amp;range) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>insertTextAtCaret</name>
      <anchorfile>classTextInputTarget.html</anchorfile>
      <anchor>a009241c97fa452d53671a00a6a5caea7</anchor>
      <arglist>(const String &amp;textToInsert)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Rectangle&lt; int &gt;</type>
      <name>getCaretRectangle</name>
      <anchorfile>classTextInputTarget.html</anchorfile>
      <anchor>afeb7bb2e326dbefacc31d181004a6c9e</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TextLayout</name>
    <filename>classTextLayout.html</filename>
    <class kind="class">TextLayout::Glyph</class>
    <class kind="class">TextLayout::Line</class>
    <class kind="class">TextLayout::Run</class>
    <member kind="function">
      <type></type>
      <name>TextLayout</name>
      <anchorfile>classTextLayout.html</anchorfile>
      <anchor>ad3d06a6b81095f80ab31f0beecf706fe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TextLayout</name>
      <anchorfile>classTextLayout.html</anchorfile>
      <anchor>a98abb8c75101bef8c14ee7d521cff350</anchor>
      <arglist>(const TextLayout &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TextLayout &amp;</type>
      <name>operator=</name>
      <anchorfile>classTextLayout.html</anchorfile>
      <anchor>af3aea2bf39a2d713120ada2be59ea280</anchor>
      <arglist>(const TextLayout &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TextLayout</name>
      <anchorfile>classTextLayout.html</anchorfile>
      <anchor>a4279899e7cd3226a9bf86c56c01ae2d1</anchor>
      <arglist>(TextLayout &amp;&amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>TextLayout &amp;</type>
      <name>operator=</name>
      <anchorfile>classTextLayout.html</anchorfile>
      <anchor>a82bead7d274b6ca17e6c26da5adbc3bf</anchor>
      <arglist>(TextLayout &amp;&amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TextLayout</name>
      <anchorfile>classTextLayout.html</anchorfile>
      <anchor>a2bbf2978fd2447c09adb2438185edd45</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>createLayout</name>
      <anchorfile>classTextLayout.html</anchorfile>
      <anchor>a2fbd9c422236db032f9cda335601580a</anchor>
      <arglist>(const AttributedString &amp;, float maxWidth)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>createLayout</name>
      <anchorfile>classTextLayout.html</anchorfile>
      <anchor>ad72b38ed441ea86b75f9242eaeb9c823</anchor>
      <arglist>(const AttributedString &amp;, float maxWidth, float maxHeight)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>createLayoutWithBalancedLineLengths</name>
      <anchorfile>classTextLayout.html</anchorfile>
      <anchor>a0eed3f8e1452cec1b549c5980cb469fb</anchor>
      <arglist>(const AttributedString &amp;, float maxWidth)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>createLayoutWithBalancedLineLengths</name>
      <anchorfile>classTextLayout.html</anchorfile>
      <anchor>aa9131016504a854ef22cc827662b776b</anchor>
      <arglist>(const AttributedString &amp;, float maxWidth, float maxHeight)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>draw</name>
      <anchorfile>classTextLayout.html</anchorfile>
      <anchor>a7645f8120cffd4a2fa471af048783789</anchor>
      <arglist>(Graphics &amp;, const Rectangle&lt; float &gt; &amp;area) const </arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getWidth</name>
      <anchorfile>classTextLayout.html</anchorfile>
      <anchor>aae206340e3734f0f9aa5f5b5f3f81c68</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getHeight</name>
      <anchorfile>classTextLayout.html</anchorfile>
      <anchor>af4364d09c1a3518cd35761df3d9ebebe</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumLines</name>
      <anchorfile>classTextLayout.html</anchorfile>
      <anchor>a87cf3ad96a71fcfb49a349bc54a5f0ec</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Line &amp;</type>
      <name>getLine</name>
      <anchorfile>classTextLayout.html</anchorfile>
      <anchor>ae82de68e1ff183dc6ab8e4eac8e01e97</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addLine</name>
      <anchorfile>classTextLayout.html</anchorfile>
      <anchor>a662a71df817d68a7cf748ce6a056f8d5</anchor>
      <arglist>(Line *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ensureStorageAllocated</name>
      <anchorfile>classTextLayout.html</anchorfile>
      <anchor>a569592a231fae556bca49c195294a25b</anchor>
      <arglist>(int numLinesNeeded)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TextLayout::Glyph</name>
    <filename>classTextLayout_1_1Glyph.html</filename>
    <member kind="function">
      <type></type>
      <name>Glyph</name>
      <anchorfile>classTextLayout_1_1Glyph.html</anchorfile>
      <anchor>a2456071c340aa555e0a3c3a520413f9a</anchor>
      <arglist>(int glyphCode, Point&lt; float &gt; anchor, float width) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Glyph</name>
      <anchorfile>classTextLayout_1_1Glyph.html</anchorfile>
      <anchor>a8a65971ba1d7ad45521d08981d6e8fc3</anchor>
      <arglist>(const Glyph &amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Glyph &amp;</type>
      <name>operator=</name>
      <anchorfile>classTextLayout_1_1Glyph.html</anchorfile>
      <anchor>a9466713778c7559166bb1ccb1f49657c</anchor>
      <arglist>(const Glyph &amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Glyph</name>
      <anchorfile>classTextLayout_1_1Glyph.html</anchorfile>
      <anchor>a3a4ac36125aef996113f63a01aa07352</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>glyphCode</name>
      <anchorfile>classTextLayout_1_1Glyph.html</anchorfile>
      <anchor>abb803cc04147b2094e02b773f6aaeb92</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Point&lt; float &gt;</type>
      <name>anchor</name>
      <anchorfile>classTextLayout_1_1Glyph.html</anchorfile>
      <anchor>a5ed7fd244c70a76748ced04c222cfb87</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>width</name>
      <anchorfile>classTextLayout_1_1Glyph.html</anchorfile>
      <anchor>a3c24f2ea2314f119c3d9e38882c83bf0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TextLayout::Line</name>
    <filename>classTextLayout_1_1Line.html</filename>
    <member kind="function">
      <type></type>
      <name>Line</name>
      <anchorfile>classTextLayout_1_1Line.html</anchorfile>
      <anchor>a57461be318997af7ef22f068c369e05b</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Line</name>
      <anchorfile>classTextLayout_1_1Line.html</anchorfile>
      <anchor>a9aee7db8a2a894759fb550499e7c1005</anchor>
      <arglist>(const Line &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Line</name>
      <anchorfile>classTextLayout_1_1Line.html</anchorfile>
      <anchor>ac73ce4493d1798ba8cdf914570d41886</anchor>
      <arglist>(Range&lt; int &gt; stringRange, Point&lt; float &gt; lineOrigin, float ascent, float descent, float leading, int numRunsToPreallocate)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Line</name>
      <anchorfile>classTextLayout_1_1Line.html</anchorfile>
      <anchor>ad58da98b9097db5235020dcf440b45f5</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>Range&lt; float &gt;</type>
      <name>getLineBoundsX</name>
      <anchorfile>classTextLayout_1_1Line.html</anchorfile>
      <anchor>aff77a6ee57f12a7d4b83cb6634763d86</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Range&lt; float &gt;</type>
      <name>getLineBoundsY</name>
      <anchorfile>classTextLayout_1_1Line.html</anchorfile>
      <anchor>ab201a5e12242e7c4379916184f4ff734</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Rectangle&lt; float &gt;</type>
      <name>getLineBounds</name>
      <anchorfile>classTextLayout_1_1Line.html</anchorfile>
      <anchor>a5a5cf1d70212e844d29812cdbcee0469</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="variable">
      <type>OwnedArray&lt; Run &gt;</type>
      <name>runs</name>
      <anchorfile>classTextLayout_1_1Line.html</anchorfile>
      <anchor>a77c79b53611e1897fbc3d0ed40d7e0e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Range&lt; int &gt;</type>
      <name>stringRange</name>
      <anchorfile>classTextLayout_1_1Line.html</anchorfile>
      <anchor>a2980388305522b3a4595196e7bbf09a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Point&lt; float &gt;</type>
      <name>lineOrigin</name>
      <anchorfile>classTextLayout_1_1Line.html</anchorfile>
      <anchor>a12a2bd00c15e016262513495600e1a8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>ascent</name>
      <anchorfile>classTextLayout_1_1Line.html</anchorfile>
      <anchor>ac356b4c8bd159161ac80438457471d7d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>descent</name>
      <anchorfile>classTextLayout_1_1Line.html</anchorfile>
      <anchor>af361532452a96a85ccd9098e5269fbcd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>leading</name>
      <anchorfile>classTextLayout_1_1Line.html</anchorfile>
      <anchor>a9ff2dde46ca08de8bfd9f69a3b4409ba</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TextLayout::Run</name>
    <filename>classTextLayout_1_1Run.html</filename>
    <member kind="function">
      <type></type>
      <name>Run</name>
      <anchorfile>classTextLayout_1_1Run.html</anchorfile>
      <anchor>a80912a38013f0ba4b116a8b8be55455c</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Run</name>
      <anchorfile>classTextLayout_1_1Run.html</anchorfile>
      <anchor>a3c228b9d44e780b3ada848d4e8b8ab0f</anchor>
      <arglist>(const Run &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Run</name>
      <anchorfile>classTextLayout_1_1Run.html</anchorfile>
      <anchor>ab53068ea8b382a413c65c3bcc8be6f2c</anchor>
      <arglist>(Range&lt; int &gt; stringRange, int numGlyphsToPreallocate)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Run</name>
      <anchorfile>classTextLayout_1_1Run.html</anchorfile>
      <anchor>a4685c193f15da88c23f63b7dc3b003c8</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="variable">
      <type>Font</type>
      <name>font</name>
      <anchorfile>classTextLayout_1_1Run.html</anchorfile>
      <anchor>a692e70e5e5ce8d78be5ecfe3c8591d17</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Colour</type>
      <name>colour</name>
      <anchorfile>classTextLayout_1_1Run.html</anchorfile>
      <anchor>a0740a8644c5933b52c89dbe459bbaf3e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Array&lt; Glyph &gt;</type>
      <name>glyphs</name>
      <anchorfile>classTextLayout_1_1Run.html</anchorfile>
      <anchor>ade86d06f39c2bec790e049a053b8de2b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Range&lt; int &gt;</type>
      <name>stringRange</name>
      <anchorfile>classTextLayout_1_1Run.html</anchorfile>
      <anchor>a5e78255b382519784f9950efeae14f57</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TextPropertyComponent</name>
    <filename>classTextPropertyComponent.html</filename>
    <base>PropertyComponent</base>
    <class kind="class">TextPropertyComponent::Listener</class>
    <member kind="enumeration">
      <type></type>
      <name>ColourIds</name>
      <anchorfile>classTextPropertyComponent.html</anchorfile>
      <anchor>a6521dd39eb1ffa9c41b520284d5cc4ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>backgroundColourId</name>
      <anchorfile>classTextPropertyComponent.html</anchorfile>
      <anchor>a6521dd39eb1ffa9c41b520284d5cc4acaefe5e5cdbc22a11411edd6088ae39534</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>textColourId</name>
      <anchorfile>classTextPropertyComponent.html</anchorfile>
      <anchor>a6521dd39eb1ffa9c41b520284d5cc4aca545fcb8366b11af2690778d08507787a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>outlineColourId</name>
      <anchorfile>classTextPropertyComponent.html</anchorfile>
      <anchor>a6521dd39eb1ffa9c41b520284d5cc4aca21db2ae08a79538ba2a85b1426185673</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TextPropertyComponent</name>
      <anchorfile>classTextPropertyComponent.html</anchorfile>
      <anchor>acd3ee1e753b1f854efd8d58f8b1d2fe9</anchor>
      <arglist>(const Value &amp;valueToControl, const String &amp;propertyName, int maxNumChars, bool isMultiLine)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TextPropertyComponent</name>
      <anchorfile>classTextPropertyComponent.html</anchorfile>
      <anchor>a6939a16ffd859b2a1c1198286912da7a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setText</name>
      <anchorfile>classTextPropertyComponent.html</anchorfile>
      <anchor>ae4d8eadfcc3efa418facfef1e2cda0a0</anchor>
      <arglist>(const String &amp;newText)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual String</type>
      <name>getText</name>
      <anchorfile>classTextPropertyComponent.html</anchorfile>
      <anchor>a2055bb8ae26911d57524d05c2ef95646</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Value &amp;</type>
      <name>getValue</name>
      <anchorfile>classTextPropertyComponent.html</anchorfile>
      <anchor>a5ac39b7e3c9ec000a83d11540c57515e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>colourChanged</name>
      <anchorfile>classTextPropertyComponent.html</anchorfile>
      <anchor>a3ecc7288dcf67497a8ab463d37951fc2</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addListener</name>
      <anchorfile>classTextPropertyComponent.html</anchorfile>
      <anchor>a985becb37000b4ff05a197dd10b4dc83</anchor>
      <arglist>(Listener *newListener)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeListener</name>
      <anchorfile>classTextPropertyComponent.html</anchorfile>
      <anchor>ab9e34cb125bdfe5c887a77f61ac02293</anchor>
      <arglist>(Listener *listener)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>refresh</name>
      <anchorfile>classTextPropertyComponent.html</anchorfile>
      <anchor>a2068f72dd3702dc23127b06b440185ef</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>textWasEdited</name>
      <anchorfile>classTextPropertyComponent.html</anchorfile>
      <anchor>ab73fd540543d32bd67982402208728e5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>TextPropertyComponent</name>
      <anchorfile>classTextPropertyComponent.html</anchorfile>
      <anchor>ab11b2849c68bcf275f931e2b847389b0</anchor>
      <arglist>(const String &amp;propertyName, int maxNumChars, bool isMultiLine)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TextPropertyComponent::Listener</name>
    <filename>classTextPropertyComponent_1_1Listener.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Listener</name>
      <anchorfile>classTextPropertyComponent_1_1Listener.html</anchorfile>
      <anchor>a9add9024f8fe4db3182c78b508ec5c1d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>textPropertyComponentChanged</name>
      <anchorfile>classTextPropertyComponent_1_1Listener.html</anchorfile>
      <anchor>a5332554401b64f05853e18f2223c6ffe</anchor>
      <arglist>(TextPropertyComponent *)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Thread</name>
    <filename>classThread.html</filename>
    <member kind="typedef">
      <type>void *</type>
      <name>ThreadID</name>
      <anchorfile>classThread.html</anchorfile>
      <anchor>a077e20855a3c974c2fc6f9e7caa8412c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Thread</name>
      <anchorfile>classThread.html</anchorfile>
      <anchor>a9105c0abed75dd620b80c8c5e8b01603</anchor>
      <arglist>(const String &amp;threadName, size_t threadStackSize=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Thread</name>
      <anchorfile>classThread.html</anchorfile>
      <anchor>a026b23628e1727050e864e00489c0baf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>run</name>
      <anchorfile>classThread.html</anchorfile>
      <anchor>aae90dfabab3e1776cf01a26e7ee3a620</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>startThread</name>
      <anchorfile>classThread.html</anchorfile>
      <anchor>a5502205d727c00752f95af27a063d983</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>startThread</name>
      <anchorfile>classThread.html</anchorfile>
      <anchor>acc4aff2ceb97b0f16a0a08132315a900</anchor>
      <arglist>(int priority)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>stopThread</name>
      <anchorfile>classThread.html</anchorfile>
      <anchor>a18583d51411d6a34c59b63f0adff4697</anchor>
      <arglist>(int timeOutMilliseconds)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isThreadRunning</name>
      <anchorfile>classThread.html</anchorfile>
      <anchor>ab02ad2d11a2dacfea4a78b06224a3e87</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>signalThreadShouldExit</name>
      <anchorfile>classThread.html</anchorfile>
      <anchor>affe168e27c6ee50b0d10522810772268</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>threadShouldExit</name>
      <anchorfile>classThread.html</anchorfile>
      <anchor>a0a8fdce313d3c0db6c5adbb78c4352b4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>waitForThreadToExit</name>
      <anchorfile>classThread.html</anchorfile>
      <anchor>a277e5e91d52626bbdac85b44972dd46a</anchor>
      <arglist>(int timeOutMilliseconds) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setPriority</name>
      <anchorfile>classThread.html</anchorfile>
      <anchor>a0975d9ee9f403f5f82287fcce4a7168f</anchor>
      <arglist>(int priority)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAffinityMask</name>
      <anchorfile>classThread.html</anchorfile>
      <anchor>a614605563fceeac6f03d507bc35bdce4</anchor>
      <arglist>(uint32 affinityMask)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>wait</name>
      <anchorfile>classThread.html</anchorfile>
      <anchor>a17aca9c9609310f830298d6a0206d18d</anchor>
      <arglist>(int timeOutMilliseconds) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>notify</name>
      <anchorfile>classThread.html</anchorfile>
      <anchor>ae0e6408f187557bb06c8fff07c4100b7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ThreadID</type>
      <name>getThreadId</name>
      <anchorfile>classThread.html</anchorfile>
      <anchor>a39ca822734b9b20ab32eeba774c9a803</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const String &amp;</type>
      <name>getThreadName</name>
      <anchorfile>classThread.html</anchorfile>
      <anchor>a88d88d5b8246418b568a1e6d50dddeb2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>currentThreadShouldExit</name>
      <anchorfile>classThread.html</anchorfile>
      <anchor>ac92778089556fd0b5ab9c31557669ce8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>setCurrentThreadPriority</name>
      <anchorfile>classThread.html</anchorfile>
      <anchor>a9a777202bb5aa9ce7f57605674b100f4</anchor>
      <arglist>(int priority)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void JUCE_CALLTYPE</type>
      <name>setCurrentThreadAffinityMask</name>
      <anchorfile>classThread.html</anchorfile>
      <anchor>ac21eb5ae8c32bc2ecacba904f3411802</anchor>
      <arglist>(uint32 affinityMask)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void JUCE_CALLTYPE</type>
      <name>sleep</name>
      <anchorfile>classThread.html</anchorfile>
      <anchor>a4ee1ddee32aa82ac90bc567cb7427926</anchor>
      <arglist>(int milliseconds)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void JUCE_CALLTYPE</type>
      <name>yield</name>
      <anchorfile>classThread.html</anchorfile>
      <anchor>aaf47a344b3b715e49ffcbc6119c72cdc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ThreadID JUCE_CALLTYPE</type>
      <name>getCurrentThreadId</name>
      <anchorfile>classThread.html</anchorfile>
      <anchor>abd4762b20144186ffc28280cedd224e9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Thread *JUCE_CALLTYPE</type>
      <name>getCurrentThread</name>
      <anchorfile>classThread.html</anchorfile>
      <anchor>a40a9f45ea3ff9a7d39a50f78059640cd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void JUCE_CALLTYPE</type>
      <name>setCurrentThreadName</name>
      <anchorfile>classThread.html</anchorfile>
      <anchor>a8ba2a683ea8111c08db83092360b7226</anchor>
      <arglist>(const String &amp;newThreadName)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ThreadLocalValue</name>
    <filename>classThreadLocalValue.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>ThreadLocalValue</name>
      <anchorfile>classThreadLocalValue.html</anchorfile>
      <anchor>a6cfe38fdd495adcfdad8dc3dc736f371</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ThreadLocalValue</name>
      <anchorfile>classThreadLocalValue.html</anchorfile>
      <anchor>a5f84ce8c97c0c3d76be387b0d9cd5feb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Type &amp;</type>
      <name>operator*</name>
      <anchorfile>classThreadLocalValue.html</anchorfile>
      <anchor>a8681a3805c7023574a7c8e8905e7bbcb</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator Type *</name>
      <anchorfile>classThreadLocalValue.html</anchorfile>
      <anchor>acbe0fe7fcfbd6511094512d01d3cdd16</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Type *</type>
      <name>operator-&gt;</name>
      <anchorfile>classThreadLocalValue.html</anchorfile>
      <anchor>a6112bf0cd51dcaa7cad94268984836a6</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>ThreadLocalValue &amp;</type>
      <name>operator=</name>
      <anchorfile>classThreadLocalValue.html</anchorfile>
      <anchor>aa218704cf23c89a7a68b283f2d623e57</anchor>
      <arglist>(const Type &amp;newValue)</arglist>
    </member>
    <member kind="function">
      <type>Type &amp;</type>
      <name>get</name>
      <anchorfile>classThreadLocalValue.html</anchorfile>
      <anchor>a0350ab3d9b5d1877dec3244d5b4e71e9</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>releaseCurrentThreadStorage</name>
      <anchorfile>classThreadLocalValue.html</anchorfile>
      <anchor>a78af45671b2b057f0f584a75f79ff5b5</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ThreadPool</name>
    <filename>classThreadPool.html</filename>
    <class kind="class">ThreadPool::JobSelector</class>
    <member kind="function">
      <type></type>
      <name>ThreadPool</name>
      <anchorfile>classThreadPool.html</anchorfile>
      <anchor>ae55fe4a480fa7144d8e87bbd0a917b14</anchor>
      <arglist>(int numberOfThreads, size_t threadStackSize=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ThreadPool</name>
      <anchorfile>classThreadPool.html</anchorfile>
      <anchor>a3225e86aa7835545b3f6c2c8d363d5e5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ThreadPool</name>
      <anchorfile>classThreadPool.html</anchorfile>
      <anchor>a44d3d2ab618970605e684efc216655eb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addJob</name>
      <anchorfile>classThreadPool.html</anchorfile>
      <anchor>ad46e866e912868092fff107dc555443b</anchor>
      <arglist>(ThreadPoolJob *job, bool deleteJobWhenFinished)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>removeJob</name>
      <anchorfile>classThreadPool.html</anchorfile>
      <anchor>a10da7494ab922d7157a5929d0689bf54</anchor>
      <arglist>(ThreadPoolJob *job, bool interruptIfRunning, int timeOutMilliseconds)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>removeAllJobs</name>
      <anchorfile>classThreadPool.html</anchorfile>
      <anchor>a621253ea8de07a09a6c18238f8d33ced</anchor>
      <arglist>(bool interruptRunningJobs, int timeOutMilliseconds, JobSelector *selectedJobsToRemove=nullptr)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumJobs</name>
      <anchorfile>classThreadPool.html</anchorfile>
      <anchor>a9e9ba7e536f1978a255a36bc54f641ed</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumThreads</name>
      <anchorfile>classThreadPool.html</anchorfile>
      <anchor>a0c683ee9fb983a07ef5937ea2a3a6599</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ThreadPoolJob *</type>
      <name>getJob</name>
      <anchorfile>classThreadPool.html</anchorfile>
      <anchor>aa52987dfd5d41443a914c4c20045c12c</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>classThreadPool.html</anchorfile>
      <anchor>a86ec36868d7215a33a5658f8ca8797c8</anchor>
      <arglist>(const ThreadPoolJob *job) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isJobRunning</name>
      <anchorfile>classThreadPool.html</anchorfile>
      <anchor>a6aa5595e971322109a2eeef2f1bdda2b</anchor>
      <arglist>(const ThreadPoolJob *job) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>waitForJobToFinish</name>
      <anchorfile>classThreadPool.html</anchorfile>
      <anchor>ada78c3d08d41bb195006b5c96a6514f5</anchor>
      <arglist>(const ThreadPoolJob *job, int timeOutMilliseconds) const </arglist>
    </member>
    <member kind="function">
      <type>StringArray</type>
      <name>getNamesOfAllJobs</name>
      <anchorfile>classThreadPool.html</anchorfile>
      <anchor>a520f25cf327b0f000f2edff89b07aff2</anchor>
      <arglist>(bool onlyReturnActiveJobs) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setThreadPriorities</name>
      <anchorfile>classThreadPool.html</anchorfile>
      <anchor>a3f69128c07cb778cf6ab981b1b9be650</anchor>
      <arglist>(int newPriority)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ThreadPool::JobSelector</name>
    <filename>classThreadPool_1_1JobSelector.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~JobSelector</name>
      <anchorfile>classThreadPool_1_1JobSelector.html</anchorfile>
      <anchor>a6fa333da0ce4d127f262a55db247cc8f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isJobSuitable</name>
      <anchorfile>classThreadPool_1_1JobSelector.html</anchorfile>
      <anchor>ad128c100151aad34bc5f28ace01ad839</anchor>
      <arglist>(ThreadPoolJob *job)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ThreadPoolJob</name>
    <filename>classThreadPoolJob.html</filename>
    <member kind="enumeration">
      <type></type>
      <name>JobStatus</name>
      <anchorfile>classThreadPoolJob.html</anchorfile>
      <anchor>a534c077f3c60168d88555ade062420b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>jobHasFinished</name>
      <anchorfile>classThreadPoolJob.html</anchorfile>
      <anchor>a534c077f3c60168d88555ade062420b3a390a063ef5f8b769a682f1daefc64e72</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>jobNeedsRunningAgain</name>
      <anchorfile>classThreadPoolJob.html</anchorfile>
      <anchor>a534c077f3c60168d88555ade062420b3a42789d58048631dd96008ce23911a545</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ThreadPoolJob</name>
      <anchorfile>classThreadPoolJob.html</anchorfile>
      <anchor>a701138425809122d1271561fcfa1c20d</anchor>
      <arglist>(const String &amp;name)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ThreadPoolJob</name>
      <anchorfile>classThreadPoolJob.html</anchorfile>
      <anchor>a519d648535cefc3aed07455dd5dd9e5b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>getJobName</name>
      <anchorfile>classThreadPoolJob.html</anchorfile>
      <anchor>ab786cc3b8eeb4de3ec3ab30e67280155</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setJobName</name>
      <anchorfile>classThreadPoolJob.html</anchorfile>
      <anchor>a0005910260394539b8117a858f5b4cfb</anchor>
      <arglist>(const String &amp;newName)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual JobStatus</type>
      <name>runJob</name>
      <anchorfile>classThreadPoolJob.html</anchorfile>
      <anchor>aec49c01680e563257c79088dc87bc0d9</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isRunning</name>
      <anchorfile>classThreadPoolJob.html</anchorfile>
      <anchor>a807c21e00f00548037cd10d4bab64347</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>shouldExit</name>
      <anchorfile>classThreadPoolJob.html</anchorfile>
      <anchor>a441a94cba7ec96242fd7268371d9c5ea</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>signalJobShouldExit</name>
      <anchorfile>classThreadPoolJob.html</anchorfile>
      <anchor>acf58a7de172ae74d6ebb4a9fb59ed4d3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ThreadPoolJob *</type>
      <name>getCurrentThreadPoolJob</name>
      <anchorfile>classThreadPoolJob.html</anchorfile>
      <anchor>ac9524c73da9de5444dd13d5936e238ee</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ThreadWithProgressWindow</name>
    <filename>classThreadWithProgressWindow.html</filename>
    <base>Thread</base>
    <base protection="private">Timer</base>
    <member kind="function">
      <type></type>
      <name>ThreadWithProgressWindow</name>
      <anchorfile>classThreadWithProgressWindow.html</anchorfile>
      <anchor>ac4fae9b0c2d110ca03e010d34133ea75</anchor>
      <arglist>(const String &amp;windowTitle, bool hasProgressBar, bool hasCancelButton, int timeOutMsWhenCancelling=10000, const String &amp;cancelButtonText=String(), Component *componentToCentreAround=nullptr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ThreadWithProgressWindow</name>
      <anchorfile>classThreadWithProgressWindow.html</anchorfile>
      <anchor>a04c322fd5b4eb2612ab5118565ee4d29</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>runThread</name>
      <anchorfile>classThreadWithProgressWindow.html</anchorfile>
      <anchor>afe370f79b86da5772db49f692e3bf09a</anchor>
      <arglist>(int priority=5)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>launchThread</name>
      <anchorfile>classThreadWithProgressWindow.html</anchorfile>
      <anchor>adb0f85d0de1be635284b3606b02d1708</anchor>
      <arglist>(int priority=5)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setProgress</name>
      <anchorfile>classThreadWithProgressWindow.html</anchorfile>
      <anchor>a607960c4dca64ea8e6193cc5e94d8c76</anchor>
      <arglist>(double newProgress)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStatusMessage</name>
      <anchorfile>classThreadWithProgressWindow.html</anchorfile>
      <anchor>a3f85676fc78cb05eecaf93f5d47eeaa5</anchor>
      <arglist>(const String &amp;newStatusMessage)</arglist>
    </member>
    <member kind="function">
      <type>AlertWindow *</type>
      <name>getAlertWindow</name>
      <anchorfile>classThreadWithProgressWindow.html</anchorfile>
      <anchor>a0e5317249298095d572ca993649f444f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>threadComplete</name>
      <anchorfile>classThreadWithProgressWindow.html</anchorfile>
      <anchor>a1d992a3d19b28c2f1fca0a6a73865409</anchor>
      <arglist>(bool userPressedCancel)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Time</name>
    <filename>classTime.html</filename>
    <member kind="function">
      <type></type>
      <name>Time</name>
      <anchorfile>classTime.html</anchorfile>
      <anchor>a53999bba9e1e32f01b05356d055d638f</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Time</name>
      <anchorfile>classTime.html</anchorfile>
      <anchor>aef828f5ec1ae48f7f92ad3f8d488d4ee</anchor>
      <arglist>(int64 millisecondsSinceEpoch) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Time</name>
      <anchorfile>classTime.html</anchorfile>
      <anchor>a1ae5f3db5459bf5518aeb49bc94f1daf</anchor>
      <arglist>(int year, int month, int day, int hours, int minutes, int seconds=0, int milliseconds=0, bool useLocalTime=true) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Time</name>
      <anchorfile>classTime.html</anchorfile>
      <anchor>a6c676b46dab069e84e40c243ed7626c2</anchor>
      <arglist>(const Time &amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Time</name>
      <anchorfile>classTime.html</anchorfile>
      <anchor>ac9ff14c4772123281758acbe65ce29a1</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>Time &amp;</type>
      <name>operator=</name>
      <anchorfile>classTime.html</anchorfile>
      <anchor>ae5bcf5fea5f13c51e54744f731c03887</anchor>
      <arglist>(const Time &amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>toMilliseconds</name>
      <anchorfile>classTime.html</anchorfile>
      <anchor>ad1581903aeaa659db034c169c2df54c9</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getYear</name>
      <anchorfile>classTime.html</anchorfile>
      <anchor>a076f935b3953dc9af953e8ed79d85e6a</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getMonth</name>
      <anchorfile>classTime.html</anchorfile>
      <anchor>a50230e3a7285ba9f81ab0fd41a95b22e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>getMonthName</name>
      <anchorfile>classTime.html</anchorfile>
      <anchor>ab19eaae83be3800e1dafdbf81ebc356c</anchor>
      <arglist>(bool threeLetterVersion) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getDayOfMonth</name>
      <anchorfile>classTime.html</anchorfile>
      <anchor>aa26595c43c171c5454681403c443f7d0</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getDayOfWeek</name>
      <anchorfile>classTime.html</anchorfile>
      <anchor>a6e9991fa052e5656f658f8073c25b935</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getDayOfYear</name>
      <anchorfile>classTime.html</anchorfile>
      <anchor>a4966bd179982c52ecc1eb017dba69ee5</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>getWeekdayName</name>
      <anchorfile>classTime.html</anchorfile>
      <anchor>ab94896bc2dc4044badd1304739e6268c</anchor>
      <arglist>(bool threeLetterVersion) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getHours</name>
      <anchorfile>classTime.html</anchorfile>
      <anchor>ab946ef04018a381a292448bbeb6e989e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isAfternoon</name>
      <anchorfile>classTime.html</anchorfile>
      <anchor>aaeffa1bc5331837fa7243e466e36285f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getHoursInAmPmFormat</name>
      <anchorfile>classTime.html</anchorfile>
      <anchor>a0d3a0664160d9e6f37a7afe93df0a12b</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getMinutes</name>
      <anchorfile>classTime.html</anchorfile>
      <anchor>a8afef5dbc64bee686f3fadd4c8ea3ce0</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getSeconds</name>
      <anchorfile>classTime.html</anchorfile>
      <anchor>a00ae85ee9d91d73508112b0ddac71904</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getMilliseconds</name>
      <anchorfile>classTime.html</anchorfile>
      <anchor>a280b55b2d738686ac4903e25cdb28116</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isDaylightSavingTime</name>
      <anchorfile>classTime.html</anchorfile>
      <anchor>a72c35ab7767a5a3193501b4c1eb62269</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>getTimeZone</name>
      <anchorfile>classTime.html</anchorfile>
      <anchor>ac79ef7dfcff67833ad805806c896e40f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getUTCOffsetSeconds</name>
      <anchorfile>classTime.html</anchorfile>
      <anchor>a357b9e4c5fd77a9a19f9ae7a5e18d0da</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>getUTCOffsetString</name>
      <anchorfile>classTime.html</anchorfile>
      <anchor>a11d4228d9776e2a842b4868dbd5d3e5d</anchor>
      <arglist>(bool includeDividerCharacters) const </arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>toString</name>
      <anchorfile>classTime.html</anchorfile>
      <anchor>a0eea824de2aa68f6a602897b56bc2198</anchor>
      <arglist>(bool includeDate, bool includeTime, bool includeSeconds=true, bool use24HourClock=false) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>formatted</name>
      <anchorfile>classTime.html</anchorfile>
      <anchor>ad89ac95bff6956f148e7abd3ca2d03d6</anchor>
      <arglist>(const String &amp;format) const </arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>toISO8601</name>
      <anchorfile>classTime.html</anchorfile>
      <anchor>a43192b3abe008910853903f518b44525</anchor>
      <arglist>(bool includeDividerCharacters) const </arglist>
    </member>
    <member kind="function">
      <type>Time &amp;</type>
      <name>operator+=</name>
      <anchorfile>classTime.html</anchorfile>
      <anchor>a5ae50bafc704991aaa22d867c4dfe22f</anchor>
      <arglist>(RelativeTime delta) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Time &amp;</type>
      <name>operator-=</name>
      <anchorfile>classTime.html</anchorfile>
      <anchor>a405b8d0c039448bc00d4d8b6a86eadc1</anchor>
      <arglist>(RelativeTime delta) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setSystemTimeToThisTime</name>
      <anchorfile>classTime.html</anchorfile>
      <anchor>af97c92a87fc52d71c386f496096bea04</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Time JUCE_CALLTYPE</type>
      <name>getCurrentTime</name>
      <anchorfile>classTime.html</anchorfile>
      <anchor>abc76e37eb137734df20c107ae94bbfee</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Time</type>
      <name>fromISO8601</name>
      <anchorfile>classTime.html</anchorfile>
      <anchor>a3e1afd8d41f4072e207eb548ef9e59a5</anchor>
      <arglist>(StringRef iso8601) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static String</type>
      <name>getWeekdayName</name>
      <anchorfile>classTime.html</anchorfile>
      <anchor>af55383bb7849e84e1db8dfe176462d42</anchor>
      <arglist>(int dayNumber, bool threeLetterVersion)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static String</type>
      <name>getMonthName</name>
      <anchorfile>classTime.html</anchorfile>
      <anchor>a387772b6efe5dbc85a5a97ec3ebc7cb6</anchor>
      <arglist>(int monthNumber, bool threeLetterVersion)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int64</type>
      <name>currentTimeMillis</name>
      <anchorfile>classTime.html</anchorfile>
      <anchor>a3ddd01042580e201e78e92c46b5e5f54</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static uint32</type>
      <name>getMillisecondCounter</name>
      <anchorfile>classTime.html</anchorfile>
      <anchor>a8aa2b95bb1fc2fd7a2df29736bad3a37</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>getMillisecondCounterHiRes</name>
      <anchorfile>classTime.html</anchorfile>
      <anchor>a3f2fcf93d44c6b3828c82f5d4c18b0e4</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>waitForMillisecondCounter</name>
      <anchorfile>classTime.html</anchorfile>
      <anchor>aacdbdd9f83346c0b1d34661cf454904b</anchor>
      <arglist>(uint32 targetTime) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static uint32</type>
      <name>getApproximateMillisecondCounter</name>
      <anchorfile>classTime.html</anchorfile>
      <anchor>a5fe46552067d8e6fa6eb67b120c5a6be</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int64</type>
      <name>getHighResolutionTicks</name>
      <anchorfile>classTime.html</anchorfile>
      <anchor>af33d7295da41f2d645d8a5e93f1cfe45</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int64</type>
      <name>getHighResolutionTicksPerSecond</name>
      <anchorfile>classTime.html</anchorfile>
      <anchor>a71124045a6a77003fc8d838d79688977</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>highResolutionTicksToSeconds</name>
      <anchorfile>classTime.html</anchorfile>
      <anchor>a3c4d54513d5d2be78a790cfd0b8c0493</anchor>
      <arglist>(int64 ticks) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int64</type>
      <name>secondsToHighResolutionTicks</name>
      <anchorfile>classTime.html</anchorfile>
      <anchor>a1690ac880d53fa9c2c76b2b5f67e776f</anchor>
      <arglist>(double seconds) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Time</type>
      <name>getCompilationDate</name>
      <anchorfile>classTime.html</anchorfile>
      <anchor>a4bcdd6953120779dfba089902a91983d</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Timer</name>
    <filename>classTimer.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Timer</name>
      <anchorfile>classTimer.html</anchorfile>
      <anchor>ad3c95ce902fce977d280256256856d64</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>timerCallback</name>
      <anchorfile>classTimer.html</anchorfile>
      <anchor>a8adc40ca0fb4170737ba12e30481b9d8</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>startTimer</name>
      <anchorfile>classTimer.html</anchorfile>
      <anchor>a3b1a51ac348c56a55fcef4570214f057</anchor>
      <arglist>(int intervalInMilliseconds) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>startTimerHz</name>
      <anchorfile>classTimer.html</anchorfile>
      <anchor>a457efb22cb11b8518b18a0e8f02d818b</anchor>
      <arglist>(int timerFrequencyHz) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stopTimer</name>
      <anchorfile>classTimer.html</anchorfile>
      <anchor>ab918b8c1f80bf1de92dd1a5878f498bd</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isTimerRunning</name>
      <anchorfile>classTimer.html</anchorfile>
      <anchor>a11b80f425e27ea9899e05b104e2df07a</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getTimerInterval</name>
      <anchorfile>classTimer.html</anchorfile>
      <anchor>a3515b6e7a1e3777965e35686eaeb2da7</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void JUCE_CALLTYPE</type>
      <name>callPendingTimersSynchronously</name>
      <anchorfile>classTimer.html</anchorfile>
      <anchor>a7074d145c7408da67fdbbe7359aa3b74</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Timer</name>
      <anchorfile>classTimer.html</anchorfile>
      <anchor>a3d18ff196960cc65f19ff5452ece31db</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Timer</name>
      <anchorfile>classTimer.html</anchorfile>
      <anchor>a9d88bd608681fc2dc80e87044ed64526</anchor>
      <arglist>(const Timer &amp;) noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TimeSliceClient</name>
    <filename>classTimeSliceClient.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TimeSliceClient</name>
      <anchorfile>classTimeSliceClient.html</anchorfile>
      <anchor>ab97fd6407f33b2004534066c0b959e61</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>useTimeSlice</name>
      <anchorfile>classTimeSliceClient.html</anchorfile>
      <anchor>a272b0868c9bd0b5c281cf09dbaa69a9c</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TimeSliceThread</name>
    <filename>classTimeSliceThread.html</filename>
    <base>Thread</base>
    <member kind="function">
      <type></type>
      <name>TimeSliceThread</name>
      <anchorfile>classTimeSliceThread.html</anchorfile>
      <anchor>ad2fa29d3076a7c0b600e297cc18fc9d9</anchor>
      <arglist>(const String &amp;threadName)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TimeSliceThread</name>
      <anchorfile>classTimeSliceThread.html</anchorfile>
      <anchor>aa4374e45b3ffabac2abd5ebc04594b8d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addTimeSliceClient</name>
      <anchorfile>classTimeSliceThread.html</anchorfile>
      <anchor>ac8244dfb9ed53d0c8b10d301d8897d8f</anchor>
      <arglist>(TimeSliceClient *client, int millisecondsBeforeStarting=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeTimeSliceClient</name>
      <anchorfile>classTimeSliceThread.html</anchorfile>
      <anchor>a07b538bee2ba11da5b66bd59af25f153</anchor>
      <arglist>(TimeSliceClient *client)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>moveToFrontOfQueue</name>
      <anchorfile>classTimeSliceThread.html</anchorfile>
      <anchor>a58c97295da5d454c299b9252a7a0999d</anchor>
      <arglist>(TimeSliceClient *client)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumClients</name>
      <anchorfile>classTimeSliceThread.html</anchorfile>
      <anchor>a2b440ac33a366ddc6ee8507a840d2eb2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>TimeSliceClient *</type>
      <name>getClient</name>
      <anchorfile>classTimeSliceThread.html</anchorfile>
      <anchor>a13a0a576b2e96543282f342a5b9b470e</anchor>
      <arglist>(int index) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ToggleButton</name>
    <filename>classToggleButton.html</filename>
    <base>Button</base>
    <member kind="enumeration">
      <type></type>
      <name>ColourIds</name>
      <anchorfile>classToggleButton.html</anchorfile>
      <anchor>a23091ad53b2ffcf4a9c6c463180a337d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>textColourId</name>
      <anchorfile>classToggleButton.html</anchorfile>
      <anchor>a23091ad53b2ffcf4a9c6c463180a337dac6ba76c874375d1b8a3080fe6167ab92</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>tickColourId</name>
      <anchorfile>classToggleButton.html</anchorfile>
      <anchor>a23091ad53b2ffcf4a9c6c463180a337da5ad10f3c5e921be75e40ec805cb3eb18</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>tickDisabledColourId</name>
      <anchorfile>classToggleButton.html</anchorfile>
      <anchor>a23091ad53b2ffcf4a9c6c463180a337da31a40a0a86aff9b13fb6f505951b2d22</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ToggleButton</name>
      <anchorfile>classToggleButton.html</anchorfile>
      <anchor>aa978ecd118f11987b5a8060072b407f0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ToggleButton</name>
      <anchorfile>classToggleButton.html</anchorfile>
      <anchor>a96fc9c7af4c32810296c6d91c8d0fc86</anchor>
      <arglist>(const String &amp;buttonText)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ToggleButton</name>
      <anchorfile>classToggleButton.html</anchorfile>
      <anchor>abd228753a34e12a78ced29ebcf1a98e4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>changeWidthToFitText</name>
      <anchorfile>classToggleButton.html</anchorfile>
      <anchor>a5b2996c62b836a05bada17312ac7361c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>paintButton</name>
      <anchorfile>classToggleButton.html</anchorfile>
      <anchor>a2b3514b274193580ce54c527532c6112</anchor>
      <arglist>(Graphics &amp;, bool isMouseOverButton, bool isButtonDown) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>colourChanged</name>
      <anchorfile>classToggleButton.html</anchorfile>
      <anchor>ae39d1bac0e55a11e4f355d5b14a8f7f6</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ToneGeneratorAudioSource</name>
    <filename>classToneGeneratorAudioSource.html</filename>
    <base>AudioSource</base>
    <member kind="function">
      <type></type>
      <name>ToneGeneratorAudioSource</name>
      <anchorfile>classToneGeneratorAudioSource.html</anchorfile>
      <anchor>a474ce1bd0aef35005c8fcc7fb88ad27f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ToneGeneratorAudioSource</name>
      <anchorfile>classToneGeneratorAudioSource.html</anchorfile>
      <anchor>a7f3432b6dd5e59d5c635660cf92b5ee6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAmplitude</name>
      <anchorfile>classToneGeneratorAudioSource.html</anchorfile>
      <anchor>a867ed3a9f24e981e527be49e670cb82b</anchor>
      <arglist>(float newAmplitude)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFrequency</name>
      <anchorfile>classToneGeneratorAudioSource.html</anchorfile>
      <anchor>acbb84caec7c6db2f507edeb9ab70b50d</anchor>
      <arglist>(double newFrequencyHz)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>prepareToPlay</name>
      <anchorfile>classToneGeneratorAudioSource.html</anchorfile>
      <anchor>a35738ccc76573c3d00f6c9cfe2494a4b</anchor>
      <arglist>(int samplesPerBlockExpected, double sampleRate) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>releaseResources</name>
      <anchorfile>classToneGeneratorAudioSource.html</anchorfile>
      <anchor>aa9ffad22e4fa81eade2b237618d3ada2</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getNextAudioBlock</name>
      <anchorfile>classToneGeneratorAudioSource.html</anchorfile>
      <anchor>a13a58f7e1b3a296ce2070bbe3df57263</anchor>
      <arglist>(const AudioSourceChannelInfo &amp;) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Toolbar</name>
    <filename>classToolbar.html</filename>
    <base>Component</base>
    <base>DragAndDropContainer</base>
    <base>DragAndDropTarget</base>
    <class kind="struct">Toolbar::LookAndFeelMethods</class>
    <member kind="enumeration">
      <type></type>
      <name>ToolbarItemStyle</name>
      <anchorfile>classToolbar.html</anchorfile>
      <anchor>a20676e8832b03e18af29fd3e009d7f56</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>iconsOnly</name>
      <anchorfile>classToolbar.html</anchorfile>
      <anchor>a20676e8832b03e18af29fd3e009d7f56ade929b3efd0d4c8f02ee2fb0bd6a7f47</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>iconsWithText</name>
      <anchorfile>classToolbar.html</anchorfile>
      <anchor>a20676e8832b03e18af29fd3e009d7f56a6f4995861dcf04ad6973aa52a04d40ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>textOnly</name>
      <anchorfile>classToolbar.html</anchorfile>
      <anchor>a20676e8832b03e18af29fd3e009d7f56a98e59ac60f43fabf47900bb5978252b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>CustomisationFlags</name>
      <anchorfile>classToolbar.html</anchorfile>
      <anchor>a9036434be5b014285c69d2b87841fb3f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>allowIconsOnlyChoice</name>
      <anchorfile>classToolbar.html</anchorfile>
      <anchor>a9036434be5b014285c69d2b87841fb3fa54114d08a4d2827e71b0a40df4a235e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>allowIconsWithTextChoice</name>
      <anchorfile>classToolbar.html</anchorfile>
      <anchor>a9036434be5b014285c69d2b87841fb3fa348c3e9d7b294f4ad034e1d6b257903c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>allowTextOnlyChoice</name>
      <anchorfile>classToolbar.html</anchorfile>
      <anchor>a9036434be5b014285c69d2b87841fb3fa4a8564e3f78472092203f0502fd9e091</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>showResetToDefaultsButton</name>
      <anchorfile>classToolbar.html</anchorfile>
      <anchor>a9036434be5b014285c69d2b87841fb3fa0b0997b8269ec1a5b8fb9f6da93ee2c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>allCustomisationOptionsEnabled</name>
      <anchorfile>classToolbar.html</anchorfile>
      <anchor>a9036434be5b014285c69d2b87841fb3fa52d229dd720fe17da7cffa8aec5e70c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>ColourIds</name>
      <anchorfile>classToolbar.html</anchorfile>
      <anchor>ae89655c1fc755d7648eedcefcb620bc9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>backgroundColourId</name>
      <anchorfile>classToolbar.html</anchorfile>
      <anchor>ae89655c1fc755d7648eedcefcb620bc9ac36a170aa9bdbd62a9e148a54d19d1a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>separatorColourId</name>
      <anchorfile>classToolbar.html</anchorfile>
      <anchor>ae89655c1fc755d7648eedcefcb620bc9a5af4bc29284ef81090fa15f11a0f30e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>buttonMouseOverBackgroundColourId</name>
      <anchorfile>classToolbar.html</anchorfile>
      <anchor>ae89655c1fc755d7648eedcefcb620bc9aba14bbecd41d683ad7775213c5a73254</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>buttonMouseDownBackgroundColourId</name>
      <anchorfile>classToolbar.html</anchorfile>
      <anchor>ae89655c1fc755d7648eedcefcb620bc9a33774e84fadec5b5fb421cbea794c393</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>labelTextColourId</name>
      <anchorfile>classToolbar.html</anchorfile>
      <anchor>ae89655c1fc755d7648eedcefcb620bc9a6f6e4cc767b4f37b600ddcbe58f4b55a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>editingModeOutlineColourId</name>
      <anchorfile>classToolbar.html</anchorfile>
      <anchor>ae89655c1fc755d7648eedcefcb620bc9a783c2d3c7bee40ce820b9fc1b8450d6f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Toolbar</name>
      <anchorfile>classToolbar.html</anchorfile>
      <anchor>a382a894e4b7f3f82dacfb1fcaedfe716</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Toolbar</name>
      <anchorfile>classToolbar.html</anchorfile>
      <anchor>af8e60d44a166adad046c48798646f035</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVertical</name>
      <anchorfile>classToolbar.html</anchorfile>
      <anchor>ac3dd0cec7d3b445578a9fa4fa6519308</anchor>
      <arglist>(bool shouldBeVertical)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isVertical</name>
      <anchorfile>classToolbar.html</anchorfile>
      <anchor>a2d55c4ec24c2341c7b47714534ed5e98</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getThickness</name>
      <anchorfile>classToolbar.html</anchorfile>
      <anchor>a2b99b5c21d3d282b1530443473c45c23</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getLength</name>
      <anchorfile>classToolbar.html</anchorfile>
      <anchor>a4f13787582bd032a2123c206b383e89b</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classToolbar.html</anchorfile>
      <anchor>a4c47ef0fad73a6ce0d5ca7169ad622c9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addItem</name>
      <anchorfile>classToolbar.html</anchorfile>
      <anchor>af554bdd9557b8c9107384af96a3a402c</anchor>
      <arglist>(ToolbarItemFactory &amp;factory, int itemId, int insertIndex=-1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeToolbarItem</name>
      <anchorfile>classToolbar.html</anchorfile>
      <anchor>a458f8ab507f5c63b4cb0ab82f8e59ae0</anchor>
      <arglist>(int itemIndex)</arglist>
    </member>
    <member kind="function">
      <type>ToolbarItemComponent *</type>
      <name>removeAndReturnItem</name>
      <anchorfile>classToolbar.html</anchorfile>
      <anchor>a4ee06cb31e5f6444f28b652847cdc3fe</anchor>
      <arglist>(int itemIndex)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumItems</name>
      <anchorfile>classToolbar.html</anchorfile>
      <anchor>ace6bcc43585123681e775dd538892766</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getItemId</name>
      <anchorfile>classToolbar.html</anchorfile>
      <anchor>a4caa4124f183b85f0609e9ae837f3cbc</anchor>
      <arglist>(int itemIndex) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>ToolbarItemComponent *</type>
      <name>getItemComponent</name>
      <anchorfile>classToolbar.html</anchorfile>
      <anchor>ae3950023d93049377147cc17330afe25</anchor>
      <arglist>(int itemIndex) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addDefaultItems</name>
      <anchorfile>classToolbar.html</anchorfile>
      <anchor>ae9fdaea1b76bc158f8a9b22866911b6f</anchor>
      <arglist>(ToolbarItemFactory &amp;factoryToUse)</arglist>
    </member>
    <member kind="function">
      <type>ToolbarItemStyle</type>
      <name>getStyle</name>
      <anchorfile>classToolbar.html</anchorfile>
      <anchor>a21e3f0e0304abbafc1d40decda8c856d</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStyle</name>
      <anchorfile>classToolbar.html</anchorfile>
      <anchor>ad5f7338537653c5e5c9d8d29482eac11</anchor>
      <arglist>(const ToolbarItemStyle &amp;newStyle)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>showCustomisationDialog</name>
      <anchorfile>classToolbar.html</anchorfile>
      <anchor>a0d71a6a9f9ebb041b62c0d7d4721c21e</anchor>
      <arglist>(ToolbarItemFactory &amp;factory, int optionFlags=allCustomisationOptionsEnabled)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEditingActive</name>
      <anchorfile>classToolbar.html</anchorfile>
      <anchor>ab2bdef593ea0ea565b98241072860b11</anchor>
      <arglist>(bool editingEnabled)</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>toString</name>
      <anchorfile>classToolbar.html</anchorfile>
      <anchor>a3214b0e02faeee9aba0ba61e56d2abcf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>restoreFromString</name>
      <anchorfile>classToolbar.html</anchorfile>
      <anchor>aa1a6e1e20211d3601a86a508bd2428eb</anchor>
      <arglist>(ToolbarItemFactory &amp;factoryToUse, const String &amp;savedVersion)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>paint</name>
      <anchorfile>classToolbar.html</anchorfile>
      <anchor>a3bd8be5d899b3c3448e88127c34d59c7</anchor>
      <arglist>(Graphics &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resized</name>
      <anchorfile>classToolbar.html</anchorfile>
      <anchor>aab983263c74d1c1fe48d558a855c1f51</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mouseDown</name>
      <anchorfile>classToolbar.html</anchorfile>
      <anchor>a1a491913b696ccdfb8ae1ed31c351dcc</anchor>
      <arglist>(const MouseEvent &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isInterestedInDragSource</name>
      <anchorfile>classToolbar.html</anchorfile>
      <anchor>ae1c6a81d86121f50624aa3138eb02e10</anchor>
      <arglist>(const SourceDetails &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>itemDragMove</name>
      <anchorfile>classToolbar.html</anchorfile>
      <anchor>a58ac4f895b8424743dd82ed215e11fca</anchor>
      <arglist>(const SourceDetails &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>itemDragExit</name>
      <anchorfile>classToolbar.html</anchorfile>
      <anchor>ac622c56495cd76e6dcf359610b84a418</anchor>
      <arglist>(const SourceDetails &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>itemDropped</name>
      <anchorfile>classToolbar.html</anchorfile>
      <anchor>a834c50d62372f02a7b9c217d3e9130ba</anchor>
      <arglist>(const SourceDetails &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateAllItemPositions</name>
      <anchorfile>classToolbar.html</anchorfile>
      <anchor>a754c6bad431c7e3a2fa35c6edda41ab5</anchor>
      <arglist>(bool animate)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ToolbarItemComponent *</type>
      <name>createItem</name>
      <anchorfile>classToolbar.html</anchorfile>
      <anchor>a6be97d7376f983903a859f6585c9e0e0</anchor>
      <arglist>(ToolbarItemFactory &amp;, int itemId)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char *const</type>
      <name>toolbarDragDescriptor</name>
      <anchorfile>classToolbar.html</anchorfile>
      <anchor>a087aff29b1bcec3d33863de71aacf0f8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Toolbar::LookAndFeelMethods</name>
    <filename>structToolbar_1_1LookAndFeelMethods.html</filename>
  </compound>
  <compound kind="class">
    <name>ToolbarButton</name>
    <filename>classToolbarButton.html</filename>
    <base>ToolbarItemComponent</base>
    <member kind="function">
      <type></type>
      <name>ToolbarButton</name>
      <anchorfile>classToolbarButton.html</anchorfile>
      <anchor>a65aeb251dea7845837d2c99ecd723904</anchor>
      <arglist>(int itemId, const String &amp;labelText, Drawable *normalImage, Drawable *toggledOnImage)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ToolbarButton</name>
      <anchorfile>classToolbarButton.html</anchorfile>
      <anchor>aeaa4033350bcbe5ed7d43638d1fa7a35</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getToolbarItemSizes</name>
      <anchorfile>classToolbarButton.html</anchorfile>
      <anchor>ab76d0f3b139db33e507c327db5edd865</anchor>
      <arglist>(int toolbarDepth, bool isToolbarVertical, int &amp;preferredSize, int &amp;minSize, int &amp;maxSize) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>paintButtonArea</name>
      <anchorfile>classToolbarButton.html</anchorfile>
      <anchor>a7da5c961f93d6d49887d8f5b3d6ef034</anchor>
      <arglist>(Graphics &amp;, int width, int height, bool isMouseOver, bool isMouseDown) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>contentAreaChanged</name>
      <anchorfile>classToolbarButton.html</anchorfile>
      <anchor>af365b2d19d0d3c76f157d74a49e3a64f</anchor>
      <arglist>(const Rectangle&lt; int &gt; &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>buttonStateChanged</name>
      <anchorfile>classToolbarButton.html</anchorfile>
      <anchor>ae16d47d58593cea8ce31bf9d9a8cae4d</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resized</name>
      <anchorfile>classToolbarButton.html</anchorfile>
      <anchor>a62f9ef54d3dd2a234309250a2f75734d</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enablementChanged</name>
      <anchorfile>classToolbarButton.html</anchorfile>
      <anchor>a3308004ba6d256b066a42cc510335d13</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ToolbarItemComponent</name>
      <anchorfile>classToolbarItemComponent.html</anchorfile>
      <anchor>a7af0b03ed1fd7b50cce26291e5afe8b7</anchor>
      <arglist>(int itemId, const String &amp;labelText, bool isBeingUsedAsAButton)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ToolbarItemComponent</name>
      <anchorfile>classToolbarItemComponent.html</anchorfile>
      <anchor>a6b4eb89703728a01b56ca090350aea91</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getItemId</name>
      <anchorfile>classToolbarItemComponent.html</anchorfile>
      <anchor>a789df96b889f3bd582a89cd18c32a8f0</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Toolbar *</type>
      <name>getToolbar</name>
      <anchorfile>classToolbarItemComponent.html</anchorfile>
      <anchor>a810281a298dd61446aeb2ab77d93c092</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isToolbarVertical</name>
      <anchorfile>classToolbarItemComponent.html</anchorfile>
      <anchor>a696908e2b6a322c01428f1899befe4d6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Toolbar::ToolbarItemStyle</type>
      <name>getStyle</name>
      <anchorfile>classToolbarItemComponent.html</anchorfile>
      <anchor>afaacab2b6a1cb805b6d6c312487b8148</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setStyle</name>
      <anchorfile>classToolbarItemComponent.html</anchorfile>
      <anchor>a87f11ea60f19c4dda9e019ed7b4760e8</anchor>
      <arglist>(const Toolbar::ToolbarItemStyle &amp;newStyle)</arglist>
    </member>
    <member kind="function">
      <type>Rectangle&lt; int &gt;</type>
      <name>getContentArea</name>
      <anchorfile>classToolbarItemComponent.html</anchorfile>
      <anchor>aa7fca9f9941d45f181a07bfbb75bac0c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEditingMode</name>
      <anchorfile>classToolbarItemComponent.html</anchorfile>
      <anchor>ae4647dbdbea1004901b845f0082dcd9b</anchor>
      <arglist>(const ToolbarEditingMode newMode)</arglist>
    </member>
    <member kind="function">
      <type>ToolbarEditingMode</type>
      <name>getEditingMode</name>
      <anchorfile>classToolbarItemComponent.html</anchorfile>
      <anchor>a5fba464ee5eda6ba214de497cecbeb86</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>paintButton</name>
      <anchorfile>classToolbarItemComponent.html</anchorfile>
      <anchor>ac330a0e8496846a191fea1a023ab7e44</anchor>
      <arglist>(Graphics &amp;, bool isMouseOver, bool isMouseDown) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resized</name>
      <anchorfile>classToolbarItemComponent.html</anchorfile>
      <anchor>afc8e41938abc9d59ac9f471a9fe51209</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>ToolbarEditingMode</name>
      <anchorfile>classToolbarItemComponent.html</anchorfile>
      <anchor>ad499f9f48a5149685ab8da86244fd4e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>normalMode</name>
      <anchorfile>classToolbarItemComponent.html</anchorfile>
      <anchor>ad499f9f48a5149685ab8da86244fd4e4a1541b19e132dd72861bdf1a9d73c2717</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>editableOnToolbar</name>
      <anchorfile>classToolbarItemComponent.html</anchorfile>
      <anchor>ad499f9f48a5149685ab8da86244fd4e4a33d140eb9c5d5bc9e4ce6cd838dc30aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>editableOnPalette</name>
      <anchorfile>classToolbarItemComponent.html</anchorfile>
      <anchor>ad499f9f48a5149685ab8da86244fd4e4a440b4d0912bbbaf54955a30814e5bd6a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ToolbarItemComponent</name>
    <filename>classToolbarItemComponent.html</filename>
    <base>Button</base>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>getToolbarItemSizes</name>
      <anchorfile>classToolbarItemComponent.html</anchorfile>
      <anchor>a8d51f7ec7319161a2cec966331c753af</anchor>
      <arglist>(int toolbarThickness, bool isToolbarVertical, int &amp;preferredSize, int &amp;minSize, int &amp;maxSize)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>paintButtonArea</name>
      <anchorfile>classToolbarItemComponent.html</anchorfile>
      <anchor>a72f83aef9d05179579355986d07ad78d</anchor>
      <arglist>(Graphics &amp;g, int width, int height, bool isMouseOver, bool isMouseDown)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>contentAreaChanged</name>
      <anchorfile>classToolbarItemComponent.html</anchorfile>
      <anchor>a93180fe84b7a16ceafa985ece169a95d</anchor>
      <arglist>(const Rectangle&lt; int &gt; &amp;newBounds)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ToolbarItemFactory</name>
    <filename>classToolbarItemFactory.html</filename>
    <member kind="enumeration">
      <type></type>
      <name>SpecialItemIds</name>
      <anchorfile>classToolbarItemFactory.html</anchorfile>
      <anchor>a415ffaa38b6306574ad6777ccf6d2ac4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>separatorBarId</name>
      <anchorfile>classToolbarItemFactory.html</anchorfile>
      <anchor>a415ffaa38b6306574ad6777ccf6d2ac4a38897536f81bb5f607c2b71757e1e33c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>spacerId</name>
      <anchorfile>classToolbarItemFactory.html</anchorfile>
      <anchor>a415ffaa38b6306574ad6777ccf6d2ac4ac286d65323d1f29475107f6836416631</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>flexibleSpacerId</name>
      <anchorfile>classToolbarItemFactory.html</anchorfile>
      <anchor>a415ffaa38b6306574ad6777ccf6d2ac4acfa608a9b717b6c24dcdfb9ba378f1cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ToolbarItemFactory</name>
      <anchorfile>classToolbarItemFactory.html</anchorfile>
      <anchor>aff4611dac37d3e945a719718b673b7fd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ToolbarItemFactory</name>
      <anchorfile>classToolbarItemFactory.html</anchorfile>
      <anchor>a596b8244e44da37f9a8f68491f00b0ae</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>getAllToolbarItemIds</name>
      <anchorfile>classToolbarItemFactory.html</anchorfile>
      <anchor>ad714c2b2092438075488357417e3376f</anchor>
      <arglist>(Array&lt; int &gt; &amp;ids)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>getDefaultItemSet</name>
      <anchorfile>classToolbarItemFactory.html</anchorfile>
      <anchor>a334318465c8de5333d075519f38bb0dd</anchor>
      <arglist>(Array&lt; int &gt; &amp;ids)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ToolbarItemComponent *</type>
      <name>createItem</name>
      <anchorfile>classToolbarItemFactory.html</anchorfile>
      <anchor>ac4ba0c68fe72142f76608b0badbb290b</anchor>
      <arglist>(int itemId)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ToolbarItemPalette</name>
    <filename>classToolbarItemPalette.html</filename>
    <base>Component</base>
    <base>DragAndDropContainer</base>
    <member kind="function">
      <type></type>
      <name>ToolbarItemPalette</name>
      <anchorfile>classToolbarItemPalette.html</anchorfile>
      <anchor>a23f2b4e6a06a1cde33504cf789537a18</anchor>
      <arglist>(ToolbarItemFactory &amp;factory, Toolbar &amp;toolbar)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ToolbarItemPalette</name>
      <anchorfile>classToolbarItemPalette.html</anchorfile>
      <anchor>a024d0f39379f749babe845fa243f1fe0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resized</name>
      <anchorfile>classToolbarItemPalette.html</anchorfile>
      <anchor>aee1fa3f12b376dbb6ea451edff357477</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TooltipClient</name>
    <filename>classTooltipClient.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual String</type>
      <name>getTooltip</name>
      <anchorfile>classTooltipClient.html</anchorfile>
      <anchor>a233635a4125d43bd54e9660c4ba40a90</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TooltipWindow</name>
    <filename>classTooltipWindow.html</filename>
    <base>Component</base>
    <base protection="private">Timer</base>
    <class kind="struct">TooltipWindow::LookAndFeelMethods</class>
    <member kind="enumeration">
      <type></type>
      <name>ColourIds</name>
      <anchorfile>classTooltipWindow.html</anchorfile>
      <anchor>a84c5ba04f6f39e42fdf969f1cf37f6c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>backgroundColourId</name>
      <anchorfile>classTooltipWindow.html</anchorfile>
      <anchor>a84c5ba04f6f39e42fdf969f1cf37f6c6a28c64d55232b2dfff730222dd0c1bcb1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>textColourId</name>
      <anchorfile>classTooltipWindow.html</anchorfile>
      <anchor>a84c5ba04f6f39e42fdf969f1cf37f6c6a5bf990824b485757bf9ab04fc0187eb6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>outlineColourId</name>
      <anchorfile>classTooltipWindow.html</anchorfile>
      <anchor>a84c5ba04f6f39e42fdf969f1cf37f6c6a41876befabbf3948f92be5889339aefd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TooltipWindow</name>
      <anchorfile>classTooltipWindow.html</anchorfile>
      <anchor>aba10e88ecad73cfa0f0a21df1c9f9e51</anchor>
      <arglist>(Component *parentComponent=nullptr, int millisecondsBeforeTipAppears=700)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TooltipWindow</name>
      <anchorfile>classTooltipWindow.html</anchorfile>
      <anchor>a0200afb94084ac46d3f8a054402a58a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMillisecondsBeforeTipAppears</name>
      <anchorfile>classTooltipWindow.html</anchorfile>
      <anchor>ad48b272041c7561ac2fe8fc039adebc5</anchor>
      <arglist>(int newTimeMs=700) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>displayTip</name>
      <anchorfile>classTooltipWindow.html</anchorfile>
      <anchor>aad35b93943a622861dd83d3cade7da4b</anchor>
      <arglist>(Point&lt; int &gt; screenPosition, const String &amp;text)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>hideTip</name>
      <anchorfile>classTooltipWindow.html</anchorfile>
      <anchor>a917c164d878207aceb22a1c71a541731</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>TooltipWindow::LookAndFeelMethods</name>
    <filename>structTooltipWindow_1_1LookAndFeelMethods.html</filename>
  </compound>
  <compound kind="class">
    <name>TopLevelWindow</name>
    <filename>classTopLevelWindow.html</filename>
    <base>Component</base>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>getDesktopWindowStyleFlags</name>
      <anchorfile>classTopLevelWindow.html</anchorfile>
      <anchor>ac586f72632e58fe22cf8e45b046511c3</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TopologySource</name>
    <filename>classTopologySource.html</filename>
    <class kind="struct">TopologySource::Listener</class>
    <member kind="function" virtualness="pure">
      <type>virtual BlockTopology</type>
      <name>getCurrentTopology</name>
      <anchorfile>classTopologySource.html</anchorfile>
      <anchor>a11df0f2057673fea795dec66428d465b</anchor>
      <arglist>() const =0</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>TopologySource::Listener</name>
    <filename>structTopologySource_1_1Listener.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Listener</name>
      <anchorfile>structTopologySource_1_1Listener.html</anchorfile>
      <anchor>a4fc99cb83fae0371b5fd11ea540e5aad</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>topologyChanged</name>
      <anchorfile>structTopologySource_1_1Listener.html</anchorfile>
      <anchor>a73540c798abac08847430a865790b87b</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TouchList</name>
    <filename>classTouchList.html</filename>
    <templarg></templarg>
    <class kind="struct">TouchList::TouchEntry</class>
    <member kind="function">
      <type></type>
      <name>TouchList</name>
      <anchorfile>classTouchList.html</anchorfile>
      <anchor>a009b6d4cc4efd5bf4d1ccce1ce73c39a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TouchList</name>
      <anchorfile>classTouchList.html</anchorfile>
      <anchor>a53d9d68b0d1496c5e7ed0212fb3fa712</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>classTouchList.html</anchorfile>
      <anchor>a467675635e9a1986caddf87fba4ec29a</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Type &amp;</type>
      <name>getValue</name>
      <anchorfile>classTouchList.html</anchorfile>
      <anchor>a2a1c7a3a394cfa676ad6b47e1d07933c</anchor>
      <arglist>(const TouchSurface::Touch &amp;touch)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>classTouchList.html</anchorfile>
      <anchor>a726c93172aa7a431dcd628f98d3c5186</anchor>
      <arglist>(const TouchSurface::Touch &amp;touch) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateTouch</name>
      <anchorfile>classTouchList.html</anchorfile>
      <anchor>a9f927c25bb5abfea37670b6369077dbc</anchor>
      <arglist>(const TouchSurface::Touch &amp;touch)</arglist>
    </member>
    <member kind="function">
      <type>TouchEntry *</type>
      <name>find</name>
      <anchorfile>classTouchList.html</anchorfile>
      <anchor>acb422c0e8a2586df2941a85f39c4ff91</anchor>
      <arglist>(const TouchSurface::Touch &amp;touch) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>TouchEntry *</type>
      <name>begin</name>
      <anchorfile>classTouchList.html</anchorfile>
      <anchor>a9c8c633779bd41d7f09a6794a7bfb54f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>TouchEntry *</type>
      <name>end</name>
      <anchorfile>classTouchList.html</anchorfile>
      <anchor>aa7156f39c41351a99870fc6268041d91</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>TouchEntry &amp;</type>
      <name>operator[]</name>
      <anchorfile>classTouchList.html</anchorfile>
      <anchor>a4b88c86ef4c628fc377302af8c2c1d48</anchor>
      <arglist>(const int index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classTouchList.html</anchorfile>
      <anchor>a987433a97fcb86575bc8ba7198dada8a</anchor>
      <arglist>() noexcept</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>TouchList::TouchEntry</name>
    <filename>structTouchList_1_1TouchEntry.html</filename>
    <member kind="variable">
      <type>TouchSurface::Touch</type>
      <name>touch</name>
      <anchorfile>structTouchList_1_1TouchEntry.html</anchorfile>
      <anchor>a163b8461bd131af5db0555c6421b8e4d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Type</type>
      <name>value</name>
      <anchorfile>structTouchList_1_1TouchEntry.html</anchorfile>
      <anchor>af8dc90b9f82f36b12cf2d940e494280f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>TouchPosition</name>
    <filename>structTouchPosition.html</filename>
    <member kind="enumvalue">
      <type>@</type>
      <name>bits</name>
      <anchorfile>structTouchPosition.html</anchorfile>
      <anchor>ad3dd85f18e4109beb120fecee06d58ccac26f97e9093728fffecb625097d10bcc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IntegerWithBitSize&lt; 12 &gt;</type>
      <name>Xcoord</name>
      <anchorfile>structTouchPosition.html</anchorfile>
      <anchor>a53f2f9d3e63520999c8d9c4d98ed7923</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IntegerWithBitSize&lt; 12 &gt;</type>
      <name>Ycoord</name>
      <anchorfile>structTouchPosition.html</anchorfile>
      <anchor>ab6e73393a00592f577fec4f17c533394</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IntegerWithBitSize&lt; 8 &gt;</type>
      <name>Zcoord</name>
      <anchorfile>structTouchPosition.html</anchorfile>
      <anchor>a719d4fcbb31d545c7e9530d25f8f244b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Xcoord</type>
      <name>x</name>
      <anchorfile>structTouchPosition.html</anchorfile>
      <anchor>a946835cad4b87bdb71cf28e373205485</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Ycoord</type>
      <name>y</name>
      <anchorfile>structTouchPosition.html</anchorfile>
      <anchor>a43abd97916c1eb6c7b2112eb8f6a3849</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Zcoord</type>
      <name>z</name>
      <anchorfile>structTouchPosition.html</anchorfile>
      <anchor>aa4043d8648c9222ee08ddd5841f3a279</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TouchSurface</name>
    <filename>classTouchSurface.html</filename>
    <class kind="struct">TouchSurface::Listener</class>
    <class kind="struct">TouchSurface::Touch</class>
    <member kind="function">
      <type></type>
      <name>TouchSurface</name>
      <anchorfile>classTouchSurface.html</anchorfile>
      <anchor>af75d94b03893926af7bc3094789f461b</anchor>
      <arglist>(Block &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TouchSurface</name>
      <anchorfile>classTouchSurface.html</anchorfile>
      <anchor>aee56a9de5f01060c1d34afde692b3a68</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>cancelAllActiveTouches</name>
      <anchorfile>classTouchSurface.html</anchorfile>
      <anchor>aa063e3fc91d3f2279e0ad16b3f29f6e3</anchor>
      <arglist>() noexcept=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getNumberOfKeywaves</name>
      <anchorfile>classTouchSurface.html</anchorfile>
      <anchor>a0509d8563042afa740f862720cb7892d</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>callListenersTouchChanged</name>
      <anchorfile>classTouchSurface.html</anchorfile>
      <anchor>a41fa3039afd68cff0c9bf7a87b09f415</anchor>
      <arglist>(const TouchSurface::Touch &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addListener</name>
      <anchorfile>classTouchSurface.html</anchorfile>
      <anchor>aa81421222f6ade6994e97fa65aa6a239</anchor>
      <arglist>(Listener *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeListener</name>
      <anchorfile>classTouchSurface.html</anchorfile>
      <anchor>a5f1d86605aaf8f260c5a30fca8a4669d</anchor>
      <arglist>(Listener *)</arglist>
    </member>
    <member kind="variable">
      <type>Block &amp;</type>
      <name>block</name>
      <anchorfile>classTouchSurface.html</anchorfile>
      <anchor>a162504809b62b001219b38571a75f5d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>juce::ListenerList&lt; Listener &gt;</type>
      <name>listeners</name>
      <anchorfile>classTouchSurface.html</anchorfile>
      <anchor>a42d2c6dcee747e2511f2bea4884c96a7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>TouchSurface::Listener</name>
    <filename>structTouchSurface_1_1Listener.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Listener</name>
      <anchorfile>structTouchSurface_1_1Listener.html</anchorfile>
      <anchor>aa764a490afeac9c42806c4e702dccb67</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>touchChanged</name>
      <anchorfile>structTouchSurface_1_1Listener.html</anchorfile>
      <anchor>a0015308f21df83dd0fbbf93027970409</anchor>
      <arglist>(TouchSurface &amp;, const Touch &amp;)=0</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>TouchSurface::Touch</name>
    <filename>structTouchSurface_1_1Touch.html</filename>
    <member kind="variable">
      <type>int</type>
      <name>index</name>
      <anchorfile>structTouchSurface_1_1Touch.html</anchorfile>
      <anchor>a465f1d2a737768682eb5a2b69b3c8f26</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>x</name>
      <anchorfile>structTouchSurface_1_1Touch.html</anchorfile>
      <anchor>abcc36c738f52cd180d5f1445e8da358b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>xVelocity</name>
      <anchorfile>structTouchSurface_1_1Touch.html</anchorfile>
      <anchor>ac21bd9597d030f2cdddd181401b5851b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>y</name>
      <anchorfile>structTouchSurface_1_1Touch.html</anchorfile>
      <anchor>a47e35d6a231a065c69b3ba4c18cbedb3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>yVelocity</name>
      <anchorfile>structTouchSurface_1_1Touch.html</anchorfile>
      <anchor>a95f9109bda88a8dc13157ec1b73eb200</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>z</name>
      <anchorfile>structTouchSurface_1_1Touch.html</anchorfile>
      <anchor>a167444c53794327f997b6dfaf34d5e6e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>zVelocity</name>
      <anchorfile>structTouchSurface_1_1Touch.html</anchorfile>
      <anchor>a2b8802b24914bf59ddfe60f82957075f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Block::Timestamp</type>
      <name>eventTimestamp</name>
      <anchorfile>structTouchSurface_1_1Touch.html</anchorfile>
      <anchor>ad5cba9e5283f8d4ce1d6137bf5610cb1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>isTouchStart</name>
      <anchorfile>structTouchSurface_1_1Touch.html</anchorfile>
      <anchor>abbb23178c550bc0a0a7ddd40fb931002</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>isTouchEnd</name>
      <anchorfile>structTouchSurface_1_1Touch.html</anchorfile>
      <anchor>aee5e426dccf104d28083af3b67f38151</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Block::UID</type>
      <name>blockUID</name>
      <anchorfile>structTouchSurface_1_1Touch.html</anchorfile>
      <anchor>a2c743c393566bb6ae8830d694c3ac098</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>startX</name>
      <anchorfile>structTouchSurface_1_1Touch.html</anchorfile>
      <anchor>a33e06e6958f8b4caa8837a1a07821326</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>startY</name>
      <anchorfile>structTouchSurface_1_1Touch.html</anchorfile>
      <anchor>abf0c284e3fb990df6ad5d7c855fb7c62</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>TouchVelocity</name>
    <filename>structTouchVelocity.html</filename>
    <member kind="enumvalue">
      <type>@</type>
      <name>bits</name>
      <anchorfile>structTouchVelocity.html</anchorfile>
      <anchor>a69c0f0d74a3c6dff1742bdd77d4319f5a3ac57d25aaa2ecc07ab6cd5067f57586</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IntegerWithBitSize&lt; 8 &gt;</type>
      <name>VXcoord</name>
      <anchorfile>structTouchVelocity.html</anchorfile>
      <anchor>a67d0fc1512ed12a8489bf2fb9e7db20e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IntegerWithBitSize&lt; 8 &gt;</type>
      <name>VYcoord</name>
      <anchorfile>structTouchVelocity.html</anchorfile>
      <anchor>a392b4857396d0e44ace477b54b76903e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IntegerWithBitSize&lt; 8 &gt;</type>
      <name>VZcoord</name>
      <anchorfile>structTouchVelocity.html</anchorfile>
      <anchor>a4e1661686f4c8699b109c4ccec8f88db</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>VXcoord</type>
      <name>vx</name>
      <anchorfile>structTouchVelocity.html</anchorfile>
      <anchor>a7c75579e65e5d827690b0ef393702118</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>VYcoord</type>
      <name>vy</name>
      <anchorfile>structTouchVelocity.html</anchorfile>
      <anchor>ab5ed46aa35e5834e73531fa9629dc834</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>VZcoord</type>
      <name>vz</name>
      <anchorfile>structTouchVelocity.html</anchorfile>
      <anchor>aa70c4cda185becf4e09816ab13cc80d4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TracktionMarketplaceStatus</name>
    <filename>classTracktionMarketplaceStatus.html</filename>
    <base>OnlineUnlockStatus</base>
    <member kind="function">
      <type></type>
      <name>TracktionMarketplaceStatus</name>
      <anchorfile>classTracktionMarketplaceStatus.html</anchorfile>
      <anchor>aa469bad2853c5dbaf43a6414a44fa338</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>doesProductIDMatch</name>
      <anchorfile>classTracktionMarketplaceStatus.html</anchorfile>
      <anchor>a12de868a27b5657d2c3d65cba5f3ccfc</anchor>
      <arglist>(const String &amp;returnedIDFromServer) override</arglist>
    </member>
    <member kind="function">
      <type>URL</type>
      <name>getServerAuthenticationURL</name>
      <anchorfile>classTracktionMarketplaceStatus.html</anchorfile>
      <anchor>a470dadfb5f524d155506126e45d4aba7</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>getWebsiteName</name>
      <anchorfile>classTracktionMarketplaceStatus.html</anchorfile>
      <anchor>a49d23a8228030bf92db354eb90832023</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>readReplyFromWebserver</name>
      <anchorfile>classTracktionMarketplaceStatus.html</anchorfile>
      <anchor>a00f05162ad6541ae5ee1e0dd5bed6674</anchor>
      <arglist>(const String &amp;email, const String &amp;password) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TreeView</name>
    <filename>classTreeView.html</filename>
    <base>Component</base>
    <base>SettableTooltipClient</base>
    <base>FileDragAndDropTarget</base>
    <base>DragAndDropTarget</base>
    <class kind="struct">TreeView::LookAndFeelMethods</class>
  </compound>
  <compound kind="struct">
    <name>TreeView::LookAndFeelMethods</name>
    <filename>structTreeView_1_1LookAndFeelMethods.html</filename>
  </compound>
  <compound kind="class">
    <name>TreeViewItem</name>
    <filename>classTreeViewItem.html</filename>
    <class kind="class">TreeViewItem::OpennessRestorer</class>
    <member kind="enumeration">
      <type></type>
      <name>Openness</name>
      <anchorfile>classTreeViewItem.html</anchorfile>
      <anchor>aeb42402ed8e34ef5af931a762fd55bbd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>opennessDefault</name>
      <anchorfile>classTreeViewItem.html</anchorfile>
      <anchor>aeb42402ed8e34ef5af931a762fd55bbdaefa0abae48909ab7a14a0a6484be7d25</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>opennessClosed</name>
      <anchorfile>classTreeViewItem.html</anchorfile>
      <anchor>aeb42402ed8e34ef5af931a762fd55bbdab61b2e3b4e60fb2ba1f6902987596420</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>opennessOpen</name>
      <anchorfile>classTreeViewItem.html</anchorfile>
      <anchor>aeb42402ed8e34ef5af931a762fd55bbda8438197504704ddb2cf2bdb69d53fe57</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TreeViewItem</name>
      <anchorfile>classTreeViewItem.html</anchorfile>
      <anchor>a442058a1c6d9eef0aa6f8b918fcbf8d6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TreeViewItem</name>
      <anchorfile>classTreeViewItem.html</anchorfile>
      <anchor>a096327dbe3300e99a80eff28f0e20a14</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumSubItems</name>
      <anchorfile>classTreeViewItem.html</anchorfile>
      <anchor>ae2357524e0d096bcde729ae99b03a38c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>TreeViewItem *</type>
      <name>getSubItem</name>
      <anchorfile>classTreeViewItem.html</anchorfile>
      <anchor>ad12c774c2434074f795ba37a5c2d1755</anchor>
      <arglist>(int index) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearSubItems</name>
      <anchorfile>classTreeViewItem.html</anchorfile>
      <anchor>a3e5f73cd812c6626047d38307560aaeb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addSubItem</name>
      <anchorfile>classTreeViewItem.html</anchorfile>
      <anchor>a536e1e4edaf0b0a472c485050d54eb5a</anchor>
      <arglist>(TreeViewItem *newItem, int insertPosition=-1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addSubItemSorted</name>
      <anchorfile>classTreeViewItem.html</anchorfile>
      <anchor>adb5e41812e3efba115ded6bf59fd4f72</anchor>
      <arglist>(ElementComparator &amp;comparator, TreeViewItem *newItem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeSubItem</name>
      <anchorfile>classTreeViewItem.html</anchorfile>
      <anchor>a80b8910184619d952841a1b93d4b75c4</anchor>
      <arglist>(int index, bool deleteItem=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sortSubItems</name>
      <anchorfile>classTreeViewItem.html</anchorfile>
      <anchor>a002342e5b39ddf192d445b2bdd16d086</anchor>
      <arglist>(ElementComparator &amp;comparator)</arglist>
    </member>
    <member kind="function">
      <type>TreeView *</type>
      <name>getOwnerView</name>
      <anchorfile>classTreeViewItem.html</anchorfile>
      <anchor>af5f9ce78c2bc579d308a7048c59a0a3c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>TreeViewItem *</type>
      <name>getParentItem</name>
      <anchorfile>classTreeViewItem.html</anchorfile>
      <anchor>a2ab42bc65bc8ad845d6deea5ff4572ae</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isOpen</name>
      <anchorfile>classTreeViewItem.html</anchorfile>
      <anchor>aac59d4198c7dc470ef45f705b23621e9</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOpen</name>
      <anchorfile>classTreeViewItem.html</anchorfile>
      <anchor>ae1d86e63026471f8edea97f7dc5fd05f</anchor>
      <arglist>(bool shouldBeOpen)</arglist>
    </member>
    <member kind="function">
      <type>Openness</type>
      <name>getOpenness</name>
      <anchorfile>classTreeViewItem.html</anchorfile>
      <anchor>af91df7aae2d59b7f4e40297e8a8175de</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOpenness</name>
      <anchorfile>classTreeViewItem.html</anchorfile>
      <anchor>adb9512d6c59c0cc89d8e4336a01b9897</anchor>
      <arglist>(Openness newOpenness)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSelected</name>
      <anchorfile>classTreeViewItem.html</anchorfile>
      <anchor>a96351e2c95b73bf170b8818774a63cf6</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSelected</name>
      <anchorfile>classTreeViewItem.html</anchorfile>
      <anchor>a8db67708fff7b1da9fbcaa25a6494aa1</anchor>
      <arglist>(bool shouldBeSelected, bool deselectOtherItemsFirst, NotificationType shouldNotify=sendNotification)</arglist>
    </member>
    <member kind="function">
      <type>Rectangle&lt; int &gt;</type>
      <name>getItemPosition</name>
      <anchorfile>classTreeViewItem.html</anchorfile>
      <anchor>a9263a18573cce52347899cb209d4feff</anchor>
      <arglist>(bool relativeToTreeViewTopLeft) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>treeHasChanged</name>
      <anchorfile>classTreeViewItem.html</anchorfile>
      <anchor>aab2752eec271a51384fd10121a911ee1</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>repaintItem</name>
      <anchorfile>classTreeViewItem.html</anchorfile>
      <anchor>a35c45db6f6062b532825788835b542e4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getRowNumberInTree</name>
      <anchorfile>classTreeViewItem.html</anchorfile>
      <anchor>ae3809bbfa55ccd973205f5580fa0776c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>areAllParentsOpen</name>
      <anchorfile>classTreeViewItem.html</anchorfile>
      <anchor>a9c5a3bd296fe6eb6f3edc6310e723a0c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLinesDrawnForSubItems</name>
      <anchorfile>classTreeViewItem.html</anchorfile>
      <anchor>a7d398fd97dcd6566043fd1c1da202233</anchor>
      <arglist>(bool shouldDrawLines) noexcept</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>mightContainSubItems</name>
      <anchorfile>classTreeViewItem.html</anchorfile>
      <anchor>a1d4dc3f8e9971147e2649a128bd0344d</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual String</type>
      <name>getUniqueName</name>
      <anchorfile>classTreeViewItem.html</anchorfile>
      <anchor>a9ae7c529cc762a33ebcb4a14f8cee620</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>itemOpennessChanged</name>
      <anchorfile>classTreeViewItem.html</anchorfile>
      <anchor>ae675d65af3c2ab3455b98aa6d025d070</anchor>
      <arglist>(bool isNowOpen)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getItemWidth</name>
      <anchorfile>classTreeViewItem.html</anchorfile>
      <anchor>ae7800c63ef926a84f8f0e29325b9978e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getItemHeight</name>
      <anchorfile>classTreeViewItem.html</anchorfile>
      <anchor>a5e75b5a4c32d6ee01e32b6358547bae0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>canBeSelected</name>
      <anchorfile>classTreeViewItem.html</anchorfile>
      <anchor>a72ffb7ddd950a76b4626e3bd280b7fe3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Component *</type>
      <name>createItemComponent</name>
      <anchorfile>classTreeViewItem.html</anchorfile>
      <anchor>af821a303a31a9256e00b94ff8fe2595d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>paintItem</name>
      <anchorfile>classTreeViewItem.html</anchorfile>
      <anchor>adc3e3a7c09443e28b1f48fe10b9569b2</anchor>
      <arglist>(Graphics &amp;g, int width, int height)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>paintOpenCloseButton</name>
      <anchorfile>classTreeViewItem.html</anchorfile>
      <anchor>a23749ce8fd2226cfe5ffda3af36a843d</anchor>
      <arglist>(Graphics &amp;, const Rectangle&lt; float &gt; &amp;area, Colour backgroundColour, bool isMouseOver)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>paintHorizontalConnectingLine</name>
      <anchorfile>classTreeViewItem.html</anchorfile>
      <anchor>ac1d9a9fb29727496e4149d9f5593f16e</anchor>
      <arglist>(Graphics &amp;, const Line&lt; float &gt; &amp;line)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>paintVerticalConnectingLine</name>
      <anchorfile>classTreeViewItem.html</anchorfile>
      <anchor>aef65553f9c368989185c07be261c3dbd</anchor>
      <arglist>(Graphics &amp;, const Line&lt; float &gt; &amp;line)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>itemClicked</name>
      <anchorfile>classTreeViewItem.html</anchorfile>
      <anchor>a1d16cbc797adba8e7dda4db01f868f72</anchor>
      <arglist>(const MouseEvent &amp;e)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>itemDoubleClicked</name>
      <anchorfile>classTreeViewItem.html</anchorfile>
      <anchor>a44f6bac320a0ed884006e25558c6b513</anchor>
      <arglist>(const MouseEvent &amp;e)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>itemSelectionChanged</name>
      <anchorfile>classTreeViewItem.html</anchorfile>
      <anchor>a2b1fe5d650ef8cc31a16f1eaed03e837</anchor>
      <arglist>(bool isNowSelected)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ownerViewChanged</name>
      <anchorfile>classTreeViewItem.html</anchorfile>
      <anchor>a66947aeb8814bc9164422375231ae5d6</anchor>
      <arglist>(TreeView *newOwner)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual String</type>
      <name>getTooltip</name>
      <anchorfile>classTreeViewItem.html</anchorfile>
      <anchor>a13b0004f086cd20f212d5a33a7c48474</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual var</type>
      <name>getDragSourceDescription</name>
      <anchorfile>classTreeViewItem.html</anchorfile>
      <anchor>a529dcbb8ef94476d1d78c0069efa6f39</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isInterestedInFileDrag</name>
      <anchorfile>classTreeViewItem.html</anchorfile>
      <anchor>abe8b909ba44b7eac0988b2adc6257c46</anchor>
      <arglist>(const StringArray &amp;files)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>filesDropped</name>
      <anchorfile>classTreeViewItem.html</anchorfile>
      <anchor>a6149fa51385ef76bfede3481d3646797</anchor>
      <arglist>(const StringArray &amp;files, int insertIndex)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isInterestedInDragSource</name>
      <anchorfile>classTreeViewItem.html</anchorfile>
      <anchor>a7a1d27462d3ddf1fab3dca14e16c2788</anchor>
      <arglist>(const DragAndDropTarget::SourceDetails &amp;dragSourceDetails)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>itemDropped</name>
      <anchorfile>classTreeViewItem.html</anchorfile>
      <anchor>afade9c99b85939fe8521d55b0b2ab285</anchor>
      <arglist>(const DragAndDropTarget::SourceDetails &amp;dragSourceDetails, int insertIndex)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDrawsInLeftMargin</name>
      <anchorfile>classTreeViewItem.html</anchorfile>
      <anchor>a5ad6617d063e99ca170d2726ca87c8b1</anchor>
      <arglist>(bool canDrawInLeftMargin) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDrawsInRightMargin</name>
      <anchorfile>classTreeViewItem.html</anchorfile>
      <anchor>a5d74053652a52f66f97aa611a2854c8e</anchor>
      <arglist>(bool canDrawInRightMargin) noexcept</arglist>
    </member>
    <member kind="function">
      <type>XmlElement *</type>
      <name>getOpennessState</name>
      <anchorfile>classTreeViewItem.html</anchorfile>
      <anchor>a55bec44dbc8442b4389b282f02f2a441</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>restoreOpennessState</name>
      <anchorfile>classTreeViewItem.html</anchorfile>
      <anchor>a2543807283072980a45ba62f4f0eed46</anchor>
      <arglist>(const XmlElement &amp;xml)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getIndexInParent</name>
      <anchorfile>classTreeViewItem.html</anchorfile>
      <anchor>ad16ec5ae6dd02ed690001ac9a664fa44</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isLastOfSiblings</name>
      <anchorfile>classTreeViewItem.html</anchorfile>
      <anchor>ab5a379de4cea292f0b66d6c9f4f3da42</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>getItemIdentifierString</name>
      <anchorfile>classTreeViewItem.html</anchorfile>
      <anchor>a9635d6bdd8074310f468916998477397</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TreeViewItem::OpennessRestorer</name>
    <filename>classTreeViewItem_1_1OpennessRestorer.html</filename>
    <member kind="function">
      <type></type>
      <name>OpennessRestorer</name>
      <anchorfile>classTreeViewItem_1_1OpennessRestorer.html</anchorfile>
      <anchor>acdf7c357e5f90a65db05077e985f816f</anchor>
      <arglist>(TreeViewItem &amp;treeViewItem)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~OpennessRestorer</name>
      <anchorfile>classTreeViewItem_1_1OpennessRestorer.html</anchorfile>
      <anchor>aabc1cf94c8ec00c1d3f19136e71cdee5</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Typeface</name>
    <filename>classTypeface.html</filename>
    <base>ReferenceCountedObject</base>
    <member kind="function" virtualness="pure">
      <type>virtual float</type>
      <name>getAscent</name>
      <anchorfile>classTypeface.html</anchorfile>
      <anchor>aefd72f013b7702a719bf1532fc1f171b</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual float</type>
      <name>getDescent</name>
      <anchorfile>classTypeface.html</anchorfile>
      <anchor>a47d0adeb19ac659b54cad34a832192c9</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual float</type>
      <name>getHeightToPointsFactor</name>
      <anchorfile>classTypeface.html</anchorfile>
      <anchor>a37a6b9c6f2221722d42673af813a4d0c</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual float</type>
      <name>getStringWidth</name>
      <anchorfile>classTypeface.html</anchorfile>
      <anchor>acb8c05c634392c892c0068011e888d0f</anchor>
      <arglist>(const String &amp;text)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>getGlyphPositions</name>
      <anchorfile>classTypeface.html</anchorfile>
      <anchor>ac4b6f9b7c3555f8440a699c845ddfca4</anchor>
      <arglist>(const String &amp;text, Array&lt; int &gt; &amp;glyphs, Array&lt; float &gt; &amp;xOffsets)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>getOutlineForGlyph</name>
      <anchorfile>classTypeface.html</anchorfile>
      <anchor>a64aaf421db333c9150eaa1a5d4fd7cf8</anchor>
      <arglist>(int glyphNumber, Path &amp;path)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual EdgeTable *</type>
      <name>getEdgeTableForGlyph</name>
      <anchorfile>classTypeface.html</anchorfile>
      <anchor>a1360242b92c59fb204398ce23b59c56f</anchor>
      <arglist>(int glyphNumber, const AffineTransform &amp;transform, float fontHeight)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>UIViewComponent</name>
    <filename>classUIViewComponent.html</filename>
    <base>Component</base>
    <member kind="function">
      <type></type>
      <name>UIViewComponent</name>
      <anchorfile>classUIViewComponent.html</anchorfile>
      <anchor>a1c3bf91efaf6bd073c4649b07f555e20</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~UIViewComponent</name>
      <anchorfile>classUIViewComponent.html</anchorfile>
      <anchor>abbb1e555e89da2dcc961ff8ddba5aee2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setView</name>
      <anchorfile>classUIViewComponent.html</anchorfile>
      <anchor>a385b78c654e6403ec793481c820d8c89</anchor>
      <arglist>(void *uiView)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>getView</name>
      <anchorfile>classUIViewComponent.html</anchorfile>
      <anchor>a7b471b2aaed699e4c125a9d6bfc04a5f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resizeToFitView</name>
      <anchorfile>classUIViewComponent.html</anchorfile>
      <anchor>af65552c117379c5b6fd3b7b7021c4be0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>paint</name>
      <anchorfile>classUIViewComponent.html</anchorfile>
      <anchor>aa135904249f7103bf1e914456c578a4d</anchor>
      <arglist>(Graphics &amp;) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>UndoableAction</name>
    <filename>classUndoableAction.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~UndoableAction</name>
      <anchorfile>classUndoableAction.html</anchorfile>
      <anchor>ae1567cc5931e990c2a2912f47808593b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>perform</name>
      <anchorfile>classUndoableAction.html</anchorfile>
      <anchor>a6411ef8343148b52fef4bdc0290dfe06</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>undo</name>
      <anchorfile>classUndoableAction.html</anchorfile>
      <anchor>a535a5ca2bdc00edebe2b868ec7c13482</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getSizeInUnits</name>
      <anchorfile>classUndoableAction.html</anchorfile>
      <anchor>a77613c64378930b1af6255ea5ec8df0d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UndoableAction *</type>
      <name>createCoalescedAction</name>
      <anchorfile>classUndoableAction.html</anchorfile>
      <anchor>a7ca68fbe4905168d985c7a30a9ca266d</anchor>
      <arglist>(UndoableAction *nextAction)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>UndoableAction</name>
      <anchorfile>classUndoableAction.html</anchorfile>
      <anchor>abf39d7ee8e52523f0583dd3857ad86d6</anchor>
      <arglist>() noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>UndoManager</name>
    <filename>classUndoManager.html</filename>
    <base>ChangeBroadcaster</base>
    <member kind="function">
      <type></type>
      <name>UndoManager</name>
      <anchorfile>classUndoManager.html</anchorfile>
      <anchor>a80479ce847ec1ac8cccb8bdf5bb5729e</anchor>
      <arglist>(int maxNumberOfUnitsToKeep=30000, int minimumTransactionsToKeep=30)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~UndoManager</name>
      <anchorfile>classUndoManager.html</anchorfile>
      <anchor>a8d02b39eef79a885fb71be93ddac1115</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearUndoHistory</name>
      <anchorfile>classUndoManager.html</anchorfile>
      <anchor>a14ecaa1dcab72d09ccb826bc7a0d2743</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumberOfUnitsTakenUpByStoredCommands</name>
      <anchorfile>classUndoManager.html</anchorfile>
      <anchor>a20655846f23dbbcc3401debf7c6f3866</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaxNumberOfStoredUnits</name>
      <anchorfile>classUndoManager.html</anchorfile>
      <anchor>a371dddb00a010caf5e3bb88d4009bdfb</anchor>
      <arglist>(int maxNumberOfUnitsToKeep, int minimumTransactionsToKeep)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>perform</name>
      <anchorfile>classUndoManager.html</anchorfile>
      <anchor>a5f8b51dbb061ca3a1a8916938e0e2f49</anchor>
      <arglist>(UndoableAction *action)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>perform</name>
      <anchorfile>classUndoManager.html</anchorfile>
      <anchor>ad38696c85f0e94c58d70a83167b1153c</anchor>
      <arglist>(UndoableAction *action, const String &amp;actionName)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>beginNewTransaction</name>
      <anchorfile>classUndoManager.html</anchorfile>
      <anchor>ae05cd5e09da8e1208bd82a4d2d433e74</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>beginNewTransaction</name>
      <anchorfile>classUndoManager.html</anchorfile>
      <anchor>ae0c60270c6e99ec4b2b77b91380dd963</anchor>
      <arglist>(const String &amp;actionName) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCurrentTransactionName</name>
      <anchorfile>classUndoManager.html</anchorfile>
      <anchor>a6ea5eee5bf4bb54640318a4a01752b88</anchor>
      <arglist>(const String &amp;newName) noexcept</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>getCurrentTransactionName</name>
      <anchorfile>classUndoManager.html</anchorfile>
      <anchor>ae3b3855a4b265f53082522952210138b</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>canUndo</name>
      <anchorfile>classUndoManager.html</anchorfile>
      <anchor>a001384b3068589de6564796f7e43864e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>getUndoDescription</name>
      <anchorfile>classUndoManager.html</anchorfile>
      <anchor>ae1213b09873ad7b4a0ab9ecba45ed3fd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>undo</name>
      <anchorfile>classUndoManager.html</anchorfile>
      <anchor>a39f45c284e8d0df1a0d378e676246931</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>undoCurrentTransactionOnly</name>
      <anchorfile>classUndoManager.html</anchorfile>
      <anchor>ad81c6649e3acc3ab36726c280058d6bb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getActionsInCurrentTransaction</name>
      <anchorfile>classUndoManager.html</anchorfile>
      <anchor>a5f174495e70457b64db51c810707a102</anchor>
      <arglist>(Array&lt; const UndoableAction * &gt; &amp;actionsFound) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumActionsInCurrentTransaction</name>
      <anchorfile>classUndoManager.html</anchorfile>
      <anchor>aa16c6f968d74ac4b629dea6ea77464d6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Time</type>
      <name>getTimeOfUndoTransaction</name>
      <anchorfile>classUndoManager.html</anchorfile>
      <anchor>ad9d8af2dbea4bbc0078d3a48da88a22b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Time</type>
      <name>getTimeOfRedoTransaction</name>
      <anchorfile>classUndoManager.html</anchorfile>
      <anchor>a5097159db1bcb892c3f51030c081bf82</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>canRedo</name>
      <anchorfile>classUndoManager.html</anchorfile>
      <anchor>a2a5d1d64c3e774db76047c17b0408067</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>getRedoDescription</name>
      <anchorfile>classUndoManager.html</anchorfile>
      <anchor>aeb54172747a5f4dc7a21bc6a3c1b5c62</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>redo</name>
      <anchorfile>classUndoManager.html</anchorfile>
      <anchor>aaea507a3b9eaea3360c0e393edf69ccb</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>UnitTest</name>
    <filename>classUnitTest.html</filename>
    <member kind="function">
      <type></type>
      <name>UnitTest</name>
      <anchorfile>classUnitTest.html</anchorfile>
      <anchor>a3fb00e56f1df45efabba981f84e5a578</anchor>
      <arglist>(const String &amp;name)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~UnitTest</name>
      <anchorfile>classUnitTest.html</anchorfile>
      <anchor>a5a57054084ce200e1e92ff3eecc8420a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const String &amp;</type>
      <name>getName</name>
      <anchorfile>classUnitTest.html</anchorfile>
      <anchor>a2a670b333cacbe8056ebb64881009d86</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>performTest</name>
      <anchorfile>classUnitTest.html</anchorfile>
      <anchor>a45ac76c71297c8d336e1503515e34232</anchor>
      <arglist>(UnitTestRunner *runner)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initialise</name>
      <anchorfile>classUnitTest.html</anchorfile>
      <anchor>ade18a56bfb0df028c03c21c158eb80d7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>shutdown</name>
      <anchorfile>classUnitTest.html</anchorfile>
      <anchor>a72b58cb2de72f299949f710a70ef5d11</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>runTest</name>
      <anchorfile>classUnitTest.html</anchorfile>
      <anchor>a1a95d7f09eb80442a8099663dfb92628</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>beginTest</name>
      <anchorfile>classUnitTest.html</anchorfile>
      <anchor>ae21d8c58358819742f379706b6b34753</anchor>
      <arglist>(const String &amp;testName)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>expect</name>
      <anchorfile>classUnitTest.html</anchorfile>
      <anchor>a83e2912ee18731e0bfaf1c21a50b1131</anchor>
      <arglist>(bool testResult, const String &amp;failureMessage=String())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>expectEquals</name>
      <anchorfile>classUnitTest.html</anchorfile>
      <anchor>a580cd21eec8cae621eceb531eec711d3</anchor>
      <arglist>(ValueType actual, ValueType expected, String failureMessage=String())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>expectNotEquals</name>
      <anchorfile>classUnitTest.html</anchorfile>
      <anchor>a88277b29ca7179e4da719098c43d08c9</anchor>
      <arglist>(ValueType value, ValueType valueToCompareTo, String failureMessage=String())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>expectGreaterThan</name>
      <anchorfile>classUnitTest.html</anchorfile>
      <anchor>aef466ffd07c2677e636e2c0292605f62</anchor>
      <arglist>(ValueType value, ValueType valueToCompareTo, String failureMessage=String())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>expectLessThan</name>
      <anchorfile>classUnitTest.html</anchorfile>
      <anchor>ac1fd4a33b1ca2db3a32a05d739087879</anchor>
      <arglist>(ValueType value, ValueType valueToCompareTo, String failureMessage=String())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>expectGreaterOrEqual</name>
      <anchorfile>classUnitTest.html</anchorfile>
      <anchor>a0744ec69e299f5ff9ab5e881446eaf94</anchor>
      <arglist>(ValueType value, ValueType valueToCompareTo, String failureMessage=String())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>expectLessOrEqual</name>
      <anchorfile>classUnitTest.html</anchorfile>
      <anchor>a8a149547bc7180b943d1f8379e1d834d</anchor>
      <arglist>(ValueType value, ValueType valueToCompareTo, String failureMessage=String())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>expectWithinAbsoluteError</name>
      <anchorfile>classUnitTest.html</anchorfile>
      <anchor>a53c512c74a94c08ab8d465848bbba2a2</anchor>
      <arglist>(ValueType actual, ValueType expected, ValueType maxAbsoluteError, String failureMessage=String())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>logMessage</name>
      <anchorfile>classUnitTest.html</anchorfile>
      <anchor>a1c91c1b7758fffd3536042238f00005b</anchor>
      <arglist>(const String &amp;message)</arglist>
    </member>
    <member kind="function">
      <type>Random</type>
      <name>getRandom</name>
      <anchorfile>classUnitTest.html</anchorfile>
      <anchor>a8cb56b984fab3759eeca23ed5523f5fe</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Array&lt; UnitTest * &gt; &amp;</type>
      <name>getAllTests</name>
      <anchorfile>classUnitTest.html</anchorfile>
      <anchor>a2e5b516d7976360c375e5c870e52798f</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>UnitTestRunner</name>
    <filename>classUnitTestRunner.html</filename>
    <class kind="struct">UnitTestRunner::TestResult</class>
    <member kind="function">
      <type></type>
      <name>UnitTestRunner</name>
      <anchorfile>classUnitTestRunner.html</anchorfile>
      <anchor>ae0e3c870085be83f4821127b99269d78</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~UnitTestRunner</name>
      <anchorfile>classUnitTestRunner.html</anchorfile>
      <anchor>a2db85705913aaee06dd1de0dc701bb48</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>runTests</name>
      <anchorfile>classUnitTestRunner.html</anchorfile>
      <anchor>a0b06260a25f58c1e965dfc1db921f033</anchor>
      <arglist>(const Array&lt; UnitTest * &gt; &amp;tests, int64 randomSeed=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>runAllTests</name>
      <anchorfile>classUnitTestRunner.html</anchorfile>
      <anchor>a1ba728a212df4926b0784fb1dda6659e</anchor>
      <arglist>(int64 randomSeed=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAssertOnFailure</name>
      <anchorfile>classUnitTestRunner.html</anchorfile>
      <anchor>a83ba986b7393abe2dfd72391da3da88e</anchor>
      <arglist>(bool shouldAssert) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPassesAreLogged</name>
      <anchorfile>classUnitTestRunner.html</anchorfile>
      <anchor>a89edce46aa5abf03afd10b227f24de6b</anchor>
      <arglist>(bool shouldDisplayPasses) noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumResults</name>
      <anchorfile>classUnitTestRunner.html</anchorfile>
      <anchor>ab98ea2e9daa9c3710a011ad43b2926fe</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const TestResult *</type>
      <name>getResult</name>
      <anchorfile>classUnitTestRunner.html</anchorfile>
      <anchor>a391b1ac857c5d74e7e917fcafb669b14</anchor>
      <arglist>(int index) const noexcept</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>resultsUpdated</name>
      <anchorfile>classUnitTestRunner.html</anchorfile>
      <anchor>afa7f79986587d186c212af8a02f04d94</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>logMessage</name>
      <anchorfile>classUnitTestRunner.html</anchorfile>
      <anchor>abda0a15326302c1d6ce444869e304eeb</anchor>
      <arglist>(const String &amp;message)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>shouldAbortTests</name>
      <anchorfile>classUnitTestRunner.html</anchorfile>
      <anchor>ae6f35d3fb59cf0ec741e31c5cbcbba6a</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>UnitTestRunner::TestResult</name>
    <filename>structUnitTestRunner_1_1TestResult.html</filename>
    <member kind="variable">
      <type>String</type>
      <name>unitTestName</name>
      <anchorfile>structUnitTestRunner_1_1TestResult.html</anchorfile>
      <anchor>a5bbfc3f70ca29c0b836dfc9325a328df</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>String</type>
      <name>subcategoryName</name>
      <anchorfile>structUnitTestRunner_1_1TestResult.html</anchorfile>
      <anchor>af0a632786980a63693a86bb9942959c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>passes</name>
      <anchorfile>structUnitTestRunner_1_1TestResult.html</anchorfile>
      <anchor>a8ad1f84de7871ffdb1d4cbf5b702d74c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>failures</name>
      <anchorfile>structUnitTestRunner_1_1TestResult.html</anchorfile>
      <anchor>aedbec24cdf2ccef537a994d18995a85c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>StringArray</type>
      <name>messages</name>
      <anchorfile>structUnitTestRunner_1_1TestResult.html</anchorfile>
      <anchor>ae94f7a271e7f4a5725939036156595bb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>URL</name>
    <filename>classURL.html</filename>
    <class kind="class">URL::DownloadTask</class>
    <member kind="typedef">
      <type>bool(</type>
      <name>OpenStreamProgressCallback</name>
      <anchorfile>classURL.html</anchorfile>
      <anchor>a24e0205b0375cff235d64cc33d8c8550</anchor>
      <arglist>)(void *context, int bytesSent, int totalBytes)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>URL</name>
      <anchorfile>classURL.html</anchorfile>
      <anchor>ad6ecb93e145465c5b20f2e90f2f1163a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>URL</name>
      <anchorfile>classURL.html</anchorfile>
      <anchor>aa00fab54fc95a6a9a468228150c034d6</anchor>
      <arglist>(const String &amp;url)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>URL</name>
      <anchorfile>classURL.html</anchorfile>
      <anchor>af069bf0e7621be7f0eec3f1c80f5560a</anchor>
      <arglist>(const URL &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~URL</name>
      <anchorfile>classURL.html</anchorfile>
      <anchor>a127152050325ba77075f00ee2630c33c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>URL &amp;</type>
      <name>operator=</name>
      <anchorfile>classURL.html</anchorfile>
      <anchor>a0b7c692abdea0088c065a562559101f2</anchor>
      <arglist>(const URL &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classURL.html</anchorfile>
      <anchor>ab18c73180aa7f76a2f435d8914bfd2b5</anchor>
      <arglist>(const URL &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classURL.html</anchorfile>
      <anchor>afd13c03a7c2e03c8212bf19e426391ca</anchor>
      <arglist>(const URL &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>toString</name>
      <anchorfile>classURL.html</anchorfile>
      <anchor>a37d7f35615a9a20d74e5185c889cfd38</anchor>
      <arglist>(bool includeGetParameters) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEmpty</name>
      <anchorfile>classURL.html</anchorfile>
      <anchor>a2c4969b6498c3323b02977218ca03989</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isWellFormed</name>
      <anchorfile>classURL.html</anchorfile>
      <anchor>a6be5388bb876debe10fd8f899d8f1865</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>getDomain</name>
      <anchorfile>classURL.html</anchorfile>
      <anchor>a1190de2b868ce127136b3565a5bb48e8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>getSubPath</name>
      <anchorfile>classURL.html</anchorfile>
      <anchor>aa126b5e435550a169a788136c0135c17</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>getScheme</name>
      <anchorfile>classURL.html</anchorfile>
      <anchor>a3900eeaf678969aab1ef8447a879786c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getPort</name>
      <anchorfile>classURL.html</anchorfile>
      <anchor>a956752231288358290d781e5f27eb150</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>URL</type>
      <name>withNewDomainAndPath</name>
      <anchorfile>classURL.html</anchorfile>
      <anchor>a3cd4be815914d6a3a2baa3930731c34b</anchor>
      <arglist>(const String &amp;newFullPath) const </arglist>
    </member>
    <member kind="function">
      <type>URL</type>
      <name>withNewSubPath</name>
      <anchorfile>classURL.html</anchorfile>
      <anchor>aa3b7c064dc3834575ef77ee7db4cc239</anchor>
      <arglist>(const String &amp;newPath) const </arglist>
    </member>
    <member kind="function">
      <type>URL</type>
      <name>getChildURL</name>
      <anchorfile>classURL.html</anchorfile>
      <anchor>a9a90a4094536644741ed6da1bba7a202</anchor>
      <arglist>(const String &amp;subPath) const </arglist>
    </member>
    <member kind="function">
      <type>URL</type>
      <name>withParameter</name>
      <anchorfile>classURL.html</anchorfile>
      <anchor>a3974f5b9d28d360ac657df3b42082f5d</anchor>
      <arglist>(const String &amp;parameterName, const String &amp;parameterValue) const </arglist>
    </member>
    <member kind="function">
      <type>URL</type>
      <name>withParameters</name>
      <anchorfile>classURL.html</anchorfile>
      <anchor>aff10c968ce8319434aeef4200fd3847b</anchor>
      <arglist>(const StringPairArray &amp;parametersToAdd) const </arglist>
    </member>
    <member kind="function">
      <type>URL</type>
      <name>withFileToUpload</name>
      <anchorfile>classURL.html</anchorfile>
      <anchor>a341a3e78e1b831a33cf5a8a191573725</anchor>
      <arglist>(const String &amp;parameterName, const File &amp;fileToUpload, const String &amp;mimeType) const </arglist>
    </member>
    <member kind="function">
      <type>URL</type>
      <name>withDataToUpload</name>
      <anchorfile>classURL.html</anchorfile>
      <anchor>a5f3ceab4f85a42a811b57328e09584c5</anchor>
      <arglist>(const String &amp;parameterName, const String &amp;filename, const MemoryBlock &amp;fileContentToUpload, const String &amp;mimeType) const </arglist>
    </member>
    <member kind="function">
      <type>const StringArray &amp;</type>
      <name>getParameterNames</name>
      <anchorfile>classURL.html</anchorfile>
      <anchor>a10a2d1604d0a3d86381a4b142624c662</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const StringArray &amp;</type>
      <name>getParameterValues</name>
      <anchorfile>classURL.html</anchorfile>
      <anchor>a61b5ddfaf16fd5ba305c22ccd13ee7ee</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>URL</type>
      <name>withPOSTData</name>
      <anchorfile>classURL.html</anchorfile>
      <anchor>a9fe9f66a50ff9f6d6d1bcb47ad3ead2a</anchor>
      <arglist>(const String &amp;postData) const </arglist>
    </member>
    <member kind="function">
      <type>URL</type>
      <name>withPOSTData</name>
      <anchorfile>classURL.html</anchorfile>
      <anchor>aa05c89a5f6e5b4b146d0fc17e3676caa</anchor>
      <arglist>(const MemoryBlock &amp;postData) const </arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>getPostData</name>
      <anchorfile>classURL.html</anchorfile>
      <anchor>a2c57f1efe99673bf051999f41bc4ef74</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const MemoryBlock &amp;</type>
      <name>getPostDataAsMemoryBlock</name>
      <anchorfile>classURL.html</anchorfile>
      <anchor>a6df9b7070b2b92fe20371d649b87d6c7</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>launchInDefaultBrowser</name>
      <anchorfile>classURL.html</anchorfile>
      <anchor>ab56bf9814dfe828db465582b3af50c69</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>WebInputStream *</type>
      <name>createInputStream</name>
      <anchorfile>classURL.html</anchorfile>
      <anchor>a3482388836fc1d25a380a6c167cdb3c9</anchor>
      <arglist>(bool doPostLikeRequest, OpenStreamProgressCallback *progressCallback=nullptr, void *progressCallbackContext=nullptr, String extraHeaders=String(), int connectionTimeOutMs=0, StringPairArray *responseHeaders=nullptr, int *statusCode=nullptr, int numRedirectsToFollow=5, String httpRequestCmd=String()) const </arglist>
    </member>
    <member kind="function">
      <type>DownloadTask *</type>
      <name>downloadToFile</name>
      <anchorfile>classURL.html</anchorfile>
      <anchor>a3697dcd102e99bcf4558ec761f4487a7</anchor>
      <arglist>(const File &amp;targetLocation, String extraHeaders=String(), DownloadTask::Listener *listener=nullptr)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>readEntireBinaryStream</name>
      <anchorfile>classURL.html</anchorfile>
      <anchor>ade18c87d31c10cb7fea4453afeee2de6</anchor>
      <arglist>(MemoryBlock &amp;destData, bool usePostCommand=false) const </arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>readEntireTextStream</name>
      <anchorfile>classURL.html</anchorfile>
      <anchor>a7c50271fae5ecfef9e6ae625dade995f</anchor>
      <arglist>(bool usePostCommand=false) const </arglist>
    </member>
    <member kind="function">
      <type>XmlElement *</type>
      <name>readEntireXmlStream</name>
      <anchorfile>classURL.html</anchorfile>
      <anchor>a91141cb99e805bf469b8080fc02eefd2</anchor>
      <arglist>(bool usePostCommand=false) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isProbablyAWebsiteURL</name>
      <anchorfile>classURL.html</anchorfile>
      <anchor>a99df56e20fd9bf9426538571eaa06909</anchor>
      <arglist>(const String &amp;possibleURL)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isProbablyAnEmailAddress</name>
      <anchorfile>classURL.html</anchorfile>
      <anchor>a104e0a0539ab797a3057b19b8c531503</anchor>
      <arglist>(const String &amp;possibleEmailAddress)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static String</type>
      <name>addEscapeChars</name>
      <anchorfile>classURL.html</anchorfile>
      <anchor>ad2a5f3808099305c73c84112a01ecb1d</anchor>
      <arglist>(const String &amp;stringToAddEscapeCharsTo, bool isParameter, bool roundBracketsAreLegal=true)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static String</type>
      <name>removeEscapeChars</name>
      <anchorfile>classURL.html</anchorfile>
      <anchor>add07acc3e33e34097c2e93447f6fd0f9</anchor>
      <arglist>(const String &amp;stringToRemoveEscapeCharsFrom)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static URL</type>
      <name>createWithoutParsing</name>
      <anchorfile>classURL.html</anchorfile>
      <anchor>a9a8a3e4344e94b6d074df5f7223f9c77</anchor>
      <arglist>(const String &amp;url)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>URL::DownloadTask</name>
    <filename>classURL_1_1DownloadTask.html</filename>
    <class kind="struct">URL::DownloadTask::Listener</class>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~DownloadTask</name>
      <anchorfile>classURL_1_1DownloadTask.html</anchorfile>
      <anchor>a4c0a7271f77d33edf7a1105c826e3f08</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>getTotalLength</name>
      <anchorfile>classURL_1_1DownloadTask.html</anchorfile>
      <anchor>a1f8ab392fe52174be8ff80798e89a0df</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>getLengthDownloaded</name>
      <anchorfile>classURL_1_1DownloadTask.html</anchorfile>
      <anchor>a3439fbb78c76bdbb683b8d34a749e409</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isFinished</name>
      <anchorfile>classURL_1_1DownloadTask.html</anchorfile>
      <anchor>a0487388c9cbb43f5bfecdfa15081fcee</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>statusCode</name>
      <anchorfile>classURL_1_1DownloadTask.html</anchorfile>
      <anchor>adb086ee4ea5fc82fcd1558d40b248913</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hadError</name>
      <anchorfile>classURL_1_1DownloadTask.html</anchorfile>
      <anchor>a8dc47e68b23530361966dd3daff05b9e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>juce_iosURLSessionNotify</name>
      <anchorfile>classURL_1_1DownloadTask.html</anchorfile>
      <anchor>ab39eab9c0eacb9bdf99bd8c905781a9b</anchor>
      <arglist>(const String &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>DownloadTask</name>
      <anchorfile>classURL_1_1DownloadTask.html</anchorfile>
      <anchor>aaded7dc7bce440de9940e58cc0b2411d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int64</type>
      <name>contentLength</name>
      <anchorfile>classURL_1_1DownloadTask.html</anchorfile>
      <anchor>ab59855d4df9ae73ee720285f691b2971</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int64</type>
      <name>downloaded</name>
      <anchorfile>classURL_1_1DownloadTask.html</anchorfile>
      <anchor>a4754c8c08c94390dac2ffdcf76badd86</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>finished</name>
      <anchorfile>classURL_1_1DownloadTask.html</anchorfile>
      <anchor>a99b0e4e086ff23726eb1bf0dcfab1529</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>error</name>
      <anchorfile>classURL_1_1DownloadTask.html</anchorfile>
      <anchor>ae3fb403562e17b8084164d8e0304d007</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>httpCode</name>
      <anchorfile>classURL_1_1DownloadTask.html</anchorfile>
      <anchor>ac006f0a866f0cdcef8592ba1536dab3e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>URL::DownloadTask::Listener</name>
    <filename>structURL_1_1DownloadTask_1_1Listener.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Listener</name>
      <anchorfile>structURL_1_1DownloadTask_1_1Listener.html</anchorfile>
      <anchor>a66972ba585a83090d77fb94f7f60f4fa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>finished</name>
      <anchorfile>structURL_1_1DownloadTask_1_1Listener.html</anchorfile>
      <anchor>af1a21324a4829b8d09e570dff1f0e3ea</anchor>
      <arglist>(DownloadTask *task, bool success)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>progress</name>
      <anchorfile>structURL_1_1DownloadTask_1_1Listener.html</anchorfile>
      <anchor>abb38de449cfe02eb796bde8df4f6618c</anchor>
      <arglist>(DownloadTask *task, int64 bytesDownloaded, int64 totalLength)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Uuid</name>
    <filename>classUuid.html</filename>
    <member kind="function">
      <type></type>
      <name>Uuid</name>
      <anchorfile>classUuid.html</anchorfile>
      <anchor>a55663b31db8d26c71fa1b0258ccc34f9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Uuid</name>
      <anchorfile>classUuid.html</anchorfile>
      <anchor>a1309dbbf8098e9e2fe9a1019d5546d49</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Uuid</name>
      <anchorfile>classUuid.html</anchorfile>
      <anchor>a13364dd33f803cd19c91e04d71dd26ac</anchor>
      <arglist>(const Uuid &amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Uuid &amp;</type>
      <name>operator=</name>
      <anchorfile>classUuid.html</anchorfile>
      <anchor>a4ca8f6181bf1e70a7e20cca7b936eaaf</anchor>
      <arglist>(const Uuid &amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNull</name>
      <anchorfile>classUuid.html</anchorfile>
      <anchor>aa235a82db41c07260c444b0d0c9b9196</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classUuid.html</anchorfile>
      <anchor>a92a6b35ab35b3d29fd087d467fac5e11</anchor>
      <arglist>(const Uuid &amp;) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classUuid.html</anchorfile>
      <anchor>a34f4f4e5f62532b63212d1424fa790d3</anchor>
      <arglist>(const Uuid &amp;) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>toString</name>
      <anchorfile>classUuid.html</anchorfile>
      <anchor>a77e752a7dab662c872befd86843324f3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>toDashedString</name>
      <anchorfile>classUuid.html</anchorfile>
      <anchor>af9c3f68f05b23e0508723d523b0ce6c9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Uuid</name>
      <anchorfile>classUuid.html</anchorfile>
      <anchor>a1c1c2279f664fb5ecd1c7a40a2427659</anchor>
      <arglist>(const String &amp;uuidString)</arglist>
    </member>
    <member kind="function">
      <type>Uuid &amp;</type>
      <name>operator=</name>
      <anchorfile>classUuid.html</anchorfile>
      <anchor>a94d863e1d7853c72fd2a8986c52b53e0</anchor>
      <arglist>(const String &amp;uuidString)</arglist>
    </member>
    <member kind="function">
      <type>const uint8 *</type>
      <name>getRawData</name>
      <anchorfile>classUuid.html</anchorfile>
      <anchor>aa49adbefce0fa9e1ce31bfa1ff6e887f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Uuid</name>
      <anchorfile>classUuid.html</anchorfile>
      <anchor>a9cccd45cc44abc0645c1bd3e73758861</anchor>
      <arglist>(const uint8 *rawData) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Uuid &amp;</type>
      <name>operator=</name>
      <anchorfile>classUuid.html</anchorfile>
      <anchor>ac2d2acb3301bbd3ab48cbc42d577b737</anchor>
      <arglist>(const uint8 *rawData) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Uuid</type>
      <name>null</name>
      <anchorfile>classUuid.html</anchorfile>
      <anchor>a5cf509fff17fc3042469877b4116850c</anchor>
      <arglist>() noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Value</name>
    <filename>classValue.html</filename>
    <class kind="class">Value::Listener</class>
    <class kind="class">Value::ValueSource</class>
    <member kind="function">
      <type></type>
      <name>Value</name>
      <anchorfile>classValue.html</anchorfile>
      <anchor>abc2a5a2e6484fac66dae2539cc955667</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Value</name>
      <anchorfile>classValue.html</anchorfile>
      <anchor>acc427785c9007f762772d1dbe7535295</anchor>
      <arglist>(const Value &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Value</name>
      <anchorfile>classValue.html</anchorfile>
      <anchor>ad20df25aa8a6b58ae7220abb5abea977</anchor>
      <arglist>(const var &amp;initialValue)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Value</name>
      <anchorfile>classValue.html</anchorfile>
      <anchor>afd791a13f55b8590166c3fa3e4f0885c</anchor>
      <arglist>(Value &amp;&amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Value</name>
      <anchorfile>classValue.html</anchorfile>
      <anchor>a3a578f458da8a4ab67052dba0f7bffdd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>var</type>
      <name>getValue</name>
      <anchorfile>classValue.html</anchorfile>
      <anchor>ad7b4a297b144637785322cf398e04ef3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator var</name>
      <anchorfile>classValue.html</anchorfile>
      <anchor>a992abe942677674611e74e2654e1bc91</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>toString</name>
      <anchorfile>classValue.html</anchorfile>
      <anchor>ad5825a025dd71f9da4c273f0a0fbd3ae</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>classValue.html</anchorfile>
      <anchor>aad44af687acd1f62ad9231e8ae47059d</anchor>
      <arglist>(const var &amp;newValue)</arglist>
    </member>
    <member kind="function">
      <type>Value &amp;</type>
      <name>operator=</name>
      <anchorfile>classValue.html</anchorfile>
      <anchor>a9c968011a1af3dbe03d6f6fa272fa674</anchor>
      <arglist>(const var &amp;newValue)</arglist>
    </member>
    <member kind="function">
      <type>Value &amp;</type>
      <name>operator=</name>
      <anchorfile>classValue.html</anchorfile>
      <anchor>af11ce0363d6dff5ec8911301b4d06f13</anchor>
      <arglist>(Value &amp;&amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>referTo</name>
      <anchorfile>classValue.html</anchorfile>
      <anchor>a127b52830b5d62b478224b670d9e78f9</anchor>
      <arglist>(const Value &amp;valueToReferTo)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>refersToSameSourceAs</name>
      <anchorfile>classValue.html</anchorfile>
      <anchor>ac748fe41dba23758e8891622a0eb5443</anchor>
      <arglist>(const Value &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classValue.html</anchorfile>
      <anchor>a593ffc8716f4950dfd404f8589994976</anchor>
      <arglist>(const Value &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classValue.html</anchorfile>
      <anchor>a0d4b1c3a4a5b2c2ef50ca3fb6279fc1b</anchor>
      <arglist>(const Value &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addListener</name>
      <anchorfile>classValue.html</anchorfile>
      <anchor>a3c2c52becedfd8c85029f98412300aa5</anchor>
      <arglist>(Listener *listener)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeListener</name>
      <anchorfile>classValue.html</anchorfile>
      <anchor>a90467d1b5c25f52d2152bd72057cd951</anchor>
      <arglist>(Listener *listener)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Value</name>
      <anchorfile>classValue.html</anchorfile>
      <anchor>a9ef2a029c366ec777e9485cb4aadcf8b</anchor>
      <arglist>(ValueSource *valueSource)</arglist>
    </member>
    <member kind="function">
      <type>ValueSource &amp;</type>
      <name>getValueSource</name>
      <anchorfile>classValue.html</anchorfile>
      <anchor>ad69f95e21345a423192a3e9976258c8b</anchor>
      <arglist>() noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Value::Listener</name>
    <filename>classValue_1_1Listener.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>valueChanged</name>
      <anchorfile>classValue_1_1Listener.html</anchorfile>
      <anchor>ab1f072eabd128b8e9a99b4926f2231a8</anchor>
      <arglist>(Value &amp;value)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Value::ValueSource</name>
    <filename>classValue_1_1ValueSource.html</filename>
    <base>ReferenceCountedObject</base>
    <base protection="private">AsyncUpdater</base>
    <member kind="function">
      <type></type>
      <name>ValueSource</name>
      <anchorfile>classValue_1_1ValueSource.html</anchorfile>
      <anchor>a38f5ca1d8aed95c1d5caaa9c1c461626</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ValueSource</name>
      <anchorfile>classValue_1_1ValueSource.html</anchorfile>
      <anchor>a4d52ea8cc66d29d25449726557c7c4a8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual var</type>
      <name>getValue</name>
      <anchorfile>classValue_1_1ValueSource.html</anchorfile>
      <anchor>a54eaab6f8ce4fd995c51d3a57e17625e</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setValue</name>
      <anchorfile>classValue_1_1ValueSource.html</anchorfile>
      <anchor>aa21be5c22b2846326b8d52cf7a79f7f9</anchor>
      <arglist>(const var &amp;newValue)=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sendChangeMessage</name>
      <anchorfile>classValue_1_1ValueSource.html</anchorfile>
      <anchor>a75dfc7b9a9e27384e8d22ce1b426704b</anchor>
      <arglist>(bool dispatchSynchronously)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SortedSet&lt; Value * &gt;</type>
      <name>valuesWithListeners</name>
      <anchorfile>classValue_1_1ValueSource.html</anchorfile>
      <anchor>ac6c18c9323cbda13d3e967c1b3c7b3cf</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ValueTree</name>
    <filename>classValueTree.html</filename>
    <class kind="struct">ValueTree::Iterator</class>
    <class kind="class">ValueTree::Listener</class>
    <member kind="function">
      <type></type>
      <name>ValueTree</name>
      <anchorfile>classValueTree.html</anchorfile>
      <anchor>ad5671081941b3db9db42bf7fcbd2629c</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ValueTree</name>
      <anchorfile>classValueTree.html</anchorfile>
      <anchor>af2f66bc6973b9a7561af455bd6fb331c</anchor>
      <arglist>(const Identifier &amp;type)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ValueTree</name>
      <anchorfile>classValueTree.html</anchorfile>
      <anchor>ac96c26d40b84ef461c1afb882453612c</anchor>
      <arglist>(const ValueTree &amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>ValueTree &amp;</type>
      <name>operator=</name>
      <anchorfile>classValueTree.html</anchorfile>
      <anchor>ac064e1f6095e5f21fc065d9f6b76a407</anchor>
      <arglist>(const ValueTree &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ValueTree</name>
      <anchorfile>classValueTree.html</anchorfile>
      <anchor>ab7492a326b17d3840f6632137295e6f9</anchor>
      <arglist>(ValueTree &amp;&amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ValueTree</name>
      <anchorfile>classValueTree.html</anchorfile>
      <anchor>a4e0b4721cb1ec7f79c59192df3b97bcc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classValueTree.html</anchorfile>
      <anchor>a998b47680444a00866db876dada8f254</anchor>
      <arglist>(const ValueTree &amp;) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classValueTree.html</anchorfile>
      <anchor>ae70dad6ed84e611492a1c682a83fcce5</anchor>
      <arglist>(const ValueTree &amp;) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEquivalentTo</name>
      <anchorfile>classValueTree.html</anchorfile>
      <anchor>a4fee40c899026e8ac370b5fd2ff30c99</anchor>
      <arglist>(const ValueTree &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>classValueTree.html</anchorfile>
      <anchor>a9c1506afbe6b840e4ab43fabf275845a</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>ValueTree</type>
      <name>createCopy</name>
      <anchorfile>classValueTree.html</anchorfile>
      <anchor>ad212f52a1dee540a97b256a57c881fed</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Identifier</type>
      <name>getType</name>
      <anchorfile>classValueTree.html</anchorfile>
      <anchor>aaba6256213ee02c418e9ef3d320f0ff1</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasType</name>
      <anchorfile>classValueTree.html</anchorfile>
      <anchor>a5d41bc2066cae65b69aa614aa0f68ff1</anchor>
      <arglist>(const Identifier &amp;typeName) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const var &amp;</type>
      <name>getProperty</name>
      <anchorfile>classValueTree.html</anchorfile>
      <anchor>a16875a1c5f41f03f609a9d7870171fd6</anchor>
      <arglist>(const Identifier &amp;name) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>var</type>
      <name>getProperty</name>
      <anchorfile>classValueTree.html</anchorfile>
      <anchor>a37c064d4411df78b7d1d8ded5cac3ce3</anchor>
      <arglist>(const Identifier &amp;name, const var &amp;defaultReturnValue) const </arglist>
    </member>
    <member kind="function">
      <type>const var *</type>
      <name>getPropertyPointer</name>
      <anchorfile>classValueTree.html</anchorfile>
      <anchor>ad22d040f68cf2f91784e18573cc6949a</anchor>
      <arglist>(const Identifier &amp;name) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const var &amp;</type>
      <name>operator[]</name>
      <anchorfile>classValueTree.html</anchorfile>
      <anchor>a55c5127906a252590c8a64c48c5e99d3</anchor>
      <arglist>(const Identifier &amp;name) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>ValueTree &amp;</type>
      <name>setProperty</name>
      <anchorfile>classValueTree.html</anchorfile>
      <anchor>ad236114dc2a8c41c799f1fc51d1614bd</anchor>
      <arglist>(const Identifier &amp;name, const var &amp;newValue, UndoManager *undoManager)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasProperty</name>
      <anchorfile>classValueTree.html</anchorfile>
      <anchor>a0dbec0d665fb9d57b9fd7b3189ec0ee0</anchor>
      <arglist>(const Identifier &amp;name) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeProperty</name>
      <anchorfile>classValueTree.html</anchorfile>
      <anchor>a2a07b801bd317aa8bf1ee9da5644fc35</anchor>
      <arglist>(const Identifier &amp;name, UndoManager *undoManager)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeAllProperties</name>
      <anchorfile>classValueTree.html</anchorfile>
      <anchor>a2f750331b6a680f48751302be9313467</anchor>
      <arglist>(UndoManager *undoManager)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumProperties</name>
      <anchorfile>classValueTree.html</anchorfile>
      <anchor>a018730ee95c743705aa9132a37829b32</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Identifier</type>
      <name>getPropertyName</name>
      <anchorfile>classValueTree.html</anchorfile>
      <anchor>a6ea2ce53b4759a37d58e3f99d9702e36</anchor>
      <arglist>(int index) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>getPropertyAsValue</name>
      <anchorfile>classValueTree.html</anchorfile>
      <anchor>aa36d40c533583c723be757c77ade1a5c</anchor>
      <arglist>(const Identifier &amp;name, UndoManager *undoManager)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyPropertiesFrom</name>
      <anchorfile>classValueTree.html</anchorfile>
      <anchor>ad2596a93fa05a1a0c95cd6c275e77982</anchor>
      <arglist>(const ValueTree &amp;source, UndoManager *undoManager)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumChildren</name>
      <anchorfile>classValueTree.html</anchorfile>
      <anchor>a72c1b4a7e3b9518568d4f692358c25e5</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>ValueTree</type>
      <name>getChild</name>
      <anchorfile>classValueTree.html</anchorfile>
      <anchor>ae3c7ef24e903b145e7885820898240cb</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function">
      <type>ValueTree</type>
      <name>getChildWithName</name>
      <anchorfile>classValueTree.html</anchorfile>
      <anchor>a00e9d09ad2439b9eb5cb79cb146c5a73</anchor>
      <arglist>(const Identifier &amp;type) const </arglist>
    </member>
    <member kind="function">
      <type>ValueTree</type>
      <name>getOrCreateChildWithName</name>
      <anchorfile>classValueTree.html</anchorfile>
      <anchor>aafb29876616f005939915de3e6968818</anchor>
      <arglist>(const Identifier &amp;type, UndoManager *undoManager)</arglist>
    </member>
    <member kind="function">
      <type>ValueTree</type>
      <name>getChildWithProperty</name>
      <anchorfile>classValueTree.html</anchorfile>
      <anchor>a99c2e890ecbed6c7fab83c1a95d824a6</anchor>
      <arglist>(const Identifier &amp;propertyName, const var &amp;propertyValue) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addChild</name>
      <anchorfile>classValueTree.html</anchorfile>
      <anchor>a93d639299ef9dfedc651544e05f06693</anchor>
      <arglist>(const ValueTree &amp;child, int index, UndoManager *undoManager)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeChild</name>
      <anchorfile>classValueTree.html</anchorfile>
      <anchor>a52b15bdb0b4a04b81c04e7059bb926c4</anchor>
      <arglist>(const ValueTree &amp;child, UndoManager *undoManager)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeChild</name>
      <anchorfile>classValueTree.html</anchorfile>
      <anchor>a3bee3734652dec6bb1d5c351a1268fc0</anchor>
      <arglist>(int childIndex, UndoManager *undoManager)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeAllChildren</name>
      <anchorfile>classValueTree.html</anchorfile>
      <anchor>a91f8a28e02a782b0c95f855d0c29f0d9</anchor>
      <arglist>(UndoManager *undoManager)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>moveChild</name>
      <anchorfile>classValueTree.html</anchorfile>
      <anchor>ab7d20bf6964bfc8c4a975543bca8ce53</anchor>
      <arglist>(int currentIndex, int newIndex, UndoManager *undoManager)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isAChildOf</name>
      <anchorfile>classValueTree.html</anchorfile>
      <anchor>ad1973a657c1c2907c9996038e7e756fe</anchor>
      <arglist>(const ValueTree &amp;possibleParent) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>indexOf</name>
      <anchorfile>classValueTree.html</anchorfile>
      <anchor>aecc3e5c14e02f7ee3a958006d5146b78</anchor>
      <arglist>(const ValueTree &amp;child) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>ValueTree</type>
      <name>getParent</name>
      <anchorfile>classValueTree.html</anchorfile>
      <anchor>ad22561c896d9bcdb763d27aacbb5815c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>ValueTree</type>
      <name>getRoot</name>
      <anchorfile>classValueTree.html</anchorfile>
      <anchor>a4a16465630ab6a1c6a7bcb65ee77a3df</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>ValueTree</type>
      <name>getSibling</name>
      <anchorfile>classValueTree.html</anchorfile>
      <anchor>a83099cde9f794842a2378c2935976a90</anchor>
      <arglist>(int delta) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>begin</name>
      <anchorfile>classValueTree.html</anchorfile>
      <anchor>a2cf33db0574a9f2673cde96bcfd808c5</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>end</name>
      <anchorfile>classValueTree.html</anchorfile>
      <anchor>a40346edfb70253a482cd0642ac5ac577</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>XmlElement *</type>
      <name>createXml</name>
      <anchorfile>classValueTree.html</anchorfile>
      <anchor>ad4b6941292f6ba19b1f4c7a91b82f957</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>toXmlString</name>
      <anchorfile>classValueTree.html</anchorfile>
      <anchor>a4ac1da90e499eea7233b6eb7d0d7d190</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeToStream</name>
      <anchorfile>classValueTree.html</anchorfile>
      <anchor>a0a2a0fa2cf051fef99cab56db74a4266</anchor>
      <arglist>(OutputStream &amp;output) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addListener</name>
      <anchorfile>classValueTree.html</anchorfile>
      <anchor>a0a0d82471cb1119fc1a7b7018e3af394</anchor>
      <arglist>(Listener *listener)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeListener</name>
      <anchorfile>classValueTree.html</anchorfile>
      <anchor>ac8930aa94cb6e3714ef9e7449d08e5f6</anchor>
      <arglist>(Listener *listener)</arglist>
    </member>
    <member kind="function">
      <type>ValueTree &amp;</type>
      <name>setPropertyExcludingListener</name>
      <anchorfile>classValueTree.html</anchorfile>
      <anchor>a85b3ee8728b1c7e5e91b898c35f1b73e</anchor>
      <arglist>(Listener *listenerToExclude, const Identifier &amp;name, const var &amp;newValue, UndoManager *undoManager)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sendPropertyChangeMessage</name>
      <anchorfile>classValueTree.html</anchorfile>
      <anchor>a164ff183e358b982b1a1f5dd1176ab88</anchor>
      <arglist>(const Identifier &amp;property)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sort</name>
      <anchorfile>classValueTree.html</anchorfile>
      <anchor>acdace65667e5bb2036310b4a91dd3a87</anchor>
      <arglist>(ElementComparator &amp;comparator, UndoManager *undoManager, bool retainOrderOfEquivalentItems)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getReferenceCount</name>
      <anchorfile>classValueTree.html</anchorfile>
      <anchor>ade7c3497b915a14168d347b20258122d</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ValueTree</type>
      <name>fromXml</name>
      <anchorfile>classValueTree.html</anchorfile>
      <anchor>a0d2f1bdd6313e53f256ed015986f837a</anchor>
      <arglist>(const XmlElement &amp;xml)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ValueTree</type>
      <name>readFromStream</name>
      <anchorfile>classValueTree.html</anchorfile>
      <anchor>ad41a9e45b2d15699b4e27bed3b31109c</anchor>
      <arglist>(InputStream &amp;input)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ValueTree</type>
      <name>readFromData</name>
      <anchorfile>classValueTree.html</anchorfile>
      <anchor>a9481d856db653baecf76032703858ca5</anchor>
      <arglist>(const void *data, size_t numBytes)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ValueTree</type>
      <name>readFromGZIPData</name>
      <anchorfile>classValueTree.html</anchorfile>
      <anchor>ab5a0858a2f15fef8b61adb6aa2aadc63</anchor>
      <arglist>(const void *data, size_t numBytes)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ValueTree::Iterator</name>
    <filename>structValueTree_1_1Iterator.html</filename>
    <member kind="function">
      <type></type>
      <name>Iterator</name>
      <anchorfile>structValueTree_1_1Iterator.html</anchorfile>
      <anchor>a884bf2e0ac9c06422755d5137d356a0d</anchor>
      <arglist>(const ValueTree &amp;, bool isEnd) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Iterator &amp;</type>
      <name>operator++</name>
      <anchorfile>structValueTree_1_1Iterator.html</anchorfile>
      <anchor>a4a5b414a485fe8906632360f440d539b</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>structValueTree_1_1Iterator.html</anchorfile>
      <anchor>a1bb4fd99816d550c97499e3b7543193f</anchor>
      <arglist>(const Iterator &amp;) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>ValueTree</type>
      <name>operator*</name>
      <anchorfile>structValueTree_1_1Iterator.html</anchorfile>
      <anchor>a78e67bc84abab72031bafc13bda170e9</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ValueTree::Listener</name>
    <filename>classValueTree_1_1Listener.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Listener</name>
      <anchorfile>classValueTree_1_1Listener.html</anchorfile>
      <anchor>a46d1eba2ac9d4ce60a849696dd015606</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>valueTreePropertyChanged</name>
      <anchorfile>classValueTree_1_1Listener.html</anchorfile>
      <anchor>aea6d5afc919eab727e0bdb6668f4a245</anchor>
      <arglist>(ValueTree &amp;treeWhosePropertyHasChanged, const Identifier &amp;property)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>valueTreeChildAdded</name>
      <anchorfile>classValueTree_1_1Listener.html</anchorfile>
      <anchor>abd937fd4a9a57124ff6c68bd49ce9b67</anchor>
      <arglist>(ValueTree &amp;parentTree, ValueTree &amp;childWhichHasBeenAdded)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>valueTreeChildRemoved</name>
      <anchorfile>classValueTree_1_1Listener.html</anchorfile>
      <anchor>af398254dea149b4cce8b4dd77f0f9f50</anchor>
      <arglist>(ValueTree &amp;parentTree, ValueTree &amp;childWhichHasBeenRemoved, int indexFromWhichChildWasRemoved)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>valueTreeChildOrderChanged</name>
      <anchorfile>classValueTree_1_1Listener.html</anchorfile>
      <anchor>aa0926793951c23e37218ff7a88f97680</anchor>
      <arglist>(ValueTree &amp;parentTreeWhoseChildrenHaveMoved, int oldIndex, int newIndex)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>valueTreeParentChanged</name>
      <anchorfile>classValueTree_1_1Listener.html</anchorfile>
      <anchor>a597ebac03d1095a618843fdcc3573b21</anchor>
      <arglist>(ValueTree &amp;treeWhoseParentHasChanged)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>valueTreeRedirected</name>
      <anchorfile>classValueTree_1_1Listener.html</anchorfile>
      <anchor>a0fe714c55225f9f814801f875e5d41ca</anchor>
      <arglist>(ValueTree &amp;treeWhichHasBeenChanged)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ValueTreeSynchroniser</name>
    <filename>classValueTreeSynchroniser.html</filename>
    <base protection="private">ValueTree::Listener</base>
    <member kind="function">
      <type></type>
      <name>ValueTreeSynchroniser</name>
      <anchorfile>classValueTreeSynchroniser.html</anchorfile>
      <anchor>a85fc71c5c6f74a970ff2b0f45d0a679b</anchor>
      <arglist>(const ValueTree &amp;tree)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ValueTreeSynchroniser</name>
      <anchorfile>classValueTreeSynchroniser.html</anchorfile>
      <anchor>ae0719684d20eee3d640551cef6c75e72</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>stateChanged</name>
      <anchorfile>classValueTreeSynchroniser.html</anchorfile>
      <anchor>acd2f064583c5bf45d65c5ff1369f0a5b</anchor>
      <arglist>(const void *encodedChange, size_t encodedChangeSize)=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sendFullSyncCallback</name>
      <anchorfile>classValueTreeSynchroniser.html</anchorfile>
      <anchor>a6e39d8dfd2653907078f91d79eb81dd5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ValueTree &amp;</type>
      <name>getRoot</name>
      <anchorfile>classValueTreeSynchroniser.html</anchorfile>
      <anchor>ac1ec42c492653823573c25f6892764e9</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>applyChange</name>
      <anchorfile>classValueTreeSynchroniser.html</anchorfile>
      <anchor>a987b026099f040bd1fb85a5ee1431fe3</anchor>
      <arglist>(ValueTree &amp;target, const void *encodedChangeData, size_t encodedChangeDataSize, UndoManager *undoManager)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>var</name>
    <filename>classvar.html</filename>
    <class kind="struct">var::NativeFunctionArgs</class>
    <member kind="typedef">
      <type>std::function&lt; var(const NativeFunctionArgs &amp;)&gt;</type>
      <name>NativeFunction</name>
      <anchorfile>classvar.html</anchorfile>
      <anchor>ae639f9a33534812a529a97740682d992</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>var</name>
      <anchorfile>classvar.html</anchorfile>
      <anchor>a2b11ef56eefd5039182b735b496ebe4e</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~var</name>
      <anchorfile>classvar.html</anchorfile>
      <anchor>af9d8ff8bbc329d0a0a39e6a051327f1b</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>var</name>
      <anchorfile>classvar.html</anchorfile>
      <anchor>a6a974b86936dabdfbd84bf48651960a2</anchor>
      <arglist>(const var &amp;valueToCopy)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>var</name>
      <anchorfile>classvar.html</anchorfile>
      <anchor>a52307f4bfcd3d1eabaaec7eac4308d66</anchor>
      <arglist>(int value) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>var</name>
      <anchorfile>classvar.html</anchorfile>
      <anchor>a5b5745b21f737a5a5f30137927b9a334</anchor>
      <arglist>(int64 value) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>var</name>
      <anchorfile>classvar.html</anchorfile>
      <anchor>aa3d805fd44cf913bdb80d2c9220b9285</anchor>
      <arglist>(bool value) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>var</name>
      <anchorfile>classvar.html</anchorfile>
      <anchor>ac0d91e9a99988005f6ae7e579fb03840</anchor>
      <arglist>(double value) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>var</name>
      <anchorfile>classvar.html</anchorfile>
      <anchor>ac8a4731c2eeebe5db6f1cc5c84dc831b</anchor>
      <arglist>(const char *value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>var</name>
      <anchorfile>classvar.html</anchorfile>
      <anchor>abfddd045e712e6e7e60e2e00f741e770</anchor>
      <arglist>(const wchar_t *value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>var</name>
      <anchorfile>classvar.html</anchorfile>
      <anchor>adac6da6937fb8b1c4d7e4834eba80a49</anchor>
      <arglist>(const String &amp;value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>var</name>
      <anchorfile>classvar.html</anchorfile>
      <anchor>aaee0a5c918953159d4f461db8e6f82ff</anchor>
      <arglist>(const Array&lt; var &gt; &amp;value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>var</name>
      <anchorfile>classvar.html</anchorfile>
      <anchor>a0b7f5dbf9267b0c55d37615b34d3cfa0</anchor>
      <arglist>(const StringArray &amp;value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>var</name>
      <anchorfile>classvar.html</anchorfile>
      <anchor>ab42b36078ccda5f6e8a1ef8106fada84</anchor>
      <arglist>(ReferenceCountedObject *object)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>var</name>
      <anchorfile>classvar.html</anchorfile>
      <anchor>a3c1abcf59359033d8b07254c3469afb7</anchor>
      <arglist>(NativeFunction method) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>var</name>
      <anchorfile>classvar.html</anchorfile>
      <anchor>a4e2c00adba3e5483bbd4f4112de82a89</anchor>
      <arglist>(const void *binaryData, size_t dataSize)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>var</name>
      <anchorfile>classvar.html</anchorfile>
      <anchor>a547ede5b2e41790c326bf077a0c64bda</anchor>
      <arglist>(const MemoryBlock &amp;binaryData)</arglist>
    </member>
    <member kind="function">
      <type>var &amp;</type>
      <name>operator=</name>
      <anchorfile>classvar.html</anchorfile>
      <anchor>a3517a5e573ec0fef50f8aebc6c1c7253</anchor>
      <arglist>(const var &amp;valueToCopy)</arglist>
    </member>
    <member kind="function">
      <type>var &amp;</type>
      <name>operator=</name>
      <anchorfile>classvar.html</anchorfile>
      <anchor>ae8b1716b035385c36097f52749bff987</anchor>
      <arglist>(int value)</arglist>
    </member>
    <member kind="function">
      <type>var &amp;</type>
      <name>operator=</name>
      <anchorfile>classvar.html</anchorfile>
      <anchor>adceb980c8819584731b1f6232658388a</anchor>
      <arglist>(int64 value)</arglist>
    </member>
    <member kind="function">
      <type>var &amp;</type>
      <name>operator=</name>
      <anchorfile>classvar.html</anchorfile>
      <anchor>abe4f0082fc266d3895547d7d07a46c31</anchor>
      <arglist>(bool value)</arglist>
    </member>
    <member kind="function">
      <type>var &amp;</type>
      <name>operator=</name>
      <anchorfile>classvar.html</anchorfile>
      <anchor>ae55dc5d3e560cfcb8538e0a675c2e799</anchor>
      <arglist>(double value)</arglist>
    </member>
    <member kind="function">
      <type>var &amp;</type>
      <name>operator=</name>
      <anchorfile>classvar.html</anchorfile>
      <anchor>a4d77a47fe23cfa65b49a3363ec74810d</anchor>
      <arglist>(const char *value)</arglist>
    </member>
    <member kind="function">
      <type>var &amp;</type>
      <name>operator=</name>
      <anchorfile>classvar.html</anchorfile>
      <anchor>a7d27d66b3d4e37ad5383f526e4089642</anchor>
      <arglist>(const wchar_t *value)</arglist>
    </member>
    <member kind="function">
      <type>var &amp;</type>
      <name>operator=</name>
      <anchorfile>classvar.html</anchorfile>
      <anchor>a95e8f7253dae7ea355c671da8e825951</anchor>
      <arglist>(const String &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>var &amp;</type>
      <name>operator=</name>
      <anchorfile>classvar.html</anchorfile>
      <anchor>a9bd693c1c1c9239b82ea04d188f85d7e</anchor>
      <arglist>(const MemoryBlock &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>var &amp;</type>
      <name>operator=</name>
      <anchorfile>classvar.html</anchorfile>
      <anchor>af25c16f53ee21ad9824c9d0933652304</anchor>
      <arglist>(const Array&lt; var &gt; &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>var &amp;</type>
      <name>operator=</name>
      <anchorfile>classvar.html</anchorfile>
      <anchor>a1a0a04b27e8347fba0fdd6004e5ca1b8</anchor>
      <arglist>(ReferenceCountedObject *object)</arglist>
    </member>
    <member kind="function">
      <type>var &amp;</type>
      <name>operator=</name>
      <anchorfile>classvar.html</anchorfile>
      <anchor>a49566684c38cc9b9354235c44e5e10c0</anchor>
      <arglist>(NativeFunction method)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>var</name>
      <anchorfile>classvar.html</anchorfile>
      <anchor>ab963211b79261cadb9149b9682ebcb93</anchor>
      <arglist>(var &amp;&amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>var</name>
      <anchorfile>classvar.html</anchorfile>
      <anchor>a6e5895396fc5f7244fe0cbcf2f01c41c</anchor>
      <arglist>(String &amp;&amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>var</name>
      <anchorfile>classvar.html</anchorfile>
      <anchor>afdae62d7c3b1fc16aa42139228741d63</anchor>
      <arglist>(MemoryBlock &amp;&amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>var</name>
      <anchorfile>classvar.html</anchorfile>
      <anchor>ad5f07b386269e7c5ef8b0ae09cdbaa79</anchor>
      <arglist>(Array&lt; var &gt; &amp;&amp;)</arglist>
    </member>
    <member kind="function">
      <type>var &amp;</type>
      <name>operator=</name>
      <anchorfile>classvar.html</anchorfile>
      <anchor>a0e4b93f026749507f8ea1291a735a146</anchor>
      <arglist>(var &amp;&amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>var &amp;</type>
      <name>operator=</name>
      <anchorfile>classvar.html</anchorfile>
      <anchor>ad27c2494a90d7797fd0125e0f46b8d32</anchor>
      <arglist>(String &amp;&amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swapWith</name>
      <anchorfile>classvar.html</anchorfile>
      <anchor>ab6d6d0432a3631c4d6d6b24811e0f9cc</anchor>
      <arglist>(var &amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator int</name>
      <anchorfile>classvar.html</anchorfile>
      <anchor>a19c5effedc1d005234c5bdea8d16daa6</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator int64</name>
      <anchorfile>classvar.html</anchorfile>
      <anchor>a7d5c816f931945485ba1b32ee57bb8ee</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator bool</name>
      <anchorfile>classvar.html</anchorfile>
      <anchor>a298324288d5df8c7a316dfb86808d359</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator float</name>
      <anchorfile>classvar.html</anchorfile>
      <anchor>ac8e7e94cf7662c1d08c627096e149610</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator double</name>
      <anchorfile>classvar.html</anchorfile>
      <anchor>a7a271db6856e298172da0226641cc482</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator String</name>
      <anchorfile>classvar.html</anchorfile>
      <anchor>a3b79e90400429b3b1d927882ef4c71be</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>toString</name>
      <anchorfile>classvar.html</anchorfile>
      <anchor>a22dc7e16a51df35c04246eeb64a7b107</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Array&lt; var &gt; *</type>
      <name>getArray</name>
      <anchorfile>classvar.html</anchorfile>
      <anchor>a8db82307ae15776cc3bc206b5d46fc8c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>MemoryBlock *</type>
      <name>getBinaryData</name>
      <anchorfile>classvar.html</anchorfile>
      <anchor>a9f04c99068d0a41012b678f68e66270f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>ReferenceCountedObject *</type>
      <name>getObject</name>
      <anchorfile>classvar.html</anchorfile>
      <anchor>aee2d5e83419be04a0bb73a85f85326cc</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>DynamicObject *</type>
      <name>getDynamicObject</name>
      <anchorfile>classvar.html</anchorfile>
      <anchor>a1d5bb2e57b5e72f8933cc5bad9a12ecf</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isVoid</name>
      <anchorfile>classvar.html</anchorfile>
      <anchor>a09897cacaba26ba74e1f93a617fabed7</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isUndefined</name>
      <anchorfile>classvar.html</anchorfile>
      <anchor>a58414b1c59b412ccb4be79f41595d8be</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isInt</name>
      <anchorfile>classvar.html</anchorfile>
      <anchor>a0cc29bf1409cc5a8cbdfdf22f0b87c04</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isInt64</name>
      <anchorfile>classvar.html</anchorfile>
      <anchor>a84d9eae9c4470eaa8238740357728e83</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isBool</name>
      <anchorfile>classvar.html</anchorfile>
      <anchor>a99de9f07b4ff064a6f9f3f8d22773899</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isDouble</name>
      <anchorfile>classvar.html</anchorfile>
      <anchor>ad1b3fe90c8b31658e4256c6916afb625</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isString</name>
      <anchorfile>classvar.html</anchorfile>
      <anchor>a2808c18f896b1283c9273608ef174aaf</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isObject</name>
      <anchorfile>classvar.html</anchorfile>
      <anchor>aeded7ac8af755cc9ca8488ae04b6cdd4</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isArray</name>
      <anchorfile>classvar.html</anchorfile>
      <anchor>a2a6f765fc4845723607f6556191c84ad</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isBinaryData</name>
      <anchorfile>classvar.html</anchorfile>
      <anchor>ad57788405f0c5377d4f7b2f556866941</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isMethod</name>
      <anchorfile>classvar.html</anchorfile>
      <anchor>a5c12783157b8b3d8b769f98e7bf31b54</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>classvar.html</anchorfile>
      <anchor>a5ba20895db4514964f089c4159543b20</anchor>
      <arglist>(const var &amp;other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equalsWithSameType</name>
      <anchorfile>classvar.html</anchorfile>
      <anchor>ae54c3be746f033e773df4ddaba623300</anchor>
      <arglist>(const var &amp;other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasSameTypeAs</name>
      <anchorfile>classvar.html</anchorfile>
      <anchor>a6357525c383c7d52c43d1db7d0669f34</anchor>
      <arglist>(const var &amp;other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>var</type>
      <name>clone</name>
      <anchorfile>classvar.html</anchorfile>
      <anchor>a416b317dc68ad725b3892a79e4173f86</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>classvar.html</anchorfile>
      <anchor>a88d1ff75c60f6824ce56d97f9a26583c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const var &amp;</type>
      <name>operator[]</name>
      <anchorfile>classvar.html</anchorfile>
      <anchor>a403b79dc3bf29336873dd903cc99b689</anchor>
      <arglist>(int arrayIndex) const </arglist>
    </member>
    <member kind="function">
      <type>var &amp;</type>
      <name>operator[]</name>
      <anchorfile>classvar.html</anchorfile>
      <anchor>a5f294480e2c6bfcc5a81ef3f62a27821</anchor>
      <arglist>(int arrayIndex)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>append</name>
      <anchorfile>classvar.html</anchorfile>
      <anchor>a8a3657b52bfdf1120c88851263903116</anchor>
      <arglist>(const var &amp;valueToAppend)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insert</name>
      <anchorfile>classvar.html</anchorfile>
      <anchor>a1b064ae2fb28d6eab3592324e0e10dde</anchor>
      <arglist>(int index, const var &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove</name>
      <anchorfile>classvar.html</anchorfile>
      <anchor>a85691db7742e3520ec15c4db8240daf1</anchor>
      <arglist>(int index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classvar.html</anchorfile>
      <anchor>a9569f9234ca0d7265d34e80704d0bfba</anchor>
      <arglist>(int numArrayElementsWanted)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>indexOf</name>
      <anchorfile>classvar.html</anchorfile>
      <anchor>ac139ef6d0cb2241eb67bdb9dac7dd902</anchor>
      <arglist>(const var &amp;value) const </arglist>
    </member>
    <member kind="function">
      <type>const var &amp;</type>
      <name>operator[]</name>
      <anchorfile>classvar.html</anchorfile>
      <anchor>a9b9e4b83d30b60ee653ea6a45406ed50</anchor>
      <arglist>(const Identifier &amp;propertyName) const </arglist>
    </member>
    <member kind="function">
      <type>const var &amp;</type>
      <name>operator[]</name>
      <anchorfile>classvar.html</anchorfile>
      <anchor>a42e12c8916647ef0f68af4c8ae162e12</anchor>
      <arglist>(const char *propertyName) const </arglist>
    </member>
    <member kind="function">
      <type>var</type>
      <name>getProperty</name>
      <anchorfile>classvar.html</anchorfile>
      <anchor>a1ac00408a895793661e1e1f850aa1ed7</anchor>
      <arglist>(const Identifier &amp;propertyName, const var &amp;defaultReturnValue) const </arglist>
    </member>
    <member kind="function">
      <type>var</type>
      <name>call</name>
      <anchorfile>classvar.html</anchorfile>
      <anchor>af5b4e682c7ae8cfbc47ba2d357681c10</anchor>
      <arglist>(const Identifier &amp;method) const </arglist>
    </member>
    <member kind="function">
      <type>var</type>
      <name>call</name>
      <anchorfile>classvar.html</anchorfile>
      <anchor>a41791eed993a191f9c75a68d9debaa69</anchor>
      <arglist>(const Identifier &amp;method, const var &amp;arg1) const </arglist>
    </member>
    <member kind="function">
      <type>var</type>
      <name>call</name>
      <anchorfile>classvar.html</anchorfile>
      <anchor>a183557ee5db759512bef267cc31f8459</anchor>
      <arglist>(const Identifier &amp;method, const var &amp;arg1, const var &amp;arg2) const </arglist>
    </member>
    <member kind="function">
      <type>var</type>
      <name>call</name>
      <anchorfile>classvar.html</anchorfile>
      <anchor>a23866be8f0ff8e19155e35034b00ef49</anchor>
      <arglist>(const Identifier &amp;method, const var &amp;arg1, const var &amp;arg2, const var &amp;arg3)</arglist>
    </member>
    <member kind="function">
      <type>var</type>
      <name>call</name>
      <anchorfile>classvar.html</anchorfile>
      <anchor>a32a3ee856a7acffe0fde8280063718ca</anchor>
      <arglist>(const Identifier &amp;method, const var &amp;arg1, const var &amp;arg2, const var &amp;arg3, const var &amp;arg4) const </arglist>
    </member>
    <member kind="function">
      <type>var</type>
      <name>call</name>
      <anchorfile>classvar.html</anchorfile>
      <anchor>a2ef71a4912ef0a26aeb94836541d8a6b</anchor>
      <arglist>(const Identifier &amp;method, const var &amp;arg1, const var &amp;arg2, const var &amp;arg3, const var &amp;arg4, const var &amp;arg5) const </arglist>
    </member>
    <member kind="function">
      <type>var</type>
      <name>invoke</name>
      <anchorfile>classvar.html</anchorfile>
      <anchor>a60d4a70e064a8b58e9868fb2566cc2c4</anchor>
      <arglist>(const Identifier &amp;method, const var *arguments, int numArguments) const </arglist>
    </member>
    <member kind="function">
      <type>NativeFunction</type>
      <name>getNativeFunction</name>
      <anchorfile>classvar.html</anchorfile>
      <anchor>acc064f9f435c70b08395a39377fd7b51</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeToStream</name>
      <anchorfile>classvar.html</anchorfile>
      <anchor>a0872b4cd7956230f5d8d3467be21dd5c</anchor>
      <arglist>(OutputStream &amp;output) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static var</type>
      <name>undefined</name>
      <anchorfile>classvar.html</anchorfile>
      <anchor>aa8ad714f97623c9c8f0e0e7e139b09d4</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static var</type>
      <name>readFromStream</name>
      <anchorfile>classvar.html</anchorfile>
      <anchor>aaf0922e63a9012369524c7e1b9a710f5</anchor>
      <arglist>(InputStream &amp;input)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>var::NativeFunctionArgs</name>
    <filename>structvar_1_1NativeFunctionArgs.html</filename>
    <member kind="function">
      <type></type>
      <name>NativeFunctionArgs</name>
      <anchorfile>structvar_1_1NativeFunctionArgs.html</anchorfile>
      <anchor>a8ee7e2f72e487191674312e3da2e2996</anchor>
      <arglist>(const var &amp;thisObject, const var *args, int numArgs) noexcept</arglist>
    </member>
    <member kind="variable">
      <type>const var &amp;</type>
      <name>thisObject</name>
      <anchorfile>structvar_1_1NativeFunctionArgs.html</anchorfile>
      <anchor>a6f091ea39e2ba3b25268cad75f8d7f3e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const var *</type>
      <name>arguments</name>
      <anchorfile>structvar_1_1NativeFunctionArgs.html</anchorfile>
      <anchor>a6c898b57ab92fb3084a78a4713ae2065</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>numArguments</name>
      <anchorfile>structvar_1_1NativeFunctionArgs.html</anchorfile>
      <anchor>ad108a7f18e7234cdffc0e8757cdef320</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>VariantConverter</name>
    <filename>structVariantConverter.html</filename>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static Type</type>
      <name>fromVar</name>
      <anchorfile>structVariantConverter.html</anchorfile>
      <anchor>a3c8c84e522e2e0158eb5ad9f6f0547aa</anchor>
      <arglist>(const var &amp;v)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static var</type>
      <name>toVar</name>
      <anchorfile>structVariantConverter.html</anchorfile>
      <anchor>ae716c1fc1c493b735e2dc9a81df6bf0d</anchor>
      <arglist>(const Type &amp;t)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>VariantConverter&lt; String &gt;</name>
    <filename>structVariantConverter_3_01String_01_4.html</filename>
    <member kind="function" static="yes">
      <type>static String</type>
      <name>fromVar</name>
      <anchorfile>structVariantConverter_3_01String_01_4.html</anchorfile>
      <anchor>a1ca93bad0608e31e75cfdf95c82e7154</anchor>
      <arglist>(const var &amp;v)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static var</type>
      <name>toVar</name>
      <anchorfile>structVariantConverter_3_01String_01_4.html</anchorfile>
      <anchor>aa9993300b6b4bd808b1a8f1b8cbeee1b</anchor>
      <arglist>(const String &amp;s)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Vector3D</name>
    <filename>classVector3D.html</filename>
    <templarg>Type</templarg>
    <member kind="function">
      <type></type>
      <name>Vector3D</name>
      <anchorfile>classVector3D.html</anchorfile>
      <anchor>ae757048c8249a9e3cc7498f3c6f8bc69</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Vector3D</name>
      <anchorfile>classVector3D.html</anchorfile>
      <anchor>a78422ad1152c4532ca580c268f71017b</anchor>
      <arglist>(Type xValue, Type yValue, Type zValue) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Vector3D</name>
      <anchorfile>classVector3D.html</anchorfile>
      <anchor>a1e8a6a200eeb5185c4e3da7dafb1e9ff</anchor>
      <arglist>(const Vector3D &amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Vector3D &amp;</type>
      <name>operator=</name>
      <anchorfile>classVector3D.html</anchorfile>
      <anchor>afd95cfa16ec7185bcc232a7075e0cc3b</anchor>
      <arglist>(Vector3D other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Vector3D &amp;</type>
      <name>operator+=</name>
      <anchorfile>classVector3D.html</anchorfile>
      <anchor>a1f860378aed7e868c42df72d38b540e6</anchor>
      <arglist>(Vector3D other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Vector3D &amp;</type>
      <name>operator-=</name>
      <anchorfile>classVector3D.html</anchorfile>
      <anchor>abf6beba351e92760dbd1fd4ce6bfd8c8</anchor>
      <arglist>(Vector3D other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Vector3D &amp;</type>
      <name>operator*=</name>
      <anchorfile>classVector3D.html</anchorfile>
      <anchor>aea0ffa2d19b3cdd220f1ea3ec08ff37f</anchor>
      <arglist>(Type scaleFactor) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Vector3D &amp;</type>
      <name>operator/=</name>
      <anchorfile>classVector3D.html</anchorfile>
      <anchor>a10f184ed77f3b6d3c480486845cb7347</anchor>
      <arglist>(Type scaleFactor) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Vector3D</type>
      <name>operator+</name>
      <anchorfile>classVector3D.html</anchorfile>
      <anchor>a4702ed6b048160d7f6a5e023b05f571c</anchor>
      <arglist>(Vector3D other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Vector3D</type>
      <name>operator-</name>
      <anchorfile>classVector3D.html</anchorfile>
      <anchor>a88957c7b7d515e6835e2fb6baeda9ca1</anchor>
      <arglist>(Vector3D other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Vector3D</type>
      <name>operator*</name>
      <anchorfile>classVector3D.html</anchorfile>
      <anchor>a8026c01b25f9b85da1d28181352a43de</anchor>
      <arglist>(Type scaleFactor) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Vector3D</type>
      <name>operator/</name>
      <anchorfile>classVector3D.html</anchorfile>
      <anchor>a4e2a2705bc3cc46ac665f4f9e8d40a5d</anchor>
      <arglist>(Type scaleFactor) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Vector3D</type>
      <name>operator-</name>
      <anchorfile>classVector3D.html</anchorfile>
      <anchor>a2147dfdac96c71c0a93fc243569eb38c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Type</type>
      <name>operator*</name>
      <anchorfile>classVector3D.html</anchorfile>
      <anchor>acda659e7b66e175d5171d9dfd61b70d4</anchor>
      <arglist>(Vector3D other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Vector3D</type>
      <name>operator^</name>
      <anchorfile>classVector3D.html</anchorfile>
      <anchor>a3f74a4292826b23ffa7a25ec3f4104c5</anchor>
      <arglist>(Vector3D other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Type</type>
      <name>length</name>
      <anchorfile>classVector3D.html</anchorfile>
      <anchor>a3026219401ab9d094db78c0cf479cb68</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Type</type>
      <name>lengthSquared</name>
      <anchorfile>classVector3D.html</anchorfile>
      <anchor>a8df06f573da83007cd949515c940ed1f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Vector3D</type>
      <name>normalised</name>
      <anchorfile>classVector3D.html</anchorfile>
      <anchor>aa90015d0e69415881cb24e3f21be5a0d</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>lengthIsBelowEpsilon</name>
      <anchorfile>classVector3D.html</anchorfile>
      <anchor>ae90aaba654b769a43d5d523cf0f462c9</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Vector3D</type>
      <name>xAxis</name>
      <anchorfile>classVector3D.html</anchorfile>
      <anchor>a686d4ba2447a671bab0cdf2e65636309</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Vector3D</type>
      <name>yAxis</name>
      <anchorfile>classVector3D.html</anchorfile>
      <anchor>a943292e5f362278b85bbe2389355cd94</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Vector3D</type>
      <name>zAxis</name>
      <anchorfile>classVector3D.html</anchorfile>
      <anchor>a645c37ceeed7b4962c27584acd56277f</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="variable">
      <type>Type</type>
      <name>x</name>
      <anchorfile>classVector3D.html</anchorfile>
      <anchor>aa5d3c8c349b5603b1f71bb3eae33a882</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Type</type>
      <name>y</name>
      <anchorfile>classVector3D.html</anchorfile>
      <anchor>a49a2c9e33f95b6a7cb4147d5b9ee5e06</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Type</type>
      <name>z</name>
      <anchorfile>classVector3D.html</anchorfile>
      <anchor>a621ed1b40fb9605695c309355736ed9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Viewport</name>
    <filename>classViewport.html</filename>
    <base>Component</base>
    <base protection="private">ComponentListener</base>
    <base protection="private">ScrollBar::Listener</base>
    <member kind="function">
      <type></type>
      <name>Viewport</name>
      <anchorfile>classViewport.html</anchorfile>
      <anchor>a8ce6b1ac61507d22a60c20128aacd6f8</anchor>
      <arglist>(const String &amp;componentName=String())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Viewport</name>
      <anchorfile>classViewport.html</anchorfile>
      <anchor>a1e18a1ff4a52be33ef63d25034561850</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setViewedComponent</name>
      <anchorfile>classViewport.html</anchorfile>
      <anchor>af415e3f6d3461f62d61c42c446996acd</anchor>
      <arglist>(Component *newViewedComponent, bool deleteComponentWhenNoLongerNeeded=true)</arglist>
    </member>
    <member kind="function">
      <type>Component *</type>
      <name>getViewedComponent</name>
      <anchorfile>classViewport.html</anchorfile>
      <anchor>aca2b138175387319a4605760819c6876</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setViewPosition</name>
      <anchorfile>classViewport.html</anchorfile>
      <anchor>a138c2e06be0437fbeab40542c00bbbe1</anchor>
      <arglist>(int xPixelsOffset, int yPixelsOffset)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setViewPosition</name>
      <anchorfile>classViewport.html</anchorfile>
      <anchor>ac9a49c9774e0bfdb2efd00645807c64d</anchor>
      <arglist>(Point&lt; int &gt; newPosition)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setViewPositionProportionately</name>
      <anchorfile>classViewport.html</anchorfile>
      <anchor>a69fd47f38b5a918d38dbd545e60a904c</anchor>
      <arglist>(double proportionX, double proportionY)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>autoScroll</name>
      <anchorfile>classViewport.html</anchorfile>
      <anchor>a9606c7a986679ea21552075a3f6b90f3</anchor>
      <arglist>(int mouseX, int mouseY, int distanceFromEdge, int maximumSpeed)</arglist>
    </member>
    <member kind="function">
      <type>Point&lt; int &gt;</type>
      <name>getViewPosition</name>
      <anchorfile>classViewport.html</anchorfile>
      <anchor>ac371726ebc35efd1fe37b25e08e6ac8c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Rectangle&lt; int &gt;</type>
      <name>getViewArea</name>
      <anchorfile>classViewport.html</anchorfile>
      <anchor>a09d71bcff9cafecd726678dfab2e8535</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getViewPositionX</name>
      <anchorfile>classViewport.html</anchorfile>
      <anchor>a87890b3606a8710cc14aee4e78bfe9fd</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getViewPositionY</name>
      <anchorfile>classViewport.html</anchorfile>
      <anchor>a4554097af5969f13310aaae13ce81a12</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getViewWidth</name>
      <anchorfile>classViewport.html</anchorfile>
      <anchor>ae2d0c8f1ab5e4ed0bdf30e0ec31b0e69</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getViewHeight</name>
      <anchorfile>classViewport.html</anchorfile>
      <anchor>a5aa0d2a592176ec596f93f490a77b50c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getMaximumVisibleWidth</name>
      <anchorfile>classViewport.html</anchorfile>
      <anchor>a046d2d7ca8993a38e0dcaac3a77aa017</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getMaximumVisibleHeight</name>
      <anchorfile>classViewport.html</anchorfile>
      <anchor>a6bc59733a1a9dc1ad69a6cdc670e2725</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>visibleAreaChanged</name>
      <anchorfile>classViewport.html</anchorfile>
      <anchor>abd21eaef2a7a3c30c238e13e60dfd778</anchor>
      <arglist>(const Rectangle&lt; int &gt; &amp;newVisibleArea)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>viewedComponentChanged</name>
      <anchorfile>classViewport.html</anchorfile>
      <anchor>a63e8ebc196483253df8573bb0034bf39</anchor>
      <arglist>(Component *newComponent)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setScrollBarsShown</name>
      <anchorfile>classViewport.html</anchorfile>
      <anchor>ab4b846094f30a0a72bd707dee545ec20</anchor>
      <arglist>(bool showVerticalScrollbarIfNeeded, bool showHorizontalScrollbarIfNeeded, bool allowVerticalScrollingWithoutScrollbar=false, bool allowHorizontalScrollingWithoutScrollbar=false)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isVerticalScrollBarShown</name>
      <anchorfile>classViewport.html</anchorfile>
      <anchor>a395dad79d93fef08652fda138d70e345</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isHorizontalScrollBarShown</name>
      <anchorfile>classViewport.html</anchorfile>
      <anchor>aea89310ab0accaf7f99e8ef4b29d1f69</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setScrollBarThickness</name>
      <anchorfile>classViewport.html</anchorfile>
      <anchor>a865ce481cedc67a4553d65f8e787acbb</anchor>
      <arglist>(int thickness)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getScrollBarThickness</name>
      <anchorfile>classViewport.html</anchorfile>
      <anchor>a3095d6e4d6fc17aba55ad27d7b3a0914</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSingleStepSizes</name>
      <anchorfile>classViewport.html</anchorfile>
      <anchor>a4a0510b81764f1d6899ad7be124bb56f</anchor>
      <arglist>(int stepX, int stepY)</arglist>
    </member>
    <member kind="function">
      <type>ScrollBar *</type>
      <name>getVerticalScrollBar</name>
      <anchorfile>classViewport.html</anchorfile>
      <anchor>a23db9026ff24897bd0ee86e962601655</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>ScrollBar *</type>
      <name>getHorizontalScrollBar</name>
      <anchorfile>classViewport.html</anchorfile>
      <anchor>a32ee4e893ff1d3b67ba91c5c275f2d21</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setScrollOnDragEnabled</name>
      <anchorfile>classViewport.html</anchorfile>
      <anchor>aada0061f2174a6a8ab76a305b8362417</anchor>
      <arglist>(bool shouldScrollOnDrag)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isScrollOnDragEnabled</name>
      <anchorfile>classViewport.html</anchorfile>
      <anchor>ad6beaf7d47db4dcd80d0ddb8a0ce5224</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isCurrentlyScrollingOnDrag</name>
      <anchorfile>classViewport.html</anchorfile>
      <anchor>ab4e15d59a17cb9335c963938516225f5</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resized</name>
      <anchorfile>classViewport.html</anchorfile>
      <anchor>ab9427d36852b58100df1160944195743</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scrollBarMoved</name>
      <anchorfile>classViewport.html</anchorfile>
      <anchor>a0ce137d4a08e41066180c583104ca576</anchor>
      <arglist>(ScrollBar *, double newRangeStart) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mouseWheelMove</name>
      <anchorfile>classViewport.html</anchorfile>
      <anchor>a80424caacc5b478b1904f3cfcda51cc9</anchor>
      <arglist>(const MouseEvent &amp;, const MouseWheelDetails &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>keyPressed</name>
      <anchorfile>classViewport.html</anchorfile>
      <anchor>ab7335754d3e520e1a128edc12447a8ee</anchor>
      <arglist>(const KeyPress &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>componentMovedOrResized</name>
      <anchorfile>classViewport.html</anchorfile>
      <anchor>a006ca066dd583c97a3e894b0f24feabd</anchor>
      <arglist>(Component &amp;, bool wasMoved, bool wasResized) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lookAndFeelChanged</name>
      <anchorfile>classViewport.html</anchorfile>
      <anchor>a9de978a90ea9020fd975bf9b84566d06</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>useMouseWheelMoveIfNeeded</name>
      <anchorfile>classViewport.html</anchorfile>
      <anchor>a563d893ae0d00dd9b1c0e293826cdc8e</anchor>
      <arglist>(const MouseEvent &amp;, const MouseWheelDetails &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>respondsToKey</name>
      <anchorfile>classViewport.html</anchorfile>
      <anchor>a29ebb30af22b82b14cbab02646da7dc4</anchor>
      <arglist>(const KeyPress &amp;)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>VST3BufferExchange</name>
    <filename>structVST3BufferExchange.html</filename>
    <templarg>FloatType</templarg>
    <member kind="typedef">
      <type>Array&lt; FloatType * &gt;</type>
      <name>Bus</name>
      <anchorfile>structVST3BufferExchange.html</anchorfile>
      <anchor>a5aa67a699a8f31a5098536f335c43eb4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Array&lt; Bus &gt;</type>
      <name>BusMap</name>
      <anchorfile>structVST3BufferExchange.html</anchorfile>
      <anchor>a0a22108464b6d7df26e58b473f3b567f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>assignRawPointer</name>
      <anchorfile>structVST3BufferExchange.html</anchorfile>
      <anchor>abc90234508851a83d6d63576297931cf</anchor>
      <arglist>(Steinberg::Vst::AudioBusBuffers &amp;vstBuffers, float **raw)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>assignRawPointer</name>
      <anchorfile>structVST3BufferExchange.html</anchorfile>
      <anchor>af2bb531c0b42c48324d164d379c465e4</anchor>
      <arglist>(Steinberg::Vst::AudioBusBuffers &amp;vstBuffers, double **raw)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>associateBufferTo</name>
      <anchorfile>structVST3BufferExchange.html</anchorfile>
      <anchor>a258f09e3c61c120d7c35e2c66bddd48a</anchor>
      <arglist>(Steinberg::Vst::AudioBusBuffers &amp;vstBuffers, Bus &amp;bus, AudioBuffer&lt; FloatType &gt; &amp;buffer, int numChannels, int channelStartOffset, int sampleOffset=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>mapArrangementToBuses</name>
      <anchorfile>structVST3BufferExchange.html</anchorfile>
      <anchor>aef619a230b18ed73332f85a6e7e53b3f</anchor>
      <arglist>(int &amp;channelIndexOffset, int index, Array&lt; Steinberg::Vst::AudioBusBuffers &gt; &amp;result, BusMap &amp;busMapToUse, const AudioChannelSet &amp;arrangement, AudioBuffer&lt; FloatType &gt; &amp;source)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>mapBufferToBuses</name>
      <anchorfile>structVST3BufferExchange.html</anchorfile>
      <anchor>ae3fab60c5ce04946d6ae969134879d1c</anchor>
      <arglist>(Array&lt; Steinberg::Vst::AudioBusBuffers &gt; &amp;result, BusMap &amp;busMapToUse, const Array&lt; AudioChannelSet &gt; &amp;arrangements, AudioBuffer&lt; FloatType &gt; &amp;source)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>mapBufferToBuses</name>
      <anchorfile>structVST3BufferExchange.html</anchorfile>
      <anchor>a5e84948a416d4960906dce0f854debfa</anchor>
      <arglist>(Array&lt; Steinberg::Vst::AudioBusBuffers &gt; &amp;result, Steinberg::Vst::IAudioProcessor &amp;processor, BusMap &amp;busMapToUse, bool isInput, int numBuses, AudioBuffer&lt; FloatType &gt; &amp;source)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>VST3FloatAndDoubleBusMapComposite</name>
    <filename>structVST3FloatAndDoubleBusMapComposite.html</filename>
    <member kind="function">
      <type>VST3BufferExchange&lt; FloatType &gt;::BusMap &amp;</type>
      <name>get</name>
      <anchorfile>structVST3FloatAndDoubleBusMapComposite.html</anchorfile>
      <anchor>af05d5278108822f96224ac9a5b0e2441</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>VST3BufferExchange&lt; float &gt;::BusMap</type>
      <name>floatVersion</name>
      <anchorfile>structVST3FloatAndDoubleBusMapComposite.html</anchorfile>
      <anchor>a9354fedd5a1aeb3869d72bc13aee3c0b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>VST3BufferExchange&lt; double &gt;::BusMap</type>
      <name>doubleVersion</name>
      <anchorfile>structVST3FloatAndDoubleBusMapComposite.html</anchorfile>
      <anchor>a83882eec1260749ea6ecbb1d830f97f1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>VST3FloatAndDoubleBusMapCompositeHelper</name>
    <filename>structVST3FloatAndDoubleBusMapCompositeHelper.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>VST3FloatAndDoubleBusMapCompositeHelper&lt; double &gt;</name>
    <filename>structVST3FloatAndDoubleBusMapCompositeHelper_3_01double_01_4.html</filename>
    <member kind="function" static="yes">
      <type>static VST3BufferExchange&lt; double &gt;::BusMap &amp;</type>
      <name>get</name>
      <anchorfile>structVST3FloatAndDoubleBusMapCompositeHelper_3_01double_01_4.html</anchorfile>
      <anchor>ac2146cc7128602cd399a0123b98a5071</anchor>
      <arglist>(VST3FloatAndDoubleBusMapComposite &amp;impl)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>VST3FloatAndDoubleBusMapCompositeHelper&lt; float &gt;</name>
    <filename>structVST3FloatAndDoubleBusMapCompositeHelper_3_01float_01_4.html</filename>
    <member kind="function" static="yes">
      <type>static VST3BufferExchange&lt; float &gt;::BusMap &amp;</type>
      <name>get</name>
      <anchorfile>structVST3FloatAndDoubleBusMapCompositeHelper_3_01float_01_4.html</anchorfile>
      <anchor>a53aaa7781139c3c8b1454e013c25b3c1</anchor>
      <arglist>(VST3FloatAndDoubleBusMapComposite &amp;impl)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>VST3PluginFormat</name>
    <filename>classVST3PluginFormat.html</filename>
    <base>AudioPluginFormat</base>
    <member kind="function">
      <type></type>
      <name>VST3PluginFormat</name>
      <anchorfile>classVST3PluginFormat.html</anchorfile>
      <anchor>aa2c23394c6b95560aadfa84ecdc91ee8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~VST3PluginFormat</name>
      <anchorfile>classVST3PluginFormat.html</anchorfile>
      <anchor>ad5b44bc132d7f346e1297181221f7269</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>getName</name>
      <anchorfile>classVST3PluginFormat.html</anchorfile>
      <anchor>adf9f02a4783fcfcaf689327396590c82</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>findAllTypesForFile</name>
      <anchorfile>classVST3PluginFormat.html</anchorfile>
      <anchor>aab02f337b7231856a2b762d2276c92df</anchor>
      <arglist>(OwnedArray&lt; PluginDescription &gt; &amp;, const String &amp;fileOrIdentifier) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>fileMightContainThisPluginType</name>
      <anchorfile>classVST3PluginFormat.html</anchorfile>
      <anchor>a153ac4a1e6f22b1f998f8994aa73114a</anchor>
      <arglist>(const String &amp;fileOrIdentifier) override</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>getNameOfPluginFromIdentifier</name>
      <anchorfile>classVST3PluginFormat.html</anchorfile>
      <anchor>ad516d9b94144a3eff80097ee33e3508a</anchor>
      <arglist>(const String &amp;fileOrIdentifier) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>pluginNeedsRescanning</name>
      <anchorfile>classVST3PluginFormat.html</anchorfile>
      <anchor>aeeef6b788c41aac2925360cf19c874e7</anchor>
      <arglist>(const PluginDescription &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>StringArray</type>
      <name>searchPathsForPlugins</name>
      <anchorfile>classVST3PluginFormat.html</anchorfile>
      <anchor>a6b9809d54eea2dabcd3d1d6ed068a305</anchor>
      <arglist>(const FileSearchPath &amp;, bool recursive, bool) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>doesPluginStillExist</name>
      <anchorfile>classVST3PluginFormat.html</anchorfile>
      <anchor>aea11d56c5a3e99bdfe86e4057a7830ed</anchor>
      <arglist>(const PluginDescription &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>FileSearchPath</type>
      <name>getDefaultLocationsToSearch</name>
      <anchorfile>classVST3PluginFormat.html</anchorfile>
      <anchor>a4a33699a1a6f915ea67ac3c805a5f6d7</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>canScanForPlugins</name>
      <anchorfile>classVST3PluginFormat.html</anchorfile>
      <anchor>a8bbc739935a7f9d93fbc9aa99f44f9db</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>VSTCallbackHandler</name>
    <filename>structVSTCallbackHandler.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~VSTCallbackHandler</name>
      <anchorfile>structVSTCallbackHandler.html</anchorfile>
      <anchor>ab2f08ebccc2b993da57a1f5e819814d4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual pointer_sized_int</type>
      <name>handleVstManufacturerSpecific</name>
      <anchorfile>structVSTCallbackHandler.html</anchorfile>
      <anchor>a7158d63b0c27896792191d1598a740d5</anchor>
      <arglist>(int32 index, pointer_sized_int value, void *ptr, float opt)=0</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>VstEditorBounds</name>
    <filename>structVstEditorBounds.html</filename>
    <member kind="variable">
      <type>int16</type>
      <name>upper</name>
      <anchorfile>structVstEditorBounds.html</anchorfile>
      <anchor>a0ece2187154a72bf0299b1555dfe4d3d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int16</type>
      <name>leftmost</name>
      <anchorfile>structVstEditorBounds.html</anchorfile>
      <anchor>a624bc315686fb475aa3faa3c5ac6a6fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int16</type>
      <name>lower</name>
      <anchorfile>structVstEditorBounds.html</anchorfile>
      <anchor>a2f1d473a71ed05bd4ba02c14b31bc389</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int16</type>
      <name>rightmost</name>
      <anchorfile>structVstEditorBounds.html</anchorfile>
      <anchor>a45a396041a5c49b89d1b6f3f1a6a0b35</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>VstEffectInterface</name>
    <filename>structVstEffectInterface.html</filename>
    <member kind="function">
      <type></type>
      <name>pointer_sized_int</name>
      <anchorfile>structVstEffectInterface.html</anchorfile>
      <anchor>ac6a47a5c78b27b9b1196461a2fd3b2f3</anchor>
      <arglist>(VSTINTERFACECALL *dispatchFunction)(VstEffectInterface *</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>void</name>
      <anchorfile>structVstEffectInterface.html</anchorfile>
      <anchor>a6956d2a27357344234727253d0c4f303</anchor>
      <arglist>(VSTINTERFACECALL *processAudioFunction)(VstEffectInterface *</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>void</name>
      <anchorfile>structVstEffectInterface.html</anchorfile>
      <anchor>a8ac4518beba958d3834ae7bf46cf18ee</anchor>
      <arglist>(VSTINTERFACECALL *setParameterValueFunction)(VstEffectInterface *</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>float</name>
      <anchorfile>structVstEffectInterface.html</anchorfile>
      <anchor>a65aa6b56f9980d58ba246562c33c0369</anchor>
      <arglist>(VSTINTERFACECALL *getParameterValueFunction)(VstEffectInterface *</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>void</name>
      <anchorfile>structVstEffectInterface.html</anchorfile>
      <anchor>ae85c446270d65c9696afe526fcbc406f</anchor>
      <arglist>(VSTINTERFACECALL *processAudioInplaceFunction)(VstEffectInterface *</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>void</name>
      <anchorfile>structVstEffectInterface.html</anchorfile>
      <anchor>addc09c301d85a9d03c68db88a3e0cfe9</anchor>
      <arglist>(VSTINTERFACECALL *processDoubleAudioInplaceFunction)(VstEffectInterface *</arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>interfaceIdentifier</name>
      <anchorfile>structVstEffectInterface.html</anchorfile>
      <anchor>ae351b8d58b4b16522c439ce3ebab8416</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>op</name>
      <anchorfile>structVstEffectInterface.html</anchorfile>
      <anchor>ae9e2049d1a535490eab468bf76f2fb6a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32 int32</type>
      <name>index</name>
      <anchorfile>structVstEffectInterface.html</anchorfile>
      <anchor>a5a98c772a3c0208bd5473d687659f8cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32 int32 pointer_sized_int</type>
      <name>value</name>
      <anchorfile>structVstEffectInterface.html</anchorfile>
      <anchor>a591dbbcb35f42553eb4cbf4946351d17</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32 int32 pointer_sized_int void *</type>
      <name>ptr</name>
      <anchorfile>structVstEffectInterface.html</anchorfile>
      <anchor>aed63aa41c3d7c2a3d2c0f4a0f93bea00</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32 int32 pointer_sized_int void float</type>
      <name>opt</name>
      <anchorfile>structVstEffectInterface.html</anchorfile>
      <anchor>a36e28751deaa1754063cc51e631e2ceb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float **</type>
      <name>inputs</name>
      <anchorfile>structVstEffectInterface.html</anchorfile>
      <anchor>a2ecc279bc01e3d13897652824a79b73e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float float **</type>
      <name>outputs</name>
      <anchorfile>structVstEffectInterface.html</anchorfile>
      <anchor>a5ebc70cc07762f8d4c8dfb4763bf544a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float float int32</type>
      <name>numSamples</name>
      <anchorfile>structVstEffectInterface.html</anchorfile>
      <anchor>ac970732570cddccae4d23cd0b872caf8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>parameterIndex</name>
      <anchorfile>structVstEffectInterface.html</anchorfile>
      <anchor>a3fdc1488f3ddb5cd29c6689479e2464e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32 float</type>
      <name>value</name>
      <anchorfile>structVstEffectInterface.html</anchorfile>
      <anchor>a470a637124ae97572d63fb2d560e962f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>numPrograms</name>
      <anchorfile>structVstEffectInterface.html</anchorfile>
      <anchor>a087f8648fb02023b404103dbbe5d4f71</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>numParameters</name>
      <anchorfile>structVstEffectInterface.html</anchorfile>
      <anchor>a9c5633560023be629703b4cd2ca222cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>numInputChannels</name>
      <anchorfile>structVstEffectInterface.html</anchorfile>
      <anchor>a38d5de5960f5f03dc4648ca9d4c3ef03</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>numOutputChannels</name>
      <anchorfile>structVstEffectInterface.html</anchorfile>
      <anchor>ac394bd0098cd71163a972e68bc4f8eeb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>flags</name>
      <anchorfile>structVstEffectInterface.html</anchorfile>
      <anchor>acf39955cbc73a3284e2e2612c7f2b66b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>pointer_sized_int</type>
      <name>hostSpace1</name>
      <anchorfile>structVstEffectInterface.html</anchorfile>
      <anchor>a0bc8a098709dda309823550721946dc9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>pointer_sized_int</type>
      <name>hostSpace2</name>
      <anchorfile>structVstEffectInterface.html</anchorfile>
      <anchor>a975067dae9bb0c30dd52fcfbff8b48b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>latency</name>
      <anchorfile>structVstEffectInterface.html</anchorfile>
      <anchor>a03fb3be11cc3416b382eb092dbdada37</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>deprecated1</name>
      <anchorfile>structVstEffectInterface.html</anchorfile>
      <anchor>a9859af96b88c944d737a2baf8a01e515</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>deprecated2</name>
      <anchorfile>structVstEffectInterface.html</anchorfile>
      <anchor>aa9eff0029dae30e02adbf1c29e0d843e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>deprecated3</name>
      <anchorfile>structVstEffectInterface.html</anchorfile>
      <anchor>a2e9c653175ec7f7c95de88c04b00482c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>void *</type>
      <name>effectPointer</name>
      <anchorfile>structVstEffectInterface.html</anchorfile>
      <anchor>a67d40a1722792659726c7741a3b6107f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>void *</type>
      <name>userPointer</name>
      <anchorfile>structVstEffectInterface.html</anchorfile>
      <anchor>a7db1b0348d65cac7c855963c954e1d16</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>plugInIdentifier</name>
      <anchorfile>structVstEffectInterface.html</anchorfile>
      <anchor>aa8617cfe3bce43da592426965982a3a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>plugInVersion</name>
      <anchorfile>structVstEffectInterface.html</anchorfile>
      <anchor>a809663990fb61f3872fef8fec8da28b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double **</type>
      <name>inputs</name>
      <anchorfile>structVstEffectInterface.html</anchorfile>
      <anchor>a3b5b71680a1d73cdb912ef1f906c50f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double double **</type>
      <name>outputs</name>
      <anchorfile>structVstEffectInterface.html</anchorfile>
      <anchor>a1aca16208f4fa4da97dfb37b2b50e665</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double double int32</type>
      <name>numSamples</name>
      <anchorfile>structVstEffectInterface.html</anchorfile>
      <anchor>a49ce52db0a34a351997378edda751540</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>char</type>
      <name>emptySpace</name>
      <anchorfile>structVstEffectInterface.html</anchorfile>
      <anchor>ab15796ca33277d2a99efcb0adf402595</anchor>
      <arglist>[56]</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>VstEvent</name>
    <filename>structVstEvent.html</filename>
    <member kind="variable">
      <type>int32</type>
      <name>type</name>
      <anchorfile>structVstEvent.html</anchorfile>
      <anchor>a3f5e0926206224c1c4f0c0ee958b24cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>size</name>
      <anchorfile>structVstEvent.html</anchorfile>
      <anchor>a88a96238e749fc150be9027f295abb4f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>sampleOffset</name>
      <anchorfile>structVstEvent.html</anchorfile>
      <anchor>ada351de4bd1cf8cc35a5870e78059183</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>flags</name>
      <anchorfile>structVstEvent.html</anchorfile>
      <anchor>a1f96fd8c5dedbee89eccfe2ab090e322</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>char</type>
      <name>content</name>
      <anchorfile>structVstEvent.html</anchorfile>
      <anchor>a5552c09b4cd951732116aaab5ac32ea2</anchor>
      <arglist>[16]</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>VstEventBlock</name>
    <filename>structVstEventBlock.html</filename>
    <member kind="variable">
      <type>int32</type>
      <name>numberOfEvents</name>
      <anchorfile>structVstEventBlock.html</anchorfile>
      <anchor>a632581235197c06d1f23e436b514b45c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>pointer_sized_int</type>
      <name>future</name>
      <anchorfile>structVstEventBlock.html</anchorfile>
      <anchor>a71a259f1468b61bbfa138510304d1be7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>VstEvent *</type>
      <name>events</name>
      <anchorfile>structVstEventBlock.html</anchorfile>
      <anchor>ad61ca31c4fe6303cd4a16f75b02c1930</anchor>
      <arglist>[2]</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>VstIndividualSpeakerInfo</name>
    <filename>structVstIndividualSpeakerInfo.html</filename>
    <member kind="variable">
      <type>float</type>
      <name>azimuthalAngle</name>
      <anchorfile>structVstIndividualSpeakerInfo.html</anchorfile>
      <anchor>ae47451a4fda66a5045ebe000741538a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>elevationAngle</name>
      <anchorfile>structVstIndividualSpeakerInfo.html</anchorfile>
      <anchor>a8874c9f2022074295797aa549cc38815</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>radius</name>
      <anchorfile>structVstIndividualSpeakerInfo.html</anchorfile>
      <anchor>a87356e6e9f3144fb7cb38f946adbd283</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>reserved</name>
      <anchorfile>structVstIndividualSpeakerInfo.html</anchorfile>
      <anchor>a9451b4d87ce65d899f8df62cdf1b2f87</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>char</type>
      <name>label</name>
      <anchorfile>structVstIndividualSpeakerInfo.html</anchorfile>
      <anchor>aaf088212bd7f1ca3b8698bfd2d4416a4</anchor>
      <arglist>[vstMaxNameLength]</arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>type</name>
      <anchorfile>structVstIndividualSpeakerInfo.html</anchorfile>
      <anchor>a3ceb62875997521ce9e8eb1e08424d38</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>char</type>
      <name>unused</name>
      <anchorfile>structVstIndividualSpeakerInfo.html</anchorfile>
      <anchor>a54c14102662e7043a03cebdde5ff6e07</anchor>
      <arglist>[28]</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>VstMidiEvent</name>
    <filename>structVstMidiEvent.html</filename>
    <member kind="variable">
      <type>int32</type>
      <name>type</name>
      <anchorfile>structVstMidiEvent.html</anchorfile>
      <anchor>a867e72c73b7cf8a86eb214914424d9d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>size</name>
      <anchorfile>structVstMidiEvent.html</anchorfile>
      <anchor>a0c3bf3faa2785665830ad96d84d08437</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>sampleOffset</name>
      <anchorfile>structVstMidiEvent.html</anchorfile>
      <anchor>a5d9876128801a59a6c95c8ebb8694091</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>flags</name>
      <anchorfile>structVstMidiEvent.html</anchorfile>
      <anchor>aa8b3e36cfd5a1ad6746b56d3d93bc778</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>noteSampleLength</name>
      <anchorfile>structVstMidiEvent.html</anchorfile>
      <anchor>ab05e812352de38ce0fadd2cb6752f8b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>noteSampleOffset</name>
      <anchorfile>structVstMidiEvent.html</anchorfile>
      <anchor>a449bc7aed32445a29aa76230d769c724</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>char</type>
      <name>midiData</name>
      <anchorfile>structVstMidiEvent.html</anchorfile>
      <anchor>a41ed861e773854a165eff6cfcdfd046b</anchor>
      <arglist>[4]</arglist>
    </member>
    <member kind="variable">
      <type>char</type>
      <name>tuning</name>
      <anchorfile>structVstMidiEvent.html</anchorfile>
      <anchor>a22390ef9fc8fcb71cdbff78bd64b04b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>char</type>
      <name>noteVelocityOff</name>
      <anchorfile>structVstMidiEvent.html</anchorfile>
      <anchor>a398c5db7a5602ab677b10693bf436fb9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>char</type>
      <name>future1</name>
      <anchorfile>structVstMidiEvent.html</anchorfile>
      <anchor>a33dabf8e63280ca400793f9055fc54a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>char</type>
      <name>future2</name>
      <anchorfile>structVstMidiEvent.html</anchorfile>
      <anchor>adce10c803df5bf44c7c11bca398b728b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>VstPinInfo</name>
    <filename>structVstPinInfo.html</filename>
    <member kind="variable">
      <type>char</type>
      <name>text</name>
      <anchorfile>structVstPinInfo.html</anchorfile>
      <anchor>a12f35217329ac39b12b5ea270d4a41a0</anchor>
      <arglist>[vstMaxParameterOrPinLabelLength]</arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>flags</name>
      <anchorfile>structVstPinInfo.html</anchorfile>
      <anchor>a2cd0223c872fe00b11150eeb3e2b2bbf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>configurationType</name>
      <anchorfile>structVstPinInfo.html</anchorfile>
      <anchor>a9fbf0f53664c7a0417e9ada0deb50af7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>char</type>
      <name>shortText</name>
      <anchorfile>structVstPinInfo.html</anchorfile>
      <anchor>a6594139efae58014637f77d95f929151</anchor>
      <arglist>[vstMaxParameterOrPinShortLabelLength]</arglist>
    </member>
    <member kind="variable">
      <type>char</type>
      <name>unused</name>
      <anchorfile>structVstPinInfo.html</anchorfile>
      <anchor>adaddbb5da52dd0e4bb8618c1621a5618</anchor>
      <arglist>[48]</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>VSTPluginFormat</name>
    <filename>classVSTPluginFormat.html</filename>
    <base>AudioPluginFormat</base>
    <class kind="class">VSTPluginFormat::ExtraFunctions</class>
    <member kind="function">
      <type></type>
      <name>VSTPluginFormat</name>
      <anchorfile>classVSTPluginFormat.html</anchorfile>
      <anchor>a230a22c707a26dfa50984abef602fdb1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~VSTPluginFormat</name>
      <anchorfile>classVSTPluginFormat.html</anchorfile>
      <anchor>aecc3a4e0c100f9218576fb8453a5584e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>getName</name>
      <anchorfile>classVSTPluginFormat.html</anchorfile>
      <anchor>a9680cc54347b995fc441c719ed728c9f</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>findAllTypesForFile</name>
      <anchorfile>classVSTPluginFormat.html</anchorfile>
      <anchor>af6c88835c362d055ec0f0694ebb2a955</anchor>
      <arglist>(OwnedArray&lt; PluginDescription &gt; &amp;, const String &amp;fileOrIdentifier) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>fileMightContainThisPluginType</name>
      <anchorfile>classVSTPluginFormat.html</anchorfile>
      <anchor>a5df306afb3240d91d2bb625c1417a2b1</anchor>
      <arglist>(const String &amp;fileOrIdentifier) override</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>getNameOfPluginFromIdentifier</name>
      <anchorfile>classVSTPluginFormat.html</anchorfile>
      <anchor>a6648a0d278c9d478f8f747135a5f3647</anchor>
      <arglist>(const String &amp;fileOrIdentifier) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>pluginNeedsRescanning</name>
      <anchorfile>classVSTPluginFormat.html</anchorfile>
      <anchor>ad32bda96a56d730c92f4210c67d22b49</anchor>
      <arglist>(const PluginDescription &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>StringArray</type>
      <name>searchPathsForPlugins</name>
      <anchorfile>classVSTPluginFormat.html</anchorfile>
      <anchor>a00441ea3735da64f29f8d0a831ff4d75</anchor>
      <arglist>(const FileSearchPath &amp;, bool recursive, bool) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>doesPluginStillExist</name>
      <anchorfile>classVSTPluginFormat.html</anchorfile>
      <anchor>af9b0e6229cd8ab9ec72d8f59a8c4933a</anchor>
      <arglist>(const PluginDescription &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>FileSearchPath</type>
      <name>getDefaultLocationsToSearch</name>
      <anchorfile>classVSTPluginFormat.html</anchorfile>
      <anchor>ae4ee56ecef034f8faff1f01f8b6925e2</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>canScanForPlugins</name>
      <anchorfile>classVSTPluginFormat.html</anchorfile>
      <anchor>a342f0d02f21458198ef3e60f8f7356a1</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>aboutToScanVSTShellPlugin</name>
      <anchorfile>classVSTPluginFormat.html</anchorfile>
      <anchor>a6277efa1639b851939014d07ffcc84d4</anchor>
      <arglist>(const PluginDescription &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const XmlElement *</type>
      <name>getVSTXML</name>
      <anchorfile>classVSTPluginFormat.html</anchorfile>
      <anchor>a51c4b1390459ef66a84a00f285ef867c</anchor>
      <arglist>(AudioPluginInstance *plugin)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>loadFromFXBFile</name>
      <anchorfile>classVSTPluginFormat.html</anchorfile>
      <anchor>a2cda6559c2fa9cba7e0ada4ab00d5d53</anchor>
      <arglist>(AudioPluginInstance *plugin, const void *data, size_t dataSize)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>saveToFXBFile</name>
      <anchorfile>classVSTPluginFormat.html</anchorfile>
      <anchor>a603b66723d863b2dc90aecaafedb67ec</anchor>
      <arglist>(AudioPluginInstance *plugin, MemoryBlock &amp;result, bool asFXB)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>getChunkData</name>
      <anchorfile>classVSTPluginFormat.html</anchorfile>
      <anchor>a666e9aa327d8daaafa05b6b899166ff9</anchor>
      <arglist>(AudioPluginInstance *plugin, MemoryBlock &amp;result, bool isPreset)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>setChunkData</name>
      <anchorfile>classVSTPluginFormat.html</anchorfile>
      <anchor>a8b5889d7ff7035d196d28c694d8ea92e</anchor>
      <arglist>(AudioPluginInstance *plugin, const void *data, int size, bool isPreset)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static AudioPluginInstance *</type>
      <name>createCustomVSTFromMainCall</name>
      <anchorfile>classVSTPluginFormat.html</anchorfile>
      <anchor>a98069989fff10540f851c0d3ea954712</anchor>
      <arglist>(void *entryPointFunction, double initialSampleRate, int initialBufferSize)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setExtraFunctions</name>
      <anchorfile>classVSTPluginFormat.html</anchorfile>
      <anchor>afe200e4968fed595f981a77d20a4ab24</anchor>
      <arglist>(AudioPluginInstance *plugin, ExtraFunctions *functions)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static pointer_sized_int JUCE_CALLTYPE</type>
      <name>dispatcher</name>
      <anchorfile>classVSTPluginFormat.html</anchorfile>
      <anchor>a09eda3d23e195c8a8c57c9597877e841</anchor>
      <arglist>(AudioPluginInstance *, int32, int32, pointer_sized_int, void *, float)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static AudioPluginInstance *</type>
      <name>getPluginInstanceFromVstEffectInterface</name>
      <anchorfile>classVSTPluginFormat.html</anchorfile>
      <anchor>a089017dc83a3b622e7443411463f808b</anchor>
      <arglist>(void *aEffect)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>VSTPluginFormat::ExtraFunctions</name>
    <filename>classVSTPluginFormat_1_1ExtraFunctions.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ExtraFunctions</name>
      <anchorfile>classVSTPluginFormat_1_1ExtraFunctions.html</anchorfile>
      <anchor>a418480f384cbcf39594cc543a98e8a42</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int64</type>
      <name>getTempoAt</name>
      <anchorfile>classVSTPluginFormat_1_1ExtraFunctions.html</anchorfile>
      <anchor>a9fe43eb48637fd972832c109499dd219</anchor>
      <arglist>(int64 samplePos)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getAutomationState</name>
      <anchorfile>classVSTPluginFormat_1_1ExtraFunctions.html</anchorfile>
      <anchor>a0a20c85f9b9624c418c372463ab5dfe2</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>VstSpeakerConfiguration</name>
    <filename>structVstSpeakerConfiguration.html</filename>
    <member kind="variable">
      <type>int32</type>
      <name>type</name>
      <anchorfile>structVstSpeakerConfiguration.html</anchorfile>
      <anchor>a4d8f4e799763d44689ab1c975d2a5237</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>numberOfChannels</name>
      <anchorfile>structVstSpeakerConfiguration.html</anchorfile>
      <anchor>a913f35793ec17297ffd9a37ae4941451</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>VstIndividualSpeakerInfo</type>
      <name>speakers</name>
      <anchorfile>structVstSpeakerConfiguration.html</anchorfile>
      <anchor>a28435008442dd5cf9fbef564c439909c</anchor>
      <arglist>[8]</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>VstSysExEvent</name>
    <filename>structVstSysExEvent.html</filename>
    <member kind="variable">
      <type>int32</type>
      <name>type</name>
      <anchorfile>structVstSysExEvent.html</anchorfile>
      <anchor>aa4f508d8bea8f704f60d067220f8a806</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>size</name>
      <anchorfile>structVstSysExEvent.html</anchorfile>
      <anchor>a02cd1c87118b202814353a9f1def9893</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>offsetSamples</name>
      <anchorfile>structVstSysExEvent.html</anchorfile>
      <anchor>ad43001265f82b57361b5fb09630e1fb7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>flags</name>
      <anchorfile>structVstSysExEvent.html</anchorfile>
      <anchor>a08ea1e5531fc269c6380e7baffc48ede</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>sysExDumpSize</name>
      <anchorfile>structVstSysExEvent.html</anchorfile>
      <anchor>af9b5cada03e70a78282bf685aeaf772d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>pointer_sized_int</type>
      <name>future1</name>
      <anchorfile>structVstSysExEvent.html</anchorfile>
      <anchor>acb2a7f8415b2b777c293524db2ef1f9f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>char *</type>
      <name>sysExDump</name>
      <anchorfile>structVstSysExEvent.html</anchorfile>
      <anchor>a4d8386bf6d6e3a7fc73b1b53e9b2afdd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>pointer_sized_int</type>
      <name>future2</name>
      <anchorfile>structVstSysExEvent.html</anchorfile>
      <anchor>a9f6497897ac4298969a84c081a6740d9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>VstTimingInformation</name>
    <filename>structVstTimingInformation.html</filename>
    <member kind="variable">
      <type>double</type>
      <name>samplePosition</name>
      <anchorfile>structVstTimingInformation.html</anchorfile>
      <anchor>abf6de1ef403d9bef2113abcb5fa0f225</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>sampleRate</name>
      <anchorfile>structVstTimingInformation.html</anchorfile>
      <anchor>a1d1b2ff0de5a6592ff3cae35f2ecb074</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>systemTimeNanoseconds</name>
      <anchorfile>structVstTimingInformation.html</anchorfile>
      <anchor>aaefb55c281778d2f17b83ea731533c2b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>musicalPosition</name>
      <anchorfile>structVstTimingInformation.html</anchorfile>
      <anchor>aeca45f565ed1c0175beb01484cf3a0d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>tempoBPM</name>
      <anchorfile>structVstTimingInformation.html</anchorfile>
      <anchor>a3bcc7f25b018a22bac37742df5c50423</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>lastBarPosition</name>
      <anchorfile>structVstTimingInformation.html</anchorfile>
      <anchor>afab85f86fc6584df2d8eccda001187de</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>loopStartPosition</name>
      <anchorfile>structVstTimingInformation.html</anchorfile>
      <anchor>adb7114e1e3e246c6e657197ab55e76d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>loopEndPosition</name>
      <anchorfile>structVstTimingInformation.html</anchorfile>
      <anchor>a7d557ffa000284960dd44ae590a42164</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>timeSignatureNumerator</name>
      <anchorfile>structVstTimingInformation.html</anchorfile>
      <anchor>aa8160dac677e63d4c15dc7d879fa5569</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>timeSignatureDenominator</name>
      <anchorfile>structVstTimingInformation.html</anchorfile>
      <anchor>ab4129a54b37e92aba1c3696ac247c44e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>smpteOffset</name>
      <anchorfile>structVstTimingInformation.html</anchorfile>
      <anchor>a4a554821b95c4f7c36f02879e6b0dc0c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>smpteRate</name>
      <anchorfile>structVstTimingInformation.html</anchorfile>
      <anchor>a71be4caaa5f1317a8848776f6e82fa7b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>samplesToNearestClock</name>
      <anchorfile>structVstTimingInformation.html</anchorfile>
      <anchor>a4b9cf8cab894c646498eb50c6a489939</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>flags</name>
      <anchorfile>structVstTimingInformation.html</anchorfile>
      <anchor>a01c20f1f17aac71cdc137e09e839f506</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>WaitableEvent</name>
    <filename>classWaitableEvent.html</filename>
    <member kind="function">
      <type></type>
      <name>WaitableEvent</name>
      <anchorfile>classWaitableEvent.html</anchorfile>
      <anchor>aa3622062e48a177ec721120443ea17d2</anchor>
      <arglist>(bool manualReset=false) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~WaitableEvent</name>
      <anchorfile>classWaitableEvent.html</anchorfile>
      <anchor>af071eb054ec0ce9b69eb98bd9508c2cf</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>wait</name>
      <anchorfile>classWaitableEvent.html</anchorfile>
      <anchor>aade120bc7686f4fabfc740aff8f56dfa</anchor>
      <arglist>(int timeOutMilliseconds=-1) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>signal</name>
      <anchorfile>classWaitableEvent.html</anchorfile>
      <anchor>a9afdf2e8cb15c457a44e85af3bffbf72</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classWaitableEvent.html</anchorfile>
      <anchor>aa9b3db111ba17e13d5e74360367bcc9b</anchor>
      <arglist>() const noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>WavAudioFormat</name>
    <filename>classWavAudioFormat.html</filename>
    <base>AudioFormat</base>
    <member kind="function">
      <type></type>
      <name>WavAudioFormat</name>
      <anchorfile>classWavAudioFormat.html</anchorfile>
      <anchor>a79547799ef5300f2adf2390d0cb74982</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~WavAudioFormat</name>
      <anchorfile>classWavAudioFormat.html</anchorfile>
      <anchor>a95e94be65145788e4436237e41c5454f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Array&lt; int &gt;</type>
      <name>getPossibleSampleRates</name>
      <anchorfile>classWavAudioFormat.html</anchorfile>
      <anchor>aea72c2cdd3d3a4a9e2f028834caa4a91</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>Array&lt; int &gt;</type>
      <name>getPossibleBitDepths</name>
      <anchorfile>classWavAudioFormat.html</anchorfile>
      <anchor>adac43386becc1f4b75e46f18dc850547</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>canDoStereo</name>
      <anchorfile>classWavAudioFormat.html</anchorfile>
      <anchor>a379128571f07a3c6614bf552fc3a885f</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>canDoMono</name>
      <anchorfile>classWavAudioFormat.html</anchorfile>
      <anchor>a576e9afefe32af2c10aad440e5176506</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>AudioFormatReader *</type>
      <name>createReaderFor</name>
      <anchorfile>classWavAudioFormat.html</anchorfile>
      <anchor>ac885e9768656f2495134fe5e42419f8e</anchor>
      <arglist>(InputStream *sourceStream, bool deleteStreamIfOpeningFails) override</arglist>
    </member>
    <member kind="function">
      <type>MemoryMappedAudioFormatReader *</type>
      <name>createMemoryMappedReader</name>
      <anchorfile>classWavAudioFormat.html</anchorfile>
      <anchor>a33260ebc8cb8b358ca6d24a85c3ef1cc</anchor>
      <arglist>(const File &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>MemoryMappedAudioFormatReader *</type>
      <name>createMemoryMappedReader</name>
      <anchorfile>classWavAudioFormat.html</anchorfile>
      <anchor>afd00c047b6917927a94799bd8c97328b</anchor>
      <arglist>(FileInputStream *) override</arglist>
    </member>
    <member kind="function">
      <type>AudioFormatWriter *</type>
      <name>createWriterFor</name>
      <anchorfile>classWavAudioFormat.html</anchorfile>
      <anchor>a989d29b8ca1c28389700f0e5ee17b3ee</anchor>
      <arglist>(OutputStream *streamToWriteTo, double sampleRateToUse, unsigned int numberOfChannels, int bitsPerSample, const StringPairArray &amp;metadataValues, int qualityOptionIndex) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>replaceMetadataInFile</name>
      <anchorfile>classWavAudioFormat.html</anchorfile>
      <anchor>a1f6a333b084402d486af76d518971160</anchor>
      <arglist>(const File &amp;wavFile, const StringPairArray &amp;newMetadata)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StringPairArray</type>
      <name>createBWAVMetadata</name>
      <anchorfile>classWavAudioFormat.html</anchorfile>
      <anchor>af39c0f3786cc1fea9b8c502a7e0a24f7</anchor>
      <arglist>(const String &amp;description, const String &amp;originator, const String &amp;originatorRef, Time dateAndTime, int64 timeReferenceSamples, const String &amp;codingHistory)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char *const</type>
      <name>bwavDescription</name>
      <anchorfile>classWavAudioFormat.html</anchorfile>
      <anchor>a1b75b002a3b479b8f4b992a5e21f7076</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char *const</type>
      <name>bwavOriginator</name>
      <anchorfile>classWavAudioFormat.html</anchorfile>
      <anchor>aeb655b312ca07a2c89d6f1c86fe69455</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char *const</type>
      <name>bwavOriginatorRef</name>
      <anchorfile>classWavAudioFormat.html</anchorfile>
      <anchor>a678c3b819d78ea687ddba590a4e73891</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char *const</type>
      <name>bwavOriginationDate</name>
      <anchorfile>classWavAudioFormat.html</anchorfile>
      <anchor>a536849856a3e84afe84dded0feb921c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char *const</type>
      <name>bwavOriginationTime</name>
      <anchorfile>classWavAudioFormat.html</anchorfile>
      <anchor>a6ba890f1df411a643efe13d3b02ff130</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char *const</type>
      <name>bwavCodingHistory</name>
      <anchorfile>classWavAudioFormat.html</anchorfile>
      <anchor>a5e478da650f2e1fdb3f452e9e3c2e94f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char *const</type>
      <name>bwavTimeReference</name>
      <anchorfile>classWavAudioFormat.html</anchorfile>
      <anchor>a6722c8d061d70bbd7a843e4ac213d588</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char *const</type>
      <name>acidOneShot</name>
      <anchorfile>classWavAudioFormat.html</anchorfile>
      <anchor>ae721505f6c4a41e3e818785dafc4b5b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char *const</type>
      <name>acidRootSet</name>
      <anchorfile>classWavAudioFormat.html</anchorfile>
      <anchor>a1a41fd73c4b5cda2314cb18953804e11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char *const</type>
      <name>acidStretch</name>
      <anchorfile>classWavAudioFormat.html</anchorfile>
      <anchor>a2e7ca2a8981dd749b7eb8aff8fb3ef8a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char *const</type>
      <name>acidDiskBased</name>
      <anchorfile>classWavAudioFormat.html</anchorfile>
      <anchor>a4c61a1d9ec2824e8214953b5d2adfdcd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char *const</type>
      <name>acidizerFlag</name>
      <anchorfile>classWavAudioFormat.html</anchorfile>
      <anchor>a6202dd3c086eba513df9a38373fa1ca6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char *const</type>
      <name>acidRootNote</name>
      <anchorfile>classWavAudioFormat.html</anchorfile>
      <anchor>a896797520a0296a71bb5a90aa6eb9028</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char *const</type>
      <name>acidBeats</name>
      <anchorfile>classWavAudioFormat.html</anchorfile>
      <anchor>a4d3734a6e9790b4991519a4eacd0b15d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char *const</type>
      <name>acidDenominator</name>
      <anchorfile>classWavAudioFormat.html</anchorfile>
      <anchor>a82a015df3b8b51b3eed7be9c5064a40d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char *const</type>
      <name>acidNumerator</name>
      <anchorfile>classWavAudioFormat.html</anchorfile>
      <anchor>af1cf9b1cb347aee03897fbb3ff61587c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char *const</type>
      <name>acidTempo</name>
      <anchorfile>classWavAudioFormat.html</anchorfile>
      <anchor>ac534d5f34f226b43dd6c03387f9aa9a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char *const</type>
      <name>riffInfoArchivalLocation</name>
      <anchorfile>classWavAudioFormat.html</anchorfile>
      <anchor>aef07aaf5687376d1474c14cec59d8000</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char *const</type>
      <name>riffInfoArtist</name>
      <anchorfile>classWavAudioFormat.html</anchorfile>
      <anchor>add4f90364d7839ddcc7a0ce8cb511fc3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char *const</type>
      <name>riffInfoBaseURL</name>
      <anchorfile>classWavAudioFormat.html</anchorfile>
      <anchor>a4e2fdf5d072f3cb1409cea6afcd69aba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char *const</type>
      <name>riffInfoCinematographer</name>
      <anchorfile>classWavAudioFormat.html</anchorfile>
      <anchor>ade05c518170372bb379192de82f8e71d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char *const</type>
      <name>riffInfoComment</name>
      <anchorfile>classWavAudioFormat.html</anchorfile>
      <anchor>a759dc8a3cdb9b65abd02618b6e8db619</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char *const</type>
      <name>riffInfoComments</name>
      <anchorfile>classWavAudioFormat.html</anchorfile>
      <anchor>a98df291c5bf42a8c29a4bd9033af437a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char *const</type>
      <name>riffInfoCommissioned</name>
      <anchorfile>classWavAudioFormat.html</anchorfile>
      <anchor>a49588b1f708d26d943ae844f28f8e140</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char *const</type>
      <name>riffInfoCopyright</name>
      <anchorfile>classWavAudioFormat.html</anchorfile>
      <anchor>a8f19e1225e3c04c9d0306cda02c57f26</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char *const</type>
      <name>riffInfoCostumeDesigner</name>
      <anchorfile>classWavAudioFormat.html</anchorfile>
      <anchor>a84e7aafb8c2f125e6b471dfd7f28f486</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char *const</type>
      <name>riffInfoCountry</name>
      <anchorfile>classWavAudioFormat.html</anchorfile>
      <anchor>afe1729c2fcb1fa63663d2c45c5eca643</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char *const</type>
      <name>riffInfoCropped</name>
      <anchorfile>classWavAudioFormat.html</anchorfile>
      <anchor>a48acbd77e320d56fcb63940aede512ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char *const</type>
      <name>riffInfoDateCreated</name>
      <anchorfile>classWavAudioFormat.html</anchorfile>
      <anchor>a0cb2023c418dca1c305aa2754cf39b39</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char *const</type>
      <name>riffInfoDateTimeOriginal</name>
      <anchorfile>classWavAudioFormat.html</anchorfile>
      <anchor>a0383034d0caae6295c5316f9aee38714</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char *const</type>
      <name>riffInfoDefaultAudioStream</name>
      <anchorfile>classWavAudioFormat.html</anchorfile>
      <anchor>ac84cbe1bc51f0da88c3fa7ec909664ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char *const</type>
      <name>riffInfoDimension</name>
      <anchorfile>classWavAudioFormat.html</anchorfile>
      <anchor>a7c02b55f1abb0e4db3079b0524c888f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char *const</type>
      <name>riffInfoDirectory</name>
      <anchorfile>classWavAudioFormat.html</anchorfile>
      <anchor>a65fb0f01210e6439231bec2b4dcb6b09</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char *const</type>
      <name>riffInfoDistributedBy</name>
      <anchorfile>classWavAudioFormat.html</anchorfile>
      <anchor>af9640d316a88bb9b157a24cea7ec2ffb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char *const</type>
      <name>riffInfoDotsPerInch</name>
      <anchorfile>classWavAudioFormat.html</anchorfile>
      <anchor>a30f5c48c8a8ce5bb1aae1696955d7658</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char *const</type>
      <name>riffInfoEditedBy</name>
      <anchorfile>classWavAudioFormat.html</anchorfile>
      <anchor>a93a6b8ea6c807576c5503a87a9411b27</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char *const</type>
      <name>riffInfoEighthLanguage</name>
      <anchorfile>classWavAudioFormat.html</anchorfile>
      <anchor>a3aff156f20331fd931a0c90b47265114</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char *const</type>
      <name>riffInfoEncodedBy</name>
      <anchorfile>classWavAudioFormat.html</anchorfile>
      <anchor>a3fd56e5250a848d5f3ad008ebad59481</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char *const</type>
      <name>riffInfoEndTimecode</name>
      <anchorfile>classWavAudioFormat.html</anchorfile>
      <anchor>af6b16cb81b67d0806c2da9c8d488ac7b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char *const</type>
      <name>riffInfoEngineer</name>
      <anchorfile>classWavAudioFormat.html</anchorfile>
      <anchor>af4913aba3ff2940e2d10f56d6deded35</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char *const</type>
      <name>riffInfoFifthLanguage</name>
      <anchorfile>classWavAudioFormat.html</anchorfile>
      <anchor>af759d04d1f878427f7ad07e7986f5ddf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char *const</type>
      <name>riffInfoFirstLanguage</name>
      <anchorfile>classWavAudioFormat.html</anchorfile>
      <anchor>a14db6158e1242549db447216f66a3a28</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char *const</type>
      <name>riffInfoFourthLanguage</name>
      <anchorfile>classWavAudioFormat.html</anchorfile>
      <anchor>a3f5ccb371b9cbfb1144d6a0b46f57328</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char *const</type>
      <name>riffInfoGenre</name>
      <anchorfile>classWavAudioFormat.html</anchorfile>
      <anchor>afb5fa8bf485947e2aeeaf06d7255d497</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char *const</type>
      <name>riffInfoKeywords</name>
      <anchorfile>classWavAudioFormat.html</anchorfile>
      <anchor>ac03f03db082322f809a054f6bbe3e1a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char *const</type>
      <name>riffInfoLanguage</name>
      <anchorfile>classWavAudioFormat.html</anchorfile>
      <anchor>a8815b3f9045feeca743ff627c91ee45e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char *const</type>
      <name>riffInfoLength</name>
      <anchorfile>classWavAudioFormat.html</anchorfile>
      <anchor>a76b879ceb986f482ccb4a699d523776f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char *const</type>
      <name>riffInfoLightness</name>
      <anchorfile>classWavAudioFormat.html</anchorfile>
      <anchor>a6ab39231b22a7a5b5aee2809d647cd20</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char *const</type>
      <name>riffInfoLocation</name>
      <anchorfile>classWavAudioFormat.html</anchorfile>
      <anchor>a03ad8972d090a17d329156e1eda921dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char *const</type>
      <name>riffInfoLogoIconURL</name>
      <anchorfile>classWavAudioFormat.html</anchorfile>
      <anchor>acc9ea9271d2c79451e26109075168bd1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char *const</type>
      <name>riffInfoLogoURL</name>
      <anchorfile>classWavAudioFormat.html</anchorfile>
      <anchor>a1fa9fc14767335f8bdc07663bed15b73</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char *const</type>
      <name>riffInfoMedium</name>
      <anchorfile>classWavAudioFormat.html</anchorfile>
      <anchor>a8ff7eb34dbed5d47429496b9685db218</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char *const</type>
      <name>riffInfoMoreInfoBannerImage</name>
      <anchorfile>classWavAudioFormat.html</anchorfile>
      <anchor>aeddc4efae2f35a33b9a2cc6f68c77f23</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char *const</type>
      <name>riffInfoMoreInfoBannerURL</name>
      <anchorfile>classWavAudioFormat.html</anchorfile>
      <anchor>ac47484ec4e04ee21163c494f745594f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char *const</type>
      <name>riffInfoMoreInfoText</name>
      <anchorfile>classWavAudioFormat.html</anchorfile>
      <anchor>a979483f68078353aa9239342b4c0b1fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char *const</type>
      <name>riffInfoMoreInfoURL</name>
      <anchorfile>classWavAudioFormat.html</anchorfile>
      <anchor>afa4f82ac5d8c9586156b120cc8933495</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char *const</type>
      <name>riffInfoMusicBy</name>
      <anchorfile>classWavAudioFormat.html</anchorfile>
      <anchor>aea90ca2dd333d233fbcd92a1bfafca2b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char *const</type>
      <name>riffInfoNinthLanguage</name>
      <anchorfile>classWavAudioFormat.html</anchorfile>
      <anchor>af130af0bab732ded7e967a64d11342ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char *const</type>
      <name>riffInfoNumberOfParts</name>
      <anchorfile>classWavAudioFormat.html</anchorfile>
      <anchor>a174909703a37de860251df85c17d5c4b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char *const</type>
      <name>riffInfoOrganisation</name>
      <anchorfile>classWavAudioFormat.html</anchorfile>
      <anchor>abdef987938e3286a2b62a853d442e396</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char *const</type>
      <name>riffInfoPart</name>
      <anchorfile>classWavAudioFormat.html</anchorfile>
      <anchor>a27bebeabab6159a1627e1929485f3124</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char *const</type>
      <name>riffInfoProducedBy</name>
      <anchorfile>classWavAudioFormat.html</anchorfile>
      <anchor>a1076df5794cf433c8e0e0450d71cd96c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char *const</type>
      <name>riffInfoProductionDesigner</name>
      <anchorfile>classWavAudioFormat.html</anchorfile>
      <anchor>acf60b7c1db4977a59d7e13b65c3a7fd0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char *const</type>
      <name>riffInfoProductionStudio</name>
      <anchorfile>classWavAudioFormat.html</anchorfile>
      <anchor>a101f738b931d2068d9ec16e3fe69c3f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char *const</type>
      <name>riffInfoRate</name>
      <anchorfile>classWavAudioFormat.html</anchorfile>
      <anchor>a738b99975c3ee261b420494355b82de5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char *const</type>
      <name>riffInfoRated</name>
      <anchorfile>classWavAudioFormat.html</anchorfile>
      <anchor>a4f387b9d497ee212492e4a5c716a5783</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char *const</type>
      <name>riffInfoRating</name>
      <anchorfile>classWavAudioFormat.html</anchorfile>
      <anchor>a5d2ac599e559d5b217be8dca2e24957d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char *const</type>
      <name>riffInfoRippedBy</name>
      <anchorfile>classWavAudioFormat.html</anchorfile>
      <anchor>a168f969d48931e62eff63a26821ff9d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char *const</type>
      <name>riffInfoSecondaryGenre</name>
      <anchorfile>classWavAudioFormat.html</anchorfile>
      <anchor>a226aa8c7c3326aa4794c6b903d877a27</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char *const</type>
      <name>riffInfoSecondLanguage</name>
      <anchorfile>classWavAudioFormat.html</anchorfile>
      <anchor>a098584cd0a8eaabf55dc4185504565a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char *const</type>
      <name>riffInfoSeventhLanguage</name>
      <anchorfile>classWavAudioFormat.html</anchorfile>
      <anchor>a1458b88ea080209def48850ef6208f74</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char *const</type>
      <name>riffInfoSharpness</name>
      <anchorfile>classWavAudioFormat.html</anchorfile>
      <anchor>a1777a4a74cfd20598041f2ee3226fc6e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char *const</type>
      <name>riffInfoSixthLanguage</name>
      <anchorfile>classWavAudioFormat.html</anchorfile>
      <anchor>ad1c1706b40e9d7321e09e1ba19b2e65d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char *const</type>
      <name>riffInfoSoftware</name>
      <anchorfile>classWavAudioFormat.html</anchorfile>
      <anchor>a1a5098e29cc67a47672242043eae579d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char *const</type>
      <name>riffInfoSoundSchemeTitle</name>
      <anchorfile>classWavAudioFormat.html</anchorfile>
      <anchor>a08f307b1924a244e2e08c54abe017dd3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char *const</type>
      <name>riffInfoSource</name>
      <anchorfile>classWavAudioFormat.html</anchorfile>
      <anchor>a0e6802160fa890975a695d2155d93f9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char *const</type>
      <name>riffInfoSourceFrom</name>
      <anchorfile>classWavAudioFormat.html</anchorfile>
      <anchor>a719a75a45bee72d1335a7f801ba5e328</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char *const</type>
      <name>riffInfoStarring_ISTR</name>
      <anchorfile>classWavAudioFormat.html</anchorfile>
      <anchor>ae0d8a1900efd24ef0034afc41b5194de</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char *const</type>
      <name>riffInfoStarring_STAR</name>
      <anchorfile>classWavAudioFormat.html</anchorfile>
      <anchor>a9eaad0dfd49d42c9267df03179836ae4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char *const</type>
      <name>riffInfoStartTimecode</name>
      <anchorfile>classWavAudioFormat.html</anchorfile>
      <anchor>a9770a833fabf3e918e70398b1240c8ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char *const</type>
      <name>riffInfoStatistics</name>
      <anchorfile>classWavAudioFormat.html</anchorfile>
      <anchor>af386b1012879ed42fbe596cc78ee8ce3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char *const</type>
      <name>riffInfoSubject</name>
      <anchorfile>classWavAudioFormat.html</anchorfile>
      <anchor>a76e39bc7555f014984d38dca3e3894e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char *const</type>
      <name>riffInfoTapeName</name>
      <anchorfile>classWavAudioFormat.html</anchorfile>
      <anchor>aafc51a7e81e1612c059cb407ee5be300</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char *const</type>
      <name>riffInfoTechnician</name>
      <anchorfile>classWavAudioFormat.html</anchorfile>
      <anchor>a3de654ed4db4aac4180e964523fe22f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char *const</type>
      <name>riffInfoThirdLanguage</name>
      <anchorfile>classWavAudioFormat.html</anchorfile>
      <anchor>a00a475dca44eb3a84cf32007bff67b79</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char *const</type>
      <name>riffInfoTimeCode</name>
      <anchorfile>classWavAudioFormat.html</anchorfile>
      <anchor>a2538ca0eac9fca783ff984a7ebf1be84</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char *const</type>
      <name>riffInfoTitle</name>
      <anchorfile>classWavAudioFormat.html</anchorfile>
      <anchor>a2da916847a684739ab3aec385da740f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char *const</type>
      <name>riffInfoTrackNumber</name>
      <anchorfile>classWavAudioFormat.html</anchorfile>
      <anchor>a315ce7fa45fbee8c5805c40cbac0d1cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char *const</type>
      <name>riffInfoURL</name>
      <anchorfile>classWavAudioFormat.html</anchorfile>
      <anchor>a63e37c6adbe971535e7a91fa6477623c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char *const</type>
      <name>riffInfoVegasVersionMajor</name>
      <anchorfile>classWavAudioFormat.html</anchorfile>
      <anchor>afa85f13bf4f567e471e620aab716e119</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char *const</type>
      <name>riffInfoVegasVersionMinor</name>
      <anchorfile>classWavAudioFormat.html</anchorfile>
      <anchor>a1659ae9aa9a5d5eb827f8b336fc090ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char *const</type>
      <name>riffInfoVersion</name>
      <anchorfile>classWavAudioFormat.html</anchorfile>
      <anchor>a8282b9b25abb9f6cb37302fd3b02f83f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char *const</type>
      <name>riffInfoWatermarkURL</name>
      <anchorfile>classWavAudioFormat.html</anchorfile>
      <anchor>a6965a365ca073102fd96ba61046080d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char *const</type>
      <name>riffInfoWrittenBy</name>
      <anchorfile>classWavAudioFormat.html</anchorfile>
      <anchor>a3c3fac740a1a98be1795830207f99d6e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char *const</type>
      <name>riffInfoYear</name>
      <anchorfile>classWavAudioFormat.html</anchorfile>
      <anchor>a1e987faff09ae874c16120dcd0d13634</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char *const</type>
      <name>ISRC</name>
      <anchorfile>classWavAudioFormat.html</anchorfile>
      <anchor>a703e4f1a1ea014d652be4618f1114928</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char *const</type>
      <name>tracktionLoopInfo</name>
      <anchorfile>classWavAudioFormat.html</anchorfile>
      <anchor>a3ffa718b58838dc49c9bb5314b5373ae</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>WeakReference</name>
    <filename>classWeakReference.html</filename>
    <templarg>ObjectType</templarg>
    <templarg>ReferenceCountingType</templarg>
    <class kind="class">WeakReference::Master</class>
    <class kind="class">WeakReference::SharedPointer</class>
    <member kind="typedef">
      <type>ReferenceCountedObjectPtr&lt; SharedPointer &gt;</type>
      <name>SharedRef</name>
      <anchorfile>classWeakReference.html</anchorfile>
      <anchor>a3fd7e314186f261fc5be42b68dd0d16e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>WeakReference</name>
      <anchorfile>classWeakReference.html</anchorfile>
      <anchor>ae3208aa11ac7edae1816bc281113f4fa</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>WeakReference</name>
      <anchorfile>classWeakReference.html</anchorfile>
      <anchor>aa29f6ae9e71a8a61d9208f420405b7af</anchor>
      <arglist>(ObjectType *const object)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>WeakReference</name>
      <anchorfile>classWeakReference.html</anchorfile>
      <anchor>a1dd877a29a839b13a046411f5c68f235</anchor>
      <arglist>(const WeakReference &amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>WeakReference</name>
      <anchorfile>classWeakReference.html</anchorfile>
      <anchor>a7942f7ee23b8109f9fa591d25db7a810</anchor>
      <arglist>(WeakReference &amp;&amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>WeakReference &amp;</type>
      <name>operator=</name>
      <anchorfile>classWeakReference.html</anchorfile>
      <anchor>ab3634e0befe8b0f3d018c40a16ad8886</anchor>
      <arglist>(const WeakReference &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>WeakReference &amp;</type>
      <name>operator=</name>
      <anchorfile>classWeakReference.html</anchorfile>
      <anchor>a2136a1c31a335eac280a8201733e226e</anchor>
      <arglist>(ObjectType *const newObject)</arglist>
    </member>
    <member kind="function">
      <type>WeakReference &amp;</type>
      <name>operator=</name>
      <anchorfile>classWeakReference.html</anchorfile>
      <anchor>add70a516b5a5d1bb669d4122dd9fab07</anchor>
      <arglist>(WeakReference &amp;&amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>ObjectType *</type>
      <name>get</name>
      <anchorfile>classWeakReference.html</anchorfile>
      <anchor>a0c6e75034092864f959ed7a1389b0e98</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator ObjectType *</name>
      <anchorfile>classWeakReference.html</anchorfile>
      <anchor>a91892403a30e5fa2d85b5dfae9a8d93e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>ObjectType *</type>
      <name>operator-&gt;</name>
      <anchorfile>classWeakReference.html</anchorfile>
      <anchor>a047a1aebb9ada210bd5d0144df14df5c</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const ObjectType *</type>
      <name>operator-&gt;</name>
      <anchorfile>classWeakReference.html</anchorfile>
      <anchor>a5b50a2cf7ff9d5f91ffb4d5b027c7b0e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>wasObjectDeleted</name>
      <anchorfile>classWeakReference.html</anchorfile>
      <anchor>a523f66357f106bdf39cd5b49973b3177</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classWeakReference.html</anchorfile>
      <anchor>afbe33610764d2e40f4495f084d90f21c</anchor>
      <arglist>(ObjectType *const object) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classWeakReference.html</anchorfile>
      <anchor>a0a81cdfcb3a5aacdf4ae05e3c226fa29</anchor>
      <arglist>(ObjectType *const object) const noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>WeakReference::Master</name>
    <filename>classWeakReference_1_1Master.html</filename>
    <member kind="function">
      <type></type>
      <name>Master</name>
      <anchorfile>classWeakReference_1_1Master.html</anchorfile>
      <anchor>ac35b96def1f203376be1ef74310cb557</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Master</name>
      <anchorfile>classWeakReference_1_1Master.html</anchorfile>
      <anchor>a9fc11ef197bae4a674b18e4793bed161</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>SharedPointer *</type>
      <name>getSharedPointer</name>
      <anchorfile>classWeakReference_1_1Master.html</anchorfile>
      <anchor>a90365081e5448c6a7db4b5d21d877fed</anchor>
      <arglist>(ObjectType *const object)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classWeakReference_1_1Master.html</anchorfile>
      <anchor>aa542fc20038febb6e3bc0ed17ab9fcaf</anchor>
      <arglist>() noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>WeakReference::SharedPointer</name>
    <filename>classWeakReference_1_1SharedPointer.html</filename>
    <member kind="function">
      <type></type>
      <name>SharedPointer</name>
      <anchorfile>classWeakReference_1_1SharedPointer.html</anchorfile>
      <anchor>a55668b07c81143ebc4b06ab95f97febf</anchor>
      <arglist>(ObjectType *const obj) noexcept</arglist>
    </member>
    <member kind="function">
      <type>ObjectType *</type>
      <name>get</name>
      <anchorfile>classWeakReference_1_1SharedPointer.html</anchorfile>
      <anchor>ae27107ee4ef83cd552e95dcc783e0238</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearPointer</name>
      <anchorfile>classWeakReference_1_1SharedPointer.html</anchorfile>
      <anchor>a6e1786def84d6ce74d2befe690843f6a</anchor>
      <arglist>() noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>WebBrowserComponent</name>
    <filename>classWebBrowserComponent.html</filename>
    <base>Component</base>
    <member kind="function">
      <type></type>
      <name>WebBrowserComponent</name>
      <anchorfile>classWebBrowserComponent.html</anchorfile>
      <anchor>ad408275ac5ae9ec1e2f71d73fb0105ef</anchor>
      <arglist>(bool unloadPageWhenBrowserIsHidden=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~WebBrowserComponent</name>
      <anchorfile>classWebBrowserComponent.html</anchorfile>
      <anchor>a546611bb84448a775d7a519969d45ae7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>goToURL</name>
      <anchorfile>classWebBrowserComponent.html</anchorfile>
      <anchor>a703f3232f580d72125dea4db8e5a0512</anchor>
      <arglist>(const String &amp;url, const StringArray *headers=nullptr, const MemoryBlock *postData=nullptr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stop</name>
      <anchorfile>classWebBrowserComponent.html</anchorfile>
      <anchor>a5b95c6fcefc4448c9083b90983ce5729</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>goBack</name>
      <anchorfile>classWebBrowserComponent.html</anchorfile>
      <anchor>aa9d180ebeaadd482e1532aefc2298954</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>goForward</name>
      <anchorfile>classWebBrowserComponent.html</anchorfile>
      <anchor>acf6bdaec26fafd31aae196a4eff12a3a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>refresh</name>
      <anchorfile>classWebBrowserComponent.html</anchorfile>
      <anchor>ac0bd69ac52a95ae941b49308327de3d0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>pageAboutToLoad</name>
      <anchorfile>classWebBrowserComponent.html</anchorfile>
      <anchor>afff0d888a7a77a732f0ac1ca834bbd95</anchor>
      <arglist>(const String &amp;newURL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>pageFinishedLoading</name>
      <anchorfile>classWebBrowserComponent.html</anchorfile>
      <anchor>ad30ce73038359cfefd38c139ea77a21a</anchor>
      <arglist>(const String &amp;url)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>windowCloseRequest</name>
      <anchorfile>classWebBrowserComponent.html</anchorfile>
      <anchor>a94f735f686b6c55ba5e5996763517b8d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>newWindowAttemptingToLoad</name>
      <anchorfile>classWebBrowserComponent.html</anchorfile>
      <anchor>a3d441e5a7f31ea77ac0a013482de4442</anchor>
      <arglist>(const String &amp;newURL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>paint</name>
      <anchorfile>classWebBrowserComponent.html</anchorfile>
      <anchor>a45057a2af002dee5e327faa6d3576d19</anchor>
      <arglist>(Graphics &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resized</name>
      <anchorfile>classWebBrowserComponent.html</anchorfile>
      <anchor>a5cb3ce4059be47375aa3e25836277ccc</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>parentHierarchyChanged</name>
      <anchorfile>classWebBrowserComponent.html</anchorfile>
      <anchor>aebd1e2e27af2ff9ee86ae459f2a0d406</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visibilityChanged</name>
      <anchorfile>classWebBrowserComponent.html</anchorfile>
      <anchor>ad268bcdb0288fdba6fbeb5023532ccfa</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>focusGained</name>
      <anchorfile>classWebBrowserComponent.html</anchorfile>
      <anchor>af0353e28029daad4a95144e0a7706c84</anchor>
      <arglist>(FocusChangeType) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>WebInputStream</name>
    <filename>classWebInputStream.html</filename>
    <base>InputStream</base>
    <class kind="class">WebInputStream::Listener</class>
    <member kind="function">
      <type></type>
      <name>WebInputStream</name>
      <anchorfile>classWebInputStream.html</anchorfile>
      <anchor>a2f30da9ebe33b3334db185ec278ddc2f</anchor>
      <arglist>(const URL &amp;url, const bool usePost)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~WebInputStream</name>
      <anchorfile>classWebInputStream.html</anchorfile>
      <anchor>ace9b7bc9a70fdea2958fcde05272efe5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>WebInputStream &amp;</type>
      <name>withExtraHeaders</name>
      <anchorfile>classWebInputStream.html</anchorfile>
      <anchor>a4c075b67eef07cc01fbedf2239e5c554</anchor>
      <arglist>(const String &amp;extraHeaders)</arglist>
    </member>
    <member kind="function">
      <type>WebInputStream &amp;</type>
      <name>withCustomRequestCommand</name>
      <anchorfile>classWebInputStream.html</anchorfile>
      <anchor>ad549934b2f76cca031884ee1d94de3b9</anchor>
      <arglist>(const String &amp;customRequestCommand)</arglist>
    </member>
    <member kind="function">
      <type>WebInputStream &amp;</type>
      <name>withConnectionTimeout</name>
      <anchorfile>classWebInputStream.html</anchorfile>
      <anchor>a5d133d24ee00156754f2dab302181e51</anchor>
      <arglist>(int timeoutInMs)</arglist>
    </member>
    <member kind="function">
      <type>WebInputStream &amp;</type>
      <name>withNumRedirectsToFollow</name>
      <anchorfile>classWebInputStream.html</anchorfile>
      <anchor>a92243aa6a009c32aad744b986cd71082</anchor>
      <arglist>(int numRedirects)</arglist>
    </member>
    <member kind="function">
      <type>StringPairArray</type>
      <name>getRequestHeaders</name>
      <anchorfile>classWebInputStream.html</anchorfile>
      <anchor>a5316dbb6216b75a25020515bb846130b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>StringPairArray</type>
      <name>getResponseHeaders</name>
      <anchorfile>classWebInputStream.html</anchorfile>
      <anchor>a0ee598b0627aacd5c63050e54c8fbf93</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getStatusCode</name>
      <anchorfile>classWebInputStream.html</anchorfile>
      <anchor>aa0e03a9176ed0cbbe72f56237371b9f2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>connect</name>
      <anchorfile>classWebInputStream.html</anchorfile>
      <anchor>abe8920cdc15843c44228c267db3e85db</anchor>
      <arglist>(Listener *listener)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isError</name>
      <anchorfile>classWebInputStream.html</anchorfile>
      <anchor>a712eeee765d70cadb643a6ac6881606c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cancel</name>
      <anchorfile>classWebInputStream.html</anchorfile>
      <anchor>a869177c8fa6d75013e0a0ab46c1da9b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>getTotalLength</name>
      <anchorfile>classWebInputStream.html</anchorfile>
      <anchor>a443038879b96a8181b1cb5cb0d0db22f</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>read</name>
      <anchorfile>classWebInputStream.html</anchorfile>
      <anchor>a2735a5061e4ad8de89179b29aa8336c2</anchor>
      <arglist>(void *destBuffer, int maxBytesToRead) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isExhausted</name>
      <anchorfile>classWebInputStream.html</anchorfile>
      <anchor>ac28dd3c4784b189bf7e32ad0fd5f75e6</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>getPosition</name>
      <anchorfile>classWebInputStream.html</anchorfile>
      <anchor>a16c44044d3bb9e2cb69431e8f634f059</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setPosition</name>
      <anchorfile>classWebInputStream.html</anchorfile>
      <anchor>a5c452e8463fe81843daee042a12bb0d8</anchor>
      <arglist>(int64 wantedPos) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>WebInputStream::Listener</name>
    <filename>classWebInputStream_1_1Listener.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Listener</name>
      <anchorfile>classWebInputStream_1_1Listener.html</anchorfile>
      <anchor>ac63915e9eb1b1f490f8c23db6a4748fe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>postDataSendProgress</name>
      <anchorfile>classWebInputStream_1_1Listener.html</anchorfile>
      <anchor>ac2f826ff4af47e9b9c9ef64aa631eee8</anchor>
      <arglist>(WebInputStream &amp;, int, int)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Whirlpool</name>
    <filename>classWhirlpool.html</filename>
    <member kind="function">
      <type></type>
      <name>Whirlpool</name>
      <anchorfile>classWhirlpool.html</anchorfile>
      <anchor>a711fb3d064cf976bf071c6afea710c83</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Whirlpool</name>
      <anchorfile>classWhirlpool.html</anchorfile>
      <anchor>a12c58afcee2504dfe807e8c427f04eb7</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Whirlpool</name>
      <anchorfile>classWhirlpool.html</anchorfile>
      <anchor>ab3c03a14e073e41247d5a097a1fcf8a5</anchor>
      <arglist>(const Whirlpool &amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Whirlpool &amp;</type>
      <name>operator=</name>
      <anchorfile>classWhirlpool.html</anchorfile>
      <anchor>a5f5f0459f46624993722b4613eee06f5</anchor>
      <arglist>(const Whirlpool &amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Whirlpool</name>
      <anchorfile>classWhirlpool.html</anchorfile>
      <anchor>adc06969df526879455851d371f2ee605</anchor>
      <arglist>(const MemoryBlock &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Whirlpool</name>
      <anchorfile>classWhirlpool.html</anchorfile>
      <anchor>a3d40ef6a28312edcb893c5b2e6edd790</anchor>
      <arglist>(const void *data, size_t numBytes)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Whirlpool</name>
      <anchorfile>classWhirlpool.html</anchorfile>
      <anchor>a0a88f91d763b0fe929d83822879963bb</anchor>
      <arglist>(InputStream &amp;input, int64 maxBytesToRead=-1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Whirlpool</name>
      <anchorfile>classWhirlpool.html</anchorfile>
      <anchor>a905cda849e162a90174e62abd843949a</anchor>
      <arglist>(const File &amp;file)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Whirlpool</name>
      <anchorfile>classWhirlpool.html</anchorfile>
      <anchor>ae51ef7593b4f1528c6653a4ebe752907</anchor>
      <arglist>(CharPointer_UTF8 utf8Text) noexcept</arglist>
    </member>
    <member kind="function">
      <type>MemoryBlock</type>
      <name>getRawData</name>
      <anchorfile>classWhirlpool.html</anchorfile>
      <anchor>afde699152a9adfcd214ffbeec85c66d7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>toHexString</name>
      <anchorfile>classWhirlpool.html</anchorfile>
      <anchor>a252e2a3a0a9922e7f65f0a6868ddfa00</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classWhirlpool.html</anchorfile>
      <anchor>ac1fb2d3cb2f86c09c9d50d3bdda8b9df</anchor>
      <arglist>(const Whirlpool &amp;) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classWhirlpool.html</anchorfile>
      <anchor>a6077a65d35a7b30d23a5b0c02cbddab8</anchor>
      <arglist>(const Whirlpool &amp;) const noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>WildcardFileFilter</name>
    <filename>classWildcardFileFilter.html</filename>
    <base>FileFilter</base>
    <member kind="function">
      <type></type>
      <name>WildcardFileFilter</name>
      <anchorfile>classWildcardFileFilter.html</anchorfile>
      <anchor>af1f0c501f518c2dd803e77661fb42b9d</anchor>
      <arglist>(const String &amp;fileWildcardPatterns, const String &amp;directoryWildcardPatterns, const String &amp;description)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~WildcardFileFilter</name>
      <anchorfile>classWildcardFileFilter.html</anchorfile>
      <anchor>a64858d78dbf60590b6144856c491c053</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isFileSuitable</name>
      <anchorfile>classWildcardFileFilter.html</anchorfile>
      <anchor>a1fa4b87edf5245e563d382fda26d90c1</anchor>
      <arglist>(const File &amp;file) const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isDirectorySuitable</name>
      <anchorfile>classWildcardFileFilter.html</anchorfile>
      <anchor>a862de4e34c9b7152d369a2e2076e917a</anchor>
      <arglist>(const File &amp;file) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>WindowsMediaAudioFormat</name>
    <filename>classWindowsMediaAudioFormat.html</filename>
    <base>AudioFormat</base>
    <member kind="function">
      <type></type>
      <name>WindowsMediaAudioFormat</name>
      <anchorfile>classWindowsMediaAudioFormat.html</anchorfile>
      <anchor>a5ee8404f972e60f9396233690df54aa6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~WindowsMediaAudioFormat</name>
      <anchorfile>classWindowsMediaAudioFormat.html</anchorfile>
      <anchor>a08708926b20fe6e2b7545ae9eead9fd5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Array&lt; int &gt;</type>
      <name>getPossibleSampleRates</name>
      <anchorfile>classWindowsMediaAudioFormat.html</anchorfile>
      <anchor>a93c1c4036d20662f0fc407e8818e3c79</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>Array&lt; int &gt;</type>
      <name>getPossibleBitDepths</name>
      <anchorfile>classWindowsMediaAudioFormat.html</anchorfile>
      <anchor>ab99e0e06912c6c6908a38b3c10fae126</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>canDoStereo</name>
      <anchorfile>classWindowsMediaAudioFormat.html</anchorfile>
      <anchor>a775fe13cb7b4bef6c13dd10c74661c23</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>canDoMono</name>
      <anchorfile>classWindowsMediaAudioFormat.html</anchorfile>
      <anchor>a00fbc75bec5de51e5c7a65dc1c324cb5</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isCompressed</name>
      <anchorfile>classWindowsMediaAudioFormat.html</anchorfile>
      <anchor>a918b34df9fc4618125db89e565cc50d6</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>AudioFormatReader *</type>
      <name>createReaderFor</name>
      <anchorfile>classWindowsMediaAudioFormat.html</anchorfile>
      <anchor>a345ffefc3156cdc4f8b3aa394302dd4a</anchor>
      <arglist>(InputStream *, bool deleteStreamIfOpeningFails) override</arglist>
    </member>
    <member kind="function">
      <type>AudioFormatWriter *</type>
      <name>createWriterFor</name>
      <anchorfile>classWindowsMediaAudioFormat.html</anchorfile>
      <anchor>ac16354b5fb6f61705aefb50715a35a17</anchor>
      <arglist>(OutputStream *, double sampleRateToUse, unsigned int numberOfChannels, int bitsPerSample, const StringPairArray &amp;metadataValues, int qualityOptionIndex) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>WindowsRegistry</name>
    <filename>classWindowsRegistry.html</filename>
    <member kind="enumeration">
      <type></type>
      <name>WoW64Mode</name>
      <anchorfile>classWindowsRegistry.html</anchorfile>
      <anchor>a7d8812634430aef14423cd2d70cf38d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>WoW64_Default</name>
      <anchorfile>classWindowsRegistry.html</anchorfile>
      <anchor>a7d8812634430aef14423cd2d70cf38d8ac64c622861f18a7c0ac143c846587549</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>WoW64_64bit</name>
      <anchorfile>classWindowsRegistry.html</anchorfile>
      <anchor>a7d8812634430aef14423cd2d70cf38d8a216baef47232c42bf5733088982e27cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>WoW64_32bit</name>
      <anchorfile>classWindowsRegistry.html</anchorfile>
      <anchor>a7d8812634430aef14423cd2d70cf38d8aebdad7d4910de1d81c338585cc3b3500</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>JUCE_DEPRECATED</name>
      <anchorfile>classWindowsRegistry.html</anchorfile>
      <anchor>a702a124405a217d59d1ba349e1d9240c</anchor>
      <arglist>(static String getValueWow64(const String &amp;, const String &amp;defaultValue=String()))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>JUCE_DEPRECATED</name>
      <anchorfile>classWindowsRegistry.html</anchorfile>
      <anchor>a3a8cc59b6411ebb5fa9aeecc318ac6c2</anchor>
      <arglist>(static bool valueExistsWow64(const String &amp;))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>JUCE_DEPRECATED</name>
      <anchorfile>classWindowsRegistry.html</anchorfile>
      <anchor>ad627b5f99afcdc066f055c239630493b</anchor>
      <arglist>(static bool keyExistsWow64(const String &amp;))</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static String JUCE_CALLTYPE</type>
      <name>getValue</name>
      <anchorfile>classWindowsRegistry.html</anchorfile>
      <anchor>a6321310aee641a7fe24d94efbafd9661</anchor>
      <arglist>(const String &amp;regValuePath, const String &amp;defaultValue=String(), WoW64Mode mode=WoW64_Default)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static uint32 JUCE_CALLTYPE</type>
      <name>getBinaryValue</name>
      <anchorfile>classWindowsRegistry.html</anchorfile>
      <anchor>a1906cab952584448e891560a7458b012</anchor>
      <arglist>(const String &amp;regValuePath, MemoryBlock &amp;resultData, WoW64Mode mode=WoW64_Default)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool JUCE_CALLTYPE</type>
      <name>setValue</name>
      <anchorfile>classWindowsRegistry.html</anchorfile>
      <anchor>a915f5ead2b555b2ceab8df8963feee11</anchor>
      <arglist>(const String &amp;regValuePath, const String &amp;value, WoW64Mode mode=WoW64_Default)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool JUCE_CALLTYPE</type>
      <name>setValue</name>
      <anchorfile>classWindowsRegistry.html</anchorfile>
      <anchor>ac8e25b1714ab34efe9cd8ab2de7101d1</anchor>
      <arglist>(const String &amp;regValuePath, uint32 value, WoW64Mode mode=WoW64_Default)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool JUCE_CALLTYPE</type>
      <name>setValue</name>
      <anchorfile>classWindowsRegistry.html</anchorfile>
      <anchor>aba2e0051d2d8e1b300c055e5a5ce9135</anchor>
      <arglist>(const String &amp;regValuePath, uint64 value, WoW64Mode mode=WoW64_Default)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool JUCE_CALLTYPE</type>
      <name>setValue</name>
      <anchorfile>classWindowsRegistry.html</anchorfile>
      <anchor>ad61a38cd15eb395b5dc2e5ac9b3de582</anchor>
      <arglist>(const String &amp;regValuePath, const MemoryBlock &amp;value, WoW64Mode mode=WoW64_Default)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool JUCE_CALLTYPE</type>
      <name>valueExists</name>
      <anchorfile>classWindowsRegistry.html</anchorfile>
      <anchor>a35e53113b989cdb4b18c15690f2f16bc</anchor>
      <arglist>(const String &amp;regValuePath, WoW64Mode mode=WoW64_Default)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool JUCE_CALLTYPE</type>
      <name>keyExists</name>
      <anchorfile>classWindowsRegistry.html</anchorfile>
      <anchor>a0d58ee97b4dfd8fab8e1d8949d308fe0</anchor>
      <arglist>(const String &amp;regValuePath, WoW64Mode mode=WoW64_Default)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void JUCE_CALLTYPE</type>
      <name>deleteValue</name>
      <anchorfile>classWindowsRegistry.html</anchorfile>
      <anchor>a263ce2b622765b60a1357a279099a783</anchor>
      <arglist>(const String &amp;regValuePath, WoW64Mode mode=WoW64_Default)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void JUCE_CALLTYPE</type>
      <name>deleteKey</name>
      <anchorfile>classWindowsRegistry.html</anchorfile>
      <anchor>a9393883c4ec4502ceedf1f88abbb95d6</anchor>
      <arglist>(const String &amp;regKeyPath, WoW64Mode mode=WoW64_Default)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool JUCE_CALLTYPE</type>
      <name>registerFileAssociation</name>
      <anchorfile>classWindowsRegistry.html</anchorfile>
      <anchor>a5a8df4745ee474d3ac6cdd9efc02ad95</anchor>
      <arglist>(const String &amp;fileExtension, const String &amp;symbolicDescription, const String &amp;fullDescription, const File &amp;targetExecutable, int iconResourceNumber, bool registerForCurrentUserOnly, WoW64Mode mode=WoW64_Default)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>XmlDocument</name>
    <filename>classXmlDocument.html</filename>
    <member kind="function">
      <type></type>
      <name>XmlDocument</name>
      <anchorfile>classXmlDocument.html</anchorfile>
      <anchor>a87ad794c62c8ee9ac78961af99b2f30d</anchor>
      <arglist>(const String &amp;documentText)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>XmlDocument</name>
      <anchorfile>classXmlDocument.html</anchorfile>
      <anchor>a0bb84c6d5a591e3ab53199b081766901</anchor>
      <arglist>(const File &amp;file)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~XmlDocument</name>
      <anchorfile>classXmlDocument.html</anchorfile>
      <anchor>ab18742228f580a5e4ec87e4b39c8a68c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>XmlElement *</type>
      <name>getDocumentElement</name>
      <anchorfile>classXmlDocument.html</anchorfile>
      <anchor>a95252ae0d6c2f228065d5503507b0131</anchor>
      <arglist>(bool onlyReadOuterDocumentElement=false)</arglist>
    </member>
    <member kind="function">
      <type>const String &amp;</type>
      <name>getLastParseError</name>
      <anchorfile>classXmlDocument.html</anchorfile>
      <anchor>a54a186bd3e51c86b7c9a7edbcfe97bc7</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setInputSource</name>
      <anchorfile>classXmlDocument.html</anchorfile>
      <anchor>aa89d5cf6602e6d3d1506f36fd17e3c3c</anchor>
      <arglist>(InputSource *newSource) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEmptyTextElementsIgnored</name>
      <anchorfile>classXmlDocument.html</anchorfile>
      <anchor>a96421df16677c4e4c838383516d37f28</anchor>
      <arglist>(bool shouldBeIgnored) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static XmlElement *</type>
      <name>parse</name>
      <anchorfile>classXmlDocument.html</anchorfile>
      <anchor>ae14f9fc62e978ce7246922a84a568f20</anchor>
      <arglist>(const File &amp;file)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static XmlElement *</type>
      <name>parse</name>
      <anchorfile>classXmlDocument.html</anchorfile>
      <anchor>a359a74301cbb56b9cbbaa635a4bf66bf</anchor>
      <arglist>(const String &amp;xmlData)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>XmlElement</name>
    <filename>classXmlElement.html</filename>
    <member kind="function">
      <type></type>
      <name>XmlElement</name>
      <anchorfile>classXmlElement.html</anchorfile>
      <anchor>a3a8f5f328633c9ec5f0348651b0d2c23</anchor>
      <arglist>(const String &amp;tagName)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>XmlElement</name>
      <anchorfile>classXmlElement.html</anchorfile>
      <anchor>aae219dda5c0411eb558592e996567b74</anchor>
      <arglist>(const char *tagName)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>XmlElement</name>
      <anchorfile>classXmlElement.html</anchorfile>
      <anchor>a649430da34dccaa98c0527747d0ddb36</anchor>
      <arglist>(const Identifier &amp;tagName)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>XmlElement</name>
      <anchorfile>classXmlElement.html</anchorfile>
      <anchor>aeece56bb7c3754e62b85ba1f4c702e3e</anchor>
      <arglist>(StringRef tagName)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>XmlElement</name>
      <anchorfile>classXmlElement.html</anchorfile>
      <anchor>af496514d389fa99aec13605725a028b0</anchor>
      <arglist>(String::CharPointerType tagNameBegin, String::CharPointerType tagNameEnd)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>XmlElement</name>
      <anchorfile>classXmlElement.html</anchorfile>
      <anchor>a604980b35f37a37c635fd606ebe25682</anchor>
      <arglist>(const XmlElement &amp;)</arglist>
    </member>
    <member kind="function">
      <type>XmlElement &amp;</type>
      <name>operator=</name>
      <anchorfile>classXmlElement.html</anchorfile>
      <anchor>a1d2e9b40ed58be8da92502a67281cb56</anchor>
      <arglist>(const XmlElement &amp;)</arglist>
    </member>
    <member kind="function">
      <type>XmlElement &amp;</type>
      <name>operator=</name>
      <anchorfile>classXmlElement.html</anchorfile>
      <anchor>a7ab771486a0d289bdcd93798a6b87f0c</anchor>
      <arglist>(XmlElement &amp;&amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>XmlElement</name>
      <anchorfile>classXmlElement.html</anchorfile>
      <anchor>ac23c46e9d48743726322323d03a768a4</anchor>
      <arglist>(XmlElement &amp;&amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~XmlElement</name>
      <anchorfile>classXmlElement.html</anchorfile>
      <anchor>a07d66d0ced63876ca8d1aecfd2cd7ef9</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEquivalentTo</name>
      <anchorfile>classXmlElement.html</anchorfile>
      <anchor>ac970d556bc59579feb6e1b0035240c8d</anchor>
      <arglist>(const XmlElement *other, bool ignoreOrderOfAttributes) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>createDocument</name>
      <anchorfile>classXmlElement.html</anchorfile>
      <anchor>a3282b5048a08d67f284cd2293ee092f2</anchor>
      <arglist>(StringRef dtdToUse, bool allOnOneLine=false, bool includeXmlHeader=true, StringRef encodingType=&quot;UTF-8&quot;, int lineWrapLength=60) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeToStream</name>
      <anchorfile>classXmlElement.html</anchorfile>
      <anchor>aa2a1180499bea2d95a7f2a4513150ce6</anchor>
      <arglist>(OutputStream &amp;output, StringRef dtdToUse, bool allOnOneLine=false, bool includeXmlHeader=true, StringRef encodingType=&quot;UTF-8&quot;, int lineWrapLength=60) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>writeToFile</name>
      <anchorfile>classXmlElement.html</anchorfile>
      <anchor>a27446ca8db9cfcb4aab87e385ef0fa94</anchor>
      <arglist>(const File &amp;destinationFile, StringRef dtdToUse, StringRef encodingType=&quot;UTF-8&quot;, int lineWrapLength=60) const </arglist>
    </member>
    <member kind="function">
      <type>const String &amp;</type>
      <name>getTagName</name>
      <anchorfile>classXmlElement.html</anchorfile>
      <anchor>a42763c064fcc57c24f0a4ec3c7de7b5c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>getNamespace</name>
      <anchorfile>classXmlElement.html</anchorfile>
      <anchor>ac326197bbbbef41c3b40edc2c626fc7e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>getTagNameWithoutNamespace</name>
      <anchorfile>classXmlElement.html</anchorfile>
      <anchor>a181e055d21cb5802c707da33ac9b8edc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasTagName</name>
      <anchorfile>classXmlElement.html</anchorfile>
      <anchor>ac50bc4ce0db92b84baf4baf1b9c4de1d</anchor>
      <arglist>(StringRef possibleTagName) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasTagNameIgnoringNamespace</name>
      <anchorfile>classXmlElement.html</anchorfile>
      <anchor>a3a14c450d566b629dd34a2186a40e3ed</anchor>
      <arglist>(StringRef possibleTagName) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumAttributes</name>
      <anchorfile>classXmlElement.html</anchorfile>
      <anchor>aded3baadd37f11ed7d60a44954c7ae95</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const String &amp;</type>
      <name>getAttributeName</name>
      <anchorfile>classXmlElement.html</anchorfile>
      <anchor>ac11bcda22a4f9715095f9cef47139df0</anchor>
      <arglist>(int attributeIndex) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const String &amp;</type>
      <name>getAttributeValue</name>
      <anchorfile>classXmlElement.html</anchorfile>
      <anchor>a1c61f83b2e6bf7b9bafbb29659d0dda0</anchor>
      <arglist>(int attributeIndex) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasAttribute</name>
      <anchorfile>classXmlElement.html</anchorfile>
      <anchor>a261f32c557ef6c15b20ebe622ed8aec1</anchor>
      <arglist>(StringRef attributeName) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const String &amp;</type>
      <name>getStringAttribute</name>
      <anchorfile>classXmlElement.html</anchorfile>
      <anchor>aeb012fe1fc09863559024329ff2594c3</anchor>
      <arglist>(StringRef attributeName) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>getStringAttribute</name>
      <anchorfile>classXmlElement.html</anchorfile>
      <anchor>a4d9aff17918e819bb49997d562a2cd6e</anchor>
      <arglist>(StringRef attributeName, const String &amp;defaultReturnValue) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>compareAttribute</name>
      <anchorfile>classXmlElement.html</anchorfile>
      <anchor>a4d0e6bce34a26492d709b4f63da6af51</anchor>
      <arglist>(StringRef attributeName, StringRef stringToCompareAgainst, bool ignoreCase=false) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getIntAttribute</name>
      <anchorfile>classXmlElement.html</anchorfile>
      <anchor>a0ff8c7916a824435e9678b58e564950c</anchor>
      <arglist>(StringRef attributeName, int defaultReturnValue=0) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getDoubleAttribute</name>
      <anchorfile>classXmlElement.html</anchorfile>
      <anchor>aaa998085c9eb1e3b7d41c814d4c064dc</anchor>
      <arglist>(StringRef attributeName, double defaultReturnValue=0.0) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getBoolAttribute</name>
      <anchorfile>classXmlElement.html</anchorfile>
      <anchor>a3a525ba3154f7477865037011260cba5</anchor>
      <arglist>(StringRef attributeName, bool defaultReturnValue=false) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAttribute</name>
      <anchorfile>classXmlElement.html</anchorfile>
      <anchor>a25c2ba53866bb25809fd189578de1105</anchor>
      <arglist>(const Identifier &amp;attributeName, const String &amp;newValue)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAttribute</name>
      <anchorfile>classXmlElement.html</anchorfile>
      <anchor>a0c01d23c2c7c165e4984c93c9c98bf8f</anchor>
      <arglist>(const Identifier &amp;attributeName, int newValue)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAttribute</name>
      <anchorfile>classXmlElement.html</anchorfile>
      <anchor>aeb23805831ea08261ad8e9e2442e2a11</anchor>
      <arglist>(const Identifier &amp;attributeName, double newValue)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeAttribute</name>
      <anchorfile>classXmlElement.html</anchorfile>
      <anchor>a5ae4479d33c784716542766ce39ff805</anchor>
      <arglist>(const Identifier &amp;attributeName) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeAllAttributes</name>
      <anchorfile>classXmlElement.html</anchorfile>
      <anchor>a461b3fbfd94164b716774272fe784ec5</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>XmlElement *</type>
      <name>getFirstChildElement</name>
      <anchorfile>classXmlElement.html</anchorfile>
      <anchor>aa8ac386908cc0c1b5c1cc76bb9f6cc7c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>XmlElement *</type>
      <name>getNextElement</name>
      <anchorfile>classXmlElement.html</anchorfile>
      <anchor>a427991d7a5a39811a6a9b35fefe624bc</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>XmlElement *</type>
      <name>getNextElementWithTagName</name>
      <anchorfile>classXmlElement.html</anchorfile>
      <anchor>a23f0ba74f1a1d4885f61cd667427a04a</anchor>
      <arglist>(StringRef requiredTagName) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumChildElements</name>
      <anchorfile>classXmlElement.html</anchorfile>
      <anchor>a6de1fb43a8b1a33677f095becb212bca</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>XmlElement *</type>
      <name>getChildElement</name>
      <anchorfile>classXmlElement.html</anchorfile>
      <anchor>ab450f0049f7ff864024ca58550a2c7b9</anchor>
      <arglist>(int index) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>XmlElement *</type>
      <name>getChildByName</name>
      <anchorfile>classXmlElement.html</anchorfile>
      <anchor>aff1a5bef06210af0dae0819b550ecb3d</anchor>
      <arglist>(StringRef tagNameToLookFor) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>XmlElement *</type>
      <name>getChildByAttribute</name>
      <anchorfile>classXmlElement.html</anchorfile>
      <anchor>abba7899068b3758ad5eb61e15f2e395e</anchor>
      <arglist>(StringRef attributeName, StringRef attributeValue) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addChildElement</name>
      <anchorfile>classXmlElement.html</anchorfile>
      <anchor>a9b9735dd8a98c5af71db4c532cd10a1c</anchor>
      <arglist>(XmlElement *newChildElement) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insertChildElement</name>
      <anchorfile>classXmlElement.html</anchorfile>
      <anchor>a09bf0f9afa11f1c458b40762b440a6e5</anchor>
      <arglist>(XmlElement *newChildElement, int indexToInsertAt) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>prependChildElement</name>
      <anchorfile>classXmlElement.html</anchorfile>
      <anchor>a4f2edc311084f9faab33c0c310a6915e</anchor>
      <arglist>(XmlElement *newChildElement) noexcept</arglist>
    </member>
    <member kind="function">
      <type>XmlElement *</type>
      <name>createNewChildElement</name>
      <anchorfile>classXmlElement.html</anchorfile>
      <anchor>a4bceee5b8c8667dd08b03755aaeed548</anchor>
      <arglist>(StringRef tagName)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>replaceChildElement</name>
      <anchorfile>classXmlElement.html</anchorfile>
      <anchor>a37bfa0575b47295b7d689369e4982310</anchor>
      <arglist>(XmlElement *currentChildElement, XmlElement *newChildNode) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeChildElement</name>
      <anchorfile>classXmlElement.html</anchorfile>
      <anchor>ab1a572007f8cef5199dce0b5abc57f01</anchor>
      <arglist>(XmlElement *childToRemove, bool shouldDeleteTheChild) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deleteAllChildElements</name>
      <anchorfile>classXmlElement.html</anchorfile>
      <anchor>a258f03dbe9872a8f6bf7f47733cd4db8</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deleteAllChildElementsWithTagName</name>
      <anchorfile>classXmlElement.html</anchorfile>
      <anchor>a0579a6747cbcf736ebf60f12075daedd</anchor>
      <arglist>(StringRef tagName) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>containsChildElement</name>
      <anchorfile>classXmlElement.html</anchorfile>
      <anchor>a83e444ac0092392de6402eb8f04ddd49</anchor>
      <arglist>(const XmlElement *possibleChild) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>XmlElement *</type>
      <name>findParentElementOf</name>
      <anchorfile>classXmlElement.html</anchorfile>
      <anchor>a4698c6ddd258ef3e95d03fb6906e2411</anchor>
      <arglist>(const XmlElement *childToSearchFor) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sortChildElements</name>
      <anchorfile>classXmlElement.html</anchorfile>
      <anchor>a0a5c64bdc8e58f153a83a028829354f0</anchor>
      <arglist>(ElementComparator &amp;comparator, bool retainOrderOfEquivalentItems=false)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isTextElement</name>
      <anchorfile>classXmlElement.html</anchorfile>
      <anchor>a9fe9798ad1997c993ee35d7580a6189e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const String &amp;</type>
      <name>getText</name>
      <anchorfile>classXmlElement.html</anchorfile>
      <anchor>a5f834fecdf2afe9292a7f3e6259761fe</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setText</name>
      <anchorfile>classXmlElement.html</anchorfile>
      <anchor>ad0c14d8e9d0378e8a468e3d28067dde9</anchor>
      <arglist>(const String &amp;newText)</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>getAllSubText</name>
      <anchorfile>classXmlElement.html</anchorfile>
      <anchor>a79d99d209ef3001df66a85b3cd401689</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>getChildElementAllSubText</name>
      <anchorfile>classXmlElement.html</anchorfile>
      <anchor>a205674164a44c162aa0cb202167c13e0</anchor>
      <arglist>(StringRef childTagName, const String &amp;defaultReturnValue) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addTextElement</name>
      <anchorfile>classXmlElement.html</anchorfile>
      <anchor>aea61ae26c5c1e71f9119dd9dffac4f0d</anchor>
      <arglist>(const String &amp;text)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deleteAllTextElements</name>
      <anchorfile>classXmlElement.html</anchorfile>
      <anchor>ad321a686465bf21ae7eb785b76d5e352</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static XmlElement *</type>
      <name>createTextElement</name>
      <anchorfile>classXmlElement.html</anchorfile>
      <anchor>ab768aee16a1cf791bd6c61cc2abbe01b</anchor>
      <arglist>(const String &amp;text)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isValidXmlName</name>
      <anchorfile>classXmlElement.html</anchorfile>
      <anchor>a3801695cf0ab99652fecc47edcaeb80a</anchor>
      <arglist>(StringRef possibleName) noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>XmlTokeniser</name>
    <filename>classXmlTokeniser.html</filename>
    <base>CodeTokeniser</base>
    <member kind="enumeration">
      <type></type>
      <name>TokenType</name>
      <anchorfile>classXmlTokeniser.html</anchorfile>
      <anchor>a1d3dd4eb8d41b8e03bececf10cc11f10</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>tokenType_error</name>
      <anchorfile>classXmlTokeniser.html</anchorfile>
      <anchor>a1d3dd4eb8d41b8e03bececf10cc11f10a27981ed066bdf13560f3a9c470280e77</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>tokenType_comment</name>
      <anchorfile>classXmlTokeniser.html</anchorfile>
      <anchor>a1d3dd4eb8d41b8e03bececf10cc11f10a950cd5bac9b6262a96c905a51cbdda3f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>tokenType_keyword</name>
      <anchorfile>classXmlTokeniser.html</anchorfile>
      <anchor>a1d3dd4eb8d41b8e03bececf10cc11f10a32d4460563279d5f3b4b432b467d2cbe</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>tokenType_operator</name>
      <anchorfile>classXmlTokeniser.html</anchorfile>
      <anchor>a1d3dd4eb8d41b8e03bececf10cc11f10a51df088f856ca218b1b32e6dda4d6355</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>tokenType_identifier</name>
      <anchorfile>classXmlTokeniser.html</anchorfile>
      <anchor>a1d3dd4eb8d41b8e03bececf10cc11f10a501219eaf76670fa5fa293746d56637d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>tokenType_string</name>
      <anchorfile>classXmlTokeniser.html</anchorfile>
      <anchor>a1d3dd4eb8d41b8e03bececf10cc11f10a9baee952bd1bbafc1d115c9d3d2d0de1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>tokenType_bracket</name>
      <anchorfile>classXmlTokeniser.html</anchorfile>
      <anchor>a1d3dd4eb8d41b8e03bececf10cc11f10a0baae31f181064431acf17fc6b7068b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>tokenType_punctuation</name>
      <anchorfile>classXmlTokeniser.html</anchorfile>
      <anchor>a1d3dd4eb8d41b8e03bececf10cc11f10a739ca24f832586c4b6c1d0b484009468</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>tokenType_preprocessor</name>
      <anchorfile>classXmlTokeniser.html</anchorfile>
      <anchor>a1d3dd4eb8d41b8e03bececf10cc11f10ad70abc5adfe15447d8c845486248b441</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>XmlTokeniser</name>
      <anchorfile>classXmlTokeniser.html</anchorfile>
      <anchor>a1eb68f27d7f5a8dbec9107fd9358df93</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~XmlTokeniser</name>
      <anchorfile>classXmlTokeniser.html</anchorfile>
      <anchor>ae16c9c07d9a802a2e8f2282c298ddbd5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>readNextToken</name>
      <anchorfile>classXmlTokeniser.html</anchorfile>
      <anchor>a42365141d4931acfb1e6e44bdc99824f</anchor>
      <arglist>(CodeDocument::Iterator &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>CodeEditorComponent::ColourScheme</type>
      <name>getDefaultColourScheme</name>
      <anchorfile>classXmlTokeniser.html</anchorfile>
      <anchor>a7145895e7c05ae54e4389cb954521d88</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ZipFile</name>
    <filename>classZipFile.html</filename>
    <class kind="class">ZipFile::Builder</class>
    <class kind="struct">ZipFile::ZipEntry</class>
    <member kind="function">
      <type></type>
      <name>ZipFile</name>
      <anchorfile>classZipFile.html</anchorfile>
      <anchor>aed7c61ad49b425119915544015dab3e8</anchor>
      <arglist>(const File &amp;file)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ZipFile</name>
      <anchorfile>classZipFile.html</anchorfile>
      <anchor>a8b251067cc8a29f88eeaf02dfe0e3658</anchor>
      <arglist>(InputStream *inputStream, bool deleteStreamWhenDestroyed)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ZipFile</name>
      <anchorfile>classZipFile.html</anchorfile>
      <anchor>aafe1b3e2329e6af9c318d03d3aa88704</anchor>
      <arglist>(InputStream &amp;inputStream)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ZipFile</name>
      <anchorfile>classZipFile.html</anchorfile>
      <anchor>aaaa0dfb96daf669363ef206b48cf889b</anchor>
      <arglist>(InputSource *inputSource)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ZipFile</name>
      <anchorfile>classZipFile.html</anchorfile>
      <anchor>a748c38101270b6e3856738f8ca02c357</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumEntries</name>
      <anchorfile>classZipFile.html</anchorfile>
      <anchor>a33219c1047e6061a6835e5381dc0f06a</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const ZipEntry *</type>
      <name>getEntry</name>
      <anchorfile>classZipFile.html</anchorfile>
      <anchor>a7168a5f54bed9f81e006f4f1ba880bf5</anchor>
      <arglist>(int index) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getIndexOfFileName</name>
      <anchorfile>classZipFile.html</anchorfile>
      <anchor>ae828c6862f8a8305b5c3aca0a42417cf</anchor>
      <arglist>(const String &amp;fileName) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const ZipEntry *</type>
      <name>getEntry</name>
      <anchorfile>classZipFile.html</anchorfile>
      <anchor>a6e0686509a027efcce8adba4ec7b0044</anchor>
      <arglist>(const String &amp;fileName) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sortEntriesByFilename</name>
      <anchorfile>classZipFile.html</anchorfile>
      <anchor>af33762dfb0bbe8ac0973d239eba4a376</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>InputStream *</type>
      <name>createStreamForEntry</name>
      <anchorfile>classZipFile.html</anchorfile>
      <anchor>a5cf25194d5a64e2bd0f4cb7b06262fc3</anchor>
      <arglist>(int index)</arglist>
    </member>
    <member kind="function">
      <type>InputStream *</type>
      <name>createStreamForEntry</name>
      <anchorfile>classZipFile.html</anchorfile>
      <anchor>a510549a79f1c552162839c7aa69286a4</anchor>
      <arglist>(const ZipEntry &amp;entry)</arglist>
    </member>
    <member kind="function">
      <type>Result</type>
      <name>uncompressTo</name>
      <anchorfile>classZipFile.html</anchorfile>
      <anchor>a4d8bc0a4215a9464886909e527946155</anchor>
      <arglist>(const File &amp;targetDirectory, bool shouldOverwriteFiles=true)</arglist>
    </member>
    <member kind="function">
      <type>Result</type>
      <name>uncompressEntry</name>
      <anchorfile>classZipFile.html</anchorfile>
      <anchor>aa7a3e0db6aa5d2cb75028251501e4dfc</anchor>
      <arglist>(int index, const File &amp;targetDirectory, bool shouldOverwriteFiles=true)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ZipFile::Builder</name>
    <filename>classZipFile_1_1Builder.html</filename>
    <member kind="function">
      <type></type>
      <name>Builder</name>
      <anchorfile>classZipFile_1_1Builder.html</anchorfile>
      <anchor>a06cc76fa5f6df7e172409267fe37cbf5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Builder</name>
      <anchorfile>classZipFile_1_1Builder.html</anchorfile>
      <anchor>af57eaa53c5b996d60bc2854b6c73abd6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addFile</name>
      <anchorfile>classZipFile_1_1Builder.html</anchorfile>
      <anchor>a278af3ba8d510e7895109af905a9c67f</anchor>
      <arglist>(const File &amp;fileToAdd, int compressionLevel, const String &amp;storedPathName=String())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addEntry</name>
      <anchorfile>classZipFile_1_1Builder.html</anchorfile>
      <anchor>a9d857ec4293d11dba0dc717eb0187e6e</anchor>
      <arglist>(InputStream *streamToRead, int compressionLevel, const String &amp;storedPathName, Time fileModificationTime)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>writeToStream</name>
      <anchorfile>classZipFile_1_1Builder.html</anchorfile>
      <anchor>a006051857dded0b5df8844c7f09f94d4</anchor>
      <arglist>(OutputStream &amp;target, double *progress) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ZipFile::ZipEntry</name>
    <filename>structZipFile_1_1ZipEntry.html</filename>
    <member kind="variable">
      <type>String</type>
      <name>filename</name>
      <anchorfile>structZipFile_1_1ZipEntry.html</anchorfile>
      <anchor>a77663bd8a97be2fbc840693ac653e78b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int64</type>
      <name>uncompressedSize</name>
      <anchorfile>structZipFile_1_1ZipEntry.html</anchorfile>
      <anchor>aaf153ce5a5d4918a7dabfba87afdff03</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Time</type>
      <name>fileTime</name>
      <anchorfile>structZipFile_1_1ZipEntry.html</anchorfile>
      <anchor>ae4ba65278656cea2fdf56636fa0c8476</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>AnimatedPositionBehaviours</name>
    <filename>namespaceAnimatedPositionBehaviours.html</filename>
    <class kind="struct">AnimatedPositionBehaviours::ContinuousWithMomentum</class>
    <class kind="struct">AnimatedPositionBehaviours::SnapToPageBoundaries</class>
  </compound>
  <compound kind="struct">
    <name>AnimatedPositionBehaviours::ContinuousWithMomentum</name>
    <filename>structAnimatedPositionBehaviours_1_1ContinuousWithMomentum.html</filename>
    <member kind="function">
      <type></type>
      <name>ContinuousWithMomentum</name>
      <anchorfile>structAnimatedPositionBehaviours_1_1ContinuousWithMomentum.html</anchorfile>
      <anchor>a0fe187cf2dac5caa82480526de09fa3d</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFriction</name>
      <anchorfile>structAnimatedPositionBehaviours_1_1ContinuousWithMomentum.html</anchorfile>
      <anchor>a6fa86d2cbe42cc93f23953e52b7f0379</anchor>
      <arglist>(double newFriction) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>releasedWithVelocity</name>
      <anchorfile>structAnimatedPositionBehaviours_1_1ContinuousWithMomentum.html</anchorfile>
      <anchor>a3a1b118982769764a7f8bac990f27864</anchor>
      <arglist>(double, double releaseVelocity) noexcept</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getNextPosition</name>
      <anchorfile>structAnimatedPositionBehaviours_1_1ContinuousWithMomentum.html</anchorfile>
      <anchor>a16d266033e4e27a8ce623c3fa3e9451b</anchor>
      <arglist>(double oldPos, double elapsedSeconds) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isStopped</name>
      <anchorfile>structAnimatedPositionBehaviours_1_1ContinuousWithMomentum.html</anchorfile>
      <anchor>aed34233b1cdcb1209bdc8be591d6d1cc</anchor>
      <arglist>(double) const noexcept</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>AnimatedPositionBehaviours::SnapToPageBoundaries</name>
    <filename>structAnimatedPositionBehaviours_1_1SnapToPageBoundaries.html</filename>
    <member kind="function">
      <type></type>
      <name>SnapToPageBoundaries</name>
      <anchorfile>structAnimatedPositionBehaviours_1_1SnapToPageBoundaries.html</anchorfile>
      <anchor>a49794763e241b40eeb4f3bdf4398f2f3</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>releasedWithVelocity</name>
      <anchorfile>structAnimatedPositionBehaviours_1_1SnapToPageBoundaries.html</anchorfile>
      <anchor>a737d83a519008a8ba97c22d5aba1f3f7</anchor>
      <arglist>(double position, double releaseVelocity) noexcept</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getNextPosition</name>
      <anchorfile>structAnimatedPositionBehaviours_1_1SnapToPageBoundaries.html</anchorfile>
      <anchor>a3755bc9143605779b866be157b7946c5</anchor>
      <arglist>(double oldPos, double elapsedSeconds) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isStopped</name>
      <anchorfile>structAnimatedPositionBehaviours_1_1SnapToPageBoundaries.html</anchorfile>
      <anchor>a1724d4b5ccb5bb2822aa277637d60bc0</anchor>
      <arglist>(double position) const noexcept</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>juce</name>
    <filename>namespacejuce.html</filename>
    <namespace>juce::littlefoot</namespace>
    <class kind="class">juce::Block</class>
    <class kind="class">juce::TouchSurface</class>
    <class kind="struct">juce::LEDColour</class>
    <class kind="class">juce::LEDGrid</class>
    <class kind="class">juce::LEDRow</class>
    <class kind="class">juce::ControlButton</class>
    <class kind="class">juce::TouchList</class>
    <class kind="class">juce::StatusLight</class>
    <class kind="struct">juce::BlockDeviceConnection</class>
    <class kind="struct">juce::BlockTopology</class>
    <class kind="class">juce::TopologySource</class>
    <class kind="class">juce::PhysicalTopologySource</class>
    <class kind="class">juce::RuleBasedTopologySource</class>
    <class kind="struct">juce::DrumPadGridProgram</class>
    <class kind="struct">juce::BitmapLEDProgram</class>
    <class kind="class">juce::OSCTypes</class>
    <class kind="struct">juce::OSCException</class>
    <class kind="struct">juce::OSCFormatError</class>
    <class kind="struct">juce::OSCInternalError</class>
    <class kind="class">juce::OSCTimeTag</class>
    <class kind="class">juce::OSCArgument</class>
    <class kind="class">juce::OSCAddress</class>
    <class kind="class">juce::OSCAddressPattern</class>
    <class kind="class">juce::OSCMessage</class>
    <class kind="class">juce::OSCBundle</class>
    <class kind="class">juce::OSCReceiver</class>
    <class kind="class">juce::OSCSender</class>
    <member kind="typedef">
      <type>char</type>
      <name>OSCType</name>
      <anchorfile>namespacejuce.html</anchorfile>
      <anchor>a9badb0acd9b91a759d7f355e36f4ee6c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Array&lt; OSCType &gt;</type>
      <name>OSCTypeList</name>
      <anchorfile>namespacejuce.html</anchorfile>
      <anchor>a1e6393bb8a679e0a45c80ee34b534a1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>repostCurrentNSEvent</name>
      <anchorfile>namespacejuce.html</anchorfile>
      <anchor>a0ff23bf31b8954b2b6d62f3bb543c048</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const PluginHostType &amp;</type>
      <name>getHostType</name>
      <anchorfile>namespacejuce.html</anchorfile>
      <anchor>aac8f4243feb65824717064a710249b8e</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>juce::Block</name>
    <filename>classjuce_1_1Block.html</filename>
    <class kind="struct">juce::Block::ConnectionPort</class>
    <class kind="struct">juce::Block::DataInputPortListener</class>
    <member kind="enumeration">
      <type></type>
      <name>Type</name>
      <anchorfile>classjuce_1_1Block.html</anchorfile>
      <anchor>a1c008a40f29753a54bce01d6b95fbb50</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>unknown</name>
      <anchorfile>classjuce_1_1Block.html</anchorfile>
      <anchor>a1c008a40f29753a54bce01d6b95fbb50a71c72aefa6467752e1dc8d0a4c204f3a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>lightPadBlock</name>
      <anchorfile>classjuce_1_1Block.html</anchorfile>
      <anchor>a1c008a40f29753a54bce01d6b95fbb50a6ce1e8ab778f488d4e3f789791a6e226</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>liveBlock</name>
      <anchorfile>classjuce_1_1Block.html</anchorfile>
      <anchor>a1c008a40f29753a54bce01d6b95fbb50ab709c5f5e52bbc172c13fb3915e74805</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>loopBlock</name>
      <anchorfile>classjuce_1_1Block.html</anchorfile>
      <anchor>a1c008a40f29753a54bce01d6b95fbb50aec2015fec0d1ddcf4ae8093544d5932c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>developerControlBlock</name>
      <anchorfile>classjuce_1_1Block.html</anchorfile>
      <anchor>a1c008a40f29753a54bce01d6b95fbb50a7a2fb0f1f22978da9cf46906be459a45</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>seaboardBlock</name>
      <anchorfile>classjuce_1_1Block.html</anchorfile>
      <anchor>a1c008a40f29753a54bce01d6b95fbb50a1bad053a7c7817b45c03330ff907fae0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>juce::ReferenceCountedObjectPtr&lt; Block &gt;</type>
      <name>Ptr</name>
      <anchorfile>classjuce_1_1Block.html</anchorfile>
      <anchor>a5c25615c8b5409c54765a1dd5419df52</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>juce::ReferenceCountedArray&lt; Block &gt;</type>
      <name>Array</name>
      <anchorfile>classjuce_1_1Block.html</anchorfile>
      <anchor>a84c7bdb4a957727bc5dbf30fd8a10bdf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>uint64</type>
      <name>UID</name>
      <anchorfile>classjuce_1_1Block.html</anchorfile>
      <anchor>a0083bcd745755b891f0e53e8a32633f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>uint32</type>
      <name>Timestamp</name>
      <anchorfile>classjuce_1_1Block.html</anchorfile>
      <anchor>a77e545e3e498b7a7fa142cf795bbb5e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Block</name>
      <anchorfile>classjuce_1_1Block.html</anchorfile>
      <anchor>ab7c30b4226a981f2e50c7a0e95041fea</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Type</type>
      <name>getType</name>
      <anchorfile>classjuce_1_1Block.html</anchorfile>
      <anchor>a2cae61a2c0d15a0290e993f149e1a383</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual juce::String</type>
      <name>getDeviceDescription</name>
      <anchorfile>classjuce_1_1Block.html</anchorfile>
      <anchor>a3398cf431ca040814eb0fd0e75ec9cc7</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual float</type>
      <name>getBatteryLevel</name>
      <anchorfile>classjuce_1_1Block.html</anchorfile>
      <anchor>afc8dc82db822a2effc68ab7ba781462a</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isBatteryCharging</name>
      <anchorfile>classjuce_1_1Block.html</anchorfile>
      <anchor>aaa51b645411bd7a7b273a90ef28001a9</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isConnected</name>
      <anchorfile>classjuce_1_1Block.html</anchorfile>
      <anchor>ab0c68bedde4e035d3be7c9895961ad03</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isMasterBlock</name>
      <anchorfile>classjuce_1_1Block.html</anchorfile>
      <anchor>aa8b460ba656c0ef28958a7df3d693703</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getWidth</name>
      <anchorfile>classjuce_1_1Block.html</anchorfile>
      <anchor>af8277f18e6f6ad11945e4890171e99a5</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getHeight</name>
      <anchorfile>classjuce_1_1Block.html</anchorfile>
      <anchor>a61e1131540824438ddaea4084be17293</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isHardwareBlock</name>
      <anchorfile>classjuce_1_1Block.html</anchorfile>
      <anchor>aa73acd8a6b3eb218ec1efda04c0c571b</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual float</type>
      <name>getMillimetersPerUnit</name>
      <anchorfile>classjuce_1_1Block.html</anchorfile>
      <anchor>a6f4faab03f3063b080287580b85fc771</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual LEDGrid *</type>
      <name>getLEDGrid</name>
      <anchorfile>classjuce_1_1Block.html</anchorfile>
      <anchor>aaba9e53db45c6184eb0569e48fce97af</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual LEDRow *</type>
      <name>getLEDRow</name>
      <anchorfile>classjuce_1_1Block.html</anchorfile>
      <anchor>a9a66e77092b4e14656a30511727764a6</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual juce::Array&lt; StatusLight * &gt;</type>
      <name>getStatusLights</name>
      <anchorfile>classjuce_1_1Block.html</anchorfile>
      <anchor>a327fdf6d02bc51225b81b2dc9a47a6b5</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual TouchSurface *</type>
      <name>getTouchSurface</name>
      <anchorfile>classjuce_1_1Block.html</anchorfile>
      <anchor>ad8b73d764ef75a9e8b07375bca231b82</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual juce::Array&lt; ControlButton * &gt;</type>
      <name>getButtons</name>
      <anchorfile>classjuce_1_1Block.html</anchorfile>
      <anchor>aec146cc811e2ead8212d88d4489692a9</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>supportsGraphics</name>
      <anchorfile>classjuce_1_1Block.html</anchorfile>
      <anchor>ac350f302d99cf0868bf2743c6a52e0df</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual juce::Array&lt; ConnectionPort &gt;</type>
      <name>getPorts</name>
      <anchorfile>classjuce_1_1Block.html</anchorfile>
      <anchor>aa31681c9144312b220056b72b867c198</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addDataInputPortListener</name>
      <anchorfile>classjuce_1_1Block.html</anchorfile>
      <anchor>a855e00966a805452a678c3189b7f81ae</anchor>
      <arglist>(DataInputPortListener *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>removeDataInputPortListener</name>
      <anchorfile>classjuce_1_1Block.html</anchorfile>
      <anchor>aaa9eaf496d52ad5b365fa97a90ad0bce</anchor>
      <arglist>(DataInputPortListener *)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>sendMessage</name>
      <anchorfile>classjuce_1_1Block.html</anchorfile>
      <anchor>a33c230d445890adf54044a913cfebe52</anchor>
      <arglist>(const void *messageData, size_t messageSize)=0</arglist>
    </member>
    <member kind="variable">
      <type>const juce::String</type>
      <name>serialNumber</name>
      <anchorfile>classjuce_1_1Block.html</anchorfile>
      <anchor>a6bdaab0c5e9ad459fa35f8eb94e89380</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const UID</type>
      <name>uid</name>
      <anchorfile>classjuce_1_1Block.html</anchorfile>
      <anchor>a05952b9650107a6ff52cb41453184525</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Block</name>
      <anchorfile>classjuce_1_1Block.html</anchorfile>
      <anchor>ae0a47602b25a0dd6e491c742517fa349</anchor>
      <arglist>(const juce::String &amp;serialNumberToUse)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>juce::ListenerList&lt; DataInputPortListener &gt;</type>
      <name>dataInputPortListeners</name>
      <anchorfile>classjuce_1_1Block.html</anchorfile>
      <anchor>a5b6ead23d89a8ba36a3c63d59d40a06b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>juce::Block::ConnectionPort</name>
    <filename>structjuce_1_1Block_1_1ConnectionPort.html</filename>
    <member kind="enumeration">
      <type></type>
      <name>DeviceEdge</name>
      <anchorfile>structjuce_1_1Block_1_1ConnectionPort.html</anchorfile>
      <anchor>afef244d1ebdcc63242021a1c86f2f61c</anchor>
      <arglist></arglist>
      <enumvalue file="structjuce_1_1Block_1_1ConnectionPort.html" anchor="afef244d1ebdcc63242021a1c86f2f61ca8d8d1437907bca79900ac5f0ea1f5c73">north</enumvalue>
      <enumvalue file="structjuce_1_1Block_1_1ConnectionPort.html" anchor="afef244d1ebdcc63242021a1c86f2f61ca50fd76e33fe5b9617c5ca99008af8904">south</enumvalue>
      <enumvalue file="structjuce_1_1Block_1_1ConnectionPort.html" anchor="afef244d1ebdcc63242021a1c86f2f61ca320381dbf7cd2f31c04baa6b36e1c682">east</enumvalue>
      <enumvalue file="structjuce_1_1Block_1_1ConnectionPort.html" anchor="afef244d1ebdcc63242021a1c86f2f61cada4f0053a5c13882268852ae2da2e466">west</enumvalue>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>structjuce_1_1Block_1_1ConnectionPort.html</anchorfile>
      <anchor>a38cf1e6589b8ccd00a267786fe3f5457</anchor>
      <arglist>(const ConnectionPort &amp;) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>structjuce_1_1Block_1_1ConnectionPort.html</anchorfile>
      <anchor>a19b234796bdb15c19c12988aa0087a7b</anchor>
      <arglist>(const ConnectionPort &amp;) const noexcept</arglist>
    </member>
    <member kind="variable">
      <type>DeviceEdge</type>
      <name>edge</name>
      <anchorfile>structjuce_1_1Block_1_1ConnectionPort.html</anchorfile>
      <anchor>adb922d22b057b3b33a0bc89ea09eedc3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>index</name>
      <anchorfile>structjuce_1_1Block_1_1ConnectionPort.html</anchorfile>
      <anchor>a11a442148b372a56f9a1a08c4ccc95f2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>juce::Block::DataInputPortListener</name>
    <filename>structjuce_1_1Block_1_1DataInputPortListener.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~DataInputPortListener</name>
      <anchorfile>structjuce_1_1Block_1_1DataInputPortListener.html</anchorfile>
      <anchor>ad90d0871c56b39aad95fde9c22eaff40</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>handleIncomingDataPortMessage</name>
      <anchorfile>structjuce_1_1Block_1_1DataInputPortListener.html</anchorfile>
      <anchor>a019c25b21389c2fbcf88bf004b86a4f1</anchor>
      <arglist>(Block &amp;source, const void *messageData, size_t messageSize)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>juce::TouchSurface</name>
    <filename>classjuce_1_1TouchSurface.html</filename>
    <class kind="struct">juce::TouchSurface::Listener</class>
    <class kind="struct">juce::TouchSurface::Touch</class>
    <member kind="function">
      <type></type>
      <name>TouchSurface</name>
      <anchorfile>classjuce_1_1TouchSurface.html</anchorfile>
      <anchor>a291ed7738c5d13e96cee4655514fbd11</anchor>
      <arglist>(Block &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TouchSurface</name>
      <anchorfile>classjuce_1_1TouchSurface.html</anchorfile>
      <anchor>a31a43bff3e89a9c44223d2a78eb48b5d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>cancelAllActiveTouches</name>
      <anchorfile>classjuce_1_1TouchSurface.html</anchorfile>
      <anchor>a2a7993d97f8ff6afb08c2fb1126c545a</anchor>
      <arglist>() noexcept=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getNumberOfKeywaves</name>
      <anchorfile>classjuce_1_1TouchSurface.html</anchorfile>
      <anchor>aa9624ce22f4c76b24a7c31b7ff942cf2</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>callListenersTouchChanged</name>
      <anchorfile>classjuce_1_1TouchSurface.html</anchorfile>
      <anchor>a6615c7ce2eb0ccd10670be65a5bc78b3</anchor>
      <arglist>(const TouchSurface::Touch &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addListener</name>
      <anchorfile>classjuce_1_1TouchSurface.html</anchorfile>
      <anchor>ac1c1493cd78fb543374c07bb4ebc6f30</anchor>
      <arglist>(Listener *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeListener</name>
      <anchorfile>classjuce_1_1TouchSurface.html</anchorfile>
      <anchor>a50358b704e226c401911974c845fb644</anchor>
      <arglist>(Listener *)</arglist>
    </member>
    <member kind="variable">
      <type>Block &amp;</type>
      <name>block</name>
      <anchorfile>classjuce_1_1TouchSurface.html</anchorfile>
      <anchor>a6cdea2a2f0fb0572590ea99a00a31074</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>juce::ListenerList&lt; Listener &gt;</type>
      <name>listeners</name>
      <anchorfile>classjuce_1_1TouchSurface.html</anchorfile>
      <anchor>a1e6984551b193502fcafd2edd6b9f0b1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>juce::TouchSurface::Listener</name>
    <filename>structjuce_1_1TouchSurface_1_1Listener.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Listener</name>
      <anchorfile>structjuce_1_1TouchSurface_1_1Listener.html</anchorfile>
      <anchor>a2f72a94b918cc471499ca54f5a3a015e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>touchChanged</name>
      <anchorfile>structjuce_1_1TouchSurface_1_1Listener.html</anchorfile>
      <anchor>a736451dd66b88c0ccf49b12a5057eec6</anchor>
      <arglist>(TouchSurface &amp;, const Touch &amp;)=0</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>juce::TouchSurface::Touch</name>
    <filename>structjuce_1_1TouchSurface_1_1Touch.html</filename>
    <member kind="variable">
      <type>int</type>
      <name>index</name>
      <anchorfile>structjuce_1_1TouchSurface_1_1Touch.html</anchorfile>
      <anchor>a97611641c9c32b5bbb7b9ee9acc9e210</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>x</name>
      <anchorfile>structjuce_1_1TouchSurface_1_1Touch.html</anchorfile>
      <anchor>aab821e028f6052312200f6f847595be2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>xVelocity</name>
      <anchorfile>structjuce_1_1TouchSurface_1_1Touch.html</anchorfile>
      <anchor>af58a9c18c623470be6190e24828656dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>y</name>
      <anchorfile>structjuce_1_1TouchSurface_1_1Touch.html</anchorfile>
      <anchor>a0b763029ca38c7af80a9a682bc2b439d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>yVelocity</name>
      <anchorfile>structjuce_1_1TouchSurface_1_1Touch.html</anchorfile>
      <anchor>ad8ff81766dd77bcbfb5fd0c7f5087cc7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>z</name>
      <anchorfile>structjuce_1_1TouchSurface_1_1Touch.html</anchorfile>
      <anchor>a2401ec3be0a826301e88b4a7b40f38c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>zVelocity</name>
      <anchorfile>structjuce_1_1TouchSurface_1_1Touch.html</anchorfile>
      <anchor>a9ef327a4d3becc5ea0e482a25a0d7b85</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Block::Timestamp</type>
      <name>eventTimestamp</name>
      <anchorfile>structjuce_1_1TouchSurface_1_1Touch.html</anchorfile>
      <anchor>a7c86a02fd5d1ef2efcc0f53966fb5e8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>isTouchStart</name>
      <anchorfile>structjuce_1_1TouchSurface_1_1Touch.html</anchorfile>
      <anchor>aada3c47dc092aaeac0ff874aeb650d68</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>isTouchEnd</name>
      <anchorfile>structjuce_1_1TouchSurface_1_1Touch.html</anchorfile>
      <anchor>a4c17aef12e9108e1940fe938a2153054</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Block::UID</type>
      <name>blockUID</name>
      <anchorfile>structjuce_1_1TouchSurface_1_1Touch.html</anchorfile>
      <anchor>a19738e53cd068e1c06e7948f1de8fbf0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>startX</name>
      <anchorfile>structjuce_1_1TouchSurface_1_1Touch.html</anchorfile>
      <anchor>ab7fe64a0b3abcebc1c4b30e31dbf0cfb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>startY</name>
      <anchorfile>structjuce_1_1TouchSurface_1_1Touch.html</anchorfile>
      <anchor>adb2cf3334783ac43f56224c951da22c2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>juce::LEDColour</name>
    <filename>structjuce_1_1LEDColour.html</filename>
    <member kind="function">
      <type></type>
      <name>LEDColour</name>
      <anchorfile>structjuce_1_1LEDColour.html</anchorfile>
      <anchor>a9b797c28f35c1e0c75a969ff3eb8d4b8</anchor>
      <arglist>() noexcept=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LEDColour</name>
      <anchorfile>structjuce_1_1LEDColour.html</anchorfile>
      <anchor>a395edbdd475d8fa57a39e344a76d5b8d</anchor>
      <arglist>(const LEDColour &amp;) noexcept=default</arglist>
    </member>
    <member kind="function">
      <type>LEDColour &amp;</type>
      <name>operator=</name>
      <anchorfile>structjuce_1_1LEDColour.html</anchorfile>
      <anchor>a80e04c42fc9cd4ecc7bfa5ce1f94be59</anchor>
      <arglist>(const LEDColour &amp;) noexcept=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LEDColour</name>
      <anchorfile>structjuce_1_1LEDColour.html</anchorfile>
      <anchor>a3279d615e104d1cbaa2a811203f13d8f</anchor>
      <arglist>(uint32 argbColour) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LEDColour</name>
      <anchorfile>structjuce_1_1LEDColour.html</anchorfile>
      <anchor>a76bfa5aacfb38359495bfacdcf342f60</anchor>
      <arglist>(const ColourType &amp;colour)</arglist>
    </member>
    <member kind="function">
      <type>uint8</type>
      <name>getAlpha</name>
      <anchorfile>structjuce_1_1LEDColour.html</anchorfile>
      <anchor>aac011eb40a7fe1d173def5e58e3f3ab5</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>uint8</type>
      <name>getRed</name>
      <anchorfile>structjuce_1_1LEDColour.html</anchorfile>
      <anchor>a6c9a3b71bf78cea8267789c62e494e20</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>uint8</type>
      <name>getGreen</name>
      <anchorfile>structjuce_1_1LEDColour.html</anchorfile>
      <anchor>aafeb3f13fa65c6f37531f3b352ccaad3</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>uint8</type>
      <name>getBlue</name>
      <anchorfile>structjuce_1_1LEDColour.html</anchorfile>
      <anchor>a95b6fe015ee24099783b17fd59e829d0</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>uint32</type>
      <name>getARGB</name>
      <anchorfile>structjuce_1_1LEDColour.html</anchorfile>
      <anchor>ab5cbbb116a40c315a7ad93f9added66e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="variable">
      <type>uint32</type>
      <name>argb</name>
      <anchorfile>structjuce_1_1LEDColour.html</anchorfile>
      <anchor>a2e6f2f2173dee4fc932a544085bf0e84</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>juce::LEDGrid</name>
    <filename>classjuce_1_1LEDGrid.html</filename>
    <class kind="struct">juce::LEDGrid::Program</class>
    <class kind="struct">juce::LEDGrid::ProgramEventMessage</class>
    <class kind="struct">juce::LEDGrid::Renderer</class>
    <member kind="function">
      <type></type>
      <name>LEDGrid</name>
      <anchorfile>classjuce_1_1LEDGrid.html</anchorfile>
      <anchor>ae5407a134d847af5ed2ad28cdb27fb56</anchor>
      <arglist>(Block &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~LEDGrid</name>
      <anchorfile>classjuce_1_1LEDGrid.html</anchorfile>
      <anchor>a19e9868e7dc1b08ae017c55521f6c7c9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getNumColumns</name>
      <anchorfile>classjuce_1_1LEDGrid.html</anchorfile>
      <anchor>a46d88289d94ae50b577aa19efe8ff68d</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getNumRows</name>
      <anchorfile>classjuce_1_1LEDGrid.html</anchorfile>
      <anchor>a20ee5fc50b5ad4fa81bcc02da954e74d</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual juce::Result</type>
      <name>setProgram</name>
      <anchorfile>classjuce_1_1LEDGrid.html</anchorfile>
      <anchor>acfd74402d751f952d422d0550e7565e0</anchor>
      <arglist>(Program *)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Program *</type>
      <name>getProgram</name>
      <anchorfile>classjuce_1_1LEDGrid.html</anchorfile>
      <anchor>a856809f060bcf8b9b7796b88539722ff</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>sendProgramEvent</name>
      <anchorfile>classjuce_1_1LEDGrid.html</anchorfile>
      <anchor>a7f779fc66732257bf3a0968c9a0321a0</anchor>
      <arglist>(const ProgramEventMessage &amp;)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setDataByte</name>
      <anchorfile>classjuce_1_1LEDGrid.html</anchorfile>
      <anchor>a84a33db40ff04d3237e02151dc1e013d</anchor>
      <arglist>(size_t offset, uint8 value)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setDataBytes</name>
      <anchorfile>classjuce_1_1LEDGrid.html</anchorfile>
      <anchor>a8b2436ce33b2eba4208cfd05b516974b</anchor>
      <arglist>(size_t offset, const void *data, size_t num)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setDataBits</name>
      <anchorfile>classjuce_1_1LEDGrid.html</anchorfile>
      <anchor>a2dd8fa67fb27a1d54c98237d6002e2a3</anchor>
      <arglist>(uint32 startBit, uint32 numBits, uint32 value)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual uint8</type>
      <name>getDataByte</name>
      <anchorfile>classjuce_1_1LEDGrid.html</anchorfile>
      <anchor>a68f93b0e2c32ff268cb97889a2f96d72</anchor>
      <arglist>(size_t offset)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>saveProgramAsDefault</name>
      <anchorfile>classjuce_1_1LEDGrid.html</anchorfile>
      <anchor>aca116769e700e0244b62a6ec42f0346a</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRenderer</name>
      <anchorfile>classjuce_1_1LEDGrid.html</anchorfile>
      <anchor>a6c1c9871bbc6b337ec020559180e4a2d</anchor>
      <arglist>(Renderer *newRenderer) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Renderer *</type>
      <name>getRenderer</name>
      <anchorfile>classjuce_1_1LEDGrid.html</anchorfile>
      <anchor>a240f9c42b79849b2242f19b7b32f68ff</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="variable">
      <type>Block &amp;</type>
      <name>block</name>
      <anchorfile>classjuce_1_1LEDGrid.html</anchorfile>
      <anchor>af0b4ccdc71c6423ff8e45266940be18f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>juce::LEDGrid::Program</name>
    <filename>structjuce_1_1LEDGrid_1_1Program.html</filename>
    <member kind="function">
      <type></type>
      <name>Program</name>
      <anchorfile>structjuce_1_1LEDGrid_1_1Program.html</anchorfile>
      <anchor>a5ca490219b796c226120fe18ba2f7fa6</anchor>
      <arglist>(LEDGrid &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Program</name>
      <anchorfile>structjuce_1_1LEDGrid_1_1Program.html</anchorfile>
      <anchor>a69025845f784cb8ef9ec2af4e8ac82e1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual juce::String</type>
      <name>getLittleFootProgram</name>
      <anchorfile>structjuce_1_1LEDGrid_1_1Program.html</anchorfile>
      <anchor>a2e34292c188f281e35b60773e3053cda</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual uint32</type>
      <name>getHeapSize</name>
      <anchorfile>structjuce_1_1LEDGrid_1_1Program.html</anchorfile>
      <anchor>a328030d896006b4cf80550dc4015815e</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="variable">
      <type>LEDGrid &amp;</type>
      <name>ledGrid</name>
      <anchorfile>structjuce_1_1LEDGrid_1_1Program.html</anchorfile>
      <anchor>aa6713571a381aa92ccf7ef6a13ed247e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>juce::LEDGrid::ProgramEventMessage</name>
    <filename>structjuce_1_1LEDGrid_1_1ProgramEventMessage.html</filename>
    <member kind="variable">
      <type>int32</type>
      <name>values</name>
      <anchorfile>structjuce_1_1LEDGrid_1_1ProgramEventMessage.html</anchorfile>
      <anchor>a2fbdc10339007a646fd6eb3ef4ceaa6d</anchor>
      <arglist>[2]</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>juce::LEDGrid::Renderer</name>
    <filename>structjuce_1_1LEDGrid_1_1Renderer.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Renderer</name>
      <anchorfile>structjuce_1_1LEDGrid_1_1Renderer.html</anchorfile>
      <anchor>ac05f2f9e6c94c83582e61bcb6450571a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>renderLEDGrid</name>
      <anchorfile>structjuce_1_1LEDGrid_1_1Renderer.html</anchorfile>
      <anchor>a8d994c106c06d76fd98aa9c632ff8a30</anchor>
      <arglist>(LEDGrid &amp;)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>juce::LEDRow</name>
    <filename>classjuce_1_1LEDRow.html</filename>
    <member kind="function">
      <type></type>
      <name>LEDRow</name>
      <anchorfile>classjuce_1_1LEDRow.html</anchorfile>
      <anchor>ae21d01403110115cf5915c020ec478f1</anchor>
      <arglist>(Block &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~LEDRow</name>
      <anchorfile>classjuce_1_1LEDRow.html</anchorfile>
      <anchor>a0edee73a46af4b108c26b3dcb467da6d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getNumLEDs</name>
      <anchorfile>classjuce_1_1LEDRow.html</anchorfile>
      <anchor>a2892e96cba10d3e82283e58c46dfb46c</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setLEDColour</name>
      <anchorfile>classjuce_1_1LEDRow.html</anchorfile>
      <anchor>a84f0b7496f086eac1ad7358fe89aca98</anchor>
      <arglist>(int index, LEDColour newColour)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setOverlayColour</name>
      <anchorfile>classjuce_1_1LEDRow.html</anchorfile>
      <anchor>a0c2a4b750f683bda20f22f55b09bdf51</anchor>
      <arglist>(LEDColour newColour)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>resetOverlayColour</name>
      <anchorfile>classjuce_1_1LEDRow.html</anchorfile>
      <anchor>a92f7e58721a6aa62b8c5ae31b7b1370f</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="variable">
      <type>Block &amp;</type>
      <name>block</name>
      <anchorfile>classjuce_1_1LEDRow.html</anchorfile>
      <anchor>a32f3622782317cf988830288e55f04d9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>juce::ControlButton</name>
    <filename>classjuce_1_1ControlButton.html</filename>
    <class kind="struct">juce::ControlButton::Listener</class>
    <member kind="enumeration">
      <type></type>
      <name>ButtonFunction</name>
      <anchorfile>classjuce_1_1ControlButton.html</anchorfile>
      <anchor>a255db90f7880221e85f4d1d426291832</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>mode</name>
      <anchorfile>classjuce_1_1ControlButton.html</anchorfile>
      <anchor>a255db90f7880221e85f4d1d426291832a49df6c25924134cc1ddd63dc06c8cc94</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>volume</name>
      <anchorfile>classjuce_1_1ControlButton.html</anchorfile>
      <anchor>a255db90f7880221e85f4d1d426291832a2e63539436e16271da9f47f2dfcae60e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>up</name>
      <anchorfile>classjuce_1_1ControlButton.html</anchorfile>
      <anchor>a255db90f7880221e85f4d1d426291832ae803ab34e6373989144908e071fd8a0e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>down</name>
      <anchorfile>classjuce_1_1ControlButton.html</anchorfile>
      <anchor>a255db90f7880221e85f4d1d426291832afe83f0c46fa4bc0e0181fc150fede7c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>scale</name>
      <anchorfile>classjuce_1_1ControlButton.html</anchorfile>
      <anchor>a255db90f7880221e85f4d1d426291832a2c0573761ad235d6a1917ad97df2bf4e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>chord</name>
      <anchorfile>classjuce_1_1ControlButton.html</anchorfile>
      <anchor>a255db90f7880221e85f4d1d426291832a2f9df4704380a12e2e8852d3e6a010d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>arp</name>
      <anchorfile>classjuce_1_1ControlButton.html</anchorfile>
      <anchor>a255db90f7880221e85f4d1d426291832a43cf9552fef0a0e22a71e023a9a458ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>sustain</name>
      <anchorfile>classjuce_1_1ControlButton.html</anchorfile>
      <anchor>a255db90f7880221e85f4d1d426291832a43ccd9e61a280bb2cc551a3c4f0fac61</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>octave</name>
      <anchorfile>classjuce_1_1ControlButton.html</anchorfile>
      <anchor>a255db90f7880221e85f4d1d426291832a02f42abb97dea8a94c2443cd9fdd4022</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>love</name>
      <anchorfile>classjuce_1_1ControlButton.html</anchorfile>
      <anchor>a255db90f7880221e85f4d1d426291832a0cbfdba79d6de3c4756403fef22dee50</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>click</name>
      <anchorfile>classjuce_1_1ControlButton.html</anchorfile>
      <anchor>a255db90f7880221e85f4d1d426291832a15ce5eab51104cc4e9c87136dc2a5313</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>snap</name>
      <anchorfile>classjuce_1_1ControlButton.html</anchorfile>
      <anchor>a255db90f7880221e85f4d1d426291832a83962f2a399c5fa5918bb041512c0d98</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>back</name>
      <anchorfile>classjuce_1_1ControlButton.html</anchorfile>
      <anchor>a255db90f7880221e85f4d1d426291832a591091acadc1daa648c4fce430ef5946</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>playOrPause</name>
      <anchorfile>classjuce_1_1ControlButton.html</anchorfile>
      <anchor>a255db90f7880221e85f4d1d426291832ac4649f2267675a8cc1bbb6905efa1b04</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>record</name>
      <anchorfile>classjuce_1_1ControlButton.html</anchorfile>
      <anchor>a255db90f7880221e85f4d1d426291832ae61ee859d15de4b463198c18515a1cce</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>learn</name>
      <anchorfile>classjuce_1_1ControlButton.html</anchorfile>
      <anchor>a255db90f7880221e85f4d1d426291832ad77cfdb01ce37d0ff6d6f333d39071fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>button0</name>
      <anchorfile>classjuce_1_1ControlButton.html</anchorfile>
      <anchor>a255db90f7880221e85f4d1d426291832ab20c69bb929beaf0274509983125f6c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>button1</name>
      <anchorfile>classjuce_1_1ControlButton.html</anchorfile>
      <anchor>a255db90f7880221e85f4d1d426291832a43c45bb077456e4f6db33dc49cc5724a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>button2</name>
      <anchorfile>classjuce_1_1ControlButton.html</anchorfile>
      <anchor>a255db90f7880221e85f4d1d426291832a7a4ac4fb5ed7dc224372c122dfef4c8e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>button3</name>
      <anchorfile>classjuce_1_1ControlButton.html</anchorfile>
      <anchor>a255db90f7880221e85f4d1d426291832ad8b3990497522d5c41aa3fdee399bb3a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>button4</name>
      <anchorfile>classjuce_1_1ControlButton.html</anchorfile>
      <anchor>a255db90f7880221e85f4d1d426291832a3cc51dc3d05d188b78ba8cc61b1ce09d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>button5</name>
      <anchorfile>classjuce_1_1ControlButton.html</anchorfile>
      <anchor>a255db90f7880221e85f4d1d426291832a45032dd50ea7c972733c117e88e95cc0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>button6</name>
      <anchorfile>classjuce_1_1ControlButton.html</anchorfile>
      <anchor>a255db90f7880221e85f4d1d426291832a262614e936b7d7a0018cccf22c390a0c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>button7</name>
      <anchorfile>classjuce_1_1ControlButton.html</anchorfile>
      <anchor>a255db90f7880221e85f4d1d426291832a344a7ff166d066c4cfd64cf6e8b948e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ControlButton</name>
      <anchorfile>classjuce_1_1ControlButton.html</anchorfile>
      <anchor>a6f8871d096adb0e1e5a427159221eebe</anchor>
      <arglist>(Block &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ControlButton</name>
      <anchorfile>classjuce_1_1ControlButton.html</anchorfile>
      <anchor>ae4135d8a9ea83c71b0a0d5dd161afbdb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ButtonFunction</type>
      <name>getType</name>
      <anchorfile>classjuce_1_1ControlButton.html</anchorfile>
      <anchor>af65caebe83975b2d64158107a149d43c</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual juce::String</type>
      <name>getName</name>
      <anchorfile>classjuce_1_1ControlButton.html</anchorfile>
      <anchor>a6fc9db256fc7a220a774249655227c87</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual float</type>
      <name>getPositionX</name>
      <anchorfile>classjuce_1_1ControlButton.html</anchorfile>
      <anchor>a85d1c4f565e382742700009854e7ba0d</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual float</type>
      <name>getPositionY</name>
      <anchorfile>classjuce_1_1ControlButton.html</anchorfile>
      <anchor>a0833e011ff0fb009862bb757107c59ed</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>hasLight</name>
      <anchorfile>classjuce_1_1ControlButton.html</anchorfile>
      <anchor>a8efb90c0d89c4c7917ba7c5d5c57005e</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>setLightColour</name>
      <anchorfile>classjuce_1_1ControlButton.html</anchorfile>
      <anchor>a3a13183cdd06b052f61eeb9aa4bf1e0a</anchor>
      <arglist>(LEDColour newColour)=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addListener</name>
      <anchorfile>classjuce_1_1ControlButton.html</anchorfile>
      <anchor>a2f417fe8e55af4908f10aafffc0f8b5b</anchor>
      <arglist>(Listener *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeListener</name>
      <anchorfile>classjuce_1_1ControlButton.html</anchorfile>
      <anchor>a5af9347b0e023c5edf6f8481431d2673</anchor>
      <arglist>(Listener *)</arglist>
    </member>
    <member kind="variable">
      <type>Block &amp;</type>
      <name>block</name>
      <anchorfile>classjuce_1_1ControlButton.html</anchorfile>
      <anchor>a304324bb39d918829b1dca9c5e63f587</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>juce::ListenerList&lt; Listener &gt;</type>
      <name>listeners</name>
      <anchorfile>classjuce_1_1ControlButton.html</anchorfile>
      <anchor>a52e25a7ef1764e83d34092bec93a6035</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>juce::ControlButton::Listener</name>
    <filename>structjuce_1_1ControlButton_1_1Listener.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Listener</name>
      <anchorfile>structjuce_1_1ControlButton_1_1Listener.html</anchorfile>
      <anchor>a6adec3c4bf5bcc7196d00c1719f3a6c6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>buttonPressed</name>
      <anchorfile>structjuce_1_1ControlButton_1_1Listener.html</anchorfile>
      <anchor>a811452d23e5455d316d4e02f62ffbb45</anchor>
      <arglist>(ControlButton &amp;, Block::Timestamp)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>buttonReleased</name>
      <anchorfile>structjuce_1_1ControlButton_1_1Listener.html</anchorfile>
      <anchor>a747d5cd86c9541196c7fded546f5533d</anchor>
      <arglist>(ControlButton &amp;, Block::Timestamp)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>juce::TouchList</name>
    <filename>classjuce_1_1TouchList.html</filename>
    <templarg></templarg>
    <class kind="struct">juce::TouchList::TouchEntry</class>
    <member kind="function">
      <type></type>
      <name>TouchList</name>
      <anchorfile>classjuce_1_1TouchList.html</anchorfile>
      <anchor>a849f113f7167811bb4806428e021abb9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TouchList</name>
      <anchorfile>classjuce_1_1TouchList.html</anchorfile>
      <anchor>af9d741a8d5eb522c3f5c9154539c8259</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>classjuce_1_1TouchList.html</anchorfile>
      <anchor>a9e63e042058c312ee1ac1e52fb9fc1f2</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Type &amp;</type>
      <name>getValue</name>
      <anchorfile>classjuce_1_1TouchList.html</anchorfile>
      <anchor>ab6af7a180547239f60e46ea0e2963a41</anchor>
      <arglist>(const TouchSurface::Touch &amp;touch)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>classjuce_1_1TouchList.html</anchorfile>
      <anchor>a9c59cbc684cdcd1f37a3760fa45ad35d</anchor>
      <arglist>(const TouchSurface::Touch &amp;touch) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateTouch</name>
      <anchorfile>classjuce_1_1TouchList.html</anchorfile>
      <anchor>ae770605c007d6b3dc34ed65c01ebcc98</anchor>
      <arglist>(const TouchSurface::Touch &amp;touch)</arglist>
    </member>
    <member kind="function">
      <type>TouchEntry *</type>
      <name>find</name>
      <anchorfile>classjuce_1_1TouchList.html</anchorfile>
      <anchor>a98fee3c590c3c00d28539400e4401e09</anchor>
      <arglist>(const TouchSurface::Touch &amp;touch) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>TouchEntry *</type>
      <name>begin</name>
      <anchorfile>classjuce_1_1TouchList.html</anchorfile>
      <anchor>a93e5733c1a3d3761072db437ff7fedc7</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>TouchEntry *</type>
      <name>end</name>
      <anchorfile>classjuce_1_1TouchList.html</anchorfile>
      <anchor>a24fb85342d5480579bf2fe9dda13d0eb</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>TouchEntry &amp;</type>
      <name>operator[]</name>
      <anchorfile>classjuce_1_1TouchList.html</anchorfile>
      <anchor>ad842f59d2b1e5b0df016bf4f8c726c65</anchor>
      <arglist>(const int index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classjuce_1_1TouchList.html</anchorfile>
      <anchor>a8153c3eb87b0812751589b9ce4771582</anchor>
      <arglist>() noexcept</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>juce::TouchList::TouchEntry</name>
    <filename>structjuce_1_1TouchList_1_1TouchEntry.html</filename>
    <member kind="variable">
      <type>TouchSurface::Touch</type>
      <name>touch</name>
      <anchorfile>structjuce_1_1TouchList_1_1TouchEntry.html</anchorfile>
      <anchor>ae84b4fd04eba9635b98b3ed2d6c43b58</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Type</type>
      <name>value</name>
      <anchorfile>structjuce_1_1TouchList_1_1TouchEntry.html</anchorfile>
      <anchor>ae5e26d5fb19e01449630e704e1361b3f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>juce::StatusLight</name>
    <filename>classjuce_1_1StatusLight.html</filename>
    <member kind="function">
      <type></type>
      <name>StatusLight</name>
      <anchorfile>classjuce_1_1StatusLight.html</anchorfile>
      <anchor>a9a86b83b11071347f39b3e42206bc57b</anchor>
      <arglist>(Block &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~StatusLight</name>
      <anchorfile>classjuce_1_1StatusLight.html</anchorfile>
      <anchor>a9d2c0c2e5c2624070306f08bfd47c4e6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual juce::String</type>
      <name>getName</name>
      <anchorfile>classjuce_1_1StatusLight.html</anchorfile>
      <anchor>a9a00502710a4233094f8810d6b035e1c</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>setColour</name>
      <anchorfile>classjuce_1_1StatusLight.html</anchorfile>
      <anchor>a53de237ef02cc5d1b4f9d26229982b70</anchor>
      <arglist>(LEDColour newColour)=0</arglist>
    </member>
    <member kind="variable">
      <type>Block &amp;</type>
      <name>block</name>
      <anchorfile>classjuce_1_1StatusLight.html</anchorfile>
      <anchor>adbac9de05f27d5e058e8537be11d00fb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>juce::BlockDeviceConnection</name>
    <filename>structjuce_1_1BlockDeviceConnection.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>structjuce_1_1BlockDeviceConnection.html</anchorfile>
      <anchor>a68462355fdff3e7293db7883d9f2ce7f</anchor>
      <arglist>(const BlockDeviceConnection &amp;) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>structjuce_1_1BlockDeviceConnection.html</anchorfile>
      <anchor>ae98c407aa54ddda45d5638878d106dd5</anchor>
      <arglist>(const BlockDeviceConnection &amp;) const noexcept</arglist>
    </member>
    <member kind="variable">
      <type>Block::UID</type>
      <name>device1</name>
      <anchorfile>structjuce_1_1BlockDeviceConnection.html</anchorfile>
      <anchor>a57dc5f3983d9fe1deaca93f0aedf19a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Block::UID</type>
      <name>device2</name>
      <anchorfile>structjuce_1_1BlockDeviceConnection.html</anchorfile>
      <anchor>a5dffc65a1e9f7f9cff49befcae24ae1e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Block::ConnectionPort</type>
      <name>connectionPortOnDevice1</name>
      <anchorfile>structjuce_1_1BlockDeviceConnection.html</anchorfile>
      <anchor>aa5743509e7b453291a147b89832b73c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Block::ConnectionPort</type>
      <name>connectionPortOnDevice2</name>
      <anchorfile>structjuce_1_1BlockDeviceConnection.html</anchorfile>
      <anchor>a7da65b0850875c2449443eede48f41ee</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>juce::BlockTopology</name>
    <filename>structjuce_1_1BlockTopology.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>structjuce_1_1BlockTopology.html</anchorfile>
      <anchor>affe1458816fd889a80c90c53bce3f718</anchor>
      <arglist>(const BlockTopology &amp;) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>structjuce_1_1BlockTopology.html</anchorfile>
      <anchor>a8a082430ebc134a862eb129c8a53489b</anchor>
      <arglist>(const BlockTopology &amp;) const noexcept</arglist>
    </member>
    <member kind="variable">
      <type>Block::Array</type>
      <name>blocks</name>
      <anchorfile>structjuce_1_1BlockTopology.html</anchorfile>
      <anchor>ae78df87317691da713f6ab4c5ae0807b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>juce::Array&lt; BlockDeviceConnection &gt;</type>
      <name>connections</name>
      <anchorfile>structjuce_1_1BlockTopology.html</anchorfile>
      <anchor>a6fed0335e5b9c16bba52ac342d636735</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>juce::TopologySource</name>
    <filename>classjuce_1_1TopologySource.html</filename>
    <class kind="struct">juce::TopologySource::Listener</class>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TopologySource</name>
      <anchorfile>classjuce_1_1TopologySource.html</anchorfile>
      <anchor>a9116eabc0a90f6f0089e71c3541f3639</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual BlockTopology</type>
      <name>getCurrentTopology</name>
      <anchorfile>classjuce_1_1TopologySource.html</anchorfile>
      <anchor>acecd1d417f5ce635eae30e95cd23767e</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addListener</name>
      <anchorfile>classjuce_1_1TopologySource.html</anchorfile>
      <anchor>a630595b1afab3c777d4c26b55a9d42ca</anchor>
      <arglist>(Listener *l)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeListener</name>
      <anchorfile>classjuce_1_1TopologySource.html</anchorfile>
      <anchor>aefbbfed597901d67fcf2b841648e67db</anchor>
      <arglist>(Listener *l)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>cancelAllActiveTouches</name>
      <anchorfile>classjuce_1_1TopologySource.html</anchorfile>
      <anchor>aa54779259ffbc4da99034ae4acf95bb9</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>juce::ListenerList&lt; Listener &gt;</type>
      <name>listeners</name>
      <anchorfile>classjuce_1_1TopologySource.html</anchorfile>
      <anchor>a7280a0801b2ca7a6ac02c87630811a15</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>juce::TopologySource::Listener</name>
    <filename>structjuce_1_1TopologySource_1_1Listener.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Listener</name>
      <anchorfile>structjuce_1_1TopologySource_1_1Listener.html</anchorfile>
      <anchor>a624a681447733ce5f9fb068d05912e4c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>topologyChanged</name>
      <anchorfile>structjuce_1_1TopologySource_1_1Listener.html</anchorfile>
      <anchor>a936344db24fb9f3ee20b89f22a95326b</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>juce::PhysicalTopologySource</name>
    <filename>classjuce_1_1PhysicalTopologySource.html</filename>
    <base>juce::TopologySource</base>
    <class kind="struct">juce::PhysicalTopologySource::DeviceConnection</class>
    <class kind="struct">juce::PhysicalTopologySource::DeviceDetector</class>
    <member kind="function">
      <type></type>
      <name>PhysicalTopologySource</name>
      <anchorfile>classjuce_1_1PhysicalTopologySource.html</anchorfile>
      <anchor>a8320f2a8b69cd912ad06e565f3791c2c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~PhysicalTopologySource</name>
      <anchorfile>classjuce_1_1PhysicalTopologySource.html</anchorfile>
      <anchor>af4a11608fdc08dc1a31442ba44518744</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>BlockTopology</type>
      <name>getCurrentTopology</name>
      <anchorfile>classjuce_1_1PhysicalTopologySource.html</anchorfile>
      <anchor>a1368df6f037f08112645d26fa6291c7e</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cancelAllActiveTouches</name>
      <anchorfile>classjuce_1_1PhysicalTopologySource.html</anchorfile>
      <anchor>a7e0b971f31bde87a11952f2572d1947d</anchor>
      <arglist>() noexceptoverride</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PhysicalTopologySource</name>
      <anchorfile>classjuce_1_1PhysicalTopologySource.html</anchorfile>
      <anchor>a93607ebdf0ad400fa2c07dd918dc7314</anchor>
      <arglist>(DeviceDetector &amp;detectorToUse)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const char *const *</type>
      <name>getStandardLittleFootFunctions</name>
      <anchorfile>classjuce_1_1PhysicalTopologySource.html</anchorfile>
      <anchor>a6f7ac80b274837c0c3fb880596760115</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>hasOwnServiceTimer</name>
      <anchorfile>classjuce_1_1PhysicalTopologySource.html</anchorfile>
      <anchor>abc0804d4b0fa44e3f3a6a5103257689e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleTimerTick</name>
      <anchorfile>classjuce_1_1PhysicalTopologySource.html</anchorfile>
      <anchor>a9b275ea30b05cf4468ab12ae6a4fef81</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>juce::PhysicalTopologySource::DeviceConnection</name>
    <filename>structjuce_1_1PhysicalTopologySource_1_1DeviceConnection.html</filename>
    <member kind="function">
      <type></type>
      <name>DeviceConnection</name>
      <anchorfile>structjuce_1_1PhysicalTopologySource_1_1DeviceConnection.html</anchorfile>
      <anchor>aa529b43a1abc47ac77364724a2386565</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~DeviceConnection</name>
      <anchorfile>structjuce_1_1PhysicalTopologySource_1_1DeviceConnection.html</anchorfile>
      <anchor>aeb6ec5018f17ad577a323db1a1456908</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>sendMessageToDevice</name>
      <anchorfile>structjuce_1_1PhysicalTopologySource_1_1DeviceConnection.html</anchorfile>
      <anchor>a4eb97f584158af1e3ecce0a265b66de7</anchor>
      <arglist>(const void *data, size_t dataSize)=0</arglist>
    </member>
    <member kind="variable">
      <type>std::function&lt; void(const void *data, size_t dataSize)&gt;</type>
      <name>handleMessageFromDevice</name>
      <anchorfile>structjuce_1_1PhysicalTopologySource_1_1DeviceConnection.html</anchorfile>
      <anchor>a6b0fdfd67698b1e8ebcd1d6bf03a2a2c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>juce::PhysicalTopologySource::DeviceDetector</name>
    <filename>structjuce_1_1PhysicalTopologySource_1_1DeviceDetector.html</filename>
    <member kind="function">
      <type></type>
      <name>DeviceDetector</name>
      <anchorfile>structjuce_1_1PhysicalTopologySource_1_1DeviceDetector.html</anchorfile>
      <anchor>a483096ad6d0e70b5c50576289cf6998a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~DeviceDetector</name>
      <anchorfile>structjuce_1_1PhysicalTopologySource_1_1DeviceDetector.html</anchorfile>
      <anchor>a9e04aa33e8c1a25d5b954a7e09d4ac9d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual juce::StringArray</type>
      <name>scanForDevices</name>
      <anchorfile>structjuce_1_1PhysicalTopologySource_1_1DeviceDetector.html</anchorfile>
      <anchor>a8175e5b67c9fbbb9bb2a39743b5782fc</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual DeviceConnection *</type>
      <name>openDevice</name>
      <anchorfile>structjuce_1_1PhysicalTopologySource_1_1DeviceDetector.html</anchorfile>
      <anchor>a942ce74574480c4c07ecef8211ddc97a</anchor>
      <arglist>(int index)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>juce::RuleBasedTopologySource</name>
    <filename>classjuce_1_1RuleBasedTopologySource.html</filename>
    <base>juce::TopologySource</base>
    <class kind="struct">juce::RuleBasedTopologySource::Rule</class>
    <member kind="function">
      <type></type>
      <name>RuleBasedTopologySource</name>
      <anchorfile>classjuce_1_1RuleBasedTopologySource.html</anchorfile>
      <anchor>a9ed01d7ccdad6cb0fc3324ae8c2e593e</anchor>
      <arglist>(TopologySource &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~RuleBasedTopologySource</name>
      <anchorfile>classjuce_1_1RuleBasedTopologySource.html</anchorfile>
      <anchor>a03f74df677ec993858bfe616dbc0d575</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>BlockTopology</type>
      <name>getCurrentTopology</name>
      <anchorfile>classjuce_1_1RuleBasedTopologySource.html</anchorfile>
      <anchor>a9bf08919680d54eeed2f55a85acc1dd8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearRules</name>
      <anchorfile>classjuce_1_1RuleBasedTopologySource.html</anchorfile>
      <anchor>a2ef02b4bd7c65240f4140dff23222020</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addRule</name>
      <anchorfile>classjuce_1_1RuleBasedTopologySource.html</anchorfile>
      <anchor>a006a02e913618f85caeb0b6185524090</anchor>
      <arglist>(Rule *)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>juce::RuleBasedTopologySource::Rule</name>
    <filename>structjuce_1_1RuleBasedTopologySource_1_1Rule.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Rule</name>
      <anchorfile>structjuce_1_1RuleBasedTopologySource_1_1Rule.html</anchorfile>
      <anchor>a288cd8e19f9f1edb453601f9ca82722e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>transformTopology</name>
      <anchorfile>structjuce_1_1RuleBasedTopologySource_1_1Rule.html</anchorfile>
      <anchor>a4e8d91909a90c4df9895a059ab89cdfb</anchor>
      <arglist>(BlockTopology &amp;)=0</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>juce::DrumPadGridProgram</name>
    <filename>structjuce_1_1DrumPadGridProgram.html</filename>
    <base>juce::LEDGrid::Program</base>
    <class kind="struct">juce::DrumPadGridProgram::GridFill</class>
    <member kind="enumeration">
      <type></type>
      <name>SlideDirection</name>
      <anchorfile>structjuce_1_1DrumPadGridProgram.html</anchorfile>
      <anchor>acd1f16a328fcc468ac6b46446b3b4226</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>up</name>
      <anchorfile>structjuce_1_1DrumPadGridProgram.html</anchorfile>
      <anchor>acd1f16a328fcc468ac6b46446b3b4226a84eda16766bd9da04af1450b590aa2d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>down</name>
      <anchorfile>structjuce_1_1DrumPadGridProgram.html</anchorfile>
      <anchor>acd1f16a328fcc468ac6b46446b3b4226a6c1fdf39e6c43b173acd5a6bcb050a54</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>left</name>
      <anchorfile>structjuce_1_1DrumPadGridProgram.html</anchorfile>
      <anchor>acd1f16a328fcc468ac6b46446b3b4226ab4be994020317506b7d0f04ea5c04f71</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>right</name>
      <anchorfile>structjuce_1_1DrumPadGridProgram.html</anchorfile>
      <anchor>acd1f16a328fcc468ac6b46446b3b4226a16ef6be2b8b6349371e284be9221bd52</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>none</name>
      <anchorfile>structjuce_1_1DrumPadGridProgram.html</anchorfile>
      <anchor>acd1f16a328fcc468ac6b46446b3b4226af3e8f9eb89352e0cfb2764190f10e1b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DrumPadGridProgram</name>
      <anchorfile>structjuce_1_1DrumPadGridProgram.html</anchorfile>
      <anchor>a2f59ddee9c510dc75b982aa7fda194ee</anchor>
      <arglist>(LEDGrid &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>startTouch</name>
      <anchorfile>structjuce_1_1DrumPadGridProgram.html</anchorfile>
      <anchor>ab5cd5be283948af517eec65fa48ad84c</anchor>
      <arglist>(float startX, float startY)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>endTouch</name>
      <anchorfile>structjuce_1_1DrumPadGridProgram.html</anchorfile>
      <anchor>a8b0cd100e58c0eaa3cad9ecfe4a33d5b</anchor>
      <arglist>(float startX, float startY)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sendTouch</name>
      <anchorfile>structjuce_1_1DrumPadGridProgram.html</anchorfile>
      <anchor>aa0118644c18924b54b40fcf6d7c71692</anchor>
      <arglist>(float x, float y, float z, LEDColour)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPadAnimationState</name>
      <anchorfile>structjuce_1_1DrumPadGridProgram.html</anchorfile>
      <anchor>ade172e88bdeaa286b807d5f67d51ab6d</anchor>
      <arglist>(uint32 padIdx, double loopTimeSecs, double currentProgress)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>suspendAnimations</name>
      <anchorfile>structjuce_1_1DrumPadGridProgram.html</anchorfile>
      <anchor>a8137208728a53df3205e4a0a0f65bdc8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resumeAnimations</name>
      <anchorfile>structjuce_1_1DrumPadGridProgram.html</anchorfile>
      <anchor>a2e84f7da0c176ffc4dc4ab697d9b9d5a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGridFills</name>
      <anchorfile>structjuce_1_1DrumPadGridProgram.html</anchorfile>
      <anchor>a210cf3da59ceb2c95d9cdd7d27c3ece1</anchor>
      <arglist>(int numColumns, int numRows, const juce::Array&lt; GridFill &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>triggerSlideTransition</name>
      <anchorfile>structjuce_1_1DrumPadGridProgram.html</anchorfile>
      <anchor>a88d19f57241a4275b05fbe21a2d586cc</anchor>
      <arglist>(int newNumColumns, int newNumRows, const juce::Array&lt; GridFill &gt; &amp;newFills, SlideDirection)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>juce::DrumPadGridProgram::GridFill</name>
    <filename>structjuce_1_1DrumPadGridProgram_1_1GridFill.html</filename>
    <member kind="enumeration">
      <type></type>
      <name>FillType</name>
      <anchorfile>structjuce_1_1DrumPadGridProgram_1_1GridFill.html</anchorfile>
      <anchor>a99d8d8f3ea5860da1b5fbfffa81793b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>gradient</name>
      <anchorfile>structjuce_1_1DrumPadGridProgram_1_1GridFill.html</anchorfile>
      <anchor>a99d8d8f3ea5860da1b5fbfffa81793b9ae87f71e4e54b6f7dcbb41b83c32ed22f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>filled</name>
      <anchorfile>structjuce_1_1DrumPadGridProgram_1_1GridFill.html</anchorfile>
      <anchor>a99d8d8f3ea5860da1b5fbfffa81793b9abc78f7b76c6e3eae476821b84628c32a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>hollow</name>
      <anchorfile>structjuce_1_1DrumPadGridProgram_1_1GridFill.html</anchorfile>
      <anchor>a99d8d8f3ea5860da1b5fbfffa81793b9a04dbd6157f727391fcd3a311dae69c91</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>hollowPlus</name>
      <anchorfile>structjuce_1_1DrumPadGridProgram_1_1GridFill.html</anchorfile>
      <anchor>a99d8d8f3ea5860da1b5fbfffa81793b9ab47551ee7609517e06133635f23c46dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>dotPulsing</name>
      <anchorfile>structjuce_1_1DrumPadGridProgram_1_1GridFill.html</anchorfile>
      <anchor>a99d8d8f3ea5860da1b5fbfffa81793b9acabcd99e03ceb501c44e607234c0e25a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>dotBlinking</name>
      <anchorfile>structjuce_1_1DrumPadGridProgram_1_1GridFill.html</anchorfile>
      <anchor>a99d8d8f3ea5860da1b5fbfffa81793b9a53d77eb2e60b95b84bdb76e4dfb4fddc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>pizzaFilled</name>
      <anchorfile>structjuce_1_1DrumPadGridProgram_1_1GridFill.html</anchorfile>
      <anchor>a99d8d8f3ea5860da1b5fbfffa81793b9af34b759dedb6b21d6d25e66c432d4a3a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>pizzaHollow</name>
      <anchorfile>structjuce_1_1DrumPadGridProgram_1_1GridFill.html</anchorfile>
      <anchor>a99d8d8f3ea5860da1b5fbfffa81793b9aa603482e06fef1d68ed08c87d0147c80</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>LEDColour</type>
      <name>colour</name>
      <anchorfile>structjuce_1_1DrumPadGridProgram_1_1GridFill.html</anchorfile>
      <anchor>ad6cdd7a6315df084a251b676d68f6026</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FillType</type>
      <name>fillType</name>
      <anchorfile>structjuce_1_1DrumPadGridProgram_1_1GridFill.html</anchorfile>
      <anchor>a57639e8abb9cf13d5d3523c116693c50</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>juce::BitmapLEDProgram</name>
    <filename>structjuce_1_1BitmapLEDProgram.html</filename>
    <base>juce::LEDGrid::Program</base>
    <member kind="function">
      <type></type>
      <name>BitmapLEDProgram</name>
      <anchorfile>structjuce_1_1BitmapLEDProgram.html</anchorfile>
      <anchor>a655ceb2dd00b3aa0cd44adc9d7ce3565</anchor>
      <arglist>(LEDGrid &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLED</name>
      <anchorfile>structjuce_1_1BitmapLEDProgram.html</anchorfile>
      <anchor>ab8d8cc2b0d90f564e035b29e6c611eb3</anchor>
      <arglist>(uint32 x, uint32 y, LEDColour)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>juce::OSCTypes</name>
    <filename>classjuce_1_1OSCTypes.html</filename>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isSupportedType</name>
      <anchorfile>classjuce_1_1OSCTypes.html</anchorfile>
      <anchor>adf8c2663660b26e2f7c2ccd76554844b</anchor>
      <arglist>(OSCType type) noexcept</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const OSCType</type>
      <name>int32</name>
      <anchorfile>classjuce_1_1OSCTypes.html</anchorfile>
      <anchor>a9567f3d4274671265b1ab21d63845efe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const OSCType</type>
      <name>float32</name>
      <anchorfile>classjuce_1_1OSCTypes.html</anchorfile>
      <anchor>a0110bd6b77bbf8d3c5bc04ef1bfd3524</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const OSCType</type>
      <name>string</name>
      <anchorfile>classjuce_1_1OSCTypes.html</anchorfile>
      <anchor>a91a86d9d2eb12bdb27df6090787bbe50</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const OSCType</type>
      <name>blob</name>
      <anchorfile>classjuce_1_1OSCTypes.html</anchorfile>
      <anchor>acc6191c5f738e55cb1891c0e20e7c1ea</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>juce::OSCException</name>
    <filename>structjuce_1_1OSCException.html</filename>
    <member kind="function">
      <type></type>
      <name>OSCException</name>
      <anchorfile>structjuce_1_1OSCException.html</anchorfile>
      <anchor>acf0781c01e503e6c85206ffc90dc8cd3</anchor>
      <arglist>(const String &amp;desc)</arglist>
    </member>
    <member kind="variable">
      <type>String</type>
      <name>description</name>
      <anchorfile>structjuce_1_1OSCException.html</anchorfile>
      <anchor>a8ab95510b266d596a6fb479f607e479d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>juce::OSCFormatError</name>
    <filename>structjuce_1_1OSCFormatError.html</filename>
    <base>juce::OSCException</base>
    <member kind="function">
      <type></type>
      <name>OSCFormatError</name>
      <anchorfile>structjuce_1_1OSCFormatError.html</anchorfile>
      <anchor>ad3d5b77b96e9d09cc20be5bf134d85d4</anchor>
      <arglist>(const String &amp;desc)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>juce::OSCInternalError</name>
    <filename>structjuce_1_1OSCInternalError.html</filename>
    <base>juce::OSCException</base>
    <member kind="function">
      <type></type>
      <name>OSCInternalError</name>
      <anchorfile>structjuce_1_1OSCInternalError.html</anchorfile>
      <anchor>a18b423091bb939dc494fd62259539737</anchor>
      <arglist>(const String &amp;desc)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>juce::OSCTimeTag</name>
    <filename>classjuce_1_1OSCTimeTag.html</filename>
    <member kind="function">
      <type></type>
      <name>OSCTimeTag</name>
      <anchorfile>classjuce_1_1OSCTimeTag.html</anchorfile>
      <anchor>af57a9833e9c56058b26e9a87446e3b99</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OSCTimeTag</name>
      <anchorfile>classjuce_1_1OSCTimeTag.html</anchorfile>
      <anchor>ace121e55888e93888542c9681fafde08</anchor>
      <arglist>(uint64 rawTimeTag) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OSCTimeTag</name>
      <anchorfile>classjuce_1_1OSCTimeTag.html</anchorfile>
      <anchor>aec45b45a784bfa0010adec512492369a</anchor>
      <arglist>(Time time) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Time</type>
      <name>toTime</name>
      <anchorfile>classjuce_1_1OSCTimeTag.html</anchorfile>
      <anchor>a61419fdc3ac3bbfcd1c83fce4de855d6</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isImmediately</name>
      <anchorfile>classjuce_1_1OSCTimeTag.html</anchorfile>
      <anchor>a5663f746a016a7f9f176b2ea2924e8e6</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>uint64</type>
      <name>getRawTimeTag</name>
      <anchorfile>classjuce_1_1OSCTimeTag.html</anchorfile>
      <anchor>a330cffc48501e0ce50ee13aaa000e4c9</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const OSCTimeTag</type>
      <name>immediately</name>
      <anchorfile>classjuce_1_1OSCTimeTag.html</anchorfile>
      <anchor>a3680be06da897d0619cdc0a2c10df80a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>juce::OSCArgument</name>
    <filename>classjuce_1_1OSCArgument.html</filename>
    <member kind="function">
      <type></type>
      <name>OSCArgument</name>
      <anchorfile>classjuce_1_1OSCArgument.html</anchorfile>
      <anchor>af6e4433cd7ed3102c49ee3483afa12b1</anchor>
      <arglist>(int32 value) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OSCArgument</name>
      <anchorfile>classjuce_1_1OSCArgument.html</anchorfile>
      <anchor>a9d9130d612aa12d6c1698661d4cd7569</anchor>
      <arglist>(float value) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OSCArgument</name>
      <anchorfile>classjuce_1_1OSCArgument.html</anchorfile>
      <anchor>ae6ea250c5583f91c3652bb0b3bf8c368</anchor>
      <arglist>(const String &amp;value) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OSCArgument</name>
      <anchorfile>classjuce_1_1OSCArgument.html</anchorfile>
      <anchor>a01e4199dfbab0a158a1057539718461f</anchor>
      <arglist>(const MemoryBlock &amp;blob)</arglist>
    </member>
    <member kind="function">
      <type>OSCType</type>
      <name>getType</name>
      <anchorfile>classjuce_1_1OSCArgument.html</anchorfile>
      <anchor>ab59b9f5f473ff62ce6147546c05a90c2</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isInt32</name>
      <anchorfile>classjuce_1_1OSCArgument.html</anchorfile>
      <anchor>acd5710a35103cb4333d032adee67b848</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isFloat32</name>
      <anchorfile>classjuce_1_1OSCArgument.html</anchorfile>
      <anchor>a22dd98bdb506e041430121a49290fb35</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isString</name>
      <anchorfile>classjuce_1_1OSCArgument.html</anchorfile>
      <anchor>ad079ec933f70bceb56fad2d975671e0a</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isBlob</name>
      <anchorfile>classjuce_1_1OSCArgument.html</anchorfile>
      <anchor>a36f7ae86b521b09eb57e95040115779e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int32</type>
      <name>getInt32</name>
      <anchorfile>classjuce_1_1OSCArgument.html</anchorfile>
      <anchor>a89f680ec0335c72bda78939082a1dc87</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getFloat32</name>
      <anchorfile>classjuce_1_1OSCArgument.html</anchorfile>
      <anchor>a9b115f4d2bf246b5178a2dfb1a839525</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>getString</name>
      <anchorfile>classjuce_1_1OSCArgument.html</anchorfile>
      <anchor>a20e73ba8f29ba90a6b66b7d8d95518d4</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const MemoryBlock &amp;</type>
      <name>getBlob</name>
      <anchorfile>classjuce_1_1OSCArgument.html</anchorfile>
      <anchor>af3d6f36cee9251f7c590bf061979425f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>juce::OSCAddress</name>
    <filename>classjuce_1_1OSCAddress.html</filename>
    <member kind="function">
      <type></type>
      <name>OSCAddress</name>
      <anchorfile>classjuce_1_1OSCAddress.html</anchorfile>
      <anchor>a786bb7f1de73034edaad98e2af45227d</anchor>
      <arglist>(const String &amp;address)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OSCAddress</name>
      <anchorfile>classjuce_1_1OSCAddress.html</anchorfile>
      <anchor>ab85a6b6ef2c24731e8409a24b61550bf</anchor>
      <arglist>(const char *address)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classjuce_1_1OSCAddress.html</anchorfile>
      <anchor>a678e7720435fc337e1cf2df2b6f8740e</anchor>
      <arglist>(const OSCAddress &amp;other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classjuce_1_1OSCAddress.html</anchorfile>
      <anchor>a83c872e225c52bb7b2a9d91334de53f2</anchor>
      <arglist>(const OSCAddress &amp;other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>toString</name>
      <anchorfile>classjuce_1_1OSCAddress.html</anchorfile>
      <anchor>a2a79852e9bf2f7185b0856d09e7dbf6d</anchor>
      <arglist>() const noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>juce::OSCAddressPattern</name>
    <filename>classjuce_1_1OSCAddressPattern.html</filename>
    <member kind="function">
      <type></type>
      <name>OSCAddressPattern</name>
      <anchorfile>classjuce_1_1OSCAddressPattern.html</anchorfile>
      <anchor>aa423da00ab2289d60f722ebc09df5680</anchor>
      <arglist>(const String &amp;address)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OSCAddressPattern</name>
      <anchorfile>classjuce_1_1OSCAddressPattern.html</anchorfile>
      <anchor>a7e4ba73c31d877fdd01900cb8addb728</anchor>
      <arglist>(const char *address)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classjuce_1_1OSCAddressPattern.html</anchorfile>
      <anchor>ae726954645b9fcba965d2a7cb2301bf3</anchor>
      <arglist>(const OSCAddressPattern &amp;other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classjuce_1_1OSCAddressPattern.html</anchorfile>
      <anchor>a792007a0d2a8e5ee78587a856c8bb846</anchor>
      <arglist>(const OSCAddressPattern &amp;other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>matches</name>
      <anchorfile>classjuce_1_1OSCAddressPattern.html</anchorfile>
      <anchor>a3108e51f73613e208234650d6fe064ab</anchor>
      <arglist>(const OSCAddress &amp;address) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>containsWildcards</name>
      <anchorfile>classjuce_1_1OSCAddressPattern.html</anchorfile>
      <anchor>a741131af17efacc0211d438e2577ed69</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>toString</name>
      <anchorfile>classjuce_1_1OSCAddressPattern.html</anchorfile>
      <anchor>ae8ef79286898efeecb6eb0698135d648</anchor>
      <arglist>() const noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>juce::OSCMessage</name>
    <filename>classjuce_1_1OSCMessage.html</filename>
    <member kind="function">
      <type></type>
      <name>OSCMessage</name>
      <anchorfile>classjuce_1_1OSCMessage.html</anchorfile>
      <anchor>a73acb1582b0137ccb660e748ae680d65</anchor>
      <arglist>(const OSCAddressPattern &amp;ap) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OSCMessage</name>
      <anchorfile>classjuce_1_1OSCMessage.html</anchorfile>
      <anchor>af6c3599f02b75ef3ef4a86090fa1d7a4</anchor>
      <arglist>(const OSCAddressPattern &amp;ap, Arg1 &amp;&amp;arg1, Args &amp;&amp;...args)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAddressPattern</name>
      <anchorfile>classjuce_1_1OSCMessage.html</anchorfile>
      <anchor>a43f96fe553cc2b65abc0b62218da2b08</anchor>
      <arglist>(const OSCAddressPattern &amp;ap) noexcept</arglist>
    </member>
    <member kind="function">
      <type>OSCAddressPattern</type>
      <name>getAddressPattern</name>
      <anchorfile>classjuce_1_1OSCMessage.html</anchorfile>
      <anchor>a7790ff308aa6410dd55c9cbc967a6a97</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>classjuce_1_1OSCMessage.html</anchorfile>
      <anchor>aca8062cbf4e7e19e4c601c90984a589a</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEmpty</name>
      <anchorfile>classjuce_1_1OSCMessage.html</anchorfile>
      <anchor>a913994849deee242fe46c31d9b2f95a6</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>OSCArgument &amp;</type>
      <name>operator[]</name>
      <anchorfile>classjuce_1_1OSCMessage.html</anchorfile>
      <anchor>ae2f3e81a83a870e43ef312a379a8ccd2</anchor>
      <arglist>(const int i) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>OSCArgument *</type>
      <name>begin</name>
      <anchorfile>classjuce_1_1OSCMessage.html</anchorfile>
      <anchor>a81f4060b3e1c6dce584dc5944f60010b</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>OSCArgument *</type>
      <name>end</name>
      <anchorfile>classjuce_1_1OSCMessage.html</anchorfile>
      <anchor>a56744e7a35bb9e3b7b6d564e93fae701</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classjuce_1_1OSCMessage.html</anchorfile>
      <anchor>a8e14790255490da119578eded3338740</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addInt32</name>
      <anchorfile>classjuce_1_1OSCMessage.html</anchorfile>
      <anchor>a044fe1a285d8286dfe05108bdc0283de</anchor>
      <arglist>(int32 value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addFloat32</name>
      <anchorfile>classjuce_1_1OSCMessage.html</anchorfile>
      <anchor>a3cd2c0375080f90f4017adcad121dde4</anchor>
      <arglist>(float value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addString</name>
      <anchorfile>classjuce_1_1OSCMessage.html</anchorfile>
      <anchor>a24b4b528c609d89cc4471e54cc8191dd</anchor>
      <arglist>(const String &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addBlob</name>
      <anchorfile>classjuce_1_1OSCMessage.html</anchorfile>
      <anchor>a478d0374aa8ac2ec1733e817f4df8eca</anchor>
      <arglist>(const MemoryBlock &amp;blob)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addArgument</name>
      <anchorfile>classjuce_1_1OSCMessage.html</anchorfile>
      <anchor>ac6f8a59be6f0073b9c4d5c98da928641</anchor>
      <arglist>(OSCArgument argument)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>juce::OSCBundle</name>
    <filename>classjuce_1_1OSCBundle.html</filename>
    <class kind="class">juce::OSCBundle::Element</class>
    <member kind="function">
      <type></type>
      <name>OSCBundle</name>
      <anchorfile>classjuce_1_1OSCBundle.html</anchorfile>
      <anchor>a997e98388f7a62201b81d8a2ef0c91d1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OSCBundle</name>
      <anchorfile>classjuce_1_1OSCBundle.html</anchorfile>
      <anchor>a1bef8683893b6d822783ec1e13569299</anchor>
      <arglist>(OSCTimeTag timeTag)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTimeTag</name>
      <anchorfile>classjuce_1_1OSCBundle.html</anchorfile>
      <anchor>a78544dc004d7b57b4ad94b1c9e1cea37</anchor>
      <arglist>(OSCTimeTag newTimeTag) noexcept</arglist>
    </member>
    <member kind="function">
      <type>OSCTimeTag</type>
      <name>getTimeTag</name>
      <anchorfile>classjuce_1_1OSCBundle.html</anchorfile>
      <anchor>a0251a87769ca9d5d20854a30d42f46d1</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>classjuce_1_1OSCBundle.html</anchorfile>
      <anchor>a9b375a7ce46e2d3398ae28cb4e778682</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEmpty</name>
      <anchorfile>classjuce_1_1OSCBundle.html</anchorfile>
      <anchor>a469b7467b1f12c1a35c398595999046a</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>OSCBundle::Element &amp;</type>
      <name>operator[]</name>
      <anchorfile>classjuce_1_1OSCBundle.html</anchorfile>
      <anchor>aa54e23aa90147a0c0ca40a2ecfb85819</anchor>
      <arglist>(const int i) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addElement</name>
      <anchorfile>classjuce_1_1OSCBundle.html</anchorfile>
      <anchor>a9af65375e35afed2a33b8867a76bcc50</anchor>
      <arglist>(const OSCBundle::Element &amp;element)</arglist>
    </member>
    <member kind="function">
      <type>OSCBundle::Element *</type>
      <name>begin</name>
      <anchorfile>classjuce_1_1OSCBundle.html</anchorfile>
      <anchor>a0aef1e5ef2bdacc3f998d7003f0b9a45</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>OSCBundle::Element *</type>
      <name>end</name>
      <anchorfile>classjuce_1_1OSCBundle.html</anchorfile>
      <anchor>a3eed4aa97c5e1e81b4610575351aff5c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>juce::OSCBundle::Element</name>
    <filename>classjuce_1_1OSCBundle_1_1Element.html</filename>
    <member kind="function">
      <type></type>
      <name>Element</name>
      <anchorfile>classjuce_1_1OSCBundle_1_1Element.html</anchorfile>
      <anchor>a92d47b09cd7967b48dee572b7e4b2fb2</anchor>
      <arglist>(OSCMessage message)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Element</name>
      <anchorfile>classjuce_1_1OSCBundle_1_1Element.html</anchorfile>
      <anchor>aed5f1d0ebe7b9d29cd19499ed7b5a9b5</anchor>
      <arglist>(OSCBundle bundle)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Element</name>
      <anchorfile>classjuce_1_1OSCBundle_1_1Element.html</anchorfile>
      <anchor>aa8cd0697df7e1f5cc0f69e09a8d2ece6</anchor>
      <arglist>(const Element &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Element</name>
      <anchorfile>classjuce_1_1OSCBundle_1_1Element.html</anchorfile>
      <anchor>afb72b716b87f40337adaf780a02ac8f7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isMessage</name>
      <anchorfile>classjuce_1_1OSCBundle_1_1Element.html</anchorfile>
      <anchor>a7e48bd74b486b8f043ec3ef6cde265d4</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isBundle</name>
      <anchorfile>classjuce_1_1OSCBundle_1_1Element.html</anchorfile>
      <anchor>a05e59c3c2dccf94abf66b0170f6277f7</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const OSCMessage &amp;</type>
      <name>getMessage</name>
      <anchorfile>classjuce_1_1OSCBundle_1_1Element.html</anchorfile>
      <anchor>a7a77f3759f52dca29f404cd713de9289</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const OSCBundle &amp;</type>
      <name>getBundle</name>
      <anchorfile>classjuce_1_1OSCBundle_1_1Element.html</anchorfile>
      <anchor>a1e69b39672dccdc8842d4427da1759aa</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>juce::OSCReceiver</name>
    <filename>classjuce_1_1OSCReceiver.html</filename>
    <class kind="class">juce::OSCReceiver::Listener</class>
    <class kind="class">juce::OSCReceiver::ListenerWithOSCAddress</class>
    <class kind="struct">juce::OSCReceiver::MessageLoopCallback</class>
    <class kind="struct">juce::OSCReceiver::RealtimeCallback</class>
    <member kind="typedef">
      <type>std::function&lt; void(const char *data, int dataSize)&gt;</type>
      <name>FormatErrorHandler</name>
      <anchorfile>classjuce_1_1OSCReceiver.html</anchorfile>
      <anchor>a6b54ac3dbe870fa6bd6ff10f3d645b06</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OSCReceiver</name>
      <anchorfile>classjuce_1_1OSCReceiver.html</anchorfile>
      <anchor>a34b093b8a12921e5462fb582cd386c34</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~OSCReceiver</name>
      <anchorfile>classjuce_1_1OSCReceiver.html</anchorfile>
      <anchor>a2a4ca50cec25d4ca48dc86898637fa64</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>connect</name>
      <anchorfile>classjuce_1_1OSCReceiver.html</anchorfile>
      <anchor>a0073e510b8a7ed219c5113f23229d93c</anchor>
      <arglist>(int portNumber)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>disconnect</name>
      <anchorfile>classjuce_1_1OSCReceiver.html</anchorfile>
      <anchor>a34b7522c53666766299e007384449a10</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addListener</name>
      <anchorfile>classjuce_1_1OSCReceiver.html</anchorfile>
      <anchor>aa16fdab50d46ca1539b5de3e167e1a12</anchor>
      <arglist>(Listener&lt; MessageLoopCallback &gt; *listenerToAdd)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addListener</name>
      <anchorfile>classjuce_1_1OSCReceiver.html</anchorfile>
      <anchor>a302fa49afcb6c86486eed5d55b1a81d5</anchor>
      <arglist>(Listener&lt; RealtimeCallback &gt; *listenerToAdd)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addListener</name>
      <anchorfile>classjuce_1_1OSCReceiver.html</anchorfile>
      <anchor>a1758a6b47795a6bea8c0a4df4ca2c0cb</anchor>
      <arglist>(ListenerWithOSCAddress&lt; MessageLoopCallback &gt; *listenerToAdd, OSCAddress addressToMatch)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addListener</name>
      <anchorfile>classjuce_1_1OSCReceiver.html</anchorfile>
      <anchor>abdbb4d426db0452fcbc971901dc34f73</anchor>
      <arglist>(ListenerWithOSCAddress&lt; RealtimeCallback &gt; *listenerToAdd, OSCAddress addressToMatch)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeListener</name>
      <anchorfile>classjuce_1_1OSCReceiver.html</anchorfile>
      <anchor>acbdb582624671994e5922ad1b2e10990</anchor>
      <arglist>(Listener&lt; MessageLoopCallback &gt; *listenerToRemove)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeListener</name>
      <anchorfile>classjuce_1_1OSCReceiver.html</anchorfile>
      <anchor>af0b2b6365be783418c53e0e716cfd895</anchor>
      <arglist>(Listener&lt; RealtimeCallback &gt; *listenerToRemove)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeListener</name>
      <anchorfile>classjuce_1_1OSCReceiver.html</anchorfile>
      <anchor>ad6a489aae77e5ef8e92d88982f4063d1</anchor>
      <arglist>(ListenerWithOSCAddress&lt; MessageLoopCallback &gt; *listenerToRemove)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeListener</name>
      <anchorfile>classjuce_1_1OSCReceiver.html</anchorfile>
      <anchor>ade5ecf9c9afb5cb4f75894c8bc928a1e</anchor>
      <arglist>(ListenerWithOSCAddress&lt; RealtimeCallback &gt; *listenerToRemove)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>registerFormatErrorHandler</name>
      <anchorfile>classjuce_1_1OSCReceiver.html</anchorfile>
      <anchor>a5e4506482c0ae2394b7d54c72c38bcc1</anchor>
      <arglist>(FormatErrorHandler handler)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>juce::OSCReceiver::Listener</name>
    <filename>classjuce_1_1OSCReceiver_1_1Listener.html</filename>
    <templarg></templarg>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Listener</name>
      <anchorfile>classjuce_1_1OSCReceiver_1_1Listener.html</anchorfile>
      <anchor>aeeeab81d2ddafdc5bee8aa61c5066a11</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>oscMessageReceived</name>
      <anchorfile>classjuce_1_1OSCReceiver_1_1Listener.html</anchorfile>
      <anchor>a1792fc319ddf8fc5e9cff45de66ebbd1</anchor>
      <arglist>(const OSCMessage &amp;message)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>oscBundleReceived</name>
      <anchorfile>classjuce_1_1OSCReceiver_1_1Listener.html</anchorfile>
      <anchor>aba3efdcce19f557347cd13c813505909</anchor>
      <arglist>(const OSCBundle &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>juce::OSCReceiver::ListenerWithOSCAddress</name>
    <filename>classjuce_1_1OSCReceiver_1_1ListenerWithOSCAddress.html</filename>
    <templarg></templarg>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ListenerWithOSCAddress</name>
      <anchorfile>classjuce_1_1OSCReceiver_1_1ListenerWithOSCAddress.html</anchorfile>
      <anchor>a32e784996c1ddcb464fc2fd020e375ef</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>oscMessageReceived</name>
      <anchorfile>classjuce_1_1OSCReceiver_1_1ListenerWithOSCAddress.html</anchorfile>
      <anchor>a70784ce32a51b6b164c96e41241d3a1c</anchor>
      <arglist>(const OSCMessage &amp;message)=0</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>juce::OSCReceiver::MessageLoopCallback</name>
    <filename>structjuce_1_1OSCReceiver_1_1MessageLoopCallback.html</filename>
  </compound>
  <compound kind="struct">
    <name>juce::OSCReceiver::RealtimeCallback</name>
    <filename>structjuce_1_1OSCReceiver_1_1RealtimeCallback.html</filename>
  </compound>
  <compound kind="class">
    <name>juce::OSCSender</name>
    <filename>classjuce_1_1OSCSender.html</filename>
    <member kind="function">
      <type></type>
      <name>OSCSender</name>
      <anchorfile>classjuce_1_1OSCSender.html</anchorfile>
      <anchor>a9988cbe92523383a14ab8e6a6962684f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~OSCSender</name>
      <anchorfile>classjuce_1_1OSCSender.html</anchorfile>
      <anchor>a99703c5cba34dd1f175f453cb0e57212</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>connect</name>
      <anchorfile>classjuce_1_1OSCSender.html</anchorfile>
      <anchor>ac98729dc796e9f92abb2a672189ee752</anchor>
      <arglist>(const String &amp;targetHostName, int targetPortNumber)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>disconnect</name>
      <anchorfile>classjuce_1_1OSCSender.html</anchorfile>
      <anchor>a5b40d6b5fb090995ecc9c97285bedefa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>send</name>
      <anchorfile>classjuce_1_1OSCSender.html</anchorfile>
      <anchor>af202e6af9bff4145834df6a0d1e39ca1</anchor>
      <arglist>(const OSCMessage &amp;message)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>send</name>
      <anchorfile>classjuce_1_1OSCSender.html</anchorfile>
      <anchor>a324e37a9a8c3b0b83bfed74fc0d8688a</anchor>
      <arglist>(const OSCBundle &amp;bundle)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>sendToIPAddress</name>
      <anchorfile>classjuce_1_1OSCSender.html</anchorfile>
      <anchor>ad3ea490f8f4b260c32689cbc618ba473</anchor>
      <arglist>(const String &amp;targetIPAddress, int targetPortNumber, const OSCMessage &amp;message)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>sendToIPAddress</name>
      <anchorfile>classjuce_1_1OSCSender.html</anchorfile>
      <anchor>ab196eb7695bfda295a0ac9834eb6b5c6</anchor>
      <arglist>(const String &amp;targetIPAddress, int targetPortNumber, const OSCBundle &amp;bundle)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>send</name>
      <anchorfile>classjuce_1_1OSCSender.html</anchorfile>
      <anchor>a6227e3fd1b498acbe8ffd671983fc177</anchor>
      <arglist>(const OSCAddressPattern &amp;address, Args &amp;&amp;...args)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>sendToIPAddress</name>
      <anchorfile>classjuce_1_1OSCSender.html</anchorfile>
      <anchor>a8e83a9df852a8475ab1d2e0f73913bff</anchor>
      <arglist>(const String &amp;targetIPAddress, int targetPortNumber, const OSCAddressPattern &amp;address, Args &amp;&amp;...args)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>juce::littlefoot</name>
    <filename>namespacejuce_1_1littlefoot.html</filename>
    <class kind="struct">juce::littlefoot::NativeFunction</class>
    <class kind="struct">juce::littlefoot::Program</class>
    <class kind="struct">juce::littlefoot::Runner</class>
    <class kind="struct">juce::littlefoot::Compiler</class>
    <class kind="struct">juce::littlefoot::LittleFootRemoteHeap</class>
    <member kind="typedef">
      <type>char</type>
      <name>int8</name>
      <anchorfile>namespacejuce_1_1littlefoot.html</anchorfile>
      <anchor>a1925c497cab90d639873261ac38181ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned char</type>
      <name>uint8</name>
      <anchorfile>namespacejuce_1_1littlefoot.html</anchorfile>
      <anchor>ac151ec550bdd1d11a90219badc68998d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>short</type>
      <name>int16</name>
      <anchorfile>namespacejuce_1_1littlefoot.html</anchorfile>
      <anchor>a93d8168ea7c301b733768ff7017b76c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned short</type>
      <name>uint16</name>
      <anchorfile>namespacejuce_1_1littlefoot.html</anchorfile>
      <anchor>a8e49a863d4330f68e822ff827c244005</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>int</type>
      <name>int32</name>
      <anchorfile>namespacejuce_1_1littlefoot.html</anchorfile>
      <anchor>af357d20994b45cbbdc1bfdcccb24e171</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned int</type>
      <name>uint32</name>
      <anchorfile>namespacejuce_1_1littlefoot.html</anchorfile>
      <anchor>a6a19808b76c5ad46952071fe0246cd67</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>int16</type>
      <name>FunctionID</name>
      <anchorfile>namespacejuce_1_1littlefoot.html</anchorfile>
      <anchor>afcba142243bbec868407a7c3db0bab73</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>OpCode</name>
      <anchorfile>namespacejuce_1_1littlefoot.html</anchorfile>
      <anchor>a99011f0653cd75bd2e1cd71410250fc9</anchor>
      <arglist></arglist>
      <enumvalue file="namespacejuce_1_1littlefoot.html" anchor="a99011f0653cd75bd2e1cd71410250fc9a3b9f57296fe8c4f516cf9986ad5442ae">LITTLEFOOT_OP</enumvalue>
      <enumvalue file="namespacejuce_1_1littlefoot.html" anchor="a99011f0653cd75bd2e1cd71410250fc9a99a126a28a372030399847823348fed8">endOfOpcodes</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>Type</name>
      <anchorfile>namespacejuce_1_1littlefoot.html</anchorfile>
      <anchor>aaff5d0af0320619fa775b5e3826ddc94</anchor>
      <arglist></arglist>
      <enumvalue file="namespacejuce_1_1littlefoot.html" anchor="aaff5d0af0320619fa775b5e3826ddc94ada11add8aadb6bd651f74d36402f4d66">void_</enumvalue>
      <enumvalue file="namespacejuce_1_1littlefoot.html" anchor="aaff5d0af0320619fa775b5e3826ddc94ad7488204e92ed01986284bef5650eb53">int_</enumvalue>
      <enumvalue file="namespacejuce_1_1littlefoot.html" anchor="aaff5d0af0320619fa775b5e3826ddc94a467afb5838aa377d55cce81f84c5512b">bool_</enumvalue>
      <enumvalue file="namespacejuce_1_1littlefoot.html" anchor="aaff5d0af0320619fa775b5e3826ddc94aefe6d5085c67bc38cd3746f2dc8013e1">float_</enumvalue>
    </member>
  </compound>
  <compound kind="struct">
    <name>juce::littlefoot::NativeFunction</name>
    <filename>structjuce_1_1littlefoot_1_1NativeFunction.html</filename>
    <member kind="typedef">
      <type>int32(*)(void *, const int32 *)</type>
      <name>ImplementationFunction</name>
      <anchorfile>structjuce_1_1littlefoot_1_1NativeFunction.html</anchorfile>
      <anchor>acea89a2c3c1a2002e2e2f66a031910dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NativeFunction</name>
      <anchorfile>structjuce_1_1littlefoot_1_1NativeFunction.html</anchorfile>
      <anchor>aca81afe22a00e8317f44b8e3335e3866</anchor>
      <arglist>(const char *nameAndArgumentTypes, ImplementationFunction fn) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static FunctionID</type>
      <name>createID</name>
      <anchorfile>structjuce_1_1littlefoot_1_1NativeFunction.html</anchorfile>
      <anchor>ac44aa14865892bd70667d434812a1730</anchor>
      <arglist>(const char *nameAndArgTypes) noexcept</arglist>
    </member>
    <member kind="variable">
      <type>const char *</type>
      <name>nameAndArguments</name>
      <anchorfile>structjuce_1_1littlefoot_1_1NativeFunction.html</anchorfile>
      <anchor>aea2ed21e74b709de4967bc07fe64d14f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ImplementationFunction</type>
      <name>function</name>
      <anchorfile>structjuce_1_1littlefoot_1_1NativeFunction.html</anchorfile>
      <anchor>a168e97a41a64a85021568d9de6d50a47</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FunctionID</type>
      <name>functionID</name>
      <anchorfile>structjuce_1_1littlefoot_1_1NativeFunction.html</anchorfile>
      <anchor>aa89688026baa6a59c2ca057cd759d0a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Type</type>
      <name>returnType</name>
      <anchorfile>structjuce_1_1littlefoot_1_1NativeFunction.html</anchorfile>
      <anchor>a0200f4987591f077483faf154a7bd51b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint8</type>
      <name>numArgs</name>
      <anchorfile>structjuce_1_1littlefoot_1_1NativeFunction.html</anchorfile>
      <anchor>a3711f8cebdf8be6341db52fbdb4f89f1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>juce::littlefoot::Program</name>
    <filename>structjuce_1_1littlefoot_1_1Program.html</filename>
    <member kind="function">
      <type></type>
      <name>Program</name>
      <anchorfile>structjuce_1_1littlefoot_1_1Program.html</anchorfile>
      <anchor>a47ca040465709a8ccd8013dc03aa6682</anchor>
      <arglist>(const void *data, uint32 totalMemorySize) noexcept</arglist>
    </member>
    <member kind="function">
      <type>uint16</type>
      <name>getStoredChecksum</name>
      <anchorfile>structjuce_1_1littlefoot_1_1Program.html</anchorfile>
      <anchor>a6a53cf30ba4e6b87df1fafac0f95e9db</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>uint16</type>
      <name>calculateChecksum</name>
      <anchorfile>structjuce_1_1littlefoot_1_1Program.html</anchorfile>
      <anchor>af50b314f128390199105c24c8068a243</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>checksumMatches</name>
      <anchorfile>structjuce_1_1littlefoot_1_1Program.html</anchorfile>
      <anchor>a14bc256e9f7c2656daa5f12c1cebe328</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>uint32</type>
      <name>getProgramSize</name>
      <anchorfile>structjuce_1_1littlefoot_1_1Program.html</anchorfile>
      <anchor>acbf5d0e18d8af33f6dbe7684308f4a07</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>uint32</type>
      <name>getNumFunctions</name>
      <anchorfile>structjuce_1_1littlefoot_1_1Program.html</anchorfile>
      <anchor>ac986aebc9050e8f23577ca95f9090032</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>FunctionID</type>
      <name>getFunctionID</name>
      <anchorfile>structjuce_1_1littlefoot_1_1Program.html</anchorfile>
      <anchor>a461a36953ccef919245b18c329fc6ed7</anchor>
      <arglist>(uint32 functionIndex) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const uint8 *</type>
      <name>getFunctionStartAddress</name>
      <anchorfile>structjuce_1_1littlefoot_1_1Program.html</anchorfile>
      <anchor>a475c7a3187db4b0d78f1f4cbb859982c</anchor>
      <arglist>(uint32 functionIndex) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const uint8 *</type>
      <name>getFunctionEndAddress</name>
      <anchorfile>structjuce_1_1littlefoot_1_1Program.html</anchorfile>
      <anchor>a91101e77285b2d8e9f6d7f310df1784e</anchor>
      <arglist>(uint32 functionIndex) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>uint16</type>
      <name>getNumGlobals</name>
      <anchorfile>structjuce_1_1littlefoot_1_1Program.html</anchorfile>
      <anchor>af11c3cad659c1dea6c18a397972c082e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>uint16</type>
      <name>getHeapSizeBytes</name>
      <anchorfile>structjuce_1_1littlefoot_1_1Program.html</anchorfile>
      <anchor>a2547d70543dfc2868a5602a2d59e392b</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static float</type>
      <name>intToFloat</name>
      <anchorfile>structjuce_1_1littlefoot_1_1Program.html</anchorfile>
      <anchor>a68a22227b1310411a4272545671471d9</anchor>
      <arglist>(int32 value) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int32</type>
      <name>floatToInt</name>
      <anchorfile>structjuce_1_1littlefoot_1_1Program.html</anchorfile>
      <anchor>ab5336f1824b7b485a0f49b8ff8393701</anchor>
      <arglist>(float value) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int16</type>
      <name>readInt16</name>
      <anchorfile>structjuce_1_1littlefoot_1_1Program.html</anchorfile>
      <anchor>a7a1af17b3ec4d58b39295aeca5dfa65e</anchor>
      <arglist>(const uint8 *d) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int32</type>
      <name>readInt32</name>
      <anchorfile>structjuce_1_1littlefoot_1_1Program.html</anchorfile>
      <anchor>a03709c8bb543e8a9965739f337b961d5</anchor>
      <arglist>(const uint8 *d) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>writeInt16</name>
      <anchorfile>structjuce_1_1littlefoot_1_1Program.html</anchorfile>
      <anchor>a1c1f032c9c2e1ded2652ce20e216a694</anchor>
      <arglist>(uint8 *d, int16 v) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>writeInt32</name>
      <anchorfile>structjuce_1_1littlefoot_1_1Program.html</anchorfile>
      <anchor>a4c7ae81de3d5b4544321bf911c838d69</anchor>
      <arglist>(uint8 *d, int32 v) noexcept</arglist>
    </member>
    <member kind="variable">
      <type>const uint8 *</type>
      <name>programStart</name>
      <anchorfile>structjuce_1_1littlefoot_1_1Program.html</anchorfile>
      <anchor>a51d3936e31a37ffba16cdf68efd040a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint32</type>
      <name>maxProgramSize</name>
      <anchorfile>structjuce_1_1littlefoot_1_1Program.html</anchorfile>
      <anchor>a9b52405d6d6e2c36c8fdfb72354feb3e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr uint32</type>
      <name>programHeaderSize</name>
      <anchorfile>structjuce_1_1littlefoot_1_1Program.html</anchorfile>
      <anchor>aacf9d0d4c98d46165e48af5d02fd1adb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>juce::littlefoot::Runner</name>
    <filename>structjuce_1_1littlefoot_1_1Runner.html</filename>
    <templarg>programAndHeapSpace</templarg>
    <templarg>stackAndGlobalsSpace</templarg>
    <class kind="struct">juce::littlefoot::Runner::FunctionExecutionContext</class>
    <member kind="enumeration">
      <type></type>
      <name>ErrorCode</name>
      <anchorfile>structjuce_1_1littlefoot_1_1Runner.html</anchorfile>
      <anchor>abc6ea9afd46eeba408824c5f1c69294b</anchor>
      <arglist></arglist>
      <enumvalue file="structjuce_1_1littlefoot_1_1Runner.html" anchor="abc6ea9afd46eeba408824c5f1c69294ba444bcb3a3fcf8389296c49467f27e1d6">ok</enumvalue>
      <enumvalue file="structjuce_1_1littlefoot_1_1Runner.html" anchor="abc6ea9afd46eeba408824c5f1c69294ba6831a2bccdfef0b5731f2dd78e8f6d60">executionTimedOut</enumvalue>
      <enumvalue file="structjuce_1_1littlefoot_1_1Runner.html" anchor="abc6ea9afd46eeba408824c5f1c69294ba447753cb7b28e87df3e72384caf41dcf">unknownInstruction</enumvalue>
      <enumvalue file="structjuce_1_1littlefoot_1_1Runner.html" anchor="abc6ea9afd46eeba408824c5f1c69294baefab200f4775c7a6f73743d4dcd6681a">stackOverflow</enumvalue>
      <enumvalue file="structjuce_1_1littlefoot_1_1Runner.html" anchor="abc6ea9afd46eeba408824c5f1c69294ba43646f98320e403e1b7e0e94f96722cf">stackUnderflow</enumvalue>
      <enumvalue file="structjuce_1_1littlefoot_1_1Runner.html" anchor="abc6ea9afd46eeba408824c5f1c69294ba845cdf34a636fe3fba607090f1f4039c">illegalAddress</enumvalue>
      <enumvalue file="structjuce_1_1littlefoot_1_1Runner.html" anchor="abc6ea9afd46eeba408824c5f1c69294ba3078934da80939add9cdd5e203d938d0">divisionByZero</enumvalue>
      <enumvalue file="structjuce_1_1littlefoot_1_1Runner.html" anchor="abc6ea9afd46eeba408824c5f1c69294baf1ab6f6a6dfd9f6248aacb40fff4ca38">unknownFunction</enumvalue>
    </member>
    <member kind="function">
      <type></type>
      <name>Runner</name>
      <anchorfile>structjuce_1_1littlefoot_1_1Runner.html</anchorfile>
      <anchor>aaf5afea24c814062700d6557b746a71f</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNativeFunctions</name>
      <anchorfile>structjuce_1_1littlefoot_1_1Runner.html</anchorfile>
      <anchor>ac50d143f46dc4abee59d63d4c0275189</anchor>
      <arglist>(const NativeFunction *functions, int numFunctions, void *userDataForCallback) noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumNativeFunctions</name>
      <anchorfile>structjuce_1_1littlefoot_1_1Runner.html</anchorfile>
      <anchor>adba9d872442566dcb8e4fb5202d0d750</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const NativeFunction &amp;</type>
      <name>getNativeFunction</name>
      <anchorfile>structjuce_1_1littlefoot_1_1Runner.html</anchorfile>
      <anchor>a74180b173bc1e9d1ac08cb53361bf7dc</anchor>
      <arglist>(int index) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>structjuce_1_1littlefoot_1_1Runner.html</anchorfile>
      <anchor>a0823f3445611c79b564e26d441a88b5f</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>ErrorCode</type>
      <name>callFunction</name>
      <anchorfile>structjuce_1_1littlefoot_1_1Runner.html</anchorfile>
      <anchor>ab9f36b4c853488c5bbe48b6e689d2243</anchor>
      <arglist>(const char *functionSignature) noexcept</arglist>
    </member>
    <member kind="function">
      <type>ErrorCode</type>
      <name>callFunction</name>
      <anchorfile>structjuce_1_1littlefoot_1_1Runner.html</anchorfile>
      <anchor>a7cb33344cecc1a5e4ee357955c51ad68</anchor>
      <arglist>(FunctionID function) noexcept</arglist>
    </member>
    <member kind="function">
      <type>uint8 *</type>
      <name>getProgramAndDataStart</name>
      <anchorfile>structjuce_1_1littlefoot_1_1Runner.html</anchorfile>
      <anchor>af0c5e5d6c7af6fd7ae1498d24bf1fca2</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>uint8 *</type>
      <name>getProgramAndDataEnd</name>
      <anchorfile>structjuce_1_1littlefoot_1_1Runner.html</anchorfile>
      <anchor>af7fca77843979299fb33abb0deea9abf</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>uint32</type>
      <name>getProgramAndDataSize</name>
      <anchorfile>structjuce_1_1littlefoot_1_1Runner.html</anchorfile>
      <anchor>a2951b9c12e7acc2e5ca9c1601ae592e8</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>uint8 *</type>
      <name>getProgramHeapStart</name>
      <anchorfile>structjuce_1_1littlefoot_1_1Runner.html</anchorfile>
      <anchor>a5d4293e68dfc02cb383bd99487e814f5</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>uint8 *</type>
      <name>getProgramHeapEnd</name>
      <anchorfile>structjuce_1_1littlefoot_1_1Runner.html</anchorfile>
      <anchor>a5f4dc5954db26c0610dd1c9483439ff4</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>uint16</type>
      <name>getProgramHeapSize</name>
      <anchorfile>structjuce_1_1littlefoot_1_1Runner.html</anchorfile>
      <anchor>a6c4f89a4af79cb03b893eb876f10a58a</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isProgramValid</name>
      <anchorfile>structjuce_1_1littlefoot_1_1Runner.html</anchorfile>
      <anchor>a4f16ccecd551e87f07ffe8f65f1df497</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDataByte</name>
      <anchorfile>structjuce_1_1littlefoot_1_1Runner.html</anchorfile>
      <anchor>abdd49f315febbf4d9b032f29d823d818</anchor>
      <arglist>(uint32 index, uint8 value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setHeapByte</name>
      <anchorfile>structjuce_1_1littlefoot_1_1Runner.html</anchorfile>
      <anchor>a7884aa88f7deb1db0b4ec0b4d1a4990f</anchor>
      <arglist>(uint32 index, uint8 value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>uint8</type>
      <name>getHeapByte</name>
      <anchorfile>structjuce_1_1littlefoot_1_1Runner.html</anchorfile>
      <anchor>a44b6e223f5b3dbc18e332ed95e7129d0</anchor>
      <arglist>(uint32 index) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>uint32</type>
      <name>getHeapBits</name>
      <anchorfile>structjuce_1_1littlefoot_1_1Runner.html</anchorfile>
      <anchor>a0e291041cb870a677f4d5a75d4f0cf56</anchor>
      <arglist>(uint32 startBit, uint32 numBits) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int32</type>
      <name>setHeapInt</name>
      <anchorfile>structjuce_1_1littlefoot_1_1Runner.html</anchorfile>
      <anchor>ac1773b88a6ded03b4bd2f9212a4ba54c</anchor>
      <arglist>(uint32 byteOffset, uint32 value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>int32</type>
      <name>getHeapInt</name>
      <anchorfile>structjuce_1_1littlefoot_1_1Runner.html</anchorfile>
      <anchor>a3356f8f85b242c8b1c3d7a57095e3ff7</anchor>
      <arglist>(uint32 byteOffset) const noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static uint32</type>
      <name>getMaximumProgramSize</name>
      <anchorfile>structjuce_1_1littlefoot_1_1Runner.html</anchorfile>
      <anchor>a9b6d3865d2e0b30dc27d6385104bcb4e</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="variable">
      <type>uint8</type>
      <name>allMemory</name>
      <anchorfile>structjuce_1_1littlefoot_1_1Runner.html</anchorfile>
      <anchor>a06d890dc80da8d6b706ab9ba1988af32</anchor>
      <arglist>[((programAndHeapSpace+stackAndGlobalsSpace)+3)&amp;~3]</arglist>
    </member>
    <member kind="variable">
      <type>Program</type>
      <name>program</name>
      <anchorfile>structjuce_1_1littlefoot_1_1Runner.html</anchorfile>
      <anchor>a5e9967540e23c42dc6aa7769f8efda33</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr uint32</type>
      <name>totalProgramAndHeapSpace</name>
      <anchorfile>structjuce_1_1littlefoot_1_1Runner.html</anchorfile>
      <anchor>a2fa82ce74b3dc29dc4d20cb0e16d42db</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr uint32</type>
      <name>totalStackAndGlobalsSpace</name>
      <anchorfile>structjuce_1_1littlefoot_1_1Runner.html</anchorfile>
      <anchor>a33df83834a9a507830aeb1da00fab23e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>juce::littlefoot::Runner::FunctionExecutionContext</name>
    <filename>structjuce_1_1littlefoot_1_1Runner_1_1FunctionExecutionContext.html</filename>
    <member kind="function">
      <type></type>
      <name>FunctionExecutionContext</name>
      <anchorfile>structjuce_1_1littlefoot_1_1Runner_1_1FunctionExecutionContext.html</anchorfile>
      <anchor>a85c90f614693f3a3413e78d04cc08080</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FunctionExecutionContext</name>
      <anchorfile>structjuce_1_1littlefoot_1_1Runner_1_1FunctionExecutionContext.html</anchorfile>
      <anchor>a6dd0fc19c1188ee738f011b3f25f2820</anchor>
      <arglist>(const FunctionExecutionContext &amp;) noexcept=default</arglist>
    </member>
    <member kind="function">
      <type>FunctionExecutionContext &amp;</type>
      <name>operator=</name>
      <anchorfile>structjuce_1_1littlefoot_1_1Runner_1_1FunctionExecutionContext.html</anchorfile>
      <anchor>a4b82e6161da20b74beddc5d3a671567e</anchor>
      <arglist>(const FunctionExecutionContext &amp;) noexcept=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FunctionExecutionContext</name>
      <anchorfile>structjuce_1_1littlefoot_1_1Runner_1_1FunctionExecutionContext.html</anchorfile>
      <anchor>a44f16175183423ccd487376d281276d5</anchor>
      <arglist>(Runner &amp;r, const char *functionSignature) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FunctionExecutionContext</name>
      <anchorfile>structjuce_1_1littlefoot_1_1Runner_1_1FunctionExecutionContext.html</anchorfile>
      <anchor>afaadbf5ea467eaf77d40fe48cbd6f331</anchor>
      <arglist>(Runner &amp;r, FunctionID function) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>structjuce_1_1littlefoot_1_1Runner_1_1FunctionExecutionContext.html</anchorfile>
      <anchor>a6051ebcf4474095b6e6d483e5bf8ec64</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>structjuce_1_1littlefoot_1_1Runner_1_1FunctionExecutionContext.html</anchorfile>
      <anchor>afd443d7477e8a3dd13bea43b69e569fc</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setArguments</name>
      <anchorfile>structjuce_1_1littlefoot_1_1Runner_1_1FunctionExecutionContext.html</anchorfile>
      <anchor>afd8f5264e76297f997d448db57b4168c</anchor>
      <arglist>(Args...args) noexcept</arglist>
    </member>
    <member kind="function">
      <type>ErrorCode</type>
      <name>run</name>
      <anchorfile>structjuce_1_1littlefoot_1_1Runner_1_1FunctionExecutionContext.html</anchorfile>
      <anchor>ae94f9a16aa657aaa20302939e3f962af</anchor>
      <arglist>(TimeOutCheckFunction hasTimedOut) noexcept</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>juce::littlefoot::Compiler</name>
    <filename>structjuce_1_1littlefoot_1_1Compiler.html</filename>
    <member kind="function">
      <type></type>
      <name>Compiler</name>
      <anchorfile>structjuce_1_1littlefoot_1_1Compiler.html</anchorfile>
      <anchor>a2c94ab0baab3eaa963147186c420e47c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addNativeFunctions</name>
      <anchorfile>structjuce_1_1littlefoot_1_1Compiler.html</anchorfile>
      <anchor>ab741f3d9344f66b16fe9ff0c2201b40f</anchor>
      <arglist>(const char *const *functionPrototypes)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addNativeFunctions</name>
      <anchorfile>structjuce_1_1littlefoot_1_1Compiler.html</anchorfile>
      <anchor>a8f9995e8e39eaa6c67199e357e0daa6e</anchor>
      <arglist>(const RunnerType &amp;runner)</arglist>
    </member>
    <member kind="function">
      <type>Result</type>
      <name>compile</name>
      <anchorfile>structjuce_1_1littlefoot_1_1Compiler.html</anchorfile>
      <anchor>ad986ccd2daa320c014c0b2e46ab18c88</anchor>
      <arglist>(const String &amp;sourceCode, uint32 heapSizeBytesRequired)</arglist>
    </member>
    <member kind="variable">
      <type>Array&lt; uint8 &gt;</type>
      <name>compiledObjectCode</name>
      <anchorfile>structjuce_1_1littlefoot_1_1Compiler.html</anchorfile>
      <anchor>adc16bd54a946e89359517dd3ab3b97b1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>juce::littlefoot::Compiler::CodeGenerator::Marker</name>
    <filename>structjuce_1_1littlefoot_1_1Compiler_1_1CodeGenerator_1_1Marker.html</filename>
    <member kind="variable">
      <type>int</type>
      <name>index</name>
      <anchorfile>structjuce_1_1littlefoot_1_1Compiler_1_1CodeGenerator_1_1Marker.html</anchorfile>
      <anchor>ae26526657290c3a058a0fb14fcb577e3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>juce::littlefoot::Compiler::CodeGenerator::MarkerAndAddress</name>
    <filename>structjuce_1_1littlefoot_1_1Compiler_1_1CodeGenerator_1_1MarkerAndAddress.html</filename>
    <member kind="variable">
      <type>int</type>
      <name>markerIndex</name>
      <anchorfile>structjuce_1_1littlefoot_1_1Compiler_1_1CodeGenerator_1_1MarkerAndAddress.html</anchorfile>
      <anchor>acc2d3bf9091c31bd0bd2a465e2eb81da</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>address</name>
      <anchorfile>structjuce_1_1littlefoot_1_1Compiler_1_1CodeGenerator_1_1MarkerAndAddress.html</anchorfile>
      <anchor>a558c8da32fec2a909d5372b01ba756eb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>juce::littlefoot::Compiler::FunctionCall::BuiltInFunction</name>
    <filename>structjuce_1_1littlefoot_1_1Compiler_1_1FunctionCall_1_1BuiltInFunction.html</filename>
    <member kind="variable">
      <type>OpCode</type>
      <name>op</name>
      <anchorfile>structjuce_1_1littlefoot_1_1Compiler_1_1FunctionCall_1_1BuiltInFunction.html</anchorfile>
      <anchor>adc3b2f1ffd8469e593ea912a1b2f24ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Type</type>
      <name>returnType</name>
      <anchorfile>structjuce_1_1littlefoot_1_1Compiler_1_1FunctionCall_1_1BuiltInFunction.html</anchorfile>
      <anchor>a184f053b13156259fe86b7b812a552f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const char *</type>
      <name>name</name>
      <anchorfile>structjuce_1_1littlefoot_1_1Compiler_1_1FunctionCall_1_1BuiltInFunction.html</anchorfile>
      <anchor>a3fbe6cb3fdaba60e067f34a68ef54d86</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>juce::littlefoot::Compiler::Statement::Visitor</name>
    <filename>structjuce_1_1littlefoot_1_1Compiler_1_1Statement_1_1Visitor.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Visitor</name>
      <anchorfile>structjuce_1_1littlefoot_1_1Compiler_1_1Statement_1_1Visitor.html</anchorfile>
      <anchor>a12c6f50a38a5ea9c74cbebd81b9aff29</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>operator()</name>
      <anchorfile>structjuce_1_1littlefoot_1_1Compiler_1_1Statement_1_1Visitor.html</anchorfile>
      <anchor>a89e6326b660704a35958f82db8e72f66</anchor>
      <arglist>(StatementPtr)=0</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>juce::littlefoot::LittleFootRemoteHeap</name>
    <filename>structjuce_1_1littlefoot_1_1LittleFootRemoteHeap.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>LittleFootRemoteHeap</name>
      <anchorfile>structjuce_1_1littlefoot_1_1LittleFootRemoteHeap.html</anchorfile>
      <anchor>a67d2a99903e983ad2a2ca562c3d79673</anchor>
      <arglist>(uint32 blockSizeToUse) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>structjuce_1_1littlefoot_1_1LittleFootRemoteHeap.html</anchorfile>
      <anchor>aad9fc416c0df7bc15612524fab4f4986</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setByte</name>
      <anchorfile>structjuce_1_1littlefoot_1_1LittleFootRemoteHeap.html</anchorfile>
      <anchor>ab37f7d37eea5e05ef81e751435f9e7f3</anchor>
      <arglist>(size_t offset, uint8 value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBytes</name>
      <anchorfile>structjuce_1_1littlefoot_1_1LittleFootRemoteHeap.html</anchorfile>
      <anchor>a71ae54d360fab76b465b428a000fab14</anchor>
      <arglist>(size_t offset, const uint8 *data, size_t num) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBits</name>
      <anchorfile>structjuce_1_1littlefoot_1_1LittleFootRemoteHeap.html</anchorfile>
      <anchor>a3487cb7468b3b316df609563a8bf6203</anchor>
      <arglist>(uint32 startBit, uint32 numBits, uint32 value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>uint8</type>
      <name>getByte</name>
      <anchorfile>structjuce_1_1littlefoot_1_1LittleFootRemoteHeap.html</anchorfile>
      <anchor>ab46ee5e4e29593ee6a8b6c9cd7d3423a</anchor>
      <arglist>(size_t offset) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>invalidateData</name>
      <anchorfile>structjuce_1_1littlefoot_1_1LittleFootRemoteHeap.html</anchorfile>
      <anchor>af16476e6af26dc103e0f1bbc408610a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sendChanges</name>
      <anchorfile>structjuce_1_1littlefoot_1_1LittleFootRemoteHeap.html</anchorfile>
      <anchor>a69d0fd84135540b2204f103149a131fc</anchor>
      <arglist>(ImplementationClass &amp;bi)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>handleACKFromDevice</name>
      <anchorfile>structjuce_1_1littlefoot_1_1LittleFootRemoteHeap.html</anchorfile>
      <anchor>ae33ef7eb7dc3af932c6c14dbf9fe89fb</anchor>
      <arglist>(ImplementationClass &amp;bi, uint32 packetIndex) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isProgramLoaded</name>
      <anchorfile>structjuce_1_1littlefoot_1_1LittleFootRemoteHeap.html</anchorfile>
      <anchor>add5d39fb43b47f0f7e177da4ccf746e4</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="variable">
      <type>const size_t</type>
      <name>blockSize</name>
      <anchorfile>structjuce_1_1littlefoot_1_1LittleFootRemoteHeap.html</anchorfile>
      <anchor>a0834b81cdb900afa5d35804c1e553fcd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr uint16</type>
      <name>unknownByte</name>
      <anchorfile>structjuce_1_1littlefoot_1_1LittleFootRemoteHeap.html</anchorfile>
      <anchor>a4ea6c3c6de47a6b26ae0098c1a2bd5d7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>littlefoot</name>
    <filename>namespacelittlefoot.html</filename>
    <class kind="struct">littlefoot::Compiler</class>
    <class kind="struct">littlefoot::LittleFootRemoteHeap</class>
    <class kind="struct">littlefoot::NativeFunction</class>
    <class kind="struct">littlefoot::Program</class>
    <class kind="struct">littlefoot::Runner</class>
    <member kind="typedef">
      <type>char</type>
      <name>int8</name>
      <anchorfile>namespacelittlefoot.html</anchorfile>
      <anchor>a4217b8b14e3a82c19d115879172369fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned char</type>
      <name>uint8</name>
      <anchorfile>namespacelittlefoot.html</anchorfile>
      <anchor>a911a40d805ef6667f7b9ea6842af3fe7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>short</type>
      <name>int16</name>
      <anchorfile>namespacelittlefoot.html</anchorfile>
      <anchor>af97fa4639b8f2ed268359ca056868ff4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned short</type>
      <name>uint16</name>
      <anchorfile>namespacelittlefoot.html</anchorfile>
      <anchor>aab688ac828c9bbf4cfc80f684f2d522b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>int</type>
      <name>int32</name>
      <anchorfile>namespacelittlefoot.html</anchorfile>
      <anchor>aec160adbd27451c33bc7b91dc94cfa20</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned int</type>
      <name>uint32</name>
      <anchorfile>namespacelittlefoot.html</anchorfile>
      <anchor>a417dab5137c6d4ff4e23303f84099aa9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>int16</type>
      <name>FunctionID</name>
      <anchorfile>namespacelittlefoot.html</anchorfile>
      <anchor>a5f139c5c9fd4fc79b8fd203ce4725338</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>OpCode</name>
      <anchorfile>namespacelittlefoot.html</anchorfile>
      <anchor>a7007a5eb28fcc103aeeca3fe069893aa</anchor>
      <arglist></arglist>
      <enumvalue file="namespacelittlefoot.html" anchor="a7007a5eb28fcc103aeeca3fe069893aaa3b9f57296fe8c4f516cf9986ad5442ae">LITTLEFOOT_OP</enumvalue>
      <enumvalue file="namespacelittlefoot.html" anchor="a7007a5eb28fcc103aeeca3fe069893aaa99a126a28a372030399847823348fed8">endOfOpcodes</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>Type</name>
      <anchorfile>namespacelittlefoot.html</anchorfile>
      <anchor>a4fb4051df81acdbcaa446ab5a02dd8e7</anchor>
      <arglist></arglist>
      <enumvalue file="namespacelittlefoot.html" anchor="a4fb4051df81acdbcaa446ab5a02dd8e7ada11add8aadb6bd651f74d36402f4d66">void_</enumvalue>
      <enumvalue file="namespacelittlefoot.html" anchor="a4fb4051df81acdbcaa446ab5a02dd8e7ad7488204e92ed01986284bef5650eb53">int_</enumvalue>
      <enumvalue file="namespacelittlefoot.html" anchor="a4fb4051df81acdbcaa446ab5a02dd8e7a467afb5838aa377d55cce81f84c5512b">bool_</enumvalue>
      <enumvalue file="namespacelittlefoot.html" anchor="a4fb4051df81acdbcaa446ab5a02dd8e7aefe6d5085c67bc38cd3746f2dc8013e1">float_</enumvalue>
    </member>
  </compound>
  <compound kind="struct">
    <name>littlefoot::Compiler</name>
    <filename>structlittlefoot_1_1Compiler.html</filename>
    <member kind="function">
      <type></type>
      <name>Compiler</name>
      <anchorfile>structlittlefoot_1_1Compiler.html</anchorfile>
      <anchor>a2047b5b6043439bb3d0350e0c24b29f2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addNativeFunctions</name>
      <anchorfile>structlittlefoot_1_1Compiler.html</anchorfile>
      <anchor>ac88d8e3c7c5acda96891d4eb215b02b5</anchor>
      <arglist>(const char *const *functionPrototypes)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addNativeFunctions</name>
      <anchorfile>structlittlefoot_1_1Compiler.html</anchorfile>
      <anchor>a7e1c1fb92a743b21492e40b95abe5ba0</anchor>
      <arglist>(const RunnerType &amp;runner)</arglist>
    </member>
    <member kind="function">
      <type>Result</type>
      <name>compile</name>
      <anchorfile>structlittlefoot_1_1Compiler.html</anchorfile>
      <anchor>aaa5d34327c001eebe3c1c7934fddad6c</anchor>
      <arglist>(const String &amp;sourceCode, uint32 heapSizeBytesRequired)</arglist>
    </member>
    <member kind="variable">
      <type>Array&lt; uint8 &gt;</type>
      <name>compiledObjectCode</name>
      <anchorfile>structlittlefoot_1_1Compiler.html</anchorfile>
      <anchor>a4f30f7019befb6569f49d5be2210fd32</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>littlefoot::Compiler::CodeGenerator::Marker</name>
    <filename>structlittlefoot_1_1Compiler_1_1CodeGenerator_1_1Marker.html</filename>
    <member kind="variable">
      <type>int</type>
      <name>index</name>
      <anchorfile>structlittlefoot_1_1Compiler_1_1CodeGenerator_1_1Marker.html</anchorfile>
      <anchor>a04b8e56ddb911fad02af78daa8c97474</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>littlefoot::Compiler::CodeGenerator::MarkerAndAddress</name>
    <filename>structlittlefoot_1_1Compiler_1_1CodeGenerator_1_1MarkerAndAddress.html</filename>
    <member kind="variable">
      <type>int</type>
      <name>markerIndex</name>
      <anchorfile>structlittlefoot_1_1Compiler_1_1CodeGenerator_1_1MarkerAndAddress.html</anchorfile>
      <anchor>a33800b9349f2c9cb8d5ea6bedd3fe64e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>address</name>
      <anchorfile>structlittlefoot_1_1Compiler_1_1CodeGenerator_1_1MarkerAndAddress.html</anchorfile>
      <anchor>aae4d6b05b1e4a5b166fe19e8495a2416</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>littlefoot::Compiler::FunctionCall::BuiltInFunction</name>
    <filename>structlittlefoot_1_1Compiler_1_1FunctionCall_1_1BuiltInFunction.html</filename>
    <member kind="variable">
      <type>OpCode</type>
      <name>op</name>
      <anchorfile>structlittlefoot_1_1Compiler_1_1FunctionCall_1_1BuiltInFunction.html</anchorfile>
      <anchor>a5050bc138e342a11f083cf11d5d85778</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Type</type>
      <name>returnType</name>
      <anchorfile>structlittlefoot_1_1Compiler_1_1FunctionCall_1_1BuiltInFunction.html</anchorfile>
      <anchor>a786dfce31bae401b793957daa7528dda</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const char *</type>
      <name>name</name>
      <anchorfile>structlittlefoot_1_1Compiler_1_1FunctionCall_1_1BuiltInFunction.html</anchorfile>
      <anchor>ac641cbb038c125bbf38fd99d94484d3e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>littlefoot::Compiler::Statement::Visitor</name>
    <filename>structlittlefoot_1_1Compiler_1_1Statement_1_1Visitor.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Visitor</name>
      <anchorfile>structlittlefoot_1_1Compiler_1_1Statement_1_1Visitor.html</anchorfile>
      <anchor>adf388bbebbca7c1fe2901106019d93d2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>operator()</name>
      <anchorfile>structlittlefoot_1_1Compiler_1_1Statement_1_1Visitor.html</anchorfile>
      <anchor>a8e81cebfc7365604b401976cdd3ba86b</anchor>
      <arglist>(StatementPtr)=0</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>littlefoot::LittleFootRemoteHeap</name>
    <filename>structlittlefoot_1_1LittleFootRemoteHeap.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>LittleFootRemoteHeap</name>
      <anchorfile>structlittlefoot_1_1LittleFootRemoteHeap.html</anchorfile>
      <anchor>aca4cb4bfd7d97d85e5534fd075c21a62</anchor>
      <arglist>(uint32 blockSizeToUse) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>structlittlefoot_1_1LittleFootRemoteHeap.html</anchorfile>
      <anchor>a56ce74720ce0af67db2e4dfa4cfbdfd7</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setByte</name>
      <anchorfile>structlittlefoot_1_1LittleFootRemoteHeap.html</anchorfile>
      <anchor>aa5ee115e4d8b164ebb7c54f15736648f</anchor>
      <arglist>(size_t offset, uint8 value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBytes</name>
      <anchorfile>structlittlefoot_1_1LittleFootRemoteHeap.html</anchorfile>
      <anchor>a92601c321cc89df4c966045377ff00f9</anchor>
      <arglist>(size_t offset, const uint8 *data, size_t num) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBits</name>
      <anchorfile>structlittlefoot_1_1LittleFootRemoteHeap.html</anchorfile>
      <anchor>ac5afe3e48de059081a84d304775e1654</anchor>
      <arglist>(uint32 startBit, uint32 numBits, uint32 value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>uint8</type>
      <name>getByte</name>
      <anchorfile>structlittlefoot_1_1LittleFootRemoteHeap.html</anchorfile>
      <anchor>acc9c7cc53bc25df462759a868eca1d0b</anchor>
      <arglist>(size_t offset) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>invalidateData</name>
      <anchorfile>structlittlefoot_1_1LittleFootRemoteHeap.html</anchorfile>
      <anchor>a19f1f99e6f02cb0c8acc411b137bf337</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sendChanges</name>
      <anchorfile>structlittlefoot_1_1LittleFootRemoteHeap.html</anchorfile>
      <anchor>a32f4f40e3e2c3852f7b35bb907409067</anchor>
      <arglist>(ImplementationClass &amp;bi)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>handleACKFromDevice</name>
      <anchorfile>structlittlefoot_1_1LittleFootRemoteHeap.html</anchorfile>
      <anchor>a49cfb4a3b900cd183167d21855c34f01</anchor>
      <arglist>(ImplementationClass &amp;bi, uint32 packetIndex) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isProgramLoaded</name>
      <anchorfile>structlittlefoot_1_1LittleFootRemoteHeap.html</anchorfile>
      <anchor>ab8646275914cfe851145c8ef566a6b8c</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="variable">
      <type>const size_t</type>
      <name>blockSize</name>
      <anchorfile>structlittlefoot_1_1LittleFootRemoteHeap.html</anchorfile>
      <anchor>a83daba2fa01ad08647fd4dccfff31f44</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr uint16</type>
      <name>unknownByte</name>
      <anchorfile>structlittlefoot_1_1LittleFootRemoteHeap.html</anchorfile>
      <anchor>a3c7a038f4e3d7f213421041602941efb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>littlefoot::NativeFunction</name>
    <filename>structlittlefoot_1_1NativeFunction.html</filename>
    <member kind="typedef">
      <type>int32(*)(void *, const int32 *)</type>
      <name>ImplementationFunction</name>
      <anchorfile>structlittlefoot_1_1NativeFunction.html</anchorfile>
      <anchor>aa82b9d379e798cb8387f376455ff17db</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NativeFunction</name>
      <anchorfile>structlittlefoot_1_1NativeFunction.html</anchorfile>
      <anchor>ac8c9928ce1ad7eb10f7e8fa55ee44d36</anchor>
      <arglist>(const char *nameAndArgumentTypes, ImplementationFunction fn) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static FunctionID</type>
      <name>createID</name>
      <anchorfile>structlittlefoot_1_1NativeFunction.html</anchorfile>
      <anchor>a9f3718bc144fb0601462dba6db4400ba</anchor>
      <arglist>(const char *nameAndArgTypes) noexcept</arglist>
    </member>
    <member kind="variable">
      <type>const char *</type>
      <name>nameAndArguments</name>
      <anchorfile>structlittlefoot_1_1NativeFunction.html</anchorfile>
      <anchor>af1a3dd3a243a8f685ba7dcf08671509b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ImplementationFunction</type>
      <name>function</name>
      <anchorfile>structlittlefoot_1_1NativeFunction.html</anchorfile>
      <anchor>a4ebe99d811a2ee3d15d50736cdf53067</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FunctionID</type>
      <name>functionID</name>
      <anchorfile>structlittlefoot_1_1NativeFunction.html</anchorfile>
      <anchor>a94166672b2671d4aefabcd86d18c0fe6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Type</type>
      <name>returnType</name>
      <anchorfile>structlittlefoot_1_1NativeFunction.html</anchorfile>
      <anchor>a6245162b5c6aa41dcd6c24c64374b644</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint8</type>
      <name>numArgs</name>
      <anchorfile>structlittlefoot_1_1NativeFunction.html</anchorfile>
      <anchor>ac9a5d999ee7dd09cb3a81a7f7b44f468</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>littlefoot::Program</name>
    <filename>structlittlefoot_1_1Program.html</filename>
    <member kind="function">
      <type></type>
      <name>Program</name>
      <anchorfile>structlittlefoot_1_1Program.html</anchorfile>
      <anchor>abf9381e1de16e4faab04fa5601e049a4</anchor>
      <arglist>(const void *data, uint32 totalMemorySize) noexcept</arglist>
    </member>
    <member kind="function">
      <type>uint16</type>
      <name>getStoredChecksum</name>
      <anchorfile>structlittlefoot_1_1Program.html</anchorfile>
      <anchor>ae48e4f1e4d658daa6469efacc0448944</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>uint16</type>
      <name>calculateChecksum</name>
      <anchorfile>structlittlefoot_1_1Program.html</anchorfile>
      <anchor>adba19e0fe3278426b2480b992fb88cc2</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>checksumMatches</name>
      <anchorfile>structlittlefoot_1_1Program.html</anchorfile>
      <anchor>af11b8e12067c17ba4dd441d9a2847a24</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>uint32</type>
      <name>getProgramSize</name>
      <anchorfile>structlittlefoot_1_1Program.html</anchorfile>
      <anchor>a95446937ae9cefacb7556f80f7d13823</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>uint32</type>
      <name>getNumFunctions</name>
      <anchorfile>structlittlefoot_1_1Program.html</anchorfile>
      <anchor>a3ae1b02702924595db42bed99de14de3</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>FunctionID</type>
      <name>getFunctionID</name>
      <anchorfile>structlittlefoot_1_1Program.html</anchorfile>
      <anchor>a013a5416549bea27bed9c78d16b98be7</anchor>
      <arglist>(uint32 functionIndex) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const uint8 *</type>
      <name>getFunctionStartAddress</name>
      <anchorfile>structlittlefoot_1_1Program.html</anchorfile>
      <anchor>ae7c2b25919903554f1ba69585f5af2c4</anchor>
      <arglist>(uint32 functionIndex) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const uint8 *</type>
      <name>getFunctionEndAddress</name>
      <anchorfile>structlittlefoot_1_1Program.html</anchorfile>
      <anchor>ac2aba18aa6f228e5019ca0c3a686c4bd</anchor>
      <arglist>(uint32 functionIndex) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>uint16</type>
      <name>getNumGlobals</name>
      <anchorfile>structlittlefoot_1_1Program.html</anchorfile>
      <anchor>a222f005cb35520fac5dce5746a7303c5</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>uint16</type>
      <name>getHeapSizeBytes</name>
      <anchorfile>structlittlefoot_1_1Program.html</anchorfile>
      <anchor>ae586b29c507aa7b89551abb2f855a583</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static float</type>
      <name>intToFloat</name>
      <anchorfile>structlittlefoot_1_1Program.html</anchorfile>
      <anchor>ac4bfcfb24cb236ea5b6f0ebfffac5b22</anchor>
      <arglist>(int32 value) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int32</type>
      <name>floatToInt</name>
      <anchorfile>structlittlefoot_1_1Program.html</anchorfile>
      <anchor>a696cd51fa37bde0f34e9c218f46035d5</anchor>
      <arglist>(float value) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int16</type>
      <name>readInt16</name>
      <anchorfile>structlittlefoot_1_1Program.html</anchorfile>
      <anchor>a56d3d62d7334d3fbe33fdb767c1e7e0f</anchor>
      <arglist>(const uint8 *d) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int32</type>
      <name>readInt32</name>
      <anchorfile>structlittlefoot_1_1Program.html</anchorfile>
      <anchor>ac3bf749d0af80c5c6d19462c87445c1a</anchor>
      <arglist>(const uint8 *d) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>writeInt16</name>
      <anchorfile>structlittlefoot_1_1Program.html</anchorfile>
      <anchor>ab712bd2048100ace5855f744f909de26</anchor>
      <arglist>(uint8 *d, int16 v) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>writeInt32</name>
      <anchorfile>structlittlefoot_1_1Program.html</anchorfile>
      <anchor>ac97588ec630a3584bd810b1f351cc30a</anchor>
      <arglist>(uint8 *d, int32 v) noexcept</arglist>
    </member>
    <member kind="variable">
      <type>const uint8 *</type>
      <name>programStart</name>
      <anchorfile>structlittlefoot_1_1Program.html</anchorfile>
      <anchor>aab80cca2ee6780f5ebd07323e86f291b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint32</type>
      <name>maxProgramSize</name>
      <anchorfile>structlittlefoot_1_1Program.html</anchorfile>
      <anchor>a2b9f4b333cb9a2bfa4dffc0a8b3f7dce</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr uint32</type>
      <name>programHeaderSize</name>
      <anchorfile>structlittlefoot_1_1Program.html</anchorfile>
      <anchor>a1c1516175a36e60d8eb7170ca94dac74</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>littlefoot::Runner</name>
    <filename>structlittlefoot_1_1Runner.html</filename>
    <templarg>programAndHeapSpace</templarg>
    <templarg>stackAndGlobalsSpace</templarg>
    <class kind="struct">littlefoot::Runner::FunctionExecutionContext</class>
    <member kind="enumeration">
      <type></type>
      <name>ErrorCode</name>
      <anchorfile>structlittlefoot_1_1Runner.html</anchorfile>
      <anchor>a8bee4ec6b7ef24029af89651ecd452c9</anchor>
      <arglist></arglist>
      <enumvalue file="structlittlefoot_1_1Runner.html" anchor="a8bee4ec6b7ef24029af89651ecd452c9a444bcb3a3fcf8389296c49467f27e1d6">ok</enumvalue>
      <enumvalue file="structlittlefoot_1_1Runner.html" anchor="a8bee4ec6b7ef24029af89651ecd452c9a6831a2bccdfef0b5731f2dd78e8f6d60">executionTimedOut</enumvalue>
      <enumvalue file="structlittlefoot_1_1Runner.html" anchor="a8bee4ec6b7ef24029af89651ecd452c9a447753cb7b28e87df3e72384caf41dcf">unknownInstruction</enumvalue>
      <enumvalue file="structlittlefoot_1_1Runner.html" anchor="a8bee4ec6b7ef24029af89651ecd452c9aefab200f4775c7a6f73743d4dcd6681a">stackOverflow</enumvalue>
      <enumvalue file="structlittlefoot_1_1Runner.html" anchor="a8bee4ec6b7ef24029af89651ecd452c9a43646f98320e403e1b7e0e94f96722cf">stackUnderflow</enumvalue>
      <enumvalue file="structlittlefoot_1_1Runner.html" anchor="a8bee4ec6b7ef24029af89651ecd452c9a845cdf34a636fe3fba607090f1f4039c">illegalAddress</enumvalue>
      <enumvalue file="structlittlefoot_1_1Runner.html" anchor="a8bee4ec6b7ef24029af89651ecd452c9a3078934da80939add9cdd5e203d938d0">divisionByZero</enumvalue>
      <enumvalue file="structlittlefoot_1_1Runner.html" anchor="a8bee4ec6b7ef24029af89651ecd452c9af1ab6f6a6dfd9f6248aacb40fff4ca38">unknownFunction</enumvalue>
    </member>
    <member kind="function">
      <type></type>
      <name>Runner</name>
      <anchorfile>structlittlefoot_1_1Runner.html</anchorfile>
      <anchor>a0ac00d4739800235fc89dc797acb524a</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNativeFunctions</name>
      <anchorfile>structlittlefoot_1_1Runner.html</anchorfile>
      <anchor>a4cad1258b15837d2ba702640a140488a</anchor>
      <arglist>(const NativeFunction *functions, int numFunctions, void *userDataForCallback) noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumNativeFunctions</name>
      <anchorfile>structlittlefoot_1_1Runner.html</anchorfile>
      <anchor>a55c64b1ecf50ee2ad04ad6e11fcddef9</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const NativeFunction &amp;</type>
      <name>getNativeFunction</name>
      <anchorfile>structlittlefoot_1_1Runner.html</anchorfile>
      <anchor>a829fff5d7ec6537e64290f5d6159b51a</anchor>
      <arglist>(int index) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>structlittlefoot_1_1Runner.html</anchorfile>
      <anchor>a3773259a07ac5a06bc2f4afa972a8b80</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>ErrorCode</type>
      <name>callFunction</name>
      <anchorfile>structlittlefoot_1_1Runner.html</anchorfile>
      <anchor>afd3c2f145b28014edcabd2563dfee309</anchor>
      <arglist>(const char *functionSignature) noexcept</arglist>
    </member>
    <member kind="function">
      <type>ErrorCode</type>
      <name>callFunction</name>
      <anchorfile>structlittlefoot_1_1Runner.html</anchorfile>
      <anchor>a8b5b53d759a9c88060ad6ee2363c1ae2</anchor>
      <arglist>(FunctionID function) noexcept</arglist>
    </member>
    <member kind="function">
      <type>uint8 *</type>
      <name>getProgramAndDataStart</name>
      <anchorfile>structlittlefoot_1_1Runner.html</anchorfile>
      <anchor>a976f63bd7f8bf66f6b18ee443505e91d</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>uint8 *</type>
      <name>getProgramAndDataEnd</name>
      <anchorfile>structlittlefoot_1_1Runner.html</anchorfile>
      <anchor>a9b0589d875e7291105cc065bd259a1e5</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>uint32</type>
      <name>getProgramAndDataSize</name>
      <anchorfile>structlittlefoot_1_1Runner.html</anchorfile>
      <anchor>a03a55d2c811d4b607004682c855e092e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>uint8 *</type>
      <name>getProgramHeapStart</name>
      <anchorfile>structlittlefoot_1_1Runner.html</anchorfile>
      <anchor>ab42b4f3da9ea4c09e315c8d41a12be1b</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>uint8 *</type>
      <name>getProgramHeapEnd</name>
      <anchorfile>structlittlefoot_1_1Runner.html</anchorfile>
      <anchor>a6811a4cd87f769fe45b2bf0a27779d9b</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>uint16</type>
      <name>getProgramHeapSize</name>
      <anchorfile>structlittlefoot_1_1Runner.html</anchorfile>
      <anchor>abedd15d0261f4f2134efda1c1b0a31c4</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isProgramValid</name>
      <anchorfile>structlittlefoot_1_1Runner.html</anchorfile>
      <anchor>a0d30c7b8beb75117b89dd2010b74746b</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDataByte</name>
      <anchorfile>structlittlefoot_1_1Runner.html</anchorfile>
      <anchor>aa308687f2d975442f371f0536e8a5956</anchor>
      <arglist>(uint32 index, uint8 value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setHeapByte</name>
      <anchorfile>structlittlefoot_1_1Runner.html</anchorfile>
      <anchor>ab0ad230a48294d52781d7ec99bdd8a93</anchor>
      <arglist>(uint32 index, uint8 value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>uint8</type>
      <name>getHeapByte</name>
      <anchorfile>structlittlefoot_1_1Runner.html</anchorfile>
      <anchor>a113d4c51029d431892e14efd56d32a6e</anchor>
      <arglist>(uint32 index) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>uint32</type>
      <name>getHeapBits</name>
      <anchorfile>structlittlefoot_1_1Runner.html</anchorfile>
      <anchor>adf3fe4763703e8f270d3f9a61076cc9e</anchor>
      <arglist>(uint32 startBit, uint32 numBits) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int32</type>
      <name>setHeapInt</name>
      <anchorfile>structlittlefoot_1_1Runner.html</anchorfile>
      <anchor>ae6cd997cb5e21d1c8d13fda55083c062</anchor>
      <arglist>(uint32 byteOffset, uint32 value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>int32</type>
      <name>getHeapInt</name>
      <anchorfile>structlittlefoot_1_1Runner.html</anchorfile>
      <anchor>af4d93d3a5d3a0843667ff0c0c98ea0cc</anchor>
      <arglist>(uint32 byteOffset) const noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static uint32</type>
      <name>getMaximumProgramSize</name>
      <anchorfile>structlittlefoot_1_1Runner.html</anchorfile>
      <anchor>a459c5e23895a3c97c28f9181bae06065</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="variable">
      <type>uint8</type>
      <name>allMemory</name>
      <anchorfile>structlittlefoot_1_1Runner.html</anchorfile>
      <anchor>ad0ff9af73ebe752e5b0021a6dc4d6ac7</anchor>
      <arglist>[((programAndHeapSpace+stackAndGlobalsSpace)+3)&amp;~3]</arglist>
    </member>
    <member kind="variable">
      <type>Program</type>
      <name>program</name>
      <anchorfile>structlittlefoot_1_1Runner.html</anchorfile>
      <anchor>af8a21bb4fc3b96073c4c4947d66cd1c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr uint32</type>
      <name>totalProgramAndHeapSpace</name>
      <anchorfile>structlittlefoot_1_1Runner.html</anchorfile>
      <anchor>a6c37dbd6343dfc192269831334cf45a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr uint32</type>
      <name>totalStackAndGlobalsSpace</name>
      <anchorfile>structlittlefoot_1_1Runner.html</anchorfile>
      <anchor>aa91e7616a624d82d8aa23abef9890e1a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>littlefoot::Runner::FunctionExecutionContext</name>
    <filename>structlittlefoot_1_1Runner_1_1FunctionExecutionContext.html</filename>
    <member kind="function">
      <type></type>
      <name>FunctionExecutionContext</name>
      <anchorfile>structlittlefoot_1_1Runner_1_1FunctionExecutionContext.html</anchorfile>
      <anchor>ae3e12bcbe05575ff8913ef3989c77127</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FunctionExecutionContext</name>
      <anchorfile>structlittlefoot_1_1Runner_1_1FunctionExecutionContext.html</anchorfile>
      <anchor>a7da132aff1e3a15f20092f45e8ec5b9b</anchor>
      <arglist>(const FunctionExecutionContext &amp;) noexcept=default</arglist>
    </member>
    <member kind="function">
      <type>FunctionExecutionContext &amp;</type>
      <name>operator=</name>
      <anchorfile>structlittlefoot_1_1Runner_1_1FunctionExecutionContext.html</anchorfile>
      <anchor>a40b412c8ce58073fbd88cda1783f0c89</anchor>
      <arglist>(const FunctionExecutionContext &amp;) noexcept=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FunctionExecutionContext</name>
      <anchorfile>structlittlefoot_1_1Runner_1_1FunctionExecutionContext.html</anchorfile>
      <anchor>ab6af4a9e7083d1ba43096b4ad1317b80</anchor>
      <arglist>(Runner &amp;r, const char *functionSignature) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FunctionExecutionContext</name>
      <anchorfile>structlittlefoot_1_1Runner_1_1FunctionExecutionContext.html</anchorfile>
      <anchor>a49485fa0f1dc2303bf25097d03c7d5c6</anchor>
      <arglist>(Runner &amp;r, FunctionID function) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>structlittlefoot_1_1Runner_1_1FunctionExecutionContext.html</anchorfile>
      <anchor>a6fe3c00a747866819a1ecb76038d4d48</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>structlittlefoot_1_1Runner_1_1FunctionExecutionContext.html</anchorfile>
      <anchor>abc4724bd4cf497d48b49f68887a8917f</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setArguments</name>
      <anchorfile>structlittlefoot_1_1Runner_1_1FunctionExecutionContext.html</anchorfile>
      <anchor>aa328c50c9b4cac9de695013b0e24a0e2</anchor>
      <arglist>(Args...args) noexcept</arglist>
    </member>
    <member kind="function">
      <type>ErrorCode</type>
      <name>run</name>
      <anchorfile>structlittlefoot_1_1Runner_1_1FunctionExecutionContext.html</anchorfile>
      <anchor>ac586a0a6f7d18b6f115817e800178547</anchor>
      <arglist>(TimeOutCheckFunction hasTimedOut) noexcept</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>StandardApplicationCommandIDs</name>
    <filename>namespaceStandardApplicationCommandIDs.html</filename>
    <member kind="enumvalue">
      <type>@</type>
      <name>quit</name>
      <anchorfile>namespaceStandardApplicationCommandIDs.html</anchorfile>
      <anchor>ad348cc9beaaea88093769e2da468320aa0e06bba45d6039ddc74f0b437d982fba</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>del</name>
      <anchorfile>namespaceStandardApplicationCommandIDs.html</anchorfile>
      <anchor>ad348cc9beaaea88093769e2da468320aa3519307963b37e47b3c0935a553c8a13</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>cut</name>
      <anchorfile>namespaceStandardApplicationCommandIDs.html</anchorfile>
      <anchor>ad348cc9beaaea88093769e2da468320aac0037bfec469a888d3a7ab1c0c222765</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>copy</name>
      <anchorfile>namespaceStandardApplicationCommandIDs.html</anchorfile>
      <anchor>ad348cc9beaaea88093769e2da468320aa3584c202667823072c928fd699725466</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>paste</name>
      <anchorfile>namespaceStandardApplicationCommandIDs.html</anchorfile>
      <anchor>ad348cc9beaaea88093769e2da468320aae98071537aab261471df0788ab5405de</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>selectAll</name>
      <anchorfile>namespaceStandardApplicationCommandIDs.html</anchorfile>
      <anchor>ad348cc9beaaea88093769e2da468320aa651985a70b21b1d0b7a89007fc8793df</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>deselectAll</name>
      <anchorfile>namespaceStandardApplicationCommandIDs.html</anchorfile>
      <anchor>ad348cc9beaaea88093769e2da468320aacdd0c589b2b1904cde27f75185f65e4a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>undo</name>
      <anchorfile>namespaceStandardApplicationCommandIDs.html</anchorfile>
      <anchor>ad348cc9beaaea88093769e2da468320aa5b866e822eb795f30f0c77ebecc84f7f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>redo</name>
      <anchorfile>namespaceStandardApplicationCommandIDs.html</anchorfile>
      <anchor>ad348cc9beaaea88093769e2da468320aaa2a9602bedb21d34ea2b7cb620d5be1f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>Steinberg</name>
    <filename>namespaceSteinberg.html</filename>
  </compound>
  <compound kind="namespace">
    <name>TypeHelpers</name>
    <filename>namespaceTypeHelpers.html</filename>
    <class kind="struct">TypeHelpers::ParameterType</class>
    <class kind="struct">TypeHelpers::SmallestFloatType</class>
    <class kind="struct">TypeHelpers::SmallestFloatType&lt; double &gt;</class>
  </compound>
  <compound kind="struct">
    <name>TypeHelpers::ParameterType</name>
    <filename>structTypeHelpers_1_1ParameterType.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>const Type &amp;</type>
      <name>type</name>
      <anchorfile>structTypeHelpers_1_1ParameterType.html</anchorfile>
      <anchor>a90e2de8ebb3e15f18a94a73a08aaad46</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>TypeHelpers::SmallestFloatType</name>
    <filename>structTypeHelpers_1_1SmallestFloatType.html</filename>
    <templarg>Type</templarg>
    <member kind="typedef">
      <type>float</type>
      <name>type</name>
      <anchorfile>structTypeHelpers_1_1SmallestFloatType.html</anchorfile>
      <anchor>a94569e66418d08b8c18c9815d30a265f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>TypeHelpers::SmallestFloatType&lt; double &gt;</name>
    <filename>structTypeHelpers_1_1SmallestFloatType_3_01double_01_4.html</filename>
    <member kind="typedef">
      <type>double</type>
      <name>type</name>
      <anchorfile>structTypeHelpers_1_1SmallestFloatType_3_01double_01_4.html</anchorfile>
      <anchor>a0a4a0932df0912df21abd2678281239b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="dir">
    <name>AAX</name>
    <path>/home/juce/data/res/development/juce/modules/juce_audio_plugin_client/AAX/</path>
    <filename>dir_80455f18d56e0f84e2b77959cbc00cdc.html</filename>
    <file>juce_AAX_Modifier_Injector.h</file>
  </compound>
  <compound kind="dir">
    <name>app_properties</name>
    <path>/home/juce/data/res/development/juce/modules/juce_data_structures/app_properties/</path>
    <filename>dir_300d002adad8ceddb1d21822ed7b7d1c.html</filename>
    <file>juce_ApplicationProperties.h</file>
    <file>juce_PropertiesFile.h</file>
  </compound>
  <compound kind="dir">
    <name>application</name>
    <path>/home/juce/data/res/development/juce/modules/juce_gui_basics/application/</path>
    <filename>dir_d139394f7950642432030413c817de98.html</filename>
    <file>juce_Application.h</file>
  </compound>
  <compound kind="dir">
    <name>audio_cd</name>
    <path>/home/juce/data/res/development/juce/modules/juce_audio_utils/audio_cd/</path>
    <filename>dir_617114d1f92be5c1cd99704e7807d718.html</filename>
    <file>juce_AudioCDBurner.h</file>
    <file>juce_AudioCDReader.h</file>
  </compound>
  <compound kind="dir">
    <name>audio_io</name>
    <path>/home/juce/data/res/development/juce/modules/juce_audio_devices/audio_io/</path>
    <filename>dir_aba87407b133b447f6de5f98c2cd9a86.html</filename>
    <file>juce_AudioDeviceManager.h</file>
    <file>juce_AudioIODevice.h</file>
    <file>juce_AudioIODeviceType.h</file>
    <file>juce_SystemAudioVolume.h</file>
  </compound>
  <compound kind="dir">
    <name>blocks</name>
    <path>/home/juce/data/res/development/juce/modules/juce_blocks_basics/blocks/</path>
    <filename>dir_54fb0b797b7f951f79340f90428dbac7.html</filename>
    <file>juce_Block.h</file>
    <file>juce_ControlButton.h</file>
    <file>juce_LEDGrid.h</file>
    <file>juce_LEDRow.h</file>
    <file>juce_StatusLight.h</file>
    <file>juce_TouchList.h</file>
    <file>juce_TouchSurface.h</file>
  </compound>
  <compound kind="dir">
    <name>broadcasters</name>
    <path>/home/juce/data/res/development/juce/modules/juce_events/broadcasters/</path>
    <filename>dir_2424ff75bee6310008707199cea1ef05.html</filename>
    <file>juce_ActionBroadcaster.h</file>
    <file>juce_ActionListener.h</file>
    <file>juce_AsyncUpdater.h</file>
    <file>juce_ChangeBroadcaster.h</file>
    <file>juce_ChangeListener.h</file>
  </compound>
  <compound kind="dir">
    <name>buffers</name>
    <path>/home/juce/data/res/development/juce/modules/juce_audio_basics/buffers/</path>
    <filename>dir_1ec7fa9402c60b866fcb270262e942f6.html</filename>
    <file>juce_AudioChannelSet.h</file>
    <file>juce_AudioDataConverters.h</file>
    <file>juce_AudioSampleBuffer.h</file>
    <file>juce_FloatVectorOperations.h</file>
  </compound>
  <compound kind="dir">
    <name>buttons</name>
    <path>/home/juce/data/res/development/juce/modules/juce_gui_basics/buttons/</path>
    <filename>dir_e1e6edacaf0365a75a90740594f100b1.html</filename>
    <file>juce_ArrowButton.h</file>
    <file>juce_Button.h</file>
    <file>juce_DrawableButton.h</file>
    <file>juce_HyperlinkButton.h</file>
    <file>juce_ImageButton.h</file>
    <file>juce_ShapeButton.h</file>
    <file>juce_TextButton.h</file>
    <file>juce_ToggleButton.h</file>
    <file>juce_ToolbarButton.h</file>
  </compound>
  <compound kind="dir">
    <name>capture</name>
    <path>/home/juce/data/res/development/juce/modules/juce_video/capture/</path>
    <filename>dir_85c45a9ece05404fd8526fc6b158a622.html</filename>
    <file>juce_CameraDevice.h</file>
  </compound>
  <compound kind="dir">
    <name>code_editor</name>
    <path>/home/juce/data/res/development/juce/modules/juce_gui_extra/code_editor/</path>
    <filename>dir_349b3403eb5636403f154b658e7e541a.html</filename>
    <file>juce_CodeDocument.h</file>
    <file>juce_CodeEditorComponent.h</file>
    <file>juce_CodeTokeniser.h</file>
    <file>juce_CPlusPlusCodeTokeniser.h</file>
    <file>juce_CPlusPlusCodeTokeniserFunctions.h</file>
    <file>juce_LuaCodeTokeniser.h</file>
    <file>juce_XMLCodeTokeniser.h</file>
  </compound>
  <compound kind="dir">
    <name>codecs</name>
    <path>/home/juce/data/res/development/juce/modules/juce_audio_formats/codecs/</path>
    <filename>dir_a00b8f886ba2b513e7aeafe4c36aea47.html</filename>
    <file>juce_AiffAudioFormat.h</file>
    <file>juce_CoreAudioFormat.h</file>
    <file>juce_FlacAudioFormat.h</file>
    <file>juce_LAMEEncoderAudioFormat.h</file>
    <file>juce_MP3AudioFormat.h</file>
    <file>juce_OggVorbisAudioFormat.h</file>
    <file>juce_QuickTimeAudioFormat.h</file>
    <file>juce_WavAudioFormat.h</file>
    <file>juce_WindowsMediaAudioFormat.h</file>
  </compound>
  <compound kind="dir">
    <name>colour</name>
    <path>/home/juce/data/res/development/juce/modules/juce_graphics/colour/</path>
    <filename>dir_0e325055347c7dd8f810bd683654f1c4.html</filename>
    <file>juce_Colour.h</file>
    <file>juce_ColourGradient.h</file>
    <file>juce_Colours.h</file>
    <file>juce_FillType.h</file>
    <file>juce_PixelFormats.h</file>
  </compound>
  <compound kind="dir">
    <name>commands</name>
    <path>/home/juce/data/res/development/juce/modules/juce_gui_basics/commands/</path>
    <filename>dir_4761bf624c58d092b319eabcc1525ce5.html</filename>
    <file>juce_ApplicationCommandID.h</file>
    <file>juce_ApplicationCommandInfo.h</file>
    <file>juce_ApplicationCommandManager.h</file>
    <file>juce_ApplicationCommandTarget.h</file>
    <file>juce_KeyPressMappingSet.h</file>
  </compound>
  <compound kind="dir">
    <name>components</name>
    <path>/home/juce/data/res/development/juce/modules/juce_gui_basics/components/</path>
    <filename>dir_b0a81b4a2c8259c647a7d5ec0dfc69bd.html</filename>
    <file>juce_CachedComponentImage.h</file>
    <file>juce_Component.h</file>
    <file>juce_ComponentListener.h</file>
    <file>juce_Desktop.h</file>
    <file>juce_ModalComponentManager.h</file>
  </compound>
  <compound kind="dir">
    <name>containers</name>
    <path>/home/juce/data/res/development/juce/modules/juce_core/containers/</path>
    <filename>dir_ef66b834227c0db5928958f7e41dc94f.html</filename>
    <file>juce_AbstractFifo.h</file>
    <file>juce_Array.h</file>
    <file>juce_ArrayAllocationBase.h</file>
    <file>juce_DynamicObject.h</file>
    <file>juce_ElementComparator.h</file>
    <file>juce_HashMap.h</file>
    <file>juce_LinkedListPointer.h</file>
    <file>juce_ListenerList.h</file>
    <file>juce_NamedValueSet.h</file>
    <file>juce_OwnedArray.h</file>
    <file>juce_PropertySet.h</file>
    <file>juce_ReferenceCountedArray.h</file>
    <file>juce_ScopedValueSetter.h</file>
    <file>juce_SortedSet.h</file>
    <file>juce_SparseSet.h</file>
    <file>juce_Variant.h</file>
  </compound>
  <compound kind="dir">
    <name>contexts</name>
    <path>/home/juce/data/res/development/juce/modules/juce_graphics/contexts/</path>
    <filename>dir_fd2898edb4f8dc170e5e5d74bea90f2b.html</filename>
    <file>juce_GraphicsContext.h</file>
    <file>juce_LowLevelGraphicsContext.h</file>
    <file>juce_LowLevelGraphicsPostScriptRenderer.h</file>
    <file>juce_LowLevelGraphicsSoftwareRenderer.h</file>
  </compound>
  <compound kind="dir">
    <name>documents</name>
    <path>/home/juce/data/res/development/juce/modules/juce_gui_extra/documents/</path>
    <filename>dir_b77cede96e581ede68a37a3a458ad02b.html</filename>
    <file>juce_FileBasedDocument.h</file>
  </compound>
  <compound kind="dir">
    <name>drawables</name>
    <path>/home/juce/data/res/development/juce/modules/juce_gui_basics/drawables/</path>
    <filename>dir_4dea2677a11336a5aaeacd133b40c9d6.html</filename>
    <file>juce_Drawable.h</file>
    <file>juce_DrawableComposite.h</file>
    <file>juce_DrawableImage.h</file>
    <file>juce_DrawablePath.h</file>
    <file>juce_DrawableRectangle.h</file>
    <file>juce_DrawableShape.h</file>
    <file>juce_DrawableText.h</file>
  </compound>
  <compound kind="dir">
    <name>effects</name>
    <path>/home/juce/data/res/development/juce/modules/juce_graphics/effects/</path>
    <filename>dir_fe34e68bf4dda14b8496e6c084bcc0da.html</filename>
    <file>juce_DropShadowEffect.h</file>
    <file>juce_GlowEffect.h</file>
    <file>juce_ImageEffectFilter.h</file>
  </compound>
  <compound kind="dir">
    <name>effects</name>
    <path>/home/juce/data/res/development/juce/modules/juce_audio_basics/effects/</path>
    <filename>dir_64f256fa630aa2410312637122a8df5b.html</filename>
    <file>juce_CatmullRomInterpolator.h</file>
    <file>juce_Decibels.h</file>
    <file>juce_FFT.h</file>
    <file>juce_IIRFilter.h</file>
    <file>juce_LagrangeInterpolator.h</file>
    <file>juce_LinearSmoothedValue.h</file>
    <file>juce_Reverb.h</file>
  </compound>
  <compound kind="dir">
    <name>embedding</name>
    <path>/home/juce/data/res/development/juce/modules/juce_gui_extra/embedding/</path>
    <filename>dir_f94737a803aa2ac6657a8be88926452b.html</filename>
    <file>juce_ActiveXControlComponent.h</file>
    <file>juce_NSViewComponent.h</file>
    <file>juce_UIViewComponent.h</file>
  </compound>
  <compound kind="dir">
    <name>encryption</name>
    <path>/home/juce/data/res/development/juce/modules/juce_cryptography/encryption/</path>
    <filename>dir_f0a4f7b76dc0110797576363731603d1.html</filename>
    <file>juce_BlowFish.h</file>
    <file>juce_Primes.h</file>
    <file>juce_RSAKey.h</file>
  </compound>
  <compound kind="dir">
    <name>filebrowser</name>
    <path>/home/juce/data/res/development/juce/modules/juce_gui_basics/filebrowser/</path>
    <filename>dir_fc8a11ccdc3ab56c79f0fd9ac68ab315.html</filename>
    <file>juce_DirectoryContentsDisplayComponent.h</file>
    <file>juce_DirectoryContentsList.h</file>
    <file>juce_FileBrowserComponent.h</file>
    <file>juce_FileBrowserListener.h</file>
    <file>juce_FileChooser.h</file>
    <file>juce_FileChooserDialogBox.h</file>
    <file>juce_FileListComponent.h</file>
    <file>juce_FilenameComponent.h</file>
    <file>juce_FilePreviewComponent.h</file>
    <file>juce_FileSearchPathListComponent.h</file>
    <file>juce_FileTreeComponent.h</file>
    <file>juce_ImagePreviewComponent.h</file>
  </compound>
  <compound kind="dir">
    <name>files</name>
    <path>/home/juce/data/res/development/juce/modules/juce_core/files/</path>
    <filename>dir_7ba83d32b4af44d73b1165afb3c5ffd6.html</filename>
    <file>juce_DirectoryIterator.h</file>
    <file>juce_File.h</file>
    <file>juce_FileFilter.h</file>
    <file>juce_FileInputStream.h</file>
    <file>juce_FileOutputStream.h</file>
    <file>juce_FileSearchPath.h</file>
    <file>juce_MemoryMappedFile.h</file>
    <file>juce_TemporaryFile.h</file>
    <file>juce_WildcardFileFilter.h</file>
  </compound>
  <compound kind="dir">
    <name>fonts</name>
    <path>/home/juce/data/res/development/juce/modules/juce_graphics/fonts/</path>
    <filename>dir_844c62aed8cb23b9e9230d49000f7e2c.html</filename>
    <file>juce_AttributedString.h</file>
    <file>juce_CustomTypeface.h</file>
    <file>juce_Font.h</file>
    <file>juce_GlyphArrangement.h</file>
    <file>juce_TextLayout.h</file>
    <file>juce_Typeface.h</file>
  </compound>
  <compound kind="dir">
    <name>format</name>
    <path>/home/juce/data/res/development/juce/modules/juce_audio_processors/format/</path>
    <filename>dir_e8ab250b6fd4884cc04451f397ee1637.html</filename>
    <file>juce_AudioPluginFormat.h</file>
    <file>juce_AudioPluginFormatManager.h</file>
  </compound>
  <compound kind="dir">
    <name>format</name>
    <path>/home/juce/data/res/development/juce/modules/juce_audio_formats/format/</path>
    <filename>dir_628f16741c7034f0b778911ab46805d4.html</filename>
    <file>juce_AudioFormat.h</file>
    <file>juce_AudioFormatManager.h</file>
    <file>juce_AudioFormatReader.h</file>
    <file>juce_AudioFormatReaderSource.h</file>
    <file>juce_AudioFormatWriter.h</file>
    <file>juce_AudioSubsectionReader.h</file>
    <file>juce_BufferingAudioFormatReader.h</file>
    <file>juce_MemoryMappedAudioFormatReader.h</file>
  </compound>
  <compound kind="dir">
    <name>format_types</name>
    <path>/home/juce/data/res/development/juce/modules/juce_audio_processors/format_types/</path>
    <filename>dir_2a7909535a105f39de04582d8ecd141c.html</filename>
    <file>juce_AU_Shared.h</file>
    <file>juce_AudioUnitPluginFormat.h</file>
    <file>juce_LADSPAPluginFormat.h</file>
    <file>juce_VST3Common.h</file>
    <file>juce_VST3Headers.h</file>
    <file>juce_VST3PluginFormat.h</file>
    <file>juce_VSTCommon.h</file>
    <file>juce_VSTInterface.h</file>
    <file>juce_VSTMidiEventList.h</file>
    <file>juce_VSTPluginFormat.h</file>
  </compound>
  <compound kind="dir">
    <name>geometry</name>
    <path>/home/juce/data/res/development/juce/modules/juce_opengl/geometry/</path>
    <filename>dir_a770ea9a452e575eb35bde43cc78a43a.html</filename>
    <file>juce_Draggable3DOrientation.h</file>
    <file>juce_Matrix3D.h</file>
    <file>juce_Quaternion.h</file>
    <file>juce_Vector3D.h</file>
  </compound>
  <compound kind="dir">
    <name>geometry</name>
    <path>/home/juce/data/res/development/juce/modules/juce_graphics/geometry/</path>
    <filename>dir_eaea5a67a4f86f23ece68932e5dbd9d8.html</filename>
    <file>juce_AffineTransform.h</file>
    <file>juce_BorderSize.h</file>
    <file>juce_EdgeTable.h</file>
    <file>juce_Line.h</file>
    <file>juce_Path.h</file>
    <file>juce_PathIterator.h</file>
    <file>juce_PathStrokeType.h</file>
    <file>juce_Point.h</file>
    <file>juce_Rectangle.h</file>
    <file>juce_RectangleList.h</file>
  </compound>
  <compound kind="dir">
    <name>gui</name>
    <path>/home/juce/data/res/development/juce/modules/juce_audio_utils/gui/</path>
    <filename>dir_5dc30ddc39f04e4086834e16bad98074.html</filename>
    <file>juce_AudioAppComponent.h</file>
    <file>juce_AudioDeviceSelectorComponent.h</file>
    <file>juce_AudioThumbnail.h</file>
    <file>juce_AudioThumbnailBase.h</file>
    <file>juce_AudioThumbnailCache.h</file>
    <file>juce_AudioVisualiserComponent.h</file>
    <file>juce_BluetoothMidiDevicePairingDialogue.h</file>
    <file>juce_MidiKeyboardComponent.h</file>
  </compound>
  <compound kind="dir">
    <name>hashing</name>
    <path>/home/juce/data/res/development/juce/modules/juce_cryptography/hashing/</path>
    <filename>dir_64a6cd143e96e012831123e7772e7edd.html</filename>
    <file>juce_MD5.h</file>
    <file>juce_SHA256.h</file>
    <file>juce_Whirlpool.h</file>
  </compound>
  <compound kind="dir">
    <name>images</name>
    <path>/home/juce/data/res/development/juce/modules/juce_graphics/images/</path>
    <filename>dir_9e65b917fa8cdad43f0f76ed61b3fc0e.html</filename>
    <file>juce_Image.h</file>
    <file>juce_ImageCache.h</file>
    <file>juce_ImageConvolutionKernel.h</file>
    <file>juce_ImageFileFormat.h</file>
  </compound>
  <compound kind="dir">
    <name>interprocess</name>
    <path>/home/juce/data/res/development/juce/modules/juce_events/interprocess/</path>
    <filename>dir_415053079541302e23f00cec3d4c76bb.html</filename>
    <file>juce_ConnectedChildProcess.h</file>
    <file>juce_InterprocessConnection.h</file>
    <file>juce_InterprocessConnectionServer.h</file>
  </compound>
  <compound kind="dir">
    <name>javascript</name>
    <path>/home/juce/data/res/development/juce/modules/juce_core/javascript/</path>
    <filename>dir_e7447d3abf6c1361606160b703170128.html</filename>
    <file>juce_Javascript.h</file>
    <file>juce_JSON.h</file>
  </compound>
  <compound kind="dir">
    <name>juce_audio_basics</name>
    <path>/home/juce/data/res/development/juce/modules/juce_audio_basics/</path>
    <filename>dir_72d8649d346d517cbae6aed82f026a7b.html</filename>
    <dir>buffers</dir>
    <dir>effects</dir>
    <dir>midi</dir>
    <dir>mpe</dir>
    <dir>sources</dir>
    <dir>synthesisers</dir>
  </compound>
  <compound kind="dir">
    <name>juce_audio_devices</name>
    <path>/home/juce/data/res/development/juce/modules/juce_audio_devices/</path>
    <filename>dir_46d1f9234f5cbb66c5fe2b34676bd820.html</filename>
    <dir>audio_io</dir>
    <dir>midi_io</dir>
    <dir>sources</dir>
  </compound>
  <compound kind="dir">
    <name>juce_audio_formats</name>
    <path>/home/juce/data/res/development/juce/modules/juce_audio_formats/</path>
    <filename>dir_a68334e57d6b3a32a1a1e46d1dce2b83.html</filename>
    <dir>codecs</dir>
    <dir>format</dir>
    <dir>sampler</dir>
  </compound>
  <compound kind="dir">
    <name>juce_audio_plugin_client</name>
    <path>/home/juce/data/res/development/juce/modules/juce_audio_plugin_client/</path>
    <filename>dir_f95fe33f0a68643d3992baa35a302cf5.html</filename>
    <dir>AAX</dir>
    <dir>RTAS</dir>
    <dir>Standalone</dir>
    <dir>utility</dir>
    <dir>VST</dir>
  </compound>
  <compound kind="dir">
    <name>juce_audio_processors</name>
    <path>/home/juce/data/res/development/juce/modules/juce_audio_processors/</path>
    <filename>dir_e8af93b7d32826689b06251a177ba457.html</filename>
    <dir>format</dir>
    <dir>format_types</dir>
    <dir>processors</dir>
    <dir>scanning</dir>
    <dir>utilities</dir>
  </compound>
  <compound kind="dir">
    <name>juce_audio_utils</name>
    <path>/home/juce/data/res/development/juce/modules/juce_audio_utils/</path>
    <filename>dir_8d821c8b15a85c0048fed8fa9cd6cd54.html</filename>
    <dir>audio_cd</dir>
    <dir>gui</dir>
    <dir>players</dir>
  </compound>
  <compound kind="dir">
    <name>juce_blocks_basics</name>
    <path>/home/juce/data/res/development/juce/modules/juce_blocks_basics/</path>
    <filename>dir_8728b6dae012395d9581bb04d0d86b5d.html</filename>
    <dir>blocks</dir>
    <dir>littlefoot</dir>
    <dir>protocol</dir>
    <dir>topology</dir>
    <dir>visualisers</dir>
    <file>juce_blocks_basics.h</file>
  </compound>
  <compound kind="dir">
    <name>juce_box2d</name>
    <path>/home/juce/data/res/development/juce/modules/juce_box2d/</path>
    <filename>dir_4343f784cd2b48711f3ae94824a2a4cf.html</filename>
    <dir>utils</dir>
    <file>juce_box2d.h</file>
  </compound>
  <compound kind="dir">
    <name>juce_core</name>
    <path>/home/juce/data/res/development/juce/modules/juce_core/</path>
    <filename>dir_fd421517ec8f709274e931dda731313f.html</filename>
    <dir>containers</dir>
    <dir>files</dir>
    <dir>javascript</dir>
    <dir>logging</dir>
    <dir>maths</dir>
    <dir>memory</dir>
    <dir>misc</dir>
    <dir>network</dir>
    <dir>streams</dir>
    <dir>system</dir>
    <dir>text</dir>
    <dir>threads</dir>
    <dir>time</dir>
    <dir>unit_tests</dir>
    <dir>xml</dir>
    <dir>zip</dir>
  </compound>
  <compound kind="dir">
    <name>juce_cryptography</name>
    <path>/home/juce/data/res/development/juce/modules/juce_cryptography/</path>
    <filename>dir_65eefc9485f8cc5fc3e012f9b3f3546d.html</filename>
    <dir>encryption</dir>
    <dir>hashing</dir>
  </compound>
  <compound kind="dir">
    <name>juce_data_structures</name>
    <path>/home/juce/data/res/development/juce/modules/juce_data_structures/</path>
    <filename>dir_bdae5db7f447a90828c2d5a4a4a0cf42.html</filename>
    <dir>app_properties</dir>
    <dir>undomanager</dir>
    <dir>values</dir>
  </compound>
  <compound kind="dir">
    <name>juce_events</name>
    <path>/home/juce/data/res/development/juce/modules/juce_events/</path>
    <filename>dir_255aa954555704da27282dd989cf5d3d.html</filename>
    <dir>broadcasters</dir>
    <dir>interprocess</dir>
    <dir>messages</dir>
    <dir>timers</dir>
  </compound>
  <compound kind="dir">
    <name>juce_graphics</name>
    <path>/home/juce/data/res/development/juce/modules/juce_graphics/</path>
    <filename>dir_c21b97ce746e775754bb58a960d8eb0d.html</filename>
    <dir>colour</dir>
    <dir>contexts</dir>
    <dir>effects</dir>
    <dir>fonts</dir>
    <dir>geometry</dir>
    <dir>images</dir>
    <dir>placement</dir>
  </compound>
  <compound kind="dir">
    <name>juce_gui_basics</name>
    <path>/home/juce/data/res/development/juce/modules/juce_gui_basics/</path>
    <filename>dir_29068564406e3e6b831e0dcc98fd710a.html</filename>
    <dir>application</dir>
    <dir>buttons</dir>
    <dir>commands</dir>
    <dir>components</dir>
    <dir>drawables</dir>
    <dir>filebrowser</dir>
    <dir>keyboard</dir>
    <dir>layout</dir>
    <dir>lookandfeel</dir>
    <dir>menus</dir>
    <dir>misc</dir>
    <dir>mouse</dir>
    <dir>positioning</dir>
    <dir>properties</dir>
    <dir>widgets</dir>
    <dir>windows</dir>
  </compound>
  <compound kind="dir">
    <name>juce_gui_extra</name>
    <path>/home/juce/data/res/development/juce/modules/juce_gui_extra/</path>
    <filename>dir_134c061c979b5e8e79ad54b85951c9fe.html</filename>
    <dir>code_editor</dir>
    <dir>documents</dir>
    <dir>embedding</dir>
    <dir>misc</dir>
  </compound>
  <compound kind="dir">
    <name>juce_opengl</name>
    <path>/home/juce/data/res/development/juce/modules/juce_opengl/</path>
    <filename>dir_44b022f09ea6a727d66bc960883959d5.html</filename>
    <dir>geometry</dir>
    <dir>opengl</dir>
    <dir>utils</dir>
  </compound>
  <compound kind="dir">
    <name>juce_osc</name>
    <path>/home/juce/data/res/development/juce/modules/juce_osc/</path>
    <filename>dir_7aa4b54dc7932433e4be0de4bb179a45.html</filename>
    <dir>osc</dir>
    <file>juce_osc.h</file>
  </compound>
  <compound kind="dir">
    <name>juce_tracktion_marketplace</name>
    <path>/home/juce/data/res/development/juce/modules/juce_tracktion_marketplace/</path>
    <filename>dir_870f723834bb564bfdcf32bf648bedaa.html</filename>
    <dir>marketplace</dir>
  </compound>
  <compound kind="dir">
    <name>juce_video</name>
    <path>/home/juce/data/res/development/juce/modules/juce_video/</path>
    <filename>dir_47ede0fd2ccb6093184838463486705f.html</filename>
    <dir>capture</dir>
    <dir>playback</dir>
  </compound>
  <compound kind="dir">
    <name>keyboard</name>
    <path>/home/juce/data/res/development/juce/modules/juce_gui_basics/keyboard/</path>
    <filename>dir_158441fbf2548d4d8768456946ecbb64.html</filename>
    <file>juce_CaretComponent.h</file>
    <file>juce_KeyboardFocusTraverser.h</file>
    <file>juce_KeyListener.h</file>
    <file>juce_KeyPress.h</file>
    <file>juce_ModifierKeys.h</file>
    <file>juce_SystemClipboard.h</file>
    <file>juce_TextEditorKeyMapper.h</file>
    <file>juce_TextInputTarget.h</file>
  </compound>
  <compound kind="dir">
    <name>layout</name>
    <path>/home/juce/data/res/development/juce/modules/juce_gui_basics/layout/</path>
    <filename>dir_b6485a9152ca5b0a6372626b14786471.html</filename>
    <file>juce_AnimatedPosition.h</file>
    <file>juce_AnimatedPositionBehaviours.h</file>
    <file>juce_ComponentAnimator.h</file>
    <file>juce_ComponentBoundsConstrainer.h</file>
    <file>juce_ComponentBuilder.h</file>
    <file>juce_ComponentMovementWatcher.h</file>
    <file>juce_ConcertinaPanel.h</file>
    <file>juce_FlexBox.h</file>
    <file>juce_FlexItem.h</file>
    <file>juce_GroupComponent.h</file>
    <file>juce_MultiDocumentPanel.h</file>
    <file>juce_ResizableBorderComponent.h</file>
    <file>juce_ResizableCornerComponent.h</file>
    <file>juce_ResizableEdgeComponent.h</file>
    <file>juce_ScrollBar.h</file>
    <file>juce_StretchableLayoutManager.h</file>
    <file>juce_StretchableLayoutResizerBar.h</file>
    <file>juce_StretchableObjectResizer.h</file>
    <file>juce_TabbedButtonBar.h</file>
    <file>juce_TabbedComponent.h</file>
    <file>juce_Viewport.h</file>
  </compound>
  <compound kind="dir">
    <name>littlefoot</name>
    <path>/home/juce/data/res/development/juce/modules/juce_blocks_basics/littlefoot/</path>
    <filename>dir_aa5d47f062a997a267838ae837cf93ce.html</filename>
    <file>juce_LittleFootCompiler.h</file>
    <file>juce_LittleFootRemoteHeap.h</file>
    <file>juce_LittleFootRunner.h</file>
  </compound>
  <compound kind="dir">
    <name>logging</name>
    <path>/home/juce/data/res/development/juce/modules/juce_core/logging/</path>
    <filename>dir_1a2a2bbaffcbb1c511e124eea6d8ab25.html</filename>
    <file>juce_FileLogger.h</file>
    <file>juce_Logger.h</file>
  </compound>
  <compound kind="dir">
    <name>lookandfeel</name>
    <path>/home/juce/data/res/development/juce/modules/juce_gui_basics/lookandfeel/</path>
    <filename>dir_1fabfe4d3d7d36632bef9d03e60a59a7.html</filename>
    <file>juce_LookAndFeel.h</file>
    <file>juce_LookAndFeel_V1.h</file>
    <file>juce_LookAndFeel_V2.h</file>
    <file>juce_LookAndFeel_V3.h</file>
  </compound>
  <compound kind="dir">
    <name>marketplace</name>
    <path>/home/juce/data/res/development/juce/modules/juce_tracktion_marketplace/marketplace/</path>
    <filename>dir_d97511bc3ec2bd34686fa8ad4161be51.html</filename>
    <file>juce_KeyFileGeneration.h</file>
    <file>juce_OnlineUnlockForm.h</file>
    <file>juce_OnlineUnlockStatus.h</file>
    <file>juce_TracktionMarketplaceStatus.h</file>
  </compound>
  <compound kind="dir">
    <name>maths</name>
    <path>/home/juce/data/res/development/juce/modules/juce_core/maths/</path>
    <filename>dir_b4d713c32a161ecf511246176088b95b.html</filename>
    <file>juce_BigInteger.h</file>
    <file>juce_Expression.h</file>
    <file>juce_MathsFunctions.h</file>
    <file>juce_NormalisableRange.h</file>
    <file>juce_Random.h</file>
    <file>juce_Range.h</file>
    <file>juce_StatisticsAccumulator.h</file>
  </compound>
  <compound kind="dir">
    <name>memory</name>
    <path>/home/juce/data/res/development/juce/modules/juce_core/memory/</path>
    <filename>dir_b14ee79e9c016db60fe534402b76f1e0.html</filename>
    <file>juce_Atomic.h</file>
    <file>juce_ByteOrder.h</file>
    <file>juce_ContainerDeletePolicy.h</file>
    <file>juce_HeapBlock.h</file>
    <file>juce_LeakedObjectDetector.h</file>
    <file>juce_Memory.h</file>
    <file>juce_MemoryBlock.h</file>
    <file>juce_OptionalScopedPointer.h</file>
    <file>juce_ReferenceCountedObject.h</file>
    <file>juce_ScopedPointer.h</file>
    <file>juce_SharedResourcePointer.h</file>
    <file>juce_Singleton.h</file>
    <file>juce_WeakReference.h</file>
  </compound>
  <compound kind="dir">
    <name>menus</name>
    <path>/home/juce/data/res/development/juce/modules/juce_gui_basics/menus/</path>
    <filename>dir_eeec8845ef079a08e0dc5564d258834a.html</filename>
    <file>juce_MenuBarComponent.h</file>
    <file>juce_MenuBarModel.h</file>
    <file>juce_PopupMenu.h</file>
  </compound>
  <compound kind="dir">
    <name>messages</name>
    <path>/home/juce/data/res/development/juce/modules/juce_events/messages/</path>
    <filename>dir_eaf8082d0210e6614222f84bf8f6fdd7.html</filename>
    <file>juce_ApplicationBase.h</file>
    <file>juce_CallbackMessage.h</file>
    <file>juce_DeletedAtShutdown.h</file>
    <file>juce_Initialisation.h</file>
    <file>juce_Message.h</file>
    <file>juce_MessageListener.h</file>
    <file>juce_MessageManager.h</file>
    <file>juce_MountedVolumeListChangeDetector.h</file>
    <file>juce_NotificationType.h</file>
  </compound>
  <compound kind="dir">
    <name>midi</name>
    <path>/home/juce/data/res/development/juce/modules/juce_audio_basics/midi/</path>
    <filename>dir_931f44622c598667929b636842d295c9.html</filename>
    <file>juce_MidiBuffer.h</file>
    <file>juce_MidiFile.h</file>
    <file>juce_MidiKeyboardState.h</file>
    <file>juce_MidiMessage.h</file>
    <file>juce_MidiMessageSequence.h</file>
    <file>juce_MidiRPN.h</file>
  </compound>
  <compound kind="dir">
    <name>midi_io</name>
    <path>/home/juce/data/res/development/juce/modules/juce_audio_devices/midi_io/</path>
    <filename>dir_9c0a183cb0ddc900d38fe86846e54309.html</filename>
    <file>juce_MidiInput.h</file>
    <file>juce_MidiMessageCollector.h</file>
    <file>juce_MidiOutput.h</file>
  </compound>
  <compound kind="dir">
    <name>misc</name>
    <path>/home/juce/data/res/development/juce/modules/juce_core/misc/</path>
    <filename>dir_b40a9385104e60b06f22b68481204d33.html</filename>
    <file>juce_Result.h</file>
    <file>juce_RuntimePermissions.h</file>
    <file>juce_Uuid.h</file>
    <file>juce_WindowsRegistry.h</file>
  </compound>
  <compound kind="dir">
    <name>misc</name>
    <path>/home/juce/data/res/development/juce/modules/juce_gui_basics/misc/</path>
    <filename>dir_7f4afdfe34c639489253952ecf7d0fba.html</filename>
    <file>juce_BubbleComponent.h</file>
    <file>juce_DropShadower.h</file>
  </compound>
  <compound kind="dir">
    <name>misc</name>
    <path>/home/juce/data/res/development/juce/modules/juce_gui_extra/misc/</path>
    <filename>dir_5b3d975795c05eb630e5c845bb3878b3.html</filename>
    <file>juce_AnimatedAppComponent.h</file>
    <file>juce_AppleRemote.h</file>
    <file>juce_BubbleMessageComponent.h</file>
    <file>juce_ColourSelector.h</file>
    <file>juce_KeyMappingEditorComponent.h</file>
    <file>juce_LiveConstantEditor.h</file>
    <file>juce_PreferencesPanel.h</file>
    <file>juce_RecentlyOpenedFilesList.h</file>
    <file>juce_SplashScreen.h</file>
    <file>juce_SystemTrayIconComponent.h</file>
    <file>juce_WebBrowserComponent.h</file>
  </compound>
  <compound kind="dir">
    <name>modules</name>
    <path>/home/juce/data/res/development/juce/modules/</path>
    <filename>dir_e05d7e2b1ecd646af5bb94391405f3b5.html</filename>
    <dir>juce_audio_basics</dir>
    <dir>juce_audio_devices</dir>
    <dir>juce_audio_formats</dir>
    <dir>juce_audio_plugin_client</dir>
    <dir>juce_audio_processors</dir>
    <dir>juce_audio_utils</dir>
    <dir>juce_blocks_basics</dir>
    <dir>juce_box2d</dir>
    <dir>juce_core</dir>
    <dir>juce_cryptography</dir>
    <dir>juce_data_structures</dir>
    <dir>juce_events</dir>
    <dir>juce_graphics</dir>
    <dir>juce_gui_basics</dir>
    <dir>juce_gui_extra</dir>
    <dir>juce_opengl</dir>
    <dir>juce_osc</dir>
    <dir>juce_tracktion_marketplace</dir>
    <dir>juce_video</dir>
  </compound>
  <compound kind="dir">
    <name>mouse</name>
    <path>/home/juce/data/res/development/juce/modules/juce_gui_basics/mouse/</path>
    <filename>dir_233eae3880446f013a610044c06bb890.html</filename>
    <file>juce_ComponentDragger.h</file>
    <file>juce_DragAndDropContainer.h</file>
    <file>juce_DragAndDropTarget.h</file>
    <file>juce_FileDragAndDropTarget.h</file>
    <file>juce_LassoComponent.h</file>
    <file>juce_MouseCursor.h</file>
    <file>juce_MouseEvent.h</file>
    <file>juce_MouseInactivityDetector.h</file>
    <file>juce_MouseInputSource.h</file>
    <file>juce_MouseListener.h</file>
    <file>juce_SelectedItemSet.h</file>
    <file>juce_TextDragAndDropTarget.h</file>
    <file>juce_TooltipClient.h</file>
  </compound>
  <compound kind="dir">
    <name>mpe</name>
    <path>/home/juce/data/res/development/juce/modules/juce_audio_basics/mpe/</path>
    <filename>dir_98adf07222426f3b72ba636069e84814.html</filename>
    <file>juce_MPEInstrument.h</file>
    <file>juce_MPEMessages.h</file>
    <file>juce_MPENote.h</file>
    <file>juce_MPESynthesiser.h</file>
    <file>juce_MPESynthesiserBase.h</file>
    <file>juce_MPESynthesiserVoice.h</file>
    <file>juce_MPEValue.h</file>
    <file>juce_MPEZone.h</file>
    <file>juce_MPEZoneLayout.h</file>
  </compound>
  <compound kind="dir">
    <name>network</name>
    <path>/home/juce/data/res/development/juce/modules/juce_core/network/</path>
    <filename>dir_c2deece60f8f40e032922bad265b6c2b.html</filename>
    <file>juce_IPAddress.h</file>
    <file>juce_MACAddress.h</file>
    <file>juce_NamedPipe.h</file>
    <file>juce_Socket.h</file>
    <file>juce_URL.h</file>
    <file>juce_WebInputStream.h</file>
  </compound>
  <compound kind="dir">
    <name>opengl</name>
    <path>/home/juce/data/res/development/juce/modules/juce_opengl/opengl/</path>
    <filename>dir_73d96a48db222fc74914b6235f92dcfa.html</filename>
    <file>juce_OpenGLContext.h</file>
    <file>juce_OpenGLFrameBuffer.h</file>
    <file>juce_OpenGLGraphicsContext.h</file>
    <file>juce_OpenGLHelpers.h</file>
    <file>juce_OpenGLImage.h</file>
    <file>juce_OpenGLPixelFormat.h</file>
    <file>juce_OpenGLRenderer.h</file>
    <file>juce_OpenGLShaderProgram.h</file>
    <file>juce_OpenGLTexture.h</file>
  </compound>
  <compound kind="dir">
    <name>osc</name>
    <path>/home/juce/data/res/development/juce/modules/juce_osc/osc/</path>
    <filename>dir_746ce5b166783d8d8936cc71371de8f5.html</filename>
    <file>juce_OSCAddress.h</file>
    <file>juce_OSCArgument.h</file>
    <file>juce_OSCBundle.h</file>
    <file>juce_OSCMessage.h</file>
    <file>juce_OSCReceiver.h</file>
    <file>juce_OSCSender.h</file>
    <file>juce_OSCTimeTag.h</file>
    <file>juce_OSCTypes.h</file>
  </compound>
  <compound kind="dir">
    <name>placement</name>
    <path>/home/juce/data/res/development/juce/modules/juce_graphics/placement/</path>
    <filename>dir_43ae3775e28d1e330df23fff7379b594.html</filename>
    <file>juce_Justification.h</file>
    <file>juce_RectanglePlacement.h</file>
  </compound>
  <compound kind="dir">
    <name>playback</name>
    <path>/home/juce/data/res/development/juce/modules/juce_video/playback/</path>
    <filename>dir_24d5b5e63cdfae66768b16561bf4f7b0.html</filename>
    <file>juce_DirectShowComponent.h</file>
    <file>juce_MovieComponent.h</file>
  </compound>
  <compound kind="dir">
    <name>players</name>
    <path>/home/juce/data/res/development/juce/modules/juce_audio_utils/players/</path>
    <filename>dir_5333ae6b4ff5c51e9a7a504c03c6d24d.html</filename>
    <file>juce_AudioProcessorPlayer.h</file>
    <file>juce_SoundPlayer.h</file>
  </compound>
  <compound kind="dir">
    <name>positioning</name>
    <path>/home/juce/data/res/development/juce/modules/juce_gui_basics/positioning/</path>
    <filename>dir_34279e113336392f88c2a0224f11e368.html</filename>
    <file>juce_MarkerList.h</file>
    <file>juce_RelativeCoordinate.h</file>
    <file>juce_RelativeCoordinatePositioner.h</file>
    <file>juce_RelativeParallelogram.h</file>
    <file>juce_RelativePoint.h</file>
    <file>juce_RelativePointPath.h</file>
    <file>juce_RelativeRectangle.h</file>
  </compound>
  <compound kind="dir">
    <name>processors</name>
    <path>/home/juce/data/res/development/juce/modules/juce_audio_processors/processors/</path>
    <filename>dir_b4f32ab1845ca7cdc3b5e5b24298936f.html</filename>
    <file>juce_AudioPlayHead.h</file>
    <file>juce_AudioPluginInstance.h</file>
    <file>juce_AudioProcessor.h</file>
    <file>juce_AudioProcessorEditor.h</file>
    <file>juce_AudioProcessorGraph.h</file>
    <file>juce_AudioProcessorListener.h</file>
    <file>juce_AudioProcessorParameter.h</file>
    <file>juce_GenericAudioProcessorEditor.h</file>
    <file>juce_PluginDescription.h</file>
  </compound>
  <compound kind="dir">
    <name>properties</name>
    <path>/home/juce/data/res/development/juce/modules/juce_gui_basics/properties/</path>
    <filename>dir_813c9154f1dcd7f15fd01cc1f2b13646.html</filename>
    <file>juce_BooleanPropertyComponent.h</file>
    <file>juce_ButtonPropertyComponent.h</file>
    <file>juce_ChoicePropertyComponent.h</file>
    <file>juce_PropertyComponent.h</file>
    <file>juce_PropertyPanel.h</file>
    <file>juce_SliderPropertyComponent.h</file>
    <file>juce_TextPropertyComponent.h</file>
  </compound>
  <compound kind="dir">
    <name>protocol</name>
    <path>/home/juce/data/res/development/juce/modules/juce_blocks_basics/protocol/</path>
    <filename>dir_b448b6de57e13260c1a9b14fa35dfe8c.html</filename>
    <file>juce_BitPackingUtilities.h</file>
    <file>juce_BlockModels.h</file>
    <file>juce_BlocksProtocolDefinitions.h</file>
    <file>juce_HostPacketBuilder.h</file>
    <file>juce_HostPacketDecoder.h</file>
  </compound>
  <compound kind="dir">
    <name>RTAS</name>
    <path>/home/juce/data/res/development/juce/modules/juce_audio_plugin_client/RTAS/</path>
    <filename>dir_10587582ff3eb202e8ae96f1b0d8f899.html</filename>
    <file>juce_RTAS_DigiCode_Header.h</file>
  </compound>
  <compound kind="dir">
    <name>sampler</name>
    <path>/home/juce/data/res/development/juce/modules/juce_audio_formats/sampler/</path>
    <filename>dir_948edb98fddcca43971b8f202f0278bd.html</filename>
    <file>juce_Sampler.h</file>
  </compound>
  <compound kind="dir">
    <name>scanning</name>
    <path>/home/juce/data/res/development/juce/modules/juce_audio_processors/scanning/</path>
    <filename>dir_2eb064359262a830a679cc5a2c761b6a.html</filename>
    <file>juce_KnownPluginList.h</file>
    <file>juce_PluginDirectoryScanner.h</file>
    <file>juce_PluginListComponent.h</file>
  </compound>
  <compound kind="dir">
    <name>sources</name>
    <path>/home/juce/data/res/development/juce/modules/juce_audio_devices/sources/</path>
    <filename>dir_3a2fa07bcd1dd3e01d18b312e9fe73d7.html</filename>
    <file>juce_AudioSourcePlayer.h</file>
    <file>juce_AudioTransportSource.h</file>
  </compound>
  <compound kind="dir">
    <name>sources</name>
    <path>/home/juce/data/res/development/juce/modules/juce_audio_basics/sources/</path>
    <filename>dir_d41c455df3d0f36c81f98921c3235c75.html</filename>
    <file>juce_AudioSource.h</file>
    <file>juce_BufferingAudioSource.h</file>
    <file>juce_ChannelRemappingAudioSource.h</file>
    <file>juce_IIRFilterAudioSource.h</file>
    <file>juce_MixerAudioSource.h</file>
    <file>juce_PositionableAudioSource.h</file>
    <file>juce_ResamplingAudioSource.h</file>
    <file>juce_ReverbAudioSource.h</file>
    <file>juce_ToneGeneratorAudioSource.h</file>
  </compound>
  <compound kind="dir">
    <name>Standalone</name>
    <path>/home/juce/data/res/development/juce/modules/juce_audio_plugin_client/Standalone/</path>
    <filename>dir_4f6829948053b325d6b201de5627acd4.html</filename>
    <file>juce_StandaloneFilterWindow.h</file>
  </compound>
  <compound kind="dir">
    <name>streams</name>
    <path>/home/juce/data/res/development/juce/modules/juce_core/streams/</path>
    <filename>dir_0d31e411142695dc4add552e9ff0c68a.html</filename>
    <file>juce_BufferedInputStream.h</file>
    <file>juce_FileInputSource.h</file>
    <file>juce_InputSource.h</file>
    <file>juce_InputStream.h</file>
    <file>juce_MemoryInputStream.h</file>
    <file>juce_MemoryOutputStream.h</file>
    <file>juce_OutputStream.h</file>
    <file>juce_SubregionStream.h</file>
  </compound>
  <compound kind="dir">
    <name>synthesisers</name>
    <path>/home/juce/data/res/development/juce/modules/juce_audio_basics/synthesisers/</path>
    <filename>dir_a518d83f1aa0a8d45b0276241eb17275.html</filename>
    <file>juce_Synthesiser.h</file>
  </compound>
  <compound kind="dir">
    <name>system</name>
    <path>/home/juce/data/res/development/juce/modules/juce_core/system/</path>
    <filename>dir_9e9b0212072a26af3f99e9be2bb0e9d5.html</filename>
    <file>juce_CompilerSupport.h</file>
    <file>juce_PlatformDefs.h</file>
    <file>juce_StandardHeader.h</file>
    <file>juce_SystemStats.h</file>
    <file>juce_TargetPlatform.h</file>
  </compound>
  <compound kind="dir">
    <name>text</name>
    <path>/home/juce/data/res/development/juce/modules/juce_core/text/</path>
    <filename>dir_6b16f369a377c1fbd0a712c80fb95cfe.html</filename>
    <file>juce_Base64.h</file>
    <file>juce_CharacterFunctions.h</file>
    <file>juce_CharPointer_ASCII.h</file>
    <file>juce_CharPointer_UTF16.h</file>
    <file>juce_CharPointer_UTF32.h</file>
    <file>juce_CharPointer_UTF8.h</file>
    <file>juce_Identifier.h</file>
    <file>juce_LocalisedStrings.h</file>
    <file>juce_NewLine.h</file>
    <file>juce_String.h</file>
    <file>juce_StringArray.h</file>
    <file>juce_StringPairArray.h</file>
    <file>juce_StringPool.h</file>
    <file>juce_StringRef.h</file>
    <file>juce_TextDiff.h</file>
  </compound>
  <compound kind="dir">
    <name>threads</name>
    <path>/home/juce/data/res/development/juce/modules/juce_core/threads/</path>
    <filename>dir_ad5145ef40e44dce66b04dc4356c692d.html</filename>
    <file>juce_ChildProcess.h</file>
    <file>juce_CriticalSection.h</file>
    <file>juce_DynamicLibrary.h</file>
    <file>juce_HighResolutionTimer.h</file>
    <file>juce_InterProcessLock.h</file>
    <file>juce_Process.h</file>
    <file>juce_ReadWriteLock.h</file>
    <file>juce_ScopedLock.h</file>
    <file>juce_ScopedReadLock.h</file>
    <file>juce_ScopedWriteLock.h</file>
    <file>juce_SpinLock.h</file>
    <file>juce_Thread.h</file>
    <file>juce_ThreadLocalValue.h</file>
    <file>juce_ThreadPool.h</file>
    <file>juce_TimeSliceThread.h</file>
    <file>juce_WaitableEvent.h</file>
  </compound>
  <compound kind="dir">
    <name>time</name>
    <path>/home/juce/data/res/development/juce/modules/juce_core/time/</path>
    <filename>dir_385bafc63234270ac89e3824e645fab7.html</filename>
    <file>juce_PerformanceCounter.h</file>
    <file>juce_RelativeTime.h</file>
    <file>juce_Time.h</file>
  </compound>
  <compound kind="dir">
    <name>timers</name>
    <path>/home/juce/data/res/development/juce/modules/juce_events/timers/</path>
    <filename>dir_112ca530f1cf787c744a66f47839cba5.html</filename>
    <file>juce_MultiTimer.h</file>
    <file>juce_Timer.h</file>
  </compound>
  <compound kind="dir">
    <name>topology</name>
    <path>/home/juce/data/res/development/juce/modules/juce_blocks_basics/topology/</path>
    <filename>dir_b252f865860b97d54be775b71b0e8aea.html</filename>
    <file>juce_PhysicalTopologySource.h</file>
    <file>juce_RuleBasedTopologySource.h</file>
    <file>juce_Topology.h</file>
    <file>juce_TopologySource.h</file>
  </compound>
  <compound kind="dir">
    <name>undomanager</name>
    <path>/home/juce/data/res/development/juce/modules/juce_data_structures/undomanager/</path>
    <filename>dir_7d8423fe22f66c61c3953188dda1cac3.html</filename>
    <file>juce_UndoableAction.h</file>
    <file>juce_UndoManager.h</file>
  </compound>
  <compound kind="dir">
    <name>unit_tests</name>
    <path>/home/juce/data/res/development/juce/modules/juce_core/unit_tests/</path>
    <filename>dir_a497a1c44eca8bab78c059c6df687a89.html</filename>
    <file>juce_UnitTest.h</file>
  </compound>
  <compound kind="dir">
    <name>utilities</name>
    <path>/home/juce/data/res/development/juce/modules/juce_audio_processors/utilities/</path>
    <filename>dir_a6b9afd94c1592cf46966656f9fe65af.html</filename>
    <file>juce_AudioParameterBool.h</file>
    <file>juce_AudioParameterChoice.h</file>
    <file>juce_AudioParameterFloat.h</file>
    <file>juce_AudioParameterInt.h</file>
    <file>juce_AudioProcessorParameterWithID.h</file>
    <file>juce_AudioProcessorValueTreeState.h</file>
  </compound>
  <compound kind="dir">
    <name>utility</name>
    <path>/home/juce/data/res/development/juce/modules/juce_audio_plugin_client/utility/</path>
    <filename>dir_e1f73d6975fa7ced81d6b97ecd22335a.html</filename>
    <file>juce_CarbonVisibility.h</file>
    <file>juce_CheckSettingMacros.h</file>
    <file>juce_FakeMouseMoveGenerator.h</file>
    <file>juce_IncludeModuleHeaders.h</file>
    <file>juce_IncludeSystemHeaders.h</file>
    <file>juce_PluginHostType.h</file>
    <file>juce_WindowsHooks.h</file>
  </compound>
  <compound kind="dir">
    <name>utils</name>
    <path>/home/juce/data/res/development/juce/modules/juce_opengl/utils/</path>
    <filename>dir_14ea04f511a9eebe58d1a3b1f2b1b578.html</filename>
    <file>juce_OpenGLAppComponent.h</file>
  </compound>
  <compound kind="dir">
    <name>utils</name>
    <path>/home/juce/data/res/development/juce/modules/juce_box2d/utils/</path>
    <filename>dir_ac3f85558923e503b210da4c81fbac0d.html</filename>
    <file>juce_Box2DRenderer.h</file>
  </compound>
  <compound kind="dir">
    <name>values</name>
    <path>/home/juce/data/res/development/juce/modules/juce_data_structures/values/</path>
    <filename>dir_53ef6c936ecdbb0e82f82f528a0c9d5a.html</filename>
    <file>juce_CachedValue.h</file>
    <file>juce_Value.h</file>
    <file>juce_ValueTree.h</file>
    <file>juce_ValueTreeSynchroniser.h</file>
  </compound>
  <compound kind="dir">
    <name>visualisers</name>
    <path>/home/juce/data/res/development/juce/modules/juce_blocks_basics/visualisers/</path>
    <filename>dir_f2aaf6d5eaf323a11a355f92ec5a9870.html</filename>
    <file>juce_BitmapLEDProgram.h</file>
    <file>juce_DrumPadLEDProgram.h</file>
  </compound>
  <compound kind="dir">
    <name>VST</name>
    <path>/home/juce/data/res/development/juce/modules/juce_audio_plugin_client/VST/</path>
    <filename>dir_1892623e42c4dfc824ebd88711468935.html</filename>
    <file>juce_VSTCallbackHandler.h</file>
  </compound>
  <compound kind="dir">
    <name>widgets</name>
    <path>/home/juce/data/res/development/juce/modules/juce_gui_basics/widgets/</path>
    <filename>dir_33ac7aa0e4688aaa2b105dcad9c3fcbe.html</filename>
    <file>juce_ComboBox.h</file>
    <file>juce_ImageComponent.h</file>
    <file>juce_Label.h</file>
    <file>juce_ListBox.h</file>
    <file>juce_ProgressBar.h</file>
    <file>juce_Slider.h</file>
    <file>juce_TableHeaderComponent.h</file>
    <file>juce_TableListBox.h</file>
    <file>juce_TextEditor.h</file>
    <file>juce_Toolbar.h</file>
    <file>juce_ToolbarItemComponent.h</file>
    <file>juce_ToolbarItemFactory.h</file>
    <file>juce_ToolbarItemPalette.h</file>
    <file>juce_TreeView.h</file>
  </compound>
  <compound kind="dir">
    <name>windows</name>
    <path>/home/juce/data/res/development/juce/modules/juce_gui_basics/windows/</path>
    <filename>dir_397bce7e0c693ae791b48e4eed0023cf.html</filename>
    <file>juce_AlertWindow.h</file>
    <file>juce_CallOutBox.h</file>
    <file>juce_ComponentPeer.h</file>
    <file>juce_DialogWindow.h</file>
    <file>juce_DocumentWindow.h</file>
    <file>juce_NativeMessageBox.h</file>
    <file>juce_ResizableWindow.h</file>
    <file>juce_ThreadWithProgressWindow.h</file>
    <file>juce_TooltipWindow.h</file>
    <file>juce_TopLevelWindow.h</file>
  </compound>
  <compound kind="dir">
    <name>xml</name>
    <path>/home/juce/data/res/development/juce/modules/juce_core/xml/</path>
    <filename>dir_818c3b8be7dc56d5eb5a3eefd41effea.html</filename>
    <file>juce_XmlDocument.h</file>
    <file>juce_XmlElement.h</file>
  </compound>
  <compound kind="dir">
    <name>zip</name>
    <path>/home/juce/data/res/development/juce/modules/juce_core/zip/</path>
    <filename>dir_ab7061c66eaedef3c016699f5e3425d3.html</filename>
    <file>juce_GZIPCompressorOutputStream.h</file>
    <file>juce_GZIPDecompressorInputStream.h</file>
    <file>juce_ZipFile.h</file>
  </compound>
</tagfile>
